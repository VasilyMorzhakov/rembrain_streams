/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.rembrain_streams=e():t.rembrain_streams=e()}(self,(function(){return(()=>{var __webpack_modules__={9742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),r=e[0],i=e[1];return 3*(r+i)/4-i},e.toByteArray=function(t){var e,r,s=h(t),o=s[0],a=s[1],l=new n(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),u=0,c=a>0?o-4:o;for(r=0;r<c;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],l[u++]=e>>16&255,l[u++]=e>>8&255,l[u++]=255&e;return 2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,l[u++]=255&e),1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,l[u++]=e>>8&255,l[u++]=255&e),l},e.fromByteArray=function(t){for(var e,i=t.length,n=i%3,s=[],o=16383,a=0,h=i-n;a<h;a+=o)s.push(l(t,a,a+o>h?h:a+o));return 1===n?(e=t[i-1],s.push(r[e>>2]+r[e<<4&63]+"==")):2===n&&(e=(t[i-2]<<8)+t[i-1],s.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),s.join("")};for(var r=[],i=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=s.length;o<a;++o)r[o]=s[o],i[s.charCodeAt(o)]=o;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,i){for(var n,s,o=[],a=e;a<i;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(r[(s=n)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},8764:(t,e,r)=>{"use strict";const i=r(9742),n=r(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=h,e.h2=50;const o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return l(t,e,r)}function l(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|m(t,e);let i=a(r);const n=i.write(t,e);return n!==r&&(i=i.slice(0,n)),i}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Z(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Z(t,ArrayBuffer)||t&&Z(t.buffer,ArrayBuffer))return d(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(t,SharedArrayBuffer)||t&&Z(t.buffer,SharedArrayBuffer)))return d(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const i=t.valueOf&&t.valueOf();if(null!=i&&i!==t)return h.from(i,e,r);const n=function(t){if(h.isBuffer(t)){const e=0|p(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||H(t.length)?a(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return u(t),a(t<0?0:0|p(t))}function f(t){const e=t.length<0?0:0|p(t.length),r=a(e);for(let i=0;i<e;i+=1)r[i]=255&t[i];return r}function d(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let i;return i=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(i,h.prototype),i}function p(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function m(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Z(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===r)return 0;let n=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return G(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(t).length;default:if(n)return i?-1:G(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){let i=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return D(this,e,r);case"utf8":case"utf-8":return E(this,e,r);case"ascii":return C(this,e,r);case"latin1":case"binary":return I(this,e,r);case"base64":return M(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,r);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0}}function w(t,e,r){const i=t[e];t[e]=t[r],t[r]=i}function b(t,e,r,i,n){if(0===t.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),H(r=+r)&&(r=n?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(n)return-1;r=t.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof e&&(e=h.from(e,i)),h.isBuffer(e))return 0===e.length?-1:y(t,e,r,i,n);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):y(t,[e],r,i,n);throw new TypeError("val must be string, number or Buffer")}function y(t,e,r,i,n){let s,o=1,a=t.length,h=e.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(t.length<2||e.length<2)return-1;o=2,a/=2,h/=2,r/=2}function l(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(n){let i=-1;for(s=r;s<a;s++)if(l(t,s)===l(e,-1===i?0:s-i)){if(-1===i&&(i=s),s-i+1===h)return i*o}else-1!==i&&(s-=s-i),i=-1}else for(r+h>a&&(r=a-h),s=r;s>=0;s--){let r=!0;for(let i=0;i<h;i++)if(l(t,s+i)!==l(e,i)){r=!1;break}if(r)return s}return-1}function _(t,e,r,i){r=Number(r)||0;const n=t.length-r;i?(i=Number(i))>n&&(i=n):i=n;const s=e.length;let o;for(i>s/2&&(i=s/2),o=0;o<i;++o){const i=parseInt(e.substr(2*o,2),16);if(H(i))return o;t[r+o]=i}return o}function v(t,e,r,i){return W(G(e,t.length-r),t,r,i)}function x(t,e,r,i){return W(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,i)}function k(t,e,r,i){return W($(e),t,r,i)}function A(t,e,r,i){return W(function(t,e){let r,i,n;const s=[];for(let o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),i=r>>8,n=r%256,s.push(n),s.push(i);return s}(e,t.length-r),t,r,i)}function M(t,e,r){return 0===e&&r===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,r))}function E(t,e,r){r=Math.min(t.length,r);const i=[];let n=e;for(;n<r;){const e=t[n];let s=null,o=e>239?4:e>223?3:e>191?2:1;if(n+o<=r){let r,i,a,h;switch(o){case 1:e<128&&(s=e);break;case 2:r=t[n+1],128==(192&r)&&(h=(31&e)<<6|63&r,h>127&&(s=h));break;case 3:r=t[n+1],i=t[n+2],128==(192&r)&&128==(192&i)&&(h=(15&e)<<12|(63&r)<<6|63&i,h>2047&&(h<55296||h>57343)&&(s=h));break;case 4:r=t[n+1],i=t[n+2],a=t[n+3],128==(192&r)&&128==(192&i)&&128==(192&a)&&(h=(15&e)<<18|(63&r)<<12|(63&i)<<6|63&a,h>65535&&h<1114112&&(s=h))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,i.push(s>>>10&1023|55296),s=56320|1023&s),i.push(s),n+=o}return function(t){const e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);let r="",i=0;for(;i<e;)r+=String.fromCharCode.apply(String,t.slice(i,i+=S));return r}(i)}h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,r){return l(t,e,r)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,r){return function(t,e,r){return u(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if(Z(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),Z(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,i=e.length;for(let n=0,s=Math.min(r,i);n<s;++n)if(t[n]!==e[n]){r=t[n],i=e[n];break}return r<i?-1:i<r?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const i=h.allocUnsafe(e);let n=0;for(r=0;r<t.length;++r){let e=t[r];if(Z(e,Uint8Array))n+e.length>i.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(i,n)):Uint8Array.prototype.set.call(i,e,n);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(i,n)}n+=e.length}return i},h.byteLength=m,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)w(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?E(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(h.prototype[s]=h.prototype.inspect),h.prototype.compare=function(t,e,r,i,n){if(Z(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===i&&(i=0),void 0===n&&(n=this.length),e<0||r>t.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&e>=r)return 0;if(i>=n)return-1;if(e>=r)return 1;if(this===t)return 0;let s=(n>>>=0)-(i>>>=0),o=(r>>>=0)-(e>>>=0);const a=Math.min(s,o),l=this.slice(i,n),u=t.slice(e,r);for(let t=0;t<a;++t)if(l[t]!==u[t]){s=l[t],o=u[t];break}return s<o?-1:o<s?1:0},h.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},h.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},h.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},h.prototype.write=function(t,e,r,i){if(void 0===e)i="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)i=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}const n=this.length-e;if((void 0===r||r>n)&&(r=n),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let s=!1;for(;;)switch(i){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return x(this,t,e,r);case"base64":return k(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function C(t,e,r){let i="";r=Math.min(t.length,r);for(let n=e;n<r;++n)i+=String.fromCharCode(127&t[n]);return i}function I(t,e,r){let i="";r=Math.min(t.length,r);for(let n=e;n<r;++n)i+=String.fromCharCode(t[n]);return i}function D(t,e,r){const i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);let n="";for(let i=e;i<r;++i)n+=K[t[i]];return n}function P(t,e,r){const i=t.slice(e,r);let n="";for(let t=0;t<i.length-1;t+=2)n+=String.fromCharCode(i[t]+256*i[t+1]);return n}function B(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,r,i,n,s){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(r+i>t.length)throw new RangeError("Index out of range")}function T(t,e,r,i,n){Y(e,i,n,t,r,7);let s=Number(e&BigInt(4294967295));t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,r}function U(t,e,r,i,n){Y(e,i,n,t,r,7);let s=Number(e&BigInt(4294967295));t[r+7]=s,s>>=8,t[r+6]=s,s>>=8,t[r+5]=s,s>>=8,t[r+4]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=o,o>>=8,t[r+2]=o,o>>=8,t[r+1]=o,o>>=8,t[r]=o,r+8}function O(t,e,r,i,n,s){if(r+i>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,i,s){return e=+e,r>>>=0,s||O(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function F(t,e,r,i,s){return e=+e,r>>>=0,s||O(t,0,r,8),n.write(t,e,r,i,52,8),r+8}h.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const i=this.subarray(t,e);return Object.setPrototypeOf(i,h.prototype),i},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t],n=1,s=0;for(;++s<e&&(n*=256);)i+=this[t+s]*n;return i},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t+--e],n=1;for(;e>0&&(n*=256);)i+=this[t+--e]*n;return i},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||B(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||B(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||B(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||B(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||B(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(i)+(BigInt(n)<<BigInt(32))})),h.prototype.readBigUInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=e*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(i)<<BigInt(32))+BigInt(n)})),h.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t],n=1,s=0;for(;++s<e&&(n*=256);)i+=this[t+s]*n;return n*=128,i>=n&&(i-=Math.pow(2,8*e)),i},h.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=e,n=1,s=this[t+--i];for(;i>0&&(n*=256);)s+=this[t+--i]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*e)),s},h.prototype.readInt8=function(t,e){return t>>>=0,e||B(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||B(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt16BE=function(t,e){t>>>=0,e||B(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||B(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||B(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(i)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(i)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||B(t,4,this.length),n.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||B(t,4,this.length),n.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||B(t,8,this.length),n.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||B(t,8,this.length),n.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||R(this,t,e,r,Math.pow(2,8*r)-1,0);let n=1,s=0;for(this[e]=255&t;++s<r&&(n*=256);)this[e+s]=t/n&255;return e+r},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||R(this,t,e,r,Math.pow(2,8*r)-1,0);let n=r-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+r},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=J((function(t,e=0){return T(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=J((function(t,e=0){return U(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,r,i){if(t=+t,e>>>=0,!i){const i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}let n=0,s=1,o=0;for(this[e]=255&t;++n<r&&(s*=256);)t<0&&0===o&&0!==this[e+n-1]&&(o=1),this[e+n]=(t/s>>0)-o&255;return e+r},h.prototype.writeIntBE=function(t,e,r,i){if(t=+t,e>>>=0,!i){const i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}let n=r-1,s=1,o=0;for(this[e+n]=255&t;--n>=0&&(s*=256);)t<0&&0===o&&0!==this[e+n+1]&&(o=1),this[e+n]=(t/s>>0)-o&255;return e+r},h.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=J((function(t,e=0){return T(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=J((function(t,e=0){return U(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},h.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},h.prototype.writeDoubleLE=function(t,e,r){return F(this,t,e,!0,r)},h.prototype.writeDoubleBE=function(t,e,r){return F(this,t,e,!1,r)},h.prototype.copy=function(t,e,r,i){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),i||0===i||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-r&&(i=t.length-e+r);const n=i-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,i):Uint8Array.prototype.set.call(t,this.subarray(r,i),e),n},h.prototype.fill=function(t,e,r,i){if("string"==typeof t){if("string"==typeof e?(i=e,e=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!h.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===t.length){const e=t.charCodeAt(0);("utf8"===i&&e<128||"latin1"===i)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let n;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(n=e;n<r;++n)this[n]=t;else{const s=h.isBuffer(t)?t:h.from(t,i),o=s.length;if(0===o)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<r-e;++n)this[n+e]=s[n%o]}return this};const N={};function z(t,e,r){N[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function j(t){let e="",r=t.length;const i="-"===t[0]?1:0;for(;r>=i+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function Y(t,e,r,i,n,s){if(t>r||t<e){const i="bigint"==typeof e?"n":"";let n;throw n=s>3?0===e||e===BigInt(0)?`>= 0${i} and < 2${i} ** ${8*(s+1)}${i}`:`>= -(2${i} ** ${8*(s+1)-1}${i}) and < 2 ** ${8*(s+1)-1}${i}`:`>= ${e}${i} and <= ${r}${i}`,new N.ERR_OUT_OF_RANGE("value",n,t)}!function(t,e,r){V(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||q(e,t.length-(r+1))}(i,n,s)}function V(t,e){if("number"!=typeof t)throw new N.ERR_INVALID_ARG_TYPE(e,"number",t)}function q(t,e,r){if(Math.floor(t)!==t)throw V(t,r),new N.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new N.ERR_BUFFER_OUT_OF_BOUNDS;throw new N.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}z("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),z("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),z("ERR_OUT_OF_RANGE",(function(t,e,r){let i=`The value of "${t}" is out of range.`,n=r;return Number.isInteger(r)&&Math.abs(r)>2**32?n=j(String(r)):"bigint"==typeof r&&(n=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(n=j(n)),n+="n"),i+=` It must be ${e}. Received ${n}`,i}),RangeError);const X=/[^+/0-9A-Za-z-_]/g;function G(t,e){let r;e=e||1/0;const i=t.length;let n=null;const s=[];for(let o=0;o<i;++o){if(r=t.charCodeAt(o),r>55295&&r<57344){if(!n){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===i){(e-=3)>-1&&s.push(239,191,189);continue}n=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function $(t){return i.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(X,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function W(t,e,r,i){let n;for(n=0;n<i&&!(n+r>=e.length||n>=t.length);++n)e[n+r]=t[n];return n}function Z(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function H(t){return t!=t}const K=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const i=16*r;for(let n=0;n<16;++n)e[i+n]=t[r]+t[n]}return e}();function J(t){return"undefined"==typeof BigInt?Q:t}function Q(){throw new Error("BigInt not supported")}},6655:(t,e,r)=>{var i=r(6679);t.exports=function(t,e,r){var s="SVG"===t.nodeName.toUpperCase();return t.style.position=t.style.position||"absolute",t.style.top=0,t.style.left=0,o.scale=parseFloat(r||1),o.parent=e,o();function o(){var e=o.parent||t.parentNode;if("function"==typeof e)var r=e(n)||n,a=r[0],h=r[1];else if(e&&e!==document.body){var l=i(e);a=0|l[0],h=0|l[1]}else a=window.innerWidth,h=window.innerHeight;return s?(t.setAttribute("width",a*o.scale+"px"),t.setAttribute("height",h*o.scale+"px")):(t.width=a*o.scale,t.height=h*o.scale),t.style.width=a+"px",t.style.height=h+"px",o}};var n=new Float32Array(2)},4645:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var i=r(7537),n=r.n(i),s=r(3645),o=r.n(s)()(n());o.push([t.id,".debug-operator-container{display:flex;flex-direction:row}.debug-operator-container .controls{display:inline-flex;vertical-align:top;flex-direction:column-reverse;margin-right:10px;margin-left:10px}.debug-operator-container .operator-buttons{flex-grow:1}.debug-operator-container .input-container{padding:5px;margin-bottom:5px;align-items:center;grid-auto-rows:25px;grid-row-gap:5px;grid-column-gap:5px}.debug-operator-container .connection{display:grid;grid-template-columns:.7fr 2fr}.debug-operator-container .connection>span{text-align:right}.debug-operator-container .joint-controls{display:grid;grid-template-columns:20px repeat(2, 1fr) 100px repeat(2, 1fr);grid-column-gap:5px;align-items:center}.debug-operator-container .joint-controls .joint-num{text-align:right}.debug-operator-container .joint-controls .joint-degrees{text-align:center}.debug-operator-container .joint-controls+.joint-controls{margin-top:10px}.debug-operator-container .vacuum{display:grid;grid-template-columns:repeat(2, 1fr)}.debug-operator-container .calibration{border-radius:5px;padding:5px;margin-bottom:5px;align-items:center}.debug-operator-container .calibration>div+div{margin-top:10px}.debug-operator-container .calibration>.tags{display:grid;grid-auto-rows:25px;grid-column-gap:5px}.debug-operator-container .btn-send-home{width:100%;margin-top:7px;margin-bottom:7px}.debug-operator-container .depth-view{width:320px;height:180px}.debug-operator-container .camera-view{width:854px;height:480px}.debug-operator-container .debug-command-container{width:100%;display:flex;flex-direction:row}.debug-operator-container .command-item-container{display:flex;flex-direction:row;flex-wrap:wrap;height:max-content !important}.debug-operator-container .command-item{margin:5px;font-size:1.1em;min-width:100px;background-color:#d3d3d3;display:flex;flex-direction:row;justify-content:space-between;align-content:center;align-items:center;flex-grow:1;border-radius:5px;height:max-content !important;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-o-user-select:none;user-select:none;cursor:pointer}.debug-operator-container .command-item>span{margin-left:10px}.debug-operator-container .command-item-icon{filter:brightness(0.9);padding:7px 12px;display:flex;align-items:center;align-content:center;background-color:#d3d3d3}.debug-operator-container .command-input{width:max-content;padding:6px;border-radius:5px;height:max-content !important}.debug-operator-container .command-input-item{display:flex;flex-direction:column}.debug-operator-container .command-input-item>span{margin-top:5px;margin-bottom:5px}.debug-operator-container .command-item:hover{filter:brightness(0.9)}.debug-operator-container .debug-operator-info-container{display:flex;flex-direction:row;justify-content:space-around}","",{version:3,sources:["webpack://./src/web-operators/operator-debug.scss"],names:[],mappings:"AAAA,0BACE,YAAA,CACA,kBAAA,CACA,oCACE,mBAAA,CAEA,kBAAA,CACA,6BAAA,CACA,iBAAA,CACA,gBAAA,CAEF,4CACE,WAAA,CAEF,2CACE,WAAA,CACA,iBAAA,CACA,kBAAA,CACA,mBAAA,CACA,gBAAA,CACA,mBAAA,CAGF,sCACE,YAAA,CACA,8BAAA,CAEF,2CACE,gBAAA,CAGF,0CACE,YAAA,CACA,8DAAA,CACA,mBAAA,CACA,kBAAA,CAEA,qDACE,gBAAA,CAGF,yDACE,iBAAA,CAIJ,0DACE,eAAA,CAGF,kCACE,YAAA,CACA,oCAAA,CAEF,uCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAEF,+CACE,eAAA,CAEF,6CACE,YAAA,CACA,mBAAA,CACA,mBAAA,CAGF,yCACE,UAAA,CACA,cAAA,CACA,iBAAA,CAGF,sCACE,WAAA,CACA,YAAA,CAGF,uCACE,WAAA,CACA,YAAA,CAEF,mDACE,UAAA,CACA,YAAA,CACA,kBAAA,CAEF,kDACE,YAAA,CACA,kBAAA,CACA,cAAA,CACA,6BAAA,CAEF,wCACE,UAAA,CACA,eAAA,CACA,eAAA,CACA,wBAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CACA,WAAA,CACA,iBAAA,CACA,6BAAA,CACA,wBAAA,CACA,uBAAA,CACA,qBAAA,CACA,mBAAA,CACA,gBAAA,CACA,cAAA,CAEF,6CACE,gBAAA,CAEF,6CACE,sBAAA,CACA,gBAAA,CACA,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,wBAAA,CAEF,yCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CAEA,6BAAA,CAEF,8CACE,YAAA,CACA,qBAAA,CAEF,mDACE,cAAA,CACA,iBAAA,CAEF,8CACE,sBAAA,CAEF,yDACE,YAAA,CACA,kBAAA,CACA,4BAAA",sourcesContent:[".debug-operator-container {\n  display: flex;\n  flex-direction: row;\n  .controls {\n    display: inline-flex;\n\n    vertical-align: top;\n    flex-direction: column-reverse;\n    margin-right: 10px;\n    margin-left: 10px;\n  }\n  .operator-buttons {\n    flex-grow: 1;\n  }\n  .input-container {\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n    grid-auto-rows: 25px;\n    grid-row-gap: 5px;\n    grid-column-gap: 5px;\n  }\n\n  .connection {\n    display: grid;\n    grid-template-columns: 0.7fr 2fr;\n  }\n  .connection > span {\n    text-align: right;\n  }\n\n  .joint-controls {\n    display: grid;\n    grid-template-columns: 20px repeat(2, 1fr) 100px repeat(2, 1fr);\n    grid-column-gap: 5px;\n    align-items: center;\n\n    .joint-num {\n      text-align: right;\n    }\n\n    .joint-degrees {\n      text-align: center;\n    }\n  }\n\n  .joint-controls + .joint-controls {\n    margin-top: 10px;\n  }\n\n  .vacuum {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .calibration {\n    border-radius: 5px;\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n  }\n  .calibration > div + div {\n    margin-top: 10px;\n  }\n  .calibration > .tags {\n    display: grid;\n    grid-auto-rows: 25px;\n    grid-column-gap: 5px;\n  }\n\n  .btn-send-home {\n    width: 100%;\n    margin-top: 7px;\n    margin-bottom: 7px;\n  }\n\n  .depth-view {\n    width: 320px;\n    height: 180px;\n  }\n\n  .camera-view {\n    width: 854px;\n    height: 480px;\n  }\n  .debug-command-container {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n  .command-item-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    height: max-content !important;\n  }\n  .command-item {\n    margin: 5px;\n    font-size: 1.1em;\n    min-width: 100px;\n    background-color: lightgray;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-content: center;\n    align-items: center;\n    flex-grow: 1;\n    border-radius: 5px;\n    height: max-content !important;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    cursor: pointer;\n  }\n  .command-item > span {\n    margin-left: 10px;\n  }\n  .command-item-icon {\n    filter: brightness(0.9);\n    padding: 7px 12px;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    background-color: lightgray;\n  }\n  .command-input {\n    width: max-content;\n    padding: 6px;\n    border-radius: 5px;\n\n    height: max-content !important;\n  }\n  .command-input-item {\n    display: flex;\n    flex-direction: column;\n  }\n  .command-input-item > span {\n    margin-top: 5px;\n    margin-bottom: 5px;\n  }\n  .command-item:hover {\n    filter: brightness(0.9);\n  }\n  .debug-operator-info-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n}\n"],sourceRoot:""}]);const a=o},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",i=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),i&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),i&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,i,n,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);i&&o[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),n&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=n):u[4]="".concat(n)),e.push(u))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(n," */"),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([s]).join("\n")}return[e].join("\n")}},6679:t=>{function e(t){return parseFloat(t)||0}t.exports=function(t){if(t===window||t===document.body)return[window.innerWidth,window.innerHeight];if(!t.parentNode){var r=!0;document.body.appendChild(t)}var i=t.getBoundingClientRect(),n=getComputedStyle(t),s=(0|i.height)+e(n.getPropertyValue("margin-top"))+e(n.getPropertyValue("margin-bottom")),o=(0|i.width)+e(n.getPropertyValue("margin-left"))+e(n.getPropertyValue("margin-right"));return r&&document.body.removeChild(t),[o,s]}},5372:(t,e,r)=>{"use strict";const i=r(7458),n=[];t.exports=class{constructor(t,e){e=e||{};var r=!1;void 0===t&&(t=8192),"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this._lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0;let n=t.byteLength-i,s=i;t.buffer&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this._lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t){return void 0===t&&(t=1),this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),n.length=t;for(var e=0;e<t;e++)n[e]=this.readChar();return n.join("")}readUtf8(t){void 0===t&&(t=1);const e=this.readChars(t);return i.decode(e)}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){const e=i.encode(t);return this.writeChars(e)}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this._lastWrittenByte)}getBuffer(){return"undefined"!=typeof Buffer?Buffer.from(this.toArray()):this.toArray()}_updateLastWrittenByte(){this.offset>this._lastWrittenByte&&(this._lastWrittenByte=this.offset)}}},5578:t=>{"use strict";t.exports={BITMAPV5HEADER:{LogicalColorSpace:{LCS_CALIBRATED_RGB:0,LCS_sRGB:1934772034,LCS_WINDOWS_COLOR_SPACE:1466527264},Compression:{BI_RGB:0,BI_RLE8:1,BI_RLE4:2,BI_BITFIELDS:3,BI_JPEG:4,BI_PNG:5,BI_CMYK:11,BI_CMYKRLE8:12,BI_CMYKRLE4:13},GamutMappingIntent:{LCS_GM_ABS_COLORIMETRIC:8,LCS_GM_BUSINESS:1,LCS_GM_GRAPHICS:2,LCS_GM_IMAGES:4}}}},4893:(t,e,r)=>{"use strict";const i=r(5372),n=r(5578),s=[];for(var o=0;o<=8;o++)s.push(255<<o);t.exports=function(t){if(1!==t.bitDepth)throw new Error("Only bitDepth of 1 is supported");if(!t.height||!t.width)throw new Error("ImageData width and height are required");if(1!==t.components)throw new Error("Only 1 component is supported");if(1!==t.channels)throw new Error("Only 1 channel is supported");var e=new i;e.skip(14),function(t,e){t.writeUint32(124).writeInt32(e.width).writeInt32(e.height).writeUint16(1).writeUint16(e.bitDepth).writeUint32(n.BITMAPV5HEADER.Compression.BI_RGB).writeUint32(e.width*e.height*e.bitDepth).writeInt32(0).writeInt32(0).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(4278190080).writeUint32(16711680).writeUint32(65280).writeUint32(255).writeUint32(n.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36).skip(12).writeUint32(n.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12)}(e,t),function(t,e){e.bitDepth>8||t.writeUint32(0).writeUint32(16777215)}(e,t);const r=e.offset;return function(t,e){const r=4*Math.floor((e.bitDepth*e.width+31)/32),n=Math.ceil(e.bitDepth*e.width/8),o=r-n,a=e.bitDepth*e.width%8,h=0===a?0:8-a,l=r*e.height;var u,c;const f=new i(e.data);let d=0,p=0,m=8;t.mark(),c=f.readUint8();for(var g=e.height-1;g>=0;g--){const e=0===g;t.reset(),t.skip(g*r);for(var w=0;w<n;w++){const r=w===n-1;p<=h&&r?(t.writeByte(c<<p),0!==h&&h!==p||e||(u=c,c=f.readByte())):0===p?(u=c,c=f.readUint8(),t.writeByte(u)):(u=c,c=f.readUint8(),t.writeByte(u<<p&s[p]|c>>m)),r?(d+=a||8,t.skip(o),p=d%8,m=8-p):d+=8}}r>n&&(t.reset(),t.skip(l-1),t.writeUint8(0))}(e,t),e.rewind(),function(t,e){t.writeChars("BM"),t.writeInt32(t._lastWrittenByte),t.writeUint16(0),t.writeUint16(0),t.writeUint32(e)}(e,r),e.getBuffer()}},4665:(t,e,r)=>{"use strict";e.encode=r(4893)},3311:(t,e,r)=>{"use strict";const i=r(6752);t.exports=function(t,e){return new i(t,e).decode(e)}},8029:(t,e,r)=>{"use strict";const i={standard:r(4263),exif:r(9640),gps:r(5367)};t.exports=class{constructor(t){if(!t)throw new Error("missing kind");this.data=null,this.fields=new Map,this.kind=t,this._map=null}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(i[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._map){this._map={};const e=i[this.kind].tagsById;for(var t of this.fields.keys())e[t]&&(this._map[e[t]]=this.fields.get(t))}return this._map}}},6486:(t,e)=>{"use strict";var r=new Map([[1,[1,i]],[2,[1,function(t,e){for(var r=[],i="",n=0;n<e;n++){var s=String.fromCharCode(t.readUint8());"\0"===s?(r.push(i),i=""):i+=s}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();for(var r=new Uint16Array(e),i=0;i<e;i++)r[i]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();for(var r=new Uint32Array(e),i=0;i<e;i++)r[i]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();for(var r=new Array(e),i=0;i<e;i++)r[i]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();for(var r=new Int8Array(e),i=0;i<e;i++)r[i]=t.readInt8();return r}]],[7,[1,i]],[8,[2,function(t,e){if(1===e)return t.readInt16();for(var r=new Int16Array(e),i=0;i<e;i++)r[i]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();for(var r=new Int32Array(e),i=0;i<e;i++)r[i]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();for(var r=new Array(e),i=0;i<e;i++)r[i]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();for(var r=new Float32Array(e),i=0;i<e;i++)r[i]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();for(var r=new Float64Array(e),i=0;i<e;i++)r[i]=t.readFloat64();return r}]]]);function i(t,e){if(1===e)return t.readUint8();for(var r=new Uint8Array(e),i=0;i<e;i++)r[i]=t.readUint8();return r}e.getByteLength=function(t,e){return r.get(t)[0]*e},e.readData=function(t,e,i){return r.get(e)[1](t,i)}},9469:(t,e,r)=>{"use strict";e.decode=r(3311)},9640:t=>{"use strict";const e={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},5367:t=>{"use strict";const e={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},4263:t=>{"use strict";const e={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},6752:(t,e,r)=>{"use strict";const i=r(5838),n=r(8029),s=r(8353),o=r(6486),a={ignoreImageData:!1,onlyFirst:!1};function h(t,e,r,i){for(var n=0;n<i;n++)t[r++]=e.getUint8(n);return r}function l(t,e,r,i,n){for(var s=0;s<2*i;s+=2)t[r++]=e.getUint16(s,n);return r}function u(t,e,r,i,n){for(var s=0;s<4*i;s+=4)t[r++]=e.getFloat32(s,n);return r}function c(t,e){throw new Error("Unsupported "+t+": "+e)}t.exports=class extends i{constructor(t,e){super(t,e),this._nextIFD=0}decode(t){t=Object.assign({},a,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t)),t.onlyFirst)return e[0];return e}decodeHeader(){let t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error("invalid byte order: 0x"+t.toString(16));this.setBigEndian()}if(t=this.readUint16(),42!==t)throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t){var e;this.seek(this._nextIFD),e=t.kind?new n(t.kind):new s;const r=this.readUint16();for(var i=0;i<r;i++)this.decodeIFDEntry(e);return t.ignoreImageData||this.decodeImageData(e),this._nextIFD=this.readUint32(),e}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),i=this.readUint16(),n=this.readUint32();if(i<1||i>12)return void this.skip(4);o.getByteLength(i,n)>4&&this.seek(this.readUint32());const s=o.readData(this,i,n);if(t.fields.set(r,s),34665===r||34853===r){let e,i=this.offset;34665===r?e="exif":34853===r&&(e="gps"),this._nextIFD=s,t[e]=this.decodeIFD({kind:e,ignoreImageData:!0}),this.offset=i}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;switch(e&&1!==e&&c("orientation",e),t.type){case 1:case 2:this.readStripData(t);break;default:c("image type",t.type)}}readStripData(t){const e=t.width,r=t.height,i=function(t){if(t.length){const r=t;t=r[0];for(var e=0;e<r.length;e++)r[e]!==t&&c("bit depth",r)}return t}(t.bitsPerSample),n=t.sampleFormat;let s=e*r;const o=function(t,e,r,i){return 8===r?new Uint8Array(1*t):16===r?new Uint16Array(1*t):32===r&&3===i?new Float32Array(1*t):c("bit depth / sample format",r+" / "+i)}(s,0,i,n),a=t.compression,f=t.rowsPerStrip*e,d=t.stripOffsets,p=t.stripByteCounts;for(var m=0,g=0;g<d.length;g++){var w=this.getStripData(a,d[g],p[g]),b=s>f?f:s;s-=b,8===i?m=h(o,w,m,b):16===i?m=l(o,w,m,b,this.isLittleEndian()):32===i&&3===n?m=u(o,w,m,b,this.isLittleEndian()):c("bitDepth",i)}t.data=o}getStripData(t,e,r){switch(t){case 1:return new DataView(this.buffer,e,r);case 2:case 32773:return c("Compression",t);default:throw new Error("invalid compression: "+t)}}}},8353:(t,e,r)=>{"use strict";const i=r(8029),n=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;function s(t){return"number"==typeof t?[t]:t}t.exports=class extends i{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){var t=new Date,e=n.exec(this.dateTime);return t.setFullYear(e[1],e[2]-1,e[3]),t.setHours(e[4],e[5],e[6]),t}get newSubfileType(){return this.get(254)}get imageWidth(){return this.get(256)}get imageLength(){return this.get(257)}get bitsPerSample(){return this.get(258)}get compression(){return this.get(259)||1}get type(){return this.get(262)}get fillOrder(){return this.get(266)||1}get documentName(){return this.get(269)}get imageDescription(){return this.get(270)}get stripOffsets(){return s(this.get(273))}get orientation(){return this.get(274)}get samplesPerPixel(){return this.get(277)}get rowsPerStrip(){return this.get(278)}get stripByteCounts(){return s(this.get(279))}get minSampleValue(){return this.get(280)||0}get maxSampleValue(){return this.get(281)||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get(282)}get yResolution(){return this.get(283)}get planarConfiguration(){return this.get(284)||1}get resolutionUnit(){return this.get(296)||2}get dateTime(){return this.get(306)}get predictor(){return this.get(317)||1}get sampleFormat(){return this.get(339)||1}get sMinSampleValue(){return this.get(340)||this.minSampleValue}get sMaxSampleValue(){return this.get(341)||this.maxSampleValue}}},9698:(t,e,r)=>{"use strict";const i=r(5838),n=r(9469);t.exports=function(t){const e=new i(t),r={};if(e.setBigEndian(),65496!==e.readUint16())throw new Error("SOI marker not found. Not a valid JPEG file");if(65505===e.readUint16()){e.readUint16();const t=e.readBytes(6);if(69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]&&0===t[4]&&0===t[5]){const t=n.decode(e,{onlyFirst:!0,ignoreImageData:!0,offset:e.offset});r.exif=t}}return r}},9464:(t,e,r)=>{"use strict";e.decode=r(9698)},8737:t=>{!function(){function e(t,e,r){this.next=r,r&&(r.prev=this),this.prev=e,e&&(e.next=this),this.data=t}function r(){if(!(this instanceof r))return new r;this._head=null,this._tail=null,this.length=0}r.prototype={push:function(t){this._tail=new e(t,this._tail,null),this._head||(this._head=this._tail),this.length++},pop:function(){if(0!==this.length){var t=this._tail;return this._tail=t.prev,t.prev&&(t.prev=this._tail.next=null),this.length--,1===this.length?this._head=this._tail:0===this.length&&(this._head=this._tail=null),t.data}},unshift:function(t){this._head=new e(t,null,this._head),this._tail||(this._tail=this._head),this.length++},shift:function(){if(0!==this.length){var t=this._head;return this._head=t.next,t.next&&(t.next=this._head.prev=null),this.length--,1===this.length?this._tail=this._head:0===this.length&&(this._head=this._tail=null),t.data}},item:function(t){t<0&&(t=this.length+t);for(var e=this._head;t-- >0&&e;)e=e.next;return e?e.data:void 0},slice:function(t,e){if(t||(t=0),e||(e=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e===t)return[];if(e<t)throw new Error("invalid offset: "+t+","+e+" (length="+this.length+")");for(var r=e-t,i=new Array(r),n=0,s=this._head;t-- >0&&s;)s=s.next;for(;n<r&&s;)i[n++]=s.data,s=s.next;return i},drop:function(){r.call(this)},forEach:function(t,e){for(var r=this._head,i=0,n=this.length;i<n&&r;)t.call(e||this,r.data,i,this),r=r.next,i++},map:function(t,e){var i=new r;return this.forEach((function(r,n,s){i.push(t.call(e||s,r,n,s))})),i},filter:function(t,e){var i=new r;return this.forEach((function(r,n,s){t.call(e||s,r,n,s)&&i.push(r)})),i},reduce:function(t,e,r){var i=0,n=this._head,s=this.length;for(e||(i=1,e=n&&n.data,n=n&&n.next);i<s&&n;)e=t.call(r||this,e,n.data,this),i++,n=n.next;return e}},t.exports=r}()},7638:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const i=t.length;let n=0,s=Math.max(32,i+(i>>1)+7),o=new Uint8Array(s>>3<<3);for(;r<i;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<i){const i=t.charCodeAt(r);56320==(64512&i)&&(++r,e=((1023&e)<<10)+(1023&i)+65536)}if(e>=55296&&e<=56319)continue}if(n+4>o.length){s+=8,s*=1+r/t.length*2,s=s>>3<<3;const e=new Uint8Array(s);e.set(o),o=e}if(0!=(4294967168&e)){if(0==(4294965248&e))o[n++]=e>>6&31|192;else if(0==(4294901760&e))o[n++]=e>>12&15|224,o[n++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;o[n++]=e>>18&7|240,o[n++]=e>>12&63|128,o[n++]=e>>6&63|128}o[n++]=63&e|128}else o[n++]=e}return o.slice(0,n)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let i=0;const n=r.length,s=[];for(;i<n;){const t=r[i++];if(0===t)break;if(0==(128&t))s.push(t);else if(192==(224&t)){const e=63&r[i++];s.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[i++],n=63&r[i++];s.push((31&t)<<12|e<<6|n)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[i++])<<12|(63&r[i++])<<6|63&r[i++];e>65535&&(e-=65536,s.push(e>>>10&1023|55296),e=56320|1023&e),s.push(e)}}return String.fromCharCode.apply(null,s)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},9645:t=>{"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),r=0;r<e.length;r+=2){const t=Math.PI*r/this.size;e[r]=Math.cos(t),e[r+1]=-Math.sin(t)}this.table=e;for(var i=0,n=1;this.size>n;n<<=1)i++;this._width=i%2==0?i-1:i,this._bitrev=new Array(1<<this._width);for(var s=0;s<this._bitrev.length;s++){this._bitrev[s]=0;for(var o=0;o<this._width;o+=2){var a=this._width-o-2;this._bitrev[s]|=(s>>>o&3)<<a}}this._out=null,this._data=null,this._inv=0}t.exports=e,e.prototype.fromComplexArray=function(t,e){for(var r=e||new Array(t.length>>>1),i=0;i<t.length;i+=2)r[i>>>1]=t[i];return r},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var r=e||this.createComplexArray(),i=0;i<r.length;i+=2)r[i]=t[i>>>1],r[i+1]=0;return r},e.prototype.completeSpectrum=function(t){for(var e=this._csize,r=e>>>1,i=2;i<r;i+=2)t[e-i]=t[i],t[e-i+1]=-t[i+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var r=0;r<t.length;r++)t[r]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,r=this._out,i=this._csize,n=1<<this._width,s=i/n<<1,o=this._bitrev;if(4===s)for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleTransform2(t,r,n)}else for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleTransform4(t,r,n)}var a=this._inv?-1:1,h=this.table;for(n>>=2;n>=2;n>>=2){var l=(s=i/n<<1)>>>2;for(t=0;t<i;t+=s)for(var u=t+l,c=t,f=0;c<u;c+=2,f+=n){const t=c,e=t+l,i=e+l,n=i+l,s=r[t],o=r[t+1],u=r[e],d=r[e+1],p=r[i],m=r[i+1],g=r[n],w=r[n+1],b=s,y=o,_=h[f],v=a*h[f+1],x=u*_-d*v,k=u*v+d*_,A=h[2*f],M=a*h[2*f+1],E=p*A-m*M,S=p*M+m*A,C=h[3*f],I=a*h[3*f+1],D=g*C-w*I,P=g*I+w*C,B=b+E,R=y+S,T=b-E,U=y-S,O=x+D,L=k+P,F=a*(x-D),N=a*(k-P),z=B+O,j=R+L,Y=B-O,V=R-L,q=T+N,X=U-F,G=T-N,$=U+F;r[t]=z,r[t+1]=j,r[e]=q,r[e+1]=X,r[i]=Y,r[i+1]=V,r[n]=G,r[n+1]=$}}},e.prototype._singleTransform2=function(t,e,r){const i=this._out,n=this._data,s=n[e],o=n[e+1],a=n[e+r],h=n[e+r+1],l=s+a,u=o+h,c=s-a,f=o-h;i[t]=l,i[t+1]=u,i[t+2]=c,i[t+3]=f},e.prototype._singleTransform4=function(t,e,r){const i=this._out,n=this._data,s=this._inv?-1:1,o=2*r,a=3*r,h=n[e],l=n[e+1],u=n[e+r],c=n[e+r+1],f=n[e+o],d=n[e+o+1],p=n[e+a],m=n[e+a+1],g=h+f,w=l+d,b=h-f,y=l-d,_=u+p,v=c+m,x=s*(u-p),k=s*(c-m),A=g+_,M=w+v,E=b+k,S=y-x,C=g-_,I=w-v,D=b-k,P=y+x;i[t]=A,i[t+1]=M,i[t+2]=E,i[t+3]=S,i[t+4]=C,i[t+5]=I,i[t+6]=D,i[t+7]=P},e.prototype._realTransform4=function(){var t,e,r=this._out,i=this._csize,n=1<<this._width,s=i/n<<1,o=this._bitrev;if(4===s)for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleRealTransform2(t,r>>>1,n>>>1)}else for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleRealTransform4(t,r>>>1,n>>>1)}var a=this._inv?-1:1,h=this.table;for(n>>=2;n>=2;n>>=2){var l=(s=i/n<<1)>>>1,u=l>>>1,c=u>>>1;for(t=0;t<i;t+=s)for(var f=0,d=0;f<=c;f+=2,d+=n){var p=t+f,m=p+u,g=m+u,w=g+u,b=r[p],y=r[p+1],_=r[m],v=r[m+1],x=r[g],k=r[g+1],A=r[w],M=r[w+1],E=b,S=y,C=h[d],I=a*h[d+1],D=_*C-v*I,P=_*I+v*C,B=h[2*d],R=a*h[2*d+1],T=x*B-k*R,U=x*R+k*B,O=h[3*d],L=a*h[3*d+1],F=A*O-M*L,N=A*L+M*O,z=E+T,j=S+U,Y=E-T,V=S-U,q=D+F,X=P+N,G=a*(D-F),$=a*(P-N),W=z+q,Z=j+X,H=Y+$,K=V-G;if(r[p]=W,r[p+1]=Z,r[m]=H,r[m+1]=K,0!==f){if(f!==c){var J=Y+-a*$,Q=-a*G-V,tt=z+-a*q,et=-j- -a*X,rt=t+u-f,it=t+l-f;r[rt]=J,r[rt+1]=Q,r[it]=tt,r[it+1]=et}}else{var nt=z-q,st=j-X;r[g]=nt,r[g+1]=st}}}},e.prototype._singleRealTransform2=function(t,e,r){const i=this._out,n=this._data,s=n[e],o=n[e+r],a=s+o,h=s-o;i[t]=a,i[t+1]=0,i[t+2]=h,i[t+3]=0},e.prototype._singleRealTransform4=function(t,e,r){const i=this._out,n=this._data,s=this._inv?-1:1,o=2*r,a=3*r,h=n[e],l=n[e+r],u=n[e+o],c=n[e+a],f=h+u,d=h-u,p=l+c,m=s*(l-c),g=f+p,w=d,b=-m,y=f-p,_=d,v=m;i[t]=g,i[t+1]=0,i[t+2]=w,i[t+3]=b,i[t+4]=y,i[t+5]=0,i[t+6]=_,i[t+7]=v}},7769:module=>{"use strict";const toBytes=t=>[...t].map((t=>t.charCodeAt(0))),xpiZipFilename=toBytes("META-INF/mozilla.rsa"),oxmlContentTypes=toBytes("[Content_Types].xml"),oxmlRels=toBytes("_rels/.rels");function readUInt64LE(t,e=0){let r=t[e],i=1,n=0;for(;++n<8;)i*=256,r+=t[e+n]*i;return r}const fileType=t=>{if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||Buffer.isBuffer(t)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof t}\``);const e=t instanceof Uint8Array?t:new Uint8Array(t);if(!(e&&e.length>1))return null;const r=(t,r)=>{r=Object.assign({offset:0},r);for(let i=0;i<t.length;i++)if(r.mask){if(t[i]!==(r.mask[i]&e[i+r.offset]))return!1}else if(t[i]!==e[i+r.offset])return!1;return!0},i=(t,e)=>r(toBytes(t),e);if(r([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(r([137,80,78,71,13,10,26,10]))return{ext:"png",mime:"image/png"};if(r([71,73,70]))return{ext:"gif",mime:"image/gif"};if(r([87,69,66,80],{offset:8}))return{ext:"webp",mime:"image/webp"};if(r([70,76,73,70]))return{ext:"flif",mime:"image/flif"};if((r([73,73,42,0])||r([77,77,0,42]))&&r([67,82],{offset:8}))return{ext:"cr2",mime:"image/x-canon-cr2"};if(r([73,73,42,0])||r([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(r([66,77]))return{ext:"bmp",mime:"image/bmp"};if(r([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(r([56,66,80,83]))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(r([80,75,3,4])){if(r([109,105,109,101,116,121,112,101,97,112,112,108,105,99,97,116,105,111,110,47,101,112,117,98,43,122,105,112],{offset:30}))return{ext:"epub",mime:"application/epub+zip"};if(r(xpiZipFilename,{offset:30}))return{ext:"xpi",mime:"application/x-xpinstall"};if(i("mimetypeapplication/vnd.oasis.opendocument.text",{offset:30}))return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};if(i("mimetypeapplication/vnd.oasis.opendocument.spreadsheet",{offset:30}))return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};if(i("mimetypeapplication/vnd.oasis.opendocument.presentation",{offset:30}))return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"};const t=(t,e=0)=>t.findIndex(((t,r,i)=>r>=e&&80===i[r]&&75===i[r+1]&&3===i[r+2]&&4===i[r+3]));let n=0,s=!1,o=null;do{const a=n+30;if(s||(s=r(oxmlContentTypes,{offset:a})||r(oxmlRels,{offset:a})),o||(i("word/",{offset:a})?o={ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}:i("ppt/",{offset:a})?o={ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"}:i("xl/",{offset:a})&&(o={ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"})),s&&o)return o;n=t(e,a)}while(n>=0);if(o)return o}if(r([80,75])&&(3===e[2]||5===e[2]||7===e[2])&&(4===e[3]||6===e[3]||8===e[3]))return{ext:"zip",mime:"application/zip"};if(r([117,115,116,97,114],{offset:257}))return{ext:"tar",mime:"application/x-tar"};if(r([82,97,114,33,26,7])&&(0===e[6]||1===e[6]))return{ext:"rar",mime:"application/x-rar-compressed"};if(r([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(r([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(r([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(r([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(r([51,103,112,53])||r([0,0,0])&&r([102,116,121,112],{offset:4})&&(r([109,112,52,49],{offset:8})||r([109,112,52,50],{offset:8})||r([105,115,111,109],{offset:8})||r([105,115,111,50],{offset:8})||r([109,109,112,52],{offset:8})||r([77,52,86],{offset:8})||r([100,97,115,104],{offset:8})))return{ext:"mp4",mime:"video/mp4"};if(r([77,84,104,100]))return{ext:"mid",mime:"audio/midi"};if(r([26,69,223,163])){const t=e.subarray(4,4100),r=t.findIndex(((t,e,r)=>66===r[e]&&130===r[e+1]));if(-1!==r){const e=r+3,i=r=>[...r].every(((r,i)=>t[e+i]===r.charCodeAt(0)));if(i("matroska"))return{ext:"mkv",mime:"video/x-matroska"};if(i("webm"))return{ext:"webm",mime:"video/webm"}}}if(r([0,0,0,20,102,116,121,112,113,116,32,32])||r([102,114,101,101],{offset:4})||r([102,116,121,112,113,116,32,32],{offset:4})||r([109,100,97,116],{offset:4})||r([109,111,111,118],{offset:4})||r([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(r([82,73,70,70])){if(r([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(r([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(r([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(r([48,38,178,117,142,102,207,17,166,217])){let t=30;do{const i=readUInt64LE(e,t+16);if(r([145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101],{offset:t})){if(r([64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wma",mime:"audio/x-ms-wma"};if(r([192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wmv",mime:"video/x-ms-asf"};break}t+=i}while(t+24<=e.length);return{ext:"asf",mime:"application/vnd.ms-asf"}}if(r([0,0,1,186])||r([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(r([102,116,121,112,51,103],{offset:4}))return{ext:"3gp",mime:"video/3gpp"};for(let t=0;t<2&&t<e.length-16;t++){if(r([73,68,51],{offset:t})||r([255,226],{offset:t,mask:[255,226]}))return{ext:"mp3",mime:"audio/mpeg"};if(r([255,228],{offset:t,mask:[255,228]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,248],{offset:t,mask:[255,252]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,240],{offset:t,mask:[255,252]}))return{ext:"mp4",mime:"audio/mpeg"}}if(r([102,116,121,112,77,52,65],{offset:4}))return{ext:"m4a",mime:"audio/mp4"};if(r([79,112,117,115,72,101,97,100],{offset:28}))return{ext:"opus",mime:"audio/opus"};if(r([79,103,103,83]))return r([128,116,104,101,111,114,97],{offset:28})?{ext:"ogv",mime:"video/ogg"}:r([1,118,105,100,101,111,0],{offset:28})?{ext:"ogm",mime:"video/ogg"}:r([127,70,76,65,67],{offset:28})?{ext:"oga",mime:"audio/ogg"}:r([83,112,101,101,120,32,32],{offset:28})?{ext:"spx",mime:"audio/ogg"}:r([1,118,111,114,98,105,115],{offset:28})?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"};if(r([102,76,97,67]))return{ext:"flac",mime:"audio/x-flac"};if(r([77,65,67,32]))return{ext:"ape",mime:"audio/ape"};if(r([119,118,112,107]))return{ext:"wv",mime:"audio/wavpack"};if(r([35,33,65,77,82,10]))return{ext:"amr",mime:"audio/amr"};if(r([37,80,68,70]))return{ext:"pdf",mime:"application/pdf"};if(r([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if((67===e[0]||70===e[0])&&r([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(r([123,92,114,116,102]))return{ext:"rtf",mime:"application/rtf"};if(r([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(r([119,79,70,70])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff",mime:"font/woff"};if(r([119,79,70,50])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(r([76,80],{offset:34})&&(r([0,0,1],{offset:8})||r([1,0,2],{offset:8})||r([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(r([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(r([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(r([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(r([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(r([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(r([37,33]))return{ext:"ps",mime:"application/postscript"};if(r([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(r([83,81,76,105]))return{ext:"sqlite",mime:"application/x-sqlite3"};if(r([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(r([67,114,50,52]))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(r([77,83,67,70])||r([73,83,99,40]))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(r([33,60,97,114,99,104,62,10,100,101,98,105,97,110,45,98,105,110,97,114,121]))return{ext:"deb",mime:"application/x-deb"};if(r([33,60,97,114,99,104,62]))return{ext:"ar",mime:"application/x-unix-archive"};if(r([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(r([31,160])||r([31,157]))return{ext:"Z",mime:"application/x-compress"};if(r([76,90,73,80]))return{ext:"lz",mime:"application/x-lzip"};if(r([208,207,17,224,161,177,26,225]))return{ext:"msi",mime:"application/x-msi"};if(r([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(r([71],{offset:4})&&(r([71],{offset:192})||r([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(r([66,76,69,78,68,69,82]))return{ext:"blend",mime:"application/x-blender"};if(r([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(r([0,0,0,12,106,80,32,32,13,10,135,10])){if(r([106,112,50,32],{offset:20}))return{ext:"jp2",mime:"image/jp2"};if(r([106,112,120,32],{offset:20}))return{ext:"jpx",mime:"image/jpx"};if(r([106,112,109,32],{offset:20}))return{ext:"jpm",mime:"image/jpm"};if(r([109,106,112,50],{offset:20}))return{ext:"mj2",mime:"image/mj2"}}if(r([70,79,82,77]))return{ext:"aif",mime:"audio/aiff"};if(i("<?xml "))return{ext:"xml",mime:"application/xml"};if(r([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(r([102,116,121,112],{offset:4})){if(r([109,105,102,49],{offset:8}))return{ext:"heic",mime:"image/heif"};if(r([109,115,102,49],{offset:8}))return{ext:"heic",mime:"image/heif-sequence"};if(r([104,101,105,99],{offset:8})||r([104,101,105,120],{offset:8}))return{ext:"heic",mime:"image/heic"};if(r([104,101,118,99],{offset:8})||r([104,101,118,120],{offset:8}))return{ext:"heic",mime:"image/heic-sequence"}}return r([171,75,84,88,32,49,49,187,13,10,26,10])?{ext:"ktx",mime:"image/ktx"}:r([68,73,67,77],{offset:128})?{ext:"dcm",mime:"application/dicom"}:r([77,80,43])||r([77,80,67,75])?{ext:"mpc",mime:"audio/x-musepack"}:r([66,69,71,73,78,58])?{ext:"ics",mime:"text/calendar"}:r([103,108,84,70,2,0,0,0])?{ext:"glb",mime:"model/gltf-binary"}:r([212,195,178,161])||r([161,178,195,212])?{ext:"pcap",mime:"application/vnd.tcpdump.pcap"}:null};module.exports=fileType,module.exports.default=fileType,Object.defineProperty(fileType,"minimumBytes",{value:4100}),module.exports.stream=readableStream=>new Promise(((resolve,reject)=>{const stream=eval("require")("stream");readableStream.once("readable",(()=>{const t=new stream.PassThrough,e=readableStream.read(module.exports.minimumBytes)||readableStream.read();try{t.fileType=fileType(e)}catch(t){reject(t)}readableStream.unshift(e),stream.pipeline?resolve(stream.pipeline(readableStream,t,(()=>{}))):resolve(readableStream.pipe(t))}))}))},2251:(t,e,r)=>{var i=Object.prototype.hasOwnProperty;t.exports=e=function(t,e){return i.call(e,t)},e.version=r(2898).version},645:(t,e)=>{e.read=function(t,e,r,i,n){var s,o,a=8*n-i-1,h=(1<<a)-1,l=h>>1,u=-7,c=r?n-1:0,f=r?-1:1,d=t[e+c];for(c+=f,s=d&(1<<-u)-1,d>>=-u,u+=a;u>0;s=256*s+t[e+c],c+=f,u-=8);for(o=s&(1<<-u)-1,s>>=-u,u+=i;u>0;o=256*o+t[e+c],c+=f,u-=8);if(0===s)s=1-l;else{if(s===h)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,i),s-=l}return(d?-1:1)*o*Math.pow(2,s-i)},e.write=function(t,e,r,i,n,s){var o,a,h,l=8*s-n-1,u=(1<<l)-1,c=u>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:s-1,p=i?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-o))<1&&(o--,h*=2),(e+=o+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(o++,h/=2),o+c>=u?(a=0,o=u):o+c>=1?(a=(e*h-1)*Math.pow(2,n),o+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,n),o=0));n>=8;t[r+d]=255&a,d+=p,a/=256,n-=8);for(o=o<<n|a,l+=n;l>0;t[r+d]=255&o,d+=p,o/=256,l-=8);t[r+d-p]|=128*m}},9184:(t,e,r)=>{"use strict";const i=r(7769),n=new Set(["jpg","png","gif","webp","flif","cr2","tif","bmp","jxr","psd","ico","bpg","jp2","jpm","jpx","heic","cur","dcm"]),s=t=>{const e=i(t);return n.has(e&&e.ext)?e:null};t.exports=s,t.exports.default=s,Object.defineProperty(s,"minimumBytes",{value:i.minimumBytes})},5838:t=>{"use strict";const e=[];t.exports=class{constructor(t,e){e=e||{},void 0===t&&(t=8192),"number"==typeof t&&(t=new ArrayBuffer(t));let r=t.byteLength;const i=e.offset?e.offset>>>0:0;t.buffer&&(r=t.byteLength-i,t=t.byteLength!==t.buffer.byteLength?t.buffer.slice(t.byteOffset+i,t.byteOffset+t.byteLength):i?t.buffer.slice(i):t.buffer),this.buffer=t,this.length=r,this.byteLength=r,this.byteOffset=0,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer),this._increment=r||8192,this._mark=0}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){this.littleEndian=!0}isBigEndian(){return!this.littleEndian}setBigEndian(){this.littleEndian=!1}skip(t){void 0===t&&(t=1),this.offset+=t}seek(t){this.offset=t}mark(){this._mark=this.offset}reset(){this.offset=this._mark}rewind(){this.offset=0}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const t=this._increment+this._increment;this._increment=t;const e=this.length+t,r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=e,this._data=new DataView(this.buffer)}}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),e.length=t;for(var r=0;r<t;r++)e[r]=this.readChar();return e.join("")}writeBoolean(t){this.writeUint8(t?255:0)}writeInt8(t){this.ensureAvailable(1),this._data.setInt8(this.offset++,t)}writeUint8(t){this.ensureAvailable(1),this._data.setUint8(this.offset++,t)}writeByte(t){this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e])}writeInt16(t){this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2}writeUint16(t){this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2}writeInt32(t){this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4}writeUint32(t){this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat32(t){this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat64(t){this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8}writeChar(t){this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e))}toArray(){return new Uint8Array(this.buffer,0,this.offset)}}},7531:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const i=Object.prototype.toString;function n(t){return i.call(t).endsWith("Array]")}},7811:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){return"Array"===e.call(t).substr(-6,5)}},1867:t=>{"use strict";t.exports=Number.isFinite||function(t){return!("number"!=typeof t||t!=t||t===1/0||t===-1/0)}},8336:(t,e,r)=>{var i=r(1867);t.exports=Number.isInteger||function(t){return"number"==typeof t&&i(t)&&Math.floor(t)===t}},7870:(t,e,r)=>{var i=r(587),n=r(914);t.exports={encode:i,decode:n}},914:t=>{var e=function(){"use strict";var t=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),e=4017,r=799,i=3406,n=2276,s=1567,o=3784,a=5793,h=2896;function l(){}function u(t,e){for(var r,i,n=0,s=[],o=16;o>0&&!t[o-1];)o--;s.push({children:[],index:0});var a,h=s[0];for(r=0;r<o;r++){for(i=0;i<t[r];i++){for((h=s.pop()).children[h.index]=e[n];h.index>0;){if(0===s.length)throw new Error("Could not recreate Huffman Table");h=s.pop()}for(h.index++,s.push(h);s.length<=r;)s.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a;n++}r+1<o&&(s.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a)}return s[0].children}function c(e,r,i,n,s,o,a,h,l,u){i.precision,i.samplesPerLine,i.scanLines;var c=i.mcusPerLine,f=i.progressive,d=(i.maxH,i.maxV,r),p=0,m=0;function g(){if(m>0)return m--,p>>m&1;if(255==(p=e[r++])){var t=e[r++];if(t)throw new Error("unexpected marker: "+(p<<8|t).toString(16))}return m=7,p>>>7}function w(t){for(var e,r=t;null!==(e=g());){if("number"==typeof(r=r[e]))return r;if("object"!=typeof r)throw new Error("invalid huffman sequence")}return null}function b(t){for(var e=0;t>0;){var r=g();if(null===r)return;e=e<<1|r,t--}return e}function y(t){var e=b(t);return e>=1<<t-1?e:e+(-1<<t)+1}var _,v=0,x=0;function k(t,e,r,i,n){var s=r%c,o=(r/c|0)*t.v+i,a=s*t.h+n;void 0===t.blocks[o]&&u.tolerantDecoding||e(t,t.blocks[o][a])}function A(t,e,r){var i=r/t.blocksPerLine|0,n=r%t.blocksPerLine;void 0===t.blocks[i]&&u.tolerantDecoding||e(t,t.blocks[i][n])}var M,E,S,C,I,D,P=n.length;D=f?0===o?0===h?function(t,e){var r=w(t.huffmanTableDC),i=0===r?0:y(r)<<l;e[0]=t.pred+=i}:function(t,e){e[0]|=g()<<l}:0===h?function(e,r){if(v>0)v--;else for(var i=o,n=a;i<=n;){var s=w(e.huffmanTableAC),h=15&s,u=s>>4;if(0!==h)r[t[i+=u]]=y(h)*(1<<l),i++;else{if(u<15){v=b(u)+(1<<u)-1;break}i+=16}}}:function(e,r){for(var i=o,n=a,s=0;i<=n;){var h=t[i],u=r[h]<0?-1:1;switch(x){case 0:var c=w(e.huffmanTableAC),f=15&c;if(s=c>>4,0===f)s<15?(v=b(s)+(1<<s),x=4):(s=16,x=1);else{if(1!==f)throw new Error("invalid ACn encoding");_=y(f),x=s?2:3}continue;case 1:case 2:r[h]?r[h]+=(g()<<l)*u:0==--s&&(x=2==x?3:0);break;case 3:r[h]?r[h]+=(g()<<l)*u:(r[h]=_<<l,x=0);break;case 4:r[h]&&(r[h]+=(g()<<l)*u)}i++}4===x&&0==--v&&(x=0)}:function(e,r){var i=w(e.huffmanTableDC),n=0===i?0:y(i);r[0]=e.pred+=n;for(var s=1;s<64;){var o=w(e.huffmanTableAC),a=15&o,h=o>>4;if(0!==a)r[t[s+=h]]=y(a),s++;else{if(h<15)break;s+=16}}};var B,R,T,U,O=0;for(R=1==P?n[0].blocksPerLine*n[0].blocksPerColumn:c*i.mcusPerColumn,s||(s=R);O<R;){for(E=0;E<P;E++)n[E].pred=0;if(v=0,1==P)for(M=n[0],I=0;I<s;I++)A(M,D,O),O++;else for(I=0;I<s;I++){for(E=0;E<P;E++)for(T=(M=n[E]).h,U=M.v,S=0;S<U;S++)for(C=0;C<T;C++)k(M,D,O,S,C);if(++O===R)break}if(O===R)do{if(255===e[r]&&0!==e[r+1])break;r+=1}while(r<e.length-2);if(m=0,(B=e[r]<<8|e[r+1])<65280)throw new Error("marker was not found");if(!(B>=65488&&B<=65495))break;r+=2}return r-d}function f(t,l){var u,c,f=[],d=l.blocksPerLine,p=l.blocksPerColumn,m=d<<3,w=new Int32Array(64),b=new Uint8Array(64);function y(t,u,c){var f,d,p,m,g,w,b,y,_,v,x=l.quantizationTable,k=c;for(v=0;v<64;v++)k[v]=t[v]*x[v];for(v=0;v<8;++v){var A=8*v;0!=k[1+A]||0!=k[2+A]||0!=k[3+A]||0!=k[4+A]||0!=k[5+A]||0!=k[6+A]||0!=k[7+A]?(f=a*k[0+A]+128>>8,d=a*k[4+A]+128>>8,p=k[2+A],m=k[6+A],g=h*(k[1+A]-k[7+A])+128>>8,y=h*(k[1+A]+k[7+A])+128>>8,w=k[3+A]<<4,b=k[5+A]<<4,_=f-d+1>>1,f=f+d+1>>1,d=_,_=p*o+m*s+128>>8,p=p*s-m*o+128>>8,m=_,_=g-b+1>>1,g=g+b+1>>1,b=_,_=y+w+1>>1,w=y-w+1>>1,y=_,_=f-m+1>>1,f=f+m+1>>1,m=_,_=d-p+1>>1,d=d+p+1>>1,p=_,_=g*n+y*i+2048>>12,g=g*i-y*n+2048>>12,y=_,_=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=_,k[0+A]=f+y,k[7+A]=f-y,k[1+A]=d+b,k[6+A]=d-b,k[2+A]=p+w,k[5+A]=p-w,k[3+A]=m+g,k[4+A]=m-g):(_=a*k[0+A]+512>>10,k[0+A]=_,k[1+A]=_,k[2+A]=_,k[3+A]=_,k[4+A]=_,k[5+A]=_,k[6+A]=_,k[7+A]=_)}for(v=0;v<8;++v){var M=v;0!=k[8+M]||0!=k[16+M]||0!=k[24+M]||0!=k[32+M]||0!=k[40+M]||0!=k[48+M]||0!=k[56+M]?(f=a*k[0+M]+2048>>12,d=a*k[32+M]+2048>>12,p=k[16+M],m=k[48+M],g=h*(k[8+M]-k[56+M])+2048>>12,y=h*(k[8+M]+k[56+M])+2048>>12,w=k[24+M],b=k[40+M],_=f-d+1>>1,f=f+d+1>>1,d=_,_=p*o+m*s+2048>>12,p=p*s-m*o+2048>>12,m=_,_=g-b+1>>1,g=g+b+1>>1,b=_,_=y+w+1>>1,w=y-w+1>>1,y=_,_=f-m+1>>1,f=f+m+1>>1,m=_,_=d-p+1>>1,d=d+p+1>>1,p=_,_=g*n+y*i+2048>>12,g=g*i-y*n+2048>>12,y=_,_=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=_,k[0+M]=f+y,k[56+M]=f-y,k[8+M]=d+b,k[48+M]=d-b,k[16+M]=p+w,k[40+M]=p-w,k[24+M]=m+g,k[32+M]=m-g):(_=a*c[v+0]+8192>>14,k[0+M]=_,k[8+M]=_,k[16+M]=_,k[24+M]=_,k[32+M]=_,k[40+M]=_,k[48+M]=_,k[56+M]=_)}for(v=0;v<64;++v){var E=128+(k[v]+8>>4);u[v]=E<0?0:E>255?255:E}}g(m*p*8);for(var _=0;_<p;_++){var v=_<<3;for(u=0;u<8;u++)f.push(new Uint8Array(m));for(var x=0;x<d;x++){y(l.blocks[_][x],b,w);var k=0,A=x<<3;for(c=0;c<8;c++){var M=f[v+c];for(u=0;u<8;u++)M[A+u]=b[k++]}}}return f}function d(t){return t<0?0:t>255?255:t}l.prototype={load:function(t){var e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="arraybuffer",e.onload=function(){var t=new Uint8Array(e.response||e.mozResponseArrayBuffer);this.parse(t),this.onload&&this.onload()}.bind(this),e.send(null)},parse:function(e){var r=1e3*this.opts.maxResolutionInMP*1e3,i=0;function n(){var t=e[i]<<8|e[i+1];return i+=2,t}function s(t){var e,r,i=0,n=0;for(r in t.components)t.components.hasOwnProperty(r)&&(i<(e=t.components[r]).h&&(i=e.h),n<e.v&&(n=e.v));var s=Math.ceil(t.samplesPerLine/8/i),o=Math.ceil(t.scanLines/8/n);for(r in t.components)if(t.components.hasOwnProperty(r)){e=t.components[r];var a=Math.ceil(Math.ceil(t.samplesPerLine/8)*e.h/i),h=Math.ceil(Math.ceil(t.scanLines/8)*e.v/n),l=s*e.h,u=o*e.v,c=[];g(u*l*256);for(var f=0;f<u;f++){for(var d=[],p=0;p<l;p++)d.push(new Int32Array(64));c.push(d)}e.blocksPerLine=a,e.blocksPerColumn=h,e.blocks=c}t.maxH=i,t.maxV=n,t.mcusPerLine=s,t.mcusPerColumn=o}e.length;var o,a,h,l,d=null,p=null,m=[],w=[],b=[],y=[],_=n(),v=-1;if(this.comments=[],65496!=_)throw new Error("SOI not found");for(_=n();65497!=_;){switch(_){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var x=(h=void 0,l=void 0,h=n(),l=e.subarray(i,i+h-2),i+=l.length,l);if(65534===_){var k=String.fromCharCode.apply(null,x);this.comments.push(k)}65504===_&&74===x[0]&&70===x[1]&&73===x[2]&&70===x[3]&&0===x[4]&&(d={version:{major:x[5],minor:x[6]},densityUnits:x[7],xDensity:x[8]<<8|x[9],yDensity:x[10]<<8|x[11],thumbWidth:x[12],thumbHeight:x[13],thumbData:x.subarray(14,14+3*x[12]*x[13])}),65505===_&&69===x[0]&&120===x[1]&&105===x[2]&&102===x[3]&&0===x[4]&&(this.exifBuffer=x.subarray(5,x.length)),65518===_&&65===x[0]&&100===x[1]&&111===x[2]&&98===x[3]&&101===x[4]&&0===x[5]&&(p={version:x[6],flags0:x[7]<<8|x[8],flags1:x[9]<<8|x[10],transformCode:x[11]});break;case 65499:for(var A=n()+i-2;i<A;){var M=e[i++];g(256);var E=new Int32Array(64);if(M>>4==0)for(W=0;W<64;W++)E[t[W]]=e[i++];else{if(M>>4!=1)throw new Error("DQT: invalid table spec");for(W=0;W<64;W++)E[t[W]]=n()}m[15&M]=E}break;case 65472:case 65473:case 65474:n(),(o={}).extended=65473===_,o.progressive=65474===_,o.precision=e[i++],o.scanLines=n(),o.samplesPerLine=n(),o.components={},o.componentsOrder=[];var S=o.scanLines*o.samplesPerLine;if(S>r){var C=Math.ceil((S-r)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${C}MP`)}var I,D=e[i++];for(G=0;G<D;G++){I=e[i];var P=e[i+1]>>4,B=15&e[i+1],R=e[i+2];o.componentsOrder.push(I),o.components[I]={h:P,v:B,quantizationIdx:R},i+=3}s(o),w.push(o);break;case 65476:var T=n();for(G=2;G<T;){var U=e[i++],O=new Uint8Array(16),L=0;for(W=0;W<16;W++,i++)L+=O[W]=e[i];g(16+L);var F=new Uint8Array(L);for(W=0;W<L;W++,i++)F[W]=e[i];G+=17+L,(U>>4==0?y:b)[15&U]=u(O,F)}break;case 65501:n(),a=n();break;case 65500:n(),n();break;case 65498:n();var N=e[i++],z=[];for(G=0;G<N;G++){Z=o.components[e[i++]];var j=e[i++];Z.huffmanTableDC=y[j>>4],Z.huffmanTableAC=b[15&j],z.push(Z)}var Y=e[i++],V=e[i++],q=e[i++],X=c(e,i,o,z,a,Y,V,q>>4,15&q,this.opts);i+=X;break;case 65535:255!==e[i]&&i--;break;default:if(255==e[i-3]&&e[i-2]>=192&&e[i-2]<=254){i-=3;break}if(224===_||225==_){if(-1!==v)throw new Error(`first unknown JPEG marker at offset ${v.toString(16)}, second unknown JPEG marker ${_.toString(16)} at offset ${(i-1).toString(16)}`);v=i-1;const t=n();if(255===e[i+t-2]){i+=t-2;break}}throw new Error("unknown JPEG marker "+_.toString(16))}_=n()}if(1!=w.length)throw new Error("only single frame JPEGs supported");for(var G=0;G<w.length;G++){var $=w[G].components;for(var W in $)$[W].quantizationTable=m[$[W].quantizationIdx],delete $[W].quantizationIdx}for(this.width=o.samplesPerLine,this.height=o.scanLines,this.jfif=d,this.adobe=p,this.components=[],G=0;G<o.componentsOrder.length;G++){var Z=o.components[o.componentsOrder[G]];this.components.push({lines:f(0,Z),scaleX:Z.h/o.maxH,scaleY:Z.v/o.maxV})}},getData:function(t,e){var r,i,n,s,o,a,h,l,u,c,f,p,m,w,b,y,_,v,x,k,A,M=this.width/t,E=this.height/e,S=0,C=t*e*this.components.length;g(C);var I=new Uint8Array(C);switch(this.components.length){case 1:for(r=this.components[0],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],u=0;u<t;u++)f=o[0|u*r.scaleX*M],I[S++]=f;break;case 2:for(r=this.components[0],i=this.components[1],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],u=0;u<t;u++)f=o[0|u*r.scaleX*M],I[S++]=f,f=a[0|u*i.scaleX*M],I[S++]=f;break;case 3:for(A=!0,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],i=this.components[1],n=this.components[2],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],h=n.lines[0|c*n.scaleY*E],u=0;u<t;u++)A?(f=o[0|u*r.scaleX*M],p=a[0|u*i.scaleX*M],v=d(f+1.402*((m=h[0|u*n.scaleX*M])-128)),x=d(f-.3441363*(p-128)-.71413636*(m-128)),k=d(f+1.772*(p-128))):(v=o[0|u*r.scaleX*M],x=a[0|u*i.scaleX*M],k=h[0|u*n.scaleX*M]),I[S++]=v,I[S++]=x,I[S++]=k;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(A=!1,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],i=this.components[1],n=this.components[2],s=this.components[3],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],h=n.lines[0|c*n.scaleY*E],l=s.lines[0|c*s.scaleY*E],u=0;u<t;u++)A?(f=o[0|u*r.scaleX*M],p=a[0|u*i.scaleX*M],m=h[0|u*n.scaleX*M],w=l[0|u*s.scaleX*M],b=255-d(f+1.402*(m-128)),y=255-d(f-.3441363*(p-128)-.71413636*(m-128)),_=255-d(f+1.772*(p-128))):(b=o[0|u*r.scaleX*M],y=a[0|u*i.scaleX*M],_=h[0|u*n.scaleX*M],w=l[0|u*s.scaleX*M]),I[S++]=255-b,I[S++]=255-y,I[S++]=255-_,I[S++]=255-w;break;default:throw new Error("Unsupported color mode")}return I},copyToImageData:function(t,e){var r,i,n,s,o,a,h,l,u,c=t.width,f=t.height,p=t.data,m=this.getData(c,f),g=0,w=0;switch(this.components.length){case 1:for(i=0;i<f;i++)for(r=0;r<c;r++)n=m[g++],p[w++]=n,p[w++]=n,p[w++]=n,e&&(p[w++]=255);break;case 3:for(i=0;i<f;i++)for(r=0;r<c;r++)h=m[g++],l=m[g++],u=m[g++],p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;case 4:for(i=0;i<f;i++)for(r=0;r<c;r++)o=m[g++],a=m[g++],n=m[g++],h=255-d(o*(1-(s=m[g++])/255)+s),l=255-d(a*(1-s/255)+s),u=255-d(n*(1-s/255)+s),p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;default:throw new Error("Unsupported color mode")}}};var p=0,m=0;function g(t=0){var e=p+t;if(e>m){var r=Math.ceil((e-m)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${r}MB`)}p=e}return l.resetMaxMemoryUsage=function(t){p=0,m=t},l.getBytesAllocated=function(){return p},l.requestMemoryAllocation=g,l}();t.exports=function(t,r={}){var i={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512,...r},n=new Uint8Array(t),s=new e;s.opts=i,e.resetMaxMemoryUsage(1024*i.maxMemoryUsageInMB*1024),s.parse(n);var o=i.formatAsRGBA?4:3,a=s.width*s.height*o;try{e.requestMemoryAllocation(a);var h={width:s.width,height:s.height,exifBuffer:s.exifBuffer,data:i.useTArray?new Uint8Array(a):Buffer.alloc(a)};s.comments.length>0&&(h.comments=s.comments)}catch(t){throw t instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+a):t}return s.copyToImageData(h,i.formatAsRGBA),h}},587:t=>{function e(t){Math.round;var e,r,i,n,s,o=Math.floor,a=new Array(64),h=new Array(64),l=new Array(64),u=new Array(64),c=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),m=[],g=0,w=7,b=new Array(64),y=new Array(64),_=new Array(64),v=new Array(256),x=new Array(2048),k=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],A=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],M=[0,1,2,3,4,5,6,7,8,9,10,11],E=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],S=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],C=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],D=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],P=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function B(t,e){for(var r=0,i=0,n=new Array,s=1;s<=16;s++){for(var o=1;o<=t[s];o++)n[e[i]]=[],n[e[i]][0]=r,n[e[i]][1]=s,i++,r++;r*=2}return n}function R(t){for(var e=t[0],r=t[1]-1;r>=0;)e&1<<r&&(g|=1<<w),r--,--w<0&&(255==g?(T(255),T(0)):T(g),w=7,g=0)}function T(t){m.push(t)}function U(t){T(t>>8&255),T(255&t)}function O(t,e,r,i,n){for(var s,o=n[0],a=n[240],h=function(t,e){var r,i,n,s,o,a,h,l,u,c,f=0;for(u=0;u<8;++u){r=t[f],i=t[f+1],n=t[f+2],s=t[f+3],o=t[f+4],a=t[f+5],h=t[f+6];var p=r+(l=t[f+7]),m=r-l,g=i+h,w=i-h,b=n+a,y=n-a,_=s+o,v=s-o,x=p+_,k=p-_,A=g+b,M=g-b;t[f]=x+A,t[f+4]=x-A;var E=.707106781*(M+k);t[f+2]=k+E,t[f+6]=k-E;var S=.382683433*((x=v+y)-(M=w+m)),C=.5411961*x+S,I=1.306562965*M+S,D=.707106781*(A=y+w),P=m+D,B=m-D;t[f+5]=B+C,t[f+3]=B-C,t[f+1]=P+I,t[f+7]=P-I,f+=8}for(f=0,u=0;u<8;++u){r=t[f],i=t[f+8],n=t[f+16],s=t[f+24],o=t[f+32],a=t[f+40],h=t[f+48];var R=r+(l=t[f+56]),T=r-l,U=i+h,O=i-h,L=n+a,F=n-a,N=s+o,z=s-o,j=R+N,Y=R-N,V=U+L,q=U-L;t[f]=j+V,t[f+32]=j-V;var X=.707106781*(q+Y);t[f+16]=Y+X,t[f+48]=Y-X;var G=.382683433*((j=z+F)-(q=O+T)),$=.5411961*j+G,W=1.306562965*q+G,Z=.707106781*(V=F+O),H=T+Z,K=T-Z;t[f+40]=K+$,t[f+24]=K-$,t[f+8]=H+W,t[f+56]=H-W,f++}for(u=0;u<64;++u)c=t[u]*e[u],d[u]=c>0?c+.5|0:c-.5|0;return d}(t,e),l=0;l<64;++l)p[k[l]]=h[l];var u=p[0]-r;r=p[0],0==u?R(i[0]):(R(i[f[s=32767+u]]),R(c[s]));for(var m=63;m>0&&0==p[m];m--);if(0==m)return R(o),r;for(var g,w=1;w<=m;){for(var b=w;0==p[w]&&w<=m;++w);var y=w-b;if(y>=16){g=y>>4;for(var _=1;_<=g;++_)R(a);y&=15}s=32767+p[w],R(n[(y<<4)+f[s]]),R(c[s]),w++}return 63!=m&&R(o),r}function L(t){t<=0&&(t=1),t>100&&(t=100),s!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],r=0;r<64;r++){var i=o((e[r]*t+50)/100);i<1?i=1:i>255&&(i=255),a[k[r]]=i}for(var n=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],s=0;s<64;s++){var c=o((n[s]*t+50)/100);c<1?c=1:c>255&&(c=255),h[k[s]]=c}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var m=0;m<8;m++)l[d]=1/(a[k[d]]*f[p]*f[m]*8),u[d]=1/(h[k[d]]*f[p]*f[m]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),s=t)}this.encode=function(t,s){(new Date).getTime(),s&&L(s),m=new Array,g=0,w=7,U(65496),U(65504),U(16),T(74),T(70),T(73),T(70),T(0),T(1),T(1),T(0),U(1),U(1),T(0),T(0),function(t){if(t){U(65505),69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]?U(t.length+2):(U(t.length+5+2),T(69),T(120),T(105),T(102),T(0));for(var e=0;e<t.length;e++)T(t[e])}}(t.exifBuffer),function(){U(65499),U(132),T(0);for(var t=0;t<64;t++)T(a[t]);T(1);for(var e=0;e<64;e++)T(h[e])}(),function(t,e){U(65472),U(17),T(8),U(e),U(t),T(3),T(1),T(17),T(0),T(2),T(17),T(1),T(3),T(17),T(1)}(t.width,t.height),function(){U(65476),U(418),T(0);for(var t=0;t<16;t++)T(A[t+1]);for(var e=0;e<=11;e++)T(M[e]);T(16);for(var r=0;r<16;r++)T(E[r+1]);for(var i=0;i<=161;i++)T(S[i]);T(1);for(var n=0;n<16;n++)T(C[n+1]);for(var s=0;s<=11;s++)T(I[s]);T(17);for(var o=0;o<16;o++)T(D[o+1]);for(var a=0;a<=161;a++)T(P[a])}(),U(65498),U(12),T(3),T(1),T(0),T(2),T(17),T(3),T(17),T(0),T(63),T(0);var o=0,c=0,f=0;g=0,w=7,this.encode.displayName="_encode_";for(var d,p,v,k,B,F,N,z,j,Y=t.data,V=t.width,q=t.height,X=4*V,G=0;G<q;){for(d=0;d<X;){for(F=B=X*G+d,N=-1,z=0,j=0;j<64;j++)F=B+(z=j>>3)*X+(N=4*(7&j)),G+z>=q&&(F-=X*(G+1+z-q)),d+N>=X&&(F-=d+N-X+4),p=Y[F++],v=Y[F++],k=Y[F++],b[j]=(x[p]+x[v+256>>0]+x[k+512>>0]>>16)-128,y[j]=(x[p+768>>0]+x[v+1024>>0]+x[k+1280>>0]>>16)-128,_[j]=(x[p+1280>>0]+x[v+1536>>0]+x[k+1792>>0]>>16)-128;o=O(b,l,o,e,i),c=O(y,u,c,r,n),f=O(_,u,f,r,n),d+=32}G+=8}if(w>=0){var $=[];$[1]=w+1,$[0]=(1<<w+1)-1,R($)}return U(65497),Buffer.from(m)},(new Date).getTime(),t||(t=50),function(){for(var t=String.fromCharCode,e=0;e<256;e++)v[e]=t(e)}(),e=B(A,M),r=B(C,I),i=B(E,S),n=B(D,P),function(){for(var t=1,e=2,r=1;r<=15;r++){for(var i=t;i<e;i++)f[32767+i]=r,c[32767+i]=[],c[32767+i][1]=r,c[32767+i][0]=i;for(var n=-(e-1);n<=-t;n++)f[32767+n]=r,c[32767+n]=[],c[32767+n][1]=r,c[32767+n][0]=e-1+n;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)x[t]=19595*t,x[t+256>>0]=38470*t,x[t+512>>0]=7471*t+32768,x[t+768>>0]=-11059*t,x[t+1024>>0]=-21709*t,x[t+1280>>0]=32768*t+8421375,x[t+1536>>0]=-27439*t,x[t+1792>>0]=-5329*t}(),L(t),(new Date).getTime()}t.exports=function(t,r){return void 0===r&&(r=50),{data:new e(r).encode(t,r),width:t.width,height:t.height}}},5307:t=>{t.exports=function t(e,r,i){function n(o,a){if(!r[o]){if(!e[o]){if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var l=r[o]={exports:{}};e[o][0].call(l.exports,(function(t){return n(e[o][1][t]||t)}),l,l.exports,t,e,r,i)}return r[o].exports}for(var s=void 0,o=0;o<i.length;o++)n(i[o]);return n}({1:[function(t,e,r){var i,n,s,o,a,h={}.hasOwnProperty;i=t("./PriorityQueue/AbstractPriorityQueue"),n=t("./PriorityQueue/ArrayStrategy"),o=t("./PriorityQueue/BinaryHeapStrategy"),s=t("./PriorityQueue/BHeapStrategy"),(a=function(t){function e(t){t||(t={}),t.strategy||(t.strategy=o),t.comparator||(t.comparator=function(t,e){return(t||0)-(e||0)}),e.__super__.constructor.call(this,t)}return function(t,e){for(var r in e)h.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,t),e}(i)).ArrayStrategy=n,a.BinaryHeapStrategy=o,a.BHeapStrategy=s,e.exports=a},{"./PriorityQueue/AbstractPriorityQueue":2,"./PriorityQueue/ArrayStrategy":3,"./PriorityQueue/BHeapStrategy":4,"./PriorityQueue/BinaryHeapStrategy":5}],2:[function(t,e,r){e.exports=function(){function t(t){var e;if(null==(null!=t?t.strategy:void 0))throw"Must pass options.strategy, a strategy";if(null==(null!=t?t.comparator:void 0))throw"Must pass options.comparator, a comparator";this.priv=new t.strategy(t),this.length=(null!=t&&null!=(e=t.initialValues)?e.length:void 0)||0}return t.prototype.queue=function(t){this.length++,this.priv.queue(t)},t.prototype.dequeue=function(t){if(!this.length)throw"Empty queue";return this.length--,this.priv.dequeue()},t.prototype.peek=function(t){if(!this.length)throw"Empty queue";return this.priv.peek()},t.prototype.clear=function(){return this.length=0,this.priv.clear()},t}()},{}],3:[function(t,e,r){var i;i=function(t,e,r){var i,n,s;for(n=0,i=t.length;n<i;)r(t[s=n+i>>>1],e)>=0?n=s+1:i=s;return n},e.exports=function(){function t(t){var e;this.options=t,this.comparator=this.options.comparator,this.data=(null!=(e=this.options.initialValues)?e.slice(0):void 0)||[],this.data.sort(this.comparator).reverse()}return t.prototype.queue=function(t){var e;e=i(this.data,t,this.comparator),this.data.splice(e,0,t)},t.prototype.dequeue=function(){return this.data.pop()},t.prototype.peek=function(){return this.data[this.data.length-1]},t.prototype.clear=function(){this.data.length=0},t}()},{}],4:[function(t,e,r){e.exports=function(){function t(t){var e,r,i,n,s,o,a,h;for(this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.pageSize=(null!=t?t.pageSize:void 0)||512,this.length=0,a=0;1<<a<this.pageSize;)a+=1;if(1<<a!==this.pageSize)throw"pageSize must be a power of two";for(this._shift=a,this._emptyMemoryPageTemplate=e=[],r=0,s=this.pageSize;0<=s?r<s:r>s;0<=s?++r:--r)e.push(null);if(this._memory=[],this._mask=this.pageSize-1,t.initialValues)for(i=0,n=(o=t.initialValues).length;i<n;i++)h=o[i],this.queue(h)}return t.prototype.queue=function(t){this.length+=1,this._write(this.length,t),this._bubbleUp(this.length,t)},t.prototype.dequeue=function(){var t,e;return t=this._read(1),e=this._read(this.length),this.length-=1,this.length>0&&(this._write(1,e),this._bubbleDown(1,e)),t},t.prototype.peek=function(){return this._read(1)},t.prototype.clear=function(){this.length=0,this._memory.length=0},t.prototype._write=function(t,e){var r;for(r=t>>this._shift;r>=this._memory.length;)this._memory.push(this._emptyMemoryPageTemplate.slice(0));return this._memory[r][t&this._mask]=e},t.prototype._read=function(t){return this._memory[t>>this._shift][t&this._mask]},t.prototype._bubbleUp=function(t,e){var r,i,n,s;for(r=this.comparator;t>1&&(i=t&this._mask,t<this.pageSize||i>3?n=t&~this._mask|i>>1:i<2?(n=t-this.pageSize>>this._shift,n+=n&~(this._mask>>1),n|=this.pageSize>>1):n=t-2,!(r(s=this._read(n),e)<0));)this._write(n,e),this._write(t,s),t=n},t.prototype._bubbleDown=function(t,e){var r,i,n,s,o;for(o=this.comparator;t<this.length;)if(t>this._mask&&!(t&this._mask-1)?r=i=t+2:t&this.pageSize>>1?(r=(t&~this._mask)>>1,i=1+(r=1+(r|=t&this._mask>>1)<<this._shift)):i=(r=t+(t&this._mask))+1,r!==i&&i<=this.length)if(n=this._read(r),s=this._read(i),o(n,e)<0&&o(n,s)<=0)this._write(r,e),this._write(t,n),t=r;else{if(!(o(s,e)<0))break;this._write(i,e),this._write(t,s),t=i}else{if(!(r<=this.length))break;if(!(o(n=this._read(r),e)<0))break;this._write(r,e),this._write(t,n),t=r}},t}()},{}],5:[function(t,e,r){e.exports=function(){function t(t){var e;this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.length=0,this.data=(null!=(e=t.initialValues)?e.slice(0):void 0)||[],this._heapify()}return t.prototype._heapify=function(){var t,e,r;if(this.data.length>0)for(t=e=1,r=this.data.length;1<=r?e<r:e>r;t=1<=r?++e:--e)this._bubbleUp(t)},t.prototype.queue=function(t){this.data.push(t),this._bubbleUp(this.data.length-1)},t.prototype.dequeue=function(){var t,e;return e=this.data[0],t=this.data.pop(),this.data.length>0&&(this.data[0]=t,this._bubbleDown(0)),e},t.prototype.peek=function(){return this.data[0]},t.prototype.clear=function(){this.length=0,this.data.length=0},t.prototype._bubbleUp=function(t){for(var e,r;t>0&&(e=t-1>>>1,this.comparator(this.data[t],this.data[e])<0);)r=this.data[e],this.data[e]=this.data[t],this.data[t]=r,t=e},t.prototype._bubbleDown=function(t){var e,r,i,n,s;for(e=this.data.length-1;n=1+(r=1+(t<<1)),i=t,r<=e&&this.comparator(this.data[r],this.data[i])<0&&(i=r),n<=e&&this.comparator(this.data[n],this.data[i])<0&&(i=n),i!==t;)s=this.data[i],this.data[i]=this.data[t],this.data[t]=s,t=i},t}()},{}]},{},[1])(1)},2229:function(t){t.exports=function(){"use strict";function t(t){return"string"==typeof t||t instanceof String}var e=Number.isFinite||window.isFinite;function r(t){return e(t)}function i(t){return t}function n(t,e){if(e.length!==t.length)return!1;for(var r=0;r<t.length;r++){if(e[r].compareArray&&!e[r].compareArray(t[r]))return!1;if(e[r]!==t[r])return!1}return!0}function s(t,e){Object.keys(e).forEach((function(r){t[r]=e[r]}))}function o(){for(var t=1,e=0,r=0;r<arguments.length;r++){var i=arguments[r];e+=l(i),t*=i}return 0!==e?h(t,e):t}function a(t,e){if(0===e)throw new Error("Divide by zero");var r=Math.pow(10,l(e));return o(t,r/(r*e))}function h(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)}function l(t){if(!isFinite(t))return 0;for(var e=0;t%1!=0;)t*=10,e++;return e}function u(){var t;if(!this)return t=Object.create(u.prototype),u.apply(t,arguments),t;t=Error.apply(this,arguments),this.name="QtyError",this.message=t.message,this.stack=t.stack}function c(t,e){throw new u("Incompatible units: "+t+" and "+e)}u.prototype=Object.create(Error.prototype,{constructor:{value:u}});var f={"<googol>":[["googol"],1e100,"prefix"],"<kibi>":[["Ki","Kibi","kibi"],Math.pow(2,10),"prefix"],"<mebi>":[["Mi","Mebi","mebi"],Math.pow(2,20),"prefix"],"<gibi>":[["Gi","Gibi","gibi"],Math.pow(2,30),"prefix"],"<tebi>":[["Ti","Tebi","tebi"],Math.pow(2,40),"prefix"],"<pebi>":[["Pi","Pebi","pebi"],Math.pow(2,50),"prefix"],"<exi>":[["Ei","Exi","exi"],Math.pow(2,60),"prefix"],"<zebi>":[["Zi","Zebi","zebi"],Math.pow(2,70),"prefix"],"<yebi>":[["Yi","Yebi","yebi"],Math.pow(2,80),"prefix"],"<yotta>":[["Y","Yotta","yotta"],1e24,"prefix"],"<zetta>":[["Z","Zetta","zetta"],1e21,"prefix"],"<exa>":[["E","Exa","exa"],1e18,"prefix"],"<peta>":[["P","Peta","peta"],1e15,"prefix"],"<tera>":[["T","Tera","tera"],1e12,"prefix"],"<giga>":[["G","Giga","giga"],1e9,"prefix"],"<mega>":[["M","Mega","mega"],1e6,"prefix"],"<kilo>":[["k","kilo"],1e3,"prefix"],"<hecto>":[["h","Hecto","hecto"],100,"prefix"],"<deca>":[["da","Deca","deca","deka"],10,"prefix"],"<deci>":[["d","Deci","deci"],.1,"prefix"],"<centi>":[["c","Centi","centi"],.01,"prefix"],"<milli>":[["m","Milli","milli"],.001,"prefix"],"<micro>":[["u","μ","µ","Micro","mc","micro"],1e-6,"prefix"],"<nano>":[["n","Nano","nano"],1e-9,"prefix"],"<pico>":[["p","Pico","pico"],1e-12,"prefix"],"<femto>":[["f","Femto","femto"],1e-15,"prefix"],"<atto>":[["a","Atto","atto"],1e-18,"prefix"],"<zepto>":[["z","Zepto","zepto"],1e-21,"prefix"],"<yocto>":[["y","Yocto","yocto"],1e-24,"prefix"],"<1>":[["1","<1>"],1,""],"<meter>":[["m","meter","meters","metre","metres"],1,"length",["<meter>"]],"<inch>":[["in","inch","inches",'"'],.0254,"length",["<meter>"]],"<foot>":[["ft","foot","feet","'"],.3048,"length",["<meter>"]],"<yard>":[["yd","yard","yards"],.9144,"length",["<meter>"]],"<mile>":[["mi","mile","miles"],1609.344,"length",["<meter>"]],"<naut-mile>":[["nmi","naut-mile"],1852,"length",["<meter>"]],"<league>":[["league","leagues"],4828,"length",["<meter>"]],"<furlong>":[["furlong","furlongs"],201.2,"length",["<meter>"]],"<rod>":[["rd","rod","rods"],5.029,"length",["<meter>"]],"<mil>":[["mil","mils"],254e-7,"length",["<meter>"]],"<angstrom>":[["ang","angstrom","angstroms"],1e-10,"length",["<meter>"]],"<fathom>":[["fathom","fathoms"],1.829,"length",["<meter>"]],"<pica>":[["pica","picas"],.00423333333,"length",["<meter>"]],"<point>":[["pt","point","points"],.000352777778,"length",["<meter>"]],"<redshift>":[["z","red-shift","redshift"],1302773e20,"length",["<meter>"]],"<AU>":[["AU","astronomical-unit"],1495979e5,"length",["<meter>"]],"<light-second>":[["ls","light-second"],299792500,"length",["<meter>"]],"<light-minute>":[["lmin","light-minute"],1798755e4,"length",["<meter>"]],"<light-year>":[["ly","light-year"],9460528e9,"length",["<meter>"]],"<parsec>":[["pc","parsec","parsecs"],3085678e10,"length",["<meter>"]],"<datamile>":[["DM","datamile"],1828.8,"length",["<meter>"]],"<kilogram>":[["kg","kilogram","kilograms"],1,"mass",["<kilogram>"]],"<AMU>":[["u","AMU","amu"],1660538921e-36,"mass",["<kilogram>"]],"<dalton>":[["Da","Dalton","Daltons","dalton","daltons"],1660538921e-36,"mass",["<kilogram>"]],"<slug>":[["slug","slugs"],14.5939029,"mass",["<kilogram>"]],"<short-ton>":[["tn","ton","short-ton"],907.18474,"mass",["<kilogram>"]],"<metric-ton>":[["tonne","metric-ton"],1e3,"mass",["<kilogram>"]],"<carat>":[["ct","carat","carats"],2e-4,"mass",["<kilogram>"]],"<pound>":[["lbs","lb","pound","pounds","#"],.45359237,"mass",["<kilogram>"]],"<ounce>":[["oz","ounce","ounces"],.0283495231,"mass",["<kilogram>"]],"<gram>":[["g","gram","grams","gramme","grammes"],.001,"mass",["<kilogram>"]],"<grain>":[["grain","grains","gr"],6479891e-11,"mass",["<kilogram>"]],"<dram>":[["dram","drams","dr"],.0017718452,"mass",["<kilogram>"]],"<stone>":[["stone","stones","st"],6.35029318,"mass",["<kilogram>"]],"<hectare>":[["hectare"],1e4,"area",["<meter>","<meter>"]],"<acre>":[["acre","acres"],4046.85642,"area",["<meter>","<meter>"]],"<sqft>":[["sqft"],1,"area",["<foot>","<foot>"]],"<liter>":[["l","L","liter","liters","litre","litres"],.001,"volume",["<meter>","<meter>","<meter>"]],"<gallon>":[["gal","gallon","gallons"],.0037854118,"volume",["<meter>","<meter>","<meter>"]],"<gallon-imp>":[["galimp","gallon-imp","gallons-imp"],.00454609,"volume",["<meter>","<meter>","<meter>"]],"<quart>":[["qt","quart","quarts"],.00094635295,"volume",["<meter>","<meter>","<meter>"]],"<pint>":[["pt","pint","pints"],.000473176475,"volume",["<meter>","<meter>","<meter>"]],"<pint-imp>":[["ptimp","pint-imp","pints-imp"],.00056826125,"volume",["<meter>","<meter>","<meter>"]],"<cup>":[["cu","cup","cups"],.000236588238,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce>":[["floz","fluid-ounce","fluid-ounces"],295735297e-13,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce-imp>":[["flozimp","floz-imp","fluid-ounce-imp","fluid-ounces-imp"],284130625e-13,"volume",["<meter>","<meter>","<meter>"]],"<tablespoon>":[["tb","tbsp","tbs","tablespoon","tablespoons"],147867648e-13,"volume",["<meter>","<meter>","<meter>"]],"<teaspoon>":[["tsp","teaspoon","teaspoons"],492892161e-14,"volume",["<meter>","<meter>","<meter>"]],"<bushel>":[["bu","bsh","bushel","bushels"],.035239072,"volume",["<meter>","<meter>","<meter>"]],"<oilbarrel>":[["bbl","oilbarrel","oilbarrels","oil-barrel","oil-barrels"],.158987294928,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel>":[["bl","bl-us","beerbarrel","beerbarrels","beer-barrel","beer-barrels"],.1173477658,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel-imp>":[["blimp","bl-imp","beerbarrel-imp","beerbarrels-imp","beer-barrel-imp","beer-barrels-imp"],.16365924,"volume",["<meter>","<meter>","<meter>"]],"<kph>":[["kph"],.277777778,"speed",["<meter>"],["<second>"]],"<mph>":[["mph"],.44704,"speed",["<meter>"],["<second>"]],"<knot>":[["kt","kn","kts","knot","knots"],.514444444,"speed",["<meter>"],["<second>"]],"<fps>":[["fps"],.3048,"speed",["<meter>"],["<second>"]],"<gee>":[["gee"],9.80665,"acceleration",["<meter>"],["<second>","<second>"]],"<Gal>":[["Gal"],.01,"acceleration",["<meter>"],["<second>","<second>"]],"<kelvin>":[["degK","kelvin"],1,"temperature",["<kelvin>"]],"<celsius>":[["degC","celsius","celsius","centigrade"],1,"temperature",["<kelvin>"]],"<fahrenheit>":[["degF","fahrenheit"],5/9,"temperature",["<kelvin>"]],"<rankine>":[["degR","rankine"],5/9,"temperature",["<kelvin>"]],"<temp-K>":[["tempK","temp-K"],1,"temperature",["<temp-K>"]],"<temp-C>":[["tempC","temp-C"],1,"temperature",["<temp-K>"]],"<temp-F>":[["tempF","temp-F"],5/9,"temperature",["<temp-K>"]],"<temp-R>":[["tempR","temp-R"],5/9,"temperature",["<temp-K>"]],"<second>":[["s","sec","secs","second","seconds"],1,"time",["<second>"]],"<minute>":[["min","mins","minute","minutes"],60,"time",["<second>"]],"<hour>":[["h","hr","hrs","hour","hours"],3600,"time",["<second>"]],"<day>":[["d","day","days"],86400,"time",["<second>"]],"<week>":[["wk","week","weeks"],604800,"time",["<second>"]],"<fortnight>":[["fortnight","fortnights"],1209600,"time",["<second>"]],"<year>":[["y","yr","year","years","annum"],31556926,"time",["<second>"]],"<decade>":[["decade","decades"],315569260,"time",["<second>"]],"<century>":[["century","centuries"],3155692600,"time",["<second>"]],"<pascal>":[["Pa","pascal","Pascal"],1,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<bar>":[["bar","bars"],1e5,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<mmHg>":[["mmHg"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inHg>":[["inHg"],3386.3881472,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<torr>":[["torr"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<atm>":[["atm","ATM","atmosphere","atmospheres"],101325,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<psi>":[["psi"],6894.76,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<cmh2o>":[["cmH2O","cmh2o"],98.0638,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inh2o>":[["inH2O","inh2o"],249.082052,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<poise>":[["P","poise"],.1,"viscosity",["<kilogram>"],["<meter>","<second>"]],"<stokes>":[["St","stokes"],1e-4,"viscosity",["<meter>","<meter>"],["<second>"]],"<mole>":[["mol","mole"],1,"substance",["<mole>"]],"<molar>":[["M","molar"],1e3,"concentration",["<mole>"],["<meter>","<meter>","<meter>"]],"<wtpercent>":[["wt%","wtpercent"],10,"concentration",["<kilogram>"],["<meter>","<meter>","<meter>"]],"<katal>":[["kat","katal","Katal"],1,"activity",["<mole>"],["<second>"]],"<unit>":[["U","enzUnit","unit"],16667e-19,"activity",["<mole>"],["<second>"]],"<farad>":[["F","farad","Farad"],1,"capacitance",["<second>","<second>","<second>","<second>","<ampere>","<ampere>"],["<meter>","<meter>","<kilogram>"]],"<coulomb>":[["C","coulomb","Coulomb"],1,"charge",["<ampere>","<second>"]],"<Ah>":[["Ah"],3600,"charge",["<ampere>","<second>"]],"<ampere>":[["A","Ampere","ampere","amp","amps"],1,"current",["<ampere>"]],"<siemens>":[["S","Siemens","siemens"],1,"conductance",["<second>","<second>","<second>","<ampere>","<ampere>"],["<kilogram>","<meter>","<meter>"]],"<henry>":[["H","Henry","henry"],1,"inductance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>","<ampere>"]],"<volt>":[["V","Volt","volt","volts"],1,"potential",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>"]],"<ohm>":[["Ohm","ohm","Ω","Ω"],1,"resistance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>","<ampere>"]],"<weber>":[["Wb","weber","webers"],1,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<tesla>":[["T","tesla","teslas"],1,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<gauss>":[["G","gauss"],1e-4,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<maxwell>":[["Mx","maxwell","maxwells"],1e-8,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<oersted>":[["Oe","oersted","oersteds"],250/Math.PI,"magnetism",["<ampere>"],["<meter>"]],"<joule>":[["J","joule","Joule","joules"],1,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<erg>":[["erg","ergs"],1e-7,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<btu>":[["BTU","btu","BTUs"],1055.056,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<calorie>":[["cal","calorie","calories"],4.184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Calorie>":[["Cal","Calorie","Calories"],4184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<therm-US>":[["th","therm","therms","Therm","therm-US"],105480400,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Wh>":[["Wh"],3600,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<newton>":[["N","Newton","newton"],1,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<dyne>":[["dyn","dyne"],1e-5,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<pound-force>":[["lbf","pound-force"],4.448222,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<hertz>":[["Hz","hertz","Hertz"],1,"frequency",["<1>"],["<second>"]],"<radian>":[["rad","radian","radians"],1,"angle",["<radian>"]],"<degree>":[["deg","degree","degrees"],Math.PI/180,"angle",["<radian>"]],"<gradian>":[["gon","grad","gradian","grads"],Math.PI/200,"angle",["<radian>"]],"<steradian>":[["sr","steradian","steradians"],1,"solid_angle",["<steradian>"]],"<rotation>":[["rotation"],2*Math.PI,"angle",["<radian>"]],"<rpm>":[["rpm"],2*Math.PI/60,"angular_velocity",["<radian>"],["<second>"]],"<byte>":[["B","byte","bytes"],1,"information",["<byte>"]],"<bit>":[["b","bit","bits"],.125,"information",["<byte>"]],"<Bps>":[["Bps"],1,"information_rate",["<byte>"],["<second>"]],"<bps>":[["bps"],.125,"information_rate",["<byte>"],["<second>"]],"<dollar>":[["USD","dollar"],1,"currency",["<dollar>"]],"<cents>":[["cents"],.01,"currency",["<dollar>"]],"<candela>":[["cd","candela"],1,"luminosity",["<candela>"]],"<lumen>":[["lm","lumen"],1,"luminous_power",["<candela>","<steradian>"]],"<lux>":[["lux"],1,"illuminance",["<candela>","<steradian>"],["<meter>","<meter>"]],"<watt>":[["W","watt","watts"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere>":[["VA","volt-ampere"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere-reactive>":[["var","Var","VAr","VAR","volt-ampere-reactive"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<horsepower>":[["hp","horsepower"],745.699872,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<gray>":[["Gy","gray","grays"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<roentgen>":[["R","roentgen"],.00933,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<sievert>":[["Sv","sievert","sieverts"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<becquerel>":[["Bq","becquerel","becquerels"],1,"radiation",["<1>"],["<second>"]],"<curie>":[["Ci","curie","curies"],37e9,"radiation",["<1>"],["<second>"]],"<cpm>":[["cpm"],1/60,"rate",["<count>"],["<second>"]],"<dpm>":[["dpm"],1/60,"rate",["<count>"],["<second>"]],"<bpm>":[["bpm"],1/60,"rate",["<count>"],["<second>"]],"<dot>":[["dot","dots"],1,"resolution",["<each>"]],"<pixel>":[["pixel","px"],1,"resolution",["<each>"]],"<ppi>":[["ppi"],1,"resolution",["<pixel>"],["<inch>"]],"<dpi>":[["dpi"],1,"typography",["<dot>"],["<inch>"]],"<cell>":[["cells","cell"],1,"counting",["<each>"]],"<each>":[["each"],1,"counting",["<each>"]],"<count>":[["count"],1,"counting",["<each>"]],"<base-pair>":[["bp","base-pair"],1,"counting",["<each>"]],"<nucleotide>":[["nt","nucleotide"],1,"counting",["<each>"]],"<molecule>":[["molecule","molecules"],1,"counting",["<1>"]],"<dozen>":[["doz","dz","dozen"],12,"prefix_only",["<each>"]],"<percent>":[["%","percent"],.01,"prefix_only",["<1>"]],"<ppm>":[["ppm"],1e-6,"prefix_only",["<1>"]],"<ppt>":[["ppt"],1e-9,"prefix_only",["<1>"]],"<gross>":[["gr","gross"],144,"prefix_only",["<dozen>","<dozen>"]],"<decibel>":[["dB","decibel","decibels"],1,"logarithmic",["<decibel>"]]},d=["<meter>","<kilogram>","<second>","<mole>","<ampere>","<radian>","<kelvin>","<temp-K>","<byte>","<dollar>","<candela>","<each>","<steradian>","<decibel>"],p="<1>",m=[p];function g(t,e){var i=e[1],n=e[3]||[],s=e[4]||[];if(!r(i))throw new u(t+": Invalid unit definition. 'scalar' must be a number");n.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'numerator' is not recognized")})),s.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'denominator' is not recognized")}))}var w={},b={},y={},_={},v={};for(var x in f)if(f.hasOwnProperty(x)){var k=f[x];if("prefix"===k[2]){w[x]=k[1];for(var A=0;A<k[0].length;A++)b[k[0][A]]=x}else{g(x,k),y[x]={scalar:k[1],numerator:k[3],denominator:k[4]};for(var M=0;M<k[0].length;M++)_[k[0][M]]=x}v[x]=k[0][0]}var E=["length","time","temperature","mass","current","substance","luminosity","currency","information","angle"];function S(){if(this.signature)return this.signature;for(var t=C.call(this),e=0;e<t.length;e++)t[e]*=Math.pow(20,e);return t.reduce((function(t,e){return t+e}),0)}function C(){if(!this.isBase())return C.call(this.toBase());for(var t,e,r=new Array(E.length),i=0;i<r.length;i++)r[i]=0;for(var n=0;n<this.numerator.length;n++)(t=f[this.numerator[n]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]+1);for(var s=0;s<this.denominator.length;s++)(t=f[this.denominator[s]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]-1);return r}var I=new RegExp("^([+-]?\\s*(?:(?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))(?:[Ee][+-]?\\d+)?)?\\s*([^/]*)(?:/(.+))?$"),D=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?(-?[01234](?![a-zA-Z]))"),P=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?([01234](?![a-zA-Z]))");function B(e){t(e)||(e=e.toString()),e=e.trim();var r=I.exec(e);if(!r)throw new u(e+": Quantity not recognized");var i=r[1];i?(i=i.replace(/\s/g,""),this.scalar=parseFloat(i)):this.scalar=1;for(var n,s,o,a=r[2],h=r[3];r=D.exec(a);){if(n=parseFloat(r[2]),isNaN(n))throw new u("Unit exponent is not a number");if(0===n&&!T.test(r[1]))throw new u("Unit not recognized");s=r[1]+" ",o="";for(var l=0;l<Math.abs(n);l++)o+=s;n>=0?a=a.replace(r[0],o):(h=h?h+o:o,a=a.replace(r[0],""))}for(;r=P.exec(h);){if(n=parseFloat(r[2]),isNaN(n))throw new u("Unit exponent is not a number");if(0===n&&!T.test(r[1]))throw new u("Unit not recognized");s=r[1]+" ",o="";for(var c=0;c<n;c++)o+=s;h=h.replace(r[0],o)}a&&(this.numerator=L(a.trim())),h&&(this.denominator=L(h.trim()))}var R="("+Object.keys(b).sort((function(t,e){return e.length-t.length})).join("|")+")??("+Object.keys(_).sort((function(t,e){return e.length-t.length})).join("|")+")(?:\\b|$)",T=new RegExp("^\\s*("+R+"[\\s\\*]*)+$"),U=new RegExp(R,"g"),O={};function L(t){var e=O[t];if(e)return e;var r,i=[];if(!T.test(t))throw new u("Unit not recognized");for(;r=U.exec(t);)i.push(r.slice(1));return i=(i=(i=i.map((function(t){return b[t[0]]?[b[t[0]],_[t[1]]]:[_[t[1]]]}))).reduce((function(t,e){return t.concat(e)}),[])).filter((function(t){return t})),O[t]=i,i}function F(t){return t instanceof N}function N(t,e){if(z.apply(null,arguments),!F(this))return new N(t,e);if(this.scalar=null,this.baseScalar=null,this.signature=null,this._conversionCache={},this.numerator=m,this.denominator=m,j(t)?(this.scalar=t.scalar,this.numerator=t.numerator&&0!==t.numerator.length?t.numerator:m,this.denominator=t.denominator&&0!==t.denominator.length?t.denominator:m):e?(B.call(this,e),this.scalar=t):B.call(this,t),this.denominator.join("*").indexOf("temp")>=0)throw new u("Cannot divide with temperatures");if(this.numerator.join("*").indexOf("temp")>=0){if(this.numerator.length>1)throw new u("Cannot multiply by temperatures");if(!n(this.denominator,m))throw new u("Cannot divide with temperatures")}if(this.initValue=t,Y.call(this),this.isTemperature()&&this.baseScalar<0)throw new u("Temperatures must not be less than absolute zero")}function z(e,i){if(i){if(!r(e)||!t(i))throw new u("Only number accepted as initialization value when units are explicitly provided")}else if(!(t(e)||r(e)||F(e)||j(e)))throw new u("Only string, number or quantity accepted as single initialization value")}function j(t){return t&&"object"==typeof t&&t.hasOwnProperty("scalar")}function Y(){if(this.baseScalar)return this.baseScalar;if(this.isBase())this.baseScalar=this.scalar,this.signature=S.call(this);else{var t=this.toBase();this.baseScalar=t.scalar,this.signature=t.signature}}N.prototype={constructor:N};var V={"-312078":"elastance","-312058":"resistance","-312038":"inductance","-152058":"potential","-152040":"magnetism","-152038":"magnetism","-7997":"specific_volume","-79":"snap","-59":"jolt","-39":"acceleration","-38":"radiation","-20":"frequency","-19":"speed","-18":"viscosity","-17":"volumetric_flow","-1":"wavenumber",0:"unitless",1:"length",2:"area",3:"volume",20:"time",400:"temperature",7941:"yank",7942:"power",7959:"pressure",7961:"force",7962:"energy",7979:"viscosity",7981:"momentum",7982:"angular_momentum",7997:"density",7998:"area_density",8e3:"mass",152020:"radiation_exposure",159999:"magnetism",16e4:"current",160020:"charge",312058:"conductance",312078:"capacitance",3199980:"activity",3199997:"molar_concentration",32e5:"substance",63999998:"illuminance",64e6:"luminous_power",128e7:"currency",25599999980:"information_rate",256e8:"information",511999999980:"angular_velocity",512e9:"angle"};function q(t,e){var r=e.to(X(t.units()));return N({scalar:t.scalar+r.scalar,numerator:t.numerator,denominator:t.denominator})}function X(t){if("tempK"===t)return"degK";if("tempC"===t)return"degC";if("tempF"===t)return"degF";if("tempR"===t)return"degR";throw new u("Unknown type for temp conversion from: "+t)}function G(t,e){var r,i=function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar;else if("tempF"===r)e=5*t.scalar/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<kelvin>"],denominator:m})}(t),n=e.units();if("degK"===n)r=i.scalar;else if("degC"===n)r=i.scalar;else if("degF"===n)r=9*i.scalar/5;else{if("degR"!==n)throw new u("Unknown type for degree conversion to: "+n);r=9*i.scalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}N.prototype.kind=function(){return V[this.signature.toString()]},s(N.prototype,{isDegrees:function(){return(null===this.signature||400===this.signature)&&1===this.numerator.length&&n(this.denominator,m)&&(this.numerator[0].match(/<temp-[CFRK]>/)||this.numerator[0].match(/<(kelvin|celsius|rankine|fahrenheit)>/))},isTemperature:function(){return this.isDegrees()&&this.numerator[0].match(/<temp-[CFRK]>/)}}),s(N.prototype,{to:function(e){var r,i;return null==e?this:t(e)?(r=this._conversionCache[e])?r:(i=N(e)).units()===this.units()?this:(this.isCompatible(i)?i=i.isTemperature()?function(t,e){var r,i=e.units();if("tempK"===i)r=t.baseScalar;else if("tempC"===i)r=t.baseScalar-273.15;else if("tempF"===i)r=9*t.baseScalar/5-459.67;else{if("tempR"!==i)throw new u("Unknown type for temp conversion to: "+i);r=9*t.baseScalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}(this,i):i.isDegrees()?G(this,i):N({scalar:a(this.baseScalar,i.baseScalar),numerator:i.numerator,denominator:i.denominator}):this.isInverse(i)?i=this.inverse().to(e):c(this.units(),i.units()),this._conversionCache[e]=i,i):this.to(e.units())},toBase:function(){if(this.isBase())return this;if(this.isTemperature())return function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar+273.15;else if("tempF"===r)e=5*(t.scalar+459.67)/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<temp-K>"],denominator:m})}(this);var t=$[this.units()];return t||(t=function(t,e){for(var r,i=[],n=[],s=1,a=0;a<t.length;a++)r=t[a],w[r]?s=o(s,w[r]):y[r]&&(s*=y[r].scalar,y[r].numerator&&i.push(y[r].numerator),y[r].denominator&&n.push(y[r].denominator));for(var h=0;h<e.length;h++)r=e[h],w[r]?s/=w[r]:y[r]&&(s/=y[r].scalar,y[r].numerator&&n.push(y[r].numerator),y[r].denominator&&i.push(y[r].denominator));return N({scalar:s,numerator:i=i.reduce((function(t,e){return t.concat(e)}),[]),denominator:n=n.reduce((function(t,e){return t.concat(e)}),[])})}(this.numerator,this.denominator),$[this.units()]=t),t.mul(this.scalar)},toFloat:function(){if(this.isUnitless())return this.scalar;throw new u("Can't convert to Float unless unitless.  Use Unit#scalar")},toPrec:function(e){if(t(e)&&(e=N(e)),r(e)&&(e=N(e+" "+this.units())),this.isUnitless()?e.isUnitless()||c(this.units(),e.units()):e=e.to(this.units()),0===e.scalar)throw new u("Divide by zero");return N(o(Math.round(this.scalar/e.scalar),e.scalar)+this.units())}});var $={};function W(t,e,r,i){function n(t){return t!==p}t=t.filter(n),r=r.filter(n),e=e.filter(n),i=i.filter(n);var s={};function o(t,e){for(var r,i,n,o=0;o<t.length;o++)if(w[t[o]]?(r=t[o+1],i=t[o],n=w[i],o++):(r=t[o],i=null,n=1),r&&r!==p)if(s[r]){s[r][0]+=e;var h=s[r][2]?w[s[r][2]]:1;s[r][1===e?3:4]*=a(n,h)}else s[r]=[e,r,i,1,1]}o(t,1),o(e,-1),o(r,1),o(i,-1);var h=[],l=[],u=1;for(var c in s)if(s.hasOwnProperty(c)){var f,d=s[c];if(d[0]>0)for(f=0;f<d[0];f++)h.push(null===d[2]?d[1]:[d[2],d[1]]);else if(d[0]<0)for(f=0;f<-d[0];f++)l.push(null===d[2]?d[1]:[d[2],d[1]]);u*=a(d[3],d[4])}return 0===h.length&&(h=m),0===l.length&&(l=m),[h=h.reduce((function(t,e){return t.concat(e)}),[]),l=l.reduce((function(t,e){return t.concat(e)}),[]),u]}function Z(){}N.parse=function(e){if(!t(e))throw new u("Argument should be a string");try{return this(e)}catch(t){return null}},N.getUnits=function(t){var e,r=[],i=Object.keys(f);if(void 0===t)for(e=0;e<i.length;e++)-1===["","prefix"].indexOf(f[i[e]][2])&&r.push(i[e].substr(1,i[e].length-2));else{if(-1===this.getKinds().indexOf(t))throw new u("Kind not recognized");for(e=0;e<i.length;e++)f[i[e]][2]===t&&r.push(i[e].substr(1,i[e].length-2))}return r.sort((function(t,e){return t.toLowerCase()<e.toLowerCase()?-1:t.toLowerCase()>e.toLowerCase()?1:0}))},N.getAliases=function(t){if(!_[t])throw new u("Unit not recognized");return f[_[t]][0]},N.mulSafe=o,N.divSafe=a,N.getKinds=function(){return t=Object.keys(V).map((function(t){return V[t]})),e={},t.filter((function(t){return!e.hasOwnProperty(t)&&(e[t]=!0)}));var t,e},N.swiftConverter=function(t,e){var r,n=N(t),s=N(e);return n.eq(s)?i:(r=n.isTemperature()?function(t){return n.mul(t).to(s).scalar}:function(t){return t*n.baseScalar/s.baseScalar},function(t){var e,i,n;if(Array.isArray(t)){for(i=t.length,n=[],e=0;e<i;e++)n.push(r(t[e]));return n}return r(t)})},N.Error=u,s(N.prototype,{add:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())throw new u("Cannot add two temperatures");return this.isTemperature()?q(this,e):e.isTemperature()?q(e,this):N({scalar:this.scalar+e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},sub:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())return i=e,n=(r=this).units(),s=i.to(n),o=N(X(n)),N({scalar:r.scalar-s.scalar,numerator:o.numerator,denominator:o.denominator});var r,i,n,s,o,a,h;if(this.isTemperature())return a=this,h=e.to(X(a.units())),N({scalar:a.scalar-h.scalar,numerator:a.numerator,denominator:a.denominator});if(e.isTemperature())throw new u("Cannot subtract a temperature from a differential degree unit");return N({scalar:this.scalar-e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},mul:function(e){if(r(e))return N({scalar:o(this.scalar,e),numerator:this.numerator,denominator:this.denominator});if(t(e)&&(e=N(e)),(this.isTemperature()||e.isTemperature())&&!this.isUnitless()&&!e.isUnitless())throw new u("Cannot multiply by temperatures");var i=this,n=e;i.isCompatible(n)&&400!==i.signature&&(n=n.to(i));var s=W(i.numerator,i.denominator,n.numerator,n.denominator);return N({scalar:o(i.scalar,n.scalar,s[2]),numerator:s[0],denominator:s[1]})},div:function(e){if(r(e)){if(0===e)throw new u("Divide by zero");return N({scalar:this.scalar/e,numerator:this.numerator,denominator:this.denominator})}if(t(e)&&(e=N(e)),0===e.scalar)throw new u("Divide by zero");if(e.isTemperature())throw new u("Cannot divide with temperatures");if(this.isTemperature()&&!e.isUnitless())throw new u("Cannot divide with temperatures");var i=this,n=e;i.isCompatible(n)&&400!==i.signature&&(n=n.to(i));var s=W(i.numerator,i.denominator,n.denominator,n.numerator);return N({scalar:o(i.scalar,s[2])/n.scalar,numerator:s[0],denominator:s[1]})},inverse:function(){if(this.isTemperature())throw new u("Cannot divide with temperatures");if(0===this.scalar)throw new u("Divide by zero");return N({scalar:1/this.scalar,numerator:this.denominator,denominator:this.numerator})}}),s(N.prototype,{eq:function(t){return 0===this.compareTo(t)},lt:function(t){return-1===this.compareTo(t)},lte:function(t){return this.eq(t)||this.lt(t)},gt:function(t){return 1===this.compareTo(t)},gte:function(t){return this.eq(t)||this.gt(t)},compareTo:function(e){return t(e)?this.compareTo(N(e)):(this.isCompatible(e)||c(this.units(),e.units()),this.baseScalar<e.baseScalar?-1:this.baseScalar===e.baseScalar?0:this.baseScalar>e.baseScalar?1:void 0)},same:function(t){return this.scalar===t.scalar&&this.units()===t.units()}}),s(N.prototype,{isUnitless:function(){return[this.numerator,this.denominator].every((function(t){return n(t,m)}))},isCompatible:function(e){return t(e)?this.isCompatible(N(e)):!!F(e)&&void 0!==e.signature&&this.signature===e.signature},isInverse:function(t){return this.inverse().isCompatible(t)},isBase:function(){return void 0!==this._isBase?this._isBase:this.isDegrees()&&this.numerator[0].match(/<(kelvin|temp-K)>/)?(this._isBase=!0,this._isBase):(this.numerator.concat(this.denominator).forEach((function(t){t!==p&&-1===d.indexOf(t)&&(this._isBase=!1)}),this),!1===this._isBase||(this._isBase=!0),this._isBase)}}),Z.prototype.get=function(t){return arguments.length>1&&(t=Array.apply(null,arguments)),t.reduce((function(e,r,i){if(e){var n=e[r];return i===t.length-1?n?n.data:void 0:n}}),this)},Z.prototype.set=function(t,e){return arguments.length>2&&(t=Array.prototype.slice.call(arguments,0,-1),e=arguments[arguments.length-1]),t.reduce((function(r,i,n){var s=r[i];return void 0===s&&(s=r[i]={}),n===t.length-1?(s.data=e,e):s}),this)},N.formatter=function(t,e){return(t+" "+e).trim()},s(N.prototype,{units:function(){if(void 0!==this._units)return this._units;var t=n(this.numerator,m),e=n(this.denominator,m);if(t&&e)return this._units="",this._units;var r=K(this.numerator),i=K(this.denominator);return this._units=r+(e?"":"/"+i),this._units},toString:function(e,i){var n;if(r(e))n=this.units(),i=e;else if(t(e))n=e;else if(F(e))return this.toPrec(e).toString(i);var s=this.to(n);return((void 0!==i?h(s.scalar,i):s.scalar)+" "+s.units()).trim()},format:function(t,e){1===arguments.length&&"function"==typeof t&&(e=t,t=void 0),e=e||N.formatter;var r=this.to(t);return e.call(this,r.scalar,r.units())}});var H=new Z;function K(t){var e=H.get(t);return e||(e=n(t,m)?"1":function(t){return t.reduce((function(t,e){var r=t[e];return r||t.push(r=t[e]=[e,0]),r[1]++,t}),[]).map((function(t){return t[0]+(t[1]>1?t[1]:"")}))}(function(t){for(var e,r,i=[],n=0;n<t.length;n++)e=t[n],r=t[n+1],w[e]?(i.push(v[e]+v[r]),n++):i.push(v[e]);return i}(t)).join("*"),H.set(t,e),e)}return N.version="1.7.6",N}()},5520:t=>{!function(){function e(t){for(var e=0,n=t.length-1,s=void 0,o=void 0,a=void 0,h=i(e,n);;){if(n<=e)return t[h];if(n==e+1)return t[e]>t[n]&&r(t,e,n),t[h];for(t[s=i(e,n)]>t[n]&&r(t,s,n),t[e]>t[n]&&r(t,e,n),t[s]>t[e]&&r(t,s,e),r(t,s,e+1),o=e+1,a=n;;){do{o++}while(t[e]>t[o]);do{a--}while(t[a]>t[e]);if(a<o)break;r(t,o,a)}r(t,e,a),a<=h&&(e=o),a>=h&&(n=a-1)}}var r=function(t,e,r){var i;return i=[t[r],t[e]],t[e]=i[0],t[r]=i[1],i},i=function(t,e){return~~((t+e)/2)};t.exports?t.exports=e:window.median=e}()},530:t=>{"use strict";function e(t){this.value=t,this.parent=null,this.rank=0}t.exports=class{constructor(){this.nodes=new Map}add(t){var r=this.nodes.get(t);return r||(r=new e(t),this.nodes.set(t,r)),r}union(t,e){const r=this.find(t),i=this.find(e);r!==i&&(r.rank<i.rank?r.parent=i:r.rank>i.rank?i.parent=r:(i.parent=r,r.rank++))}find(t){for(var e=t;null!==e.parent;)e=e.parent;for(var r=t;null!==r.parent;){var i=r;r=r.parent,i.parent=e}return e}connected(t,e){return this.find(t)===this.find(e)}}},4953:(t,e,r)=>{"use strict";function i(t,e){let r=0;for(let i=0;i<t.length;i++)r+=(t[i]-e[i])*(t[i]-e[i]);return r}function n(t,e){return Math.sqrt(i(t,e))}r.r(e),r.d(e,{squaredEuclidean:()=>i,euclidean:()=>n})},7345:(t,e,r)=>{"use strict";var i=r(5571),n={DEBUG:!1,ifft2DArray:function(t,e,r){var n=new Array(e*r),s=e/2,o=2*(r-1);i.init(s);for(var a={re:new Array(s),im:new Array(s)},h=0;h<r;h++){for(var l=s-1;l>=0;l--)a.re[l]=t[2*l*r+h],a.im[l]=t[(2*l+1)*r+h];for(i.bt(a.re,a.im),l=s-1;l>=0;l--)n[2*l*r+h]=a.re[l],n[(2*l+1)*r+h]=a.im[l]}var u=new Array(s*o);i.init(o);var c={re:new Array(o),im:new Array(o)},f=o*s;for(l=0;l<e;l+=2){for(c.re[0]=n[l*r],c.im[0]=n[(l+1)*r],h=1;h<r;h++)c.re[h]=n[l*r+h],c.im[h]=n[(l+1)*r+h],c.re[o-h]=n[l*r+h],c.im[o-h]=-n[(l+1)*r+h];i.bt(c.re,c.im);var d=l/2*o;for(h=o-1;h>=0;h--)u[d+h]=c.re[h]/f}return u},fft2DArray:function(t,e,r,n){Object.assign({},{inplace:!0});var s=r/2+1,o=2*e,a=new Array(o*s);i.init(r);for(var h,l,u,c,f,d={re:new Array(r),im:new Array(r)},p={re:new Array(r),im:new Array(r)},m={re:new Array(r),im:new Array(r)},g=0;g<e/2;g++){h=2*g*r,d.re=t.slice(h,h+r),h=(2*g+1)*r,d.im=t.slice(h,h+r),i.fft1d(d.re,d.im),this.reconstructTwoRealFFT(d,p,m),l=4*g*s,u=(4*g+1)*s,c=(4*g+2)*s,f=(4*g+3)*s;for(var w=s-1;w>=0;w--)a[l+w]=p.re[w],a[u+w]=p.im[w],a[c+w]=m.re[w],a[f+w]=m.im[w]}p=null,m=null;var b=new Array(o*s);i.init(e);for(var y={re:new Array(e),im:new Array(e)},_=s-1;_>=0;_--){for(g=e-1;g>=0;g--)y.re[g]=a[2*g*s+_],y.im[g]=a[(2*g+1)*s+_],isNaN(y.re[g])&&(y.re[g]=0),isNaN(y.im[g])&&(y.im[g]=0);for(i.fft1d(y.re,y.im),g=e-1;g>=0;g--)b[2*g*s+_]=y.re[g],b[(2*g+1)*s+_]=y.im[g]}return b},reconstructTwoRealFFT:function(t,e,r){var i,n,s,o,a,h=t.re.length;e.re[0]=t.re[0],e.im[0]=0,r.re[0]=t.im[0],r.im[0]=0;for(var l=h/2;l>0;l--)a=h-l,i=.5*(t.re[l]-t.re[a]),n=.5*(t.re[l]+t.re[a]),s=.5*(t.im[l]-t.im[a]),o=.5*(t.im[l]+t.im[a]),e.re[l]=n,e.im[l]=s,e.re[a]=n,e.im[a]=-s,r.re[l]=o,r.im[l]=-i,r.re[a]=o,r.im[a]=i},convolute2DI:function(t,e,r,i){for(var n,s,o=0;o<r/2;o++)for(var a=0;a<i;a++)n=t[2*o*i+a]*e[2*o*i+a]-t[(2*o+1)*i+a]*e[(2*o+1)*i+a],s=t[2*o*i+a]*e[(2*o+1)*i+a]+t[(2*o+1)*i+a]*e[2*o*i+a],t[2*o*i+a]=n,t[(2*o+1)*i+a]=s},convolute:function(t,e,r,i,n){for(var s=new Array(i*r),o=0;o<r*i;o++)s[o]=t[o];s=this.fft2DArray(s,r,i);var a,h=e.length,l=e[0].length,u=new Array(i*r);for(o=0;o<i*r;o++)u[o]=0;for(var c=Math.floor((h-1)/2),f=Math.floor((l-1)/2),d=0;d<h;d++){a=(d-c+r)%r;for(var p=0;p<l;p++)u[a*i+(p-f+i)%i]=e[d][p]}u=this.fft2DArray(u,r,i);var m=2*r,g=i/2+1;return this.convolute2DI(s,u,m,g),this.ifft2DArray(s,m,g)},toRadix2:function(t,e,r){var i,n,s,o,a=r,h=e;if(0===r||0!=(r&r-1)){for(a=0;r>>++a!=0;);a=1<<a}if(0===e||0!=(e&e-1)){for(h=0;e>>++h!=0;);h=1<<h}if(h==e&&a==r)return{data:t,rows:e,cols:r};var l=new Array(h*a),u=Math.floor((h-e)/2)-e,c=Math.floor((a-r)/2)-r;for(i=0;i<h;i++)for(s=i*a,o=(i-u)%e*r,n=0;n<a;n++)l[s+n]=t[o+(n-c)%r];return{data:l,rows:h,cols:a}},crop:function(t,e,r,i,n,s){if(e==i&&r==n)return t;Object.assign({},s);var o,a,h,l,u=new Array(n*i),c=Math.floor((e-i)/2),f=Math.floor((r-n)/2);for(h=0;h<i;h++)for(o=h*n,a=(h+c)*r,l=0;l<n;l++)u[o+l]=t[a+(l+f)];return u}};t.exports=n},5571:function(t,e){(function(){var t;(t=e).toString=function(){return"version 0.3.0, released 2013-03"};for(var r=0,i=null,n=null,s={init:function(t){if(0===t||0!=(t&t-1))throw new Error("init: radix-2 required");r=t,s._initArray(),s._makeBitReversalTable(),s._makeCosSinTable()},fft1d:function(t,e){s.fft(t,e,1)},ifft1d:function(t,e){var i=1/r;s.fft(t,e,-1);for(var n=0;n<r;n++)t[n]*=i,e[n]*=i},bt1d:function(t,e){s.fft(t,e,-1)},fft2d:function(t,e){for(var i=[],n=[],o=0,a=0;a<r;a++){o=a*r;for(var h=0;h<r;h++)i[h]=t[h+o],n[h]=e[h+o];s.fft1d(i,n);for(var l=0;l<r;l++)t[l+o]=i[l],e[l+o]=n[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)o=u+c*r,i[c]=t[o],n[c]=e[o];s.fft1d(i,n);for(var f=0;f<r;f++)t[o=u+f*r]=i[f],e[o]=n[f]}},ifft2d:function(t,e){for(var i=[],n=[],o=0,a=0;a<r;a++){o=a*r;for(var h=0;h<r;h++)i[h]=t[h+o],n[h]=e[h+o];s.ifft1d(i,n);for(var l=0;l<r;l++)t[l+o]=i[l],e[l+o]=n[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)o=u+c*r,i[c]=t[o],n[c]=e[o];s.ifft1d(i,n);for(var f=0;f<r;f++)t[o=u+f*r]=i[f],e[o]=n[f]}},fft:function(t,e,s){for(var o,a,h,l,u,c,f,d,p,m=r>>2,g=0;g<r;g++)g<(l=i[g])&&(u=t[g],t[g]=t[l],t[l]=u,u=e[g],e[g]=e[l],e[l]=u);for(var w=1;w<r;w<<=1){a=0,o=r/(w<<1);for(var b=0;b<w;b++){c=n[a+m],f=s*n[a];for(var y=b;y<r;y+=w<<1)d=c*t[h=y+w]+f*e[h],p=c*e[h]-f*t[h],t[h]=t[y]-d,t[y]+=d,e[h]=e[y]-p,e[y]+=p;a+=o}}},_initArray:function(){i="undefined"!=typeof Uint32Array?new Uint32Array(r):[],n="undefined"!=typeof Float64Array?new Float64Array(1.25*r):[]},_paddingZero:function(){},_makeBitReversalTable:function(){var t=0,e=0,n=0;for(i[0]=0;++t<r;){for(n=r>>1;n<=e;)e-=n,n>>=1;e+=n,i[t]=e}},_makeCosSinTable:function(){var t=r>>1,e=r>>2,i=r>>3,s=t+e,o=Math.sin(Math.PI/r),a=2*o*o,h=Math.sqrt(a*(2-a)),l=n[e]=1,u=n[0]=0;o=2*a;for(var c=1;c<i;c++)a+=o*(l-=a),h-=o*(u+=h),n[c]=u,n[e-c]=l;0!==i&&(n[i]=Math.sqrt(.5));for(var f=0;f<e;f++)n[t-f]=n[f];for(var d=0;d<s;d++)n[d+t]=-n[d]}},o=["init","fft1d","ifft1d","fft2d","ifft2d"],a=0;a<o.length;a++)t[o[a]]=s[o[a]];return t.bt=s.bt1d,t.fft=s.fft1d,t.ifft=s.ifft1d,t}).call(this)},3910:(t,e,r)=>{"use strict";e.FFTUtils=r(7345),r(5571)},8881:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.divisor)}}},4229:t=>{"use strict";const e={degree:1,constant:1,scale:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.degree=t.degree,this.constant=t.constant,this.scale=t.scale}compute(t,e){for(var r=0,i=0;i<t.length;i++)r+=t[i]*e[i];return Math.pow(this.scale*r+this.constant,this.degree)}}},7613:t=>{"use strict";const e={alpha:.01,constant:-Math.E};t.exports=class{constructor(t){t=Object.assign({},e,t),this.alpha=t.alpha,this.constant=t.constant}compute(t,e){for(var r=0,i=0;i<t.length;i++)r+=t[i]*e[i];return Math.tanh(this.alpha*r+this.constant)}}},6952:(t,e,r)=>{"use strict";const{Matrix:i,MatrixTransposeView:n}=r(2864),s=r(8881),o=r(4229),a=r(7613),h=r(8541),l=r(9176),u=r(3316),c=r(1960),f={gaussian:s,rbf:s,polynomial:o,poly:o,anova:h,cauchy:l,exponential:u,histogram:c,min:c,laplacian:r(8557),multiquadratic:r(8609),rational:r(3029),sigmoid:a,mlp:a};t.exports=class{constructor(t,e){if(this.kernelType=t,"linear"!==t)if("string"==typeof t){t=t.toLowerCase();var r=f[t];if(!r)throw new Error(`unsupported kernel type: ${t}`);this.kernelFunction=new r(e)}else{if("object"!=typeof t||"function"!=typeof t.compute)throw new TypeError("first argument must be a valid kernel type or instance");this.kernelFunction=t}}compute(t,e){if(t=i.checkMatrix(t),e=void 0===e?t:i.checkMatrix(e),"linear"===this.kernelType)return t.mmul(new n(e));const r=new i(t.rows,e.rows);if(t===e)for(let e=0;e<t.rows;e++)for(let i=e;i<t.rows;i++){const n=this.kernelFunction.compute(t.getRow(e),t.getRow(i));r.set(e,i,n),r.set(i,e,n)}else for(let i=0;i<t.rows;i++)for(let n=0;n<e.rows;n++)r.set(i,n,this.kernelFunction.compute(t.getRow(i),e.getRow(n)));return r}}},8541:t=>{"use strict";const e={sigma:1,degree:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.sigma=t.sigma,this.degree=t.degree}compute(t,e){for(var r=0,i=Math.min(t.length,e.length),n=1;n<=i;++n)r+=Math.pow(Math.exp(-this.sigma*Math.pow(Math.pow(t[n-1],n)-Math.pow(e[n-1],n),2)),this.degree);return r}}},9176:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma}compute(t,e){return 1/(1+i(t,e)/(this.sigma*this.sigma))}}},3316:(t,e,r)=>{"use strict";const{euclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.divisor)}}},1960:t=>{"use strict";t.exports=class{compute(t,e){for(var r=Math.min(t.length,e.length),i=0,n=0;n<r;++n)i+=Math.min(t[n],e[n]);return i}}},8557:(t,e,r)=>{"use strict";const{euclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.sigma)}}},8609:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={constant:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.constant=t.constant}compute(t,e){return Math.sqrt(i(t,e)+this.constant*this.constant)}}},3029:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={constant:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.constant=t.constant}compute(t,e){const r=i(t,e);return 1-r/(r+this.constant)}}},414:(t,e,r)=>{var i=r(3910).FFTUtils;function n(t){var e,r,i=t;if("number"!=typeof t[0]){e=t.length,r=t[0].length,i=new Array(e*r);for(var n=0;n<e;n++)for(var s=0;s<r;s++)i[n*r+s]=t[n][s]}else{var o=Math.sqrt(t.length);Number.isInteger(o)&&(e=o,r=o)}return{data:i,rows:e,cols:r}}t.exports={fft:function(t,e,r){var s,o,a=n(t),h=a.data,l=Object.assign({normalize:!1,divisor:1,rows:a.rows,cols:a.cols},r);if(!l.rows||!l.cols)throw new Error("Invalid number of rows or columns "+s+" "+o);s=l.rows,o=l.cols;var u,c,f=l.divisor,d=e.length,p=e[0].length;if(l.normalize)for(f=0,u=0;u<d;u++)for(c=0;c<p;c++)f+=e[u][c];if(0===f)throw new RangeError("convolution: The divisor is equal to zero");var m=i.toRadix2(h,s,o),g=i.convolute(m.data,e,m.rows,m.cols);if(g=i.crop(g,m.rows,m.cols,s,o),0!=f&&1!=f)for(u=0;u<g.length;u++)g[u]/=f;return g},direct:function(t,e,r){var i,s,o=n(t),a=o.data,h=Object.assign({normalize:!1,divisor:1,rows:o.rows,cols:o.cols},r);if(!h.rows||!h.cols)throw new Error("Invalid number of rows or columns "+i+" "+s);i=h.rows,s=h.cols;var l,u,c,f,d,p,m=h.divisor,g=e.length,w=e[0].length;if(h.normalize)for(m=0,l=0;l<g;l++)for(u=0;u<w;u++)m+=e[l][u];if(0===m)throw new RangeError("convolution: The divisor is equal to zero");var b=new Array(i*s),y=Math.floor(g/2),_=Math.floor(w/2);for(f=0;f<i;f++)for(c=0;c<s;c++){for(d=0,u=0;u<g;u++)for(l=0;l<w;l++)p=e[g-u-1][w-l-1],d+=a[(f+u-y+i)%i*s+(c+l-_+s)%s]*p;b[f*s+c]=d/m}return b},kernelFactory:{LoG:function(t,e,r){var i=1e3;r&&r.factor&&(i=r.factor);var n,s,o,a,h=new Array(e);i*=-1;var l=(e-1)/2,u=2*t*t;for(n=0;n<e;n++)for(h[n]=new Array(e),a=(n-l)*(n-l),s=0;s<e;s++)o=-((s-l)*(s-l)+a)/u,h[n][s]=Math.round(i*(1+o)*Math.exp(o));return h}},matrix2Array:n}},2313:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var i=r(1883),n=r(1548);class s{constructor(t){let e,r,i,s,o,a,h,l,u,c=(t=n.Z.checkMatrix(t)).clone(),f=c.rows,d=c.columns,p=new Float64Array(f),m=1;for(e=0;e<f;e++)p[e]=e;for(l=new Float64Array(f),r=0;r<d;r++){for(e=0;e<f;e++)l[e]=c.get(e,r);for(e=0;e<f;e++){for(u=Math.min(e,r),o=0,i=0;i<u;i++)o+=c.get(e,i)*l[i];l[e]-=o,c.set(e,r,l[e])}for(s=r,e=r+1;e<f;e++)Math.abs(l[e])>Math.abs(l[s])&&(s=e);if(s!==r){for(i=0;i<d;i++)a=c.get(s,i),c.set(s,i,c.get(r,i)),c.set(r,i,a);h=p[s],p[s]=p[r],p[r]=h,m=-m}if(r<f&&0!==c.get(r,r))for(e=r+1;e<f;e++)c.set(e,r,c.get(e,r)/c.get(r,r))}this.LU=c,this.pivotVector=p,this.pivotSign=m}isSingular(){let t=this.LU,e=t.columns;for(let r=0;r<e;r++)if(0===t.get(r,r))return!0;return!1}solve(t){t=i.Z.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let r,n,s,o=t.columns,a=t.subMatrixRow(this.pivotVector,0,o-1),h=e.columns;for(s=0;s<h;s++)for(r=s+1;r<h;r++)for(n=0;n<o;n++)a.set(r,n,a.get(r,n)-a.get(s,n)*e.get(r,s));for(s=h-1;s>=0;s--){for(n=0;n<o;n++)a.set(s,n,a.get(s,n)/e.get(s,s));for(r=0;r<s;r++)for(n=0;n<o;n++)a.set(r,n,a.get(r,n)-a.get(s,n)*e.get(r,s))}return a}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,r=t.columns;for(let i=0;i<r;i++)e*=t.get(i,i);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,n=new i.Z(e,r);for(let i=0;i<e;i++)for(let e=0;e<r;e++)i>e?n.set(i,e,t.get(i,e)):i===e?n.set(i,e,1):n.set(i,e,0);return n}get upperTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,n=new i.Z(e,r);for(let i=0;i<e;i++)for(let e=0;e<r;e++)i<=e?n.set(i,e,t.get(i,e)):n.set(i,e,0);return n}get pivotPermutationVector(){return Array.from(this.pivotVector)}}},7072:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var i=r(1883),n=r(1548),s=r(6310);class o{constructor(t){let e,r,i,o,a=(t=n.Z.checkMatrix(t)).clone(),h=t.rows,l=t.columns,u=new Float64Array(l);for(i=0;i<l;i++){let t=0;for(e=i;e<h;e++)t=(0,s.G)(t,a.get(e,i));if(0!==t){for(a.get(i,i)<0&&(t=-t),e=i;e<h;e++)a.set(e,i,a.get(e,i)/t);for(a.set(i,i,a.get(i,i)+1),r=i+1;r<l;r++){for(o=0,e=i;e<h;e++)o+=a.get(e,i)*a.get(e,r);for(o=-o/a.get(i,i),e=i;e<h;e++)a.set(e,r,a.get(e,r)+o*a.get(e,i))}}u[i]=-t}this.QR=a,this.Rdiag=u}solve(t){t=i.Z.checkMatrix(t);let e=this.QR,r=e.rows;if(t.rows!==r)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let n,s,o,a,h=t.columns,l=t.clone(),u=e.columns;for(o=0;o<u;o++)for(s=0;s<h;s++){for(a=0,n=o;n<r;n++)a+=e.get(n,o)*l.get(n,s);for(a=-a/e.get(o,o),n=o;n<r;n++)l.set(n,s,l.get(n,s)+a*e.get(n,o))}for(o=u-1;o>=0;o--){for(s=0;s<h;s++)l.set(o,s,l.get(o,s)/this.Rdiag[o]);for(n=0;n<o;n++)for(s=0;s<h;s++)l.set(n,s,l.get(n,s)-l.get(o,s)*e.get(n,o))}return l.subMatrix(0,u-1,0,h-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,r=this.QR,n=r.columns,s=new i.Z(n,n);for(t=0;t<n;t++)for(e=0;e<n;e++)t<e?s.set(t,e,r.get(t,e)):t===e?s.set(t,e,this.Rdiag[t]):s.set(t,e,0);return s}get orthogonalMatrix(){let t,e,r,n,s=this.QR,o=s.rows,a=s.columns,h=new i.Z(o,a);for(r=a-1;r>=0;r--){for(t=0;t<o;t++)h.set(t,r,0);for(h.set(r,r,1),e=r;e<a;e++)if(0!==s.get(r,r)){for(n=0,t=r;t<o;t++)n+=s.get(t,r)*h.get(t,e);for(n=-n/s.get(r,r),t=r;t<o;t++)h.set(t,e,h.get(t,e)+n*s.get(t,r))}}return h}}},6943:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var i=r(1883),n=r(1548),s=r(6310);class o{constructor(t,e={}){if((t=n.Z.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let r=t.rows,o=t.columns;const{computeLeftSingularVectors:a=!0,computeRightSingularVectors:h=!0,autoTranspose:l=!1}=e;let u,c=Boolean(a),f=Boolean(h),d=!1;if(r<o)if(l){u=t.transpose(),r=u.rows,o=u.columns,d=!0;let e=c;c=f,f=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let p=Math.min(r,o),m=Math.min(r+1,o),g=new Float64Array(m),w=new i.Z(r,p),b=new i.Z(o,o),y=new Float64Array(o),_=new Float64Array(r),v=new Float64Array(m);for(let t=0;t<m;t++)v[t]=t;let x=Math.min(r-1,o),k=Math.max(0,Math.min(o-2,r)),A=Math.max(x,k);for(let t=0;t<A;t++){if(t<x){g[t]=0;for(let e=t;e<r;e++)g[t]=(0,s.G)(g[t],u.get(e,t));if(0!==g[t]){u.get(t,t)<0&&(g[t]=-g[t]);for(let e=t;e<r;e++)u.set(e,t,u.get(e,t)/g[t]);u.set(t,t,u.get(t,t)+1)}g[t]=-g[t]}for(let e=t+1;e<o;e++){if(t<x&&0!==g[t]){let i=0;for(let n=t;n<r;n++)i+=u.get(n,t)*u.get(n,e);i=-i/u.get(t,t);for(let n=t;n<r;n++)u.set(n,e,u.get(n,e)+i*u.get(n,t))}y[e]=u.get(t,e)}if(c&&t<x)for(let e=t;e<r;e++)w.set(e,t,u.get(e,t));if(t<k){y[t]=0;for(let e=t+1;e<o;e++)y[t]=(0,s.G)(y[t],y[e]);if(0!==y[t]){y[t+1]<0&&(y[t]=0-y[t]);for(let e=t+1;e<o;e++)y[e]/=y[t];y[t+1]+=1}if(y[t]=-y[t],t+1<r&&0!==y[t]){for(let e=t+1;e<r;e++)_[e]=0;for(let e=t+1;e<r;e++)for(let r=t+1;r<o;r++)_[e]+=y[r]*u.get(e,r);for(let e=t+1;e<o;e++){let i=-y[e]/y[t+1];for(let n=t+1;n<r;n++)u.set(n,e,u.get(n,e)+i*_[n])}}if(f)for(let e=t+1;e<o;e++)b.set(e,t,y[e])}}let M=Math.min(o,r+1);if(x<o&&(g[x]=u.get(x,x)),r<M&&(g[M-1]=0),k+1<M&&(y[k]=u.get(k,M-1)),y[M-1]=0,c){for(let t=x;t<p;t++){for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}for(let t=x-1;t>=0;t--)if(0!==g[t]){for(let e=t+1;e<p;e++){let i=0;for(let n=t;n<r;n++)i+=w.get(n,t)*w.get(n,e);i=-i/w.get(t,t);for(let n=t;n<r;n++)w.set(n,e,w.get(n,e)+i*w.get(n,t))}for(let e=t;e<r;e++)w.set(e,t,-w.get(e,t));w.set(t,t,1+w.get(t,t));for(let e=0;e<t-1;e++)w.set(e,t,0)}else{for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}}if(f)for(let t=o-1;t>=0;t--){if(t<k&&0!==y[t])for(let e=t+1;e<o;e++){let r=0;for(let i=t+1;i<o;i++)r+=b.get(i,t)*b.get(i,e);r=-r/b.get(t+1,t);for(let i=t+1;i<o;i++)b.set(i,e,b.get(i,e)+r*b.get(i,t))}for(let e=0;e<o;e++)b.set(e,t,0);b.set(t,t,1)}let E=M-1,S=0,C=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+C*Math.abs(g[t]+Math.abs(g[t+1]));if(Math.abs(y[t])<=e||Number.isNaN(y[t])){y[t]=0;break}}if(t===M-2)e=4;else{let r;for(r=M-1;r>=t&&r!==t;r--){let e=(r!==M?Math.abs(y[r]):0)+(r!==t+1?Math.abs(y[r-1]):0);if(Math.abs(g[r])<=C*e){g[r]=0;break}}r===t?e=3:r===M-1?e=1:(e=2,t=r)}switch(t++,e){case 1:{let e=y[M-2];y[M-2]=0;for(let r=M-2;r>=t;r--){let i=(0,s.G)(g[r],e),n=g[r]/i,a=e/i;if(g[r]=i,r!==t&&(e=-a*y[r-1],y[r-1]=n*y[r-1]),f)for(let t=0;t<o;t++)i=n*b.get(t,r)+a*b.get(t,M-1),b.set(t,M-1,-a*b.get(t,r)+n*b.get(t,M-1)),b.set(t,r,i)}break}case 2:{let e=y[t-1];y[t-1]=0;for(let i=t;i<M;i++){let n=(0,s.G)(g[i],e),o=g[i]/n,a=e/n;if(g[i]=n,e=-a*y[i],y[i]=o*y[i],c)for(let e=0;e<r;e++)n=o*w.get(e,i)+a*w.get(e,t-1),w.set(e,t-1,-a*w.get(e,i)+o*w.get(e,t-1)),w.set(e,i,n)}break}case 3:{const e=Math.max(Math.abs(g[M-1]),Math.abs(g[M-2]),Math.abs(y[M-2]),Math.abs(g[t]),Math.abs(y[t])),i=g[M-1]/e,n=g[M-2]/e,a=y[M-2]/e,h=g[t]/e,l=y[t]/e,u=((n+i)*(n-i)+a*a)/2,d=i*a*(i*a);let p=0;0===u&&0===d||(p=u<0?0-Math.sqrt(u*u+d):Math.sqrt(u*u+d),p=d/(u+p));let m=(h+i)*(h-i)+p,_=h*l;for(let e=t;e<M-1;e++){let i=(0,s.G)(m,_);0===i&&(i=Number.MIN_VALUE);let n=m/i,a=_/i;if(e!==t&&(y[e-1]=i),m=n*g[e]+a*y[e],y[e]=n*y[e]-a*g[e],_=a*g[e+1],g[e+1]=n*g[e+1],f)for(let t=0;t<o;t++)i=n*b.get(t,e)+a*b.get(t,e+1),b.set(t,e+1,-a*b.get(t,e)+n*b.get(t,e+1)),b.set(t,e,i);if(i=(0,s.G)(m,_),0===i&&(i=Number.MIN_VALUE),n=m/i,a=_/i,g[e]=i,m=n*y[e]+a*g[e+1],g[e+1]=-a*y[e]+n*g[e+1],_=a*y[e+1],y[e+1]=n*y[e+1],c&&e<r-1)for(let t=0;t<r;t++)i=n*w.get(t,e)+a*w.get(t,e+1),w.set(t,e+1,-a*w.get(t,e)+n*w.get(t,e+1)),w.set(t,e,i)}y[M-2]=m,S+=1;break}case 4:if(g[t]<=0&&(g[t]=g[t]<0?-g[t]:0,f))for(let e=0;e<=E;e++)b.set(e,t,-b.get(e,t));for(;t<E&&!(g[t]>=g[t+1]);){let e=g[t];if(g[t]=g[t+1],g[t+1]=e,f&&t<o-1)for(let r=0;r<o;r++)e=b.get(r,t+1),b.set(r,t+1,b.get(r,t)),b.set(r,t,e);if(c&&t<r-1)for(let i=0;i<r;i++)e=w.get(i,t+1),w.set(i,t+1,w.get(i,t)),w.set(i,t,e);t++}S=0,M--}}if(d){let t=b;b=w,w=t}this.m=r,this.n=o,this.s=g,this.U=w,this.V=b}solve(t){let e=t,r=this.threshold,n=this.s.length,s=i.Z.zeros(n,n);for(let t=0;t<n;t++)Math.abs(this.s[t])<=r?s.set(t,t,0):s.set(t,t,1/this.s[t]);let o=this.U,a=this.rightSingularVectors,h=a.mmul(s),l=a.rows,u=o.rows,c=i.Z.zeros(l,u);for(let t=0;t<l;t++)for(let e=0;e<u;e++){let r=0;for(let i=0;i<n;i++)r+=h.get(t,i)*o.get(e,i);c.set(t,e,r)}return c.mmul(e)}solveForDiagonal(t){return this.solve(i.Z.diag(t))}inverse(){let t=this.V,e=this.threshold,r=t.rows,n=t.columns,s=new i.Z(r,this.s.length);for(let i=0;i<r;i++)for(let r=0;r<n;r++)Math.abs(this.s[r])>e&&s.set(i,r,t.get(i,r)/this.s[r]);let o=this.U,a=o.rows,h=o.columns,l=new i.Z(r,a);for(let t=0;t<r;t++)for(let e=0;e<a;e++){let r=0;for(let i=0;i<h;i++)r+=s.get(t,i)*o.get(e,i);l.set(t,e,r)}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s;for(let i=0,n=r.length;i<n;i++)r[i]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return i.Z.diag(this.s)}}},6310:(t,e,r)=>{"use strict";function i(t,e){let r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}r.d(e,{G:()=>i})},8345:(t,e,r)=>{"use strict";r.d(e,{S:()=>h,F:()=>l});var i=r(2313),n=r(7072),s=r(6943),o=r(1883),a=r(1548);function h(t,e=!1){return t=a.Z.checkMatrix(t),e?new s.Z(t).inverse():l(t,o.Z.eye(t.rows))}function l(t,e,r=!1){return t=a.Z.checkMatrix(t),e=a.Z.checkMatrix(e),r?new s.Z(t).solve(e):t.isSquare()?new i.Z(t).solve(e):new n.Z(t).solve(e)}},2864:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AbstractMatrix:()=>i.X,CHO:()=>P,CholeskyDecomposition:()=>P,EVD:()=>I,EigenvalueDecomposition:()=>I,LU:()=>y.Z,LuDecomposition:()=>y.Z,Matrix:()=>i.Z,MatrixColumnSelectionView:()=>a,MatrixColumnView:()=>o,MatrixFlipColumnView:()=>h,MatrixFlipRowView:()=>l,MatrixRowSelectionView:()=>c,MatrixRowView:()=>u,MatrixSelectionView:()=>f,MatrixSubView:()=>d,MatrixTransposeView:()=>p.Z,NIPALS:()=>R,Nipals:()=>R,QR:()=>B.Z,QrDecomposition:()=>B.Z,SVD:()=>v.Z,SingularValueDecomposition:()=>v.Z,WrapperMatrix1D:()=>m,WrapperMatrix2D:()=>g.Z,correlation:()=>S,covariance:()=>E,default:()=>i.Z,determinant:()=>_,inverse:()=>b.S,linearDependencies:()=>A,pseudoInverse:()=>M,solve:()=>b.F,wrap:()=>w});var i=r(1883),n=r(3018),s=r(4920);class o extends s.Z{constructor(t,e){(0,n.bp)(t,e),super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class a extends s.Z{constructor(t,e){e=(0,n.g)(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class h extends s.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}class l extends s.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class u extends s.Z{constructor(t,e){(0,n.zb)(t,e),super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class c extends s.Z{constructor(t,e){super(t,(e=(0,n.ZR)(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class f extends s.Z{constructor(t,e,r){let i=(0,n.N2)(t,e,r);super(t,i.row.length,i.column.length),this.rowIndices=i.row,this.columnIndices=i.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class d extends s.Z{constructor(t,e,r,i,s){(0,n.J5)(t,e,r,i,s),super(t,r-e+1,s-i+1),this.startRow=e,this.startColumn=i}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}var p=r(5922);class m extends i.X{constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){let i=this._calculateIndex(t,e);return this.data[i]=r,this}get(t,e){let r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}}var g=r(1548);function w(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new g.Z(t):new m(t,e);throw new Error("the argument is not an array")}var b=r(8345),y=r(2313);function _(t){if((t=i.Z.checkMatrix(t)).isSquare()){if(0===t.columns)return 1;let e,r,i,n;if(2===t.columns)return e=t.get(0,0),r=t.get(0,1),i=t.get(1,0),n=t.get(1,1),e*n-r*i;if(3===t.columns){let n,s,o;return n=new f(t,[1,2],[1,2]),s=new f(t,[1,2],[0,2]),o=new f(t,[1,2],[0,1]),e=t.get(0,0),r=t.get(0,1),i=t.get(0,2),e*_(n)-r*_(s)+i*_(o)}return new y.Z(t).determinant}throw Error("determinant can only be calculated for a square matrix")}var v=r(6943);function x(t,e){let r=[];for(let i=0;i<t;i++)i!==e&&r.push(i);return r}function k(t,e,r,i=1e-9,n=1e-9){if(t>n)return new Array(e.rows+1).fill(0);{let t=e.addRow(r,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<i&&t.set(e,0,0);return t.to1DArray()}}function A(t,e={}){const{thresholdValue:r=1e-9,thresholdError:n=1e-9}=e;let s=(t=i.Z.checkMatrix(t)).rows,o=new i.Z(s,s);for(let e=0;e<s;e++){let a=i.Z.columnVector(t.getRow(e)),h=t.subMatrixRow(x(s,e)).transpose(),l=new v.Z(h).solve(a),u=i.Z.sub(a,h.mmul(l)).abs().max();o.setRow(e,k(u,l,e,r,n))}return o}function M(t,e=Number.EPSILON){if((t=i.Z.checkMatrix(t)).isEmpty())return t.transpose();let r=new v.Z(t,{autoTranspose:!0}),n=r.leftSingularVectors,s=r.rightSingularVectors,o=r.diagonal;for(let t=0;t<o.length;t++)Math.abs(o[t])>e?o[t]=1/o[t]:o[t]=0;return s.mmul(i.Z.diag(o).mmul(n.transpose()))}function E(t,e=t,r={}){t=new i.Z(t);let n=!1;if("object"!=typeof e||i.Z.isMatrix(e)||Array.isArray(e)?e=new i.Z(e):(r=e,e=t,n=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:s=!0}=r;s&&(t=t.center("column"),n||(e=e.center("column")));const o=t.transpose().mmul(e);for(let e=0;e<o.rows;e++)for(let r=0;r<o.columns;r++)o.set(e,r,o.get(e,r)*(1/(t.rows-1)));return o}function S(t,e=t,r={}){t=new i.Z(t);let n=!1;if("object"!=typeof e||i.Z.isMatrix(e)||Array.isArray(e)?e=new i.Z(e):(r=e,e=t,n=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:s=!0,scale:o=!0}=r;s&&(t.center("column"),n||e.center("column")),o&&(t.scale("column"),n||e.scale("column"));const a=t.standardDeviation("column",{unbiased:!0}),h=n?a:e.standardDeviation("column",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let r=0;r<l.columns;r++)l.set(e,r,l.get(e,r)*(1/(a[e]*h[r]))*(1/(t.rows-1)));return l}var C=r(6310);class I{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=g.Z.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let n,s,o=t.columns,a=new i.Z(o,o),h=new Float64Array(o),l=new Float64Array(o),u=t,c=!1;if(c=!!r||t.isSymmetric(),c){for(n=0;n<o;n++)for(s=0;s<o;s++)a.set(n,s,u.get(n,s));!function(t,e,r,i){let n,s,o,a,h,l,u,c;for(h=0;h<t;h++)r[h]=i.get(t-1,h);for(a=t-1;a>0;a--){for(c=0,o=0,l=0;l<a;l++)c+=Math.abs(r[l]);if(0===c)for(e[a]=r[a-1],h=0;h<a;h++)r[h]=i.get(a-1,h),i.set(a,h,0),i.set(h,a,0);else{for(l=0;l<a;l++)r[l]/=c,o+=r[l]*r[l];for(n=r[a-1],s=Math.sqrt(o),n>0&&(s=-s),e[a]=c*s,o-=n*s,r[a-1]=n-s,h=0;h<a;h++)e[h]=0;for(h=0;h<a;h++){for(n=r[h],i.set(h,a,n),s=e[h]+i.get(h,h)*n,l=h+1;l<=a-1;l++)s+=i.get(l,h)*r[l],e[l]+=i.get(l,h)*n;e[h]=s}for(n=0,h=0;h<a;h++)e[h]/=o,n+=e[h]*r[h];for(u=n/(o+o),h=0;h<a;h++)e[h]-=u*r[h];for(h=0;h<a;h++){for(n=r[h],s=e[h],l=h;l<=a-1;l++)i.set(l,h,i.get(l,h)-(n*e[l]+s*r[l]));r[h]=i.get(a-1,h),i.set(a,h,0)}}r[a]=o}for(a=0;a<t-1;a++){if(i.set(t-1,a,i.get(a,a)),i.set(a,a,1),o=r[a+1],0!==o){for(l=0;l<=a;l++)r[l]=i.get(l,a+1)/o;for(h=0;h<=a;h++){for(s=0,l=0;l<=a;l++)s+=i.get(l,a+1)*i.get(l,h);for(l=0;l<=a;l++)i.set(l,h,i.get(l,h)-s*r[l])}}for(l=0;l<=a;l++)i.set(l,a+1,0)}for(h=0;h<t;h++)r[h]=i.get(t-1,h),i.set(t-1,h,0);i.set(t-1,t-1,1),e[0]=0}(o,l,h,a),function(t,e,r,i){let n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_;for(o=1;o<t;o++)e[o-1]=e[o];e[t-1]=0;let v=0,x=0,k=Number.EPSILON;for(l=0;l<t;l++){for(x=Math.max(x,Math.abs(r[l])+Math.abs(e[l])),u=l;u<t&&!(Math.abs(e[u])<=k*x);)u++;if(u>l){_=0;do{for(_+=1,n=r[l],c=(r[l+1]-n)/(2*e[l]),f=(0,C.G)(c,1),c<0&&(f=-f),r[l]=e[l]/(c+f),r[l+1]=e[l]*(c+f),d=r[l+1],s=n-r[l],o=l+2;o<t;o++)r[o]-=s;for(v+=s,c=r[u],p=1,m=p,g=p,w=e[l+1],b=0,y=0,o=u-1;o>=l;o--)for(g=m,m=p,y=b,n=p*e[o],s=p*c,f=(0,C.G)(c,e[o]),e[o+1]=b*f,b=e[o]/f,p=c/f,c=p*r[o]-b*n,r[o+1]=s+b*(p*n+b*r[o]),h=0;h<t;h++)s=i.get(h,o+1),i.set(h,o+1,b*i.get(h,o)+p*s),i.set(h,o,p*i.get(h,o)-b*s);c=-b*y*g*w*e[l]/d,e[l]=b*c,r[l]=p*c}while(Math.abs(e[l])>k*x)}r[l]=r[l]+v,e[l]=0}for(o=0;o<t-1;o++){for(h=o,c=r[o],a=o+1;a<t;a++)r[a]<c&&(h=a,c=r[a]);if(h!==o)for(r[h]=r[o],r[o]=c,a=0;a<t;a++)c=i.get(a,o),i.set(a,o,i.get(a,h)),i.set(a,h,c)}}(o,l,h,a)}else{let t=new i.Z(o,o),e=new Float64Array(o);for(s=0;s<o;s++)for(n=0;n<o;n++)t.set(n,s,u.get(n,s));!function(t,e,r,i){let n,s,o,a,h,l,u,c=t-1;for(l=1;l<=c-1;l++){for(u=0,a=l;a<=c;a++)u+=Math.abs(e.get(a,l-1));if(0!==u){for(o=0,a=c;a>=l;a--)r[a]=e.get(a,l-1)/u,o+=r[a]*r[a];for(s=Math.sqrt(o),r[l]>0&&(s=-s),o-=r[l]*s,r[l]=r[l]-s,h=l;h<t;h++){for(n=0,a=c;a>=l;a--)n+=r[a]*e.get(a,h);for(n/=o,a=l;a<=c;a++)e.set(a,h,e.get(a,h)-n*r[a])}for(a=0;a<=c;a++){for(n=0,h=c;h>=l;h--)n+=r[h]*e.get(a,h);for(n/=o,h=l;h<=c;h++)e.set(a,h,e.get(a,h)-n*r[h])}r[l]=u*r[l],e.set(l,l-1,u*s)}}for(a=0;a<t;a++)for(h=0;h<t;h++)i.set(a,h,a===h?1:0);for(l=c-1;l>=1;l--)if(0!==e.get(l,l-1)){for(a=l+1;a<=c;a++)r[a]=e.get(a,l-1);for(h=l;h<=c;h++){for(s=0,a=l;a<=c;a++)s+=r[a]*i.get(a,h);for(s=s/r[l]/e.get(l,l-1),a=l;a<=c;a++)i.set(a,h,i.get(a,h)+s*r[a])}}}(o,t,e,a),function(t,e,r,i,n){let s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_=t-1,v=t-1,x=Number.EPSILON,k=0,A=0,M=0,E=0,S=0,C=0,I=0,P=0;for(s=0;s<t;s++)for((s<0||s>v)&&(r[s]=n.get(s,s),e[s]=0),o=Math.max(s-1,0);o<t;o++)A+=Math.abs(n.get(s,o));for(;_>=0;){for(h=_;h>0&&(C=Math.abs(n.get(h-1,h-1))+Math.abs(n.get(h,h)),0===C&&(C=A),!(Math.abs(n.get(h,h-1))<x*C));)h--;if(h===_)n.set(_,_,n.get(_,_)+k),r[_]=n.get(_,_),e[_]=0,_--,P=0;else if(h===_-1){if(c=n.get(_,_-1)*n.get(_-1,_),M=(n.get(_-1,_-1)-n.get(_,_))/2,E=M*M+c,I=Math.sqrt(Math.abs(E)),n.set(_,_,n.get(_,_)+k),n.set(_-1,_-1,n.get(_-1,_-1)+k),f=n.get(_,_),E>=0){for(I=M>=0?M+I:M-I,r[_-1]=f+I,r[_]=r[_-1],0!==I&&(r[_]=f-c/I),e[_-1]=0,e[_]=0,f=n.get(_,_-1),C=Math.abs(f)+Math.abs(I),M=f/C,E=I/C,S=Math.sqrt(M*M+E*E),M/=S,E/=S,o=_-1;o<t;o++)I=n.get(_-1,o),n.set(_-1,o,E*I+M*n.get(_,o)),n.set(_,o,E*n.get(_,o)-M*I);for(s=0;s<=_;s++)I=n.get(s,_-1),n.set(s,_-1,E*I+M*n.get(s,_)),n.set(s,_,E*n.get(s,_)-M*I);for(s=0;s<=v;s++)I=i.get(s,_-1),i.set(s,_-1,E*I+M*i.get(s,_)),i.set(s,_,E*i.get(s,_)-M*I)}else r[_-1]=f+M,r[_]=f+M,e[_-1]=I,e[_]=-I;_-=2,P=0}else{if(f=n.get(_,_),d=0,c=0,h<_&&(d=n.get(_-1,_-1),c=n.get(_,_-1)*n.get(_-1,_)),10===P){for(k+=f,s=0;s<=_;s++)n.set(s,s,n.get(s,s)-f);C=Math.abs(n.get(_,_-1))+Math.abs(n.get(_-1,_-2)),f=d=.75*C,c=-.4375*C*C}if(30===P&&(C=(d-f)/2,C=C*C+c,C>0)){for(C=Math.sqrt(C),d<f&&(C=-C),C=f-c/((d-f)/2+C),s=0;s<=_;s++)n.set(s,s,n.get(s,s)-C);k+=C,f=d=c=.964}for(P+=1,l=_-2;l>=h&&(I=n.get(l,l),S=f-I,C=d-I,M=(S*C-c)/n.get(l+1,l)+n.get(l,l+1),E=n.get(l+1,l+1)-I-S-C,S=n.get(l+2,l+1),C=Math.abs(M)+Math.abs(E)+Math.abs(S),M/=C,E/=C,S/=C,l!==h)&&!(Math.abs(n.get(l,l-1))*(Math.abs(E)+Math.abs(S))<x*(Math.abs(M)*(Math.abs(n.get(l-1,l-1))+Math.abs(I)+Math.abs(n.get(l+1,l+1)))));)l--;for(s=l+2;s<=_;s++)n.set(s,s-2,0),s>l+2&&n.set(s,s-3,0);for(a=l;a<=_-1&&(b=a!==_-1,a!==l&&(M=n.get(a,a-1),E=n.get(a+1,a-1),S=b?n.get(a+2,a-1):0,f=Math.abs(M)+Math.abs(E)+Math.abs(S),0!==f&&(M/=f,E/=f,S/=f)),0!==f);a++)if(C=Math.sqrt(M*M+E*E+S*S),M<0&&(C=-C),0!==C){for(a!==l?n.set(a,a-1,-C*f):h!==l&&n.set(a,a-1,-n.get(a,a-1)),M+=C,f=M/C,d=E/C,I=S/C,E/=M,S/=M,o=a;o<t;o++)M=n.get(a,o)+E*n.get(a+1,o),b&&(M+=S*n.get(a+2,o),n.set(a+2,o,n.get(a+2,o)-M*I)),n.set(a,o,n.get(a,o)-M*f),n.set(a+1,o,n.get(a+1,o)-M*d);for(s=0;s<=Math.min(_,a+3);s++)M=f*n.get(s,a)+d*n.get(s,a+1),b&&(M+=I*n.get(s,a+2),n.set(s,a+2,n.get(s,a+2)-M*S)),n.set(s,a,n.get(s,a)-M),n.set(s,a+1,n.get(s,a+1)-M*E);for(s=0;s<=v;s++)M=f*i.get(s,a)+d*i.get(s,a+1),b&&(M+=I*i.get(s,a+2),i.set(s,a+2,i.get(s,a+2)-M*S)),i.set(s,a,i.get(s,a)-M),i.set(s,a+1,i.get(s,a+1)-M*E)}}}if(0!==A){for(_=t-1;_>=0;_--)if(M=r[_],E=e[_],0===E)for(h=_,n.set(_,_,1),s=_-1;s>=0;s--){for(c=n.get(s,s)-M,S=0,o=h;o<=_;o++)S+=n.get(s,o)*n.get(o,_);if(e[s]<0)I=c,C=S;else if(h=s,0===e[s]?n.set(s,_,0!==c?-S/c:-S/(x*A)):(f=n.get(s,s+1),d=n.get(s+1,s),E=(r[s]-M)*(r[s]-M)+e[s]*e[s],u=(f*C-I*S)/E,n.set(s,_,u),n.set(s+1,_,Math.abs(f)>Math.abs(I)?(-S-c*u)/f:(-C-d*u)/I)),u=Math.abs(n.get(s,_)),x*u*u>1)for(o=s;o<=_;o++)n.set(o,_,n.get(o,_)/u)}else if(E<0)for(h=_-1,Math.abs(n.get(_,_-1))>Math.abs(n.get(_-1,_))?(n.set(_-1,_-1,E/n.get(_,_-1)),n.set(_-1,_,-(n.get(_,_)-M)/n.get(_,_-1))):(y=D(0,-n.get(_-1,_),n.get(_-1,_-1)-M,E),n.set(_-1,_-1,y[0]),n.set(_-1,_,y[1])),n.set(_,_-1,0),n.set(_,_,1),s=_-2;s>=0;s--){for(p=0,m=0,o=h;o<=_;o++)p+=n.get(s,o)*n.get(o,_-1),m+=n.get(s,o)*n.get(o,_);if(c=n.get(s,s)-M,e[s]<0)I=c,S=p,C=m;else if(h=s,0===e[s]?(y=D(-p,-m,c,E),n.set(s,_-1,y[0]),n.set(s,_,y[1])):(f=n.get(s,s+1),d=n.get(s+1,s),g=(r[s]-M)*(r[s]-M)+e[s]*e[s]-E*E,w=2*(r[s]-M)*E,0===g&&0===w&&(g=x*A*(Math.abs(c)+Math.abs(E)+Math.abs(f)+Math.abs(d)+Math.abs(I))),y=D(f*S-I*p+E*m,f*C-I*m-E*p,g,w),n.set(s,_-1,y[0]),n.set(s,_,y[1]),Math.abs(f)>Math.abs(I)+Math.abs(E)?(n.set(s+1,_-1,(-p-c*n.get(s,_-1)+E*n.get(s,_))/f),n.set(s+1,_,(-m-c*n.get(s,_)-E*n.get(s,_-1))/f)):(y=D(-S-d*n.get(s,_-1),-C-d*n.get(s,_),I,E),n.set(s+1,_-1,y[0]),n.set(s+1,_,y[1]))),u=Math.max(Math.abs(n.get(s,_-1)),Math.abs(n.get(s,_))),x*u*u>1)for(o=s;o<=_;o++)n.set(o,_-1,n.get(o,_-1)/u),n.set(o,_,n.get(o,_)/u)}for(s=0;s<t;s++)if(s<0||s>v)for(o=s;o<t;o++)i.set(s,o,n.get(s,o));for(o=t-1;o>=0;o--)for(s=0;s<=v;s++){for(I=0,a=0;a<=Math.min(o,v);a++)I+=i.get(s,a)*n.get(a,o);i.set(s,o,I)}}}(o,l,h,a,t)}this.n=o,this.e=l,this.d=h,this.V=a}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,r=this.n,n=this.e,s=this.d,o=new i.Z(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)o.set(t,e,0);o.set(t,t,s[t]),n[t]>0?o.set(t,t+1,n[t]):n[t]<0&&o.set(t,t-1,n[t])}return o}}function D(t,e,r,i){let n,s;return Math.abs(r)>Math.abs(i)?(n=i/r,s=r+n*i,[(t+n*e)/s,(e-n*t)/s]):(n=r/i,s=i+n*r,[(n*t+e)/s,(n*e-t)/s])}class P{constructor(t){if(!(t=g.Z.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,r,n,s=t,o=s.rows,a=new i.Z(o,o),h=!0;for(r=0;r<o;r++){let t=0;for(n=0;n<r;n++){let i=0;for(e=0;e<n;e++)i+=a.get(n,e)*a.get(r,e);i=(s.get(r,n)-i)/a.get(n,n),a.set(r,n,i),t+=i*i}for(t=s.get(r,r)-t,h&=t>0,a.set(r,r,Math.sqrt(Math.max(t,0))),n=r+1;n<o;n++)a.set(r,n,0)}this.L=a,this.positiveDefinite=Boolean(h)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=g.Z.checkMatrix(t);let e=this.L,r=e.rows;if(t.rows!==r)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let i,n,s,o=t.columns,a=t.clone();for(s=0;s<r;s++)for(n=0;n<o;n++){for(i=0;i<s;i++)a.set(s,n,a.get(s,n)-a.get(i,n)*e.get(s,i));a.set(s,n,a.get(s,n)/e.get(s,s))}for(s=r-1;s>=0;s--)for(n=0;n<o;n++){for(i=s+1;i<r;i++)a.set(s,n,a.get(s,n)-a.get(i,n)*e.get(i,s));a.set(s,n,a.get(s,n)/e.get(s,s))}return a}get lowerTriangularMatrix(){return this.L}}var B=r(7072);class R{constructor(t,e={}){t=g.Z.checkMatrix(t);let{Y:r}=e;const{scaleScores:n=!1,maxIterations:s=1e3,terminationCriteria:o=1e-10}=e;let a;if(r){if(r=Array.isArray(r)&&"number"==typeof r[0]?i.Z.columnVector(r):g.Z.checkMatrix(r),r.rows!==t.rows)throw new Error("Y should have the same number of rows as X");a=r.getColumnVector(0)}else a=t.getColumnVector(0);let h,l,u,c,f=1;for(let e=0;e<s&&f>o;e++)u=t.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0)),u=u.div(u.norm()),h=t.mmul(u).div(u.transpose().mmul(u).get(0,0)),e>0&&(f=h.clone().sub(c).pow(2).sum()),c=h.clone(),r?(l=r.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),l=l.div(l.norm()),a=r.mmul(l).div(l.transpose().mmul(l).get(0,0))):a=h;if(r){let e=t.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0));e=e.div(e.norm());let i=t.clone().sub(h.clone().mmul(e.transpose())),n=a.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),s=r.clone().sub(h.clone().mulS(n.get(0,0)).mmul(l.transpose()));this.t=h,this.p=e.transpose(),this.w=u.transpose(),this.q=l,this.u=a,this.s=h.transpose().mmul(h),this.xResidual=i,this.yResidual=s,this.betas=n}else this.w=u.transpose(),this.s=h.transpose().mmul(h).sqrt(),this.t=n?h.clone().div(this.s.get(0,0)):h,this.xResidual=t.sub(h.mmul(u.transpose()))}}},1883:(t,e,r)=>{"use strict";r.d(e,{X:()=>f,Z:()=>p});var i=r(7531);const n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,n=void 0===r?0:r,s=e.toIndex,o=void 0===s?t.length:s;if(n<0||n>=t.length||!Number.isInteger(n))throw new Error("fromIndex must be a positive integer smaller than length");if(o<=n||o>t.length||!Number.isInteger(o))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[n],h=n+1;h<o;h++)t[h]>a&&(a=t[h]);return a},s=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,n=void 0===r?0:r,s=e.toIndex,o=void 0===s?t.length:s;if(n<0||n>=t.length||!Number.isInteger(n))throw new Error("fromIndex must be a positive integer smaller than length");if(o<=n||o>t.length||!Number.isInteger(o))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[n],h=n+1;h<o;h++)t[h]<a&&(a=t[h]);return a};function o(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==r.output){if(!(0,i.Z)(r.output))throw new TypeError("output option must be an array if specified");e=r.output}else e=new Array(t.length);var o=s(t),a=n(t);if(o===a)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var h=r.min,l=void 0===h?r.autoMinMax?o:0:h,u=r.max,c=void 0===u?r.autoMinMax?a:1:u;if(l>=c)throw new RangeError("min option must be smaller than max option");for(var f=(c-l)/(a-o),d=0;d<t.length;d++)e[d]=(t[d]-o)*f+l;return e}const a=" ".repeat(2),h=" ".repeat(4);function l(t,e={}){const{maxRows:r=15,maxColumns:i=10,maxNumSize:n=8}=e;return`${t.constructor.name} {\n${a}[\n${h}${function(t,e,r,i){const{rows:n,columns:s}=t,o=Math.min(n,e),a=Math.min(s,r),l=[];for(let e=0;e<o;e++){let r=[];for(let n=0;n<a;n++)r.push(u(t.get(e,n),i));l.push(`${r.join(" ")}`)}return a!==s&&(l[l.length-1]+=` ... ${s-r} more columns`),o!==n&&l.push(`... ${n-e} more rows`),l.join(`\n${h}`)}(t,r,i,n)}\n${a}]\n${a}rows: ${t.rows}\n${a}columns: ${t.columns}\n}`}function u(t,e){const r=String(t);if(r.length<=e)return r.padEnd(e," ");const i=t.toPrecision(e-2);if(i.length<=e)return i;const n=t.toExponential(e-2),s=n.indexOf("e"),o=n.slice(s);return n.slice(0,e-o.length)+o}var c=r(3018);class f{static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError("data length does not match given dimensions");let i=new p(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)i.set(n,t,r[n*e+t]);return i}static rowVector(t){let e=new p(1,t.length);for(let r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){let e=new p(t.length,1);for(let r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static zeros(t,e){return new p(t,e)}static ones(t,e){return new p(t,e).fill(1)}static rand(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{random:i=Math.random}=r;let n=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++)n.set(r,t,i());return n}static randInt(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{min:i=0,max:n=1e3,random:s=Math.random}=r;if(!Number.isInteger(i))throw new TypeError("min must be an integer");if(!Number.isInteger(n))throw new TypeError("max must be an integer");if(i>=n)throw new RangeError("min must be smaller than max");let o=n-i,a=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++){let e=i+Math.round(s()*o);a.set(r,t,e)}return a}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);let i=Math.min(t,e),n=this.zeros(t,e);for(let t=0;t<i;t++)n.set(t,t,r);return n}static diag(t,e,r){let i=t.length;void 0===e&&(e=i),void 0===r&&(r=e);let n=Math.min(i,e,r),s=this.zeros(e,r);for(let e=0;e<n;e++)s.set(e,e,t[e]);return s}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,i=t.columns,n=new p(r,i);for(let s=0;s<r;s++)for(let r=0;r<i;r++)n.set(s,r,Math.min(t.get(s,r),e.get(s,r)));return n}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,i=t.columns,n=new this(r,i);for(let s=0;s<r;s++)for(let r=0;r<i;r++)n.set(s,r,Math.max(t.get(s,r),e.get(s,r)));return n}static checkMatrix(t){return f.isMatrix(t)?t:new p(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.call(this,e,r);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.push(this.get(e,r));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let r=0;r<this.columns;r++)t[e].push(this.get(e,r))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,r=-1,i=!0,n=!1;for(;t<this.rows&&i;){for(e=0,n=!1;e<this.columns&&!1===n;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(n=!0,r=e):(i=!1,n=!0);t++}return i}isReducedEchelonForm(){let t=0,e=0,r=-1,i=!0,n=!1;for(;t<this.rows&&i;){for(e=0,n=!1;e<this.columns&&!1===n;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(n=!0,r=e):(i=!1,n=!0);for(let r=e+1;r<this.rows;r++)0!==this.get(t,r)&&(i=!1);t++}return i}echelonForm(){let t=this.clone(),e=0,r=0;for(;e<t.rows&&r<t.columns;){let i=e;for(let n=e;n<t.rows;n++)t.get(n,r)>t.get(i,r)&&(i=n);if(0===t.get(i,r))r++;else{t.swapRows(e,i);let n=t.get(e,r);for(let i=r;i<t.columns;i++)t.set(e,i,t.get(e,i)/n);for(let i=e+1;i<t.rows;i++){let n=t.get(i,r)/t.get(e,r);t.set(i,r,0);for(let s=r+1;s<t.columns;s++)t.set(i,s,t.get(i,s)-t.get(e,s)*n)}e++,r++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,r=t.rows,i=r-1;for(;i>=0;)if(0===t.maxRow(i))i--;else{let n=0,s=!1;for(;n<r&&!1===s;)1===t.get(i,n)?s=!0:n++;for(let r=0;r<i;r++){let s=t.get(r,n);for(let o=n;o<e;o++){let e=t.get(r,o)-s*t.get(i,o);t.set(r,o,e)}}i--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:r=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new TypeError("columns must be a positive integer");let i=new p(this.rows*e,this.columns*r);for(let t=0;t<e;t++)for(let e=0;e<r;e++)i.setSubMatrix(this,this.rows*t,this.columns*e);return i}fill(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){(0,c.zb)(this,t);let e=[];for(let r=0;r<this.columns;r++)e.push(this.get(t,r));return e}getRowVector(t){return p.rowVector(this.getRow(t))}setRow(t,e){(0,c.zb)(this,t),e=(0,c.on)(this,e);for(let r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){(0,c.zb)(this,t),(0,c.zb)(this,e);for(let r=0;r<this.columns;r++){let i=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,i)}return this}getColumn(t){(0,c.bp)(this,t);let e=[];for(let r=0;r<this.rows;r++)e.push(this.get(r,t));return e}getColumnVector(t){return p.columnVector(this.getColumn(t))}setColumn(t,e){(0,c.bp)(this,t),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){(0,c.bp)(this,t),(0,c.bp)(this,e);for(let r=0;r<this.rows;r++){let i=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,i)}return this}addRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){(0,c.zb)(this,t);for(let r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){(0,c.bp)(this,t);for(let r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let i=0;i<this.columns;i++)this.get(r,i)>t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let i=0;i<this.columns;i++)this.get(r,i)<t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}maxRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let i=1;i<this.columns;i++)this.get(t,i)>e&&(e=this.get(t,i),r[1]=i);return r}minRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let i=1;i<this.columns;i++)this.get(t,i)<e&&(e=this.get(t,i),r[1]=i);return r}maxColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let i=1;i<this.rows;i++)this.get(i,t)>e&&(e=this.get(i,t),r[0]=i);return r}minColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let i=1;i<this.rows;i++)this.get(i,t)<e&&(e=this.get(i,t),r[0]=i);return r}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let r=0;r<t;r++)e.push(this.get(r,r));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let r=0;r<this.columns;r++)e+=this.get(t,r)*this.get(t,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){f.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let r=0;for(let i=0;i<e.length;i++)r+=e[i]*t[i];return r}mmul(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,i=t.columns,n=new p(e,i),s=new Float64Array(r);for(let o=0;o<i;o++){for(let e=0;e<r;e++)s[e]=t.get(e,o);for(let t=0;t<e;t++){let e=0;for(let i=0;i<r;i++)e+=this.get(t,i)*s[i];n.set(t,o,e)}}return n}strassen2x2(t){t=p.checkMatrix(t);let e=new p(2,2);const r=this.get(0,0),i=t.get(0,0),n=this.get(0,1),s=t.get(0,1),o=this.get(1,0),a=t.get(1,0),h=this.get(1,1),l=t.get(1,1),u=(r+h)*(i+l),c=(o+h)*i,f=r*(s-l),d=h*(a-i),m=(r+n)*l,g=u+d-m+(n-h)*(a+l),w=f+m,b=c+d,y=u-c+f+(o-r)*(i+s);return e.set(0,0,g),e.set(0,1,w),e.set(1,0,b),e.set(1,1,y),e}strassen3x3(t){t=p.checkMatrix(t);let e=new p(3,3);const r=this.get(0,0),i=this.get(0,1),n=this.get(0,2),s=this.get(1,0),o=this.get(1,1),a=this.get(1,2),h=this.get(2,0),l=this.get(2,1),u=this.get(2,2),c=t.get(0,0),f=t.get(0,1),d=t.get(0,2),m=t.get(1,0),g=t.get(1,1),w=t.get(1,2),b=t.get(2,0),y=t.get(2,1),_=t.get(2,2),v=(r-s)*(-f+g),x=(-r+s+o)*(c-f+g),k=(s+o)*(-c+f),A=r*c,M=(-r+h+l)*(c-d+w),E=(-r+h)*(d-w),S=(h+l)*(-c+d),C=(-n+l+u)*(g+b-y),I=(n-u)*(g-y),D=n*b,P=(l+u)*(-b+y),B=(-n+o+a)*(w+b-_),R=(n-a)*(w-_),T=(o+a)*(-b+_),U=A+D+i*m,O=(r+i+n-s-o-l-u)*g+x+k+A+C+D+P,L=A+M+S+(r+i+n-o-a-h-l)*w+D+B+T,F=v+o*(-c+f+m-g-w-b+_)+x+A+D+B+R,N=v+x+k+A+a*y,z=D+B+R+T+s*d,j=A+M+E+l*(-c+d+m-g-w-b+y)+C+I+D,Y=C+I+D+P+h*f,V=A+M+E+S+u*_;return e.set(0,0,U),e.set(0,1,O),e.set(0,2,L),e.set(1,0,F),e.set(1,1,N),e.set(1,2,z),e.set(2,0,j),e.set(2,1,Y),e.set(2,2,V),e}mmulStrassen(t){t=p.checkMatrix(t);let e=this.clone(),r=e.rows,i=e.columns,n=t.rows,s=t.columns;function o(t,e,r){let i=t.rows,n=t.columns;if(i===e&&n===r)return t;{let i=f.zeros(e,r);return i=i.setSubMatrix(t,0,0),i}}i!==n&&console.warn(`Multiplying ${r} x ${i} and ${n} x ${s} matrix: dimensions do not match.`);let a=Math.max(r,n),h=Math.max(i,s);return e=o(e,a,h),function t(e,r,i,n){if(i<=512||n<=512)return e.mmul(r);i%2==1&&n%2==1?(e=o(e,i+1,n+1),r=o(r,i+1,n+1)):i%2==1?(e=o(e,i+1,n),r=o(r,i+1,n)):n%2==1&&(e=o(e,i,n+1),r=o(r,i,n+1));let s=parseInt(e.rows/2,10),a=parseInt(e.columns/2,10),h=e.subMatrix(0,s-1,0,a-1),l=r.subMatrix(0,s-1,0,a-1),u=e.subMatrix(0,s-1,a,e.columns-1),c=r.subMatrix(0,s-1,a,r.columns-1),d=e.subMatrix(s,e.rows-1,0,a-1),p=r.subMatrix(s,r.rows-1,0,a-1),m=e.subMatrix(s,e.rows-1,a,e.columns-1),g=r.subMatrix(s,r.rows-1,a,r.columns-1),w=t(f.add(h,m),f.add(l,g),s,a),b=t(f.add(d,m),l,s,a),y=t(h,f.sub(c,g),s,a),_=t(m,f.sub(p,l),s,a),v=t(f.add(h,u),g,s,a),x=t(f.sub(d,h),f.add(l,c),s,a),k=t(f.sub(u,m),f.add(p,g),s,a),A=f.add(w,_);A.sub(v),A.add(k);let M=f.add(y,v),E=f.add(b,_),S=f.sub(w,b);S.add(y),S.add(x);let C=f.zeros(2*A.rows,2*A.columns);return C=C.setSubMatrix(A,0,0),C=C.setSubMatrix(M,A.rows,0),C=C.setSubMatrix(E,0,A.columns),C=C.setSubMatrix(S,A.rows,A.columns),C.subMatrix(0,i-1,0,n-1)}(e,t=o(t,a,h),a,h)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let i=new p(this.rows,this.columns);for(let t=0;t<this.rows;t++){const n=this.getRow(t);n.length>0&&o(n,{min:e,max:r,output:n}),i.setRow(t,n)}return i}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let i=new p(this.rows,this.columns);for(let t=0;t<this.columns;t++){const n=this.getColumn(t);n.length&&o(n,{min:e,max:r,output:n}),i.setColumn(t,n)}return i}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let r=0;r<t;r++){let t=this.get(e,r),i=this.get(e,this.columns-1-r);this.set(e,r,i),this.set(e,this.columns-1-r,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let r=0;r<t;r++){let t=this.get(r,e),i=this.get(this.rows-1-r,e);this.set(r,e,i),this.set(this.rows-1-r,e,t)}return this}kroneckerProduct(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,i=t.rows,n=t.columns,s=new p(e*i,r*n);for(let o=0;o<e;o++)for(let e=0;e<r;e++)for(let r=0;r<i;r++)for(let a=0;a<n;a++)s.set(i*o+r,n*e+a,this.get(o,e)*t.get(r,a));return s}kroneckerSum(t){if(t=p.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,r=t.rows,i=this.kroneckerProduct(p.eye(r,r)),n=p.eye(e,e).kroneckerProduct(t);return i.add(n)}transpose(){let t=new p(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t=d){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=d){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,i){(0,c.J5)(this,t,e,r,i);let n=new p(e-t+1,i-r+1);for(let s=t;s<=e;s++)for(let e=r;e<=i;e++)n.set(s-t,e-r,this.get(s,e));return n}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError("Argument out of range");let i=new p(t.length,r-e+1);for(let n=0;n<t.length;n++)for(let s=e;s<=r;s++){if(t[n]<0||t[n]>=this.rows)throw new RangeError(`Row index out of range: ${t[n]}`);i.set(n,s-e,this.get(t[n],s))}return i}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError("Argument out of range");let i=new p(r-e+1,t.length);for(let n=0;n<t.length;n++)for(let s=e;s<=r;s++){if(t[n]<0||t[n]>=this.columns)throw new RangeError(`Column index out of range: ${t[n]}`);i.set(s-e,n,this.get(s,t[n]))}return i}setSubMatrix(t,e,r){if((t=p.checkMatrix(t)).isEmpty())return this;let i=e+t.rows-1,n=r+t.columns-1;(0,c.J5)(this,e,i,r,n);for(let i=0;i<t.rows;i++)for(let n=0;n<t.columns;n++)this.set(e+i,r+n,t.get(i,n));return this}selection(t,e){let r=(0,c.N2)(this,t,e),i=new p(t.length,e.length);for(let t=0;t<r.row.length;t++){let e=r.row[t];for(let n=0;n<r.column.length;n++){let s=r.column[n];i.set(t,n,this.get(e,s))}}return i}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let r=0;r<t;r++)e+=this.get(r,r);return e}clone(){let t=new p(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}sum(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[r]+=t.get(r,i);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[i]+=t.get(r,i);return e}(this);case void 0:return function(t){let e=0;for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)e+=t.get(r,i);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows,1);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[r]*=t.get(r,i);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns,1);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[i]*=t.get(r,i);return e}(this);case void 0:return function(t){let e=1;for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)e*=t.get(r,i);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:r=!0,mean:i=this.mean(t)}=e;if("boolean"!=typeof r)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(i))throw new TypeError("mean must be an array");return function(t,e,r){const i=t.rows,n=t.columns,s=[];for(let o=0;o<i;o++){let i=0,a=0,h=0;for(let e=0;e<n;e++)h=t.get(o,e)-r[o],i+=h,a+=h*h;e?s.push((a-i*i/n)/(n-1)):s.push((a-i*i/n)/n)}return s}(this,r,i);case"column":if(!Array.isArray(i))throw new TypeError("mean must be an array");return function(t,e,r){const i=t.rows,n=t.columns,s=[];for(let o=0;o<n;o++){let n=0,a=0,h=0;for(let e=0;e<i;e++)h=t.get(e,o)-r[o],n+=h,a+=h*h;e?s.push((a-n*n/i)/(i-1)):s.push((a-n*n/i)/i)}return s}(this,r,i);case void 0:if("number"!=typeof i)throw new TypeError("mean must be a number");return function(t,e,r){const i=t.rows,n=t.columns,s=i*n;let o=0,a=0,h=0;for(let e=0;e<i;e++)for(let i=0;i<n;i++)h=t.get(e,i)-r,o+=h,a+=h*h;return e?(a-o*o/s)/(s-1):(a-o*o/s)/s}(this,r,i);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const r=this.variance(t,e);if(void 0===t)return Math.sqrt(r);for(let t=0;t<r.length;t++)r[t]=Math.sqrt(r[t]);return r}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:r=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e[r])}(this,r),this;case"column":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e[i])}(this,r),this;case void 0:if("number"!=typeof r)throw new TypeError("center must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let r=e.scale;switch(t){case"row":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.rows;r++){let i=0;for(let e=0;e<t.columns;e++)i+=Math.pow(t.get(r,e),2)/(t.columns-1);e.push(Math.sqrt(i))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e[r])}(this,r),this;case"column":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.columns;r++){let i=0;for(let e=0;e<t.rows;e++)i+=Math.pow(t.get(e,r),2)/(t.rows-1);e.push(Math.sqrt(i))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e[i])}(this,r),this;case void 0:if(void 0===r)r=function(t){const e=t.size-1;let r=0;for(let i=0;i<t.columns;i++)for(let n=0;n<t.rows;n++)r+=Math.pow(t.get(n,i),2)/e;return Math.sqrt(r)}(this);else if("number"!=typeof r)throw new TypeError("scale must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return l(this,t)}}function d(t,e){return t-e}f.prototype.klass="Matrix","undefined"!=typeof Symbol&&(f.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return l(this)}),f.random=f.rand,f.randomInt=f.randInt,f.diagonal=f.diag,f.prototype.diagonal=f.prototype.diag,f.identity=f.eye,f.prototype.negate=f.prototype.neg,f.prototype.tensorProduct=f.prototype.kroneckerProduct;class p extends f{constructor(t,e){if(super(),p.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let r=0;r<t;r++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const r=t;if("number"!=typeof(e=(t=r.length)?r[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let i=0;i<t;i++){if(r[i].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(r[i]))}}}this.rows=t,this.columns=e}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}removeRow(t){return(0,c.zb)(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),(0,c.zb)(this,t,!0),e=Float64Array.from((0,c.on)(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){(0,c.bp)(this,t);for(let e=0;e<this.rows;e++){const r=new Float64Array(this.columns-1);for(let i=0;i<t;i++)r[i]=this.data[e][i];for(let i=t+1;i<this.columns;i++)r[i-1]=this.data[e][i];this.data[e]=r}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),(0,c.bp)(this,t,!0),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++){const i=new Float64Array(this.columns+1);let n=0;for(;n<t;n++)i[n]=this.data[r][n];for(i[n++]=e[r];n<this.columns+1;n++)i[n]=this.data[r][n-1];this.data[r]=i}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t.get(e,r));return this},t.add=function(t,r){return new e(t).add(r)},t.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t.get(e,r));return this},t.sub=function(t,r){return new e(t).sub(r)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t.get(e,r));return this},t.mul=function(t,r){return new e(t).mul(r)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t.get(e,r));return this},t.div=function(t,r){return new e(t).div(r)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t.get(e,r));return this},t.mod=function(t,r){return new e(t).mod(r)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t.get(e,r));return this},t.and=function(t,r){return new e(t).and(r)},t.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t.get(e,r));return this},t.or=function(t,r){return new e(t).or(r)},t.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t.get(e,r));return this},t.xor=function(t,r){return new e(t).xor(r)},t.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t.get(e,r));return this},t.leftShift=function(t,r){return new e(t).leftShift(r)},t.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t.get(e,r));return this},t.signPropagatingRightShift=function(t,r){return new e(t).signPropagatingRightShift(r)},t.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t.get(e,r));return this},t.rightShift=function(t,r){return new e(t).rightShift(r)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,r){return new e(t).pow(r)},t.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t.get(e,r)));return this}}(f,p)},3018:(t,e,r)=>{"use strict";function i(t,e,r){let i=r?t.rows:t.rows-1;if(e<0||e>i)throw new RangeError("Row index out of range")}function n(t,e,r){let i=r?t.columns:t.columns-1;if(e<0||e>i)throw new RangeError("Column index out of range")}function s(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function o(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function a(t,e,r){return{row:h(t,e),column:l(t,r)}}function h(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some((e=>e<0||e>=t.rows)))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function l(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some((e=>e<0||e>=t.columns)))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function u(t,e,r,i,n){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(f("startRow",e),f("endRow",r),f("startColumn",i),f("endColumn",n),e>r||i>n||e<0||e>=t.rows||r<0||r>=t.rows||i<0||i>=t.columns||n<0||n>=t.columns)throw new RangeError("Submatrix indices are out of range")}function c(t,e=0){let r=[];for(let i=0;i<t;i++)r.push(e);return r}function f(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function d(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}r.d(e,{zb:()=>i,bp:()=>n,on:()=>s,Um:()=>o,N2:()=>a,ZR:()=>h,g:()=>l,J5:()=>u,B4:()=>c,cT:()=>d})},4920:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(1883);class n extends i.X{constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}}},5922:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(4920);class n extends i.Z{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}},1548:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(1883);class n extends i.X{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}}},2664:t=>{t.exports=function(t,e){t=t||0;for(var r=new Array(t),i=0;i<t;i++)r[i]=e;return r}},995:t=>{t.exports=function(t){return 0===t?1:(t--,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16))}},6563:(t,e)=>{"use strict";function r(t){if("number"!=typeof t)throw new TypeError("Expected a number")}e.j=(t,e)=>(r(t),r(e),Number.isNaN(t)?-1:Number.isNaN(e)?1:t-e)},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var o,a,h=n(t),l=1;l<arguments.length;l++){for(var u in o=Object(arguments[l]))r.call(o,u)&&(h[u]=o[u]);if(e){a=e(o);for(var c=0;c<a.length;c++)i.call(o,a[c])&&(h[a[c]]=o[a[c]])}}return h}},2408:(t,e,r)=>{"use strict";var i=r(7418),n="function"==typeof Symbol&&Symbol.for,s=n?Symbol.for("react.element"):60103,o=n?Symbol.for("react.portal"):60106,a=n?Symbol.for("react.fragment"):60107,h=n?Symbol.for("react.strict_mode"):60108,l=n?Symbol.for("react.profiler"):60114,u=n?Symbol.for("react.provider"):60109,c=n?Symbol.for("react.context"):60110,f=n?Symbol.for("react.forward_ref"):60112,d=n?Symbol.for("react.suspense"):60113,p=n?Symbol.for("react.memo"):60115,m=n?Symbol.for("react.lazy"):60116,g="function"==typeof Symbol&&Symbol.iterator;function w(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)e+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},y={};function _(t,e,r){this.props=t,this.context=e,this.refs=y,this.updater=r||b}function v(){}function x(t,e,r){this.props=t,this.context=e,this.refs=y,this.updater=r||b}_.prototype.isReactComponent={},_.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(w(85));this.updater.enqueueSetState(this,t,e,"setState")},_.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},v.prototype=_.prototype;var k=x.prototype=new v;k.constructor=x,i(k,_.prototype),k.isPureReactComponent=!0;var A={current:null},M=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function S(t,e,r){var i,n={},o=null,a=null;if(null!=e)for(i in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(o=""+e.key),e)M.call(e,i)&&!E.hasOwnProperty(i)&&(n[i]=e[i]);var h=arguments.length-2;if(1===h)n.children=r;else if(1<h){for(var l=Array(h),u=0;u<h;u++)l[u]=arguments[u+2];n.children=l}if(t&&t.defaultProps)for(i in h=t.defaultProps)void 0===n[i]&&(n[i]=h[i]);return{$$typeof:s,type:t,key:o,ref:a,props:n,_owner:A.current}}function C(t){return"object"==typeof t&&null!==t&&t.$$typeof===s}var I=/\/+/g,D=[];function P(t,e,r,i){if(D.length){var n=D.pop();return n.result=t,n.keyPrefix=e,n.func=r,n.context=i,n.count=0,n}return{result:t,keyPrefix:e,func:r,context:i,count:0}}function B(t){t.result=null,t.keyPrefix=null,t.func=null,t.context=null,t.count=0,10>D.length&&D.push(t)}function R(t,e,r,i){var n=typeof t;"undefined"!==n&&"boolean"!==n||(t=null);var a=!1;if(null===t)a=!0;else switch(n){case"string":case"number":a=!0;break;case"object":switch(t.$$typeof){case s:case o:a=!0}}if(a)return r(i,t,""===e?"."+U(t,0):e),1;if(a=0,e=""===e?".":e+":",Array.isArray(t))for(var h=0;h<t.length;h++){var l=e+U(n=t[h],h);a+=R(n,l,r,i)}else if("function"==typeof(l=null===t||"object"!=typeof t?null:"function"==typeof(l=g&&t[g]||t["@@iterator"])?l:null))for(t=l.call(t),h=0;!(n=t.next()).done;)a+=R(n=n.value,l=e+U(n,h++),r,i);else if("object"===n)throw r=""+t,Error(w(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return a}function T(t,e,r){return null==t?0:R(t,"",e,r)}function U(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+(""+t).replace(/[=:]/g,(function(t){return e[t]}))}(t.key):e.toString(36)}function O(t,e){t.func.call(t.context,e,t.count++)}function L(t,e,r){var i=t.result,n=t.keyPrefix;t=t.func.call(t.context,e,t.count++),Array.isArray(t)?F(t,i,r,(function(t){return t})):null!=t&&(C(t)&&(t=function(t,e){return{$$typeof:s,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(t,n+(!t.key||e&&e.key===t.key?"":(""+t.key).replace(I,"$&/")+"/")+r)),i.push(t))}function F(t,e,r,i,n){var s="";null!=r&&(s=(""+r).replace(I,"$&/")+"/"),T(t,L,e=P(e,s,i,n)),B(e)}var N={current:null};function z(){var t=N.current;if(null===t)throw Error(w(321));return t}var j={ReactCurrentDispatcher:N,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:A,IsSomeRendererActing:{current:!1},assign:i};e.Children={map:function(t,e,r){if(null==t)return t;var i=[];return F(t,i,null,e,r),i},forEach:function(t,e,r){if(null==t)return t;T(t,O,e=P(null,null,e,r)),B(e)},count:function(t){return T(t,(function(){return null}),null)},toArray:function(t){var e=[];return F(t,e,null,(function(t){return t})),e},only:function(t){if(!C(t))throw Error(w(143));return t}},e.Component=_,e.Fragment=a,e.Profiler=l,e.PureComponent=x,e.StrictMode=h,e.Suspense=d,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,e.cloneElement=function(t,e,r){if(null==t)throw Error(w(267,t));var n=i({},t.props),o=t.key,a=t.ref,h=t._owner;if(null!=e){if(void 0!==e.ref&&(a=e.ref,h=A.current),void 0!==e.key&&(o=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(u in e)M.call(e,u)&&!E.hasOwnProperty(u)&&(n[u]=void 0===e[u]&&void 0!==l?l[u]:e[u])}var u=arguments.length-2;if(1===u)n.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];n.children=l}return{$$typeof:s,type:t.type,key:o,ref:a,props:n,_owner:h}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:c,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:u,_context:t},t.Consumer=t},e.createElement=S,e.createFactory=function(t){var e=S.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:f,render:t}},e.isValidElement=C,e.lazy=function(t){return{$$typeof:m,_ctor:t,_status:-1,_result:null}},e.memo=function(t,e){return{$$typeof:p,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return z().useCallback(t,e)},e.useContext=function(t,e){return z().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return z().useEffect(t,e)},e.useImperativeHandle=function(t,e,r){return z().useImperativeHandle(t,e,r)},e.useLayoutEffect=function(t,e){return z().useLayoutEffect(t,e)},e.useMemo=function(t,e){return z().useMemo(t,e)},e.useReducer=function(t,e,r){return z().useReducer(t,e,r)},e.useRef=function(t){return z().useRef(t)},e.useState=function(t){return z().useState(t)},e.version="16.14.0"},7294:(t,e,r)=>{"use strict";t.exports=r(2408)},146:(t,e,r)=>{"use strict";var i=r(8005),n=r(6740),s=r(5442),o=r(7972);function a(t,e,r,i){return function(r,n,s){var o=t(t(e(n[1],s[0]),e(-s[1],n[0])),t(e(r[1],n[0]),e(-n[1],r[0]))),a=t(e(r[1],s[0]),e(-s[1],r[0])),h=i(o,a);return h[h.length-1]}}function h(t,e,r,i){return function(n,s,o,a){var h=t(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2])))),l=t(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2])))),u=i(h,l);return u[u.length-1]}}function l(t,e,r,i){return function(n,s,o,a,h){var l=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),s[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),-o[3]),r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),h[2]))),a[3]))),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),-h[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),n[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-a[2]),r(t(e(n[1],a[0]),e(-a[1],n[0])),h[2]))),-s[3])))),t(t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),h[2]))),a[3]),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2]))),-h[3]),r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),n[3]))),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),-s[3]),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2]))),o[3]),r(t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2]))),-a[3]))))),u=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),n[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-a[2]),r(t(e(n[1],a[0]),e(-a[1],n[0])),h[2]))),-o[3])),t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),h[2]))),a[3]),r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),-h[3]))),t(t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),h[2]))),n[3]),r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),h[2]))),-s[3])),t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),h[2]))),o[3]),r(t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2]))),-h[3])))),c=i(l,u);return c[c.length-1]}}function u(t){return(3===t?a:4===t?h:l)(n,i,s,o)}var c=u(3),f=u(4),d=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,r){var i,n=(t[1]-r[1])*(e[0]-r[0]),s=(t[0]-r[0])*(e[1]-r[1]),o=n-s;if(n>0){if(s<=0)return o;i=n+s}else{if(!(n<0))return o;if(s>=0)return o;i=-(n+s)}var a=33306690738754716e-32*i;return o>=a||o<=-a?o:c(t,e,r)},function(t,e,r,i){var n=t[0]-i[0],s=e[0]-i[0],o=r[0]-i[0],a=t[1]-i[1],h=e[1]-i[1],l=r[1]-i[1],u=t[2]-i[2],c=e[2]-i[2],d=r[2]-i[2],p=s*l,m=o*h,g=o*a,w=n*l,b=n*h,y=s*a,_=u*(p-m)+c*(g-w)+d*(b-y),v=7771561172376103e-31*((Math.abs(p)+Math.abs(m))*Math.abs(u)+(Math.abs(g)+Math.abs(w))*Math.abs(c)+(Math.abs(b)+Math.abs(y))*Math.abs(d));return _>v||-_>v?_:f(t,e,r,i)}];function p(t){var e=d[t.length];return e||(e=d[t.length]=u(t.length)),e.apply(void 0,t)}function m(t,e,r,i,n,s,o){return function(e,r,a,h,l){switch(arguments.length){case 0:case 1:return 0;case 2:return i(e,r);case 3:return n(e,r,a);case 4:return s(e,r,a,h);case 5:return o(e,r,a,h,l)}for(var u=new Array(arguments.length),c=0;c<arguments.length;++c)u[c]=arguments[c];return t(u)}}!function(){for(;d.length<=5;)d.push(u(d.length));t.exports=m.apply(void 0,[p].concat(d));for(var e=0;e<=5;++e)t.exports[e]=d[e]}()},4707:(t,e,r)=>{t.exports=function(t,e){for(var r=e[0],n=e[1],s=t.length,o=1,a=s,h=0,l=s-1;h<a;l=h++){var u=t[h],c=t[l],f=u[1],d=c[1];if(d<f){if(d<n&&n<f){if(0===(g=i(u,c,e)))return 0;o^=0<g|0}else if(n===f){var p=(m=t[(h+1)%s])[1];if(f<p){if(0===(g=i(u,c,e)))return 0;o^=0<g|0}}}else if(f<d){if(f<n&&n<d){if(0===(g=i(u,c,e)))return 0;o^=g<0|0}else if(n===f){var m=t[(h+1)%s];if((p=m[1])<f){var g;if(0===(g=i(u,c,e)))return 0;o^=g<0|0}}}else if(n===f){var w=Math.min(u[0],c[0]),b=Math.max(u[0],c[0]);if(0===h){for(;l>0;){var y=(l+s-1)%s;if((x=t[y])[1]!==n)break;var _=x[0];w=Math.min(w,_),b=Math.max(b,_),l=y}if(0===l)return w<=r&&r<=b?0:1;a=l+1}for(var v=t[(l+s-1)%s][1];h+1<a;){var x;if((x=t[h+1])[1]!==n)break;_=x[0],w=Math.min(w,_),b=Math.max(b,_),h+=1}if(w<=r&&r<=b)return 0;var k=t[(h+1)%s][1];r<w&&v<n!=k<n&&(o^=1)}}return 2*o-1};var i=r(146)},5442:(t,e,r)=>{"use strict";var i=r(8005),n=r(6359);t.exports=function(t,e){var r=t.length;if(1===r){var s=i(t[0],e);return s[0]?s:[s[1]]}var o=new Array(2*r),a=[.1,.1],h=[.1,.1],l=0;i(t[0],e,a),a[0]&&(o[l++]=a[0]);for(var u=1;u<r;++u){i(t[u],e,h);var c=a[1];n(c,h[0],a),a[0]&&(o[l++]=a[0]);var f=h[1],d=a[1],p=f+d,m=d-(p-f);a[1]=p,m&&(o[l++]=m)}return a[1]&&(o[l++]=a[1]),0===l&&(o[l++]=0),o.length=l,o}},7972:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,i=0|e.length;if(1===r&&1===i)return function(t,e){var r=t+e,i=r-t,n=t-(r-i)+(e-i);return n?[n,r]:[r]}(t[0],-e[0]);var n,s,o=new Array(r+i),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=-e[l],p=u(d);f<p?(s=c,(h+=1)<r&&(f=u(c=t[h]))):(s=d,(l+=1)<i&&(p=u(d=-e[l]))),h<r&&f<p||l>=i?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=-e[l])));for(var m,g,w=n+s,b=w-n,y=s-b,_=y,v=w;h<r&&l<i;)f<p?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=-e[l]))),(y=(s=_)-(b=(w=n+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m;for(;h<r;)(y=(s=_)-(b=(w=(n=c)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(h+=1)<r&&(c=t[h]);for(;l<i;)(y=(s=_)-(b=(w=(n=d)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(l+=1)<i&&(d=-e[l]);return _&&(o[a++]=_),v&&(o[a++]=v),a||(o[a++]=0),o.length=a,o}},6740:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,i=0|e.length;if(1===r&&1===i)return function(t,e){var r=t+e,i=r-t,n=t-(r-i)+(e-i);return n?[n,r]:[r]}(t[0],e[0]);var n,s,o=new Array(r+i),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=e[l],p=u(d);f<p?(s=c,(h+=1)<r&&(f=u(c=t[h]))):(s=d,(l+=1)<i&&(p=u(d=e[l]))),h<r&&f<p||l>=i?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=e[l])));for(var m,g,w=n+s,b=w-n,y=s-b,_=y,v=w;h<r&&l<i;)f<p?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=e[l]))),(y=(s=_)-(b=(w=n+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m;for(;h<r;)(y=(s=_)-(b=(w=(n=c)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(h+=1)<r&&(c=t[h]);for(;l<i;)(y=(s=_)-(b=(w=(n=d)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(l+=1)<i&&(d=e[l]);return _&&(o[a++]=_),v&&(o[a++]=v),a||(o[a++]=0),o.length=a,o}},3379:t=>{"use strict";var e=[];function r(t){for(var r=-1,i=0;i<e.length;i++)if(e[i].identifier===t){r=i;break}return r}function i(t,i){for(var s={},o=[],a=0;a<t.length;a++){var h=t[a],l=i.base?h[0]+i.base:h[0],u=s[l]||0,c="".concat(l," ").concat(u);s[l]=u+1;var f=r(c),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=n(d,i);i.byIndex=a,e.splice(a,0,{identifier:c,updater:p,references:1})}o.push(c)}return o}function n(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,n){var s=i(t=t||[],n=n||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=r(s[o]);e[a].references--}for(var h=i(t,n),l=0;l<s.length;l++){var u=r(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=h}}},569:t=>{"use strict";var e={};t.exports=function(t,r){var i=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var i="";r.supports&&(i+="@supports (".concat(r.supports,") {")),r.media&&(i+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(i+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),i+=r.css,n&&(i+="}"),r.media&&(i+="}"),r.supports&&(i+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},9798:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const i=t.length;let n=0,s=Math.max(32,i+(i>>1)+7),o=new Uint8Array(s>>3<<3);for(;r<i;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<i){const i=t.charCodeAt(r);56320==(64512&i)&&(++r,e=((1023&e)<<10)+(1023&i)+65536)}if(e>=55296&&e<=56319)continue}if(n+4>o.length){s+=8,s*=1+r/t.length*2,s=s>>3<<3;const e=new Uint8Array(s);e.set(o),o=e}if(0!=(4294967168&e)){if(0==(4294965248&e))o[n++]=e>>6&31|192;else if(0==(4294901760&e))o[n++]=e>>12&15|224,o[n++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;o[n++]=e>>18&7|240,o[n++]=e>>12&63|128,o[n++]=e>>6&63|128}o[n++]=63&e|128}else o[n++]=e}return o.slice(0,n)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let i=0;const n=r.length,s=[];for(;i<n;){const t=r[i++];if(0===t)break;if(0==(128&t))s.push(t);else if(192==(224&t)){const e=63&r[i++];s.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[i++],n=63&r[i++];s.push((31&t)<<12|e<<6|n)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[i++])<<12|(63&r[i++])<<6|63&r[i++];e>65535&&(e-=65536,s.push(e>>>10&1023|55296),e=56320|1023&e),s.push(e)}}return String.fromCharCode.apply(null,s)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},8005:t=>{"use strict";t.exports=function(t,r,i){var n=t*r,s=e*t,o=s-(s-t),a=t-o,h=e*r,l=h-(h-r),u=r-l,c=a*u-(n-o*l-a*l-o*u);return i?(i[0]=c,i[1]=n,i):[c,n]};var e=+(Math.pow(2,27)+1)},6359:t=>{"use strict";t.exports=function(t,e,r){var i=t+e,n=i-t,s=e-n,o=t-(i-n);return r?(r[0]=o+s,r[1]=i,r):[o+s,i]}},7458:function(t,e,r){var i;t=r.nmd(t),function(n){var s=(t&&t.exports,"object"==typeof r.g&&r.g);s.global!==s&&s.window;var o,a,h,l=String.fromCharCode;function u(t){for(var e,r,i=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(r=t.charCodeAt(n++)))?i.push(((1023&e)<<10)+(1023&r)+65536):(i.push(e),n--):i.push(e);return i}function c(t){if(t>=55296&&t<=57343)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value")}function f(t,e){return l(t>>e&63|128)}function d(t){if(0==(4294967168&t))return l(t);var e="";return 0==(4294965248&t)?e=l(t>>6&31|192):0==(4294901760&t)?(c(t),e=l(t>>12&15|224),e+=f(t,6)):0==(4292870144&t)&&(e=l(t>>18&7|240),e+=f(t,12),e+=f(t,6)),e+l(63&t|128)}function p(){if(h>=a)throw Error("Invalid byte index");var t=255&o[h];if(h++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function m(){var t,e;if(h>a)throw Error("Invalid byte index");if(h==a)return!1;if(t=255&o[h],h++,0==(128&t))return t;if(192==(224&t)){if((e=(31&t)<<6|p())>=128)return e;throw Error("Invalid continuation byte")}if(224==(240&t)){if((e=(15&t)<<12|p()<<6|p())>=2048)return c(e),e;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=(7&t)<<18|p()<<12|p()<<6|p())>=65536&&e<=1114111)return e;throw Error("Invalid UTF-8 detected")}var g={version:"2.1.2",encode:function(t){for(var e=u(t),r=e.length,i=-1,n="";++i<r;)n+=d(e[i]);return n},decode:function(t){o=u(t),a=o.length,h=0;for(var e,r=[];!1!==(e=m());)r.push(e);return function(t){for(var e,r=t.length,i=-1,n="";++i<r;)(e=t[i])>65535&&(n+=l((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=l(e);return n}(r)}};void 0===(i=function(){return g}.call(e,r,e,t))||(t.exports=i)}()},6732:(t,e,r)=>{"use strict";var i=r(7963),n=navigator.hardwareConcurrency||1;function s(t,e){if("string"!=typeof t&&"function"!=typeof t)throw new TypeError("func argument must be a function");if(void 0===e&&(e={}),"object"!=typeof e||null===e)throw new TypeError("options argument must be an object");this._workerCode=t.toString(),void 0===e.maxWorkers||"auto"===e.maxWorkers?this._numWorkers=Math.min(n-1,1):e.maxWorkers>0?this._numWorkers=Math.min(e.maxWorkers,n):this._numWorkers=n,this._workers=new Map,this._timeout=e.timeout||0,this._terminateOnError=!!e.terminateOnError;var r=e.deps;"string"==typeof r&&(r=[r]),Array.isArray(r)||(r=void 0),this._id=0,this._terminated=!1,this._working=0,this._waiting=[],this._init(r)}Function.prototype,s.prototype._init=function(t){for(var e=i.newWorkerURL(this._workerCode,t),r=0;r<this._numWorkers;r++){var n=new Worker(e);n.onmessage=this._onmessage.bind(this,n),n.onerror=this._onerror.bind(this,n),n.running=!1,n.id=r,this._workers.set(n,null)}URL.revokeObjectURL(e)},s.prototype._onerror=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[1](e.message),this._workers.set(t,null),this._terminateOnError?this.terminate():this._exec()}},s.prototype._onmessage=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[0](e.data.data),this._workers.set(t,null),this._exec()}},s.prototype._exec=function(){for(var t of this._workers.keys()){if(this._working===this._numWorkers||0===this._waiting.length)return;if(!t.running)for(var e=0;e<this._waiting.length;e++){var r=this._waiting[e];if("number"!=typeof r[4]||r[4]===t.id){this._waiting.splice(e,1),t.postMessage({action:"exec",event:r[0],args:r[1]},r[2]),t.running=!0,t.time=Date.now(),this._workers.set(t,r[3]),this._working++;break}}}},s.prototype.terminate=function(){if(!this._terminated){for(var t of this._workers)t[0].terminate(),t[1]&&t[1][1](new Error("Terminated"));this._workers.clear(),this._waiting=[],this._working=0,this._terminated=!0}},s.prototype.postAll=function(t,e){if(this._terminated)throw new Error("Cannot post (terminated)");var r=[];for(var i of this._workers.keys())r.push(this.post(t,e,[],i.id));return Promise.all(r)},s.prototype.post=function(t,e,r,i){void 0===e&&(e=[]),void 0===r&&(r=[]),Array.isArray(e)||(e=[e]),Array.isArray(r)||(r=[r]);var n=this;return new Promise((function(s,o){if(n._terminated)throw new Error("Cannot post (terminated)");n._waiting.push([t,e,r,[s,o],i]),n._exec()}))},t.exports=s},7963:(t,e)=>{"use strict";var r=function(){function t(){this._listeners={}}self.window=self,t.prototype.on=function(t,e){if(this._listeners[t])throw new RangeError("there is already a listener for "+t);if("function"!=typeof e)throw new TypeError("callback argument must be a function");this._listeners[t]=e},t.prototype._send=function(t,e,r){void 0===r?r=[]:Array.isArray(r)||(r=[r]),self.postMessage({id:t,data:e},r)},t.prototype._trigger=function(t,e){if(!this._listeners[t])throw new Error("event "+t+" is not defined");this._listeners[t].apply(null,e)};var e=new t;self.onmessage=function(t){switch(t.data.action){case"exec":t.data.args.unshift((function(r,i){e._send(t.data.id,r,i)})),e._trigger(t.data.event,t.data.args);break;case"ping":e._send(t.data.id,"pong");break;default:throw new Error("unexpected action: "+t.data.action)}}}.toString().split('"CODE";');e.newWorkerURL=function(t,e){var i=new Blob(["(",r[0],"importScripts.apply(self, "+JSON.stringify(e)+");\n","(",t,")();",r[1],")();"],{type:"application/javascript"});return URL.createObjectURL(i)}},2898:t=>{"use strict";t.exports={version:"1.0.1"}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={id:t,loaded:!1,exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.loaded=!0,r.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.u=t=>t+".index.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;__webpack_require__.g.importScripts&&(t=__webpack_require__.g.location+"");var e=__webpack_require__.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=t})(),__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__={};return(()=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{OperatorCanvas:()=>Tl,OperatorDebug:()=>Kl,ReactResponsiveRgbStream:()=>l,ReactRgbStream:()=>o,RembrainImage:()=>u});var t={};__webpack_require__.r(t),__webpack_require__.d(t,{CMYK:()=>un,GREY:()=>on,HSL:()=>hn,HSV:()=>ln,RGB:()=>an});var e={};__webpack_require__.r(e),__webpack_require__.d(e,{tagsById:()=>vn,tagsByName:()=>xn});var r={};__webpack_require__.r(r),__webpack_require__.d(r,{tagsById:()=>kn,tagsByName:()=>An});var i={};__webpack_require__.r(i),__webpack_require__.d(i,{tagsById:()=>Mn,tagsByName:()=>En});var n=__webpack_require__(7294);const s=t=>e=>{var{isOn:r=!0,token:i,websocketURL:s,robotName:o,exchange:a="rgbjpeg",handleError:h=(t=>{console.log({error:t})})}=e,l=function(t,e){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(r[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(i=Object.getOwnPropertySymbols(t);n<i.length;n++)e.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(t,i[n])&&(r[i[n]]=t[i[n]])}return r}(e,["isOn","token","websocketURL","robotName","exchange","handleError"]);const[u,c]=(0,n.useState)(new Image),[f,d]=(0,n.useState)(null);return(0,n.useEffect)((()=>{let t;return t=new Worker(new URL(__webpack_require__.p+__webpack_require__.u(714),__webpack_require__.b)),t.addEventListener("message",(({data:t})=>{const{type:e,payload:r}=t;switch(console.log("it's updated"),e){case"image":const e=new Image;return void(r?(e.src=r,e.onload=()=>{c(e)}):c(e));case"error":return void h(r);default:return void console.log(t)}})),d(t),()=>{t.postMessage({type:"close"}),t.terminate()}}),[]),(0,n.useEffect)((()=>{if(f)if(r){let t={command:"pull",exchange:a,accessToken:i,robot_name:o};f.postMessage({type:"open",payload:JSON.stringify(t),url:s})}else f.postMessage({type:"close"})}),[o,a,i,r,f]),n.createElement(t,Object.assign({image:u},l))},o=s((({posX:t=0,posY:e=0,width:r,height:i,placeholderText:s="No Image",image:o=new Image})=>{const a=(0,n.useRef)(null);return(0,n.useEffect)((()=>{(()=>{const n=a.current;if(n){const s=n.getContext("2d");s&&s.drawImage(o,t,e,r,i)}})(),o.src||(()=>{const t=a.current;if(t){const e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(s,t.width/2,t.height/2))}})()}),[o]),n.createElement("canvas",{ref:a,width:r,height:i})}));var a=__webpack_require__(6655),h=__webpack_require__.n(a);const l=s((({maxWidth:t,minWidth:e,aspectRatio:r,placeholderText:i="No Image",image:s})=>{let o;const[a,l]=(0,n.useState)(!1),u=(0,n.useRef)(null),c=()=>{const t=u.current;if(t){const e=t.getContext("2d");e&&e.drawImage(s,0,0,t.width,t.height)}},f=()=>{clearTimeout(o),l(!1),o=setTimeout((()=>{const t=u.current;t&&(h()(t),l(!0),s.src||d())}),500)},d=()=>{const t=u.current;if(t){const e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(i,t.width/2,t.height/2))}};return(0,n.useEffect)((()=>{const t=u.current;return t&&(h()(t),c(),l(!0),window.addEventListener("resize",f,!1)),()=>{window.removeEventListener("resize",f,!1)}}),[]),(0,n.useEffect)((()=>{c(),s.src||d()}),[s]),n.createElement("div",{style:{aspectRatio:r.toString(),maxWidth:t,minWidth:e,padding:0,margin:0,position:"relative"}},n.createElement("canvas",{style:a?{}:{display:"none"},ref:u}))})),u=({token:t,url:e,width:r,height:i,alt:s="Image",onLoad:o=(()=>{}),onError:a=(()=>{})})=>{const[h,l]=(0,n.useState)("");return(0,n.useEffect)((()=>{e&&fetch(e,{headers:{Authorization:t}}).then((t=>{t.blob().then((t=>{const e=t,r=(window.URL||window.webkitURL).createObjectURL(e);l(r)}))})).catch(a)}),[e]),n.createElement("img",{onLoad:o,src:h&&h,id:"rembrainImage",className:"rembrain-image",width:r,height:i,alt:s||""})};class c{constructor(t,e,r,i){this.x=t,this.y=e,this.w=r,this.h=i}static fromPoints(t,e){let r={x:Math.min(t.x,e.x),y:Math.min(t.y,e.y)},i=Math.max(t.x,e.x),n=Math.max(t.y,e.y);return new c(r.x,r.y,i-r.x,n-r.y)}get TopLeft(){return{x:this.x,y:this.y}}get TopRight(){return{x:this.x+this.w,y:this.y}}get BottomLeft(){return{x:this.x,y:this.y+this.h}}get BottomRight(){return{x:this.x+this.w,y:this.y+this.h}}get Center(){return{x:this.x+.5*this.w,y:this.y+.5*this.h}}get CenterTop(){return{x:this.x+.5*this.w,y:this.y}}get CenterBottom(){return{x:this.x+.5*this.w,y:this.y+this.h}}}var f=function(t,e){return f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},f(t,e)};function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}f(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function p(t,e){var r,i,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(n=2&s[0]?i.return:s[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,s[1])).done)return n;switch(i=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((n=(n=o.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],i=0}finally{r=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function m(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return o}function w(t,e){for(var r=0,i=e.length,n=t.length;r<i;r++,n++)t[n]=e[r];return t}function b(t){return this instanceof b?(this.v=t,this):new b(t)}function y(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,n=r.apply(t,e||[]),s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(t){n[t]&&(i[t]=function(e){return new Promise((function(r,i){s.push([t,e,r,i])>1||a(t,e)}))})}function a(t,e){try{(r=n[t](e)).value instanceof b?Promise.resolve(r.value.v).then(h,l):u(s[0][2],r)}catch(t){u(s[0][3],t)}var r}function h(t){a("next",t)}function l(t){a("throw",t)}function u(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function _(t){return"function"==typeof t}function v(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var x=v((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function k(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}var A=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,r,i,n;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var o=m(s),a=o.next();!a.done;a=o.next())a.value.remove(this)}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(_(h))try{h()}catch(t){n=t instanceof x?t.errors:[t]}var l=this._teardowns;if(l){this._teardowns=null;try{for(var u=m(l),c=u.next();!c.done;c=u.next()){var f=c.value;try{S(f)}catch(t){n=null!=n?n:[],t instanceof x?n=w(w([],g(n)),g(t.errors)):n.push(t)}}}catch(t){r={error:t}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}}if(n)throw new x(n)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)S(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(r=this._teardowns)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&k(e,t)},t.prototype.remove=function(e){var r=this._teardowns;r&&k(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),M=A.EMPTY;function E(t){return t instanceof A||t&&"closed"in t&&_(t.remove)&&_(t.add)&&_(t.unsubscribe)}function S(t){_(t)?t():t.unsubscribe()}var C=null,I=null,D=void 0,P=!1,B=!1,R={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=R.delegate;return((null==r?void 0:r.setTimeout)||setTimeout).apply(void 0,w([],g(t)))},clearTimeout:function(t){var e=R.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(t){R.setTimeout((function(){if(!C)throw t;C(t)}))}function U(){}var O=L("C",void 0,void 0);function L(t,e,r){return{kind:t,value:e,error:r}}var F=null;function N(t){if(P){var e=!F;if(e&&(F={errorThrown:!1,error:null}),t(),e){var r=F,i=r.errorThrown,n=r.error;if(F=null,i)throw n}}else t()}function z(t){P&&F&&(F.errorThrown=!0,F.error=t)}var j=function(t){function e(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,E(e)&&e.add(r)):r.destination=G,r}return d(e,t),e.create=function(t,e,r){return new Y(t,e,r)},e.prototype.next=function(t){this.isStopped?X(function(t){return L("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?X(L("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?X(O,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(A),Y=function(t){function e(e,r,i){var n,s=t.call(this)||this;if(_(e))n=e;else if(e){var o;n=e.next,r=e.error,i=e.complete,s&&B?(o=Object.create(e)).unsubscribe=function(){return s.unsubscribe()}:o=e,n=null==n?void 0:n.bind(o),r=null==r?void 0:r.bind(o),i=null==i?void 0:i.bind(o)}return s.destination={next:n?V(n):U,error:V(null!=r?r:q),complete:i?V(i):U},s}return d(e,t),e}(j);function V(t,e){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,w([],g(e)))}catch(t){P?z(t):T(t)}}}function q(t){throw t}function X(t,e){var r=I;r&&R.setTimeout((function(){return r(t,e)}))}var G={closed:!0,next:U,error:q,complete:U},$="function"==typeof Symbol&&Symbol.observable||"@@observable";function W(t){return t}function Z(t){return 0===t.length?W:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var H=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var i,n=this,s=(i=t)&&i instanceof j||function(t){return t&&_(t.next)&&_(t.error)&&_(t.complete)}(i)&&E(i)?t:new Y(t,e,r);return N((function(){var t=n,e=t.operator,r=t.source;s.add(e?e.call(s,r):r?n._subscribe(s):n._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=K(e))((function(e,i){var n;n=r.subscribe((function(e){try{t(e)}catch(t){i(t),null==n||n.unsubscribe()}}),i,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[$]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Z(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=K(t))((function(t,r){var i;e.subscribe((function(t){return i=t}),(function(t){return r(t)}),(function(){return t(i)}))}))},t.create=function(e){return new t(e)},t}();function K(t){var e;return null!==(e=null!=t?t:D)&&void 0!==e?e:Promise}var J=v((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Q=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return d(e,t),e.prototype.lift=function(t){var e=new tt(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new J},e.prototype.next=function(t){var e=this;N((function(){var r,i;if(e._throwIfClosed(),!e.isStopped){var n=e.observers.slice();try{for(var s=m(n),o=s.next();!o.done;o=s.next())o.value.next(t)}catch(t){r={error:t}}finally{try{o&&!o.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}}}))},e.prototype.error=function(t){var e=this;N((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var r=e.observers;r.length;)r.shift().error(t)}}))},e.prototype.complete=function(){var t=this;N((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,r=e.hasError,i=e.isStopped,n=e.observers;return r||i?M:(n.push(t),new A((function(){return k(n,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,i=e.thrownError,n=e.isStopped;r?t.error(i):n&&t.complete()},e.prototype.asObservable=function(){var t=new H;return t.source=this,t},e.create=function(t,e){return new tt(t,e)},e}(H),tt=function(t){function e(e,r){var i=t.call(this)||this;return i.destination=e,i.source=r,i}return d(e,t),e.prototype.next=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===r||r.call(e,t)},e.prototype.error=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===r||r.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,r;return null!==(r=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==r?r:M},e}(Q),et={now:function(){return(et.delegate||Date).now()},delegate:void 0},rt=function(t){function e(e,r,i){void 0===e&&(e=1/0),void 0===r&&(r=1/0),void 0===i&&(i=et);var n=t.call(this)||this;return n._bufferSize=e,n._windowTime=r,n._timestampProvider=i,n._buffer=[],n._infiniteTimeWindow=!0,n._infiniteTimeWindow=r===1/0,n._bufferSize=Math.max(1,e),n._windowTime=Math.max(1,r),n}return d(e,t),e.prototype.next=function(e){var r=this,i=r.isStopped,n=r._buffer,s=r._infiniteTimeWindow,o=r._timestampProvider,a=r._windowTime;i||(n.push(e),!s&&n.push(o.now()+a)),this._trimBuffer(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){this._throwIfClosed(),this._trimBuffer();for(var e=this._innerSubscribe(t),r=this._infiniteTimeWindow,i=this._buffer.slice(),n=0;n<i.length&&!t.closed;n+=r?1:2)t.next(i[n]);return this._checkFinalizedStatuses(t),e},e.prototype._trimBuffer=function(){var t=this,e=t._bufferSize,r=t._timestampProvider,i=t._buffer,n=t._infiniteTimeWindow,s=(n?1:2)*e;if(e<1/0&&s<i.length&&i.splice(0,i.length-s),!n){for(var o=r.now(),a=0,h=1;h<i.length&&i[h]<=o;h+=2)a=h;a&&i.splice(0,a+1)}},e}(Q);const it={getBit(t){return this.data[nt(t)]&1<<st(t)?1:0},setBit(t){this.data[nt(t)]|=1<<st(t)},clearBit(t){this.data[nt(t)]&=~(1<<st(t))},toggleBit(t){this.data[nt(t)]^=1<<st(t)},getBitXY(t,e){return t>=this.width||e>=this.height?0:this.getBit(e*this.width+t)},setBitXY(t,e){this.setBit(e*this.width+t)},clearBitXY(t,e){this.clearBit(e*this.width+t)},toggleBitXY(t,e){this.toggleBit(e*this.width+t)}};function nt(t){return t>>3}function st(t){return 7-(7&t)}function ot(t,e,r){return"function"==typeof t.toBlob?new Promise((function(i){t.toBlob(i,e,r)})):Promise.resolve(function(t){var e=t.match(/data:([^;]+)/)[1],r=t.replace(/^[^,]+,/,"");return function(t,e){t=t||[],"string"==typeof(e=e||{})&&(e={type:e});try{return new Blob(t,e)}catch(n){if("TypeError"!==n.name)throw n;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<t.length;i+=1)r.append(t[i]);return r.getBlob(e.type)}}([at(atob(r))],{type:e})}(t.toDataURL(e,r)))}function at(t){for(var e=t.length,r=new ArrayBuffer(e),i=new Uint8Array(r),n=-1;++n<e;)i[n]=t.charCodeAt(n);return r}var ht=__webpack_require__(4665);__webpack_require__(7638);const lt=new TextDecoder("utf-8"),ut=new TextEncoder;class ct{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0,n=t.byteLength-i;let s=i;(ArrayBuffer.isView(t)||t instanceof ct)&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this.lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),lt.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return ut.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}function ft(t){let e=t.length;for(;--e>=0;)t[e]=0}const dt=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),pt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),gt=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),wt=new Array(576);ft(wt);const bt=new Array(60);ft(bt);const yt=new Array(512);ft(yt);const _t=new Array(256);ft(_t);const vt=new Array(29);ft(vt);const xt=new Array(30);function kt(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let At,Mt,Et;function St(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}ft(xt);const Ct=t=>t<256?yt[t]:yt[256+(t>>>7)],It=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},Dt=(t,e,r)=>{t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,It(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)},Pt=(t,e,r)=>{Dt(t,r[2*e],r[2*e+1])},Bt=(t,e)=>{let r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1},Rt=(t,e,r)=>{const i=new Array(16);let n,s,o=0;for(n=1;n<=15;n++)i[n]=o=o+r[n-1]<<1;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=Bt(i[e]++,e))}},Tt=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0},Ut=t=>{t.bi_valid>8?It(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},Ot=(t,e,r,i)=>{const n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]},Lt=(t,e,r)=>{const i=t.heap[r];let n=r<<1;for(;n<=t.heap_len&&(n<t.heap_len&&Ot(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!Ot(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i},Ft=(t,e,r)=>{let i,n,s,o,a=0;if(0!==t.last_lit)do{i=t.pending_buf[t.d_buf+2*a]<<8|t.pending_buf[t.d_buf+2*a+1],n=t.pending_buf[t.l_buf+a],a++,0===i?Pt(t,n,e):(s=_t[n],Pt(t,s+256+1,e),o=dt[s],0!==o&&(n-=vt[s],Dt(t,n,o)),i--,s=Ct(i),Pt(t,s,r),o=pt[s],0!==o&&(i-=xt[s],Dt(t,i,o)))}while(a<t.last_lit);Pt(t,256,e)},Nt=(t,e)=>{const r=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let o,a,h,l=-1;for(t.heap_len=0,t.heap_max=573,o=0;o<s;o++)0!==r[2*o]?(t.heap[++t.heap_len]=l=o,t.depth[o]=0):r[2*o+1]=0;for(;t.heap_len<2;)h=t.heap[++t.heap_len]=l<2?++l:0,r[2*h]=1,t.depth[h]=0,t.opt_len--,n&&(t.static_len-=i[2*h+1]);for(e.max_code=l,o=t.heap_len>>1;o>=1;o--)Lt(t,r,o);h=s;do{o=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Lt(t,r,1),a=t.heap[1],t.heap[--t.heap_max]=o,t.heap[--t.heap_max]=a,r[2*h]=r[2*o]+r[2*a],t.depth[h]=(t.depth[o]>=t.depth[a]?t.depth[o]:t.depth[a])+1,r[2*o+1]=r[2*a+1]=h,t.heap[1]=h++,Lt(t,r,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const r=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,o=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,h=e.stat_desc.max_length;let l,u,c,f,d,p,m=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(r[2*t.heap[t.heap_max]+1]=0,l=t.heap_max+1;l<573;l++)u=t.heap[l],f=r[2*r[2*u+1]+1]+1,f>h&&(f=h,m++),r[2*u+1]=f,u>i||(t.bl_count[f]++,d=0,u>=a&&(d=o[u-a]),p=r[2*u],t.opt_len+=p*(f+d),s&&(t.static_len+=p*(n[2*u+1]+d)));if(0!==m){do{for(f=h-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[h]--,m-=2}while(m>0);for(f=h;0!==f;f--)for(u=t.bl_count[f];0!==u;)c=t.heap[--l],c>i||(r[2*c+1]!==f&&(t.opt_len+=(f-r[2*c+1])*r[2*c],r[2*c+1]=f),u--)}})(t,e),Rt(r,l,t.bl_count)},zt=(t,e,r)=>{let i,n,s=-1,o=e[1],a=0,h=7,l=4;for(0===o&&(h=138,l=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=o,o=e[2*(i+1)+1],++a<h&&n===o||(a<l?t.bl_tree[2*n]+=a:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,a=0,s=n,0===o?(h=138,l=3):n===o?(h=6,l=3):(h=7,l=4))},jt=(t,e,r)=>{let i,n,s=-1,o=e[1],a=0,h=7,l=4;for(0===o&&(h=138,l=3),i=0;i<=r;i++)if(n=o,o=e[2*(i+1)+1],!(++a<h&&n===o)){if(a<l)do{Pt(t,n,t.bl_tree)}while(0!=--a);else 0!==n?(n!==s&&(Pt(t,n,t.bl_tree),a--),Pt(t,16,t.bl_tree),Dt(t,a-3,2)):a<=10?(Pt(t,17,t.bl_tree),Dt(t,a-3,3)):(Pt(t,18,t.bl_tree),Dt(t,a-11,7));a=0,s=n,0===o?(h=138,l=3):n===o?(h=6,l=3):(h=7,l=4)}};let Yt=!1;const Vt=(t,e,r,i)=>{Dt(t,0+(i?1:0),3),((t,e,r,i)=>{Ut(t),It(t,r),It(t,~r),t.pending_buf.set(t.window.subarray(e,e+r),t.pending),t.pending+=r})(t,e,r)};var qt={_tr_init:t=>{Yt||((()=>{let t,e,r,i,n;const s=new Array(16);for(r=0,i=0;i<28;i++)for(vt[i]=r,t=0;t<1<<dt[i];t++)_t[r++]=i;for(_t[r-1]=i,n=0,i=0;i<16;i++)for(xt[i]=n,t=0;t<1<<pt[i];t++)yt[n++]=i;for(n>>=7;i<30;i++)for(xt[i]=n<<7,t=0;t<1<<pt[i]-7;t++)yt[256+n++]=i;for(e=0;e<=15;e++)s[e]=0;for(t=0;t<=143;)wt[2*t+1]=8,t++,s[8]++;for(;t<=255;)wt[2*t+1]=9,t++,s[9]++;for(;t<=279;)wt[2*t+1]=7,t++,s[7]++;for(;t<=287;)wt[2*t+1]=8,t++,s[8]++;for(Rt(wt,287,s),t=0;t<30;t++)bt[2*t+1]=5,bt[2*t]=Bt(t,5);At=new kt(wt,dt,257,286,15),Mt=new kt(bt,pt,0,30,15),Et=new kt(new Array(0),mt,0,19,7)})(),Yt=!0),t.l_desc=new St(t.dyn_ltree,At),t.d_desc=new St(t.dyn_dtree,Mt),t.bl_desc=new St(t.bl_tree,Et),t.bi_buf=0,t.bi_valid=0,Tt(t)},_tr_stored_block:Vt,_tr_flush_block:(t,e,r,i)=>{let n,s,o=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),Nt(t,t.l_desc),Nt(t,t.d_desc),o=(t=>{let e;for(zt(t,t.dyn_ltree,t.l_desc.max_code),zt(t,t.dyn_dtree,t.d_desc.max_code),Nt(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*gt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),n=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?Vt(t,e,r,i):4===t.strategy||s===n?(Dt(t,2+(i?1:0),3),Ft(t,wt,bt)):(Dt(t,4+(i?1:0),3),((t,e,r,i)=>{let n;for(Dt(t,e-257,5),Dt(t,r-1,5),Dt(t,i-4,4),n=0;n<i;n++)Dt(t,t.bl_tree[2*gt[n]+1],3);jt(t,t.dyn_ltree,e-1),jt(t,t.dyn_dtree,r-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,o+1),Ft(t,t.dyn_ltree,t.dyn_dtree)),Tt(t),i&&Ut(t)},_tr_tally:(t,e,r)=>(t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(_t[r]+256+1)]++,t.dyn_dtree[2*Ct(e)]++),t.last_lit===t.lit_bufsize-1),_tr_align:t=>{Dt(t,2,3),Pt(t,256,wt),(t=>{16===t.bi_valid?(It(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}},Xt=(t,e,r,i)=>{let n=65535&t|0,s=t>>>16&65535|0,o=0;for(;0!==r;){o=r>2e3?2e3:r,r-=o;do{n=n+e[i++]|0,s=s+n|0}while(--o);n%=65521,s%=65521}return n|s<<16|0};const Gt=new Uint32Array((()=>{let t,e=[];for(var r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e})());var $t=(t,e,r,i)=>{const n=Gt,s=i+r;t^=-1;for(let r=i;r<s;r++)t=t>>>8^n[255&(t^e[r])];return-1^t},Wt={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Zt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Ht,_tr_stored_block:Kt,_tr_flush_block:Jt,_tr_tally:Qt,_tr_align:te}=qt,{Z_NO_FLUSH:ee,Z_PARTIAL_FLUSH:re,Z_FULL_FLUSH:ie,Z_FINISH:ne,Z_BLOCK:se,Z_OK:oe,Z_STREAM_END:ae,Z_STREAM_ERROR:he,Z_DATA_ERROR:le,Z_BUF_ERROR:ue,Z_DEFAULT_COMPRESSION:ce,Z_FILTERED:fe,Z_HUFFMAN_ONLY:de,Z_RLE:pe,Z_FIXED:me,Z_DEFAULT_STRATEGY:ge,Z_UNKNOWN:we,Z_DEFLATED:be}=Zt,ye=258,_e=262,ve=103,xe=113,ke=666,Ae=(t,e)=>(t.msg=Wt[e],e),Me=t=>(t<<1)-(t>4?9:0),Ee=t=>{let e=t.length;for(;--e>=0;)t[e]=0};let Se=(t,e,r)=>(e<<t.hash_shift^r)&t.hash_mask;const Ce=t=>{const e=t.state;let r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+r),t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))},Ie=(t,e)=>{Jt(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,Ce(t.strm)},De=(t,e)=>{t.pending_buf[t.pending++]=e},Pe=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},Be=(t,e,r,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),r),1===t.state.wrap?t.adler=Xt(t.adler,e,n,r):2===t.state.wrap&&(t.adler=$t(t.adler,e,n,r)),t.next_in+=n,t.total_in+=n,n)},Re=(t,e)=>{let r,i,n=t.max_chain_length,s=t.strstart,o=t.prev_length,a=t.nice_match;const h=t.strstart>t.w_size-_e?t.strstart-(t.w_size-_e):0,l=t.window,u=t.w_mask,c=t.prev,f=t.strstart+ye;let d=l[s+o-1],p=l[s+o];t.prev_length>=t.good_match&&(n>>=2),a>t.lookahead&&(a=t.lookahead);do{if(r=e,l[r+o]===p&&l[r+o-1]===d&&l[r]===l[s]&&l[++r]===l[s+1]){s+=2,r++;do{}while(l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&s<f);if(i=ye-(f-s),s=f-ye,i>o){if(t.match_start=e,o=i,i>=a)break;d=l[s+o-1],p=l[s+o]}}}while((e=c[e&u])>h&&0!=--n);return o<=t.lookahead?o:t.lookahead},Te=t=>{const e=t.w_size;let r,i,n,s,o;do{if(s=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-_e)){t.window.set(t.window.subarray(e,e+e),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,i=t.hash_size,r=i;do{n=t.head[--r],t.head[r]=n>=e?n-e:0}while(--i);i=e,r=i;do{n=t.prev[--r],t.prev[r]=n>=e?n-e:0}while(--i);s+=e}if(0===t.strm.avail_in)break;if(i=Be(t.strm,t.window,t.strstart+t.lookahead,s),t.lookahead+=i,t.lookahead+t.insert>=3)for(o=t.strstart-t.insert,t.ins_h=t.window[o],t.ins_h=Se(t,t.ins_h,t.window[o+1]);t.insert&&(t.ins_h=Se(t,t.ins_h,t.window[o+3-1]),t.prev[o&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=o,o++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<_e&&0!==t.strm.avail_in)},Ue=(t,e)=>{let r,i;for(;;){if(t.lookahead<_e){if(Te(t),t.lookahead<_e&&e===ee)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-_e&&(t.match_length=Re(t,r)),t.match_length>=3)if(i=Qt(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Se(t,t.ins_h,t.window[t.strstart+1]);else i=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2},Oe=(t,e)=>{let r,i,n;for(;;){if(t.lookahead<_e){if(Te(t),t.lookahead<_e&&e===ee)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-_e&&(t.match_length=Re(t,r),t.match_length<=5&&(t.strategy===fe||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=Qt(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(Ie(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=Qt(t,0,t.window[t.strstart-1]),i&&Ie(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Qt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2};function Le(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}const Fe=[new Le(0,0,0,0,((t,e)=>{let r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(Te(t),0===t.lookahead&&e===ee)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;const i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,Ie(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-_e&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(Ie(t,!1),t.strm.avail_out),1)})),new Le(4,4,8,4,Ue),new Le(4,5,16,8,Ue),new Le(4,6,32,32,Ue),new Le(4,4,16,16,Oe),new Le(8,16,32,32,Oe),new Le(8,16,128,128,Oe),new Le(8,32,128,256,Oe),new Le(32,128,258,1024,Oe),new Le(32,258,258,4096,Oe)];function Ne(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=be,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),Ee(this.dyn_ltree),Ee(this.dyn_dtree),Ee(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),Ee(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),Ee(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const ze=t=>{if(!t||!t.state)return Ae(t,he);t.total_in=t.total_out=0,t.data_type=we;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:xe,t.adler=2===e.wrap?0:1,e.last_flush=ee,Ht(e),oe},je=t=>{const e=ze(t);var r;return e===oe&&((r=t.state).window_size=2*r.w_size,Ee(r.head),r.max_lazy_match=Fe[r.level].max_lazy,r.good_match=Fe[r.level].good_length,r.nice_match=Fe[r.level].nice_length,r.max_chain_length=Fe[r.level].max_chain,r.strstart=0,r.block_start=0,r.lookahead=0,r.insert=0,r.match_length=r.prev_length=2,r.match_available=0,r.ins_h=0),e},Ye=(t,e,r,i,n,s)=>{if(!t)return he;let o=1;if(e===ce&&(e=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),n<1||n>9||r!==be||i<8||i>15||e<0||e>9||s<0||s>me)return Ae(t,he);8===i&&(i=9);const a=new Ne;return t.state=a,a.strm=t,a.wrap=o,a.gzhead=null,a.w_bits=i,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=n+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<n+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=e,a.strategy=s,a.method=r,je(t)};var Ve=Ye,qe=(t,e)=>t&&t.state?2!==t.state.wrap?he:(t.state.gzhead=e,oe):he,Xe=(t,e)=>{let r,i;if(!t||!t.state||e>se||e<0)return t?Ae(t,he):he;const n=t.state;if(!t.output||!t.input&&0!==t.avail_in||n.status===ke&&e!==ne)return Ae(t,0===t.avail_out?ue:he);n.strm=t;const s=n.last_flush;if(n.last_flush=e,42===n.status)if(2===n.wrap)t.adler=0,De(n,31),De(n,139),De(n,8),n.gzhead?(De(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),De(n,255&n.gzhead.time),De(n,n.gzhead.time>>8&255),De(n,n.gzhead.time>>16&255),De(n,n.gzhead.time>>24&255),De(n,9===n.level?2:n.strategy>=de||n.level<2?4:0),De(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(De(n,255&n.gzhead.extra.length),De(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(t.adler=$t(t.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(De(n,0),De(n,0),De(n,0),De(n,0),De(n,0),De(n,9===n.level?2:n.strategy>=de||n.level<2?4:0),De(n,3),n.status=xe);else{let e=be+(n.w_bits-8<<4)<<8,r=-1;r=n.strategy>=de||n.level<2?0:n.level<6?1:6===n.level?2:3,e|=r<<6,0!==n.strstart&&(e|=32),e+=31-e%31,n.status=xe,Pe(n,e),0!==n.strstart&&(Pe(n,t.adler>>>16),Pe(n,65535&t.adler)),t.adler=1}if(69===n.status)if(n.gzhead.extra){for(r=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending!==n.pending_buf_size));)De(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){r=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,De(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),0===i&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){r=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,De(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),0===i&&(n.status=ve)}else n.status=ve;if(n.status===ve&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Ce(t),n.pending+2<=n.pending_buf_size&&(De(n,255&t.adler),De(n,t.adler>>8&255),t.adler=0,n.status=xe)):n.status=xe),0!==n.pending){if(Ce(t),0===t.avail_out)return n.last_flush=-1,oe}else if(0===t.avail_in&&Me(e)<=Me(s)&&e!==ne)return Ae(t,ue);if(n.status===ke&&0!==t.avail_in)return Ae(t,ue);if(0!==t.avail_in||0!==n.lookahead||e!==ee&&n.status!==ke){let r=n.strategy===de?((t,e)=>{let r;for(;;){if(0===t.lookahead&&(Te(t),0===t.lookahead)){if(e===ee)return 1;break}if(t.match_length=0,r=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2})(n,e):n.strategy===pe?((t,e)=>{let r,i,n,s;const o=t.window;for(;;){if(t.lookahead<=ye){if(Te(t),t.lookahead<=ye&&e===ee)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=o[n],i===o[++n]&&i===o[++n]&&i===o[++n])){s=t.strstart+ye;do{}while(i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&n<s);t.match_length=ye-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=Qt(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2})(n,e):Fe[n.level].func(n,e);if(3!==r&&4!==r||(n.status=ke),1===r||3===r)return 0===t.avail_out&&(n.last_flush=-1),oe;if(2===r&&(e===re?te(n):e!==se&&(Kt(n,0,0,!1),e===ie&&(Ee(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Ce(t),0===t.avail_out))return n.last_flush=-1,oe}return e!==ne?oe:n.wrap<=0?ae:(2===n.wrap?(De(n,255&t.adler),De(n,t.adler>>8&255),De(n,t.adler>>16&255),De(n,t.adler>>24&255),De(n,255&t.total_in),De(n,t.total_in>>8&255),De(n,t.total_in>>16&255),De(n,t.total_in>>24&255)):(Pe(n,t.adler>>>16),Pe(n,65535&t.adler)),Ce(t),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?oe:ae)},Ge=t=>{if(!t||!t.state)return he;const e=t.state.status;return 42!==e&&69!==e&&73!==e&&91!==e&&e!==ve&&e!==xe&&e!==ke?Ae(t,he):(t.state=null,e===xe?Ae(t,le):oe)},$e=(t,e)=>{let r=e.length;if(!t||!t.state)return he;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return he;if(1===n&&(t.adler=Xt(t.adler,e,r,0)),i.wrap=0,r>=i.w_size){0===n&&(Ee(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(r-i.w_size,r),0),e=t,r=i.w_size}const s=t.avail_in,o=t.next_in,a=t.input;for(t.avail_in=r,t.next_in=0,t.input=e,Te(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=Se(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,Te(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=o,t.input=a,t.avail_in=s,i.wrap=n,oe};const We=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Ze=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(const e in r)We(r,e)&&(t[e]=r[e])}}return t},He=t=>{let e=0;for(let r=0,i=t.length;r<i;r++)e+=t[r].length;const r=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];r.set(n,i),i+=n.length}return r};let Ke=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ke=!1}const Je=new Uint8Array(256);for(let t=0;t<256;t++)Je[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Je[254]=Je[254]=1;var Qe=t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,r,i,n,s,o=t.length,a=0;for(n=0;n<o;n++)r=t.charCodeAt(n),55296==(64512&r)&&n+1<o&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(r=65536+(r-55296<<10)+(i-56320),n++)),a+=r<128?1:r<2048?2:r<65536?3:4;for(e=new Uint8Array(a),s=0,n=0;s<a;n++)r=t.charCodeAt(n),55296==(64512&r)&&n+1<o&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(r=65536+(r-55296<<10)+(i-56320),n++)),r<128?e[s++]=r:r<2048?(e[s++]=192|r>>>6,e[s++]=128|63&r):r<65536?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},tr=(t,e)=>{const r=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*r);for(n=0,i=0;i<r;){let e=t[i++];if(e<128){s[n++]=e;continue}let o=Je[e];if(o>4)s[n++]=65533,i+=o-1;else{for(e&=2===o?31:3===o?15:7;o>1&&i<r;)e=e<<6|63&t[i++],o--;o>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ke)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let r="";for(let i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r})(s,n)},er=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let r=e-1;for(;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+Je[t[r]]>e?r:e},rr=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const ir=Object.prototype.toString,{Z_NO_FLUSH:nr,Z_SYNC_FLUSH:sr,Z_FULL_FLUSH:or,Z_FINISH:ar,Z_OK:hr,Z_STREAM_END:lr,Z_DEFAULT_COMPRESSION:ur,Z_DEFAULT_STRATEGY:cr,Z_DEFLATED:fr}=Zt;function dr(t){this.options=Ze({level:ur,method:fr,chunkSize:16384,windowBits:15,memLevel:8,strategy:cr},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new rr,this.strm.avail_out=0;let r=Ve(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==hr)throw new Error(Wt[r]);if(e.header&&qe(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Qe(e.dictionary):"[object ArrayBuffer]"===ir.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,r=$e(this.strm,t),r!==hr)throw new Error(Wt[r]);this._dict_set=!0}}function pr(t,e){const r=new dr(e);if(r.push(t,!0),r.err)throw r.msg||Wt[r.err];return r.result}dr.prototype.push=function(t,e){const r=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?ar:nr,"string"==typeof t?r.input=Qe(t):"[object ArrayBuffer]"===ir.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;)if(0===r.avail_out&&(r.output=new Uint8Array(i),r.next_out=0,r.avail_out=i),(s===sr||s===or)&&r.avail_out<=6)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else{if(n=Xe(r,s),n===lr)return r.next_out>0&&this.onData(r.output.subarray(0,r.next_out)),n=Ge(this.strm),this.onEnd(n),this.ended=!0,n===hr;if(0!==r.avail_out){if(s>0&&r.next_out>0)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else if(0===r.avail_in)break}else this.onData(r.output)}return!0},dr.prototype.onData=function(t){this.chunks.push(t)},dr.prototype.onEnd=function(t){t===hr&&(this.result=He(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var mr={Deflate:dr,deflate:pr,deflateRaw:function(t,e){return(e=e||{}).raw=!0,pr(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,pr(t,e)},constants:Zt},gr=function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_,v,x,k,A,M;const E=t.state;r=t.next_in,A=t.input,i=r+(t.avail_in-5),n=t.next_out,M=t.output,s=n-(e-t.avail_out),o=n+(t.avail_out-257),a=E.dmax,h=E.wsize,l=E.whave,u=E.wnext,c=E.window,f=E.hold,d=E.bits,p=E.lencode,m=E.distcode,g=(1<<E.lenbits)-1,w=(1<<E.distbits)-1;t:do{d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=p[f&g];e:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,0===y)M[n++]=65535&b;else{if(!(16&y)){if(0==(64&y)){b=p[(65535&b)+(f&(1<<y)-1)];continue e}if(32&y){E.mode=12;break t}t.msg="invalid literal/length code",E.mode=30;break t}_=65535&b,y&=15,y&&(d<y&&(f+=A[r++]<<d,d+=8),_+=f&(1<<y)-1,f>>>=y,d-=y),d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=m[f&w];r:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,!(16&y)){if(0==(64&y)){b=m[(65535&b)+(f&(1<<y)-1)];continue r}t.msg="invalid distance code",E.mode=30;break t}if(v=65535&b,y&=15,d<y&&(f+=A[r++]<<d,d+=8,d<y&&(f+=A[r++]<<d,d+=8)),v+=f&(1<<y)-1,v>a){t.msg="invalid distance too far back",E.mode=30;break t}if(f>>>=y,d-=y,y=n-s,v>y){if(y=v-y,y>l&&E.sane){t.msg="invalid distance too far back",E.mode=30;break t}if(x=0,k=c,0===u){if(x+=h-y,y<_){_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}}else if(u<y){if(x+=h+u-y,y-=u,y<_){_-=y;do{M[n++]=c[x++]}while(--y);if(x=0,u<_){y=u,_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}}}else if(x+=u-y,y<_){_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}for(;_>2;)M[n++]=k[x++],M[n++]=k[x++],M[n++]=k[x++],_-=3;_&&(M[n++]=k[x++],_>1&&(M[n++]=k[x++]))}else{x=n-v;do{M[n++]=M[x++],M[n++]=M[x++],M[n++]=M[x++],_-=3}while(_>2);_&&(M[n++]=M[x++],_>1&&(M[n++]=M[x++]))}break}}break}}while(r<i&&n<o);_=d>>3,r-=_,d-=_<<3,f&=(1<<d)-1,t.next_in=r,t.next_out=n,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=n<o?o-n+257:257-(n-o),E.hold=f,E.bits=d};const wr=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),br=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),yr=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),_r=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var vr=(t,e,r,i,n,s,o,a)=>{const h=a.bits;let l,u,c,f,d,p,m=0,g=0,w=0,b=0,y=0,_=0,v=0,x=0,k=0,A=0,M=null,E=0;const S=new Uint16Array(16),C=new Uint16Array(16);let I,D,P,B=null,R=0;for(m=0;m<=15;m++)S[m]=0;for(g=0;g<i;g++)S[e[r+g]]++;for(y=h,b=15;b>=1&&0===S[b];b--);if(y>b&&(y=b),0===b)return n[s++]=20971520,n[s++]=20971520,a.bits=1,0;for(w=1;w<b&&0===S[w];w++);for(y<w&&(y=w),x=1,m=1;m<=15;m++)if(x<<=1,x-=S[m],x<0)return-1;if(x>0&&(0===t||1!==b))return-1;for(C[1]=0,m=1;m<15;m++)C[m+1]=C[m]+S[m];for(g=0;g<i;g++)0!==e[r+g]&&(o[C[e[r+g]]++]=g);if(0===t?(M=B=o,p=19):1===t?(M=wr,E-=257,B=br,R-=257,p=256):(M=yr,B=_r,p=-1),A=0,g=0,m=w,d=s,_=y,v=0,c=-1,k=1<<y,f=k-1,1===t&&k>852||2===t&&k>592)return 1;for(;;){I=m-v,o[g]<p?(D=0,P=o[g]):o[g]>p?(D=B[R+o[g]],P=M[E+o[g]]):(D=96,P=0),l=1<<m-v,u=1<<_,w=u;do{u-=l,n[d+(A>>v)+u]=I<<24|D<<16|P|0}while(0!==u);for(l=1<<m-1;A&l;)l>>=1;if(0!==l?(A&=l-1,A+=l):A=0,g++,0==--S[m]){if(m===b)break;m=e[r+o[g]]}if(m>y&&(A&f)!==c){for(0===v&&(v=y),d+=w,_=m-v,x=1<<_;_+v<b&&(x-=S[_+v],!(x<=0));)_++,x<<=1;if(k+=1<<_,1===t&&k>852||2===t&&k>592)return 1;c=A&f,n[c]=y<<24|_<<16|d-s|0}}return 0!==A&&(n[d+A]=m-v<<24|64<<16|0),a.bits=y,0};const{Z_FINISH:xr,Z_BLOCK:kr,Z_TREES:Ar,Z_OK:Mr,Z_STREAM_END:Er,Z_NEED_DICT:Sr,Z_STREAM_ERROR:Cr,Z_DATA_ERROR:Ir,Z_MEM_ERROR:Dr,Z_BUF_ERROR:Pr,Z_DEFLATED:Br}=Zt,Rr=12,Tr=30,Ur=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Or(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Lr=t=>{if(!t||!t.state)return Cr;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,Mr},Fr=t=>{if(!t||!t.state)return Cr;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Lr(t)},Nr=(t,e)=>{let r;if(!t||!t.state)return Cr;const i=t.state;return e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?Cr:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,Fr(t))},zr=(t,e)=>{if(!t)return Cr;const r=new Or;t.state=r,r.window=null;const i=Nr(t,e);return i!==Mr&&(t.state=null),i};let jr,Yr,Vr=!0;const qr=t=>{if(Vr){jr=new Int32Array(512),Yr=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(vr(1,t.lens,0,288,jr,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;vr(2,t.lens,0,32,Yr,0,t.work,{bits:5}),Vr=!1}t.lencode=jr,t.lenbits=9,t.distcode=Yr,t.distbits=5},Xr=(t,e,r,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(r-s.wsize,r),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(r-i,r-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(r-i,r),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Gr=Fr,$r=zr,Wr=(t,e)=>{let r,i,n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_,v,x,k,A=0;const M=new Uint8Array(4);let E,S;const C=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return Cr;r=t.state,r.mode===Rr&&(r.mode=13),o=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,a=t.avail_in,l=r.hold,u=r.bits,c=a,f=h,k=Mr;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(2&r.wrap&&35615===l){r.check=0,M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0),l=0,u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&l)<<8)+(l>>8))%31){t.msg="incorrect header check",r.mode=Tr;break}if((15&l)!==Br){t.msg="unknown compression method",r.mode=Tr;break}if(l>>>=4,u-=4,x=8+(15&l),0===r.wbits)r.wbits=x;else if(x>r.wbits){t.msg="invalid window size",r.mode=Tr;break}r.dmax=1<<r.wbits,t.adler=r.check=1,r.mode=512&l?10:Rr,l=0,u=0;break;case 2:for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(r.flags=l,(255&r.flags)!==Br){t.msg="unknown compression method",r.mode=Tr;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=Tr;break}r.head&&(r.head.text=l>>8&1),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0,r.mode=3;case 3:for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.head&&(r.head.time=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,M[2]=l>>>16&255,M[3]=l>>>24&255,r.check=$t(r.check,M,4,0)),l=0,u=0,r.mode=4;case 4:for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.head&&(r.head.xflags=255&l,r.head.os=l>>8),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0,r.mode=5;case 5:if(1024&r.flags){for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(d=r.length,d>a&&(d=a),d&&(r.head&&(x=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Uint8Array(r.head.extra_len)),r.head.extra.set(i.subarray(s,s+d),x)),512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,r.length-=d),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===a)break t;d=0;do{x=i[s+d++],r.head&&x&&r.length<65536&&(r.head.name+=String.fromCharCode(x))}while(x&&d<a);if(512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,x)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===a)break t;d=0;do{x=i[s+d++],r.head&&x&&r.length<65536&&(r.head.comment+=String.fromCharCode(x))}while(x&&d<a);if(512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,x)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l!==(65535&r.check)){t.msg="header crc mismatch",r.mode=Tr;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=Rr;break;case 10:for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}t.adler=r.check=Ur(l),l=0,u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,Sr;t.adler=r.check=1,r.mode=Rr;case Rr:if(e===kr||e===Ar)break t;case 13:if(r.last){l>>>=7&u,u-=7&u,r.mode=27;break}for(;u<3;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}switch(r.last=1&l,l>>>=1,u-=1,3&l){case 0:r.mode=14;break;case 1:if(qr(r),r.mode=20,e===Ar){l>>>=2,u-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=Tr}l>>>=2,u-=2;break;case 14:for(l>>>=7&u,u-=7&u;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if((65535&l)!=(l>>>16^65535)){t.msg="invalid stored block lengths",r.mode=Tr;break}if(r.length=65535&l,l=0,u=0,r.mode=15,e===Ar)break t;case 15:r.mode=16;case 16:if(d=r.length,d){if(d>a&&(d=a),d>h&&(d=h),0===d)break t;n.set(i.subarray(s,s+d),o),a-=d,s+=d,h-=d,o+=d,r.length-=d;break}r.mode=Rr;break;case 17:for(;u<14;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(r.nlen=257+(31&l),l>>>=5,u-=5,r.ndist=1+(31&l),l>>>=5,u-=5,r.ncode=4+(15&l),l>>>=4,u-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=Tr;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;u<3;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.lens[C[r.have++]]=7&l,l>>>=3,u-=3}for(;r.have<19;)r.lens[C[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,E={bits:r.lenbits},k=vr(0,r.lens,0,19,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid code lengths set",r.mode=Tr;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(b<16)l>>>=g,u-=g,r.lens[r.have++]=b;else{if(16===b){for(S=g+2;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l>>>=g,u-=g,0===r.have){t.msg="invalid bit length repeat",r.mode=Tr;break}x=r.lens[r.have-1],d=3+(3&l),l>>>=2,u-=2}else if(17===b){for(S=g+3;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=g,u-=g,x=0,d=3+(7&l),l>>>=3,u-=3}else{for(S=g+7;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=g,u-=g,x=0,d=11+(127&l),l>>>=7,u-=7}if(r.have+d>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=Tr;break}for(;d--;)r.lens[r.have++]=x}}if(r.mode===Tr)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=Tr;break}if(r.lenbits=9,E={bits:r.lenbits},k=vr(1,r.lens,0,r.nlen,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid literal/lengths set",r.mode=Tr;break}if(r.distbits=6,r.distcode=r.distdyn,E={bits:r.distbits},k=vr(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,E),r.distbits=E.bits,k){t.msg="invalid distances set",r.mode=Tr;break}if(r.mode=20,e===Ar)break t;case 20:r.mode=21;case 21:if(a>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,gr(t,f),o=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,a=t.avail_in,l=r.hold,u=r.bits,r.mode===Rr&&(r.back=-1);break}for(r.back=0;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(w&&0==(240&w)){for(y=g,_=w,v=b;A=r.lencode[v+((l&(1<<y+_)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,r.length=b,0===w){r.mode=26;break}if(32&w){r.back=-1,r.mode=Rr;break}if(64&w){t.msg="invalid literal/length code",r.mode=Tr;break}r.extra=15&w,r.mode=22;case 22:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=r.distcode[l&(1<<r.distbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(0==(240&w)){for(y=g,_=w,v=b;A=r.distcode[v+((l&(1<<y+_)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,64&w){t.msg="invalid distance code",r.mode=Tr;break}r.offset=b,r.extra=15&w,r.mode=24;case 24:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=Tr;break}r.mode=25;case 25:if(0===h)break t;if(d=f-h,r.offset>d){if(d=r.offset-d,d>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=Tr;break}d>r.wnext?(d-=r.wnext,p=r.wsize-d):p=r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=n,p=o-r.offset,d=r.length;d>h&&(d=h),h-=d,r.length-=d;do{n[o++]=m[p++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[o++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;u<32;){if(0===a)break t;a--,l|=i[s++]<<u,u+=8}if(f-=h,t.total_out+=f,r.total+=f,f&&(t.adler=r.check=r.flags?$t(r.check,n,f,o-f):Xt(r.check,n,f,o-f)),f=h,(r.flags?l:Ur(l))!==r.check){t.msg="incorrect data check",r.mode=Tr;break}l=0,u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=Tr;break}l=0,u=0}r.mode=29;case 29:k=Er;break t;case Tr:k=Ir;break t;case 31:return Dr;default:return Cr}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,(r.wsize||f!==t.avail_out&&r.mode<Tr&&(r.mode<27||e!==xr))&&Xr(t,t.output,t.next_out,f-t.avail_out),c-=t.avail_in,f-=t.avail_out,t.total_in+=c,t.total_out+=f,r.total+=f,r.wrap&&f&&(t.adler=r.check=r.flags?$t(r.check,n,f,t.next_out-f):Xt(r.check,n,f,t.next_out-f)),t.data_type=r.bits+(r.last?64:0)+(r.mode===Rr?128:0)+(20===r.mode||15===r.mode?256:0),(0===c&&0===f||e===xr)&&k===Mr&&(k=Pr),k},Zr=t=>{if(!t||!t.state)return Cr;let e=t.state;return e.window&&(e.window=null),t.state=null,Mr},Hr=(t,e)=>{if(!t||!t.state)return Cr;const r=t.state;return 0==(2&r.wrap)?Cr:(r.head=e,e.done=!1,Mr)},Kr=(t,e)=>{const r=e.length;let i,n,s;return t&&t.state?(i=t.state,0!==i.wrap&&11!==i.mode?Cr:11===i.mode&&(n=1,n=Xt(n,e,r,0),n!==i.check)?Ir:(s=Xr(t,e,r,r),s?(i.mode=31,Dr):(i.havedict=1,Mr))):Cr},Jr=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Qr=Object.prototype.toString,{Z_NO_FLUSH:ti,Z_FINISH:ei,Z_OK:ri,Z_STREAM_END:ii,Z_NEED_DICT:ni,Z_STREAM_ERROR:si,Z_DATA_ERROR:oi,Z_MEM_ERROR:ai}=Zt;function hi(t){this.options=Ze({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new rr,this.strm.avail_out=0;let r=$r(this.strm,e.windowBits);if(r!==ri)throw new Error(Wt[r]);if(this.header=new Jr,Hr(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Qe(e.dictionary):"[object ArrayBuffer]"===Qr.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=Kr(this.strm,e.dictionary),r!==ri)))throw new Error(Wt[r])}function li(t,e){const r=new hi(e);if(r.push(t),r.err)throw r.msg||Wt[r.err];return r.result}hi.prototype.push=function(t,e){const r=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,o,a;if(this.ended)return!1;for(o=e===~~e?e:!0===e?ei:ti,"[object ArrayBuffer]"===Qr.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;){for(0===r.avail_out&&(r.output=new Uint8Array(i),r.next_out=0,r.avail_out=i),s=Wr(r,o),s===ni&&n&&(s=Kr(r,n),s===ri?s=Wr(r,o):s===oi&&(s=ni));r.avail_in>0&&s===ii&&r.state.wrap>0&&0!==t[r.next_in];)Gr(r),s=Wr(r,o);switch(s){case si:case oi:case ni:case ai:return this.onEnd(s),this.ended=!0,!1}if(a=r.avail_out,r.next_out&&(0===r.avail_out||s===ii))if("string"===this.options.to){let t=er(r.output,r.next_out),e=r.next_out-t,n=tr(r.output,t);r.next_out=e,r.avail_out=i-e,e&&r.output.set(r.output.subarray(t,t+e),0),this.onData(n)}else this.onData(r.output.length===r.next_out?r.output:r.output.subarray(0,r.next_out));if(s!==ri||0!==a){if(s===ii)return s=Zr(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===r.avail_in)break}}return!0},hi.prototype.onData=function(t){this.chunks.push(t)},hi.prototype.onEnd=function(t){t===ri&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=He(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ui={Inflate:hi,inflate:li,inflateRaw:function(t,e){return(e=e||{}).raw=!0,li(t,e)},ungzip:li,constants:Zt};const{Deflate:ci,deflate:fi,deflateRaw:di,gzip:pi}=mr,{Inflate:mi,inflate:gi,inflateRaw:wi,ungzip:bi}=ui;var yi=fi,_i=mi,vi=gi;const xi=[137,80,78,71,13,10,26,10],ki=[];for(let t=0;t<256;t++){let e=t;for(let t=0;t<8;t++)1&e?e=3988292384^e>>>1:e>>>=1;ki[t]=e}const Ai=4294967295;function Mi(t,e){return(function(t,e,r){let i=4294967295;for(let t=0;t<r;t++)i=ki[255&(i^e[t])]^i>>>8;return i}(0,t,e)^Ai)>>>0}var Ei,Si,Ci,Ii;!function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.GREYSCALE=0]="GREYSCALE",t[t.TRUECOLOUR=2]="TRUECOLOUR",t[t.INDEXED_COLOUR=3]="INDEXED_COLOUR",t[t.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",t[t.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"}(Ei||(Ei={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.DEFLATE=0]="DEFLATE"}(Si||(Si={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.ADAPTIVE=0]="ADAPTIVE"}(Ci||(Ci={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.NO_INTERLACE=0]="NO_INTERLACE",t[t.ADAM7=1]="ADAM7"}(Ii||(Ii={}));const Di=new Uint8Array(0),Pi=new Uint16Array([255]),Bi=255===new Uint8Array(Pi.buffer)[0];class Ri extends ct{constructor(t,e={}){super(t);const{checkCrc:r=!1}=e;this._checkCrc=r,this._inflator=new _i,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._compressionMethod=Si.UNKNOWN,this._filterMethod=Ci.UNKNOWN,this._interlaceMethod=Ii.UNKNOWN,this._colorType=-1,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let t=0;t<xi.length;t++)if(this.readUint8()!==xi[t])throw new Error(`wrong PNG signature. Byte at ${t} should be ${xi[t]}.`)}decodeChunk(){const t=this.readUint32(),e=this.readChars(4),r=this.offset;switch(e){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(t);break;case"IDAT":this.decodeIDAT(t);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(t);break;case"tEXt":this.decodetEXt(t);break;case"pHYs":this.decodepHYs();break;default:this.skip(t)}if(this.offset-r!==t)throw new Error(`Length mismatch while decoding chunk ${e}`);if(this._checkCrc){const r=this.readUint32(),i=t+4,n=Mi(new Uint8Array(this.buffer,this.byteOffset+this.offset-i-4,i),i);if(n!==r)throw new Error(`CRC mismatch for chunk ${e}. Expected ${r}, found ${n}`)}else this.skip(4)}decodeIHDR(){const t=this._png;t.width=this.readUint32(),t.height=this.readUint32(),t.depth=function(t){if(1!==t&&2!==t&&4!==t&&8!==t&&16!==t)throw new Error(`invalid bit depth: ${t}`);return t}(this.readUint8());const e=this.readUint8();let r;switch(this._colorType=e,e){case Ei.GREYSCALE:r=1;break;case Ei.TRUECOLOUR:r=3;break;case Ei.INDEXED_COLOUR:r=1;break;case Ei.GREYSCALE_ALPHA:r=2;break;case Ei.TRUECOLOUR_ALPHA:r=4;break;default:throw new Error(`Unknown color type: ${e}`)}if(this._png.channels=r,this._compressionMethod=this.readUint8(),this._compressionMethod!==Si.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(t){if(t%3!=0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${t}`);const e=t/3;this._hasPalette=!0;const r=[];this._palette=r;for(let t=0;t<e;t++)r.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(t){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,t)),this.skip(t)}decodetRNS(t){if(3===this._colorType){if(t>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${t} vs ${this._palette.length})`);let e=0;for(;e<t;e++){const t=this.readByte();this._palette[e].push(t)}for(;e<this._palette.length;e++)this._palette[e].push(255)}}decodetEXt(t){let e,r="";for(;"\0"!==(e=this.readChar());)r+=e;this._png.text[r]=this.readChars(t-r.length-1)}decodepHYs(){const t=this.readUint32(),e=this.readUint32(),r=this.readByte();this._png.resolution={x:t,y:e,unit:r}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const t=this._inflator.result;if(this._filterMethod!==Ci.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod!==Ii.NO_INTERLACE)throw new Error(`Interlace method ${this._interlaceMethod} not supported`);this.decodeInterlaceNull(t)}decodeInterlaceNull(t){const e=this._png.height,r=this._png.channels*this._png.depth/8,i=this._png.width*r,n=new Uint8Array(this._png.height*i);let s,o,a=Di,h=0;for(let l=0;l<e;l++){switch(s=t.subarray(h+1,h+1+i),o=n.subarray(l*i,(l+1)*i),t[h]){case 0:Ti(s,o,i);break;case 1:Ui(s,o,i,r);break;case 2:Oi(s,o,a,i);break;case 3:Li(s,o,a,i,r);break;case 4:Fi(s,o,a,i,r);break;default:throw new Error(`Unsupported filter: ${t[h]}`)}a=o,h+=i+1}if(this._hasPalette&&(this._png.palette=this._palette),16===this._png.depth){const t=new Uint16Array(n.buffer);if(Bi)for(let e=0;e<t.length;e++)t[e]=(255&(l=t[e]))<<8|l>>8&255;this._png.data=t}else this._png.data=n;var l}}function Ti(t,e,r){for(let i=0;i<r;i++)e[i]=t[i]}function Ui(t,e,r,i){let n=0;for(;n<i;n++)e[n]=t[n];for(;n<r;n++)e[n]=t[n]+e[n-i]&255}function Oi(t,e,r,i){let n=0;if(0===r.length)for(;n<i;n++)e[n]=t[n];else for(;n<i;n++)e[n]=t[n]+r[n]&255}function Li(t,e,r,i,n){let s=0;if(0===r.length){for(;s<n;s++)e[s]=t[s];for(;s<i;s++)e[s]=t[s]+(e[s-n]>>1)&255}else{for(;s<n;s++)e[s]=t[s]+(r[s]>>1)&255;for(;s<i;s++)e[s]=t[s]+(e[s-n]+r[s]>>1)&255}}function Fi(t,e,r,i,n){let s=0;if(0===r.length){for(;s<n;s++)e[s]=t[s];for(;s<i;s++)e[s]=t[s]+e[s-n]&255}else{for(;s<n;s++)e[s]=t[s]+r[s]&255;for(;s<i;s++)e[s]=t[s]+Ni(e[s-n],r[s],r[s-n])&255}}function Ni(t,e,r){const i=t+e-r,n=Math.abs(i-t),s=Math.abs(i-e),o=Math.abs(i-r);return n<=s&&n<=o?t:s<=o?e:r}const zi={level:3};class ji extends ct{constructor(t,e={}){super(),this._colorType=Ei.UNKNOWN,this._zlibOptions=Object.assign({},zi,e.zlib),this._png=this._checkData(t),this.setBigEndian()}encode(){return this.encodeSignature(),this.encodeIHDR(),this.encodeData(),this.encodeIEND(),this.toArray()}encodeSignature(){this.writeBytes(xi)}encodeIHDR(){this.writeUint32(13),this.writeChars("IHDR"),this.writeUint32(this._png.width),this.writeUint32(this._png.height),this.writeByte(this._png.depth),this.writeByte(this._colorType),this.writeByte(Si.DEFLATE),this.writeByte(Ci.ADAPTIVE),this.writeByte(Ii.NO_INTERLACE),this.writeCrc(17)}encodeIEND(){this.writeUint32(0),this.writeChars("IEND"),this.writeCrc(4)}encodeIDAT(t){this.writeUint32(t.length),this.writeChars("IDAT"),this.writeBytes(t),this.writeCrc(t.length+4)}encodeData(){const{width:t,height:e,channels:r,depth:i,data:n}=this._png,s=r*t,o=(new ct).setBigEndian();let a=0;for(let t=0;t<e;t++)if(o.writeByte(0),8===i)a=Vi(n,o,s,a);else{if(16!==i)throw new Error("unreachable");a=qi(n,o,s,a)}const h=o.toArray(),l=yi(h,this._zlibOptions);this.encodeIDAT(l)}_checkData(t){const{colorType:e,channels:r,depth:i}=function(t){const{channels:e=4,depth:r=8}=t;if(4!==e&&3!==e&&2!==e&&1!==e)throw new RangeError(`unsupported number of channels: ${e}`);if(8!==r&&16!==r)throw new RangeError(`unsupported bit depth: ${r}`);const i={channels:e,depth:r,colorType:Ei.UNKNOWN};switch(e){case 4:i.colorType=Ei.TRUECOLOUR_ALPHA;break;case 3:i.colorType=Ei.TRUECOLOUR;break;case 1:i.colorType=Ei.GREYSCALE;break;case 2:i.colorType=Ei.GREYSCALE_ALPHA;break;default:throw new Error("unsupported number of channels")}return i}(t),n={width:Yi(t.width,"width"),height:Yi(t.height,"height"),channels:r,data:t.data,depth:i,text:{}};this._colorType=e;const s=n.width*n.height*r;if(n.data.length!==s)throw new RangeError(`wrong data size. Found ${n.data.length}, expected ${s}`);return n}writeCrc(t){this.writeUint32(Mi(new Uint8Array(this.buffer,this.byteOffset+this.offset-t,t),t))}}function Yi(t,e){if(Number.isInteger(t)&&t>0)return t;throw new TypeError(`${e} must be a positive integer`)}function Vi(t,e,r,i){for(let n=0;n<r;n++)e.writeByte(t[i++]);return i}function qi(t,e,r,i){for(let n=0;n<r;n++)e.writeUint16(t[i++]);return i}var Xi;!function(t){t[t.UNKNOWN=0]="UNKNOWN",t[t.METRE=1]="METRE"}(Xi||(Xi={}));var Gi=__webpack_require__(7870);let $i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Wi=new Uint8Array(256);for(let t=0;t<$i.length;t++)Wi[$i.charCodeAt(t)]=t;function Zi(t,e){return`data:${e};base64,${function(t){let e,r=t.length,i="";for(e=0;e<r;e+=3)i+=$i[t[e]>>2],i+=$i[(3&t[e])<<4|t[e+1]>>4],i+=$i[(15&t[e+1])<<2|t[e+2]>>6],i+=$i[63&t[e+2]];return r%3==2?i=`${i.substring(0,i.length-1)}=`:r%3==1&&(i=`${i.substring(0,i.length-2)}==`),i}(t)}`}const Hi=self.ImageData,Ki=self.Image;function Ji(t,e){let r=self.document.createElement("canvas");return r.width=t,r.height=e,r}function Qi(t,e={}){const r={width:t.width,height:t.height,data:t.getRGBAData()};return(0,Gi.encode)(r,e.quality).data}function tn(t,e){const r={width:t.width,height:t.height,channels:t.channels,depth:t.bitDepth,data:t.data};return 1!==r.depth&&32!==r.depth||(r.depth=8,r.channels=4,r.data=t.getRGBAData()),function(t,e){return new ji(t,e).encode()}(r,e)}const en={save(t,e={}){const{useCanvas:r=!1,encoder:i}=e;let{format:n}=e;if(!n){const e=/\.(?<format>[a-zA-Z]+)$/.exec(t);e&&(n=e.groups.format.toLowerCase())}if(!n)throw new Error("file format not provided");return new Promise(((t,e)=>{let s,o;switch(n.toLowerCase()){case"png":r?s=this.getCanvas().pngStream():o=tn(this,i);break;case"jpg":case"jpeg":r?s=this.getCanvas().jpegStream():o=Qi(this,i);break;case"bmp":o=(0,ht.encode)(this,i);break;default:throw new RangeError(`invalid output format: ${n}`)}if(s){let r=function(){throw new Error("createWriteStream does not exist in the browser")}();r.on("finish",t),r.on("error",e),s.pipe(r)}else o&&function(){throw new Error("writeFile does not exist in the browser")}()}))},toDataURL(t="image/png",e={}){"object"==typeof t&&(e=t,t="image/png");const{useCanvas:r=!1,encoder:i}=e;function n(e,r){return Zi(e(r,i),t)}return"image/bmp"===(t=function(t){return t.includes("/")||(t=`image/${t}`),t}(t))?n(ht.encode,this):"image/png"!==t||r?"image/jpeg"!==t||r?this.getCanvas().toDataURL(t):n(Qi,this):n(tn,this)},toBuffer(t={}){const{format:e="png",encoder:r}=t;switch(e.toLowerCase()){case"png":return tn(this,r);case"jpeg":case"jpg":return Qi(this,r);case"bmp":return(0,ht.encode)(this,r);default:throw new RangeError(`invalid output format: ${e}`)}},toBase64(t="image/png",e={}){if(e.async)return this.toDataURL(t,e).then((function(t){return t.substring(t.indexOf(",")+1)}));{const r=this.toDataURL(t,e);return r.substring(r.indexOf(",")+1)}},toBlob(t="image/png",e=.8){return ot(this.getCanvas(),t,e)},getCanvas(){const t=new Hi(this.getRGBAData({clamped:!0}),this.width,this.height);let e=Ji(this.width,this.height);return e.getContext("2d").putImageData(t,0,0),e}};var rn=__webpack_require__(2251),nn=__webpack_require__.n(rn);let sn={configurable:!0,enumerable:!1,get:void 0};const on="GREY",an="RGB",hn="HSL",ln="HSV",un="CMYK",cn="BINARY",fn="RGBA",dn={};dn.BINARY={components:1,alpha:0,bitDepth:1,colorModel:on},dn.GREYA={components:1,alpha:1,bitDepth:8,colorModel:on},dn.GREY={components:1,alpha:0,bitDepth:8,colorModel:on},dn[fn]={components:3,alpha:1,bitDepth:8,colorModel:an},dn.RGB={components:3,alpha:0,bitDepth:8,colorModel:an},dn.CMYK={components:4,alpha:0,bitDepth:8,colorModel:un},dn.CMYKA={components:4,alpha:1,bitDepth:8,colorModel:un};const pn=[1,8,16,32];var mn=__webpack_require__(9464),gn=__webpack_require__(9184),wn=__webpack_require__.n(gn);__webpack_require__(9798);const bn=new TextDecoder("utf-8"),yn=new TextEncoder;class _n{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0,n=t.byteLength-i;let s=i;(ArrayBuffer.isView(t)||t instanceof _n)&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this.lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),bn.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return yn.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}const vn={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},xn={};for(let t in vn)xn[vn[t]]=Number(t);const kn={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},An={};for(let t in kn)An[kn[t]]=Number(t);const Mn={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},En={};for(let t in Mn)En[Mn[t]]=Number(t);const Sn={standard:i,exif:e,gps:r};class Cn{constructor(t){if(!t)throw new Error("missing kind");this.data=new Uint8Array,this.fields=new Map,this.kind=t,this._hasMap=!1,this._map={}}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(Sn[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._hasMap){const t=Sn[this.kind].tagsById;for(let e of this.fields.keys())t[e]&&(this._map[t[e]]=this.fields.get(e));this._hasMap=!0}return this._map}}let In=new Map([[1,[1,Dn]],[2,[1,function(t,e){let r=[],i="";for(let n=0;n<e;n++){let e=String.fromCharCode(t.readUint8());"\0"===e?(r.push(i),i=""):i+=e}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();let r=new Uint16Array(e);for(let i=0;i<e;i++)r[i]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();let r=new Uint32Array(e);for(let i=0;i<e;i++)r[i]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();let r=new Array(e);for(let i=0;i<e;i++)r[i]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();let r=new Int8Array(e);for(let i=0;i<e;i++)r[i]=t.readInt8();return r}]],[7,[1,Dn]],[8,[2,function(t,e){if(1===e)return t.readInt16();let r=new Int16Array(e);for(let i=0;i<e;i++)r[i]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();let r=new Int32Array(e);for(let i=0;i<e;i++)r[i]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();let r=new Array(e);for(let i=0;i<e;i++)r[i]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();let r=new Float32Array(e);for(let i=0;i<e;i++)r[i]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();let r=new Float64Array(e);for(let i=0;i<e;i++)r[i]=t.readFloat64();return r}]]]);function Dn(t,e){if(1===e)return t.readUint8();let r=new Uint8Array(e);for(let i=0;i<e;i++)r[i]=t.readUint8();return r}const Pn=[];for(let t=0;t<256;t++)Pn.push([t]);const Bn=[0];for(let t=256;t<4096;t++)Pn.push(Bn);class Rn{constructor(t){this.stripArray=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);const e=new Map;for(let t=0;t<256;t++)e.set(t,[t]);this.currentBit=0,this.tableLength=258,this.currentBitLength=9,this.outData=new _n(t.byteLength)}decode(){let t=0,e=0;for(;257!==(t=this.getNextCode());)if(256===t){if(this.initializeTable(),t=this.getNextCode(),257===t)break;this.writeString(this.stringFromCode(t)),e=t}else if(this.isInTable(t))this.writeString(this.stringFromCode(t)),this.addStringToTable(this.stringFromCode(e).concat(this.stringFromCode(t)[0])),e=t;else{const r=this.stringFromCode(e).concat(this.stringFromCode(e)[0]);this.writeString(r),this.addStringToTable(r),e=t}const r=this.outData.toArray();return new DataView(r.buffer,r.byteOffset,r.byteLength)}initializeTable(){this.tableLength=258,this.currentBitLength=9}writeString(t){this.outData.writeBytes(t)}stringFromCode(t){return Pn[t]}isInTable(t){return t<this.tableLength}addStringToTable(t){Pn[this.tableLength++]=t,this.tableLength+1===2**this.currentBitLength&&this.currentBitLength++}getNextCode(){const t=this.currentBit%8,e=this.currentBit>>>3,r=8-t,i=this.currentBit+this.currentBitLength-8*(e+1);let n=8*(e+2)-(this.currentBit+this.currentBitLength);const s=8*(e+2)-this.currentBit;n=Math.max(0,n);let o=this.stripArray[e]&2**(8-t)-1;o<<=this.currentBitLength-r;let a=o;if(e+1<this.stripArray.length){let t=this.stripArray[e+1]>>>n;t<<=Math.max(0,this.currentBitLength-s),a+=t}if(i>8&&e+2<this.stripArray.length){const t=8*(e+3)-(this.currentBit+this.currentBitLength);a+=this.stripArray[e+2]>>>t}return this.currentBit+=this.currentBitLength,a}}function Tn(t){return new Rn(t).decode()}const Un=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;class On extends Cn{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){let t=new Date,e=Un.exec(this.dateTime);if(null===e)throw new Error(`invalid dateTime: ${this.dateTime}`);return t.setFullYear(Number(e[1]),Number(e[2])-1,Number(e[3])),t.setHours(Number(e[4]),Number(e[5]),Number(e[6])),t}get newSubfileType(){return this.get("NewSubfileType")}get imageWidth(){return this.get("ImageWidth")}get imageLength(){return this.get("ImageLength")}get bitsPerSample(){const t=this.get("BitsPerSample");return t&&"number"!=typeof t?t[0]:t}get alpha(){const t=this.extraSamples;return!!t&&0!==t[0]}get associatedAlpha(){const t=this.extraSamples;return!!t&&1===t[0]}get extraSamples(){return Ln(this.get("ExtraSamples"))}get compression(){return this.get("Compression")||1}get type(){return this.get("PhotometricInterpretation")}get fillOrder(){return this.get("FillOrder")||1}get documentName(){return this.get("DocumentName")}get imageDescription(){return this.get("ImageDescription")}get stripOffsets(){return Ln(this.get("StripOffsets"))}get orientation(){return this.get("Orientation")}get samplesPerPixel(){return this.get("SamplesPerPixel")||1}get rowsPerStrip(){return this.get("RowsPerStrip")}get stripByteCounts(){return Ln(this.get("StripByteCounts"))}get minSampleValue(){return this.get("MinSampleValue")||0}get maxSampleValue(){return this.get("MaxSampleValue")||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get("XResolution")}get yResolution(){return this.get("YResolution")}get planarConfiguration(){return this.get("PlanarConfiguration")||1}get resolutionUnit(){return this.get("ResolutionUnit")||2}get dateTime(){return this.get("DateTime")}get predictor(){return this.get("Predictor")||1}get sampleFormat(){return this.get("SampleFormat")||1}get sMinSampleValue(){return this.get("SMinSampleValue")||this.minSampleValue}get sMaxSampleValue(){return this.get("SMaxSampleValue")||this.maxSampleValue}get palette(){const t=2**this.bitsPerSample,e=this.get("ColorMap");if(!e)return;if(e.length!==3*t)throw new Error(`ColorMap size must be ${t}`);const r=[];for(let i=0;i<t;i++)r.push([e[i],e[i+t],e[i+2*t]]);return r}}function Ln(t){return"number"==typeof t?[t]:t}function Fn(t){const e=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),r=vi(e);return new DataView(r.buffer,r.byteOffset,r.byteLength)}const Nn={ignoreImageData:!1,onlyFirst:!1};class zn extends _n{constructor(t){super(t),this._nextIFD=0}get isMultiPage(){let t=0;for(this.decodeHeader();this._nextIFD;)if(t++,this.decodeIFD({ignoreImageData:!0},!0),2===t)return!0;if(1===t)return!1;throw jn("ifdCount",t)}get pageCount(){let t=0;for(this.decodeHeader();this._nextIFD;)t++,this.decodeIFD({ignoreImageData:!0},!0);if(t>0)return t;throw jn("ifdCount",t)}decode(t={}){t=Object.assign({},Nn,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t,!0)),t.onlyFirst)return[e[0]];return e}decodeHeader(){const t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error(`invalid byte order: 0x${t.toString(16)}`);this.setBigEndian()}if(42!==this.readUint16())throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t,e){let r;if(this.seek(this._nextIFD),e)r=new On;else{if(!t.kind)throw new Error("kind is missing");r=new Cn(t.kind)}const i=this.readUint16();for(let t=0;t<i;t++)this.decodeIFDEntry(r);if(!t.ignoreImageData){if(!(r instanceof On))throw new Error("must be a tiff ifd");this.decodeImageData(r)}return this._nextIFD=this.readUint32(),r}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),i=this.readUint16(),n=this.readUint32();if(i<1||i>12)return void this.skip(4);const s=function(t,e){const r=In.get(t);if(!r)throw new Error(`type not found: ${t}`);return r[0]*e}(i,n);s>4&&this.seek(this.readUint32());const o=function(t,e,r){const i=In.get(e);if(!i)throw new Error(`type not found: ${e}`);return i[1](t,r)}(this,i,n);if(t.fields.set(r,o),34665===r||34853===r){let e=this.offset,i="exif";34665===r?i="exif":34853===r&&(i="gps"),this._nextIFD=o,t[i]=this.decodeIFD({kind:i,ignoreImageData:!0},!1),this.offset=e}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;if(e&&1!==e)throw jn("orientation",e);switch(t.type){case 0:case 1:case 2:case 3:this.readStripData(t);break;default:throw jn("image type",t.type)}if(this.applyPredictor(t),this.convertAlpha(t),0===t.type){const e=t.bitsPerSample,r=Math.pow(2,e)-1;for(let e=0;e<t.data.length;e++)t.data[e]=r-t.data[e]}}readStripData(t){const e=t.width,r=t.height,i=t.bitsPerSample,n=t.sampleFormat,s=e*r*t.samplesPerPixel,o=function(t,e,r){if(8===e)return new Uint8Array(t);if(16===e)return new Uint16Array(t);if(32===e&&3===r)return new Float32Array(t);throw jn("bit depth / sample format",`${e} / ${r}`)}(s,i,n),a=t.rowsPerStrip*e*t.samplesPerPixel,h=t.stripOffsets,l=t.stripByteCounts;let u=s,c=0;for(let e=0;e<h.length;e++){let r=new DataView(this.buffer,h[e],l[e]),s=u>a?a:u;u-=s;let f=r;switch(t.compression){case 1:break;case 5:f=Tn(r);break;case 8:f=Fn(r);break;case 2:throw jn("Compression","CCITT Group 3");case 32773:throw jn("Compression","PackBits");default:throw jn("Compression",t.compression)}c=this.fillUncompressed(i,n,o,f,c,s)}t.data=o}fillUncompressed(t,e,r,i,n,s){if(8===t)return function(t,e,r,i){for(let n=0;n<i;n++)t[r++]=e.getUint8(n);return r}(r,i,n,s);if(16===t)return function(t,e,r,i,n){for(let s=0;s<2*i;s+=2)t[r++]=e.getUint16(s,n);return r}(r,i,n,s,this.isLittleEndian());if(32===t&&3===e)return function(t,e,r,i,n){for(let s=0;s<4*i;s+=4)t[r++]=e.getFloat32(s,n);return r}(r,i,n,s,this.isLittleEndian());throw jn("bitDepth",t)}applyPredictor(t){const e=t.bitsPerSample;switch(t.predictor){case 1:break;case 2:if(8===e)!function(t,e,r){let i=0;for(;i<t.length;){for(let n=r;n<e*r;n+=r)for(let e=0;e<r;e++)t[i+n+e]=t[i+n+e]+t[i+n-(r-e)]&255;i+=e*r}}(t.data,t.width,t.components);else{if(16!==e)throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${e}`);!function(t,e,r){let i=0;for(;i<t.length;){for(let n=r;n<e*r;n+=r)for(let e=0;e<r;e++)t[i+n+e]=t[i+n+e]+t[i+n-(r-e)]&65535;i+=e*r}}(t.data,t.width,t.components)}break;default:throw new Error(`invalid predictor: ${t.predictor}`)}}convertAlpha(t){if(t.alpha&&t.associatedAlpha){const{data:e,components:r,maxSampleValue:i}=t;for(let t=0;t<e.length;t+=r){const n=e[t+r-1];for(let s=0;s<r-1;s++)e[t+s]=Math.round(e[t+s]*i/n)}}}}function jn(t,e){return new Error(`Unsupported ${t}: ${e}`)}function Yn(t={}){let{algorithm:e="matchToPrevious",ignoreBorder:r=[0,0]}=t;this.checkProcessable("matchAndCrop",{bitDepth:[8,16]});let i="matchToPrevious"===e,n=this[0],s=[];s[0]={position:[0,0],image:this[0]};let o=[0,0];for(let t=1;t<this.length;t++){let e=n.getBestMatch(this[t],{border:r});s[t]={position:[e[0]+o[0],e[1]+o[1]],image:this[t]},i&&(o[0]+=e[0],o[1]+=e[1],n=this[t])}let a=0,h=0,l=0,u=0;for(let t=0;t<s.length;t++){let e=s[t];e.position[0]>a&&(a=e.position[0]),e.position[0]<h&&(h=e.position[0]),e.position[1]>l&&(l=e.position[1]),e.position[1]<u&&(u=e.position[1])}h=0-h,u=0-u;for(let t=0;t<s.length;t++){let e=s[t];e.crop=e.image.crop({x:a-e.position[0],y:l-e.position[1],width:n.width-h-a,height:n.height-u-l})}let c=[];for(let t=0;t<s.length;t++)c[t]=s[t].crop;return new ts(c)}function Vn(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].min;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.min(t[r],this[e].min[r]);return t}function qn(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].max;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.max(t[r],this[e].max[r]);return t}function Xn(t){let e=t.reduce(((t,e)=>t+e));if(0===e)throw new Error("unreachable");let r,i=0,n=0,s=e/2;for(;;){if(t[i]>0){if(void 0!==r)return(r+i)/2;if(n+=t[i],n>s)return i;n===s&&(r=i)}i++}}function Gn(t){let e=0,r=0;for(let i=0;i<t.length;i++)e+=t[i],r+=t[i]*i;return 0===e?0:r/e}function $n(){this.checkProcessable("median",{bitDepth:[8,16]});let t=this.getHistograms({maxSlots:this[0].maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Xn(i)}return e}function Wn(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistogram(t);for(let r=1;r<this.length;r++){let i=this[r].getHistogram(t);for(let t=0;t<e.length;t++)e[t]+=i[t]}return e}function Zn(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistograms(t),r=e[0].length;for(let i=1;i<this.length;i++){let n=this[i].getHistograms(t);for(let t=0;t<e.length;t++)for(let i=0;i<r;i++)e[t][i]+=n[t][i]}return e}function Hn(){this.checkProcessable("averageImage",{bitDepth:[8,16]});let t=new Uint32Array(this[0].data.length);for(let e=0;e<this.length;e++){let r=this[e];for(let e=0;e<this[0].data.length;e++)t[e]+=r.data[e]}let e=il.createFrom(this[0]),r=e.data;for(let e=0;e<this[0].data.length;e++)r[e]=t[e]/this.length;return e}function Kn(){this.checkProcessable("max",{bitDepth:[8,16]});let t=il.createFrom(this[0]);t.data.fill(0);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.max(e.data[r],t.data[r]);return t}function Jn(){this.checkProcessable("max",{bitDepth:[8,16]});let t=il.createFrom(this[0]);t.data.fill(t.maxValue);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.min(e.data[r],t.data[r]);return t}let Qn={configurable:!0,enumerable:!1,get:void 0};class ts extends Array{constructor(t){if(Array.isArray(t)){super(t.length);for(let e=0;e<t.length;e++)this[e]=t[e]}else"number"==typeof t?super(t):super();this.computed=null}static load(t){return Promise.all(t.map(il.load)).then((t=>new ts(t)))}static extendMethod(t,e,r={}){let{inPlace:i=!1,returnThis:n=!0,partialArgs:s=[]}=r;return ts.prototype[t]=i?function(...t){this.computed=null;let r=e.apply(this,[...s,...t]);return n?this:r}:function(...t){return e.apply(this,[...s,...t])},ts}static extendProperty(t,e,r={}){let{partialArgs:i=[]}=r;return Qn.get=function(){if(null===this.computed)this.computed={};else if(nn()(t,this.computed))return this.computed[t];let r=e.apply(this,i);return this.computed[t]=r,r},Object.defineProperty(ts.prototype,t,Qn),ts}checkProcessable(t,e={}){if("string"!=typeof t)throw new TypeError("checkProcessable requires as first parameter the processName (a string)");if(0===this.size)throw new TypeError(`The process: ${t} can not be applied on an empty stack`);this[0].checkProcessable(t,e);for(let r=1;r<this.length;r++){if((void 0===e.sameSize||e.sameSize)&&this[0].width!==this[r].width)throw new TypeError(`The process: ${t} can not be applied if width is not identical in all images`);if((void 0===e.sameSize||e.sameSize)&&this[0].height!==this[r].height)throw new TypeError(`The process: ${t} can not be applied if height is not identical in all images`);if((void 0===e.sameAlpha||e.sameAlpha)&&this[0].alpha!==this[r].alpha)throw new TypeError(`The process: ${t} can not be applied if alpha is not identical in all images`);if((void 0===e.sameBitDepth||e.sameBitDepth)&&this[0].bitDepth!==this[r].bitDepth)throw new TypeError(`The process: ${t} can not be applied if bitDepth is not identical in all images`);if((void 0===e.sameColorModel||e.sameColorModel)&&this[0].colorModel!==this[r].colorModel)throw new TypeError(`The process: ${t} can not be applied if colorModel is not identical in all images`);if((void 0===e.sameNumberChannels||e.sameNumberChannels)&&this[0].channels!==this[r].channels)throw new TypeError(`The process: ${t} can not be applied if channels is not identical in all images`)}}}Array[Symbol.species]||(ts.prototype.map=function(t,e){if("function"!=typeof t)throw new TypeError(`${t} is not a function`);let r=new ts(this.length);for(let i=0;i<this.length;i++)r[i]=t.call(e,this[i],i,this);return r}),function(t){t.extendMethod("matchAndCrop",Yn),t.extendMethod("getMin",Vn),t.extendMethod("getMax",qn),t.extendMethod("getMedian",$n),t.extendMethod("getHistogram",Wn),t.extendMethod("getHistograms",Zn),t.extendMethod("getAverage",Hn),t.extendMethod("getAverageImage",Hn),t.extendMethod("getMaxImage",Kn),t.extendMethod("getMinImage",Jn)}(ts);const es=/^data:[a-z]+\/(?:[a-z]+);base64,/;function rs(t,e){const r=wn()(t);if(r)switch(r.mime){case"image/png":return function(t){const e=function(t,e){return new Ri(t,void 0).decode()}(t);let r,i=e.channels,n=0;return 2===i||4===i?(r=i-1,n=1):r=i,e.palette?function(t){const e=t.width*t.height,r=t.palette[0].length,i=new Uint8Array(e*r),n=8/t.depth,s=t.depth<8?n:1,o=parseInt("1".repeat(t.depth),2),a=4===r;let h=0;for(let r=0;r<e;r++){const e=Math.floor(r/s);let l=t.data[e];t.depth<8&&(l=l>>>t.depth*(n-1-r%n)&o);const u=t.palette[l];i[h++]=u[0],i[h++]=u[1],i[h++]=u[2],a&&(i[h++]=u[3])}return new il(t.width,t.height,i,{components:3,alpha:a,bitDepth:8})}(e):new il(e.width,e.height,e.data,{components:r,alpha:n,bitDepth:e.depth})}(t);case"image/jpeg":return function(t){const e=(0,mn.decode)(t);let r;e.exif&&(r=is(e.exif));const i=(0,Gi.decode)(t,{useTArray:!0,maxMemoryUsageInMB:1024});return new il(i.width,i.height,i.data,{meta:r})}(t);case"image/tiff":return function(t){let e=function(t,e){return new zn(t).decode(void 0)}(t);return 1===e.length?ns(e[0]):new ts(e.map(ns))}(t);default:return ss(i(r.mime))}return ss(i("application/octet-stream"));function i(r){return e||Zi(t,r)}}function is(t){const e={tiff:{fields:t.fields,tags:t.map}};return t.exif&&(e.exif=t.exif),t.gps&&(e.gps=t.gps),e}function ns(t){if(3===t.type){const e=new Uint16Array(3*t.width*t.height),r=t.palette;let i=0;for(let n=0;n<t.data.length;n++){const s=r[t.data[n]];e[i++]=s[0],e[i++]=s[1],e[i++]=s[2]}return new il(t.width,t.height,e,{components:3,alpha:t.alpha,colorModel:an,bitDepth:16,meta:is(t)})}return new il(t.width,t.height,t.data,{components:2===t.type?3:1,alpha:t.alpha,colorModel:2===t.type?an:on,bitDepth:t.bitsPerSample.length?t.bitsPerSample[0]:t.bitsPerSample,meta:is(t)})}function ss(t,e){return e=e||{},new Promise((function(r,i){let n=new Ki;n.onload=function(){let t=n.width,i=n.height,s=Ji(t,i).getContext("2d");s.drawImage(n,0,0,t,i);let o=s.getImageData(0,0,t,i).data;r(new il(t,i,o,e))},n.onerror=function(){i(new Error(`Could not load ${t}`))},n.src=t}))}const os={getValueXY(t,e,r){return this.data[(e*this.width+t)*this.channels+r]},setValueXY(t,e,r,i){return this.data[(e*this.width+t)*this.channels+r]=i,this.computed=null,this},getValue(t,e){return this.data[t*this.channels+e]},setValue(t,e,r){return this.data[t*this.channels+e]=r,this.computed=null,this},getPixelXY(t,e){return this.getPixel(e*this.width+t)},setPixelXY(t,e,r){return this.setPixel(e*this.width+t,r)},getPixel(t){const e=new Array(this.channels),r=t*this.channels;for(let t=0;t<this.channels;t++)e[t]=this.data[r+t];return e},setPixel(t,e){const r=t*this.channels;for(let t=0;t<e.length;t++)this.data[r+t]=e[t];return this.computed=null,this}};function as(t){return{width:t.width,height:t.height,components:t.components,alpha:t.alpha,colorModel:t.colorModel,bitDepth:t.bitDepth}}function hs(t,e,r,i={}){const{out:n}=e;if(void 0===n)return i.copy?t.clone():il.createFrom(t,r);{if(!il.isImage(n))throw new TypeError("out must be an Image object");const e=Object.assign(as(t),r);for(const t in e)if(n[t]!==e[t])throw new RangeError(`cannot use out. Its ${t} must be "${e[t]}" (found "${n[t]}")`);return n}}function ls(t,e,r){if(void 0!==e.inPlace&&"boolean"!=typeof e.inPlace)throw new TypeError("inPlace option must be a boolean");if(e.inPlace){if(void 0!==e.out)throw new TypeError("out option must not be set if inPlace option is true");return t}return hs(t,e,null,r)}function us(t={}){this.checkProcessable("abs",{bitDepth:[32]});const e=ls(this,t);return function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=Math.abs(t.data[r])}(this,e),e}function cs(t={}){this.checkProcessable("invert",{bitDepth:[1,8,16]});const e=ls(this,t);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=~t.data[r]}(this,e):(function(t,e){for(let r=0;r<t.data.length;r+=t.channels)for(let i=0;i<t.components;i++)e.data[r+i]=t.maxValue-t.data[r+i]}(this,e),this!==e&&function(t,e){if(1===t.alpha&&1===e.alpha)for(let r=0;r<t.size;r++)e.data[r*e.channels+e.components]=t.data[r*t.channels+t.components]}(this,e)),e}function fs(){this.checkProcessable("flipX",{bitDepth:[8,16]});for(let t=0;t<this.height;t++){let e=t*this.width*this.channels;for(let t=0;t<Math.floor(this.width/2);t++){let r=t*this.channels+e,i=(this.width-t-1)*this.channels+e;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[i+t],this.data[i+t]=e}}}return this}function ds(){this.checkProcessable("flipY",{bitDepth:[8,16]});for(let t=0;t<Math.floor(this.height/2);t++)for(let e=0;e<this.width;e++){let r=e*this.channels+t*this.width*this.channels,i=e*this.channels+(this.height-1-t)*this.channels*this.width;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[i+t],this.data[i+t]=e}}return this}function ps(t={}){const{radius:e=1}=t;if(e<1)throw new Error("radius must be greater than 1");const r=2*e+1,i=new Array(r);for(let t=0;t<r;t++){i[t]=new Array(r);for(let e=0;e<r;e++)i[t][e]=1/(r*r)}return this.convolution(i)}var ms=__webpack_require__(5520),gs=__webpack_require__.n(ms);function ws(t,e={}){let{channels:r,allowAlpha:i,defaultAlpha:n}=e;return"boolean"!=typeof i&&(i=!0),void 0===r?function(t,e){let r=e?t.channels:t.components,i=new Array(r);for(let t=0;t<r;t++)i[t]=t;return i}(t,n):function(t,e,r){Array.isArray(e)||(e=[e]);for(let i=0;i<e.length;i++)e[i]=bs(t,e[i],r);return e}(t,r,i)}function bs(t,e,r=!0){if(void 0===e)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if("string"==typeof e){switch(t.colorModel){case on:break;case an:if("rgb".includes(e))switch(e){case"r":e=0;break;case"g":e=1;break;case"b":e=2}break;case hn:if("hsl".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"l":e=2}break;case ln:if("hsv".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"v":e=2}break;case un:if("cmyk".includes(e))switch(e){case"c":e=0;break;case"m":e=1;break;case"y":e=2;break;case"k":e=3}break;default:throw new Error(`Unexpected color model: ${t.colorModel}`)}if("a"===e){if(!t.alpha)throw new Error("validateChannel : the image does not contain alpha channel");e=t.components}if("string"==typeof e)throw new Error(`validateChannel : undefined channel: ${e}`)}if(e>=t.channels)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if(!r&&e>=t.components)throw new RangeError("validateChannel : alpha channel may not be selected");return e}function ys(t={}){let{radius:e=1,border:r="copy",channels:i}=t;if(this.checkProcessable("medianFilter",{bitDepth:[8,16]}),e<1)throw new Error("radius must be greater than 0");i=ws(this,i);let n=e,s=e,o=il.createFrom(this),a=new Array((2*n+1)*(2*s+1));for(let t=0;t<i.length;t++){let e=i[t];for(let t=s;t<this.height-s;t++)for(let r=n;r<this.width-n;r++){let i=0;for(let o=-s;o<=s;o++)for(let s=-n;s<=n;s++){let n=((t+o)*this.width+r+s)*this.channels+e;a[i++]=this.data[n]}let h=(t*this.width+r)*this.channels+e;o.data[h]=gs()(a)}}if(this.alpha&&!i.includes(this.channels))for(let t=this.components;t<this.data.length;t+=this.channels)o.data[t]=this.data[t];return o.setBorder({size:[n,s],algorithm:r}),o}function _s(t={}){let{radius:e=1,sigma:r,channels:i,border:n="copy"}=t;this.checkProcessable("gaussian",{bitDepth:[8,16]});const s=function(t,e){const r=2*t+1,i=new Array(r),n=e||.3*(.5*(r-1)-1)+.8,s=-.5/(n*n);let o=0;for(let e=0;e<r;e++){const r=e-t,n=Math.exp(s*r*r);i[e]=n,o+=n}for(let t=0;t<r;t++)i[t]/=o;return i}(e,r);return this.convolution([s,s],{border:n,channels:i,algorithm:"separable"})}const vs=[[-1,0,1],[-2,0,2],[-1,0,1]],xs=[[-1,-2,-1],[0,0,0],[1,2,1]],ks=[[3,0,-3],[10,0,-10],[3,0,-3]],As=[[3,10,3],[0,0,0],[-3,-10,-3]];var Ms=__webpack_require__(414),Es=__webpack_require__(8336),Ss=__webpack_require__.n(Es);function Cs(t,e){return Math.round(Math.min(Math.max(t,0),e.maxValue))}function Is(t,e,r){if(void 0===r){const i=t.length+e.length-1;r=new Array(i)}!function(t){for(var e=0;e<t.length;e++)t[e]=0}(r);for(var i=0;i<t.length;i++)for(var n=0;n<e.length;n++)r[i+n]+=t[i]*e[n];return r}function Ds(t,e,r,i){const n=new Array(t.length);let s,o,a,h;h=e[1],a=(h.length-1)/2,o=new Array(r+h.length-1),s=new Array(r);for(let e=0;e<i;e++){for(let i=0;i<r;i++)s[i]=t[e*r+i];Is(s,h,o);for(let t=0;t<r;t++)n[e*r+t]=o[a+t]}h=e[0],a=(h.length-1)/2,o=new Array(i+h.length-1),s=new Array(i);for(let t=0;t<r;t++){for(let e=0;e<i;e++)s[e]=n[e*r+t];Is(s,h,o);for(let e=0;e<i;e++)n[e*r+t]=o[a+e]}return n}__webpack_require__(9645),__webpack_require__(995);var Ps=__webpack_require__(6943);function Bs(t,e={}){let{channels:r,bitDepth:i,normalize:n=!1,divisor:s=1,border:o="copy",algorithm:a="auto"}=e,h={};i&&(h.bitDepth=i);let l,u,c=il.createFrom(this,h);if(r=ws(this,r),"separable"!==a)({kernel:t}=function(t){let e,r;if(!Array.isArray(t))throw new Error(`validateKernel: Invalid Kernel: ${t}`);if(Array.isArray(t[0])){if(0==(1&t.length)||0==(1&t[0].length))throw new RangeError("validateKernel: Kernel rows and columns should be odd numbers");e=Math.floor(t.length/2),r=Math.floor(t[0].length/2)}else{let i=Math.sqrt(t.length);if(!Ss()(i))throw new RangeError("validateKernel: Kernel array should be a square");r=e=Math.floor(Math.sqrt(t.length)/2);let n=new Array(i);for(let e=0;e<i;e++){n[e]=new Array(i);for(let r=0;r<i;r++)n[e][r]=t[e*i+r]}t=n}return{kernel:t,kWidth:r,kHeight:e}}(t));else if(!Array.isArray(t)||2!==t.length)throw new RangeError("separable convolution requires two arrays of numbers to represent the kernel");if("auto"===a){let e=function(t){const e=new Ps.Z(t,{autoTranspose:!0});if(1!==e.rank)return null;const r=Math.sqrt(e.s[0]);return[e.U.to2DArray().map((t=>t[0]*r)),e.V.to2DArray().map((t=>t[0]*r))]}(t);null!==e?(a="separable",t=e):a=(t.length>9||t[0].length>9)&&this.width<=4096&&this.height<=4096?"fft":"direct"}"separable"===a?(l=Math.floor(t[0].length/2),u=Math.floor(t[1].length/2)):(l=Math.floor(t.length/2),u=Math.floor(t[0].length/2));let f,d,p,m,g,w,b=c.isClamped,y=new Array(this.height*this.width);for(m=0;m<r.length;m++){for(g=r[m],p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,y[f]=this.data[f*this.channels+g];if("direct"===a)w=(0,Ms.direct)(y,t,{rows:this.height,cols:this.width,normalize:n,divisor:s});else if("separable"===a){if(w=Ds(y,t,this.width,this.height),n){s=0;for(let e=0;e<t[0].length;e++)for(let r=0;r<t[1].length;r++)s+=t[0][e]*t[1][r]}if(1!==s)for(let t=0;t<w.length;t++)w[t]/=s}else w=(0,Ms.fft)(y,t,{rows:this.height,cols:this.width,normalize:n,divisor:s});for(p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,c.data[f*this.channels+g]=b?Cs(w[f],c):w[f]}if(this.alpha&&!r.includes(this.channels))for(d=this.components;d<this.data.length;d+=this.channels)c.data[d]=this.data[d];return"periodic"!==o&&c.setBorder({size:[u,l],algorithm:o}),c}function Rs(t={}){let{direction:e="xy",border:r="copy",kernelX:i,kernelY:n,channels:s,bitDepth:o=this.bitDepth}=t;switch(this.checkProcessable("gradientFilter",{bitDepth:[8,16]}),e){case"x":if(!i)throw new Error("kernelX option is missing");return Bs.call(this,i,{channels:s,border:r,bitDepth:o});case"y":if(!n)throw new Error("kernelY option is missing");return Bs.call(this,n,{channels:s,border:r,bitDepth:o});case"xy":{if(!i)throw new Error("kernelX option is missing");if(!n)throw new Error("kernelY option is missing");const t=Bs.call(this,i,{channels:s,border:r,bitDepth:32}),e=Bs.call(this,n,{channels:s,border:r,bitDepth:32});return t.hypotenuse(e,{bitDepth:o,channels:s})}default:throw new Error(`Unknown parameter direction: ${e}`)}}function Ts(t){return Rs.call(this,Object.assign({},t,{kernelX:vs,kernelY:xs}))}function Us(t){return Rs.call(this,Object.assign({},t,{kernelX:ks,kernelY:As}))}var Os=__webpack_require__(2664),Ls=__webpack_require__.n(Os);function Fs(t={}){let{algorithm:e="range",channels:r,min:i=this.min,max:n=this.max}=t;if(this.checkProcessable("level",{bitDepth:[8,16,32]}),r=ws(this,{channels:r}),r.length!==this.channel&&(Array.isArray(i)&&i.length===this.channels&&(i=i.filter(((t,e)=>r.includes(e)))),Array.isArray(n)&&n.length===this.channels&&(n=n.filter(((t,e)=>r.includes(e))))),"range"!==e)throw new Error(`level: algorithm not implement: ${e}`);return i<0&&(i=0),n>this.maxValue&&(n=this.maxValue),Array.isArray(i)||(i=Ls()(r.length,i)),Array.isArray(n)||(n=Ls()(r.length,n)),function(t,e,r,i){let n=1e-5,s=new Array(i.length);for(let o=0;o<i.length;o++)0===e[o]&&r[o]===t.maxValue||r[o]===e[o]?s[o]=0:s[o]=(t.maxValue+1-n)/(r[o]-e[o]),e[o]+=.499995/s[o];for(let r=0;r<i.length;r++){let n=i[r];if(0!==s[r])for(let i=0;i<t.data.length;i+=t.channels)t.data[i+n]=Math.min(Math.max(0,(t.data[i+n]-e[r])*s[r]+.5|0),t.maxValue)}}(this,i,n,r),this}var Ns=__webpack_require__(7811),zs=__webpack_require__.n(Ns);function js(t){if(isNaN(t)){if(t instanceof il)return t.data;if(!zs()(t))throw new Error("checkNumberArray: the value should be either a number, array or Image");return t}if(t<=0)throw new Error("checkNumberArray: the value must be greater than 0");return t}function Ys(t,e={}){let{channels:r}=e;if(this.checkProcessable("add",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("add: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]+t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]+t>>0)}return this}function Vs(t,e={}){let{channels:r}=e;if(this.checkProcessable("subtract",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("subtract: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]-t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,this.data[e+i]-t>>0)}return this}function qs(t,e={}){let{channels:r,absolute:i=!1}=e;if(this.checkProcessable("subtractImage",{bitDepth:[8,16]}),this.width!==t.width||this.height!==t.height)throw new Error("subtractImage: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("subtractImage: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("subtractImage: both images must have the same number of channels");let n=this.clone();r=ws(this,{channels:r});for(let e=0;e<r.length;e++)for(let s=r[e];s<this.data.length;s+=this.channels){let e=this.data[s]-t.data[s];n.data[s]=i?Math.abs(e):Math.max(e,0)}return n}function Xs(t,e={}){let{bitDepth:r=this.bitDepth,channels:i}=e;if(this.checkProcessable("hypotenuse",{bitDepth:[8,16,32]}),this.width!==t.width||this.height!==t.height)throw new Error("hypotenuse: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("hypotenuse: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("hypotenuse: both images must have the same number of channels");let n=il.createFrom(this,{bitDepth:r});i=ws(this,{channels:i});let s=n.isClamped;for(let e=0;e<i.length;e++)for(let r=i[e];r<this.data.length;r+=this.channels){let e=Math.hypot(this.data[r],t.data[r]);n.data[r]=s?Math.min(Math.max(Math.round(e),0),n.maxValue):e}return n}function Gs(t,e={}){let{channels:r}=e;if(this.checkProcessable("multiply",{bitDepth:[8,16]}),t<=0)throw new Error("multiply: the value must be greater than 0");if(r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("multiply: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]*t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]*t>>0)}return this}function $s(t,e={}){let{channels:r}=e;if(this.checkProcessable("divide",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("divide: the: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]/t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]/t>>0)}return this}var Ws=__webpack_require__(7531);class Zs{constructor(){if(new.target===Zs)throw new Error("BaseRegression must be subclassed")}predict(t){if("number"==typeof t)return this._predict(t);if((0,Ws.Z)(t)){const e=[];for(let r=0;r<t.length;r++)e.push(this._predict(t[r]));return e}throw new TypeError("x must be a number or array")}_predict(){throw new Error("_predict must be implemented")}train(){}toString(){return""}toLaTeX(){return""}score(t,e){if(!(0,Ws.Z)(t)||!(0,Ws.Z)(e)||t.length!==e.length)throw new Error("x and y must be arrays of the same length");const r=t.length,i=new Array(r);for(let e=0;e<r;e++)i[e]=this._predict(t[e]);let n=0,s=0,o=0,a=0,h=0,l=0,u=0;for(let t=0;t<r;t++)n+=i[t],s+=e[t],h+=i[t]*i[t],l+=e[t]*e[t],u+=i[t]*e[t],0!==e[t]&&(o+=(e[t]-i[t])*(e[t]-i[t])/e[t]),a+=(e[t]-i[t])*(e[t]-i[t]);const c=(r*u-n*s)/Math.sqrt((r*h-n*n)*(r*l-s*s));return{r:c,r2:c*c,chi2:o,rmsd:Math.sqrt(a/r)}}}var Hs=__webpack_require__(1883),Ks=(__webpack_require__(5922),__webpack_require__(8345)),Js=__webpack_require__(6952),Qs=__webpack_require__.n(Js);const to={lambda:.1,kernelType:"gaussian",kernelOptions:{},computeCoefficient:!1};class eo extends Zs{constructor(t,e,r){if(super(),!0===t)this.alpha=e.alpha,this.inputs=e.inputs,this.kernelType=e.kernelType,this.kernelOptions=e.kernelOptions,this.kernel=new(Qs())(e.kernelType,e.kernelOptions);else{t=Hs.Z.checkMatrix(t),r=Object.assign({},to,r);const i=new(Qs())(r.kernelType,r.kernelOptions),n=i.compute(t),s=t.rows;n.add(Hs.Z.eye(s,s).mul(r.lambda)),this.alpha=(0,Ks.F)(n,e),this.inputs=t,this.kernelType=r.kernelType,this.kernelOptions=r.kernelOptions,this.kernel=i}}_predict(t){return this.kernel.compute([t],this.inputs).mmul(this.alpha).getRow(0)}toJSON(){return{name:"kernelRidgeRegression",alpha:this.alpha,inputs:this.inputs,kernelType:this.kernelType,kernelOptions:this.kernelOptions}}static load(t){if("kernelRidgeRegression"!==t.name)throw new TypeError("not a KRR model");return new eo(!0,t)}}function ro(t,e,r){const i=new eo(t,e,r),n=new Array(this.size);for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)n[e*this.width+t]=[t,e];const s=i.predict(n),o=il.createFrom(this);for(let t=0;t<this.size;t++)o.data[t]=Math.min(this.maxValue,Math.max(0,s[t][0]));return o}function io(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("dilate",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("dilate: The number of rows and columns of the kernel must be odd");let i=!0;t:for(const t of e)for(const e of t)if(1!==e){i=!1;break t}let n=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(i){const t=n.clone();n=ao(n,t,e.length,e[0].length)}else n=oo(n,il.createFrom(n),e);else n=i?so(n,il.createFrom(n),e.length,e[0].length):no(n,il.createFrom(n),e);return n}function no(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(i<0||u<0||i>=t.width||u>=t.height)continue;const c=t.getValueXY(i,u,0);c>l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function so(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let i=0;for(let n=Math.max(0,r-s);n<Math.min(t.height,r+s+1);n++){const r=t.getValueXY(e,n,0);r>i&&(i=r)}o[e]=i}for(let i=0;i<t.width;i++){let s=0;for(let e=Math.max(0,i-n);e<Math.min(t.width,i+n+1);e++)o[e]>s&&(s=o[e]);e.setValueXY(i,r,0,s)}}return e}function oo(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;t:for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(!(u<0||i<0||i>=t.width||u>=t.height)&&1===t.getBitXY(i,u)){l=1;break t}}1===l&&e.setBitXY(h,a)}return e}function ao(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(1);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){o[e]=0;for(let i=Math.max(0,r-s);i<Math.min(t.height,r+s+1);i++)if(1===t.getBitXY(e,i)){o[e]=1;break}}for(let i=0;i<t.width;i++)if(1!==e.getBitXY(i,r))for(let s=Math.max(0,i-n);s<Math.min(t.width,i+n+1);s++)if(1===o[s]){e.setBitXY(i,r);break}}return e}function ho(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("erode",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("erode: The number of rows and columns of the kernel must be odd");let i=!0;t:for(const t of e)for(const e of t)if(1!==e){i=!1;break t}let n=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(i){const t=n.clone();n=fo(n,t,e.length,e[0].length)}else n=co(n,il.createFrom(n),e);else n=i?uo(n,il.createFrom(n),e.length,e[0].length):lo(n,il.createFrom(n),e);return n}function lo(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=t.maxValue;for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(i<0||u<0||i>=t.width||u>=t.height)continue;const c=t.getValueXY(i,u,0);c<l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function uo(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let i=t.maxValue;for(let n=Math.max(0,r-s);n<Math.min(t.height,r+s+1);n++){const r=t.getValueXY(e,n,0);r<i&&(i=r)}o[e]=i}for(let i=0;i<t.width;i++){let s=t.maxValue;for(let e=Math.max(0,i-n);e<Math.min(t.width,i+n+1);e++)o[e]<s&&(s=o[e]);e.setValueXY(i,r,0,s)}}return e}function co(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=1;t:for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(!(u<0||i<0||i>=t.width||u>=t.height)&&0===t.getBitXY(i,u)){l=0;break t}}1===l&&e.setBitXY(h,a)}return e}function fo(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){o[e]=1;for(let i=Math.max(0,r-s);i<Math.min(t.height,r+s+1);i++)if(0===t.getBitXY(e,i)){o[e]=0;break}}for(let i=0;i<t.width;i++)if(0!==e.getBitXY(i,r))for(let s=Math.max(0,i-n);s<Math.min(t.width,i+n+1);s++)if(0===o[s]){e.clearBitXY(i,r);break}}return e}function po(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("open",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("open: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++)i=i.erode({kernel:e}),i=i.dilate({kernel:e});return i}function mo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("close",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("close: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++)i=i.dilate({kernel:e}).erode({kernel:e});return i}function go(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("topHat",{bitDepth:[8,16],components:1,alpha:0}),e.length%2==0||e[0].length%2==0)throw new TypeError("topHat: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){let t=i.open({kernel:e});i=t.subtractImage(i,{absolute:!0})}return i}function wo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("blackHat",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("blackHat: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){const t=i.close({kernel:e});i=t.subtractImage(i,{absolute:!0})}return i}function bo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("morphologicalGradient",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("morphologicalGradient: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){let t=i.dilate({kernel:e}),r=i.erode({kernel:e});i=t.subtractImage(r,{absolute:!0})}return i}function yo(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2))}function _o(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function vo(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function xo(t,e,r,i,n,s,o,a,h,l,u,c){let[f,d]=[(r*t+i*e+n)/(h*t+l*e+1),(s*t+o*e+a)/(h*t+l*e+1)];return u.getValueXY(Math.floor(f),Math.floor(d),c)}function ko(t,e={}){let{calculateRatio:r=!0}=e;if(4!==t.length)throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${t.length} elements`);let i,n,[s,o,a,h]=t,l=[s,o,a,h],[u,c,f,d]=function(t){let e=0,r=0,i=0,n=0,s=t[0][0],o=0;for(let e=1;e<t.length;e++)t[e][0]<s&&(s=t[e][0],o=e);let a=t[(o+1)%t.length][0],h=(o+1)%t.length;for(let e=1;e<t.length;e++)t[e][0]<a&&e!==o&&(a=t[e][0],h=e);return t[h][1]<t[o][1]?(e=t[h],n=t[o],o!==(h+1)%4?(r=t[(h+1)%4],i=t[(h+2)%4]):(r=t[(h+2)%4],i=t[(h+3)%4])):(n=t[h],e=t[o],h!==(o+1)%4?(r=t[(o+1)%4],i=t[(o+2)%4]):(r=t[(o+2)%4],i=t[(o+3)%4])),[e,r,i,n]}(l);r?[i,n]=function(t,e,r,i,n,s){let o=Math.max(yo(t,e),yo(i,r)),a=Math.max(yo(t,i),yo(e,r)),h=0,l=0,u=Math.ceil(n/2),c=Math.ceil(s/2),f=o/a,d=[t[0],t[1],1],p=[e[0],e[1],1],m=[i[0],i[1],1],g=[r[0],r[1],1],w=vo(_o(d,g),m)/vo(_o(p,g),m),b=vo(_o(d,g),p)/vo(_o(m,g),p),y=[w*p[0]-d[0],w*p[1]-d[1],w*p[2]-d[2]],_=[b*m[0]-d[0],b*m[1]-d[1],b*m[2]-d[2]],v=y[0],x=y[1],k=y[2],A=_[0],M=_[1],E=_[2],S=1/(k*E)*(v*A-(v*E+k*A)*u+k*E*u*u+(x*M-(x*E+k*M)*c+k*E*c*c));S=S>=0?Math.sqrt(S):Math.sqrt(-S);let C=new Hs.Z([[S,0,u],[0,S,c],[0,0,1]]),I=C.transpose(),D=(0,Ks.S)(I),P=(0,Ks.S)(C),B=Hs.Z.rowVector(y),R=Hs.Z.rowVector(_),T=Math.sqrt(vo(B.mmul(D).mmul(P).to1DArray(),y)/vo(R.mmul(D).mmul(P).to1DArray(),_));return 0===T||0===f?(h=Math.ceil(o),l=Math.ceil(a)):T<f?(h=Math.ceil(o),l=Math.ceil(h/T)):(l=Math.ceil(a),h=Math.ceil(T*l)),[h,l]}(u,c,f,d,this.width,this.height):(i=Math.ceil(Math.max(yo(u,c),yo(d,f))),n=Math.ceil(Math.max(yo(u,d),yo(c,f))));let p=il.createFrom(this,{width:i,height:n}),[m,g]=u,[w,b]=c,[y,_]=f,[v,x]=d,[k,A]=[0,0],[M,E]=[0,i-1],[S,C]=[n-1,i-1],[I,D]=[n-1,0],P=new Hs.Z([[k,A,1,0,0,0,-k*m,-A*m],[M,E,1,0,0,0,-M*w,-E*w],[S,C,1,0,0,0,-S*y,-A*y],[I,D,1,0,0,0,-I*v,-D*v],[0,0,0,k,A,1,-k*g,-A*g],[0,0,0,M,E,1,-M*b,-E*b],[0,0,0,S,C,1,-S*_,-C*_],[0,0,0,I,D,1,-I*x,-D*x]]),B=Hs.Z.columnVector([m,w,y,v,g,b,_,x]),R=new Ps.Z(P).solve(B),[T,U,O,L,F,N,z,j]=R.to1DArray(),Y=new Hs.Z(n,i);for(let t=0;t<this.channels;t++){for(let e=0;e<n;e++)for(let r=0;r<i;r++)Y.set(e,r,xo(e,r,T,U,O,L,F,N,z,j,this,t));p.setMatrix(Y,{channel:t})}return p}function Ao(t={}){let{x:e=0,y:r=0,width:i=this.width-e,height:n=this.height-r}=t;if(this.checkProcessable("max",{bitDepth:[8,16]}),e=Math.round(e),r=Math.round(r),i=Math.round(i),n=Math.round(n),e>this.width-1||r>this.height-1)throw new RangeError(`crop: origin (x:${e}, y:${r}) out of range (${this.width-1}; ${this.height-1})`);if(i<=0||n<=0)throw new RangeError(`crop: width and height (width:${i}; height:${n}) must be positive numbers`);if(e<0||r<0)throw new RangeError(`crop: x and y (x:${e}, y:${r}) must be positive numbers`);if(i>this.width-e||n>this.height-r)throw new RangeError(`crop: (x: ${e}, y:${r}, width:${i}, height:${n}) size is out of range`);let s=il.createFrom(this,{width:i,height:n,position:[e,r]}),o=i*this.channels,a=r+n,h=0,l=e*this.channels;for(let t=r;t<a;t++){let e=t*this.width*this.channels+l,r=e+o;for(;e<r;e++)s.data[h++]=this.data[e]}return s}function Mo(t={}){this.checkProcessable("cropAlpha",{alpha:1});const{threshold:e=this.maxValue}=t;let r=function(t,e,r){for(let i=0;i<t.width;i++)for(let n=0;n<t.height;n++)if(t.getValueXY(i,n,r)>=e)return i;return-1}(this,e,this.components);if(-1===r)throw new Error("Could not find new dimensions. Threshold may be too high.");let i=function(t,e,r,i){for(let n=0;n<t.height;n++)for(let s=i;s<t.width;s++)if(t.getValueXY(s,n,r)>=e)return n;return-1}(this,e,this.components,r),n=function(t,e,r,i){for(let n=t.height-1;n>=0;n--)for(let s=i;s<t.width;s++)if(t.getValueXY(s,n,r)>=e)return n;return-1}(this,e,this.components,r),s=function(t,e,r,i,n,s){for(let o=t.width-1;o>=i;o--)for(let i=n;i<=s;i++)if(t.getValueXY(o,i,r)>=e)return o;return-1}(this,e,this.components,r,i,n);return this.crop({x:r,y:i,width:s-r+1,height:n-i+1})}function Eo(t,e){if(e<0||e>=t.channels)throw new RangeError(`channel must be included between 0 and ${t.channels-1}. Current value: ${e}`)}const So={nearestneighbor:"nearestNeighbor",nearestneighbour:"nearestNeighbor",bilinear:"bilinear"};function Co(t){if("string"!=typeof t)throw new TypeError("interpolation must be a string");if(t=t.toLowerCase(),!So[t])throw new RangeError(`invalid interpolation algorithm: ${t}`);return So[t]}function Io(t,e,r){const i=this.width/e,n=this.height/r;if(this.bitDepth>1)for(let s=0;s<e;s++){const e=Math.floor((s+.5)*i);for(let i=0;i<r;i++){const r=Math.floor((i+.5)*n);for(let n=0;n<this.channels;n++)t.setValueXY(s,i,n,this.getValueXY(e,r,n))}}else for(let s=0;s<e;s++){const e=Math.floor((s+.5)*i);for(let i=0;i<r;i++){const r=Math.floor((i+.5)*n);this.getBitXY(e,r)&&t.setBitXY(s,i)}}}function Do(t={}){const{factor:e=1,interpolation:r=So.nearestneighbor,preserveAspectRatio:i=!0}=t,n=Co(r);let s=t.width,o=t.height;if(s||(s=o&&i?Math.round(o*(this.width/this.height)):this.width),o||(o=i?Math.round(s*(this.height/this.width)):this.height),({width:s,height:o}=function(t,e,r){t=function(t){if("string"==typeof t){const e=t[t.length-1];t=parseFloat(t),"%"===e&&(t/=100)}return t}(t);let i=Math.round(t*e),n=Math.round(t*r);return i<=0&&(i=1),n<=0&&(n=1),{width:i,height:n}}(e,s,o)),s===this.width&&o===this.height){const t=this.clone();return t.position=[0,0],t}let a=Math.round((this.width-s)/2),h=Math.round((this.height-o)/2);const l=il.createFrom(this,{width:s,height:o,position:[a,h]});if(n!==So.nearestneighbor)throw new Error(`unsupported resize interpolation: ${n}`);return Io.call(this,l,s,o),l}function Po(){this.checkProcessable("hsv",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{colorModel:ln}),e=0,r=this.data;for(let i=0;i<r.length;i+=this.channels){let n=r[i],s=r[i+1],o=r[i+2],a=Math.min(n,s,o),h=Math.max(n,s,o),l=h-a,u=0,c=0===h?0:l/h,f=h;if(h!==a){switch(h){case n:u=(s-o)/l+(s<o?6:0);break;case s:u=(o-n)/l+2;break;case o:u=(n-s)/l+4;break;default:throw new Error("unreachable")}u/=6}t.data[e++]=u*this.maxValue,t.data[e++]=c*this.maxValue,t.data[e++]=f,this.alpha&&(t.data[e++]=r[i+3])}return t}function Bo(){this.checkProcessable("hsl",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{colorModel:hn}),e=Math.floor(this.maxValue/2),r=0,i=this.data;for(let n=0;n<i.length;n+=this.channels){let s=i[n],o=i[n+1],a=i[n+2],h=Math.max(s,o,a),l=Math.min(s,o,a),u=0,c=0,f=(h+l)/2;if(h!==l){let t=h-l;switch(c=f>e?t/(2-h-l):t/(h+l),h){case s:u=(o-a)/t+(o<a?6:0);break;case o:u=(a-s)/t+2;break;case a:u=(s-o)/t+4;break;default:throw new Error("unreachable")}u/=6}t.data[r++]=u*this.maxValue,t.data[r++]=c*this.maxValue,t.data[r++]=f,this.alpha&&(t.data[r++]=i[n+3])}return t}function Ro(){this.checkProcessable("cmyk",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{components:4,colorModel:un}),e=0,r=this.data;for(let i=0;i<r.length;i+=this.channels){let n=r[i],s=r[i+1],o=r[i+2],a=Math.min(this.maxValue-n,this.maxValue-s,this.maxValue-o),h=(this.maxValue-n-a)/(1-a/this.maxValue),l=(this.maxValue-s-a)/(1-a/this.maxValue),u=(this.maxValue-o-a)/(1-a/this.maxValue);t.data[e++]=Math.round(h),t.data[e++]=Math.round(l),t.data[e++]=Math.round(u),t.data[e++]=Math.round(a),this.alpha&&(t.data[e++]=r[i+3])}return t}function To(){return new il(this.width,this.height,this.getRGBAData(),{kind:"RGBA",parent:this})}const Uo={luma709:(t,e,r)=>6966*t+23436*e+2366*r>>15,luma601:(t,e,r)=>9798*t+19235*e+3735*r>>15,maximum:(t,e,r)=>Math.max(t,e,r),minimum:(t,e,r)=>Math.min(t,e,r),average:(t,e,r)=>(t+e+r)/3>>0,minmax:(t,e,r)=>(Math.max(t,e,r)+Math.min(t,e,r))/2,red:t=>t,green:(t,e)=>e,blue:(t,e,r)=>r,cyan(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-t-n)/(1-n/i.maxValue)>>0},magenta(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-e-n)/(1-n/i.maxValue)>>0},yellow(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-r-n)/(1-n/i.maxValue)>>0},black:(t,e,r,i)=>Math.min(i.maxValue-t,i.maxValue-e,i.maxValue-r),hue(t,e,r,i){let n=Uo.min(t,e,r),s=Uo.max(t,e,r);if(s===n)return 0;let o=0,a=s-n;switch(s){case t:o=(e-r)/a+(e<r?6:0);break;case e:o=(r-t)/a+2;break;case r:o=(t-e)/a+4;break;default:throw new Error("unreachable")}return o/6*i.maxValue>>0},saturation(t,e,r,i){let n=Uo.min(t,e,r),s=Uo.max(t,e,r);return 0===s?0:(s-n)/s*i.maxValue},lightness(t,e,r){let i=Uo.min(t,e,r);return(Uo.max(t,e,r)+i)/2}};Object.defineProperty(Uo,"luminosity",{enumerable:!1,value:Uo.lightness}),Object.defineProperty(Uo,"luminance",{enumerable:!1,value:Uo.lightness}),Object.defineProperty(Uo,"min",{enumerable:!1,value:Uo.minimum}),Object.defineProperty(Uo,"max",{enumerable:!1,value:Uo.maximum}),Object.defineProperty(Uo,"brightness",{enumerable:!1,value:Uo.maximum});const Oo={};function Lo(t={}){let{algorithm:e="luma709",keepAlpha:r=!1,mergeAlpha:i=!0}=t;if("string"!=typeof e&&"function"!=typeof e)throw new TypeError("algorithm must be a string or a function");this.checkProcessable("grey",{bitDepth:[8,16],alpha:[0,1]}),1===this.components&&(e="red"),r&=this.alpha,i&=this.alpha,r&&(i=!1);let n,s=hs(this,t,{components:1,alpha:r,colorModel:on});if("function"==typeof e)n=e;else if(n=Uo[e.toLowerCase()],!n)throw new Error(`unsupported grey algorithm: ${e}`);let o=0;for(let t=0;t<this.data.length;t+=this.channels)i?s.data[o++]=Cs(n(this.data[t],this.data[t+1],this.data[t+2],this)*this.data[t+this.components]/this.maxValue,this):(s.data[o++]=Cs(n(this.data[t],this.data[t+1],this.data[t+2],this),this),s.alpha&&(s.data[o++]=this.data[t+this.components]));return s}function Fo(t){let e=!1,r=0;for(let e=1;e<t.length-1;e++)if(t[e-1]<t[e]&&t[e+1]<t[e]&&(r++,r>2))return!1;return 2===r&&(e=!0),e}function No(t,e){let r=0;for(let i=0;i<=e;i++)r+=t[i];return r}function zo(t,e){let r=0;for(let i=0;i<=e;i++)r+=i*t[i];return r}function jo(t,e){let r=0;for(let i=0;i<=e;i++)r+=i*i*t[i];return r}function Yo(t){let e=new Array(t.length);for(let r=1;r<t.length-1;r++)e[r]=(t[r-1]+t[r]+t[r+1])/3;return e[0]=(t[0]+t[1])/3,e[t.length-1]=(t[t.length-2]+t[t.length-1])/3,e}function Vo(t){let e=t.length,r=!1,i=0;for(let r=1;r<e-1;r++)if(t[r-1]<t[r]&&t[r+1]<t[r]&&(i++,i>2))return!1;return 2===i&&(r=!0),r}function qo(t,e){let r=0;for(let i=0;i<=e;i++)r+=t[i];return r}Object.keys(Uo).forEach((t=>{Oo[t]=t}));var Xo=__webpack_require__(6563);const Go={huang:function(t){let e=0;for(let r=0;r<t.length;r++)if(0!==t[r]){e=r;break}let r=t.length-1;for(let i=t.length-1;i>=e;i--)if(0!==t[i]){r=i;break}let i=1/(r-e),n=new Array(t.length),s=0,o=0;for(let r=e;r<t.length;r++)s+=r*t[r],o+=t[r],n[r]=s/o;let a=new Array(t.length);s=o=0;for(let e=r;e>0;e--)s+=e*t[e],o+=t[e],a[e-1]=s/o;let h=-1,l=Number.MAX_VALUE;for(let e=0;e<t.length;e++){let r,s=0;for(let o=0;o<=e;o++)r=1/(1+i*Math.abs(o-n[e])),r<1e-6||r>.999999||(s+=t[o]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));for(let n=e+1;n<t.length;n++)r=1/(1+i*Math.abs(n-a[e])),r<1e-6||r>.999999||(s+=t[n]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));s<l&&(l=s,h=e)}return h},intermodes:function(t){let e=t.slice(),r=0;for(;!Fo(e);){let i=0,n=0,s=e[0];for(let r=0;r<t.length-1;r++)i=n,n=s,s=e[r+1],e[r]=(i+n+s)/3;if(e[t.length-1]=(n+s)/3,r++,r>1e4)throw new Error("Intermodes Threshold not found after 10000 iterations")}let i=0;for(let r=1;r<t.length-1;r++)e[r-1]<e[r]&&e[r+1]<e[r]&&(i+=r);return Math.floor(i/2)},isodata:function(t){let e,r,i,n,s=0;for(let e=1;e<t.length;e++)if(t[e]>0){s=e+1;break}for(;;){e=0,i=0;for(let r=0;r<s;r++)i+=t[r],e+=t[r]*r;n=0,r=0;for(let e=s+1;e<t.length;e++)r+=t[e],n+=t[e]*e;if(i>0&&r>0&&(e/=i,n/=r,s===Math.round((e+n)/2)))break;if(s++,s>t.length-2)throw new Error("Threshold not found")}return s},li:function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d;f=.5,c=0;for(let e=0;e<t.length;e++)c+=e*t[e];c/=e,h=c;do{a=h,r=a+.5|0,i=0,s=0;for(let e=0;e<=r;e++)i+=e*t[e],s+=t[e];l=0===s?0:i/s,n=0,o=0;for(let e=r+1;e<t.length;e++)n+=e*t[e],o+=t[e];u=0===o?0:n/o,d=(l-u)/(Math.log(l)-Math.log(u)),h=d<-Number.EPSILON?d-.5|0:d+.5|0}while(Math.abs(h-a)>.5);return r},maxentropy:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length),n=new Array(t.length);i[0]=r[0],n[0]=1-i[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e],n[e]=1-i[e];let s=0;for(let e=0;e<t.length;e++)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let o=t.length-1;for(let e=t.length-1;e>=s;e--)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let a,h,l,u=-1,c=Number.MIN_VALUE;for(let e=s;e<=o;e++){h=0;for(let n=0;n<=e;n++)0!==t[n]&&(h-=r[n]/i[e]*Math.log(r[n]/i[e]));l=0;for(let i=e+1;i<t.length;i++)0!==t[i]&&(l-=r[i]/n[e]*Math.log(r[i]/n[e]));a=h+l,c<a&&(c=a,u=e)}return u},mean:function(t,e){let r=0;for(let e=0;e<t.length;e++)r+=e*t[e];return Math.floor(r/e)},minerror:function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d,p=-2,m=0;for(let e=0;e<t.length;e++)m+=e*t[e];for(m/=e,r=m;r!==p;){let e=No(t,r),m=No(t,t.length-1),g=zo(t,r),w=zo(t,t.length-1),b=jo(t,r);if(i=g/e,n=(w-g)/(m-e),s=e/m,o=(m-e)/m,a=b/e-i*i,h=(jo(t,t.length-1)-b)/(m-e)-n*n,l=1/a-1/h,u=i/a-n/h,c=i*i/a-n*n/h+Math.log10(a*(o*o)/(h*(s*s))),f=u*u-l*c,f<0)return r;p=r,d=(u+Math.sqrt(f))/l,r=isNaN(d)?p:Math.floor(d)}return r},minimum:function(t){if(t.length<2)return 0;let e=0,r=-1,i=-1,n=new Array(t.length);for(let e=0;e<t.length;e++)n[e]=t[e],t[e]>0&&(i=e);for(;!Vo(n);)if(n=Yo(n),e++,e>1e4)return r;return r=function(t,e){let r;for(let i=1;i<e;i++)if(t[i-1]>t[i]&&t[i+1]>=t[i]){r=i;break}return r}(n,i),r},moments:function(t,e){let r,i,n,s,o,a,h=0,l=0,u=0,c=0,f=-1,d=t.length,p=new Array(d);for(let r=0;r<d;r++)p[r]=t[r]/e;for(let t=0;t<d;t++)h+=t*p[t],l+=t*t*p[t],u+=t*t*t*p[t];i=1*l-h*h,n=(-l*l+h*u)/i,s=(1*-u+l*h)/i,o=.5*(-s-Math.sqrt(s*s-4*n)),a=.5*(-s+Math.sqrt(s*s-4*n)),r=(a-h)/(a-o);for(let t=0;t<d;t++)if(c+=p[t],c>r){f=t;break}return f},otsu:function(t,e){let r=0,i=0,n=0,s=0,o=0;for(let e=0;e<t.length;e++)o+=e*t[e];for(let a=0;a<t.length;a++){i+=t[a];const h=e-i;if(0===i||0===h)continue;r+=a*t[a];const l=(o-r)/h,u=i*h*(r/i-l)*(r/i-l);u>=n&&(s=a,n=u)}return s},percentile:function(t){let e=-1,r=new Array(t.length),i=qo(t,t.length-1),n=1;for(let s=0;s<t.length;s++)r[s]=Math.abs(qo(t,s)/i-.5),r[s]<n&&(n=r[s],e=s);return e},renyientropy:function(t,e){let r,i,n,s=new Array(t.length),o=new Array(t.length),a=new Array(t.length),h=0,l=0,u=0,c=0,f=0,d=0;for(let r=0;r<t.length;r++)s[r]=t[r]/e;o[0]=s[0],a[0]=1-o[0];for(let e=1;e<t.length;e++)o[e]=o[e-1]+s[e],a[e]=1-o[e];i=0;for(let e=0;e<t.length;e++)if(Math.abs(o[e])>=Number.EPSILON){i=e;break}n=t.length-1;for(let e=t.length-1;e>=i;e--)if(Math.abs(a[e])>=Number.EPSILON){n=e;break}for(let e=i;e<=n;e++){let r=0,i=0,n=0;for(let a=0;a<=e;a++)0!==t[a]&&(r-=s[a]/o[e]*Math.log(s[a]/o[e])),i+=Math.sqrt(s[a]/o[e]),n+=s[a]*s[a]/(o[e]*o[e]);let p=0,m=0,g=0;for(let r=e+1;r<t.length;r++)0!==t[r]&&(p-=s[r]/a[e]*Math.log(s[r]/a[e])),m+=Math.sqrt(s[r]/a[e]),g+=s[r]*s[r]/(a[e]*a[e]);let w=r+p,b=2*(i*m>0?Math.log(i*m):0),y=-1*(n*g>0?Math.log(n*g):0);w>c&&(c=w,h=e),b>f&&(f=b,l=e),y>d&&(d=y,u=e)}let p,m=[h,l,u];m.sort(Xo.j),p=Math.abs(m[0]-m[1])<=5?Math.abs(m[1]-m[2])<=5?[1,2,1]:[0,1,3]:Math.abs(m[1]-m[2])<=5?[3,1,0]:[1,2,1];let g=o[m[2]]-o[m[0]];return r=Math.round(m[0]*(o[m[0]]+.25*g*p[0])+.25*m[1]*g*p[1]+m[2]*(a[m[2]]+.25*g*p[2])),r},shanbhag:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length),n=new Array(t.length);i[0]=r[0],n[0]=1-i[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e],n[e]=1-i[e];let s=0;for(let e=0;e<t.length;e++)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let o=t.length-1;for(let e=t.length-1;e>=s;e--)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let a,h,l,u,c=-1,f=Number.MAX_VALUE;for(let e=s;e<=o;e++){l=0,a=.5/i[e];for(let t=1;t<=e;t++)l-=r[t]*Math.log(1-a*i[t-1]);l*=a,u=0,a=.5/n[e];for(let i=e+1;i<t.length;i++)u-=r[i]*Math.log(1-a*n[i]);u*=a,h=Math.abs(l-u),h<f&&(f=h,c=e)}return c},triangle:function(t){let e=0,r=0,i=0,n=0;for(let r=0;r<t.length;r++)if(t[r]>0){e=r;break}e>0&&e--;for(let e=t.length-1;e>0;e--)if(t[e]>0){n=e;break}n<t.length-1&&n++;for(let e=0;e<t.length;e++)t[e]>r&&(i=e,r=t[e]);let s,o,a,h=!1;if(i-e<n-i){h=!0;let r=0,s=t.length-1;for(;r<s;){let e=t[r];t[r]=t[s],t[s]=e,r++,s--}e=t.length-1-n,i=t.length-1-i}if(e===i)return e;s=t[i],o=e-i,a=Math.sqrt(s*s+o*o),s/=a,o/=a,a=s*e+o*t[e];let l=e,u=0;for(let r=e+1;r<=i;r++){let e=s*r+o*t[r]-a;e>u&&(l=r,u=e)}if(l--,h){let e=0,r=t.length-1;for(;e<r;){let i=t[e];t[e]=t[r],t[r]=i,e++,r--}return t.length-1-l}return l},yen:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length);i[0]=r[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e];let n=new Array(t.length);n[0]=r[0]*r[0];for(let e=1;e<t.length;e++)n[e]=n[e-1]+r[e]*r[e];let s=new Array(t.length);s[t.length-1]=0;for(let e=t.length-2;e>=0;e--)s[e]=s[e+1]+r[e+1]*r[e+1];let o,a=-1,h=Number.MIN_VALUE;for(let e=0;e<t.length;e++)o=-1*(n[e]*s[e]>0?Math.log(n[e]*s[e]):0)+2*(i[e]*(1-i[e])>0?Math.log(i[e]*(1-i[e])):0),o>h&&(h=o,a=e);return a}},$o={};function Wo(t={}){let{algorithm:e=$o.otsu}=t;this.checkProcessable("getThreshold",{components:1,bitDepth:[8,16]});let r=Go[e.toLowerCase()];if(r)return r(this.getHistogram(),this.size);throw new Error(`unknown thresholding algorithm: ${e}`)}Object.keys(Go).forEach((t=>{$o[t]=t}));const Zo="threshold";function Ho(t={}){let{algorithm:e=Zo,threshold:r=.5,useAlpha:i=!0,invert:n=!1}=t;this.checkProcessable("mask",{components:1,bitDepth:[8,16]}),r=e===Zo?function(t,e){if(!e)throw Error("getThreshold : the maxValue should be specified");if("string"==typeof t){if("%"!==t[t.length-1])throw Error("getThreshold : if the value is a string it must finish by %");return parseFloat(t)/100*e}if("number"==typeof t)return t<1?t*e:t;throw Error("getThreshold : the value is not valid")}(r,this.maxValue):Wo.call(this,t);let s=new il(this.width,this.height,{kind:"BINARY",parent:this}),o=0;if(this.alpha&&i)for(let t=0;t<this.data.length;t+=this.channels){let e=this.data[t]+(this.maxValue-this.data[t])*(this.maxValue-this.data[t+1])/this.maxValue;(n&&e<=r||!n&&e>=r)&&s.setBit(o),o++}else for(let t=0;t<this.data.length;t+=this.channels)(n&&this.data[t]<=r||!n&&this.data[t]>=r)&&s.setBit(o),o++;return s}function Ko(t={}){let{size:e=0,algorithm:r="copy",color:i}=t;if(this.checkProcessable("pad",{bitDepth:[8,16]}),"set"===r){if(i.length!==this.channels)throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<i.length;t++)0===i[t]&&(i[t]=.001)}else i=Ls()(this.channels,null);Array.isArray(e)||(e=[e,e]);let n=this.width+2*e[0],s=this.height+2*e[1],o=this.channels,a=il.createFrom(this,{width:n,height:s});!function(t,e,r,i){let n=t.width,s=t.height,o=e.width,a=t.channels;for(let h=0;h<n;h++)for(let l=0;l<s;l++)for(let s=0;s<a;s++){let u=(l*n+h)*a+s,c=((i+l)*o+r+h)*a+s;e.data[c]=t.data[u]}}(this,a,e[0],e[1]);for(let t=e[0];t<n-e[0];t++)for(let r=0;r<o;r++){let h=i[r]||a.data[(e[1]*n+t)*o+r];for(let i=0;i<e[1];i++)a.data[(i*n+t)*o+r]=h;h=i[r]||a.data[((s-e[1]-1)*n+t)*o+r];for(let i=s-e[1];i<s;i++)a.data[(i*n+t)*o+r]=h}for(let t=0;t<s;t++)for(let r=0;r<o;r++){let s=i[r]||a.data[(t*n+e[0])*o+r];for(let i=0;i<e[0];i++)a.data[(t*n+i)*o+r]=s;s=i[r]||a.data[(t*n+n-e[0]-1)*o+r];for(let i=n-e[0];i<n;i++)a.data[(t*n+i)*o+r]=s}return a}function Jo(t=8){if(this.checkProcessable("colorDepth",{bitDepth:[1,8,16]}),![8,16].includes(t))throw Error("You need to specify the new colorDepth as 8 or 16");if(this.bitDepth===t)return this.clone();let e=il.createFrom(this,{bitDepth:t});switch(t){case 8:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=255);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]>>8;break;case 16:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=65535);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]<<8|this.data[t];break;default:throw new Error("colorDepth conversion unexpected case")}return e}function Qo(t,e={}){const{interpolation:r=So.nearestneighbor,width:i=this.width,height:n=this.height}=e;if("number"!=typeof t)throw new TypeError("degrees must be a number");const s=Co(r),o=t*Math.PI/180,a=Math.floor(Math.abs(i*Math.cos(o))+Math.abs(n*Math.sin(o))),h=Math.floor(Math.abs(n*Math.cos(o))+Math.abs(i*Math.sin(o))),l=il.createFrom(this,{width:a,height:h}),u=Math.cos(-o),c=Math.sin(-o);let f=a/2,d=h/2;a%2==0?(f-=.5,h%2==0?d-=.5:d=Math.floor(d)):(f=Math.floor(f),h%2==0?d-=.5:d=Math.floor(d));const p=Math.floor(i/2-f),m=Math.floor(n/2-d);switch(s){case So.nearestneighbor:return function(t,e,r,i,n,s,o,a){for(let h=0;h<e.width;h+=1)for(let l=0;l<e.height;l+=1)for(let u=0;u<t.channels;u++){let c=Math.round((h-n)*o-(l-s)*a+n)+r,f=Math.round((l-s)*o+(h-n)*a+s)+i;c<0||c>=t.width||f<0||f>=t.height?1===t.alpha&&u===t.channels-1?e.setValueXY(h,l,u,0):e.setValueXY(h,l,u,t.maxValue):e.setValueXY(h,l,u,t.getValueXY(c,f,u))}return e}(this,l,p,m,f,d,u,c);case So.bilinear:return function(t,e,r,i,n,s,o,a){let h=t.width*t.channels;for(let l=0;l<e.height;l++)for(let u=0;u<e.width;u++){let c=(u-n)*o-(l-s)*a+n+r,f=(l-s)*o+(u-n)*a+s+i,d=0|c,p=0|f,m=c-d,g=f-p;for(let r=0;r<t.channels;r++)if(c<0||c>=t.width||f<0||f>=t.height)1===t.alpha&&r===t.channels-1?e.setValueXY(u,l,r,0):e.setValueXY(u,l,r,t.maxValue);else{let i=(p*t.width+d)*t.channels+r,n=t.data[i],s=t.data[i+t.channels],o=t.data[i+h],a=n+m*(s-n)+g*(o-n)+m*g*(n-s-o+t.data[i+h+t.channels])|0;e.setValueXY(u,l,r,a)}}return e}(this,l,p,m,f,d,u,c);default:throw new Error(`unsupported rotate interpolation: ${s}`)}}function ta(t,e){if("number"!=typeof t)throw new TypeError("angle must be a number");switch(t<0&&(t=360*Math.ceil(-t/360)+t),t%360){case 0:return this.clone();case 90:return ra.call(this);case 180:return ia.call(this);case 270:return ea.call(this);default:return Qo.call(this,t,e)}}function ea(){const t=il.createFrom(this,{width:this.height,height:this.width}),e=t.height-1;for(let r=0;r<this.height;r++)for(let i=0;i<this.width;i++)for(let n=0;n<this.channels;n++)t.setValueXY(r,e-i,n,this.getValueXY(i,r,n));return t}function ra(){const t=il.createFrom(this,{width:this.height,height:this.width}),e=t.width-1;for(let r=0;r<this.height;r++)for(let i=0;i<this.width;i++)for(let n=0;n<this.channels;n++)t.setValueXY(e-r,i,n,this.getValueXY(i,r,n));return t}function ia(){const t=il.createFrom(this),e=t.width-1,r=t.height-1;for(let i=0;i<this.height;i++)for(let n=0;n<this.width;n++)for(let s=0;s<this.channels;s++)t.setValueXY(e-n,r-i,s,this.getValueXY(n,i,s));return t}function na(t,e={}){const r=as(t);this.checkProcessable("insert",r);let{x:i=0,y:n=0}=e;const s=ls(this,e,{copy:!0}),o=Math.min(s.height,n+t.height),a=Math.min(s.width,i+t.width);if(1===s.bitDepth)for(let e=n;e<o;e++)for(let r=i;r<a;r++)t.getBitXY(r-i,e-n)?s.setBitXY(r,e):s.clearBitXY(r,e);else for(let e=n;e<o;e++)for(let r=i;r<a;r++)s.setPixelXY(r,e,t.getPixelXY(r-i,e-n));return s}function sa(t={}){let{size:e=0,algorithm:r="copy",color:i}=t;if(this.checkProcessable("setBorder",{bitDepth:[8,16,32,64]}),"set"===r){if(i.length!==this.channels)throw new Error(`setBorder: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<i.length;t++)0===i[t]&&(i[t]=.001)}else i=Ls()(this.channels,null);Array.isArray(e)||(e=[e,e]);let n=e[0],s=e[1],o=this.channels;for(let t=n;t<this.width-n;t++)for(let e=0;e<o;e++){let r=i[e]||this.data[(t+this.width*s)*o+e];for(let i=0;i<s;i++)this.data[(i*this.width+t)*o+e]=r;r=i[e]||this.data[(t+this.width*(this.height-s-1))*o+e];for(let i=this.height-s;i<this.height;i++)this.data[(i*this.width+t)*o+e]=r}for(let t=0;t<this.height;t++)for(let e=0;e<o;e++){let r=i[e]||this.data[(t*this.width+n)*o+e];for(let i=0;i<n;i++)this.data[(t*this.width+i)*o+e]=r;r=i[e]||this.data[(t*this.width+this.width-n-1)*o+e];for(let i=this.width-n;i<this.width;i++)this.data[(t*this.width+i)*o+e]=r}return this}function oa(t={}){let{preserveAlpha:e=!0}=t;if(this.checkProcessable("split",{bitDepth:[8,16]}),1===this.components)return new ts([this.clone()]);let r=new ts,i=this.data;if(this.alpha&&e)for(let t=0;t<this.components;t++){let e=il.createFrom(this,{components:1,alpha:!0,colorModel:on}),n=0;for(let r=0;r<i.length;r+=this.channels)e.data[n++]=i[r+t],e.data[n++]=i[r+this.components];r.push(e)}else for(let t=0;t<this.channels;t++){let e=il.createFrom(this,{components:1,alpha:!1,colorModel:on}),n=0;for(let r=0;r<i.length;r+=this.channels)e.data[n++]=i[r+t];r.push(e)}return r}function aa(t,e={}){let{keepAlpha:r=!1,mergeAlpha:i=!1}=e;r&=this.alpha,i&=this.alpha,this.checkProcessable("getChannel",{bitDepth:[8,16]}),t=bs(this,t);let n=il.createFrom(this,{components:1,alpha:r,colorModel:on}),s=0;for(let e=0;e<this.data.length;e+=this.channels)i?n.data[s++]=this.data[e+t]*this.data[e+this.components]/this.maxValue:(n.data[s++]=this.data[e+t],r&&(n.data[s++]=this.data[e+this.components]));return n}function ha(t=la,e={}){let{mergeAlpha:r=!1,keepAlpha:i=!1}=e;r&=this.alpha,i&=this.alpha,this.checkProcessable("combineChannels",{bitDepth:[8,16]});let n=il.createFrom(this,{components:1,alpha:i,colorModel:on}),s=0;for(let e=0;e<this.size;e++){let o=t(this.getPixel(e));r?n.data[s++]=o*this.data[e*this.channels+this.components]/this.maxValue:(n.data[s++]=o,i&&(n.data[s++]=this.data[e*this.channels+this.components]))}return n}function la(t){return(t[0]+t[1]+t[2])/3}function ua(t,e){if(this.checkProcessable("setChannel",{bitDepth:[8,16]}),e.checkProcessable("setChannel (image parameter check)",{bitDepth:[this.bitDepth],alpha:[0],components:[1]}),e.width!==this.width||e.height!==this.height)throw new Error("Images must have exactly the same width and height");let r=t=bs(this,t);for(let t=0;t<e.data.length;t++)this.data[r]=e.data[t],r+=this.channels;return this}function ca(t,e={}){let{shift:r=[0,0],average:i,channels:n,defaultAlpha:s,normalize:o,border:a=[0,0]}=e;if(this.checkProcessable("getSimilarity",{bitDepth:[8,16]}),Array.isArray(a)||(a=[a,a]),n=ws(this,{channels:n,defaultAlpha:s}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");void 0===i&&(i=!0);let h=Math.max(a[0],-r[0]),l=Math.min(this.width-a[0],this.width-r[0]),u=Math.max(a[1],-r[1]),c=Math.min(this.height-a[1],this.height-r[1]),f=Ls()(n.length,0);for(let e=0;e<n.length;e++){let i=n[e],s=o?this.sum[i]:Math.max(this.sum[i],t.sum[i]),a=o?t.sum[i]:Math.max(this.sum[i],t.sum[i]);if(0!==s&&0!==a)for(let n=h;n<l;n++)for(let o=u;o<c;o++){let h=n*this.multiplierX+o*this.multiplierY+i,l=h+r[0]*this.multiplierX+r[1]*this.multiplierY;f[e]+=Math.min(this.data[h]/s,t.data[l]/a)}}return i?f.reduce(((t,e)=>t+e))/f.length:f}function fa(t={}){let{sampling:e=[10,10],painted:r=!1,mask:i}=t;this.checkProcessable("getPixelsGrid",{bitDepth:[8,16],channels:1}),Array.isArray(e)||(e=[e,e]);const n=e[0],s=e[1],o=[],a=[],h=this.width/n,l=this.height/s;let u=Math.floor(h/2);for(let t=0;t<n;t++){let t=Math.floor(l/2);for(let e=0;e<s;e++){let e=Math.round(u),r=Math.round(t);i&&!i.getBitXY(e,r)||(o.push([e,r]),a.push(this.getPixelXY(e,r))),t+=l}u+=h}const c={xyS:o,zS:a};return r&&(c.painted=this.rgba8().paintPoints(o)),c}function da(t,e,r){const i=new Array(t);for(let r=0;r<t;r++)i[r]=new Array(e);if(r)for(let n=0;n<t;n++)for(let t=0;t<e;t++)i[n][t]=r;return i.width=t,i.height=e,Object.setPrototypeOf(i,da.prototype),i}function pa(t,e={}){let{border:r}=e;if(this.checkProcessable("getChannel",{bitDepth:[8,16]}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");let i=new da(t.width,t.height,-1/0),n=Math.floor(t.width/2),s=Math.floor(t.height/2),o=n,a=s,h=!1;for(;!h;){let e=i.localSearch(n,s,-1/0);for(let n=0;n<e.length;n++){let s=e[n],h=this.getSimilarity(t,{border:r,shift:[o-s[0],a-s[1]]});i[s[0]][s[1]]=h}let l=i.localMax(n,s);l.position[0]!==n||l.position[1]!==s?(n=l.position[0],s=l.position[1]):h=!0}return[n-o,s-a]}function ma(t,e=0){this.checkProcessable("getRow",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.height)throw new RangeError(`row must be included between 0 and ${t.height-1}. Current value: ${e}`)}(this,t),Eo(this,e);let r=new Array(this.width),i=0,n=t*this.width*this.channels+e,s=n+this.width*this.channels;for(let t=n;t<s;t+=this.channels)r[i++]=this.data[t];return r}function ga(t,e=0){this.checkProcessable("getColumn",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.width)throw new RangeError(`column must be included between 0 and ${t.width-1}. Current value: ${e}`)}(this,t),Eo(this,e);let r=new Array(this.height),i=0,n=this.width*this.channels;for(let s=e+t*this.channels;s<this.data.length;s+=n)r[i++]=this.data[s];return r}function wa(t={}){let{channel:e}=t;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===e){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");e=0}let r=new Hs.Z(this.height,this.width);for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i++)r.set(t,i,this.getValueXY(i,t,e));return r}function ba(t,e={}){t=new Hs.Z(t);let{channel:r}=e;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}if(this.width!==t.columns||this.height!==t.rows)throw new RangeError("The size of the matrix must be equal to the size of the image");for(let e=0;e<this.height;e++)for(let i=0;i<this.width;i++)this.setValueXY(i,e,r,t.get(e,i))}function ya(){this.checkProcessable("getPixelsArray",{bitDepth:[8,16,32]});let t=new Array(this.size),e=0;for(let r=0;r<this.data.length;r+=this.channels){let i=new Array(this.components);for(let t=0;t<this.components;t++)i[t]=this.data[r+t];t[e++]=i}return t}function _a(t){let e=this,r=e.getClosestCommonParent(t),i=e.getRelativePosition(r,{defaultFurther:!0}),n=va(e,i),s=t.getRelativePosition(r,{defaultFurther:!0}),o=va(t,s),a=function(t,e){let r=0,i=0,n=[];for(;r<t.length&&i<e.length;)t[r][0]===e[i][0]&&t[r][1]===e[i][1]?(n.push(t[r]),r++,i++):t[r][0]<e[i][0]||t[r][0]===e[i][0]&&t[r][1]<e[i][1]?r++:i++;return n}(n,o),h={whitePixelsMask1:[],whitePixelsMask2:[],commonWhitePixels:[]};for(let r=0;r<a.length;r++){let n=a[r],o=[n[0]-i[0],n[1]-i[1]],l=[n[0]-s[0],n[1]-s[1]],u=e.getBitXY(o[0],o[1]),c=t.getBitXY(l[0],l[1]);1===u&&1===c&&h.commonWhitePixels.push(n)}for(let t=0;t<n.length;t++){let r,i;0!==t&&(r=Math.floor(t/e.width),i=t%e.width),1===e.getBitXY(r,i)&&h.whitePixelsMask1.push(n[t])}for(let e=0;e<o.length;e++){let r=0,i=0;0!==e&&(r=Math.floor(e/t.width),i=e%t.width),1===t.getBitXY(r,i)&&h.whitePixelsMask2.push(o[e])}return h}function va(t,e){let r=[];for(let i=0;i<t.height;i++)for(let n=0;n<t.width;n++){let t=[i,n];r.push([t[0]+e[0],t[1]+e[1]])}return r}function xa(t){let e,r=ka(this),i=ka(t);if(e=r>=i?Aa(this,r):Aa(t,i),0===r||0===i)return e;let n=this,s=t;for(;r!==i;)if(r>i){if(n=n.parent,null===n)return e;r-=1}else{if(s=s.parent,null===s)return e;i-=1}for(;n!==s&&null!==n&&null!==s;)if(n=n.parent,s=s.parent,null===n||null===s)return e;return n!==s?e:n}function ka(t){let e=0,r=t;for(;null!=r.parent;)r=r.parent,e++;return e}function Aa(t,e){let r=t;for(;e>0;)r=r.parent,e-=1;return r}da.prototype.localMin=function(t,e){let r=this[t][e],i=[t,e];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]<r&&(r=this[n][t],i=[n,t]);return{position:i,value:r}},da.prototype.localMax=function(t,e){let r=this[t][e],i=[t,e];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]>r&&(r=this[n][t],i=[n,t]);return{position:i,value:r}},da.prototype.localSearch=function(t,e,r){let i=[];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]===r&&i.push([n,t]);return i};const Ma={lowThreshold:10,highThreshold:30,gaussianBlur:1.1},Ea=[[-1,0,1],[-2,0,2],[-1,0,1]],Sa=[[-1,-2,-1],[0,0,0],[1,2,1]],Ca={bitDepth:32,mode:"periodic"};function Ia(t){return function(t,e){t.checkProcessable("Canny edge detector",{bitDepth:8,channels:1,components:1}),e=Object.assign({},Ma,e);const r=t.width,i=t.height,n=t.maxValue,s={sigma:e.gaussianBlur,radius:3},o=t.gaussianFilter(s),a=o.convolution(Sa,Ca),h=o.convolution(Ea,Ca),l=h.hypotenuse(a),u=t.constructor,c=new u(r,i,{kind:"GREY",bitDepth:32}),f=new u(r,i,{kind:"GREY",bitDepth:32}),d=new u(r,i,{kind:"GREY"});for(var p=1;p<r-1;p++)for(var m=1;m<i-1;m++){var g=(Math.round(Math.atan2(h.getValueXY(p,m,0),a.getValueXY(p,m,0))*(5/Math.PI))+5)%5;0===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p,m+1,0))||1===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m+1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m-1,0))||2===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m,0))||3===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m+1,0))||c.setValueXY(p,m,0,l.getValueXY(p,m,0))}for(p=0;p<r*i;++p){var w=c.data[p],b=0;w>e.highThreshold&&(b++,d.data[p]=n),w>e.lowThreshold&&b++,f.data[p]=b}var y=[];for(p=1;p<r-1;++p)for(m=1;m<i-1;++m)if(1===f.getValueXY(p,m,0))t:for(var _=p-1;_<p+2;++_)for(var v=m-1;v<m+2;++v)if(2===f.getValueXY(_,v,0)){y.push([p,m]),d.setValueXY(p,m,0,n);break t}for(;y.length>0;){var x=[];for(p=0;p<y.length;++p)for(m=-1;m<2;++m)for(_=-1;_<2;++_)if(0!==m||0!==_){var k=y[p][0]+m,A=y[p][1]+_;1===f.getValueXY(k,A,0)&&0===d.getValueXY(k,A,0)&&(x.push([k,A]),d.setValueXY(k,A,0,n))}y=x}return d}(this,t)}function Da(t,e={}){let{position:r}=e;if(this.checkProcessable("extract",{bitDepth:[1,8,16]}),!r&&(r=t.getRelativePosition(this),!r))throw new Error("extract : can not extract an image because the relative position can not be determined, try to specify manually the position as an array of 2 elements [x,y].");if(this.bitDepth>1){let e=il.createFrom(this,{width:t.width,height:t.height,alpha:1,position:r,parent:this});for(let i=0;i<t.width;i++)for(let n=0;n<t.height;n++){for(let t=0;t<this.channels;t++){let s=this.getValueXY(i+r[0],n+r[1],t);e.setValueXY(i,n,t,s)}t.getBitXY(i,n)||e.setValueXY(i,n,this.components,0)}return e}{let e=il.createFrom(this,{width:t.width,height:t.height,position:r,parent:this});for(let i=0;i<t.height;i++)for(let n=0;n<t.width;n++)t.getBitXY(n,i)&&this.getBitXY(n+r[0],i+r[1])&&e.setBitXY(n,i);return e}}var Pa=__webpack_require__(8737),Ba=__webpack_require__.n(Pa);function Ra(t={}){const{x:e=0,y:r=0,inPlace:i=!0}=t,n=i?this:il.createFrom(this);if(this.checkProcessable("floodFill",{bitDepth:1}),this.getBitXY(e,r))return n;const s=new(Ba());for(s.push(new Ta(e,r));s.length>0;){const t=s.shift();n.setBitXY(t.x,t.y);for(let e=t.x+1;e<this.width&&!n.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)n.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&s.push(new Ta(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&s.push(new Ta(e,t.y-1));for(let e=t.x-1;e>=0&&!n.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)n.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&s.push(new Ta(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&s.push(new Ta(e,t.y-1))}return n}function Ta(t,e){this.x=t,this.y=e}function Ua(){return Ua=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t},Ua.apply(this,arguments)}function Oa(t,e,r){var i=function(t,e,r){return{h:t,s:2*(e*=(r<50?r:100-r)/100)/(r+e)*100,v:r+e}}(t,e,r);return function(t,e,r){var i,n=(r/=100)*(e/=100),s=t/60,o=n*(1-Math.abs(s%2-1)),a=r-n;return i=s>=0&&s<1?[n,o,0]:s>=1&&s<2?[o,n,0]:s>=2&&s<3?[0,n,o]:t>=3&&s<4?[0,o,n]:t>=4&&s<5?[o,0,n]:t>=5&&s<=6?[n,0,o]:[0,0,0],{r:Math.round(255*(i[0]+a)),g:Math.round(255*(i[1]+a)),b:Math.round(255*(i[2]+a))}}(i.h,i.s,i.v)}var La={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]};function Fa(t){let e=function(t){var e=La[t.toLowerCase()];if(e)return{r:e[0],g:e[1],b:e[2],a:100}}(r=t)||function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:100}}(r)||function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:100}}(r)||function(t){var e=t.match(/rgb\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100}}}(r)||function(t){var e=t.match(/rgba\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100*r[3]}}}(r)||function(t){var e=t.match(/hsl\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */);return Ua({},Oa(parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10)),{a:100})}}(r)||function(t){var e=t.match(/hsla\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */),i=parseInt(r[0],10),n=parseInt(r[1],10),s=parseInt(r[2],10),o=parseInt(100*parseFloat(r[3]),10);return Ua({},Oa(i,n,s),{a:o})}}(r);var r;return[e.r,e.g,e.b,Math.round(255*e.a/100)]}function Na(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function za(t,e,r){let i,n,s,o,a,h;return r/=100,0==(e/=100)?o=a=h=255*r:(n=r<=.5?r*(e+1):r+e-r*e,i=2*r-n,s=t/360,o=Na(i,n,s+1/3),a=Na(i,n,s),h=Na(i,n,s-1/3)),{r:o,g:a,b:h}}function ja(t){let{color:e,colors:r,randomColors:i,numberColors:n=50}=t;if(e&&!Array.isArray(e)&&(e=Fa(e)),e)return[e];if(r)return r=r.map((function(t){return Array.isArray(t)?t:Fa(t)})),r;if(i){r=new Array(n);for(let t=0;t<n;t++)r[t]=[Math.floor(256*Math.random()),Math.floor(256*Math.random()),Math.floor(256*Math.random())]}return function(t){let e=new Array(t),r=0;for(let i=0;i<360;i+=360/t){r++;let t=za(i,100,30+r%4*15);e[r-1]=[Math.round(255*t.r),Math.round(255*t.g),Math.round(255*t.b)]}return e}(n)}function Ya(t,e,r={}){let{color:i="blue",colors:n,font:s="12px Helvetica",rotate:o=0}=r;if(this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:an}),!Array.isArray(t))throw Error("paintLabels: labels must be an array");if(!Array.isArray(e))throw Error("paintLabels: positions must be an array");if(i&&!Array.isArray(i)&&(i=Fa(i)),n=n?n.map((function(t){return Array.isArray(t)?t:Fa(t)})):[i],t.length!==e.length)throw Error("paintLabels: positions and labels must be arrays from the same size");Array.isArray(s)||(s=[s]),Array.isArray(o)||(o=[o]);let a=this.getCanvas().getContext("2d");for(let r=0;r<t.length;r++){a.save();let i=n[r%n.length];a.fillStyle=`rgba(${i[0]},${i[1]},${i[2]},${i[3]/this.maxValue})`,a.font=s[r%s.length];let h=e[r];a.translate(h[0],h[1]),a.rotate(o[r%o.length]/180*Math.PI),a.fillText(t[r],0,0),a.restore()}return this.data=Uint8Array.from(a.getImageData(0,0,this.width,this.height).data),this}function Va(t,e={}){let{alpha:r=255,labels:i=[],labelsPosition:n=[],labelColor:s="blue",labelFont:o="12px Helvetica"}=e;this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:an});let a=ja(Object.assign({},e,{numberColors:t.length}));Array.isArray(t)||(t=[t]);for(let e=0;e<t.length;e++){let i=t[e],n=a[e%a.length];for(let t=0;t<i.width;t++)for(let e=0;e<i.height;e++)if(i.getBitXY(t,e))for(let s=0;s<Math.min(this.components,n.length);s++)if(255===r)this.setValueXY(t+i.position[0],e+i.position[1],s,n[s]);else{let o=this.getValueXY(t+i.position[0],e+i.position[1],s);o=Math.round((o*(255-r)+n[s]*r)/255),this.setValueXY(t+i.position[0],e+i.position[1],s,o)}}if(Array.isArray(i)&&i.length>0){let e=this.getCanvas().getContext("2d");e.fillStyle=s,e.font=o;for(let r=0;r<Math.min(t.length,i.length);r++){let s=n[r]?n[r]:t[r].position;e.fillText(i[r],s[0],s[1])}this.data=Uint8Array.from(e.getImageData(0,0,this.width,this.height).data)}return this}function qa(t,e){let r=new Array(t);for(let i=0;i<t;i++)r[i]=new Array(e).fill(0);return r}const Xa=[[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0]],Ga=[[0,1,0],[1,1,1],[0,1,0]];class $a{constructor(t={}){let{kind:e="cross",shape:r,size:i,width:n,height:s,filled:o=!0}=t;if(i&&(n=i,s=i),r)switch(r.toLowerCase()){case"square":case"rectangle":this.matrix=function(t,e,r){const i=qa(e,t);if(r.filled)for(let r=0;r<e;r++)for(let e=0;e<t;e++)i[r][e]=1;else{for(let r of[0,e-1])for(let e=0;e<t;e++)i[r][e]=1;for(let r=0;r<e;r++)for(let e of[0,t-1])i[r][e]=1}return i}(n,s,{filled:o});break;case"circle":case"ellipse":this.matrix=function(t,e,r){const i=qa(e,t);let n=1-e%2,s=1-t%2,o=Math.floor((t-1)/2),a=Math.floor((e-1)/2),h=o*o,l=a*a;if(r.filled)for(let e=0;e<=a;e++)for(let r=o-Math.floor(Math.sqrt(h-h*e*e/l));r<=o;r++)i[a-e][r]=1,i[a+e+n][r]=1,i[a-e][t-r-1]=1,i[a+e+n][t-r-1]=1;else{for(let e=0;e<=a;e++){let r=o-Math.floor(Math.sqrt(h-h*e*e/l));i[a-e][r]=1,i[a+e+n][r]=1,i[a-e][t-r-1]=1,i[a+e+n][t-r-1]=1}for(let t=0;t<=o;t++){let r=a-Math.floor(Math.sqrt(l-l*t*t/h));i[r][o-t]=1,i[r][o+t+s]=1,i[e-r-1][o-t]=1,i[e-r-1][o+t+s]=1}}return i}(n,s,{filled:o});break;case"triangle":this.matrix=function(t,e,r){if(!r.filled)throw new Error("Non filled triangle is not implemented");const i=qa(e,t);for(let r=0;r<e;r++){let n=Math.floor((1-r/e)*t/2);for(let e=n;e<t-n;e++)i[r][e]=1}return i}(n,s,{filled:o});break;default:throw new Error(`Shape: unexpected shape: ${r}`)}else{if(!e)throw new Error("Shape: expected a kind or a shape option");switch(e.toLowerCase()){case"cross":this.matrix=Xa;break;case"smallcross":this.matrix=Ga;break;default:throw new Error(`Shape: unexpected kind: ${e}`)}}this.height=this.matrix.length,this.width=this.matrix[0].length,this.halfHeight=this.height/2>>0,this.halfWidth=this.width/2>>0}getPoints(){let t=this.matrix,e=[];for(let r=0;r<t.length;r++)for(let i=0;i<t[0].length;i++)t[r][i]&&e.push([i-this.halfWidth,r-this.halfHeight]);return e}getMask(){let t=new il(this.width,this.height,{kind:cn});for(let e=0;e<this.matrix.length;e++)for(let r=0;r<this.matrix[0].length;r++)this.matrix[e][r]&&t.setBitXY(r,e);return t}}function Wa(t,e={}){let{shape:r}=e;this.checkProcessable("paintPoints",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length})),n=new $a(r).getPoints(),s=Math.min(this.channels,i[0].length);for(let e=0;e<t.length;e++){let r=i[e%i.length],o=t[e][0],a=t[e][1];for(let t=0;t<n.length;t++){let e=n[t][0],i=n[t][1];if(o+e>=0&&a+i>=0&&o+e<this.width&&a+i<this.height){let t=(o+e+(a+i)*this.width)*this.channels;for(let e=0;e<s;e++)this.data[t+e]=r[e]}}}return this}function Za(t,e={}){let{color:r=[this.maxValue,0,0],closed:i=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]});let n=Math.min(this.channels,r.length);for(let e=0;e<t.length-1+i;e++){let i=t[e],s=t[(e+1)%t.length],o=s[0]-i[0],a=s[1]-i[1],h=Math.max(Math.abs(o),Math.abs(a)),l=o/h,u=a/h,c=i[0],f=i[1];for(let t=0;t<=h;t++){let t=Math.round(c),e=Math.round(f);if(t>=0&&e>=0&&t<this.width&&e<this.height)if(1===this.bitDepth)this.setBitXY(t,e);else{let i=(t+e*this.width)*this.channels;for(let t=0;t<n;t++)this.data[i+t]=r[t]}c+=l,f+=u}}return this}function Ha(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolylines",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=i[e%i.length],this.paintPolyline(t[e],r);return this}function Ka(t,e={}){let{color:r=[this.maxValue,0,0],filled:i=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]}),e.closed=!0;let n=function(t){let e=[];for(let r=0;r<t.length;r++)t[r][0]===t[(r+1)%t.length][0]&&t[r][1]===t[(r+1)%t.length][1]||t[r][0]===t[(r-1+t.length)%t.length][0]&&t[r][1]===t[(r-1+t.length)%t.length][1]||t[(r+1)%t.length][0]===t[(r-1+t.length)%t.length][0]&&t[(r-1+t.length)%t.length][1]===t[(r+1)%t.length][1]||e.push(t[r]);return e}(t);if(!1===i)return this.paintPolyline(t,e);{let i=Array(this.height);for(let t=0;t<this.height;t++){i[t]=[];for(let e=0;e<this.width;e++)i[t].push(0)}for(let t=0;t<n.length;t++){const e=Ja(n[t],n[(t+1)%n.length]);for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)Qa(r,t,e,this.height)&&(i[t][r]=0===i[t][r]?1:0)}for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)if(1===i[t][e])if(1===this.bitDepth)this.setBitXY(e,t);else{let i=Math.min(this.channels,r.length),n=(e+t*this.width)*this.channels;for(let t=0;t<i;t++)this.data[n+t]=r[t]}return this.paintPolyline(t,e)}}function Ja(t,e){if(t[0]===e[0])return{a:0,b:t[0],vertical:!0};{const r=(e[1]-t[1])/(e[0]-t[0]);return{a:r,b:t[1]-r*t[0],vertical:!1}}}function Qa(t,e,r,i){if(!0===r.vertical)return r.b<=t;if(0===r.a)return!1;{const n=(e-r.b)/r.a;return n<t&&n>=0&&n<=i}}function th(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolygons",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=i[e%i.length],this.paintPolygon(t[e],r);return this}function eh(t={}){let{maxSlots:e=256,channel:r,useAlpha:i=!0}=t;if(this.checkProcessable("getHistogram",{bitDepth:[1,8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}return ih.call(this,r,{useAlpha:i,maxSlots:e})}function rh(t={}){const{maxSlots:e=256,useAlpha:r=!0}=t;this.checkProcessable("getHistograms",{bitDepth:[8,16]});let i=new Array(r?this.components:this.channels);for(let t=0;t<i.length;t++)i[t]=ih.call(this,t,{useAlpha:r,maxSlots:e});return i}function ih(t,e){let{useAlpha:r,maxSlots:i}=e;if(1===this.bitDepth){let t=[0,0];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=this.getBitXY(e,r);0===i?t[0]+=1:1===i&&(t[1]+=1)}return t}let n=Math.log2(i);if(!Ss()(n))throw new RangeError("maxSlots must be a power of 2, for example: 64, 256, 1024");let s=0;this.bitDepth>n&&(s=this.bitDepth-n);let o=this.data,a=Ls()(Math.pow(2,Math.min(this.bitDepth,n)),0);if(r&&this.alpha){let e=this.channels-t-1;for(let r=t;r<o.length;r+=this.channels)a[o[r]>>s]+=o[r+e]/this.maxValue}else for(let e=t;e<o.length;e+=this.channels)a[o[e]>>s]++;return a}function nh(t={}){let{useAlpha:e=!0,nbSlots:r=512}=t;this.checkProcessable("getColorHistogram",{bitDepth:[8,16],components:[3]});let i=Math.log(r)/Math.log(8);if(i!==Math.floor(i))throw new RangeError("nbSlots must be a power of 8. Usually 8, 64, 512 or 4096");let n=this.bitDepth-i,s=this.data,o=Ls()(Math.pow(8,i),0),a=Math.pow(2,2*i),h=Math.pow(2,i);for(let t=0;t<s.length;t+=this.channels){let r=(s[t]>>n)*a+(s[t+1]>>n)*h+(s[t+2]>>n);e&&this.alpha?o[r]+=s[t+this.channels-1]/this.maxValue:o[r]++}return o}function sh(){this.checkProcessable("min",{bitDepth:[8,16,32]});let t=Ls()(this.channels,1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]<t[r]&&(t[r]=this.data[e+r]);return t}function oh(){this.checkProcessable("max",{bitDepth:[8,16,32]});let t=Ls()(this.channels,-1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]>t[r]&&(t[r]=this.data[e+r]);return t}function ah(){this.checkProcessable("sum",{bitDepth:[8,16]});let t=Ls()(this.channels,0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)t[r]+=this.data[e+r];return t}function hh(t=0,e=0){this.checkProcessable("getMoment",{bitDepth:[1]});let r=0;for(let i=0;i<this.width;i++)for(let n=0;n<this.height;n++)1===this.getBitXY(i,n)&&(r+=i**t*n**e);return r}function lh(t={}){let{mask:e,region:r=3,removeClosePoints:i=0,invert:n=!1,maxEquals:s=2}=t,o=this;this.checkProcessable("localMaxima",{bitDepth:[8,16],components:1}),r*=4;let a=n?0:1,h=[1,0,-1,0,1,1,-1,-1,2,0,-2,0,2,2,-2,-2],l=[0,1,0,-1,1,-1,1,-1,0,2,0,-2,2,-2,2,-2],u=r<=8?1:2,c=[];for(let t=u;t<o.height-u;t++)for(let i=u;i<o.width-u;i++){if(e&&e.getBitXY(i,t)!==a)continue;let u=0,f=0,d=o.data[i+t*o.width];for(let e=0;e<r;e++)n?o.data[i+h[e]+(t+l[e])*o.width]>d&&u++:o.data[i+h[e]+(t+l[e])*o.width]<d&&u++,o.data[i+h[e]+(t+l[e])*o.width]===d&&f++;u+f===r&&f<=s&&c.push([i,t])}if(i>0)for(let t=0;t<c.length;t++)for(let e=t+1;e<c.length;e++)Math.sqrt(Math.pow(c[t][0]-c[e][0],2)+Math.pow(c[t][1]-c[e][1],2))<i&&(c[t][0]=c[t][0]+c[e][0]>>1,c[t][1]=c[t][1]+c[e][1]>>1,c.splice(e,1),e--);return c}function uh(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Gn(i)}return e}function ch(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Xn(i)}return e}function fh(){this.checkProcessable("points",{bitDepth:[1]});const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)1===this.getBitXY(e,r)&&t.push([e,r]);return t}function dh(){this.checkProcessable("extendedPoints",{bitDepth:[1]});const t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++)1===this.getBitXY(r,e)&&(t.push([r,e]),1!==this.getBitXY(r+1,e)?(t.push([r+1,e]),t.push([r+1,e+1]),1!==this.getBitXY(r,e+1)&&t.push([r,e+1])):1!==this.getBitXY(r,e+1)&&(t.push([r,e+1]),t.push([r+1,e+1])));return t}function ph(t,e={}){if(this===t)return[0,0];let r=[0,0],i=this;for(;i;){if(i===t)return r;i.position&&(r[0]+=i.position[0],r[1]+=i.position[1]),i=i.parent}return!!e.defaultFurther&&r}function mh(t={}){let{alpha:e=1}=t;this.checkProcessable("countAlphaPixels",{bitDepth:[8,16],alpha:1});let r=0;if(void 0!==e){for(let t=this.components;t<this.data.length;t+=this.channels)this.data[t]===e&&r++;return r}return this.size}function gh(t,e={}){e.sorted||t.sort(bh);const r=t.length,i=new Array(2*r);for(var n=0,s=0;s<r;s++){const e=t[s];for(;n>=2&&wh(i[n-2],i[n-1],e)<=0;)n--;i[n++]=e}const o=n+1;for(s=r-2;s>=0;s--){const e=t[s];for(;n>=o&&wh(i[n-2],i[n-1],e)<=0;)n--;i[n++]=e}return i.slice(0,n-1)}function wh(t,e,r){return(e[1]-t[1])*(r[0]-t[0])-(e[0]-t[0])*(r[1]-t[1])}function bh(t,e){return t[0]===e[0]?t[1]-e[1]:t[0]-e[0]}function yh(){return gh(this.extendedPoints,{sorted:!1})}function _h(t,e){return[t[0]-e[0],t[1]-e[1]]}function vh(t){let e=Math.sqrt(t[0]**2+t[1]**2);return[t[0]/e,t[1]/e]}function xh(t,e,r){void 0===r&&(r=new Array(e.length));let i=Math.cos(t),n=Math.sin(t);for(let t=0;t<r.length;++t)r[t]=[i*e[t][0]-n*e[t][1],n*e[t][0]+i*e[t][1]];return r}function kh(t){let e=0;for(let r=0;r<t.length;r++){let i=t[r][0],n=t[r][1],s=t[r===t.length-1?0:r+1][0],o=t[r===t.length-1?0:r+1][1];e+=Math.sqrt((s-i)**2+(o-n)**2)}return e}function Ah(t){let e=0;for(let r=0;r<t.length;r++)e+=t[r][0]*t[r===t.length-1?0:r+1][1]*.5,e-=t[r===t.length-1?0:r+1][0]*t[r][1]*.5;return Math.abs(e)}function Mh(t){let e=1/0,r=1/0,i=-1/0,n=-1/0;for(let s=0;s<t.length;s++)t[s][0]<e&&(e=t[s][0]),t[s][0]>i&&(i=t[s][0]),t[s][1]<r&&(r=t[s][1]),t[s][1]>n&&(n=t[s][1]);return[[e,r],[i,n]]}function Eh(t={}){const{originalPoints:e=yh.call(this)}=t;if(0===e.length)return[];if(1===e.length)return[e[0],e[0],e[0],e[0]];const r=new Array(e.length);let i,n=1/0,s=0;for(let t=0;t<r.length;t++){let o=Sh(e[t],e[(t+1)%r.length]);xh(-o,e,r);let a=r[t][0],h=r[t][1],l=r[(t+1)%r.length][0],u=r[(t+1)%r.length][1],c=!0,f=0,d=0,p=0;for(let t=0;t<r.length;t++){let e=r[t][0],i=r[t][1],n=(e-a)/(l-a);!0===c?(c=!1,f=n,d=n):(n<f&&(f=n),n>d&&(d=n));let s=(-(l-a)*i+l*h-u*a)/(l-a);Math.abs(s)>Math.abs(p)&&(p=s)}let m=[a+f*(l-a),h],g=[a+d*(l-a),h],w=Math.abs(p*(f-d)*(l-a));w<n&&(s=o,n=w,i=[m,g,[g[0],g[1]-p],[m[0],m[1]-p]])}return xh(s,i,i),i}function Sh(t,e){let r=vh(_h(e,t)),i=Math.acos(r[0]);return r[1]<0?-i:i}var Ch=__webpack_require__(2229),Ih=__webpack_require__.n(Ch),Dh=__webpack_require__(4707),Ph=__webpack_require__.n(Dh);function Bh(t,e){let r=vh(_h(e,t)),i=Math.acos(r[0]);return r[1]<0?-i:i}class Rh{constructor(t,e){this.map=t,this.id=e,this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY,this.minY=Number.POSITIVE_INFINITY,this.maxY=Number.NEGATIVE_INFINITY,this.meanX=0,this.meanY=0,this.surface=0,this.computed={}}getMask(t={}){const{scale:e=1,kind:r=""}=t;let i;switch(r){case"contour":i=this.contourMask;break;case"box":i=this.boxMask;break;case"filled":i=this.filledMask;break;case"center":i=this.centerMask;break;case"mbr":i=this.mbrFilledMask;break;case"hull":i=this.convexHullFilledMask;break;case"hullContour":i=this.convexHullMask;break;case"mbrContour":i=this.mbrMask;break;case"feret":i=this.feretMask;break;default:i=this.mask}return e<1&&(i=i.resize({factor:e}),i.parent=this.mask.parent,i.position[0]+=this.minX,i.position[1]+=this.minY),i}get mean(){throw new Error("Roi mean not implemented yet")}get center(){return this.computed.center||(this.computed.center=[this.width/2>>0,this.height/2>>0]),this.computed.center}get ratio(){return this.width/this.height}get width(){return this.maxX-this.minX+1}get height(){return this.maxY-this.minY+1}_computExternalIDs(){let t=this.borderIDs,e=this.borderLengths;this.computed.externalIDs=[],this.computed.externalLengths=[];let r=this.internalIDs;for(let i=0;i<t.length;i++)r.includes(t[i])||(this.computed.externalIDs.push(t[i]),this.computed.externalLengths.push(e[i]))}get externalIDs(){return this.computed.externalIDs||this._computExternalIDs(),this.computed.externalIDs}get externalLengths(){return this.computed.externalLengths||this._computExternalIDs(),this.computed.externalLengths}_computeBorderIDs(){let t=function(t){let e=t.map,r=e.data,i=new Set,n=new Map,s=new Set,o=[1,0,-1,0],a=[0,1,0,-1];for(let h=t.minX;h<=t.maxX;h++)for(let l=t.minY;l<=t.maxY;l++)if(r[h+l*e.width]===t.id)for(let u=0;u<4;u++){let c=h+o[u],f=l+a[u];if(c>=0&&f>=0&&c<e.width&&f<e.height){let o=c+f*e.width;if(r[o]!==t.id&&!s.has(o)){s.add(o),i.add(r[o]);let t=n.get(r[o]);t?n.set(r[o],++t):n.set(r[o],1)}}}let h=Array.from(i),l=h.map((function(t){return n.get(t)}));return{ids:h,lengths:l}}(this);this.computed.borderIDs=t.ids,this.computed.borderLengths=t.lengths}get borderIDs(){return this.computed.borderIDs||this._computeBorderIDs(),this.computed.borderIDs}get borderLengths(){return this.computed.borderLengths||this._computeBorderIDs(),this.computed.borderLengths}get boxIDs(){return this.computed.boxIDs||(this.computed.boxIDs=function(t){let e=new Set,r=t.map,i=r.data;for(let n of[0,t.height-1])for(let s=0;s<t.width;s++){let o=(n+t.minY)*r.width+s+t.minX;if(s-t.minX>0&&i[o]===t.id&&i[o-1]!==t.id){let t=i[o-1];e.add(t)}if(r.width-s-t.minX>1&&i[o]===t.id&&i[o+1]!==t.id){let t=i[o+1];e.add(t)}}for(let n of[0,t.width-1])for(let s=0;s<t.height;s++){let o=(s+t.minY)*r.width+n+t.minX;if(s-t.minY>0&&i[o]===t.id&&i[o-r.width]!==t.id){let t=i[o-r.width];e.add(t)}if(r.height-s-t.minY>1&&i[o]===t.id&&i[o+r.width]!==t.id){let t=i[o+r.width];e.add(t)}}return Array.from(e)}(this)),this.computed.boxIDs}get internalIDs(){return this.computed.internalIDs||(this.computed.internalIDs=function(t){let e=[t.id],r=t.map,i=r.data;if(t.height>2)for(let n=0;n<t.width;n++){let s=t.minY*r.width+n+t.minX;if(e.includes(i[s])){let n=i[s+r.width];e.includes(n)||t.boxIDs.includes(n)||e.push(n)}}let n=new Array(4);for(let s=1;s<t.width-1;s++)for(let o=1;o<t.height-1;o++){let a=(o+t.minY)*r.width+s+t.minX;if(e.includes(i[a])){n[0]=i[a-1],n[1]=i[a+1],n[2]=i[a-r.width],n[3]=i[a+r.width];for(let r=0;r<4;r++){let i=n[r];e.includes(i)||t.boxIDs.includes(i)||e.push(i)}}}return e}(this)),this.computed.internalIDs}get box(){return this.computed.box||(this.computed.box=function(t){let e=0,r=t.map,i=r.data,n=[0];t.height>1&&(n[1]=t.height-1);for(let s of n)for(let n=1;n<t.width-1;n++)i[(s+t.minY)*r.width+n+t.minX]===t.id&&e++;let s=[0];t.width>1&&(s[1]=t.width-1);for(let n of s)for(let s=0;s<t.height;s++)i[(s+t.minY)*r.width+n+t.minX]===t.id&&e++;return e}(this)),this.computed.box}get external(){return this.computed.external||(this.computed.external=function(t){let e=0,r=t.map,i=r.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r.width+n+t.minX;i[o]===t.id&&(t.externalIDs.includes(i[o-1])||t.externalIDs.includes(i[o+1])||t.externalIDs.includes(i[o-r.width])||t.externalIDs.includes(i[o+r.width]))&&e++}return e+t.box}(this)),this.computed.external}get holesInfo(){return this.computed.holesInfo||(this.computed.holesInfo=function(t){let e=0,r=t.map.width,i=t.map.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r+n+t.minX;t.internalIDs.includes(i[o])&&i[o]!==t.id&&e++}return{number:t.internalIDs.length-1,surface:e}}(this)),this.computed.holesInfo}get border(){return this.computed.border||(this.computed.border=function(t){let e=0,r=t.map,i=r.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r.width+n+t.minX;i[o]===t.id&&(i[o-1]===t.id&&i[o+1]===t.id&&i[o-r.width]===t.id&&i[o+r.width]===t.id||e++)}return e+t.box}(this)),this.computed.border}get contourMask(){if(!this.computed.contourMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||t.setBitXY(e,r));this.computed.contourMask=t}return this.computed.contourMask}get boxMask(){if(!this.computed.boxMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)t.setBitXY(e,0),t.setBitXY(e,this.height-1);for(let e=0;e<this.height;e++)t.setBitXY(0,e),t.setBitXY(this.width-1,e);this.computed.boxMask=t}return this.computed.boxMask}get mask(){if(!this.computed.mask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&t.setBitXY(e,r);this.computed.mask=t}return this.computed.mask}get filledMask(){if(!this.computed.filledMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++){let i=e+this.minX+(r+this.minY)*this.map.width;this.internalIDs.includes(this.map.data[i])&&t.setBitXY(e,r)}this.computed.filledMask=t}return this.computed.filledMask}get centerMask(){if(!this.computed.centerMask){let t=new $a({kind:"smallCross"}).getMask();t.parent=this.map.parent,t.position=[this.minX+this.center[0]-1,this.minY+this.center[1]-1],this.computed.centerMask=t}return this.computed.centerMask}get convexHull(){if(!this.computed.convexHull){const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||(t.push([e,r]),t.push([e+1,r]),t.push([e,r+1]),t.push([e+1,r+1])));const e=gh(t);this.computed.convexHull={polyline:e,surface:Ah(e),perimeter:kh(e)}}return this.computed.convexHull}get convexHullMask(){if(!this.computed.convexHullMask){const t=this.convexHull,e=new il(this.width+1,this.height+1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});e.paintPolyline(t.polyline,{closed:!0}),this.computed.convexHullMask=e}return this.computed.convexHullMask}get convexHullFilledMask(){if(!this.computed.convexHullFilledMask){const t=this.convexHull,e=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let r=0;r<this.width;r++)for(let i=0;i<this.height;i++)1!==Ph()(t.polyline,[r,i])&&e.setBitXY(r,i);this.computed.convexHullFilledMask=e}return this.computed.convexHullFilledMask}get mbr(){if(!this.computed.mbr){let t=Eh({originalPoints:this.convexHull.polyline});if(0===t.length)this.computed.mbr={width:0,height:0,surface:0,perimeter:0,rectangle:t};else{let e=t[0],r=t[1],i=t[2],n=Math.sqrt((e[0]-r[0])**2+(e[1]-r[1])**2),s=Math.sqrt((i[0]-r[0])**2+(i[1]-r[1])**2);this.computed.mbr={width:n,height:s,elongation:1-n/s,aspectRatio:n/s,surface:n*s,perimeter:2*(n+s),rectangle:t}}}return this.computed.mbr}get fillRatio(){return this.surface/(this.surface+this.holesInfo.surface)}get feretDiameters(){return this.computed.feretDiameters||(this.computed.feretDiameters=function(t={}){const{originalPoints:e=yh.call(this)}=t;if(0===e.length)return{min:0,max:0,minLine:[],maxLine:[],aspectRatio:1};if(1===e.length)return{min:1,max:1,minLine:[e[0],e[0]],maxLine:[e[0],e[0]],aspectRatio:1};const r=new Array(e.length);let i=1/0,n=0,s=[];for(let t=0;t<e.length;t++){let o=Bh(e[t],e[(t+1)%e.length]);xh(-o,e,r);let a=0,h=[];for(let i=0;i<e.length;i++){let e=Math.abs(r[t][1]-r[i][1]);e>a&&(a=e,h=[],h.push([r[i][0],r[t][1]],[r[i][0],r[i][1]]))}a<i&&(i=a,n=o,s=h)}xh(n,s,s);let o=0,a=[],h=0;for(let t=0;t<e.length-1;t++)for(let r=t+1;r<e.length;r++){let i=(e[t][0]-e[r][0])**2+(e[t][1]-e[r][1])**2;i>h&&(h=i,o=Math.sqrt(i),a=[e[t],e[r]])}return{min:i,minLine:s,max:o,maxLine:a,aspectRatio:i/o}}({originalPoints:this.convexHull.polyline})),this.computed.feretDiameters}get eqpc(){return this.computed.eqpc||(this.computed.eqpc=2*Math.sqrt(this.surface/Math.PI)),this.computed.eqpc}get perimeterInfo(){return this.computed.perimeterInfo||(this.computed.perimeterInfo=function(t){let e=t.map,r=e.data,i=0,n=0,s=0,o=0;for(let a=0;a<t.width;a++)for(let h=0;h<t.height;h++){let l=(h+t.minY)*e.width+a+t.minX;if(r[l]===t.id){let u=0;switch((0===a||t.externalIDs.includes(r[l-1]))&&u++,(a===t.width-1||t.externalIDs.includes(r[l+1]))&&u++,(0===h||t.externalIDs.includes(r[l-e.width]))&&u++,(h===t.height-1||t.externalIDs.includes(r[l+e.width]))&&u++,u){case 1:i++;break;case 2:n++;break;case 3:s++;break;case 4:o++}}}return{one:i,two:n,three:s,four:o}}(this)),this.computed.perimeterInfo}get perimeter(){let t=this.perimeterInfo,e=2-Math.sqrt(2);return t.one+2*t.two+3*t.three+4*t.four-e*(t.two+2*t.three+t.four)}get ped(){return this.computed.ped||(this.computed.ped=this.perimeter/Math.PI),this.computed.ped}get feretMask(){if(!this.computed.feretMask){const t=new il(this.width+1,this.height+1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});t.paintPolyline(this.feretDiameters.minLine),t.paintPolyline(this.feretDiameters.maxLine),this.computed.feretMask=t}return this.computed.feretMask}get mbrMask(){if(!this.computed.mbrMask){let t=function(t){for(let e=0;e<t.length;e++)t[e][0]=Math.round(t[e][0]),t[e][1]=Math.round(t[e][1]);return t}(this.mbr.rectangle);if(t.length>0){const e=Mh(t),r=new il(e[1][0]-e[0][0]+1,e[1][1]-e[0][1]+1,{kind:cn,position:[this.minX+e[0][0],this.minY+e[0][1]],parent:this.map.parent});t=function(t,e){void 0===e&&(e=new Array(t.length).fill(0).map((()=>[])));let r=Mh(t),i=r[0][0],n=r[0][1];for(let r=0;r<t.length;r++)e[r][0]=t[r][0]-i,e[r][1]=t[r][1]-n;return e}(t),r.paintPolyline(t,{closed:!0}),this.computed.mbrMask=r}else this.computed.mbrMask=new il(1,1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent})}return this.computed.mbrMask}get mbrFilledMask(){if(!this.computed.mbrFilledMask){const t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent}),e=this.mask.minimalBoundingRectangle();for(let r=0;r<this.width;r++)for(let i=0;i<this.height;i++)1!==Ph()(e,[r,i])&&t.setBitXY(r,i);this.computed.mbrFilledMask=t}return this.computed.mbrFilledMask}get points(){if(!this.computed.points){let t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=(e+this.minY)*this.map.width+r+this.minX;this.map.data[i]===this.id&&t.push([r,e])}this.computed.points=t}return this.computed.points}get maxLengthPoints(){if(!this.computed.maxLengthPoints){let t,e=0;const r=this.points;for(let i=0;i<r.length;i++)for(let n=i+1;n<r.length;n++){let s=Math.pow(r[i][0]-r[n][0],2)+Math.pow(r[i][1]-r[n][1],2);s>=e&&(e=s,t=[r[i],r[n]])}this.computed.maxLengthPoints=t}return this.computed.maxLengthPoints}get maxLength(){if(!this.computed.maxLength){let t=Math.sqrt(Math.pow(this.maxLengthPoints[0][0]-this.maxLengthPoints[1][0],2)+Math.pow(this.maxLengthPoints[0][1]-this.maxLengthPoints[1][1],2));this.computed.maxLength=t}return this.computed.maxLength}get roundness(){return 4*this.surface/(Math.PI*this.feretDiameters.max**2)}get sphericity(){return 2*Math.sqrt(this.surface*Math.PI)/this.perimeter}get solidity(){return this.surface/this.convexHull.surface}get angle(){if(!this.computed.angle){let t=this.maxLengthPoints,e=180*-Math.atan2(t[0][1]-t[1][1],t[0][0]-t[1][0])/Math.PI;this.computed.angle=e}return this.computed.angle}toJSON(){return{id:this.id,minX:this.minX,maxX:this.maxX,minY:this.minY,maxY:this.maxY,meanX:this.meanX,meanY:this.meanY,height:this.height,width:this.width,surface:this.surface,mbrWidth:this.mbr.width,mbrHeight:this.mbr.height,mbrSurface:this.mbr.surface,eqpc:this.eqpc,ped:this.ped,feretDiameterMin:this.feretDiameters.min,feretDiameterMax:this.feretDiameters.max,aspectRatio:this.feretDiameters.aspectRatio,fillRatio:this.fillRatio,sphericity:this.sphericity,roundness:this.roundness,solidity:this.solidity,perimeter:this.perimeter}}}class Th{constructor(t,e){this.roiMap=t,this.options=e,this.roi=this.createRoi()}createRoi(){let t=this.roiMap.data,e={};this.roiMap.positive=0,this.roiMap.negative=0;for(let r=0;r<t.length;r++)t[r]&&!e[t[r]]&&(e[t[r]]=!0,t[r]>0?this.roiMap.positive++:this.roiMap.negative++);let r={};for(let t in e)r[t]=new Rh(this.roiMap,1*t);let i=this.roiMap.width,n=this.roiMap.height;for(let e=0;e<n;e++)for(let n=0;n<i;n++){let s=e*i+n;if(0!==t[s]){const i=r[t[s]];n<i.minX&&(i.minX=n),n>i.maxX&&(i.maxX=n),e<i.minY&&(i.minY=e),e>i.maxY&&(i.maxY=e),i.meanX+=n,i.meanY+=e,i.surface++}}let s=[];for(let t in e)r[t].meanX/=r[t].surface,r[t].meanY/=r[t].surface,s.push(r[t]);return s}}function Uh(t={}){const{algorithm:e="commonBorderLength",minCommonBorderLength:r=5,maxCommonBorderLength:i=100,minCommonBorderRatio:n=.3,maxCommonBorderRatio:s=1}=t;let o=function(t,e,n){return t[n]>=r&&t[n]<=i};"function"==typeof e&&(o=e),"commonborderratio"===e.toLowerCase()&&(o=function(t,e,r){let i=Math.min(t[r]/t[e],1);return i>=n&&i<=s});const a=this,h=a.commonBorderLength;let l={},u={};for(let t of Object.keys(h)){let e=h[t],r=Object.keys(e);for(let i of r)if(i!==t&&o(e,t,i)){let e=i;u[i]&&(e=u[i]);let r=t;if(u[t]&&(r=u[t]),Number(e)!==r){let t=Math.min(e,r),i=Math.max(e,r);if(l[t]||(l[t]={}),l[t][i]=!0,u[i]=t,l[i]){for(let e of Object.keys(l[i]))l[t][e]=!0,u[e]=t;delete l[i]}}}}let c=a.minMax,f=-c.min,d=c.max+f,p=new Array(d+1).fill(0);for(let t of Object.keys(u))p[Number(t)+f]=u[t];let m=a.data;for(let t=0;t<m.length;t++){let e=m[t];if(0!==e){let r=p[e+f];0!==r&&(m[t]=r)}}return a.computed={},a}class Oh{constructor(t,e){this.parent=t,this.width=t.width,this.height=t.height,this.data=e,this.negative=0,this.positive=0}get total(){return this.negative+this.positive}get minMax(){let t=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;for(let r=0;r<this.data.length;r++)this.data[r]<t&&(t=this.data[r]),this.data[r]>e&&(e=this.data[r]);return{min:t,max:e}}get commonBorderLength(){return function(t){let e=t.data,r=[1,0,-1,0],i=[0,1,0,-1],n=t.minMax,s=-n.min,o=n.max+s,a=[];for(let t=0;t<=o;t++)a.push(Object.create(null));for(let n=0;n<t.width;n++)for(let o=0;o<t.height;o++){let h=e[n+o*t.width];if(0!==h){let l=Object.create(null),u=!1;for(let c=0;c<4;c++){let f=n+r[c],d=o+i[c];if(f>=0&&d>=0&&f<t.width&&d<t.height){let r=e[f+d*t.width];h!==r&&(u=!0,0!==r&&void 0===l[r]&&(l[r]=!0,a[r+s][h]?a[r+s][h]++:a[r+s][h]=1))}else u=!0}u&&(a[h+s][h]?a[h+s][h]++:a[h+s][h]=1)}}let h={};for(let t=0;t<a.length;t++)Object.keys(a[t]).length>0&&(h[t-s]=a[t]);return h}(this)}mergeRoi(t={}){return Uh.call(this,t)}mergeRois(t){const e=t[0],r=t.slice(1);for(let t=0;t<this.data.length;t++)r.includes(this.data[t])&&(this.data[t]=e)}rowsInfo(){let t=new Array(this.height),e=0;for(let r=0;r<this.data.length;r+=this.width){let i={row:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=i;let n={},s={},o=[],a=this.data[r],h=0;for(let t=r;t<r+this.width;t++){let e=this.data[t];a!==e&&(a=e,o.push(h),h=0),h++,e>0?(i.positivePixel++,n[e]||(n[e]=!0)):e<0?(i.negativePixel++,s[e]||(s[e]=!0)):i.zeroPixel++}o.push(h),i.medianChange=o.sort(((t,e)=>t-e))[Math.floor(o.length/2)],i.positiveRoiIDs=Object.keys(n),i.negativeRoiIDs=Object.keys(s),i.positiveRoi=i.positiveRoiIDs.length,i.negativeRoi=i.negativeRoiIDs.length}return t}colsInfo(){let t=new Array(this.width),e=0;for(let r=0;r<this.width;r++){let i={col:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=i;let n={},s={},o=[],a=this.data[r],h=0;for(let t=r;t<r+this.data.length;t+=this.width){let e=this.data[t];a!==e&&(a=e,o.push(h),h=0),h++,e>0?(i.positivePixel++,n[e]||(n[e]=!0)):e<0?(i.negativePixel++,s[e]||(s[e]=!0)):i.zeroPixel++}o.push(h),i.medianChange=o.sort(((t,e)=>t-e))[Math.floor(o.length/2)],i.positiveRoiIDs=Object.keys(n),i.negativeRoiIDs=Object.keys(s),i.positiveRoi=i.positiveRoiIDs.length,i.negativeRoi=i.negativeRoiIDs.length}return t}}function Lh(t,e={}){const{allowCorners:r=!1}=e,i=65535;let n=new Int16Array(t.size),s=0,o=0,a=new Uint16Array(65536),h=new Uint16Array(65536);for(let e=0;e<t.width;e++)for(let r=0;r<t.height;r++)0===n[r*t.width+e]&&l(e,r);function l(e,l){let u=0,c=0,f=t.getBitXY(e,l),d=f?++s:--o;if(s>32767||o<-32768)throw new Error("Too many regions of interest");for(a[0]=e,h[0]=l;u<=c;){let e=a[u&i],s=h[u&i];if(n[s*t.width+e]=d,e>0&&0===n[s*t.width+e-1]&&t.getBitXY(e-1,s)===f&&(c++,a[c&i]=e-1,h[c&i]=s,n[s*t.width+e-1]=-32768),s>0&&0===n[(s-1)*t.width+e]&&t.getBitXY(e,s-1)===f&&(c++,a[c&i]=e,h[c&i]=s-1,n[(s-1)*t.width+e]=-32768),e<t.width-1&&0===n[s*t.width+e+1]&&t.getBitXY(e+1,s)===f&&(c++,a[c&i]=e+1,h[c&i]=s,n[s*t.width+e+1]=-32768),s<t.height-1&&0===n[(s+1)*t.width+e]&&t.getBitXY(e,s+1)===f&&(c++,a[c&i]=e,h[c&i]=s+1,n[(s+1)*t.width+e]=-32768),r&&(e>0&&s>0&&0===n[(s-1)*t.width+e-1]&&t.getBitXY(e-1,s-1)===f&&(c++,a[c&i]=e-1,h[c&i]=s-1,n[(s-1)*t.width+e-1]=-32768),e<t.width-1&&s>0&&0===n[(s-1)*t.width+e+1]&&t.getBitXY(e+1,s-1)===f&&(c++,a[c&i]=e+1,h[c&i]=s-1,n[(s-1)*t.width+e+1]=-32768),e>0&&s<t.height-1&&0===n[(s+1)*t.width+e-1]&&t.getBitXY(e-1,s+1)===f&&(c++,a[c&i]=e-1,h[c&i]=s+1,n[(s+1)*t.width+e-1]=-32768),e<t.width-1&&s<t.height-1&&0===n[(s+1)*t.width+e+1]&&t.getBitXY(e+1,s+1)===f&&(c++,a[c&i]=e+1,h[c&i]=s+1,n[(s+1)*t.width+e+1]=-32768)),u++,c-u>i)throw new Error("analyseMask can not finish, the array to manage internal data is not big enough.You could improve mask by changing MAX_ARRAY")}}return new Oh(t,n)}var Fh=__webpack_require__(530),Nh=__webpack_require__.n(Fh);const zh=[-1,0],jh=[0,-1],Yh=[null,null],Vh=[-1,-1,0,1],qh=[0,-1,-1,-1],Xh=[null,null,null,null];function Gh(t,e={}){const{allowCorners:r=!1}=e;let i,n,s,o=4;if(r&&(o=8),8===o)i=Vh,n=qh,s=Xh;else{if(4!==o)throw new RangeError(`unsupported neighbours count: ${o}`);i=zh,n=jh,s=Yh}const a=t.size,h=t.width,l=t.height,u=new Array(a),c=new Uint32Array(a),f=new(Nh());let d=1;for(let e=0;e<l;e++)for(let r=0;r<h;r++){const o=r+e*h;if(t.getBit(o)){let t=null;for(let o=0;o<s.length;o++){const a=r+i[o],c=e+n[o];if(a>=0&&c>=0&&a<h&&c<l){let e=u[a+c*h];e?(s[o]=e,(!t||s[o].value<t.value)&&(t=s[o])):s[o]=null}}if(t){u[o]=t;for(let e=0;e<s.length;e++)s[e]&&s[e]!==t&&f.union(t,s[e])}else u[o]=f.add(d++)}}for(let e=0;e<l;e++)for(let r=0;r<h;r++){const i=r+e*h;t.getBit(i)&&(c[i]=f.find(u[i]).value)}return new Oh(t,c)}function $h(t={}){let{allowCorner:e=!0,onlyTop:r=!1,invert:i=!1}=t,n=this;n.checkProcessable("fromMaxima",{components:[1]});let s=0,o=0,a=new Int16Array(n.size),h=new Int8Array(n.size),l=new Float32Array(n.size),u=1048575,c=new Uint16Array(1048576),f=new Uint16Array(1048576),d=0,p=0,m=new Uint16Array(1048576),g=new Uint16Array(1048576),w=0,b=0;for(function({maxima:t=!0}){for(let r=1;r<n.height-1;r++)for(let i=1;i<n.width-1;i++){let l=i+r*n.width;if(0===h[l]){let h=t?n.data[l]:-n.data[i+r*n.width];if(n.data[r*n.width+i-1]>h)continue;if(n.data[r*n.width+i+1]>h)continue;if(n.data[(r-1)*n.width+i]>h)continue;if(n.data[(r+1)*n.width+i]>h)continue;if(e){if(n.data[(r-1)*n.width+i-1]>h)continue;if(n.data[(r-1)*n.width+i+1]>h)continue;if(n.data[(r+1)*n.width+i-1]>h)continue;if(n.data[(r+1)*n.width+i+1]>h)continue}a[l]=t?++s:--o,y(i,r)||(t?--s:++o)}}}(n);d<p;)_(c[d&u],f[d&u],2),d++;return new Oh(n,a);function y(t,e){let r=p;w=0,b=1,m[0]=t,g[0]=e;let i=!0;for(;w<b;)i&=_(m[w&u],g[w&u],1),w++;if(!i){for(let t=0;t<b;t++){let e=m[t&u],r=g[t&u]*n.width+e;a[r]=0}p=r}return i}function _(t,e,i){let s=a[e*n.width+t],o=n.data[e*n.width+t];for(let d=e-1;d<=e+1;d++)for(let e=t-1;e<=t+1;e++){let t=d*n.width+e;if(0===h[t])switch(h[t]=1,l[t]=n.data[t]-o,i){case 1:if(0===l[t]){if(0===e||0===d||e===n.width-1||d===n.height-1)return!1;a[t]=s,m[b&u]=e,g[b&u]=d,b++}else{if(l[t]>0)return!1;r||(a[t]=s,c[p&u]=e,f[p&u]=d,p++)}break;case 2:l[t]<=0&&(a[t]=s,c[p&u]=e,f[p&u]=d,p++);break;default:throw new Error("unreachable")}}return!0}}function Wh(t,e={}){let r=new $a(e),i=new Int16Array(this.size),n=0,s=r.getPoints();for(let e=0;e<t.length;e++){n++;let r=t[e][0],o=t[e][1];for(let t=0;t<s.length;t++){let e=s[t][0],a=s[t][1];r+e>=0&&o+a>=0&&r+e<this.width&&o+a<this.height&&(i[r+e+(o+a)*this.width]=n)}}return new Oh(this,i)}var Zh=__webpack_require__(5307),Hh=__webpack_require__.n(Zh);const Kh=[1,0,-1,0,1,1,-1,-1],Jh=[0,1,0,-1,1,-1,1,-1];function Qh(t={}){let{points:e,mask:r,image:i,fillMaxValue:n=this.maxValue,invert:s=!1}=t,o=i||this;o.checkProcessable("fromWaterShed",{bitDepth:[8,16],components:1}),s=!s,e||(e=o.getLocalMaxima({invert:s,mask:r}));let a=s?0:1,h=new Int16Array(o.size),l=o.width,u=o.height,c=new(Hh())({comparator:(t,e)=>t[2]-e[2],strategy:Hh().BinaryHeapStrategy});for(let t=0;t<e.length;t++){let r=e[t][0]+e[t][1]*l;h[r]=t+1;let i=o.data[r];(s&&i<=n||!s&&i>=n)&&c.queue([e[t][0],e[t][1],i])}for(;c.length>0;){let t=c.dequeue(),e=t[0]+t[1]*l;for(let i=0;i<4;i++){let f=t[0]+Kh[i],d=t[1]+Jh[i];if(f>=0&&d>=0&&f<l&&d<u){let u=f+d*l;if(!r||r.getBit(u)===a){let r=o.data[u];(s&&r<=n||!s&&r>=n)&&0===h[u]&&(h[u]=h[e],c.queue([t[0]+Kh[i],t[1]+Jh[i],r]))}}}}return new Oh(o,h)}class tl{constructor(t,e={}){this._image=t,this._options=e,this._options.label||(this._options.label="default"),this._layers={},this._painted=null}fromMaxima(t={}){let e=Object.assign({},this._options,t),r=$h.call(this._image,t);this._layers[e.label]=new Th(r,e)}fromPoints(t,e={}){let r=Object.assign({},this._options,e),i=Wh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}putMap(t,e={}){let r=new Oh(this._image,t),i=Object.assign({},this._options,e);return this._layers[i.label]=new Th(r,i),this}fromWaterShed(t={}){let e=Object.assign({},this._options,t),r=Qh.call(this._image,t);this._layers[e.label]=new Th(r,e)}fromMask(t,e={}){let r=Object.assign({},this._options,e),i=Lh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}fromMaskConnectedComponentLabelingAlgorithm(t,e={}){let r=Object.assign({},this._options,e),i=Gh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}getMap(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap}rowsInfo(t={}){return this.getMap(t).rowsInfo()}colsInfo(t={}){return this.getMap(t).rowsInfo()}getRoiIds(t={}){let e=this.getRois(t);if(e){let t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=e[r].id;return t}throw new Error("ROIs not found")}getRois(t={}){let{label:e=this._options.label,positive:r=!0,negative:i=!0,minSurface:n=0,maxSurface:s=Number.POSITIVE_INFINITY,minWidth:o=0,maxWidth:a=Number.POSITIVE_INFINITY,minHeight:h=0,maxHeight:l=Number.POSITIVE_INFINITY,minRatio:u=0,maxRatio:c=Number.POSITIVE_INFINITY}=t;if(!this._layers[e])throw new Error(`this Roi layer (${e}) does not exist`);const f=this._layers[e].roi,d=[];for(const t of f)(t.id<0&&i||t.id>0&&r)&&t.surface>=n&&t.surface<=s&&t.width>=o&&t.width<=a&&t.height>=h&&t.height<=l&&t.ratio>=u&&t.ratio<=c&&d.push(t);return d}getRoi(t,e={}){const{label:r=this._options.label}=e;if(!this._layers[r])throw new Error(`this Roi layer (${r}) does not exist`);const i=this._layers[r].roi.find((e=>e.id===t));if(!i)throw new Error(`found no Roi with id ${t}`);return i}getMasks(t={}){let e=this.getRois(t),r=new Array(e.length);for(let i=0;i<e.length;i++)r[i]=e[i].getMask(t);return r}getAnalysisMasks(t={}){const{analysisProperty:e}=t;let r=`${e}Mask`,i=this.getRois(t);return 0!==i.length&&i[0][r]?i.map((t=>t[r])):[]}getData(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap.data}paint(t={}){let{labelProperty:e,analysisProperty:r}=t;this._painted||(this._painted=this._image.rgba8());let i=this.getMasks(t);if(e){const r=this.getRois(t);t.labels=r.map((t=>function(t,e=""){let r=e.split(".");for(let e of r){if(void 0===t[e])return;t=t[e]}return t}(t,e)));const i=Math.max(...t.labels);let n=!1,s=!1;if(e.includes("surface")?n=!0:/(?:perimeter|min|max|external|width|height|length)/.test(e)&&(s=!0),isFinite(i)){let e="";if("pixel"!==t.unit&&t.pixelSize&&(s||n)){e=n?`${t.unit}^2`:t.unit;let r=n?"m^2":"m",i=n?t.pixelSize**2:t.pixelSize;const s=Ih().swiftConverter(r,e);t.labels=t.labels.map((t=>s(i*t)))}t.labels=i>50?t.labels.map((t=>Math.round(t)+e)):i>10?t.labels.map((t=>t.toFixed(1)+e)):t.labels.map((t=>t.toFixed(2)+e))}t.labelsPosition=r.map((t=>[t.meanX,t.meanY]))}if(this._painted.paintMasks(i,t),r){let e=this.getAnalysisMasks(t);this._painted.paintMasks(e,{color:t.analysisColor,alpha:t.analysisAlpha})}return this._painted}getMask(t={}){let e=new il(this._image.width,this._image.height,{kind:"BINARY"}),r=this.getMasks(t);for(let t=0;t<r.length;t++){let i=r[t];for(let t=0;t<i.width;t++)for(let r=0;r<i.height;r++)i.getBitXY(t,r)&&e.setBitXY(t+i.position[0],r+i.position[1])}return e}resetPainted(t={}){const{image:e}=t;this._painted=e?this.image.rgba8():this._image.rgba8()}mergeRoi(t={}){const e=this.getMap(t);return e.mergeRoi(t),this.putMap(e.data,t),this}mergeRois(t,e={}){if(!Array.isArray(t)||t.some((t=>!Number.isInteger(t))))throw new Error("Roi ids must be an array of integers");if(t.length<2)throw new Error("Roi ids must have at least two elements");if(new Set(t).size!==t.length)throw new Error("Roi ids must be all different");t.forEach((t=>this.getRoi(t)));const r=this.getMap(e);return r.mergeRois(t),this.putMap(r.data,e),this}findCorrespondingRoi(t,e={}){let r=this.getRois(e),i=[];for(let e=0;e<r.length;e++){let n=r[e],s=el(n.minX,n.minY,n.points,t,Math.sign(n.id));i.push(s)}return i}_assertLayerWithLabel(t){if(!this._layers[t])throw new Error(`no layer with label ${t}`)}}function el(t,e,r,i,n){let s={id:[],surface:[],roiSurfaceCovered:[],same:0,opposite:0,total:0};for(let n=0;n<r.length;n++){let o=r[n],a=o[0]+t+(o[1]+e)*i.width,h=i.data[a];(h>0||h<0)&&(s.id.includes(h)?s.surface[s.id.indexOf(h)]+=1:(s.id.push(h),s.surface.push(1)))}for(let t=0;t<s.id.length;t++)Math.sign(s.id[t])===n?s.same+=s.surface[t]:s.opposite+=s.surface[t],s.roiSurfaceCovered[t]=s.surface[t]/r.length;return s.total=s.opposite+s.same,s}const rl=Object.prototype.toString;class il{constructor(e,r,i,n){if(1===arguments.length?(n=e,({width:e,height:r,data:i}=n)):i&&!i.length&&(n=i,({data:i}=n)),void 0===e&&(e=1),void 0===r&&(r=1),void 0===n&&(n={}),"object"!=typeof n||null===n)throw new TypeError("options must be an object");if(!Number.isInteger(e)||e<=0)throw new RangeError("width must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new RangeError("height must be a positive integer");const{kind:s=fn}=n;if("string"!=typeof s)throw new TypeError("kind must be a string");const o=function(t){const e=dn[t];if(!e)throw new RangeError(`invalid image kind: ${t}`);return e}(s),a=Object.assign({},n);for(const t in o)void 0===a[t]&&(a[t]=o[t]);!function(e){const{components:r,alpha:i,bitDepth:n,colorModel:s}=e;if(!Number.isInteger(r)||r<=0)throw new RangeError(`invalid components: ${r}. Must be a positive integer`);if(0!==i&&1!==i&&"boolean"!=typeof i)throw new TypeError(`invalid alpha: ${i}: must be a boolean, 0 or 1`);if(!pn.includes(n))throw new RangeError(`invalid bitDepth: ${n}. Must be one of ${pn.join(", ")}`);if(!t[s])throw new RangeError(`invalid colorModel: ${s}. Must be one of ${Object.keys(t).join(", ")}`)}(a);const{components:h,bitDepth:l,colorModel:u}=a,c=a.alpha+0,f=e*r,d=h+c,p=32===l?Number.MAX_VALUE:2**l-1;if(void 0===i)i=function(t,e,r,i,n,s){const o=i*t;let a;switch(n){case 1:a=new Uint8Array(Math.ceil(o/8));break;case 8:a=new Uint8Array(o);break;case 16:a=new Uint16Array(o);break;case 32:a=new Float32Array(o);break;default:throw new Error(`Cannot create pixel array for bit depth ${n}`)}if(r)for(let t=e;t<a.length;t+=i)a[t]=s;return a}(f,h,c,d,l,p);else{const t=function(t,e,r){let i=e*t;return 1===r&&(i=Math.ceil(i/8)),i}(f,d,l);if(i.length!==t)throw new RangeError(`incorrect data size: ${i.length}. Should be ${t}`)}this.width=e,this.height=r,this.data=i,this.size=f,this.components=h,this.alpha=c,this.bitDepth=l,this.maxValue=p,this.colorModel=u,this.channels=d,this.meta=n.meta||{},Object.defineProperty(this,"parent",{enumerable:!1,writable:!0,configurable:!0,value:n.parent||null}),this.position=n.position||[0,0],this.computed=null,this.sizes=[this.width,this.height],this.multiplierX=this.channels,this.multiplierY=this.channels*this.width,this.isClamped=this.bitDepth<32,this.borderSizes=[0,0]}get[Symbol.toStringTag](){return"IJSImage"}static isImage(t){return"[object IJSImage]"===rl.call(t)}static fromCanvas(t){const e=t.getContext("2d").getImageData(0,0,t.width,t.height);return new il(e.width,e.height,e.data)}static createFrom(t,e){const r=as(t);return Object.assign(r,{parent:t,position:[0,0]},e),new il(r)}getRoiManager(t){return new tl(this,t)}clone(){const t=this.data.slice();return new il(this.width,this.height,t,this)}apply(t){for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=(e*this.width+r)*this.channels;t.call(this,i)}}}!function(t){for(const e in os)t.prototype[e]=os[e]}(il),function(t){for(const e in it)t.prototype[e]=it[e]}(il),function(t){for(const e in en)t.prototype[e]=en[e]}(il),il.prototype.checkProcessable=function(t,e={}){let{bitDepth:r,alpha:i,colorModel:n,components:s,channels:o}=e;if("string"!=typeof t||0===t.length)throw new TypeError("processName must be a string");if(r&&(Array.isArray(r)||(r=[r]),!r.includes(this.bitDepth)))throw new TypeError(`The process: ${t} can only be applied if bit depth is in: ${r}`);if(i&&(Array.isArray(i)||(i=[i]),!i.includes(this.alpha)))throw new TypeError(`The process: ${t} can only be applied if alpha is in: ${i}`);if(n&&(Array.isArray(n)||(n=[n]),!n.includes(this.colorModel)))throw new TypeError(`The process: ${t} can only be applied if color model is in: ${n}`);if(s&&(Array.isArray(s)||(s=[s]),!s.includes(this.components))){let e=`The process: ${t} can only be applied if the number of components is in: ${s}`;throw 1===s.length&&1===s[0]?new TypeError(`${e}.\rYou should transform your image using "image.grey()" before applying the algorithm.`):new TypeError(e)}if(o&&(Array.isArray(o)||(o=[o]),!o.includes(this.channels)))throw new TypeError(`The process: ${t} can only be applied if the number of channels is in: ${o}`)},il.prototype.getRGBAData=function(t={}){const{clamped:e}=t;this.checkProcessable("getRGBAData",{components:[1,3],bitDepth:[1,8,16,32]});const r=this.width*this.height*4;let i=e?new Uint8ClampedArray(r):new Uint8Array(r);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.size;r++){const i=t.getBit(r);e[4*r]=255*i,e[4*r+1]=255*i,e[4*r+2]=255*i}}(this,i):32===this.bitDepth?(this.checkProcessable("getRGBAData",{alpha:0}),1===this.components?function(t,e){const r=t.min[0],i=t.max[0]-r;for(let n=0;n<t.size;n++){const s=Math.floor(255*(t.data[n]-r)/i);e[4*n]=s,e[4*n+1]=s,e[4*n+2]=s}}(this,i):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[an]}),function(t,e){const r=Math.min(...t.min),i=Math.max(...t.max)-r;for(let n=0;n<t.size;n++){const s=Math.floor(255*(t.data[3*n]-r)/i),o=Math.floor(255*(t.data[3*n+1]-r)/i),a=Math.floor(255*(t.data[3*n+2]-r)/i);e[4*n]=s,e[4*n+1]=o,e[4*n+2]=a}}(this,i))):1===this.components?function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels]>>>t.bitDepth-8}(this,i):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[an]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels+1]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels+2]>>>t.bitDepth-8}(this,i)),1===this.alpha?(this.checkProcessable("getRGBAData",{bitDepth:[8,16]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=t.data[r*t.channels+t.components]>>t.bitDepth-8}(this,i)):function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=255}(this,i),i},il.load=function(t,e){if("string"==typeof t)return function(t,e){const r=t.slice(0,64).match(es);let i;return i=null!==r?Promise.resolve(function(t){let e,r,i,n,s=.75*t.length,o=t.length,a=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);const h=new Uint8Array(s);for(let s=0;s<o;s+=4)e=Wi[t.charCodeAt(s)],r=Wi[t.charCodeAt(s+1)],i=Wi[t.charCodeAt(s+2)],n=Wi[t.charCodeAt(s+3)],h[a++]=e<<2|r>>4,h[a++]=(15&r)<<4|i>>2,h[a++]=(3&i)<<6|63&n;return h}(t.slice(r[0].length))):function(t,{withCredentials:e=!1}={}){return new Promise((function(r,i){let n=new self.XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.withCredentials=e,n.onload=function(t){200!==this.status?i(t):r(this.response)},n.onerror=i,n.send()}))}(t,e),i.then((e=>rs(new Uint8Array(e),r?t:void 0)))}(t,e);if(t instanceof ArrayBuffer)return Promise.resolve(rs(new Uint8Array(t)));if(t.buffer)return Promise.resolve(rs(t));throw new Error('argument to "load" must be a string or buffer.')},il.extendMethod=function(t,e,r={}){let{inPlace:i=!1,returnThis:n=!0,partialArgs:s=[]}=r;return il.prototype[t]=i?function(...t){this.computed=null;let r=e.apply(this,[...s,...t]);return n?this:r}:function(...t){return e.apply(this,[...s,...t])},il},il.extendProperty=function(t,e,r={}){let{partialArgs:i=[]}=r;return sn.get=function(){if(null===this.computed)this.computed={};else if(nn()(t,this.computed))return this.computed[t];let r=e.apply(this,i);return this.computed[t]=r,r},Object.defineProperty(il.prototype,t,sn),il},function(t){let e={inPlace:!0};t.extendMethod("invert",cs),t.extendMethod("abs",us),t.extendMethod("level",Fs,e),t.extendMethod("add",Ys,e),t.extendMethod("subtract",Vs,e),t.extendMethod("subtractImage",qs),t.extendMethod("multiply",Gs,e),t.extendMethod("divide",$s,e),t.extendMethod("hypotenuse",Xs),t.extendMethod("background",ro),t.extendMethod("flipX",fs),t.extendMethod("flipY",ds),t.extendMethod("blurFilter",ps),t.extendMethod("medianFilter",ys),t.extendMethod("gaussianFilter",_s),t.extendMethod("sobelFilter",Ts),t.extendMethod("gradientFilter",Rs),t.extendMethod("scharrFilter",Us),t.extendMethod("dilate",io),t.extendMethod("erode",ho),t.extendMethod("open",po),t.extendMethod("close",mo),t.extendMethod("topHat",go),t.extendMethod("blackHat",wo),t.extendMethod("morphologicalGradient",bo),t.extendMethod("warpingFourPoints",ko),t.extendMethod("crop",Ao),t.extendMethod("cropAlpha",Mo),t.extendMethod("resize",Do).extendMethod("scale",Do),t.extendMethod("hsv",Po),t.extendMethod("hsl",Bo),t.extendMethod("cmyk",Ro),t.extendMethod("rgba8",To),t.extendMethod("grey",Lo).extendMethod("gray",Lo),t.extendMethod("mask",Ho),t.extendMethod("pad",Ko),t.extendMethod("colorDepth",Jo),t.extendMethod("setBorder",sa,e),t.extendMethod("rotate",ta),t.extendMethod("rotateLeft",ea),t.extendMethod("rotateRight",ra),t.extendMethod("insert",na),t.extendMethod("getRow",ma),t.extendMethod("getColumn",ga),t.extendMethod("getMatrix",wa),t.extendMethod("setMatrix",ba),t.extendMethod("getPixelsArray",ya),t.extendMethod("getIntersection",_a),t.extendMethod("getClosestCommonParent",xa),t.extendMethod("getThreshold",Wo),t.extendMethod("split",oa),t.extendMethod("getChannel",aa),t.extendMethod("combineChannels",ha),t.extendMethod("setChannel",ua),t.extendMethod("getSimilarity",ca),t.extendMethod("getPixelsGrid",fa),t.extendMethod("getBestMatch",pa),t.extendMethod("cannyEdge",Ia),t.extendMethod("convolution",Bs),t.extendMethod("extract",Da),t.extendMethod("floodFill",Ra),t.extendMethod("paintLabels",Ya,e),t.extendMethod("paintMasks",Va,e),t.extendMethod("paintPoints",Wa,e),t.extendMethod("paintPolyline",Za,e),t.extendMethod("paintPolylines",Ha,e),t.extendMethod("paintPolygon",Ka,e),t.extendMethod("paintPolygons",th,e),t.extendMethod("countAlphaPixels",mh),t.extendMethod("monotoneChainConvexHull",yh),t.extendMethod("minimalBoundingRectangle",Eh),t.extendMethod("getHistogram",eh).extendProperty("histogram",eh),t.extendMethod("getHistograms",rh).extendProperty("histograms",rh),t.extendMethod("getColorHistogram",nh).extendProperty("colorHistogram",nh),t.extendMethod("getMin",sh).extendProperty("min",sh),t.extendMethod("getMax",oh).extendProperty("max",oh),t.extendMethod("getSum",ah).extendProperty("sum",ah),t.extendMethod("getMoment",hh).extendProperty("moment",hh),t.extendMethod("getLocalMaxima",lh),t.extendMethod("getMedian",ch).extendProperty("median",ch),t.extendMethod("getMean",uh).extendProperty("mean",uh),t.extendMethod("getPoints",fh).extendProperty("points",fh),t.extendMethod("getExtendedPoints",dh).extendProperty("extendedPoints",dh),t.extendMethod("getRelativePosition",ph)}(il);var nl=__webpack_require__(6732),sl=__webpack_require__.n(nl);const ol={regression:{kernelType:"polynomial",kernelOptions:{degree:2,constant:1}},threshold:.02,roi:{minSurface:100,positive:!1},sampling:20,include:[]};function al(t,e,r){return t.post("data",[e,r]).then((function(t){for(let e in t)t[e]=new il(t[e]);return t}))}const hl={run:function(t,e,r){e=Object.assign({},ol,e);const i=this.manager;return Array.isArray(t)?Promise.all(t.map((function(t){const n=al(i,t,e);return"function"==typeof r&&n.then(r),n}))):al(i,t,e)},work:function(){worker.on("data",(function(t,e,r){e=new IJS(e);const i={},n=[],s=e.grey(),o=s.sobelFilter();d("sobel",o);const a=o.level().mask({threshold:r.threshold});d("mask",a);const h=o.getRoiManager();h.fromMask(a);const l=h.getMask(r.roi);d("realMask",l);const u=s.getPixelsGrid({sampling:r.sampling,mask:l}),c=e.getBackground(u.xyS,u.zS,r.regression);d("background",c);const f=e.subtract(c);function d(t,e){r.include.includes(t)&&(i[t]=e,n.push(e.data.buffer))}i.result=f,n.push(f.data.buffer),t(i,n)}))}},ll=hl;class ul{constructor(){this._url=null,this._deps=[null]}checkUrl(){if(null===this._url)throw new Error("image worker must be initialized with an URL")}get url(){return this._url}set url(t){if("string"!=typeof t)throw new TypeError("worker URL must be a string");this._url=t,this._deps[0]=t}static extendMethod(t,e){let r,i,n={};function s(...t){return r||(this.checkUrl(),i=this.url,r=new(sl())(e.work,{deps:i}),n.manager=r),e.run.call(n,...t)}s.reset=function(){r&&(r.terminate(),r=new(sl())(e.work,{deps:i}),n.manager=r)},ul.prototype[t]=s}}!function(t){t.extendMethod("background",ll)}(ul),new ul;var cl=__webpack_require__(8764);class fl{constructor(t){this.imageSubject=new rt(1),this.depthSubject=new rt(1),this.dataSubject=new rt(1),this.onDataOpen=t=>{console.log("Data Websocket Opened",t),this.sendDataInitPacket()},this.onDataClosed=t=>{console.log("Data Websocket Closed",t),console.log("Trying to open the websocket again"),this.openDataWebsocket()},this.onDataError=t=>{console.log("Data Websocket Error",t)},this.onDataMessage=t=>{this.unpackData(t.data)},this.stateSubject=new rt(1),this.onStateClosed=t=>{console.log("State Websocket Closed",t),console.log("Trying to open the websocket again"),this.openStateWebsocket()},this.onStateOpen=t=>{console.log("State Websocket Opened",t),this.sendStateInitPacket()},this.onStateError=t=>{console.log("State Websocket Error",t)},this.onStateMessage=t=>{this.unpackState(t.data)},this.dataURL=t.dataWSUrl,this.robotName=t.robotName,this.accessToken=t.accessToken,this.openDataWebsocket(),this.openStateWebsocket()}openDataWebsocket(){this.dataWebsocket=new WebSocket(this.dataURL),this.dataWebsocket.onopen=this.onDataOpen,this.dataWebsocket.onclose=this.onDataClosed,this.dataWebsocket.onerror=this.onDataError,this.dataWebsocket.onmessage=this.onDataMessage}sendDataInitPacket(){let t={command:"pull",exchange:"camera0",robot_name:this.robotName,accessToken:this.accessToken};this.dataWebsocket.send(JSON.stringify(t))}async unpackData(t){if("string"==typeof t)return void console.error("Error unpacking video feed:",t);let e=new Uint8Array(await t.slice(0,1).arrayBuffer())[0];if(1===e){const e=13;let r=new Uint32Array(await t.slice(1,e).arrayBuffer()),i=t.slice(e,e+r[0]),n=t.slice(e+r[0],e+r[0]+r[1]),s=t.slice(e+r[0]+r[1],e+r[0]+r[1]+r[2]);i.arrayBuffer().then((t=>{let e={data:cl.lW.from(t),type:"image/jpg"};this.imageSubject.next(e)}),(t=>console.log("Error while sending image:",t))),n.arrayBuffer().then((t=>il.load(t)),(t=>console.log("Error while loading depth map: ",t))).then((t=>{t&&this.depthSubject.next(t)})),s.text().then((t=>this.dataSubject.next(JSON.parse(t))),(t=>console.log("Error while getting status:",t)))}else if(2===e){let e=new Uint32Array(await t.slice(1,13).arrayBuffer());t.slice(9,9+e[0]).arrayBuffer().then((t=>{var e={data:cl.lW.from(t),type:"image/jpg"};this.imageSubject.next(e)}))}else console.log(`Data type ${e} isn't JPG+PNG(1)`)}openStateWebsocket(){this.stateWebsocket=new WebSocket(this.dataURL),this.stateWebsocket.onopen=this.onStateOpen,this.stateWebsocket.onclose=this.onStateClosed,this.stateWebsocket.onerror=this.onStateError,this.stateWebsocket.onmessage=this.onStateMessage}sendStateInitPacket(){let t={command:"pull",exchange:"state",robot_name:this.robotName,accessToken:this.accessToken};this.stateWebsocket.send(JSON.stringify(t))}unpackState(t){"string"!=typeof t?t.text().then((t=>this.stateSubject.next(JSON.parse(t)))):console.error("Error unpacking robot state:",t)}shutdown(){this.dataWebsocket.onclose=null,this.stateWebsocket.onclose=null,this.dataWebsocket.close(),this.stateWebsocket.close()}}class dl{constructor(t){this.messageQueue=[],this.onWSClosed=t=>{console.debug("Command Websocket Closed",t),console.debug("Trying to open the websocket again"),this.openWebsocket()},this.onWSOpen=t=>{console.debug("Command Websocket Opened",t),this.messageQueue.length&&(console.log("There are unsent messages in the queue, sending them"),this.sendQueuedCommands())},this.onWSError=t=>{console.log("Command Websocket Error",t)},this.onWSMessage=t=>{this.unpackData(t.data)},this.settings=t,this.openWebsocket()}enqueueCommand(t){let e={command:"push",exchange:"commands",robot_name:this.settings.robotName,message:t,accessToken:this.settings.accessToken};console.log({messageObj:e}),console.log("Enqueuing command:",t),this.messageQueue.push(e),this.sendQueuedCommands()}sendQueuedCommands(){if(0!=this.messageQueue.length)for(;this.messageQueue.length&&this.commandWebsocket.readyState===WebSocket.OPEN;){let t=this.messageQueue.shift();console.debug("Sending:",t),this.commandWebsocket.send(JSON.stringify(t))}}openWebsocket(){this.commandWebsocket=new WebSocket(this.settings.dataWSUrl),this.commandWebsocket.onopen=this.onWSOpen,this.commandWebsocket.onclose=this.onWSClosed,this.commandWebsocket.onerror=this.onWSError,this.commandWebsocket.onmessage=this.onWSMessage}unpackData(t){"string"!=typeof t?t.text().then((t=>console.log(JSON.parse(t)))):console.log("Command answer:",t)}shutdown(){this.commandWebsocket.onclose=null,this.commandWebsocket.close(),this.commandWebsocket=null}}var pl=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return d(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){var t=this,e=t.hasError,r=t.thrownError,i=t._value;if(e)throw r;return this._throwIfClosed(),i},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(Q);class ml{constructor(){this.source="operator"}static getInstance(){return ml.instance||(ml.instance=new ml),ml.instance}}class gl{constructor(t,e){this.source=ml.getInstance().source,this.timestamp=Date.now(),this.op=t,this.frame_timestamp=e.frameindex,this.timestamp=e.time}}class wl extends gl{constructor(t,e,r,i){if(super("goto",t),this.pick_point=void 0,this.pos=void 0,this.object_rect=void 0,e&&(this.pick_point=[e.x,e.y]),r&&(this.object_rect=[[r.TopLeft.x,r.TopLeft.y],[r.BottomRight.x,r.BottomRight.y]]),i&&e){let r=i*t.depth_unit;if(r){let i=(e.x-t.ppx)*r/t.fx,n=(e.y-t.ppy)*r/t.fy;this.pos=[i,n,r]}}}}class bl extends gl{constructor(t){super("wait-for-idle",t)}}function yl(t){return function(e){if(function(t){return _(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var _l=function(t){function e(e,r,i,n,s){var o=t.call(this,e)||this;return o.onFinalize=s,o._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,o._error=n?function(t){try{n(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,o._complete=i?function(){try{i()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,o}return d(e,t),e.prototype.unsubscribe=function(){var e,r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(j);function vl(t,e){return t===e}var xl=function(t){function e(e,r){return t.call(this)||this}return d(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(A),kl={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=kl.delegate;return((null==r?void 0:r.setInterval)||setInterval).apply(void 0,w([],g(t)))},clearInterval:function(t){var e=kl.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Al=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.scheduler=e,i.work=r,i.pending=!1,i}return d(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),kl.setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return e;kl.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r,i=!1;try{this.work(t)}catch(t){i=!0,r=t||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),r},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,r=this.scheduler,i=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,k(i,this),null!=e&&(this.id=this.recycleAsyncId(r,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(xl),Ml=function(){function t(e,r){void 0===r&&(r=t.now),this.schedulerActionCtor=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(r,e)},t.now=et.now,t}(),El=new(function(t){function e(e,r){void 0===r&&(r=Ml.now);var i=t.call(this,e,r)||this;return i.actions=[],i._active=!1,i._scheduled=void 0,i}return d(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(Ml))(Al),Sl=El,Cl="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Il(t){return new H((function(e){(function(t,e){var r,i,n,s,o,a,h,l;return o=this,a=void 0,l=function(){var o,a;return p(this,(function(h){switch(h.label){case 0:h.trys.push([0,5,6,11]),r=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=m(t),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(r){e[r]=t[r]&&function(e){return new Promise((function(i,n){!function(t,e,r,i){Promise.resolve(i).then((function(e){t({value:e,done:r})}),e)}(i,n,(e=t[r](e)).done,e.value)}))}}}(t),h.label=1;case 1:return[4,r.next()];case 2:if((i=h.sent()).done)return[3,4];if(o=i.value,e.next(o),e.closed)return[2];h.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=h.sent(),n={error:a},[3,11];case 6:return h.trys.push([6,,9,10]),i&&!i.done&&(s=r.return)?[4,s.call(r)]:[3,8];case 7:h.sent(),h.label=8;case 8:return[3,10];case 9:if(n)throw n.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((h=void 0)||(h=Promise))((function(t,e){function r(t){try{n(l.next(t))}catch(t){e(t)}}function i(t){try{n(l.throw(t))}catch(t){e(t)}}function n(e){var n;e.done?t(e.value):(n=e.value,n instanceof h?n:new h((function(t){t(n)}))).then(r,i)}n((l=l.apply(o,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}var Dl,Pl,Bl={leading:!0,trailing:!1};function Rl(t,e,r){void 0===e&&(e=El),void 0===r&&(r=Bl);var i,n,s,o,a,h=function(t,e,r){void 0===t&&(t=0),void 0===r&&(r=Sl);var i,n=-1;return null!=e&&((i=e)&&_(i.schedule)?r=e:n=e),new H((function(e){var i=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-r.now():t;i<0&&(i=0);var s=0;return r.schedule((function(){e.closed||(e.next(s++),0<=n?this.schedule(void 0,n):e.complete())}),i)}))}(t,e);return i=function(){return h},o=(s=void 0===(n=r)?Bl:n).leading,a=s.trailing,yl((function(t,e){var r=!1,n=null,s=null,h=!1,l=function(){null==s||s.unsubscribe(),s=null,a&&(f(),h&&e.complete())},u=function(){s=null,h&&e.complete()},c=function(t){return s=function(t){if(t instanceof H)return t;if(null!=t){if(function(t){return _(t[$])}(t))return o=t,new H((function(t){var e=o[$]();if(_(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((s=t)&&"number"==typeof s.length&&"function"!=typeof s)return n=t,new H((function(t){for(var e=0;e<n.length&&!t.closed;e++)t.next(n[e]);t.complete()}));if(_(null==(i=t)?void 0:i.then))return r=t,new H((function(t){r.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,T)}));if(function(t){return Symbol.asyncIterator&&_(null==t?void 0:t[Symbol.asyncIterator])}(t))return Il(t);if(function(t){return _(null==t?void 0:t[Cl])}(t))return e=t,new H((function(t){var r,i;try{for(var n=m(e),s=n.next();!s.done;s=n.next()){var o=s.value;if(t.next(o),t.closed)return}}catch(t){r={error:t}}finally{try{s&&!s.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return _(null==t?void 0:t.getReader)}(t))return Il(function(t){return y(this,arguments,(function(){var e,r,i;return p(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,b(e.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,b(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,b(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var e,r,i,n,s,o;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}(i()).subscribe(new _l(e,l,u))},f=function(){if(r){r=!1;var t=n;n=null,e.next(t),!h&&c()}};t.subscribe(new _l(e,(function(t){r=!0,n=t,(!s||s.closed)&&(o?f():c())}),(function(){h=!0,(!(a&&r&&s)||s.closed)&&e.complete()})))}))}class Tl extends n.Component{constructor(t){super(t),this.robotState=void 0,this.hasImage=!1,this.img=document.createElement("img"),this.subscriptions=[],this.selectionSubject=new pl(void 0),this.releaseEventHandler=t=>{2!=t.button&&(this.selectionStart=null,this.selection&&(this.selectionSubject.next(this.selection),this.medianPoint=this.selection.Center),this.redraw())},this.keyPressEventHandler=t=>{" "==t.key&&this.sendCommand()},this.pressEventHandler=t=>{let e=this.getXY(t);2==t.button?(this.medianPoint=e,this.redrawDepth(this.selection)):(this.selection=null,this.selectionStart=e),this.redraw()},this.dragEventHandler=t=>{let e=this.getXY(t);this.mousePos=e,this.selectionStart&&(this.selection=c.fromPoints(this.selectionStart,e)),this.redraw(),t.preventDefault()},this.settings={dataWSUrl:t.dataWSUrl,robotName:t.robotName,accessToken:t.accessToken},this.canvasRef=n.createRef()}render(){return n.createElement("canvas",{ref:this.canvasRef,width:"1280",height:"720",onContextMenu:t=>{t.preventDefault()},tabIndex:1,onMouseDown:this.pressEventHandler,onMouseMove:this.dragEventHandler,onMouseUp:this.releaseEventHandler,onKeyUp:this.keyPressEventHandler})}componentDidMount(){var t,e,r,i;this.depthCanvas=document.createElement("canvas"),this.depthCanvas.width=1280,this.depthCanvas.height=720,this._imageReceiver=new fl(this.settings),this._networkOperator=new dl(this.settings),this.img.onload=()=>this.redraw(),this.subscriptions.push(this.selectionSubject.subscribe((t=>this.redrawDepth(t))),this._imageReceiver.imageSubject.subscribe((t=>this.setVideoFeed(t))),this._imageReceiver.depthSubject.subscribe((t=>this.setDepthData(t))),this._imageReceiver.dataSubject.subscribe((t=>this.updateStatus(t))),this._imageReceiver.stateSubject.pipe((t="state_machine",void 0===i&&(i=W),r=null!=(r=function(r,i){return e?e(r[t],i[t]):r[t]===i[t]})?r:vl,yl((function(t,e){var n,s=!0;t.subscribe(new _l(e,(function(t){var o=i(t);!s&&r(n,o)||(s=!1,n=o,e.next(t))})))}))),Rl(1e3)).subscribe((t=>this.updateState(t))))}componentWillUnmount(){var t,e;null===(t=this._imageReceiver)||void 0===t||t.shutdown(),null===(e=this._networkOperator)||void 0===e||e.shutdown(),this.subscriptions.forEach((t=>t.unsubscribe())),this.subscriptions=[]}setVideoFeed(t){if(void 0===t)return void(this.hasImage=!1);this.hasImage=!0;let e=t.data.toString("base64");this.img.src=`data:${t.type};base64,`+e}setDepthData(t){this.depthData=t,this.redrawDepth(this.selection),this.redraw()}updateStatus(t){this.robotData=t}updateState(t){this.robotState=t,this.redraw()}redraw(){const t=this.canvasRef.current;if(t){const e=t.getContext("2d");if(this.hasImage){if(e.drawImage(this.img,0,0,1280,720),e.save(),e.globalCompositeOperation="screen",e.drawImage(this.depthCanvas,0,0),e.restore(),this.selection){this.SetCanvasStyle(e,Pl.SelectionRectangle);let t=this.selection;this.doCanvasRect(e,Dl.Stroke,t)}this.medianPoint&&(this.SetCanvasStyle(e,Pl.MedianPoint),e.beginPath(),e.arc(this.medianPoint.x,this.medianPoint.y,10,0,2*Math.PI),e.fill(),e.stroke(),e.closePath()),this.mousePos&&(this.SetCanvasStyle(e,Pl.Crosshair),e.beginPath(),e.moveTo(0,this.mousePos.y),e.lineTo(t.width,this.mousePos.y),e.stroke(),e.closePath(),e.beginPath(),e.moveTo(this.mousePos.x,0),e.lineTo(this.mousePos.x,t.height),e.stroke(),e.closePath())}else{this.SetCanvasStyle(e,Pl.NoImage_BG),e.fillRect(0,0,t.width,t.height);const r=new c(0,0,t.width,t.height);this.SetCanvasStyle(e,Pl.NoImage_Text),e.fillText("No Image",r.Center.x,r.Center.y)}this.SetCanvasStyle(e,Pl.PlaqueBackground);let r=500,i=60,n=new c((t.offsetWidth-r)/2,t.offsetHeight-i,r,i);if(this.doCanvasRect(e,Dl.Fill,n),this.robotState){const t=this.robotState.state_machine;this.SetCanvasStyle(e,Pl.PlaqueText),e.fillText(t,n.Center.x,n.Center.y)}this.SetCanvasStyle(e,Pl.Border),e.strokeRect(0,0,t.width,t.height)}}redrawDepth(t){if(this.selectionStart||!this.medianPoint)return;let e=this.depthCanvas,r=e.getContext("2d");r.clearRect(0,0,e.width,e.height);let i=this.canvasRef.current;if(!t||!this.depthData)return;if(t.x+t.w>i.width&&(t.w=i.width-t.x),t.y+t.h>i.height&&(t.h=i.height-t.y),this.selection.w*this.selection.h==0)return;let n=this.depthData.crop({x:t.x,y:t.y,width:t.w,height:t.h}),s=this.getMedianForPoint(this.depthData,this.medianPoint);this.medianPointValue=s;let o=this.calculateDepthDevColors(s,30),a=new Uint8ClampedArray(4*n.size);const h=new ImageData(t.w,t.h);for(let t=0;t<n.size;t++){const e=n.getPixel(t)[0];if(!o.has(e))continue;const r=o.get(e);for(let e=0;e<4;e++)a[4*t+e]=r[e]}h.data.set(a),r.putImageData(h,t.x,t.y)}getMedianForPoint(t,e){let r=e.x-5;r<0&&(r=0);let i=e.y-5;i<0&&(i=0);let n=r+10<t.width?10:t.width-r,s=i+10<t.height?10:t.height-i;return t.crop({x:r,y:i,width:n,height:s}).median[0]}calculateDepthDevColors(t,e=20){let r=new Map;const i=[255,0,0,255],n=[255,255,0,255],s=[0,255,0,255];for(let s=t-e;s<t;s++){let o=(s-(t-e))/e,a=[i[0]+o*(n[0]-i[0]),i[1]+o*(n[1]-i[1]),i[2]+o*(n[2]-i[2]),255];r.set(s,a)}for(let i=t;i<=t+e;i++){let o=(i-t)/e,a=[n[0]+o*(s[0]-n[0]),n[1]+o*(s[1]-n[1]),n[2]+o*(s[2]-n[2]),255];r.set(i,a)}return r}sendCommand(){var t=new wl(this.robotData,this.medianPoint,this.selection,this.medianPointValue);this._networkOperator.enqueueCommand(t);var e=new bl(this.robotData);this._networkOperator.enqueueCommand(e)}getXY(t){let e=t.pageX,r=t.pageY;return e-=this.canvasRef.current.offsetLeft,r-=this.canvasRef.current.offsetTop,{x:e,y:r}}doCanvasRect(t,e,r){let i=r.x,n=r.y,s=r.w,o=r.h;switch(e){case Dl.Fill:t.fillRect(i,n,s,o);break;case Dl.Stroke:t.strokeRect(i,n,s,o)}}SetCanvasStyle(t,e){switch(e){case Pl.Border:t.strokeStyle="green",t.lineWidth=20;break;case Pl.SelectionRectangle:t.strokeStyle="red",t.lineWidth=7;break;case Pl.PlaqueBackground:t.fillStyle="black";break;case Pl.PlaqueText:t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",t.font="bold 48px sans-serif";break;case Pl.Crosshair:t.strokeStyle="white",t.lineWidth=2;break;case Pl.MedianPoint:t.fillStyle="#aaaaaa99",t.strokeStyle="#000000bb",t.lineWidth=1;break;case Pl.NoImage_BG:t.fillStyle="#aaaaaa";break;case Pl.NoImage_Text:t.fillStyle="#eeeeee",t.font="bold 200px sans-serif",t.textAlign="center",t.textBaseline="middle"}}}!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(Dl||(Dl={})),function(t){t[t.Border=0]="Border",t[t.Crosshair=1]="Crosshair",t[t.SelectionRectangle=2]="SelectionRectangle",t[t.PlaqueBackground=3]="PlaqueBackground",t[t.PlaqueText=4]="PlaqueText",t[t.MedianPoint=5]="MedianPoint",t[t.NoImage_BG=6]="NoImage_BG",t[t.NoImage_Text=7]="NoImage_Text"}(Pl||(Pl={}));class Ul extends gl{constructor(t,e){super("setJ",e),this.joints=t}}class Ol extends gl{constructor(t,e){super("calibration/set-tag",e),this.tag_id=t}}var Ll=__webpack_require__(3379),Fl=__webpack_require__.n(Ll),Nl=__webpack_require__(7795),zl=__webpack_require__.n(Nl),jl=__webpack_require__(569),Yl=__webpack_require__.n(jl),Vl=__webpack_require__(3565),ql=__webpack_require__.n(Vl),Xl=__webpack_require__(9216),Gl=__webpack_require__.n(Xl),$l=__webpack_require__(4589),Wl=__webpack_require__.n($l),Zl=__webpack_require__(4645),Hl={};Hl.styleTagTransform=Wl(),Hl.setAttributes=ql(),Hl.insert=Yl().bind(null,"head"),Hl.domAPI=zl(),Hl.insertStyleElement=Gl(),Fl()(Zl.Z,Hl),Zl.Z&&Zl.Z.locals&&Zl.Z.locals;class Kl extends n.Component{constructor(t){super(t),this.subscriptions=[],this.lastFrameDate=Date.now(),this.radianToDegrees=t=>180*t/Math.PI,this.degreesToRadian=t=>t*Math.PI/180,this.sendOp=t=>this._networkOperator.enqueueCommand(new gl(t,this.robotData)),this.sendOpClosure=t=>()=>this.sendOp(t);let e={};[6,8,10].map((t=>e[t]=!1)),this.state={wsUrl:this.props.dataWSUrl,robotName:this.props.robotName,accessToken:this.props.accessToken,fps:0,depthData:void 0,imageData:void 0,connected:!1,isCalibrating:!1,tagsCalibrated:e,joints:[],commandList:[],commandNameInput:"",commandOpInput:"",state_machine:""}}connectionSettingChanged(t){this.setState(Object.assign(Object.assign({},this.state),{[t.target.name]:t.target.value}))}componentWillUnmount(){this.disconnect()}componentDidMount(){this.connect();const t=JSON.parse(localStorage.getItem("rembrain_debug_operator_commands"));t&&this.setState({commandList:t})}addCommand(){const{commandNameInput:t,commandOpInput:e}=this.state;if(t&&e){const r=[...this.state.commandList,{name:t,op:e}];this.setState({commandList:r}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(r)),this.setState({commandNameInput:"",commandOpInput:""})}}removeCommand(t){const e=this.state.commandList.findIndex((e=>e.name===t)),{commandList:r}=this.state,i=[...r.slice(0,e),...r.slice(e+1)];this.setState({commandList:i}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(i))}connect(){let t={accessToken:this.state.accessToken,dataWSUrl:this.state.wsUrl,robotName:this.state.robotName},e=new dl(t),r=new fl(t);this.subscriptions.push(r.imageSubject.subscribe((t=>this.gotCameraData(t)))),this.subscriptions.push(r.depthSubject.subscribe((t=>this.gotDepthData(t)))),this.subscriptions.push(r.stateSubject.subscribe((t=>this.gotRobotState(t)))),this.subscriptions.push(r.dataSubject.subscribe((t=>this.gotRobotData(t)))),this._imageReceiver=r,this._networkOperator=e,this.setState({connected:!0})}disconnect(){var t,e;null===(t=this._networkOperator)||void 0===t||t.shutdown(),null===(e=this._imageReceiver)||void 0===e||e.shutdown(),this.subscriptions.forEach((t=>t.unsubscribe())),this.subscriptions=[],this.setState({connected:!1,isCalibrating:!1,joints:[]})}gotCameraData(t){if(void 0===t)return;let e=t.data.toString("base64");this.setState({imageData:`data:${t.type};base64,`+e}),this.recalculateFPS()}recalculateFPS(){const t=Date.now(),e=1e3/(t-this.lastFrameDate);this.lastFrameDate=t,this.setState({fps:e})}gotDepthData(t){t.multiply(64);let e=t.toBase64();this.setState({depthData:"data:image/png;base64,"+e})}gotRobotState(t){void 0!==t&&(this.robotState=t,this.robotState.joints&&this.setState({joints:t.joints,state_machine:t.state_machine}))}gotRobotData(t){void 0!==t&&(this.robotData=t)}calibrationStart(){this.sendOp("ask_for_manual"),this.sendOp("calibration/tag_detection"),this.resetTagState(),this.setState({isCalibrating:!0})}canFinishCalibration(){if(!this.state.isCalibrating)return!1;const t=this.state.tagsCalibrated;return 0==Object.keys(t).filter((e=>!t[e])).length}finishCalibration(){this.sendOp("calibartion/tag_calibration"),this.sendOp("ask_for_idle"),this.resetTagState(),this.setState({isCalibrating:!1})}resetTagState(){let t=this.state.tagsCalibrated;Object.keys(t).forEach((e=>t[e]=!1)),this.setState({tagsCalibrated:t})}detectCalibrationTags(){this.sendOp("calibration/tag_detection")}tagClicked(t){let e=new Ol(Number(t),this.robotData);this._networkOperator.enqueueCommand(e);let r=this.state.tagsCalibrated;r[t]=!0,this.setState({tagsCalibrated:r})}renderTagButtons(){const t=Object.keys(this.state.tagsCalibrated);let e=t.map((t=>n.createElement("button",{onClick:()=>this.tagClicked(t),key:t,disabled:!this.state.isCalibrating},this.state.tagsCalibrated[t]?"Reset":"Tag"," #",t)));return n.createElement("div",{className:"tags",style:{gridTemplateColumns:"repeat("+t.length+", 1fr)"}},e)}renderJoints(){if(0==this.state.joints.length)return;let t=this.state.joints.map(((t,e)=>n.createElement("div",{key:e,className:"joint-controls "},n.createElement("div",{className:"joint-num"},e,":"),n.createElement("button",{onClick:()=>this.moveJoint(e,-15)},"-15°"),n.createElement("button",{onClick:()=>this.moveJoint(e,-5)},"-5°"),n.createElement("div",{className:"joint-degrees"},this.radianToDegrees(t).toFixed(2),"°"),n.createElement("button",{onClick:()=>this.moveJoint(e,5)},"+5°"),n.createElement("button",{onClick:()=>this.moveJoint(e,15)},"+15°"))));return n.createElement("div",null,n.createElement("span",null,"Joints"),n.createElement("div",{className:"input-container"},t))}moveJoint(t,e){let r=this.state.joints.map((t=>this.radianToDegrees(t)));r[t]+=e;let i=new Ul(r,this.robotData);this._networkOperator.enqueueCommand(i)}render(){return n.createElement("div",{className:"debug-operator-container"},n.createElement("div",{className:"camera-view"},n.createElement("img",{width:"854",height:"480",src:this.state.imageData}),n.createElement("div",{className:"debug-command-container",onContextMenu:t=>(t.stopPropagation(),t.preventDefault(),!1)},n.createElement("div",{className:"command-input"},n.createElement("div",{className:"command-input-item"},n.createElement("span",null,"Command name"),n.createElement("input",{onChange:t=>{this.setState({commandNameInput:t.target.value})},value:this.state.commandNameInput})),n.createElement("div",{className:"command-input-item"},n.createElement("span",null,"Command OP"),n.createElement("input",{value:this.state.commandOpInput,onChange:t=>{this.setState({commandOpInput:t.target.value})}})),n.createElement("button",{style:{marginTop:10},onClick:()=>this.addCommand()},"Add command")),n.createElement("div",{className:"command-item-container"},this.state.commandList.map((t=>n.createElement("div",{id:t.name,className:"command-item",onClick:()=>{this._networkOperator.enqueueCommand({op:t.op,source:ml.getInstance().source+" "+this.state.accessToken})}},n.createElement("span",null,t.name),n.createElement("div",{className:"command-item-icon",onClick:e=>{e.stopPropagation(),this.removeCommand(t.name)}},n.createElement("svg",{width:10,"aria-hidden":"true",focusable:"false","data-prefix":"fas","data-icon":"xmark",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 320 512"},n.createElement("path",{fill:"currentColor",d:"M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"}))))))))),n.createElement("div",{className:"controls"},n.createElement("div",{className:"operator-buttons"},this.renderJoints(),n.createElement("span",null,"Vacuum"),n.createElement("div",{className:"input-container vacuum"},n.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_on"),disabled:!this.state.connected},"On"),n.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_off"),disabled:!this.state.connected},"Off")),n.createElement("span",null,"Calibration"),n.createElement("div",{className:"input-container calibration"},n.createElement("div",null,n.createElement("button",{onClick:()=>this.calibrationStart(),disabled:!this.state.connected},"Start calibration"),n.createElement("button",{onClick:this.sendOpClosure("calibration/tag_detection"),disabled:!this.state.connected},"Detect tags")),this.renderTagButtons(),n.createElement("div",null,n.createElement("button",{onClick:()=>this.finishCalibration(),disabled:!this.canFinishCalibration()},"Finish calibration"))),n.createElement("div",{className:"debug-operator-info-container"},n.createElement("span",null,`FPS: ${this.state.fps.toFixed(2)}`),n.createElement("span",null,`State: ${this.state.state_machine}`))),n.createElement("div",null,n.createElement("button",{className:"btn-send-home",onClick:this.sendOpClosure("go_home_safely"),disabled:!this.state.connected},"Send home")),n.createElement("div",{className:"depth-view"},n.createElement("img",{width:"320",height:"180",src:this.state.depthData}))))}}})(),__webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,