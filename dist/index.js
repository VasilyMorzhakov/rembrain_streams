/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e(require("react")):"function"==typeof define&&define.amd?define(["react"],e):"object"==typeof exports?exports.rembrain_streams=e(require("react")):t.rembrain_streams=e(t.React)}(self,(function(__WEBPACK_EXTERNAL_MODULE__359__){return(()=>{var __webpack_modules__={1516:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.RembrainImage=void 0;var n,i=r(359),o=(n=i)&&n.__esModule?n:{default:n};e.RembrainImage=function(t){var e=t.token,r=t.url,n=t.width,s=t.height,a=t.alt,h=void 0===a?"Image":a,l=t.onLoad,u=void 0===l?function(){}:l,c=t.onError,f=void 0===c?function(){}:c,d=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}((0,i.useState)(""),2),p=d[0],m=d[1];return(0,i.useEffect)((function(){r&&fetch(r,{headers:{Authorization:e}}).then((function(t){t.blob().then((function(t){var e=t,r=(window.URL||window.webkitURL).createObjectURL(e);m(r)}))})).catch(f)}),[r]),o.default.createElement("img",{onLoad:u,src:p&&p,id:"rembrainImage",className:"rembrain-image",width:n,height:s,alt:h||""})}},1065:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(359),i=a(n),o=a(r(6655)),s=r(6042);function a(t){return t&&t.__esModule?t:{default:t}}e.default=(0,s.WsHOC)((function(t){var e=t.maxWidth,r=t.minWidth,s=t.aspectRatio,a=t.placeholderText,h=void 0===a?"No Image":a,l=t.image,u=void 0,c=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}((0,n.useState)(!1),2),f=c[0],d=c[1],p=(0,n.useRef)(null),m=function(){var t=p.current;if(t){var e=t.getContext("2d");e&&e.drawImage(l,0,0,t.width,t.height)}},g=function(){clearTimeout(u),d(!1),u=setTimeout((function(){var t=p.current;t&&((0,o.default)(t),d(!0),l.src||w())}),500)},w=function(){var t=p.current;if(t){var e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(h,t.width/2,t.height/2))}};return(0,n.useEffect)((function(){var t=p.current;return t&&((0,o.default)(t),m(),d(!0),window.addEventListener("resize",g,!1)),function(){window.removeEventListener("resize",g,!1)}}),[]),(0,n.useEffect)((function(){m(),l.src||w()}),[l]),i.default.createElement("div",{style:{aspectRatio:s.toString(),maxWidth:e,minWidth:r,padding:0,margin:0,position:"relative"}},i.default.createElement("canvas",{style:f?{}:{display:"none"},ref:p}))}))},7935:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n,i=r(359),o=(n=i)&&n.__esModule?n:{default:n},s=r(6042);e.default=(0,s.WsHOC)((function(t){var e=t.posX,r=void 0===e?0:e,n=t.posY,s=void 0===n?0:n,a=t.width,h=t.height,l=t.placeholderText,u=void 0===l?"No Image":l,c=t.image,f=void 0===c?new Image:c,d=(0,i.useRef)(null);return(0,i.useEffect)((function(){!function(){var t=d.current;if(t){var e=t.getContext("2d");e&&e.drawImage(f,r,s,a,h)}}(),f.src||function(){var t=d.current;if(t){var e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(u,t.width/2,t.height/2))}}()}),[f]),o.default.createElement("canvas",{ref:d,width:a,height:h})}))},6042:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WsHOC=void 0;var n=function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var s,a=t[Symbol.iterator]();!(n=(s=a.next()).done)&&(r.push(s.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&a.return&&a.return()}finally{if(i)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")},i=r(359),o=a(i),s=a(r(8782));function a(t){return t&&t.__esModule?t:{default:t}}var h=function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t);var r=e.toString(),n=new Blob(["("+r+")()"]);return new Worker(URL.createObjectURL(n))};e.WsHOC=function(t){return function(e){var r=e.isOn,a=void 0===r||r,l=e.token,u=e.websocketURL,c=e.robotName,f=e.exchange,d=void 0===f?"rgbjpeg":f,p=e.handleError,m=void 0===p?function(t){console.log({error:t})}:p,g=function(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&Object.prototype.propertyIsEnumerable.call(t,n[i])&&(r[n[i]]=t[n[i]])}return r}(e,["isOn","token","websocketURL","robotName","exchange","handleError"]),w=(0,i.useState)(new Image),b=n(w,2),y=b[0],v=b[1],x=(0,i.useState)(null),_=n(x,2),k=_[0],A=_[1];return(0,i.useEffect)((function(){var t=void 0;return(t=new h(s.default)).addEventListener("message",(function(t){var e=t.data,r=e.type,n=e.payload;switch(console.log("it's updated"),r){case"image":var i=new Image;return void(n?(i.src=n,i.onload=function(){v(i)}):v(i));case"error":return void m(n);default:return void console.log(e)}})),A(t),function(){t.postMessage({type:"close"}),t.terminate()}}),[]),(0,i.useEffect)((function(){if(k)if(a){var t={command:"pull",exchange:d,accessToken:l,robot_name:c};k.postMessage({type:"open",payload:JSON.stringify(t),url:u})}else k.postMessage({type:"close"})}),[c,d,l,a,k]),o.default.createElement(t,Object.assign({image:y},g))}}},8782:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};e.default=function(){var t=null,e=function e(n,i){var o,s;t&&(t.onopen=function(){t.send(n)},t.onmessage=(o=regeneratorRuntime.mark((function t(e){var n,i,o,s,a,h;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,"object"!==(void 0===(n=e.data)?"undefined":r(n))){t.next=29;break}return t.t0=Uint8Array,t.next=6,n.slice(0,1).arrayBuffer();case 6:if(t.t1=t.sent,i=new t.t0(t.t1)[0],o=null,2!==i){t.next=18;break}return t.t2=Uint32Array,t.next=13,n.slice(1,13).arrayBuffer();case 13:t.t3=t.sent,s=new t.t2(t.t3),o=n.slice(9,9+s[0]),t.next=26;break;case 18:if(1!==i){t.next=26;break}return a=13,t.t4=Uint32Array,t.next=23,n.slice(1,a).arrayBuffer();case 23:t.t5=t.sent,h=new t.t4(t.t5),o=n.slice(a,a+h[0]);case 26:o&&o.arrayBuffer().then((function(t){for(var e=new Uint8Array(t),r="",n=0;n<5;n++){var i=e.length/5;r+=String.fromCharCode.apply(null,e.slice(i*n,i*(n+1)))}var o=btoa(r);postMessage({type:"image",payload:"data:image/jpg;base64,"+o})})),t.next=30;break;case 29:postMessage("Websocket received message: "+n);case 30:t.next=35;break;case 32:t.prev=32,t.t6=t.catch(0),postMessage({type:"error",payload:t.t6});case 35:case"end":return t.stop()}}),t,void 0,[[0,32]])})),s=function(){var t=o.apply(this,arguments);return new Promise((function(e,r){return function n(i,o){try{var s=t[i](o),a=s.value}catch(t){return void r(t)}if(!s.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));e(a)}("next")}))},function(t){return s.apply(this,arguments)}),t.onclose=function(r){"stay down"!==r.reason?(t=new WebSocket(i),e(n,i)):postMessage({type:"image",payload:null})},t.onerror=function(t){postMessage({type:"error",payload:t})})};self.addEventListener("message",(function(r){var n=r.data,i=n.type,o=n.payload,s=n.url;switch(i){case"open":return t&&t.close(1e3,"stay down"),t=new WebSocket(s),void e(o,s);case"close":return void(t&&(t.close(1e3,"stay down"),t=null))}}))}},8083:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();function n(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}e.SetCommandOperatorValue=function(t){i.getInstance().source=t};var i=e.CommandSettings=function(){function t(){n(this,t),this.source="operator"}return r(t,null,[{key:"getInstance",value:function(){return t.instance||(t.instance=new t),t.instance}}]),t}();e.CommandBase=function t(e,r){n(this,t),this.source=i.getInstance().source,this.timestamp=Date.now(),this.op=e,this.frame_timestamp=r.frameindex,this.timestamp=r.time}},828:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandGoto=void 0;var n=r(8083);e.CommandGoto=function(t){function e(t,r,n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"goto",t));if(o.pick_point=void 0,o.pos=void 0,o.object_rect=void 0,r&&(o.pick_point=[r.x,r.y]),n&&(o.object_rect=[[n.TopLeft.x,n.TopLeft.y],[n.BottomRight.x,n.BottomRight.y]]),i&&r){var s=i*t.depth_unit;if(s){var a=(r.x-t.ppx)*s/t.fx,h=(r.y-t.ppy)*s/t.fy;o.pos=[a,h,s]}}return o}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(n.CommandBase)},6429:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandSetJoints=void 0;var n=r(8083);e.CommandSetJoints=function(t){function e(t,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"setJ",r));return n.joints=t,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(n.CommandBase)},4342:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandSetTag=void 0;var n=r(8083);e.CommandSetTag=function(t){function e(t,r){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var n=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"calibration/set-tag",r));return n.tag_id=t,n}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(n.CommandBase)},7814:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.CommandWaitForIdle=void 0;var n=r(8083);e.CommandWaitForIdle=function(t){function e(t){return function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e),function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,"wait-for-idle",t))}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),e}(n.CommandBase)},6760:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(828);Object.defineProperty(e,"CommandGoto",{enumerable:!0,get:function(){return n.CommandGoto}});var i=r(4342);Object.defineProperty(e,"CommandSetTag",{enumerable:!0,get:function(){return i.CommandSetTag}});var o=r(7814);Object.defineProperty(e,"CommandWaitForIdle",{enumerable:!0,get:function(){return o.CommandWaitForIdle}});var s=r(6429);Object.defineProperty(e,"CommandSetJoints",{enumerable:!0,get:function(){return s.CommandSetJoints}})},5319:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();e.Rectangle=function(){function t(e,r,n,i){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.x=e,this.y=r,this.w=n,this.h=i}return r(t,[{key:"TopLeft",get:function(){return{x:this.x,y:this.y}}},{key:"TopRight",get:function(){return{x:this.x+this.w,y:this.y}}},{key:"BottomLeft",get:function(){return{x:this.x,y:this.y+this.h}}},{key:"BottomRight",get:function(){return{x:this.x+this.w,y:this.y+this.h}}},{key:"Center",get:function(){return{x:this.x+.5*this.w,y:this.y+.5*this.h}}},{key:"CenterTop",get:function(){return{x:this.x+.5*this.w,y:this.y}}},{key:"CenterBottom",get:function(){return{x:this.x+.5*this.w,y:this.y+this.h}}}],[{key:"fromPoints",value:function(e,r){var n={x:Math.min(e.x,r.x),y:Math.min(e.y,r.y)},i=Math.max(e.x,r.x),o=Math.max(e.y,r.y);return new t(n.x,n.y,i-n.x,o-n.y)}}]),t}()},9746:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.WebSocketImageReceiver=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=r(9666),o=r(6157),s=r(8764);e.WebSocketImageReceiver=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.imageSubject=new i.ReplaySubject(1),this.depthSubject=new i.ReplaySubject(1),this.dataSubject=new i.ReplaySubject(1),this.onDataOpen=function(t){console.log("Data Websocket Opened",t),r.sendDataInitPacket()},this.onDataClosed=function(t){console.log("Data Websocket Closed",t),console.log("Trying to open the websocket again"),r.openDataWebsocket()},this.onDataError=function(t){console.log("Data Websocket Error",t)},this.onDataMessage=function(t){r.unpackData(t.data)},this.stateSubject=new i.ReplaySubject(1),this.onStateClosed=function(t){console.log("State Websocket Closed",t),console.log("Trying to open the websocket again"),r.openStateWebsocket()},this.onStateOpen=function(t){console.log("State Websocket Opened",t),r.sendStateInitPacket()},this.onStateError=function(t){console.log("State Websocket Error",t)},this.onStateMessage=function(t){r.unpackState(t.data)},this.dataURL=e.dataWSUrl,this.robotName=e.robotName,this.accessToken=e.accessToken,this.openDataWebsocket(),this.openStateWebsocket()}var e,r;return n(t,[{key:"openDataWebsocket",value:function(){this.dataWebsocket=new WebSocket(this.dataURL),this.dataWebsocket.onopen=this.onDataOpen,this.dataWebsocket.onclose=this.onDataClosed,this.dataWebsocket.onerror=this.onDataError,this.dataWebsocket.onmessage=this.onDataMessage}},{key:"sendDataInitPacket",value:function(){var t={command:"pull",exchange:"camera0",robot_name:this.robotName,accessToken:this.accessToken};this.dataWebsocket.send(JSON.stringify(t))}},{key:"unpackData",value:(e=regeneratorRuntime.mark((function t(e){var r,n,i,a,h,l,u,c=this;return regeneratorRuntime.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if("string"!=typeof e){t.next=3;break}return console.error("Error unpacking video feed:",e),t.abrupt("return");case 3:return t.t0=Uint8Array,t.next=6,e.slice(0,1).arrayBuffer();case 6:if(t.t1=t.sent,1!==(r=new t.t0(t.t1)[0])){t.next=23;break}return n=13,t.t2=Uint32Array,t.next=13,e.slice(1,n).arrayBuffer();case 13:t.t3=t.sent,i=new t.t2(t.t3),a=e.slice(n,n+i[0]),h=e.slice(n+i[0],n+i[0]+i[1]),l=e.slice(n+i[0]+i[1],n+i[0]+i[1]+i[2]),a.arrayBuffer().then((function(t){var e={data:s.Buffer.from(t),type:"image/jpg"};c.imageSubject.next(e)}),(function(t){return console.log("Error while sending image:",t)})),h.arrayBuffer().then((function(t){return o.Image.load(t)}),(function(t){return console.log("Error while loading depth map: ",t)})).then((function(t){t&&c.depthSubject.next(t)})),l.text().then((function(t){return c.dataSubject.next(JSON.parse(t))}),(function(t){return console.log("Error while getting status:",t)})),t.next=34;break;case 23:if(2!==r){t.next=33;break}return t.t4=Uint32Array,t.next=27,e.slice(1,13).arrayBuffer();case 27:t.t5=t.sent,u=new t.t4(t.t5),e.slice(9,9+u[0]).arrayBuffer().then((function(t){var e={data:s.Buffer.from(t),type:"image/jpg"};c.imageSubject.next(e)})),t.next=34;break;case 33:console.log("Data type "+r+" isn't JPG+PNG(1)");case 34:case"end":return t.stop()}}),t,this)})),r=function(){var t=e.apply(this,arguments);return new Promise((function(e,r){return function n(i,o){try{var s=t[i](o),a=s.value}catch(t){return void r(t)}if(!s.done)return Promise.resolve(a).then((function(t){n("next",t)}),(function(t){n("throw",t)}));e(a)}("next")}))},function(t){return r.apply(this,arguments)})},{key:"openStateWebsocket",value:function(){this.stateWebsocket=new WebSocket(this.dataURL),this.stateWebsocket.onopen=this.onStateOpen,this.stateWebsocket.onclose=this.onStateClosed,this.stateWebsocket.onerror=this.onStateError,this.stateWebsocket.onmessage=this.onStateMessage}},{key:"sendStateInitPacket",value:function(){var t={command:"pull",exchange:"state",robot_name:this.robotName,accessToken:this.accessToken};this.stateWebsocket.send(JSON.stringify(t))}},{key:"unpackState",value:function(t){var e=this;"string"!=typeof t?t.text().then((function(t){return e.stateSubject.next(JSON.parse(t))})):console.error("Error unpacking robot state:",t)}},{key:"shutdown",value:function(){this.dataWebsocket.onclose=null,this.stateWebsocket.onclose=null,this.dataWebsocket.close(),this.stateWebsocket.close()}}]),t}()},7275:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();e.NetworkOperator=function(){function t(e){var r=this;!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.messageQueue=[],this.onWSClosed=function(t){console.debug("Command Websocket Closed",t),console.debug("Trying to open the websocket again"),r.openWebsocket()},this.onWSOpen=function(t){console.debug("Command Websocket Opened",t),r.messageQueue.length&&(console.log("There are unsent messages in the queue, sending them"),r.sendQueuedCommands())},this.onWSError=function(t){console.log("Command Websocket Error",t)},this.onWSMessage=function(t){r.unpackData(t.data)},this.settings=e,this.openWebsocket()}return r(t,[{key:"enqueueCommand",value:function(t){var e={command:"push",exchange:"commands",robot_name:this.settings.robotName,message:t,accessToken:this.settings.accessToken};console.log({messageObj:e}),console.log("Enqueuing command:",t),this.messageQueue.push(e),this.sendQueuedCommands()}},{key:"sendQueuedCommands",value:function(){if(0!=this.messageQueue.length)for(;this.messageQueue.length&&this.commandWebsocket.readyState===WebSocket.OPEN;){var t=this.messageQueue.shift();console.debug("Sending:",t),this.commandWebsocket.send(JSON.stringify(t))}}},{key:"openWebsocket",value:function(){this.commandWebsocket=new WebSocket(this.settings.dataWSUrl),this.commandWebsocket.onopen=this.onWSOpen,this.commandWebsocket.onclose=this.onWSClosed,this.commandWebsocket.onerror=this.onWSError,this.commandWebsocket.onmessage=this.onWSMessage}},{key:"unpackData",value:function(t){"string"!=typeof t?t.text().then((function(t){return console.log(JSON.parse(t))})):console.log("Command answer:",t)}},{key:"shutdown",value:function(){this.commandWebsocket.onclose=null,this.commandWebsocket.close(),this.commandWebsocket=null}}]),t}()},1953:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OperatorCanvas=void 0;var n,i,o=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),s=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}(r(359)),a=r(5319),h=r(9746),l=r(7275),u=r(9666),c=r(6760),f=r(3232);e.OperatorCanvas=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));return r.robotState=void 0,r.hasImage=!1,r.img=document.createElement("img"),r.subscriptions=[],r.selectionSubject=new u.BehaviorSubject(void 0),r.releaseEventHandler=function(t){2!=t.button&&(r.selectionStart=null,r.selection&&(r.selectionSubject.next(r.selection),r.medianPoint=r.selection.Center),r.redraw())},r.keyPressEventHandler=function(t){" "==t.key&&r.sendCommand()},r.pressEventHandler=function(t){var e=r.getXY(t);2==t.button?(r.medianPoint=e,r.redrawDepth(r.selection)):(r.selection=null,r.selectionStart=e),r.redraw()},r.dragEventHandler=function(t){var e=r.getXY(t);r.mousePos=e,r.selectionStart&&(r.selection=a.Rectangle.fromPoints(r.selectionStart,e)),r.redraw(),t.preventDefault()},r.settings={dataWSUrl:t.dataWSUrl,robotName:t.robotName,accessToken:t.accessToken},r.canvasRef=s.createRef(),r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),o(e,[{key:"render",value:function(){return s.createElement("canvas",{ref:this.canvasRef,width:"1280",height:"720",onContextMenu:function(t){t.preventDefault()},tabIndex:1,onMouseDown:this.pressEventHandler,onMouseMove:this.dragEventHandler,onMouseUp:this.releaseEventHandler,onKeyUp:this.keyPressEventHandler})}},{key:"componentDidMount",value:function(){var t=this;this.depthCanvas=document.createElement("canvas"),this.depthCanvas.width=1280,this.depthCanvas.height=720,this._imageReceiver=new h.WebSocketImageReceiver(this.settings),this._networkOperator=new l.NetworkOperator(this.settings),this.img.onload=function(){return t.redraw()},this.subscriptions.push(this.selectionSubject.subscribe((function(e){return t.redrawDepth(e)})),this._imageReceiver.imageSubject.subscribe((function(e){return t.setVideoFeed(e)})),this._imageReceiver.depthSubject.subscribe((function(e){return t.setDepthData(e)})),this._imageReceiver.dataSubject.subscribe((function(e){return t.updateStatus(e)})),this._imageReceiver.stateSubject.pipe((0,f.distinctUntilKeyChanged)("state_machine"),(0,f.throttleTime)(1e3)).subscribe((function(e){return t.updateState(e)})))}},{key:"componentWillUnmount",value:function(){var t,e;null===(t=this._imageReceiver)||void 0===t||t.shutdown(),null===(e=this._networkOperator)||void 0===e||e.shutdown(),this.subscriptions.forEach((function(t){return t.unsubscribe()})),this.subscriptions=[]}},{key:"setVideoFeed",value:function(t){if(void 0!==t){this.hasImage=!0;var e=t.data.toString("base64");this.img.src="data:"+t.type+";base64,"+e}else this.hasImage=!1}},{key:"setDepthData",value:function(t){this.depthData=t,this.redrawDepth(this.selection),this.redraw()}},{key:"updateStatus",value:function(t){this.robotData=t}},{key:"updateState",value:function(t){this.robotState=t,this.redraw()}},{key:"redraw",value:function(){var t=this.canvasRef.current;if(t){var e=t.getContext("2d");if(this.hasImage){if(e.drawImage(this.img,0,0,1280,720),e.save(),e.globalCompositeOperation="screen",e.drawImage(this.depthCanvas,0,0),e.restore(),this.selection){this.SetCanvasStyle(e,i.SelectionRectangle);var r=this.selection;this.doCanvasRect(e,n.Stroke,r)}this.medianPoint&&(this.SetCanvasStyle(e,i.MedianPoint),e.beginPath(),e.arc(this.medianPoint.x,this.medianPoint.y,10,0,2*Math.PI),e.fill(),e.stroke(),e.closePath()),this.mousePos&&(this.SetCanvasStyle(e,i.Crosshair),e.beginPath(),e.moveTo(0,this.mousePos.y),e.lineTo(t.width,this.mousePos.y),e.stroke(),e.closePath(),e.beginPath(),e.moveTo(this.mousePos.x,0),e.lineTo(this.mousePos.x,t.height),e.stroke(),e.closePath())}else{this.SetCanvasStyle(e,i.NoImage_BG),e.fillRect(0,0,t.width,t.height);var o=new a.Rectangle(0,0,t.width,t.height);this.SetCanvasStyle(e,i.NoImage_Text),e.fillText("No Image",o.Center.x,o.Center.y)}this.SetCanvasStyle(e,i.PlaqueBackground);var s=new a.Rectangle((t.offsetWidth-500)/2,t.offsetHeight-60,500,60);if(this.doCanvasRect(e,n.Fill,s),this.robotState){var h=this.robotState.state_machine;this.SetCanvasStyle(e,i.PlaqueText),e.fillText(h,s.Center.x,s.Center.y)}this.SetCanvasStyle(e,i.Border),e.strokeRect(0,0,t.width,t.height)}}},{key:"redrawDepth",value:function(t){if(!this.selectionStart&&this.medianPoint){var e=this.depthCanvas,r=e.getContext("2d");r.clearRect(0,0,e.width,e.height);var n=this.canvasRef.current;if(t&&this.depthData&&(t.x+t.w>n.width&&(t.w=n.width-t.x),t.y+t.h>n.height&&(t.h=n.height-t.y),this.selection.w*this.selection.h!=0)){var i=this.depthData.crop({x:t.x,y:t.y,width:t.w,height:t.h}),o=this.getMedianForPoint(this.depthData,this.medianPoint);this.medianPointValue=o;for(var s=this.calculateDepthDevColors(o,30),a=new Uint8ClampedArray(4*i.size),h=new ImageData(t.w,t.h),l=0;l<i.size;l++){var u=i.getPixel(l)[0];if(s.has(u))for(var c=s.get(u),f=0;f<4;f++)a[4*l+f]=c[f]}h.data.set(a),r.putImageData(h,t.x,t.y)}}}},{key:"getMedianForPoint",value:function(t,e){var r=e.x-5;r<0&&(r=0);var n=e.y-5;n<0&&(n=0);var i=r+10<t.width?10:t.width-r,o=n+10<t.height?10:t.height-n;return t.crop({x:r,y:n,width:i,height:o}).median[0]}},{key:"calculateDepthDevColors",value:function(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:20,r=new Map,n=[255,0,0,255],i=[255,255,0,255],o=[0,255,0,255],s=t-e;s<t;s++){var a=(s-(t-e))/e,h=[n[0]+a*(i[0]-n[0]),n[1]+a*(i[1]-n[1]),n[2]+a*(i[2]-n[2]),255];r.set(s,h)}for(var l=t;l<=t+e;l++){var u=(l-t)/e,c=[i[0]+u*(o[0]-i[0]),i[1]+u*(o[1]-i[1]),i[2]+u*(o[2]-i[2]),255];r.set(l,c)}return r}},{key:"sendCommand",value:function(){var t=new c.CommandGoto(this.robotData,this.medianPoint,this.selection,this.medianPointValue);this._networkOperator.enqueueCommand(t);var e=new c.CommandWaitForIdle(this.robotData);this._networkOperator.enqueueCommand(e)}},{key:"getXY",value:function(t){var e=t.pageX,r=t.pageY;return{x:e-=this.canvasRef.current.offsetLeft,y:r-=this.canvasRef.current.offsetTop}}},{key:"doCanvasRect",value:function(t,e,r){var i=r.x,o=r.y,s=r.w,a=r.h;switch(e){case n.Fill:t.fillRect(i,o,s,a);break;case n.Stroke:t.strokeRect(i,o,s,a)}}},{key:"SetCanvasStyle",value:function(t,e){switch(e){case i.Border:t.strokeStyle="green",t.lineWidth=20;break;case i.SelectionRectangle:t.strokeStyle="red",t.lineWidth=7;break;case i.PlaqueBackground:t.fillStyle="black";break;case i.PlaqueText:t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",t.font="bold 48px sans-serif";break;case i.Crosshair:t.strokeStyle="white",t.lineWidth=2;break;case i.MedianPoint:t.fillStyle="#aaaaaa99",t.strokeStyle="#000000bb",t.lineWidth=1;break;case i.NoImage_BG:t.fillStyle="#aaaaaa";break;case i.NoImage_Text:t.fillStyle="#eeeeee",t.font="bold 200px sans-serif",t.textAlign="center",t.textBaseline="middle"}}}]),e}(s.Component),function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(n||(n={})),function(t){t[t.Border=0]="Border",t[t.Crosshair=1]="Crosshair",t[t.SelectionRectangle=2]="SelectionRectangle",t[t.PlaqueBackground=3]="PlaqueBackground",t[t.PlaqueText=4]="PlaqueText",t[t.MedianPoint=5]="MedianPoint",t[t.NoImage_BG=6]="NoImage_BG",t[t.NoImage_Text=7]="NoImage_Text"}(i||(i={}))},7282:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OperatorDebug=void 0;var n=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),i=function(t){if(t&&t.__esModule)return t;var e={};if(null!=t)for(var r in t)Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e.default=t,e}(r(359)),o=r(8083),s=r(6429),a=r(4342),h=r(9746),l=r(7275);function u(t){if(Array.isArray(t)){for(var e=0,r=Array(t.length);e<t.length;e++)r[e]=t[e];return r}return Array.from(t)}r(6948),e.OperatorDebug=function(t){function e(t){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var r=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,(e.__proto__||Object.getPrototypeOf(e)).call(this,t));r.subscriptions=[],r.lastFrameDate=Date.now(),r.radianToDegrees=function(t){return 180*t/Math.PI},r.degreesToRadian=function(t){return t*Math.PI/180},r.sendOp=function(t){return r._networkOperator.enqueueCommand(new o.CommandBase(t,r.robotData))},r.sendOpClosure=function(t){return function(){return r.sendOp(t)}};var n={};return[6,8,10].map((function(t){return n[t]=!1})),r.state={wsUrl:r.props.dataWSUrl,robotName:r.props.robotName,accessToken:r.props.accessToken,fps:0,depthData:void 0,imageData:void 0,connected:!1,isCalibrating:!1,tagsCalibrated:n,joints:[],commandList:[],commandNameInput:"",commandOpInput:"",state_machine:""},r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):t.__proto__=e)}(e,t),n(e,[{key:"connectionSettingChanged",value:function(t){var e,r,n;this.setState(Object.assign(Object.assign({},this.state),(e={},r=t.target.name,n=t.target.value,r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e)))}},{key:"componentWillUnmount",value:function(){this.disconnect()}},{key:"componentDidMount",value:function(){this.connect();var t=JSON.parse(localStorage.getItem("rembrain_debug_operator_commands"));t&&this.setState({commandList:t})}},{key:"addCommand",value:function(){var t=this.state,e=t.commandNameInput,r=t.commandOpInput;if(e&&r){var n=[].concat(u(this.state.commandList),[{name:e,op:r}]);this.setState({commandList:n}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(n)),this.setState({commandNameInput:"",commandOpInput:""})}}},{key:"removeCommand",value:function(t){var e=this.state.commandList.findIndex((function(e){return e.name===t})),r=this.state.commandList,n=[].concat(u(r.slice(0,e)),u(r.slice(e+1)));this.setState({commandList:n}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(n))}},{key:"connect",value:function(){var t=this,e={accessToken:this.state.accessToken,dataWSUrl:this.state.wsUrl,robotName:this.state.robotName},r=new l.NetworkOperator(e),n=new h.WebSocketImageReceiver(e);this.subscriptions.push(n.imageSubject.subscribe((function(e){return t.gotCameraData(e)}))),this.subscriptions.push(n.depthSubject.subscribe((function(e){return t.gotDepthData(e)}))),this.subscriptions.push(n.stateSubject.subscribe((function(e){return t.gotRobotState(e)}))),this.subscriptions.push(n.dataSubject.subscribe((function(e){return t.gotRobotData(e)}))),this._imageReceiver=n,this._networkOperator=r,this.setState({connected:!0})}},{key:"disconnect",value:function(){var t,e;null===(t=this._networkOperator)||void 0===t||t.shutdown(),null===(e=this._imageReceiver)||void 0===e||e.shutdown(),this.subscriptions.forEach((function(t){return t.unsubscribe()})),this.subscriptions=[],this.setState({connected:!1,isCalibrating:!1,joints:[]})}},{key:"gotCameraData",value:function(t){if(void 0!==t){var e=t.data.toString("base64");this.setState({imageData:"data:"+t.type+";base64,"+e}),this.recalculateFPS()}}},{key:"recalculateFPS",value:function(){var t=Date.now(),e=1e3/(t-this.lastFrameDate);this.lastFrameDate=t,this.setState({fps:e})}},{key:"gotDepthData",value:function(t){t.multiply(64);var e=t.toBase64();this.setState({depthData:"data:image/png;base64,"+e})}},{key:"gotRobotState",value:function(t){void 0!==t&&(this.robotState=t,this.robotState.joints&&this.setState({joints:t.joints,state_machine:t.state_machine}))}},{key:"gotRobotData",value:function(t){void 0!==t&&(this.robotData=t)}},{key:"calibrationStart",value:function(){this.sendOp("ask_for_manual"),this.sendOp("calibration/tag_detection"),this.resetTagState(),this.setState({isCalibrating:!0})}},{key:"canFinishCalibration",value:function(){if(!this.state.isCalibrating)return!1;var t=this.state.tagsCalibrated;return 0==Object.keys(t).filter((function(e){return!t[e]})).length}},{key:"finishCalibration",value:function(){this.sendOp("calibartion/tag_calibration"),this.sendOp("ask_for_idle"),this.resetTagState(),this.setState({isCalibrating:!1})}},{key:"resetTagState",value:function(){var t=this.state.tagsCalibrated;Object.keys(t).forEach((function(e){return t[e]=!1})),this.setState({tagsCalibrated:t})}},{key:"detectCalibrationTags",value:function(){this.sendOp("calibration/tag_detection")}},{key:"tagClicked",value:function(t){var e=new a.CommandSetTag(Number(t),this.robotData);this._networkOperator.enqueueCommand(e);var r=this.state.tagsCalibrated;r[t]=!0,this.setState({tagsCalibrated:r})}},{key:"renderTagButtons",value:function(){var t=this,e=Object.keys(this.state.tagsCalibrated),r=e.map((function(e){return i.createElement("button",{onClick:function(){return t.tagClicked(e)},key:e,disabled:!t.state.isCalibrating},t.state.tagsCalibrated[e]?"Reset":"Tag"," #",e)}));return i.createElement("div",{className:"tags",style:{gridTemplateColumns:"repeat("+e.length+", 1fr)"}},r)}},{key:"renderJoints",value:function(){var t=this;if(0!=this.state.joints.length){var e=this.state.joints.map((function(e,r){return i.createElement("div",{key:r,className:"joint-controls "},i.createElement("div",{className:"joint-num"},r,":"),i.createElement("button",{onClick:function(){return t.moveJoint(r,-15)}},"-15°"),i.createElement("button",{onClick:function(){return t.moveJoint(r,-5)}},"-5°"),i.createElement("div",{className:"joint-degrees"},t.radianToDegrees(e).toFixed(2),"°"),i.createElement("button",{onClick:function(){return t.moveJoint(r,5)}},"+5°"),i.createElement("button",{onClick:function(){return t.moveJoint(r,15)}},"+15°"))}));return i.createElement("div",null,i.createElement("span",null,"Joints"),i.createElement("div",{className:"input-container"},e))}}},{key:"moveJoint",value:function(t,e){var r=this,n=this.state.joints.map((function(t){return r.radianToDegrees(t)}));n[t]+=e;var i=new s.CommandSetJoints(n,this.robotData);this._networkOperator.enqueueCommand(i)}},{key:"render",value:function(){var t=this;return i.createElement("div",{className:"debug-operator-container"},i.createElement("div",{className:"camera-view"},i.createElement("img",{width:"854",height:"480",src:this.state.imageData}),i.createElement("div",{className:"debug-command-container",onContextMenu:function(t){return t.stopPropagation(),t.preventDefault(),!1}},i.createElement("div",{className:"command-input"},i.createElement("div",{className:"command-input-item"},i.createElement("span",null,"Command name"),i.createElement("input",{onChange:function(e){t.setState({commandNameInput:e.target.value})},value:this.state.commandNameInput})),i.createElement("div",{className:"command-input-item"},i.createElement("span",null,"Command OP"),i.createElement("input",{value:this.state.commandOpInput,onChange:function(e){t.setState({commandOpInput:e.target.value})}})),i.createElement("button",{style:{marginTop:10},onClick:function(){return t.addCommand()}},"Add command")),i.createElement("div",{className:"command-item-container"},this.state.commandList.map((function(e){return i.createElement("div",{id:e.name,className:"command-item",onClick:function(){t._networkOperator.enqueueCommand({op:e.op,source:o.CommandSettings.getInstance().source+" "+t.state.accessToken})}},i.createElement("span",null,e.name),i.createElement("div",{className:"command-item-icon",onClick:function(r){r.stopPropagation(),t.removeCommand(e.name)}},i.createElement("svg",{width:10,"aria-hidden":"true",focusable:"false","data-prefix":"fas","data-icon":"xmark",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 320 512"},i.createElement("path",{fill:"currentColor",d:"M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"}))))}))))),i.createElement("div",{className:"controls"},i.createElement("div",{className:"operator-buttons"},this.renderJoints(),i.createElement("span",null,"Vacuum"),i.createElement("div",{className:"input-container vacuum"},i.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_on"),disabled:!this.state.connected},"On"),i.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_off"),disabled:!this.state.connected},"Off")),i.createElement("span",null,"Calibration"),i.createElement("div",{className:"input-container calibration"},i.createElement("div",null,i.createElement("button",{onClick:function(){return t.calibrationStart()},disabled:!this.state.connected},"Start calibration"),i.createElement("button",{onClick:this.sendOpClosure("calibration/tag_detection"),disabled:!this.state.connected},"Detect tags")),this.renderTagButtons(),i.createElement("div",null,i.createElement("button",{onClick:function(){return t.finishCalibration()},disabled:!this.canFinishCalibration()},"Finish calibration"))),i.createElement("div",{className:"debug-operator-info-container"},i.createElement("span",null,"FPS: "+this.state.fps.toFixed(2)),i.createElement("span",null,"State: "+this.state.state_machine))),i.createElement("div",null,i.createElement("button",{className:"btn-send-home",onClick:this.sendOpClosure("go_home_safely"),disabled:!this.state.connected},"Send home")),i.createElement("div",{className:"depth-view"},i.createElement("img",{width:"320",height:"180",src:this.state.depthData}))))}}]),e}(i.Component)},5426:(t,e,r)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.OperatorDebug=e.OperatorCanvas=void 0;var n=r(1953),i=r(7282);e.OperatorCanvas=n.OperatorCanvas,e.OperatorDebug=i.OperatorDebug},9742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),r=e[0],n=e[1];return 3*(r+n)/4-n},e.toByteArray=function(t){var e,r,o=h(t),s=o[0],a=o[1],l=new i(function(t,e,r){return 3*(e+r)/4-r}(0,s,a)),u=0,c=a>0?s-4:s;for(r=0;r<c;r+=4)e=n[t.charCodeAt(r)]<<18|n[t.charCodeAt(r+1)]<<12|n[t.charCodeAt(r+2)]<<6|n[t.charCodeAt(r+3)],l[u++]=e>>16&255,l[u++]=e>>8&255,l[u++]=255&e;return 2===a&&(e=n[t.charCodeAt(r)]<<2|n[t.charCodeAt(r+1)]>>4,l[u++]=255&e),1===a&&(e=n[t.charCodeAt(r)]<<10|n[t.charCodeAt(r+1)]<<4|n[t.charCodeAt(r+2)]>>2,l[u++]=e>>8&255,l[u++]=255&e),l},e.fromByteArray=function(t){for(var e,n=t.length,i=n%3,o=[],s=16383,a=0,h=n-i;a<h;a+=s)o.push(l(t,a,a+s>h?h:a+s));return 1===i?(e=t[n-1],o.push(r[e>>2]+r[e<<4&63]+"==")):2===i&&(e=(t[n-2]<<8)+t[n-1],o.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),o.join("")};for(var r=[],n=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,o="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,a=o.length;s<a;++s)r[s]=o[s],n[o.charCodeAt(s)]=s;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,n){for(var i,o,s=[],a=e;a<n;a+=3)i=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),s.push(r[(o=i)>>18&63]+r[o>>12&63]+r[o>>6&63]+r[63&o]);return s.join("")}n["-".charCodeAt(0)]=62,n["_".charCodeAt(0)]=63},8764:(t,e,r)=>{"use strict";const n=r(9742),i=r(645),o="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.Buffer=h,e.SlowBuffer=function(t){return+t!=t&&(t=0),h.alloc(+t)},e.INSPECT_MAX_BYTES=50;const s=2147483647;function a(t){if(t>s)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return l(t,e,r)}function l(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|m(t,e);let n=a(r);const i=n.write(t,e);return i!==r&&(n=n.slice(0,i)),n}(t,e);if(ArrayBuffer.isView(t))return function(t){if($(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if($(t,ArrayBuffer)||t&&$(t.buffer,ArrayBuffer))return d(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&($(t,SharedArrayBuffer)||t&&$(t.buffer,SharedArrayBuffer)))return d(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const n=t.valueOf&&t.valueOf();if(null!=n&&n!==t)return h.from(n,e,r);const i=function(t){if(h.isBuffer(t)){const e=0|p(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||H(t.length)?a(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(i)return i;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return u(t),a(t<0?0:0|p(t))}function f(t){const e=t.length<0?0:0|p(t.length),r=a(e);for(let n=0;n<e;n+=1)r[n]=255&t[n];return r}function d(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let n;return n=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(n,h.prototype),n}function p(t){if(t>=s)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s.toString(16)+" bytes");return 0|t}function m(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||$(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,n=arguments.length>2&&!0===arguments[2];if(!n&&0===r)return 0;let i=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return q(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return Z(t).length;default:if(i)return n?-1:q(t).length;e=(""+e).toLowerCase(),i=!0}}function g(t,e,r){let n=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return P(this,e,r);case"utf8":case"utf-8":return E(this,e,r);case"ascii":return C(this,e,r);case"latin1":case"binary":return I(this,e,r);case"base64":return M(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return D(this,e,r);default:if(n)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),n=!0}}function w(t,e,r){const n=t[e];t[e]=t[r],t[r]=n}function b(t,e,r,n,i){if(0===t.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),H(r=+r)&&(r=i?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(i)return-1;r=t.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof e&&(e=h.from(e,n)),h.isBuffer(e))return 0===e.length?-1:y(t,e,r,n,i);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):y(t,[e],r,n,i);throw new TypeError("val must be string, number or Buffer")}function y(t,e,r,n,i){let o,s=1,a=t.length,h=e.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(t.length<2||e.length<2)return-1;s=2,a/=2,h/=2,r/=2}function l(t,e){return 1===s?t[e]:t.readUInt16BE(e*s)}if(i){let n=-1;for(o=r;o<a;o++)if(l(t,o)===l(e,-1===n?0:o-n)){if(-1===n&&(n=o),o-n+1===h)return n*s}else-1!==n&&(o-=o-n),n=-1}else for(r+h>a&&(r=a-h),o=r;o>=0;o--){let r=!0;for(let n=0;n<h;n++)if(l(t,o+n)!==l(e,n)){r=!1;break}if(r)return o}return-1}function v(t,e,r,n){r=Number(r)||0;const i=t.length-r;n?(n=Number(n))>i&&(n=i):n=i;const o=e.length;let s;for(n>o/2&&(n=o/2),s=0;s<n;++s){const n=parseInt(e.substr(2*s,2),16);if(H(n))return s;t[r+s]=n}return s}function x(t,e,r,n){return G(q(e,t.length-r),t,r,n)}function _(t,e,r,n){return G(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,n)}function k(t,e,r,n){return G(Z(e),t,r,n)}function A(t,e,r,n){return G(function(t,e){let r,n,i;const o=[];for(let s=0;s<t.length&&!((e-=2)<0);++s)r=t.charCodeAt(s),n=r>>8,i=r%256,o.push(i),o.push(n);return o}(e,t.length-r),t,r,n)}function M(t,e,r){return 0===e&&r===t.length?n.fromByteArray(t):n.fromByteArray(t.slice(e,r))}function E(t,e,r){r=Math.min(t.length,r);const n=[];let i=e;for(;i<r;){const e=t[i];let o=null,s=e>239?4:e>223?3:e>191?2:1;if(i+s<=r){let r,n,a,h;switch(s){case 1:e<128&&(o=e);break;case 2:r=t[i+1],128==(192&r)&&(h=(31&e)<<6|63&r,h>127&&(o=h));break;case 3:r=t[i+1],n=t[i+2],128==(192&r)&&128==(192&n)&&(h=(15&e)<<12|(63&r)<<6|63&n,h>2047&&(h<55296||h>57343)&&(o=h));break;case 4:r=t[i+1],n=t[i+2],a=t[i+3],128==(192&r)&&128==(192&n)&&128==(192&a)&&(h=(15&e)<<18|(63&r)<<12|(63&n)<<6|63&a,h>65535&&h<1114112&&(o=h))}}null===o?(o=65533,s=1):o>65535&&(o-=65536,n.push(o>>>10&1023|55296),o=56320|1023&o),n.push(o),i+=s}return function(t){const e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);let r="",n=0;for(;n<e;)r+=String.fromCharCode.apply(String,t.slice(n,n+=S));return r}(n)}e.kMaxLength=s,h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,r){return l(t,e,r)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,r){return function(t,e,r){return u(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if($(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),$(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,n=e.length;for(let i=0,o=Math.min(r,n);i<o;++i)if(t[i]!==e[i]){r=t[i],n=e[i];break}return r<n?-1:n<r?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const n=h.allocUnsafe(e);let i=0;for(r=0;r<t.length;++r){let e=t[r];if($(e,Uint8Array))i+e.length>n.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(n,i)):Uint8Array.prototype.set.call(n,e,i);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(n,i)}i+=e.length}return n},h.byteLength=m,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)w(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?E(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const r=e.INSPECT_MAX_BYTES;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},o&&(h.prototype[o]=h.prototype.inspect),h.prototype.compare=function(t,e,r,n,i){if($(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),e<0||r>t.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&e>=r)return 0;if(n>=i)return-1;if(e>=r)return 1;if(this===t)return 0;let o=(i>>>=0)-(n>>>=0),s=(r>>>=0)-(e>>>=0);const a=Math.min(o,s),l=this.slice(n,i),u=t.slice(e,r);for(let t=0;t<a;++t)if(l[t]!==u[t]){o=l[t],s=u[t];break}return o<s?-1:s<o?1:0},h.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},h.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},h.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},h.prototype.write=function(t,e,r,n){if(void 0===e)n="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)n=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}const i=this.length-e;if((void 0===r||r>i)&&(r=i),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");let o=!1;for(;;)switch(n){case"hex":return v(this,t,e,r);case"utf8":case"utf-8":return x(this,t,e,r);case"ascii":case"latin1":case"binary":return _(this,t,e,r);case"base64":return k(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(o)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),o=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function C(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(127&t[i]);return n}function I(t,e,r){let n="";r=Math.min(t.length,r);for(let i=e;i<r;++i)n+=String.fromCharCode(t[i]);return n}function P(t,e,r){const n=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>n)&&(r=n);let i="";for(let n=e;n<r;++n)i+=Q[t[n]];return i}function D(t,e,r){const n=t.slice(e,r);let i="";for(let t=0;t<n.length-1;t+=2)i+=String.fromCharCode(n[t]+256*n[t+1]);return i}function T(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,r,n,i,o){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(r+n>t.length)throw new RangeError("Index out of range")}function B(t,e,r,n,i){V(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,r}function U(t,e,r,n,i){V(e,n,i,t,r,7);let o=Number(e&BigInt(4294967295));t[r+7]=o,o>>=8,t[r+6]=o,o>>=8,t[r+5]=o,o>>=8,t[r+4]=o;let s=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=s,s>>=8,t[r+2]=s,s>>=8,t[r+1]=s,s>>=8,t[r]=s,r+8}function O(t,e,r,n,i,o){if(r+n>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,n,o){return e=+e,r>>>=0,o||O(t,0,r,4),i.write(t,e,r,n,23,4),r+4}function F(t,e,r,n,o){return e=+e,r>>>=0,o||O(t,0,r,8),i.write(t,e,r,n,52,8),r+8}h.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const n=this.subarray(t,e);return Object.setPrototypeOf(n,h.prototype),n},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return n},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t+--e],i=1;for(;e>0&&(i*=256);)n+=this[t+--e]*i;return n},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||T(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||T(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||T(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||T(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||T(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=K((function(t){Y(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||X(t,this.length-8);const n=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,i=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(n)+(BigInt(i)<<BigInt(32))})),h.prototype.readBigUInt64BE=K((function(t){Y(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||X(t,this.length-8);const n=e*2**24+65536*this[++t]+256*this[++t]+this[++t],i=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(n)<<BigInt(32))+BigInt(i)})),h.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=this[t],i=1,o=0;for(;++o<e&&(i*=256);)n+=this[t+o]*i;return i*=128,n>=i&&(n-=Math.pow(2,8*e)),n},h.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||T(t,e,this.length);let n=e,i=1,o=this[t+--n];for(;n>0&&(i*=256);)o+=this[t+--n]*i;return i*=128,o>=i&&(o-=Math.pow(2,8*e)),o},h.prototype.readInt8=function(t,e){return t>>>=0,e||T(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||T(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt16BE=function(t,e){t>>>=0,e||T(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||T(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||T(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=K((function(t){Y(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||X(t,this.length-8);const n=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(n)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=K((function(t){Y(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||X(t,this.length-8);const n=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(n)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||T(t,4,this.length),i.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||T(t,4,this.length),i.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||T(t,8,this.length),i.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||T(t,8,this.length),i.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||R(this,t,e,r,Math.pow(2,8*r)-1,0);let i=1,o=0;for(this[e]=255&t;++o<r&&(i*=256);)this[e+o]=t/i&255;return e+r},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,r,n){t=+t,e>>>=0,r>>>=0,n||R(this,t,e,r,Math.pow(2,8*r)-1,0);let i=r-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+r},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=K((function(t,e=0){return B(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=K((function(t,e=0){return U(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);R(this,t,e,r,n-1,-n)}let i=0,o=1,s=0;for(this[e]=255&t;++i<r&&(o*=256);)t<0&&0===s&&0!==this[e+i-1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},h.prototype.writeIntBE=function(t,e,r,n){if(t=+t,e>>>=0,!n){const n=Math.pow(2,8*r-1);R(this,t,e,r,n-1,-n)}let i=r-1,o=1,s=0;for(this[e+i]=255&t;--i>=0&&(o*=256);)t<0&&0===s&&0!==this[e+i+1]&&(s=1),this[e+i]=(t/o>>0)-s&255;return e+r},h.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=K((function(t,e=0){return B(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=K((function(t,e=0){return U(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},h.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},h.prototype.writeDoubleLE=function(t,e,r){return F(this,t,e,!0,r)},h.prototype.writeDoubleBE=function(t,e,r){return F(this,t,e,!1,r)},h.prototype.copy=function(t,e,r,n){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),n||0===n||(n=this.length),e>=t.length&&(e=t.length),e||(e=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),t.length-e<n-r&&(n=t.length-e+r);const i=n-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,n):Uint8Array.prototype.set.call(t,this.subarray(r,n),e),i},h.prototype.fill=function(t,e,r,n){if("string"==typeof t){if("string"==typeof e?(n=e,e=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!h.isEncoding(n))throw new TypeError("Unknown encoding: "+n);if(1===t.length){const e=t.charCodeAt(0);("utf8"===n&&e<128||"latin1"===n)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let i;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(i=e;i<r;++i)this[i]=t;else{const o=h.isBuffer(t)?t:h.from(t,n),s=o.length;if(0===s)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(i=0;i<r-e;++i)this[i+e]=o[i%s]}return this};const N={};function z(t,e,r){N[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function j(t){let e="",r=t.length;const n="-"===t[0]?1:0;for(;r>=n+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function V(t,e,r,n,i,o){if(t>r||t<e){const n="bigint"==typeof e?"n":"";let i;throw i=o>3?0===e||e===BigInt(0)?`>= 0${n} and < 2${n} ** ${8*(o+1)}${n}`:`>= -(2${n} ** ${8*(o+1)-1}${n}) and < 2 ** ${8*(o+1)-1}${n}`:`>= ${e}${n} and <= ${r}${n}`,new N.ERR_OUT_OF_RANGE("value",i,t)}!function(t,e,r){Y(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||X(e,t.length-(r+1))}(n,i,o)}function Y(t,e){if("number"!=typeof t)throw new N.ERR_INVALID_ARG_TYPE(e,"number",t)}function X(t,e,r){if(Math.floor(t)!==t)throw Y(t,r),new N.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new N.ERR_BUFFER_OUT_OF_BOUNDS;throw new N.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}z("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),z("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),z("ERR_OUT_OF_RANGE",(function(t,e,r){let n=`The value of "${t}" is out of range.`,i=r;return Number.isInteger(r)&&Math.abs(r)>2**32?i=j(String(r)):"bigint"==typeof r&&(i=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(i=j(i)),i+="n"),n+=` It must be ${e}. Received ${i}`,n}),RangeError);const W=/[^+/0-9A-Za-z-_]/g;function q(t,e){let r;e=e||1/0;const n=t.length;let i=null;const o=[];for(let s=0;s<n;++s){if(r=t.charCodeAt(s),r>55295&&r<57344){if(!i){if(r>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(s+1===n){(e-=3)>-1&&o.push(239,191,189);continue}i=r;continue}if(r<56320){(e-=3)>-1&&o.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,r<128){if((e-=1)<0)break;o.push(r)}else if(r<2048){if((e-=2)<0)break;o.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;o.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return o}function Z(t){return n.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(W,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function G(t,e,r,n){let i;for(i=0;i<n&&!(i+r>=e.length||i>=t.length);++i)e[i+r]=t[i];return i}function $(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function H(t){return t!=t}const Q=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const n=16*r;for(let i=0;i<16;++i)e[n+i]=t[r]+t[i]}return e}();function K(t){return"undefined"==typeof BigInt?J:t}function J(){throw new Error("BigInt not supported")}},6655:(t,e,r)=>{var n=r(6679);t.exports=function(t,e,r){var o="SVG"===t.nodeName.toUpperCase();return t.style.position=t.style.position||"absolute",t.style.top=0,t.style.left=0,s.scale=parseFloat(r||1),s.parent=e,s();function s(){var e=s.parent||t.parentNode;if("function"==typeof e)var r=e(i)||i,a=r[0],h=r[1];else if(e&&e!==document.body){var l=n(e);a=0|l[0],h=0|l[1]}else a=window.innerWidth,h=window.innerHeight;return o?(t.setAttribute("width",a*s.scale+"px"),t.setAttribute("height",h*s.scale+"px")):(t.width=a*s.scale,t.height=h*s.scale),t.style.width=a+"px",t.style.height=h+"px",s}};var i=new Float32Array(2)},4645:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var n=r(7537),i=r.n(n),o=r(3645),s=r.n(o)()(i());s.push([t.id,".debug-operator-container{display:flex;flex-direction:row}.debug-operator-container .controls{display:inline-flex;vertical-align:top;flex-direction:column-reverse;margin-right:10px;margin-left:10px}.debug-operator-container .operator-buttons{flex-grow:1}.debug-operator-container .input-container{padding:5px;margin-bottom:5px;align-items:center;grid-auto-rows:25px;grid-row-gap:5px;grid-column-gap:5px}.debug-operator-container .connection{display:grid;grid-template-columns:.7fr 2fr}.debug-operator-container .connection>span{text-align:right}.debug-operator-container .joint-controls{display:grid;grid-template-columns:20px repeat(2, 1fr) 100px repeat(2, 1fr);grid-column-gap:5px;align-items:center}.debug-operator-container .joint-controls .joint-num{text-align:right}.debug-operator-container .joint-controls .joint-degrees{text-align:center}.debug-operator-container .joint-controls+.joint-controls{margin-top:10px}.debug-operator-container .vacuum{display:grid;grid-template-columns:repeat(2, 1fr)}.debug-operator-container .calibration{border-radius:5px;padding:5px;margin-bottom:5px;align-items:center}.debug-operator-container .calibration>div+div{margin-top:10px}.debug-operator-container .calibration>.tags{display:grid;grid-auto-rows:25px;grid-column-gap:5px}.debug-operator-container .btn-send-home{width:100%;margin-top:7px;margin-bottom:7px}.debug-operator-container .depth-view{width:320px;height:180px}.debug-operator-container .camera-view{width:854px;height:480px}.debug-operator-container .debug-command-container{width:100%;display:flex;flex-direction:row}.debug-operator-container .command-item-container{display:flex;flex-direction:row;flex-wrap:wrap;height:max-content !important}.debug-operator-container .command-item{margin:5px;font-size:1.1em;min-width:100px;background-color:#d3d3d3;display:flex;flex-direction:row;justify-content:space-between;align-content:center;align-items:center;flex-grow:1;border-radius:5px;height:max-content !important;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-o-user-select:none;user-select:none;cursor:pointer}.debug-operator-container .command-item>span{margin-left:10px}.debug-operator-container .command-item-icon{filter:brightness(0.9);padding:7px 12px;display:flex;align-items:center;align-content:center;background-color:#d3d3d3}.debug-operator-container .command-input{width:max-content;padding:6px;border-radius:5px;height:max-content !important}.debug-operator-container .command-input-item{display:flex;flex-direction:column}.debug-operator-container .command-input-item>span{margin-top:5px;margin-bottom:5px}.debug-operator-container .command-item:hover{filter:brightness(0.9)}.debug-operator-container .debug-operator-info-container{display:flex;flex-direction:row;justify-content:space-around}","",{version:3,sources:["webpack://./src/web-operators/operator-debug.scss"],names:[],mappings:"AAAA,0BACE,YAAA,CACA,kBAAA,CACA,oCACE,mBAAA,CAEA,kBAAA,CACA,6BAAA,CACA,iBAAA,CACA,gBAAA,CAEF,4CACE,WAAA,CAEF,2CACE,WAAA,CACA,iBAAA,CACA,kBAAA,CACA,mBAAA,CACA,gBAAA,CACA,mBAAA,CAGF,sCACE,YAAA,CACA,8BAAA,CAEF,2CACE,gBAAA,CAGF,0CACE,YAAA,CACA,8DAAA,CACA,mBAAA,CACA,kBAAA,CAEA,qDACE,gBAAA,CAGF,yDACE,iBAAA,CAIJ,0DACE,eAAA,CAGF,kCACE,YAAA,CACA,oCAAA,CAEF,uCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAEF,+CACE,eAAA,CAEF,6CACE,YAAA,CACA,mBAAA,CACA,mBAAA,CAGF,yCACE,UAAA,CACA,cAAA,CACA,iBAAA,CAGF,sCACE,WAAA,CACA,YAAA,CAGF,uCACE,WAAA,CACA,YAAA,CAEF,mDACE,UAAA,CACA,YAAA,CACA,kBAAA,CAEF,kDACE,YAAA,CACA,kBAAA,CACA,cAAA,CACA,6BAAA,CAEF,wCACE,UAAA,CACA,eAAA,CACA,eAAA,CACA,wBAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CACA,WAAA,CACA,iBAAA,CACA,6BAAA,CACA,wBAAA,CACA,uBAAA,CACA,qBAAA,CACA,mBAAA,CACA,gBAAA,CACA,cAAA,CAEF,6CACE,gBAAA,CAEF,6CACE,sBAAA,CACA,gBAAA,CACA,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,wBAAA,CAEF,yCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CAEA,6BAAA,CAEF,8CACE,YAAA,CACA,qBAAA,CAEF,mDACE,cAAA,CACA,iBAAA,CAEF,8CACE,sBAAA,CAEF,yDACE,YAAA,CACA,kBAAA,CACA,4BAAA",sourcesContent:[".debug-operator-container {\n  display: flex;\n  flex-direction: row;\n  .controls {\n    display: inline-flex;\n\n    vertical-align: top;\n    flex-direction: column-reverse;\n    margin-right: 10px;\n    margin-left: 10px;\n  }\n  .operator-buttons {\n    flex-grow: 1;\n  }\n  .input-container {\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n    grid-auto-rows: 25px;\n    grid-row-gap: 5px;\n    grid-column-gap: 5px;\n  }\n\n  .connection {\n    display: grid;\n    grid-template-columns: 0.7fr 2fr;\n  }\n  .connection > span {\n    text-align: right;\n  }\n\n  .joint-controls {\n    display: grid;\n    grid-template-columns: 20px repeat(2, 1fr) 100px repeat(2, 1fr);\n    grid-column-gap: 5px;\n    align-items: center;\n\n    .joint-num {\n      text-align: right;\n    }\n\n    .joint-degrees {\n      text-align: center;\n    }\n  }\n\n  .joint-controls + .joint-controls {\n    margin-top: 10px;\n  }\n\n  .vacuum {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .calibration {\n    border-radius: 5px;\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n  }\n  .calibration > div + div {\n    margin-top: 10px;\n  }\n  .calibration > .tags {\n    display: grid;\n    grid-auto-rows: 25px;\n    grid-column-gap: 5px;\n  }\n\n  .btn-send-home {\n    width: 100%;\n    margin-top: 7px;\n    margin-bottom: 7px;\n  }\n\n  .depth-view {\n    width: 320px;\n    height: 180px;\n  }\n\n  .camera-view {\n    width: 854px;\n    height: 480px;\n  }\n  .debug-command-container {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n  .command-item-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    height: max-content !important;\n  }\n  .command-item {\n    margin: 5px;\n    font-size: 1.1em;\n    min-width: 100px;\n    background-color: lightgray;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-content: center;\n    align-items: center;\n    flex-grow: 1;\n    border-radius: 5px;\n    height: max-content !important;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    cursor: pointer;\n  }\n  .command-item > span {\n    margin-left: 10px;\n  }\n  .command-item-icon {\n    filter: brightness(0.9);\n    padding: 7px 12px;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    background-color: lightgray;\n  }\n  .command-input {\n    width: max-content;\n    padding: 6px;\n    border-radius: 5px;\n\n    height: max-content !important;\n  }\n  .command-input-item {\n    display: flex;\n    flex-direction: column;\n  }\n  .command-input-item > span {\n    margin-top: 5px;\n    margin-bottom: 5px;\n  }\n  .command-item:hover {\n    filter: brightness(0.9);\n  }\n  .debug-operator-info-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n}\n"],sourceRoot:""}]);const a=s},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",n=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),n&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),n&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,n,i,o){"string"==typeof t&&(t=[[null,t,void 0]]);var s={};if(n)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(s[h]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);n&&s[u[0]]||(void 0!==o&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=o),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),i&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=i):u[4]="".concat(i)),e.push(u))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var n=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),i="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(n),o="/*# ".concat(i," */"),s=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(s).concat([o]).join("\n")}return[e].join("\n")}},6679:t=>{function e(t){return parseFloat(t)||0}t.exports=function(t){if(t===window||t===document.body)return[window.innerWidth,window.innerHeight];if(!t.parentNode){var r=!0;document.body.appendChild(t)}var n=t.getBoundingClientRect(),i=getComputedStyle(t),o=(0|n.height)+e(i.getPropertyValue("margin-top"))+e(i.getPropertyValue("margin-bottom")),s=(0|n.width)+e(i.getPropertyValue("margin-left"))+e(i.getPropertyValue("margin-right"));return r&&document.body.removeChild(t),[s,o]}},5372:(t,e,r)=>{"use strict";const n=r(7458),i=[];t.exports=class{constructor(t,e){e=e||{};var r=!1;void 0===t&&(t=8192),"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this._lastWrittenByte=t.byteLength);const n=e.offset?e.offset>>>0:0;let i=t.byteLength-n,o=n;t.buffer&&(t.byteLength!==t.buffer.byteLength&&(o=t.byteOffset+n),t=t.buffer),this._lastWrittenByte=r?i:0,this.buffer=t,this.length=i,this.byteLength=i,this.byteOffset=o,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,o,i),this._mark=0,this._marks=[]}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t){return void 0===t&&(t=1),this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),i.length=t;for(var e=0;e<t;e++)i[e]=this.readChar();return i.join("")}readUtf8(t){void 0===t&&(t=1);const e=this.readChars(t);return n.decode(e)}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){const e=n.encode(t);return this.writeChars(e)}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this._lastWrittenByte)}getBuffer(){return"undefined"!=typeof Buffer?Buffer.from(this.toArray()):this.toArray()}_updateLastWrittenByte(){this.offset>this._lastWrittenByte&&(this._lastWrittenByte=this.offset)}}},5578:t=>{"use strict";t.exports={BITMAPV5HEADER:{LogicalColorSpace:{LCS_CALIBRATED_RGB:0,LCS_sRGB:1934772034,LCS_WINDOWS_COLOR_SPACE:1466527264},Compression:{BI_RGB:0,BI_RLE8:1,BI_RLE4:2,BI_BITFIELDS:3,BI_JPEG:4,BI_PNG:5,BI_CMYK:11,BI_CMYKRLE8:12,BI_CMYKRLE4:13},GamutMappingIntent:{LCS_GM_ABS_COLORIMETRIC:8,LCS_GM_BUSINESS:1,LCS_GM_GRAPHICS:2,LCS_GM_IMAGES:4}}}},4893:(t,e,r)=>{"use strict";const n=r(5372),i=r(5578),o=[];for(var s=0;s<=8;s++)o.push(255<<s);t.exports=function(t){if(1!==t.bitDepth)throw new Error("Only bitDepth of 1 is supported");if(!t.height||!t.width)throw new Error("ImageData width and height are required");if(1!==t.components)throw new Error("Only 1 component is supported");if(1!==t.channels)throw new Error("Only 1 channel is supported");var e=new n;e.skip(14),function(t,e){t.writeUint32(124).writeInt32(e.width).writeInt32(e.height).writeUint16(1).writeUint16(e.bitDepth).writeUint32(i.BITMAPV5HEADER.Compression.BI_RGB).writeUint32(e.width*e.height*e.bitDepth).writeInt32(0).writeInt32(0).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(4278190080).writeUint32(16711680).writeUint32(65280).writeUint32(255).writeUint32(i.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36).skip(12).writeUint32(i.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12)}(e,t),function(t,e){e.bitDepth>8||t.writeUint32(0).writeUint32(16777215)}(e,t);const r=e.offset;return function(t,e){const r=4*Math.floor((e.bitDepth*e.width+31)/32),i=Math.ceil(e.bitDepth*e.width/8),s=r-i,a=e.bitDepth*e.width%8,h=0===a?0:8-a,l=r*e.height;var u,c;const f=new n(e.data);let d=0,p=0,m=8;t.mark(),c=f.readUint8();for(var g=e.height-1;g>=0;g--){const e=0===g;t.reset(),t.skip(g*r);for(var w=0;w<i;w++){const r=w===i-1;p<=h&&r?(t.writeByte(c<<p),0!==h&&h!==p||e||(u=c,c=f.readByte())):0===p?(u=c,c=f.readUint8(),t.writeByte(u)):(u=c,c=f.readUint8(),t.writeByte(u<<p&o[p]|c>>m)),r?(d+=a||8,t.skip(s),p=d%8,m=8-p):d+=8}}r>i&&(t.reset(),t.skip(l-1),t.writeUint8(0))}(e,t),e.rewind(),function(t,e){t.writeChars("BM"),t.writeInt32(t._lastWrittenByte),t.writeUint16(0),t.writeUint16(0),t.writeUint32(e)}(e,r),e.getBuffer()}},4665:(t,e,r)=>{"use strict";e.encode=r(4893)},3311:(t,e,r)=>{"use strict";const n=r(6752);t.exports=function(t,e){return new n(t,e).decode(e)}},8029:(t,e,r)=>{"use strict";const n={standard:r(4263),exif:r(9640),gps:r(5367)};t.exports=class{constructor(t){if(!t)throw new Error("missing kind");this.data=null,this.fields=new Map,this.kind=t,this._map=null}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(n[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._map){this._map={};const e=n[this.kind].tagsById;for(var t of this.fields.keys())e[t]&&(this._map[e[t]]=this.fields.get(t))}return this._map}}},6486:(t,e)=>{"use strict";var r=new Map([[1,[1,n]],[2,[1,function(t,e){for(var r=[],n="",i=0;i<e;i++){var o=String.fromCharCode(t.readUint8());"\0"===o?(r.push(n),n=""):n+=o}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();for(var r=new Uint16Array(e),n=0;n<e;n++)r[n]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();for(var r=new Uint32Array(e),n=0;n<e;n++)r[n]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();for(var r=new Array(e),n=0;n<e;n++)r[n]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();for(var r=new Int8Array(e),n=0;n<e;n++)r[n]=t.readInt8();return r}]],[7,[1,n]],[8,[2,function(t,e){if(1===e)return t.readInt16();for(var r=new Int16Array(e),n=0;n<e;n++)r[n]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();for(var r=new Int32Array(e),n=0;n<e;n++)r[n]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();for(var r=new Array(e),n=0;n<e;n++)r[n]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();for(var r=new Float32Array(e),n=0;n<e;n++)r[n]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();for(var r=new Float64Array(e),n=0;n<e;n++)r[n]=t.readFloat64();return r}]]]);function n(t,e){if(1===e)return t.readUint8();for(var r=new Uint8Array(e),n=0;n<e;n++)r[n]=t.readUint8();return r}e.getByteLength=function(t,e){return r.get(t)[0]*e},e.readData=function(t,e,n){return r.get(e)[1](t,n)}},9469:(t,e,r)=>{"use strict";e.decode=r(3311)},9640:t=>{"use strict";const e={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},r={};for(var n in e)r[e[n]]=n;t.exports={tagsById:e,tagsByName:r}},5367:t=>{"use strict";const e={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},r={};for(var n in e)r[e[n]]=n;t.exports={tagsById:e,tagsByName:r}},4263:t=>{"use strict";const e={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},r={};for(var n in e)r[e[n]]=n;t.exports={tagsById:e,tagsByName:r}},6752:(t,e,r)=>{"use strict";const n=r(5838),i=r(8029),o=r(8353),s=r(6486),a={ignoreImageData:!1,onlyFirst:!1};function h(t,e,r,n){for(var i=0;i<n;i++)t[r++]=e.getUint8(i);return r}function l(t,e,r,n,i){for(var o=0;o<2*n;o+=2)t[r++]=e.getUint16(o,i);return r}function u(t,e,r,n,i){for(var o=0;o<4*n;o+=4)t[r++]=e.getFloat32(o,i);return r}function c(t,e){throw new Error("Unsupported "+t+": "+e)}t.exports=class extends n{constructor(t,e){super(t,e),this._nextIFD=0}decode(t){t=Object.assign({},a,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t)),t.onlyFirst)return e[0];return e}decodeHeader(){let t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error("invalid byte order: 0x"+t.toString(16));this.setBigEndian()}if(t=this.readUint16(),42!==t)throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t){var e;this.seek(this._nextIFD),e=t.kind?new i(t.kind):new o;const r=this.readUint16();for(var n=0;n<r;n++)this.decodeIFDEntry(e);return t.ignoreImageData||this.decodeImageData(e),this._nextIFD=this.readUint32(),e}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),n=this.readUint16(),i=this.readUint32();if(n<1||n>12)return void this.skip(4);s.getByteLength(n,i)>4&&this.seek(this.readUint32());const o=s.readData(this,n,i);if(t.fields.set(r,o),34665===r||34853===r){let e,n=this.offset;34665===r?e="exif":34853===r&&(e="gps"),this._nextIFD=o,t[e]=this.decodeIFD({kind:e,ignoreImageData:!0}),this.offset=n}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;switch(e&&1!==e&&c("orientation",e),t.type){case 1:case 2:this.readStripData(t);break;default:c("image type",t.type)}}readStripData(t){const e=t.width,r=t.height,n=function(t){if(t.length){const r=t;t=r[0];for(var e=0;e<r.length;e++)r[e]!==t&&c("bit depth",r)}return t}(t.bitsPerSample),i=t.sampleFormat;let o=e*r;const s=function(t,e,r,n){return 8===r?new Uint8Array(1*t):16===r?new Uint16Array(1*t):32===r&&3===n?new Float32Array(1*t):c("bit depth / sample format",r+" / "+n)}(o,0,n,i),a=t.compression,f=t.rowsPerStrip*e,d=t.stripOffsets,p=t.stripByteCounts;for(var m=0,g=0;g<d.length;g++){var w=this.getStripData(a,d[g],p[g]),b=o>f?f:o;o-=b,8===n?m=h(s,w,m,b):16===n?m=l(s,w,m,b,this.isLittleEndian()):32===n&&3===i?m=u(s,w,m,b,this.isLittleEndian()):c("bitDepth",n)}t.data=s}getStripData(t,e,r){switch(t){case 1:return new DataView(this.buffer,e,r);case 2:case 32773:return c("Compression",t);default:throw new Error("invalid compression: "+t)}}}},8353:(t,e,r)=>{"use strict";const n=r(8029),i=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;function o(t){return"number"==typeof t?[t]:t}t.exports=class extends n{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){var t=new Date,e=i.exec(this.dateTime);return t.setFullYear(e[1],e[2]-1,e[3]),t.setHours(e[4],e[5],e[6]),t}get newSubfileType(){return this.get(254)}get imageWidth(){return this.get(256)}get imageLength(){return this.get(257)}get bitsPerSample(){return this.get(258)}get compression(){return this.get(259)||1}get type(){return this.get(262)}get fillOrder(){return this.get(266)||1}get documentName(){return this.get(269)}get imageDescription(){return this.get(270)}get stripOffsets(){return o(this.get(273))}get orientation(){return this.get(274)}get samplesPerPixel(){return this.get(277)}get rowsPerStrip(){return this.get(278)}get stripByteCounts(){return o(this.get(279))}get minSampleValue(){return this.get(280)||0}get maxSampleValue(){return this.get(281)||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get(282)}get yResolution(){return this.get(283)}get planarConfiguration(){return this.get(284)||1}get resolutionUnit(){return this.get(296)||2}get dateTime(){return this.get(306)}get predictor(){return this.get(317)||1}get sampleFormat(){return this.get(339)||1}get sMinSampleValue(){return this.get(340)||this.minSampleValue}get sMaxSampleValue(){return this.get(341)||this.maxSampleValue}}},9698:(t,e,r)=>{"use strict";const n=r(5838),i=r(9469);t.exports=function(t){const e=new n(t),r={};if(e.setBigEndian(),65496!==e.readUint16())throw new Error("SOI marker not found. Not a valid JPEG file");if(65505===e.readUint16()){e.readUint16();const t=e.readBytes(6);if(69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]&&0===t[4]&&0===t[5]){const t=i.decode(e,{onlyFirst:!0,ignoreImageData:!0,offset:e.offset});r.exif=t}}return r}},9464:(t,e,r)=>{"use strict";e.decode=r(9698)},9271:t=>{!function(){function e(t,e,r){this.next=r,r&&(r.prev=this),this.prev=e,e&&(e.next=this),this.data=t}function r(){if(!(this instanceof r))return new r;this._head=null,this._tail=null,this.length=0}r.prototype={push:function(t){this._tail=new e(t,this._tail,null),this._head||(this._head=this._tail),this.length++},pop:function(){if(0!==this.length){var t=this._tail;return this._tail=t.prev,t.prev&&(t.prev=this._tail.next=null),this.length--,1===this.length?this._head=this._tail:0===this.length&&(this._head=this._tail=null),t.data}},unshift:function(t){this._head=new e(t,null,this._head),this._tail||(this._tail=this._head),this.length++},shift:function(){if(0!==this.length){var t=this._head;return this._head=t.next,t.next&&(t.next=this._head.prev=null),this.length--,1===this.length?this._tail=this._head:0===this.length&&(this._head=this._tail=null),t.data}},item:function(t){t<0&&(t=this.length+t);for(var e=this._head;t-- >0&&e;)e=e.next;return e?e.data:void 0},slice:function(t,e){if(t||(t=0),e||(e=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e===t)return[];if(e<t)throw new Error("invalid offset: "+t+","+e+" (length="+this.length+")");for(var r=e-t,n=new Array(r),i=0,o=this._head;t-- >0&&o;)o=o.next;for(;i<r&&o;)n[i++]=o.data,o=o.next;return n},drop:function(){r.call(this)},forEach:function(t,e){for(var r=this._head,n=0,i=this.length;n<i&&r;)t.call(e||this,r.data,n,this),r=r.next,n++},map:function(t,e){var n=new r;return this.forEach((function(r,i,o){n.push(t.call(e||o,r,i,o))})),n},filter:function(t,e){var n=new r;return this.forEach((function(r,i,o){t.call(e||o,r,i,o)&&n.push(r)})),n},reduce:function(t,e,r){var n=0,i=this._head,o=this.length;for(e||(n=1,e=i&&i.data,i=i&&i.next);n<o&&i;)e=t.call(r||this,e,i.data,this),n++,i=i.next;return e}},t.exports=r}()},7638:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const n=t.length;let i=0,o=Math.max(32,n+(n>>1)+7),s=new Uint8Array(o>>3<<3);for(;r<n;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<n){const n=t.charCodeAt(r);56320==(64512&n)&&(++r,e=((1023&e)<<10)+(1023&n)+65536)}if(e>=55296&&e<=56319)continue}if(i+4>s.length){o+=8,o*=1+r/t.length*2,o=o>>3<<3;const e=new Uint8Array(o);e.set(s),s=e}if(0!=(4294967168&e)){if(0==(4294965248&e))s[i++]=e>>6&31|192;else if(0==(4294901760&e))s[i++]=e>>12&15|224,s[i++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;s[i++]=e>>18&7|240,s[i++]=e>>12&63|128,s[i++]=e>>6&63|128}s[i++]=63&e|128}else s[i++]=e}return s.slice(0,i)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let n=0;const i=r.length,o=[];for(;n<i;){const t=r[n++];if(0===t)break;if(0==(128&t))o.push(t);else if(192==(224&t)){const e=63&r[n++];o.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[n++],i=63&r[n++];o.push((31&t)<<12|e<<6|i)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[n++])<<12|(63&r[n++])<<6|63&r[n++];e>65535&&(e-=65536,o.push(e>>>10&1023|55296),e=56320|1023&e),o.push(e)}}return String.fromCharCode.apply(null,o)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},9645:t=>{"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),r=0;r<e.length;r+=2){const t=Math.PI*r/this.size;e[r]=Math.cos(t),e[r+1]=-Math.sin(t)}this.table=e;for(var n=0,i=1;this.size>i;i<<=1)n++;this._width=n%2==0?n-1:n,this._bitrev=new Array(1<<this._width);for(var o=0;o<this._bitrev.length;o++){this._bitrev[o]=0;for(var s=0;s<this._width;s+=2){var a=this._width-s-2;this._bitrev[o]|=(o>>>s&3)<<a}}this._out=null,this._data=null,this._inv=0}t.exports=e,e.prototype.fromComplexArray=function(t,e){for(var r=e||new Array(t.length>>>1),n=0;n<t.length;n+=2)r[n>>>1]=t[n];return r},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var r=e||this.createComplexArray(),n=0;n<r.length;n+=2)r[n]=t[n>>>1],r[n+1]=0;return r},e.prototype.completeSpectrum=function(t){for(var e=this._csize,r=e>>>1,n=2;n<r;n+=2)t[e-n]=t[n],t[e-n+1]=-t[n+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var r=0;r<t.length;r++)t[r]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,r=this._out,n=this._csize,i=1<<this._width,o=n/i<<1,s=this._bitrev;if(4===o)for(t=0,e=0;t<n;t+=o,e++){const r=s[e];this._singleTransform2(t,r,i)}else for(t=0,e=0;t<n;t+=o,e++){const r=s[e];this._singleTransform4(t,r,i)}var a=this._inv?-1:1,h=this.table;for(i>>=2;i>=2;i>>=2){var l=(o=n/i<<1)>>>2;for(t=0;t<n;t+=o)for(var u=t+l,c=t,f=0;c<u;c+=2,f+=i){const t=c,e=t+l,n=e+l,i=n+l,o=r[t],s=r[t+1],u=r[e],d=r[e+1],p=r[n],m=r[n+1],g=r[i],w=r[i+1],b=o,y=s,v=h[f],x=a*h[f+1],_=u*v-d*x,k=u*x+d*v,A=h[2*f],M=a*h[2*f+1],E=p*A-m*M,S=p*M+m*A,C=h[3*f],I=a*h[3*f+1],P=g*C-w*I,D=g*I+w*C,T=b+E,R=y+S,B=b-E,U=y-S,O=_+P,L=k+D,F=a*(_-P),N=a*(k-D),z=T+O,j=R+L,V=T-O,Y=R-L,X=B+N,W=U-F,q=B-N,Z=U+F;r[t]=z,r[t+1]=j,r[e]=X,r[e+1]=W,r[n]=V,r[n+1]=Y,r[i]=q,r[i+1]=Z}}},e.prototype._singleTransform2=function(t,e,r){const n=this._out,i=this._data,o=i[e],s=i[e+1],a=i[e+r],h=i[e+r+1],l=o+a,u=s+h,c=o-a,f=s-h;n[t]=l,n[t+1]=u,n[t+2]=c,n[t+3]=f},e.prototype._singleTransform4=function(t,e,r){const n=this._out,i=this._data,o=this._inv?-1:1,s=2*r,a=3*r,h=i[e],l=i[e+1],u=i[e+r],c=i[e+r+1],f=i[e+s],d=i[e+s+1],p=i[e+a],m=i[e+a+1],g=h+f,w=l+d,b=h-f,y=l-d,v=u+p,x=c+m,_=o*(u-p),k=o*(c-m),A=g+v,M=w+x,E=b+k,S=y-_,C=g-v,I=w-x,P=b-k,D=y+_;n[t]=A,n[t+1]=M,n[t+2]=E,n[t+3]=S,n[t+4]=C,n[t+5]=I,n[t+6]=P,n[t+7]=D},e.prototype._realTransform4=function(){var t,e,r=this._out,n=this._csize,i=1<<this._width,o=n/i<<1,s=this._bitrev;if(4===o)for(t=0,e=0;t<n;t+=o,e++){const r=s[e];this._singleRealTransform2(t,r>>>1,i>>>1)}else for(t=0,e=0;t<n;t+=o,e++){const r=s[e];this._singleRealTransform4(t,r>>>1,i>>>1)}var a=this._inv?-1:1,h=this.table;for(i>>=2;i>=2;i>>=2){var l=(o=n/i<<1)>>>1,u=l>>>1,c=u>>>1;for(t=0;t<n;t+=o)for(var f=0,d=0;f<=c;f+=2,d+=i){var p=t+f,m=p+u,g=m+u,w=g+u,b=r[p],y=r[p+1],v=r[m],x=r[m+1],_=r[g],k=r[g+1],A=r[w],M=r[w+1],E=b,S=y,C=h[d],I=a*h[d+1],P=v*C-x*I,D=v*I+x*C,T=h[2*d],R=a*h[2*d+1],B=_*T-k*R,U=_*R+k*T,O=h[3*d],L=a*h[3*d+1],F=A*O-M*L,N=A*L+M*O,z=E+B,j=S+U,V=E-B,Y=S-U,X=P+F,W=D+N,q=a*(P-F),Z=a*(D-N),G=z+X,$=j+W,H=V+Z,Q=Y-q;if(r[p]=G,r[p+1]=$,r[m]=H,r[m+1]=Q,0!==f){if(f!==c){var K=V+-a*Z,J=-a*q-Y,tt=z+-a*X,et=-j- -a*W,rt=t+u-f,nt=t+l-f;r[rt]=K,r[rt+1]=J,r[nt]=tt,r[nt+1]=et}}else{var it=z-X,ot=j-W;r[g]=it,r[g+1]=ot}}}},e.prototype._singleRealTransform2=function(t,e,r){const n=this._out,i=this._data,o=i[e],s=i[e+r],a=o+s,h=o-s;n[t]=a,n[t+1]=0,n[t+2]=h,n[t+3]=0},e.prototype._singleRealTransform4=function(t,e,r){const n=this._out,i=this._data,o=this._inv?-1:1,s=2*r,a=3*r,h=i[e],l=i[e+r],u=i[e+s],c=i[e+a],f=h+u,d=h-u,p=l+c,m=o*(l-c),g=f+p,w=d,b=-m,y=f-p,v=d,x=m;n[t]=g,n[t+1]=0,n[t+2]=w,n[t+3]=b,n[t+4]=y,n[t+5]=0,n[t+6]=v,n[t+7]=x}},7769:module=>{"use strict";const toBytes=t=>[...t].map((t=>t.charCodeAt(0))),xpiZipFilename=toBytes("META-INF/mozilla.rsa"),oxmlContentTypes=toBytes("[Content_Types].xml"),oxmlRels=toBytes("_rels/.rels");function readUInt64LE(t,e=0){let r=t[e],n=1,i=0;for(;++i<8;)n*=256,r+=t[e+i]*n;return r}const fileType=t=>{if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||Buffer.isBuffer(t)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof t}\``);const e=t instanceof Uint8Array?t:new Uint8Array(t);if(!(e&&e.length>1))return null;const r=(t,r)=>{r=Object.assign({offset:0},r);for(let n=0;n<t.length;n++)if(r.mask){if(t[n]!==(r.mask[n]&e[n+r.offset]))return!1}else if(t[n]!==e[n+r.offset])return!1;return!0},n=(t,e)=>r(toBytes(t),e);if(r([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(r([137,80,78,71,13,10,26,10]))return{ext:"png",mime:"image/png"};if(r([71,73,70]))return{ext:"gif",mime:"image/gif"};if(r([87,69,66,80],{offset:8}))return{ext:"webp",mime:"image/webp"};if(r([70,76,73,70]))return{ext:"flif",mime:"image/flif"};if((r([73,73,42,0])||r([77,77,0,42]))&&r([67,82],{offset:8}))return{ext:"cr2",mime:"image/x-canon-cr2"};if(r([73,73,42,0])||r([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(r([66,77]))return{ext:"bmp",mime:"image/bmp"};if(r([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(r([56,66,80,83]))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(r([80,75,3,4])){if(r([109,105,109,101,116,121,112,101,97,112,112,108,105,99,97,116,105,111,110,47,101,112,117,98,43,122,105,112],{offset:30}))return{ext:"epub",mime:"application/epub+zip"};if(r(xpiZipFilename,{offset:30}))return{ext:"xpi",mime:"application/x-xpinstall"};if(n("mimetypeapplication/vnd.oasis.opendocument.text",{offset:30}))return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};if(n("mimetypeapplication/vnd.oasis.opendocument.spreadsheet",{offset:30}))return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};if(n("mimetypeapplication/vnd.oasis.opendocument.presentation",{offset:30}))return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"};const t=(t,e=0)=>t.findIndex(((t,r,n)=>r>=e&&80===n[r]&&75===n[r+1]&&3===n[r+2]&&4===n[r+3]));let i=0,o=!1,s=null;do{const a=i+30;if(o||(o=r(oxmlContentTypes,{offset:a})||r(oxmlRels,{offset:a})),s||(n("word/",{offset:a})?s={ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}:n("ppt/",{offset:a})?s={ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"}:n("xl/",{offset:a})&&(s={ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"})),o&&s)return s;i=t(e,a)}while(i>=0);if(s)return s}if(r([80,75])&&(3===e[2]||5===e[2]||7===e[2])&&(4===e[3]||6===e[3]||8===e[3]))return{ext:"zip",mime:"application/zip"};if(r([117,115,116,97,114],{offset:257}))return{ext:"tar",mime:"application/x-tar"};if(r([82,97,114,33,26,7])&&(0===e[6]||1===e[6]))return{ext:"rar",mime:"application/x-rar-compressed"};if(r([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(r([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(r([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(r([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(r([51,103,112,53])||r([0,0,0])&&r([102,116,121,112],{offset:4})&&(r([109,112,52,49],{offset:8})||r([109,112,52,50],{offset:8})||r([105,115,111,109],{offset:8})||r([105,115,111,50],{offset:8})||r([109,109,112,52],{offset:8})||r([77,52,86],{offset:8})||r([100,97,115,104],{offset:8})))return{ext:"mp4",mime:"video/mp4"};if(r([77,84,104,100]))return{ext:"mid",mime:"audio/midi"};if(r([26,69,223,163])){const t=e.subarray(4,4100),r=t.findIndex(((t,e,r)=>66===r[e]&&130===r[e+1]));if(-1!==r){const e=r+3,n=r=>[...r].every(((r,n)=>t[e+n]===r.charCodeAt(0)));if(n("matroska"))return{ext:"mkv",mime:"video/x-matroska"};if(n("webm"))return{ext:"webm",mime:"video/webm"}}}if(r([0,0,0,20,102,116,121,112,113,116,32,32])||r([102,114,101,101],{offset:4})||r([102,116,121,112,113,116,32,32],{offset:4})||r([109,100,97,116],{offset:4})||r([109,111,111,118],{offset:4})||r([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(r([82,73,70,70])){if(r([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(r([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(r([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(r([48,38,178,117,142,102,207,17,166,217])){let t=30;do{const n=readUInt64LE(e,t+16);if(r([145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101],{offset:t})){if(r([64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wma",mime:"audio/x-ms-wma"};if(r([192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wmv",mime:"video/x-ms-asf"};break}t+=n}while(t+24<=e.length);return{ext:"asf",mime:"application/vnd.ms-asf"}}if(r([0,0,1,186])||r([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(r([102,116,121,112,51,103],{offset:4}))return{ext:"3gp",mime:"video/3gpp"};for(let t=0;t<2&&t<e.length-16;t++){if(r([73,68,51],{offset:t})||r([255,226],{offset:t,mask:[255,226]}))return{ext:"mp3",mime:"audio/mpeg"};if(r([255,228],{offset:t,mask:[255,228]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,248],{offset:t,mask:[255,252]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,240],{offset:t,mask:[255,252]}))return{ext:"mp4",mime:"audio/mpeg"}}if(r([102,116,121,112,77,52,65],{offset:4}))return{ext:"m4a",mime:"audio/mp4"};if(r([79,112,117,115,72,101,97,100],{offset:28}))return{ext:"opus",mime:"audio/opus"};if(r([79,103,103,83]))return r([128,116,104,101,111,114,97],{offset:28})?{ext:"ogv",mime:"video/ogg"}:r([1,118,105,100,101,111,0],{offset:28})?{ext:"ogm",mime:"video/ogg"}:r([127,70,76,65,67],{offset:28})?{ext:"oga",mime:"audio/ogg"}:r([83,112,101,101,120,32,32],{offset:28})?{ext:"spx",mime:"audio/ogg"}:r([1,118,111,114,98,105,115],{offset:28})?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"};if(r([102,76,97,67]))return{ext:"flac",mime:"audio/x-flac"};if(r([77,65,67,32]))return{ext:"ape",mime:"audio/ape"};if(r([119,118,112,107]))return{ext:"wv",mime:"audio/wavpack"};if(r([35,33,65,77,82,10]))return{ext:"amr",mime:"audio/amr"};if(r([37,80,68,70]))return{ext:"pdf",mime:"application/pdf"};if(r([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if((67===e[0]||70===e[0])&&r([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(r([123,92,114,116,102]))return{ext:"rtf",mime:"application/rtf"};if(r([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(r([119,79,70,70])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff",mime:"font/woff"};if(r([119,79,70,50])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(r([76,80],{offset:34})&&(r([0,0,1],{offset:8})||r([1,0,2],{offset:8})||r([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(r([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(r([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(r([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(r([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(r([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(r([37,33]))return{ext:"ps",mime:"application/postscript"};if(r([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(r([83,81,76,105]))return{ext:"sqlite",mime:"application/x-sqlite3"};if(r([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(r([67,114,50,52]))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(r([77,83,67,70])||r([73,83,99,40]))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(r([33,60,97,114,99,104,62,10,100,101,98,105,97,110,45,98,105,110,97,114,121]))return{ext:"deb",mime:"application/x-deb"};if(r([33,60,97,114,99,104,62]))return{ext:"ar",mime:"application/x-unix-archive"};if(r([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(r([31,160])||r([31,157]))return{ext:"Z",mime:"application/x-compress"};if(r([76,90,73,80]))return{ext:"lz",mime:"application/x-lzip"};if(r([208,207,17,224,161,177,26,225]))return{ext:"msi",mime:"application/x-msi"};if(r([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(r([71],{offset:4})&&(r([71],{offset:192})||r([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(r([66,76,69,78,68,69,82]))return{ext:"blend",mime:"application/x-blender"};if(r([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(r([0,0,0,12,106,80,32,32,13,10,135,10])){if(r([106,112,50,32],{offset:20}))return{ext:"jp2",mime:"image/jp2"};if(r([106,112,120,32],{offset:20}))return{ext:"jpx",mime:"image/jpx"};if(r([106,112,109,32],{offset:20}))return{ext:"jpm",mime:"image/jpm"};if(r([109,106,112,50],{offset:20}))return{ext:"mj2",mime:"image/mj2"}}if(r([70,79,82,77]))return{ext:"aif",mime:"audio/aiff"};if(n("<?xml "))return{ext:"xml",mime:"application/xml"};if(r([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(r([102,116,121,112],{offset:4})){if(r([109,105,102,49],{offset:8}))return{ext:"heic",mime:"image/heif"};if(r([109,115,102,49],{offset:8}))return{ext:"heic",mime:"image/heif-sequence"};if(r([104,101,105,99],{offset:8})||r([104,101,105,120],{offset:8}))return{ext:"heic",mime:"image/heic"};if(r([104,101,118,99],{offset:8})||r([104,101,118,120],{offset:8}))return{ext:"heic",mime:"image/heic-sequence"}}return r([171,75,84,88,32,49,49,187,13,10,26,10])?{ext:"ktx",mime:"image/ktx"}:r([68,73,67,77],{offset:128})?{ext:"dcm",mime:"application/dicom"}:r([77,80,43])||r([77,80,67,75])?{ext:"mpc",mime:"audio/x-musepack"}:r([66,69,71,73,78,58])?{ext:"ics",mime:"text/calendar"}:r([103,108,84,70,2,0,0,0])?{ext:"glb",mime:"model/gltf-binary"}:r([212,195,178,161])||r([161,178,195,212])?{ext:"pcap",mime:"application/vnd.tcpdump.pcap"}:null};module.exports=fileType,module.exports.default=fileType,Object.defineProperty(fileType,"minimumBytes",{value:4100}),module.exports.stream=readableStream=>new Promise(((resolve,reject)=>{const stream=eval("require")("stream");readableStream.once("readable",(()=>{const t=new stream.PassThrough,e=readableStream.read(module.exports.minimumBytes)||readableStream.read();try{t.fileType=fileType(e)}catch(t){reject(t)}readableStream.unshift(e),stream.pipeline?resolve(stream.pipeline(readableStream,t,(()=>{}))):resolve(readableStream.pipe(t))}))}))},2251:(t,e,r)=>{var n=Object.prototype.hasOwnProperty;t.exports=e=function(t,e){return n.call(e,t)},e.version=r(2898).version},645:(t,e)=>{e.read=function(t,e,r,n,i){var o,s,a=8*i-n-1,h=(1<<a)-1,l=h>>1,u=-7,c=r?i-1:0,f=r?-1:1,d=t[e+c];for(c+=f,o=d&(1<<-u)-1,d>>=-u,u+=a;u>0;o=256*o+t[e+c],c+=f,u-=8);for(s=o&(1<<-u)-1,o>>=-u,u+=n;u>0;s=256*s+t[e+c],c+=f,u-=8);if(0===o)o=1-l;else{if(o===h)return s?NaN:1/0*(d?-1:1);s+=Math.pow(2,n),o-=l}return(d?-1:1)*s*Math.pow(2,o-n)},e.write=function(t,e,r,n,i,o){var s,a,h,l=8*o-i-1,u=(1<<l)-1,c=u>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,d=n?0:o-1,p=n?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,s=u):(s=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-s))<1&&(s--,h*=2),(e+=s+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(s++,h/=2),s+c>=u?(a=0,s=u):s+c>=1?(a=(e*h-1)*Math.pow(2,i),s+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,i),s=0));i>=8;t[r+d]=255&a,d+=p,a/=256,i-=8);for(s=s<<i|a,l+=i;l>0;t[r+d]=255&s,d+=p,s/=256,l-=8);t[r+d-p]|=128*m}},6157:(t,e,r)=>{"use strict";r.r(e),r.d(e,{Image:()=>fh,Kernel:()=>a,Shape:()=>ra,Stack:()=>oi,Static:()=>_h,Worker:()=>xh,default:()=>fh});var n={};r.r(n),r.d(n,{CMYK:()=>mn,GREY:()=>cn,HSL:()=>dn,HSV:()=>pn,RGB:()=>fn});var i={};r.r(i),r.d(i,{tagsById:()=>En,tagsByName:()=>Sn});var o={};r.r(o),r.d(o,{tagsById:()=>Cn,tagsByName:()=>In});var s={};r.r(s),r.d(s,{tagsById:()=>Pn,tagsByName:()=>Dn});var a={};r.r(a),r.d(a,{DISCRETE_LAPLACE_4:()=>Ei,DISCRETE_LAPLACE_8:()=>Si,SCHARR_X:()=>Pi,SCHARR_Y:()=>Di,SECOND_DERIVATIVE:()=>Ti,SECOND_DERIVATIVE_INV:()=>Ri,SOBEL_X:()=>Ci,SOBEL_Y:()=>Ii,laplacianOfGaussian:()=>dh});const h={getBit(t){return this.data[l(t)]&1<<u(t)?1:0},setBit(t){this.data[l(t)]|=1<<u(t)},clearBit(t){this.data[l(t)]&=~(1<<u(t))},toggleBit(t){this.data[l(t)]^=1<<u(t)},getBitXY(t,e){return t>=this.width||e>=this.height?0:this.getBit(e*this.width+t)},setBitXY(t,e){this.setBit(e*this.width+t)},clearBitXY(t,e){this.clearBit(e*this.width+t)},toggleBitXY(t,e){this.toggleBit(e*this.width+t)}};function l(t){return t>>3}function u(t){return 7-(7&t)}function c(t,e,r){return"function"==typeof t.toBlob?new Promise((function(n){t.toBlob(n,e,r)})):Promise.resolve(function(t){var e=t.match(/data:([^;]+)/)[1],r=t.replace(/^[^,]+,/,"");return function(t,e){t=t||[],"string"==typeof(e=e||{})&&(e={type:e});try{return new Blob(t,e)}catch(i){if("TypeError"!==i.name)throw i;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),n=0;n<t.length;n+=1)r.append(t[n]);return r.getBlob(e.type)}}([f(atob(r))],{type:e})}(t.toDataURL(e,r)))}function f(t){for(var e=t.length,r=new ArrayBuffer(e),n=new Uint8Array(r),i=-1;++i<e;)n[i]=t.charCodeAt(i);return r}var d=r(4665);r(7638);const p=new TextDecoder("utf-8"),m=new TextEncoder;class g{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const n=e.offset?e.offset>>>0:0,i=t.byteLength-n;let o=n;(ArrayBuffer.isView(t)||t instanceof g)&&(t.byteLength!==t.buffer.byteLength&&(o=t.byteOffset+n),t=t.buffer),this.lastWrittenByte=r?i:0,this.buffer=t,this.length=i,this.byteLength=i,this.byteOffset=o,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,o,i),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),p.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return m.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}function w(t){let e=t.length;for(;--e>=0;)t[e]=0}const b=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),y=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),v=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),x=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),_=new Array(576);w(_);const k=new Array(60);w(k);const A=new Array(512);w(A);const M=new Array(256);w(M);const E=new Array(29);w(E);const S=new Array(30);function C(t,e,r,n,i){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=n,this.max_length=i,this.has_stree=t&&t.length}let I,P,D;function T(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}w(S);const R=t=>t<256?A[t]:A[256+(t>>>7)],B=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},U=(t,e,r)=>{t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,B(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)},O=(t,e,r)=>{U(t,r[2*e],r[2*e+1])},L=(t,e)=>{let r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1},F=(t,e,r)=>{const n=new Array(16);let i,o,s=0;for(i=1;i<=15;i++)n[i]=s=s+r[i-1]<<1;for(o=0;o<=e;o++){let e=t[2*o+1];0!==e&&(t[2*o]=L(n[e]++,e))}},N=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0},z=t=>{t.bi_valid>8?B(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},j=(t,e,r,n)=>{const i=2*e,o=2*r;return t[i]<t[o]||t[i]===t[o]&&n[e]<=n[r]},V=(t,e,r)=>{const n=t.heap[r];let i=r<<1;for(;i<=t.heap_len&&(i<t.heap_len&&j(e,t.heap[i+1],t.heap[i],t.depth)&&i++,!j(e,n,t.heap[i],t.depth));)t.heap[r]=t.heap[i],r=i,i<<=1;t.heap[r]=n},Y=(t,e,r)=>{let n,i,o,s,a=0;if(0!==t.last_lit)do{n=t.pending_buf[t.d_buf+2*a]<<8|t.pending_buf[t.d_buf+2*a+1],i=t.pending_buf[t.l_buf+a],a++,0===n?O(t,i,e):(o=M[i],O(t,o+256+1,e),s=b[o],0!==s&&(i-=E[o],U(t,i,s)),n--,o=R(n),O(t,o,r),s=y[o],0!==s&&(n-=S[o],U(t,n,s)))}while(a<t.last_lit);O(t,256,e)},X=(t,e)=>{const r=e.dyn_tree,n=e.stat_desc.static_tree,i=e.stat_desc.has_stree,o=e.stat_desc.elems;let s,a,h,l=-1;for(t.heap_len=0,t.heap_max=573,s=0;s<o;s++)0!==r[2*s]?(t.heap[++t.heap_len]=l=s,t.depth[s]=0):r[2*s+1]=0;for(;t.heap_len<2;)h=t.heap[++t.heap_len]=l<2?++l:0,r[2*h]=1,t.depth[h]=0,t.opt_len--,i&&(t.static_len-=n[2*h+1]);for(e.max_code=l,s=t.heap_len>>1;s>=1;s--)V(t,r,s);h=o;do{s=t.heap[1],t.heap[1]=t.heap[t.heap_len--],V(t,r,1),a=t.heap[1],t.heap[--t.heap_max]=s,t.heap[--t.heap_max]=a,r[2*h]=r[2*s]+r[2*a],t.depth[h]=(t.depth[s]>=t.depth[a]?t.depth[s]:t.depth[a])+1,r[2*s+1]=r[2*a+1]=h,t.heap[1]=h++,V(t,r,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const r=e.dyn_tree,n=e.max_code,i=e.stat_desc.static_tree,o=e.stat_desc.has_stree,s=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,h=e.stat_desc.max_length;let l,u,c,f,d,p,m=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(r[2*t.heap[t.heap_max]+1]=0,l=t.heap_max+1;l<573;l++)u=t.heap[l],f=r[2*r[2*u+1]+1]+1,f>h&&(f=h,m++),r[2*u+1]=f,u>n||(t.bl_count[f]++,d=0,u>=a&&(d=s[u-a]),p=r[2*u],t.opt_len+=p*(f+d),o&&(t.static_len+=p*(i[2*u+1]+d)));if(0!==m){do{for(f=h-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[h]--,m-=2}while(m>0);for(f=h;0!==f;f--)for(u=t.bl_count[f];0!==u;)c=t.heap[--l],c>n||(r[2*c+1]!==f&&(t.opt_len+=(f-r[2*c+1])*r[2*c],r[2*c+1]=f),u--)}})(t,e),F(r,l,t.bl_count)},W=(t,e,r)=>{let n,i,o=-1,s=e[1],a=0,h=7,l=4;for(0===s&&(h=138,l=3),e[2*(r+1)+1]=65535,n=0;n<=r;n++)i=s,s=e[2*(n+1)+1],++a<h&&i===s||(a<l?t.bl_tree[2*i]+=a:0!==i?(i!==o&&t.bl_tree[2*i]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,a=0,o=i,0===s?(h=138,l=3):i===s?(h=6,l=3):(h=7,l=4))},q=(t,e,r)=>{let n,i,o=-1,s=e[1],a=0,h=7,l=4;for(0===s&&(h=138,l=3),n=0;n<=r;n++)if(i=s,s=e[2*(n+1)+1],!(++a<h&&i===s)){if(a<l)do{O(t,i,t.bl_tree)}while(0!=--a);else 0!==i?(i!==o&&(O(t,i,t.bl_tree),a--),O(t,16,t.bl_tree),U(t,a-3,2)):a<=10?(O(t,17,t.bl_tree),U(t,a-3,3)):(O(t,18,t.bl_tree),U(t,a-11,7));a=0,o=i,0===s?(h=138,l=3):i===s?(h=6,l=3):(h=7,l=4)}};let Z=!1;const G=(t,e,r,n)=>{U(t,0+(n?1:0),3),((t,e,r,n)=>{z(t),B(t,r),B(t,~r),t.pending_buf.set(t.window.subarray(e,e+r),t.pending),t.pending+=r})(t,e,r)};var $={_tr_init:t=>{Z||((()=>{let t,e,r,n,i;const o=new Array(16);for(r=0,n=0;n<28;n++)for(E[n]=r,t=0;t<1<<b[n];t++)M[r++]=n;for(M[r-1]=n,i=0,n=0;n<16;n++)for(S[n]=i,t=0;t<1<<y[n];t++)A[i++]=n;for(i>>=7;n<30;n++)for(S[n]=i<<7,t=0;t<1<<y[n]-7;t++)A[256+i++]=n;for(e=0;e<=15;e++)o[e]=0;for(t=0;t<=143;)_[2*t+1]=8,t++,o[8]++;for(;t<=255;)_[2*t+1]=9,t++,o[9]++;for(;t<=279;)_[2*t+1]=7,t++,o[7]++;for(;t<=287;)_[2*t+1]=8,t++,o[8]++;for(F(_,287,o),t=0;t<30;t++)k[2*t+1]=5,k[2*t]=L(t,5);I=new C(_,b,257,286,15),P=new C(k,y,0,30,15),D=new C(new Array(0),v,0,19,7)})(),Z=!0),t.l_desc=new T(t.dyn_ltree,I),t.d_desc=new T(t.dyn_dtree,P),t.bl_desc=new T(t.bl_tree,D),t.bi_buf=0,t.bi_valid=0,N(t)},_tr_stored_block:G,_tr_flush_block:(t,e,r,n)=>{let i,o,s=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),X(t,t.l_desc),X(t,t.d_desc),s=(t=>{let e;for(W(t,t.dyn_ltree,t.l_desc.max_code),W(t,t.dyn_dtree,t.d_desc.max_code),X(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*x[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),i=t.opt_len+3+7>>>3,o=t.static_len+3+7>>>3,o<=i&&(i=o)):i=o=r+5,r+4<=i&&-1!==e?G(t,e,r,n):4===t.strategy||o===i?(U(t,2+(n?1:0),3),Y(t,_,k)):(U(t,4+(n?1:0),3),((t,e,r,n)=>{let i;for(U(t,e-257,5),U(t,r-1,5),U(t,n-4,4),i=0;i<n;i++)U(t,t.bl_tree[2*x[i]+1],3);q(t,t.dyn_ltree,e-1),q(t,t.dyn_dtree,r-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,s+1),Y(t,t.dyn_ltree,t.dyn_dtree)),N(t),n&&z(t)},_tr_tally:(t,e,r)=>(t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(M[r]+256+1)]++,t.dyn_dtree[2*R(e)]++),t.last_lit===t.lit_bufsize-1),_tr_align:t=>{U(t,2,3),O(t,256,_),(t=>{16===t.bi_valid?(B(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}},H=(t,e,r,n)=>{let i=65535&t|0,o=t>>>16&65535|0,s=0;for(;0!==r;){s=r>2e3?2e3:r,r-=s;do{i=i+e[n++]|0,o=o+i|0}while(--s);i%=65521,o%=65521}return i|o<<16|0};const Q=new Uint32Array((()=>{let t,e=[];for(var r=0;r<256;r++){t=r;for(var n=0;n<8;n++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e})());var K=(t,e,r,n)=>{const i=Q,o=n+r;t^=-1;for(let r=n;r<o;r++)t=t>>>8^i[255&(t^e[r])];return-1^t},J={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},tt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:et,_tr_stored_block:rt,_tr_flush_block:nt,_tr_tally:it,_tr_align:ot}=$,{Z_NO_FLUSH:st,Z_PARTIAL_FLUSH:at,Z_FULL_FLUSH:ht,Z_FINISH:lt,Z_BLOCK:ut,Z_OK:ct,Z_STREAM_END:ft,Z_STREAM_ERROR:dt,Z_DATA_ERROR:pt,Z_BUF_ERROR:mt,Z_DEFAULT_COMPRESSION:gt,Z_FILTERED:wt,Z_HUFFMAN_ONLY:bt,Z_RLE:yt,Z_FIXED:vt,Z_DEFAULT_STRATEGY:xt,Z_UNKNOWN:_t,Z_DEFLATED:kt}=tt,At=258,Mt=262,Et=103,St=113,Ct=666,It=(t,e)=>(t.msg=J[e],e),Pt=t=>(t<<1)-(t>4?9:0),Dt=t=>{let e=t.length;for(;--e>=0;)t[e]=0};let Tt=(t,e,r)=>(e<<t.hash_shift^r)&t.hash_mask;const Rt=t=>{const e=t.state;let r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+r),t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))},Bt=(t,e)=>{nt(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,Rt(t.strm)},Ut=(t,e)=>{t.pending_buf[t.pending++]=e},Ot=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},Lt=(t,e,r,n)=>{let i=t.avail_in;return i>n&&(i=n),0===i?0:(t.avail_in-=i,e.set(t.input.subarray(t.next_in,t.next_in+i),r),1===t.state.wrap?t.adler=H(t.adler,e,i,r):2===t.state.wrap&&(t.adler=K(t.adler,e,i,r)),t.next_in+=i,t.total_in+=i,i)},Ft=(t,e)=>{let r,n,i=t.max_chain_length,o=t.strstart,s=t.prev_length,a=t.nice_match;const h=t.strstart>t.w_size-Mt?t.strstart-(t.w_size-Mt):0,l=t.window,u=t.w_mask,c=t.prev,f=t.strstart+At;let d=l[o+s-1],p=l[o+s];t.prev_length>=t.good_match&&(i>>=2),a>t.lookahead&&(a=t.lookahead);do{if(r=e,l[r+s]===p&&l[r+s-1]===d&&l[r]===l[o]&&l[++r]===l[o+1]){o+=2,r++;do{}while(l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&l[++o]===l[++r]&&o<f);if(n=At-(f-o),o=f-At,n>s){if(t.match_start=e,s=n,n>=a)break;d=l[o+s-1],p=l[o+s]}}}while((e=c[e&u])>h&&0!=--i);return s<=t.lookahead?s:t.lookahead},Nt=t=>{const e=t.w_size;let r,n,i,o,s;do{if(o=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-Mt)){t.window.set(t.window.subarray(e,e+e),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,n=t.hash_size,r=n;do{i=t.head[--r],t.head[r]=i>=e?i-e:0}while(--n);n=e,r=n;do{i=t.prev[--r],t.prev[r]=i>=e?i-e:0}while(--n);o+=e}if(0===t.strm.avail_in)break;if(n=Lt(t.strm,t.window,t.strstart+t.lookahead,o),t.lookahead+=n,t.lookahead+t.insert>=3)for(s=t.strstart-t.insert,t.ins_h=t.window[s],t.ins_h=Tt(t,t.ins_h,t.window[s+1]);t.insert&&(t.ins_h=Tt(t,t.ins_h,t.window[s+3-1]),t.prev[s&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=s,s++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<Mt&&0!==t.strm.avail_in)},zt=(t,e)=>{let r,n;for(;;){if(t.lookahead<Mt){if(Nt(t),t.lookahead<Mt&&e===st)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Tt(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-Mt&&(t.match_length=Ft(t,r)),t.match_length>=3)if(n=it(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=Tt(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Tt(t,t.ins_h,t.window[t.strstart+1]);else n=it(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(n&&(Bt(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===lt?(Bt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Bt(t,!1),0===t.strm.avail_out)?1:2},jt=(t,e)=>{let r,n,i;for(;;){if(t.lookahead<Mt){if(Nt(t),t.lookahead<Mt&&e===st)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Tt(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-Mt&&(t.match_length=Ft(t,r),t.match_length<=5&&(t.strategy===wt||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){i=t.strstart+t.lookahead-3,n=it(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=i&&(t.ins_h=Tt(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,n&&(Bt(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(n=it(t,0,t.window[t.strstart-1]),n&&Bt(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(n=it(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===lt?(Bt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Bt(t,!1),0===t.strm.avail_out)?1:2};function Vt(t,e,r,n,i){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=n,this.func=i}const Yt=[new Vt(0,0,0,0,((t,e)=>{let r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(Nt(t),0===t.lookahead&&e===st)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;const n=t.block_start+r;if((0===t.strstart||t.strstart>=n)&&(t.lookahead=t.strstart-n,t.strstart=n,Bt(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-Mt&&(Bt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===lt?(Bt(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(Bt(t,!1),t.strm.avail_out),1)})),new Vt(4,4,8,4,zt),new Vt(4,5,16,8,zt),new Vt(4,6,32,32,zt),new Vt(4,4,16,16,jt),new Vt(8,16,32,32,jt),new Vt(8,16,128,128,jt),new Vt(8,32,128,256,jt),new Vt(32,128,258,1024,jt),new Vt(32,258,258,4096,jt)];function Xt(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=kt,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),Dt(this.dyn_ltree),Dt(this.dyn_dtree),Dt(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),Dt(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),Dt(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const Wt=t=>{if(!t||!t.state)return It(t,dt);t.total_in=t.total_out=0,t.data_type=_t;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:St,t.adler=2===e.wrap?0:1,e.last_flush=st,et(e),ct},qt=t=>{const e=Wt(t);var r;return e===ct&&((r=t.state).window_size=2*r.w_size,Dt(r.head),r.max_lazy_match=Yt[r.level].max_lazy,r.good_match=Yt[r.level].good_length,r.nice_match=Yt[r.level].nice_length,r.max_chain_length=Yt[r.level].max_chain,r.strstart=0,r.block_start=0,r.lookahead=0,r.insert=0,r.match_length=r.prev_length=2,r.match_available=0,r.ins_h=0),e},Zt=(t,e,r,n,i,o)=>{if(!t)return dt;let s=1;if(e===gt&&(e=6),n<0?(s=0,n=-n):n>15&&(s=2,n-=16),i<1||i>9||r!==kt||n<8||n>15||e<0||e>9||o<0||o>vt)return It(t,dt);8===n&&(n=9);const a=new Xt;return t.state=a,a.strm=t,a.wrap=s,a.gzhead=null,a.w_bits=n,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=i+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<i+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=e,a.strategy=o,a.method=r,qt(t)};var Gt=Zt,$t=(t,e)=>t&&t.state?2!==t.state.wrap?dt:(t.state.gzhead=e,ct):dt,Ht=(t,e)=>{let r,n;if(!t||!t.state||e>ut||e<0)return t?It(t,dt):dt;const i=t.state;if(!t.output||!t.input&&0!==t.avail_in||i.status===Ct&&e!==lt)return It(t,0===t.avail_out?mt:dt);i.strm=t;const o=i.last_flush;if(i.last_flush=e,42===i.status)if(2===i.wrap)t.adler=0,Ut(i,31),Ut(i,139),Ut(i,8),i.gzhead?(Ut(i,(i.gzhead.text?1:0)+(i.gzhead.hcrc?2:0)+(i.gzhead.extra?4:0)+(i.gzhead.name?8:0)+(i.gzhead.comment?16:0)),Ut(i,255&i.gzhead.time),Ut(i,i.gzhead.time>>8&255),Ut(i,i.gzhead.time>>16&255),Ut(i,i.gzhead.time>>24&255),Ut(i,9===i.level?2:i.strategy>=bt||i.level<2?4:0),Ut(i,255&i.gzhead.os),i.gzhead.extra&&i.gzhead.extra.length&&(Ut(i,255&i.gzhead.extra.length),Ut(i,i.gzhead.extra.length>>8&255)),i.gzhead.hcrc&&(t.adler=K(t.adler,i.pending_buf,i.pending,0)),i.gzindex=0,i.status=69):(Ut(i,0),Ut(i,0),Ut(i,0),Ut(i,0),Ut(i,0),Ut(i,9===i.level?2:i.strategy>=bt||i.level<2?4:0),Ut(i,3),i.status=St);else{let e=kt+(i.w_bits-8<<4)<<8,r=-1;r=i.strategy>=bt||i.level<2?0:i.level<6?1:6===i.level?2:3,e|=r<<6,0!==i.strstart&&(e|=32),e+=31-e%31,i.status=St,Ot(i,e),0!==i.strstart&&(Ot(i,t.adler>>>16),Ot(i,65535&t.adler)),t.adler=1}if(69===i.status)if(i.gzhead.extra){for(r=i.pending;i.gzindex<(65535&i.gzhead.extra.length)&&(i.pending!==i.pending_buf_size||(i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),Rt(t),r=i.pending,i.pending!==i.pending_buf_size));)Ut(i,255&i.gzhead.extra[i.gzindex]),i.gzindex++;i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),i.gzindex===i.gzhead.extra.length&&(i.gzindex=0,i.status=73)}else i.status=73;if(73===i.status)if(i.gzhead.name){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),Rt(t),r=i.pending,i.pending===i.pending_buf_size)){n=1;break}n=i.gzindex<i.gzhead.name.length?255&i.gzhead.name.charCodeAt(i.gzindex++):0,Ut(i,n)}while(0!==n);i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),0===n&&(i.gzindex=0,i.status=91)}else i.status=91;if(91===i.status)if(i.gzhead.comment){r=i.pending;do{if(i.pending===i.pending_buf_size&&(i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),Rt(t),r=i.pending,i.pending===i.pending_buf_size)){n=1;break}n=i.gzindex<i.gzhead.comment.length?255&i.gzhead.comment.charCodeAt(i.gzindex++):0,Ut(i,n)}while(0!==n);i.gzhead.hcrc&&i.pending>r&&(t.adler=K(t.adler,i.pending_buf,i.pending-r,r)),0===n&&(i.status=Et)}else i.status=Et;if(i.status===Et&&(i.gzhead.hcrc?(i.pending+2>i.pending_buf_size&&Rt(t),i.pending+2<=i.pending_buf_size&&(Ut(i,255&t.adler),Ut(i,t.adler>>8&255),t.adler=0,i.status=St)):i.status=St),0!==i.pending){if(Rt(t),0===t.avail_out)return i.last_flush=-1,ct}else if(0===t.avail_in&&Pt(e)<=Pt(o)&&e!==lt)return It(t,mt);if(i.status===Ct&&0!==t.avail_in)return It(t,mt);if(0!==t.avail_in||0!==i.lookahead||e!==st&&i.status!==Ct){let r=i.strategy===bt?((t,e)=>{let r;for(;;){if(0===t.lookahead&&(Nt(t),0===t.lookahead)){if(e===st)return 1;break}if(t.match_length=0,r=it(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(Bt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===lt?(Bt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Bt(t,!1),0===t.strm.avail_out)?1:2})(i,e):i.strategy===yt?((t,e)=>{let r,n,i,o;const s=t.window;for(;;){if(t.lookahead<=At){if(Nt(t),t.lookahead<=At&&e===st)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(i=t.strstart-1,n=s[i],n===s[++i]&&n===s[++i]&&n===s[++i])){o=t.strstart+At;do{}while(n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&n===s[++i]&&i<o);t.match_length=At-(o-i),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=it(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=it(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(Bt(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===lt?(Bt(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Bt(t,!1),0===t.strm.avail_out)?1:2})(i,e):Yt[i.level].func(i,e);if(3!==r&&4!==r||(i.status=Ct),1===r||3===r)return 0===t.avail_out&&(i.last_flush=-1),ct;if(2===r&&(e===at?ot(i):e!==ut&&(rt(i,0,0,!1),e===ht&&(Dt(i.head),0===i.lookahead&&(i.strstart=0,i.block_start=0,i.insert=0))),Rt(t),0===t.avail_out))return i.last_flush=-1,ct}return e!==lt?ct:i.wrap<=0?ft:(2===i.wrap?(Ut(i,255&t.adler),Ut(i,t.adler>>8&255),Ut(i,t.adler>>16&255),Ut(i,t.adler>>24&255),Ut(i,255&t.total_in),Ut(i,t.total_in>>8&255),Ut(i,t.total_in>>16&255),Ut(i,t.total_in>>24&255)):(Ot(i,t.adler>>>16),Ot(i,65535&t.adler)),Rt(t),i.wrap>0&&(i.wrap=-i.wrap),0!==i.pending?ct:ft)},Qt=t=>{if(!t||!t.state)return dt;const e=t.state.status;return 42!==e&&69!==e&&73!==e&&91!==e&&e!==Et&&e!==St&&e!==Ct?It(t,dt):(t.state=null,e===St?It(t,pt):ct)},Kt=(t,e)=>{let r=e.length;if(!t||!t.state)return dt;const n=t.state,i=n.wrap;if(2===i||1===i&&42!==n.status||n.lookahead)return dt;if(1===i&&(t.adler=H(t.adler,e,r,0)),n.wrap=0,r>=n.w_size){0===i&&(Dt(n.head),n.strstart=0,n.block_start=0,n.insert=0);let t=new Uint8Array(n.w_size);t.set(e.subarray(r-n.w_size,r),0),e=t,r=n.w_size}const o=t.avail_in,s=t.next_in,a=t.input;for(t.avail_in=r,t.next_in=0,t.input=e,Nt(n);n.lookahead>=3;){let t=n.strstart,e=n.lookahead-2;do{n.ins_h=Tt(n,n.ins_h,n.window[t+3-1]),n.prev[t&n.w_mask]=n.head[n.ins_h],n.head[n.ins_h]=t,t++}while(--e);n.strstart=t,n.lookahead=2,Nt(n)}return n.strstart+=n.lookahead,n.block_start=n.strstart,n.insert=n.lookahead,n.lookahead=0,n.match_length=n.prev_length=2,n.match_available=0,t.next_in=s,t.input=a,t.avail_in=o,n.wrap=i,ct};const Jt=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var te=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(const e in r)Jt(r,e)&&(t[e]=r[e])}}return t},ee=t=>{let e=0;for(let r=0,n=t.length;r<n;r++)e+=t[r].length;const r=new Uint8Array(e);for(let e=0,n=0,i=t.length;e<i;e++){let i=t[e];r.set(i,n),n+=i.length}return r};let re=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){re=!1}const ne=new Uint8Array(256);for(let t=0;t<256;t++)ne[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;ne[254]=ne[254]=1;var ie=t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,r,n,i,o,s=t.length,a=0;for(i=0;i<s;i++)r=t.charCodeAt(i),55296==(64512&r)&&i+1<s&&(n=t.charCodeAt(i+1),56320==(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),i++)),a+=r<128?1:r<2048?2:r<65536?3:4;for(e=new Uint8Array(a),o=0,i=0;o<a;i++)r=t.charCodeAt(i),55296==(64512&r)&&i+1<s&&(n=t.charCodeAt(i+1),56320==(64512&n)&&(r=65536+(r-55296<<10)+(n-56320),i++)),r<128?e[o++]=r:r<2048?(e[o++]=192|r>>>6,e[o++]=128|63&r):r<65536?(e[o++]=224|r>>>12,e[o++]=128|r>>>6&63,e[o++]=128|63&r):(e[o++]=240|r>>>18,e[o++]=128|r>>>12&63,e[o++]=128|r>>>6&63,e[o++]=128|63&r);return e},oe=(t,e)=>{const r=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let n,i;const o=new Array(2*r);for(i=0,n=0;n<r;){let e=t[n++];if(e<128){o[i++]=e;continue}let s=ne[e];if(s>4)o[i++]=65533,n+=s-1;else{for(e&=2===s?31:3===s?15:7;s>1&&n<r;)e=e<<6|63&t[n++],s--;s>1?o[i++]=65533:e<65536?o[i++]=e:(e-=65536,o[i++]=55296|e>>10&1023,o[i++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&re)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let r="";for(let n=0;n<e;n++)r+=String.fromCharCode(t[n]);return r})(o,i)},se=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let r=e-1;for(;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+ne[t[r]]>e?r:e},ae=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const he=Object.prototype.toString,{Z_NO_FLUSH:le,Z_SYNC_FLUSH:ue,Z_FULL_FLUSH:ce,Z_FINISH:fe,Z_OK:de,Z_STREAM_END:pe,Z_DEFAULT_COMPRESSION:me,Z_DEFAULT_STRATEGY:ge,Z_DEFLATED:we}=tt;function be(t){this.options=te({level:me,method:we,chunkSize:16384,windowBits:15,memLevel:8,strategy:ge},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ae,this.strm.avail_out=0;let r=Gt(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==de)throw new Error(J[r]);if(e.header&&$t(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?ie(e.dictionary):"[object ArrayBuffer]"===he.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,r=Kt(this.strm,t),r!==de)throw new Error(J[r]);this._dict_set=!0}}function ye(t,e){const r=new be(e);if(r.push(t,!0),r.err)throw r.msg||J[r.err];return r.result}be.prototype.push=function(t,e){const r=this.strm,n=this.options.chunkSize;let i,o;if(this.ended)return!1;for(o=e===~~e?e:!0===e?fe:le,"string"==typeof t?r.input=ie(t):"[object ArrayBuffer]"===he.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;)if(0===r.avail_out&&(r.output=new Uint8Array(n),r.next_out=0,r.avail_out=n),(o===ue||o===ce)&&r.avail_out<=6)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else{if(i=Ht(r,o),i===pe)return r.next_out>0&&this.onData(r.output.subarray(0,r.next_out)),i=Qt(this.strm),this.onEnd(i),this.ended=!0,i===de;if(0!==r.avail_out){if(o>0&&r.next_out>0)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else if(0===r.avail_in)break}else this.onData(r.output)}return!0},be.prototype.onData=function(t){this.chunks.push(t)},be.prototype.onEnd=function(t){t===de&&(this.result=ee(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ve={Deflate:be,deflate:ye,deflateRaw:function(t,e){return(e=e||{}).raw=!0,ye(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,ye(t,e)},constants:tt},xe=function(t,e){let r,n,i,o,s,a,h,l,u,c,f,d,p,m,g,w,b,y,v,x,_,k,A,M;const E=t.state;r=t.next_in,A=t.input,n=r+(t.avail_in-5),i=t.next_out,M=t.output,o=i-(e-t.avail_out),s=i+(t.avail_out-257),a=E.dmax,h=E.wsize,l=E.whave,u=E.wnext,c=E.window,f=E.hold,d=E.bits,p=E.lencode,m=E.distcode,g=(1<<E.lenbits)-1,w=(1<<E.distbits)-1;t:do{d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=p[f&g];e:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,0===y)M[i++]=65535&b;else{if(!(16&y)){if(0==(64&y)){b=p[(65535&b)+(f&(1<<y)-1)];continue e}if(32&y){E.mode=12;break t}t.msg="invalid literal/length code",E.mode=30;break t}v=65535&b,y&=15,y&&(d<y&&(f+=A[r++]<<d,d+=8),v+=f&(1<<y)-1,f>>>=y,d-=y),d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=m[f&w];r:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,!(16&y)){if(0==(64&y)){b=m[(65535&b)+(f&(1<<y)-1)];continue r}t.msg="invalid distance code",E.mode=30;break t}if(x=65535&b,y&=15,d<y&&(f+=A[r++]<<d,d+=8,d<y&&(f+=A[r++]<<d,d+=8)),x+=f&(1<<y)-1,x>a){t.msg="invalid distance too far back",E.mode=30;break t}if(f>>>=y,d-=y,y=i-o,x>y){if(y=x-y,y>l&&E.sane){t.msg="invalid distance too far back",E.mode=30;break t}if(_=0,k=c,0===u){if(_+=h-y,y<v){v-=y;do{M[i++]=c[_++]}while(--y);_=i-x,k=M}}else if(u<y){if(_+=h+u-y,y-=u,y<v){v-=y;do{M[i++]=c[_++]}while(--y);if(_=0,u<v){y=u,v-=y;do{M[i++]=c[_++]}while(--y);_=i-x,k=M}}}else if(_+=u-y,y<v){v-=y;do{M[i++]=c[_++]}while(--y);_=i-x,k=M}for(;v>2;)M[i++]=k[_++],M[i++]=k[_++],M[i++]=k[_++],v-=3;v&&(M[i++]=k[_++],v>1&&(M[i++]=k[_++]))}else{_=i-x;do{M[i++]=M[_++],M[i++]=M[_++],M[i++]=M[_++],v-=3}while(v>2);v&&(M[i++]=M[_++],v>1&&(M[i++]=M[_++]))}break}}break}}while(r<n&&i<s);v=d>>3,r-=v,d-=v<<3,f&=(1<<d)-1,t.next_in=r,t.next_out=i,t.avail_in=r<n?n-r+5:5-(r-n),t.avail_out=i<s?s-i+257:257-(i-s),E.hold=f,E.bits=d};const _e=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),ke=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),Ae=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),Me=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var Ee=(t,e,r,n,i,o,s,a)=>{const h=a.bits;let l,u,c,f,d,p,m=0,g=0,w=0,b=0,y=0,v=0,x=0,_=0,k=0,A=0,M=null,E=0;const S=new Uint16Array(16),C=new Uint16Array(16);let I,P,D,T=null,R=0;for(m=0;m<=15;m++)S[m]=0;for(g=0;g<n;g++)S[e[r+g]]++;for(y=h,b=15;b>=1&&0===S[b];b--);if(y>b&&(y=b),0===b)return i[o++]=20971520,i[o++]=20971520,a.bits=1,0;for(w=1;w<b&&0===S[w];w++);for(y<w&&(y=w),_=1,m=1;m<=15;m++)if(_<<=1,_-=S[m],_<0)return-1;if(_>0&&(0===t||1!==b))return-1;for(C[1]=0,m=1;m<15;m++)C[m+1]=C[m]+S[m];for(g=0;g<n;g++)0!==e[r+g]&&(s[C[e[r+g]]++]=g);if(0===t?(M=T=s,p=19):1===t?(M=_e,E-=257,T=ke,R-=257,p=256):(M=Ae,T=Me,p=-1),A=0,g=0,m=w,d=o,v=y,x=0,c=-1,k=1<<y,f=k-1,1===t&&k>852||2===t&&k>592)return 1;for(;;){I=m-x,s[g]<p?(P=0,D=s[g]):s[g]>p?(P=T[R+s[g]],D=M[E+s[g]]):(P=96,D=0),l=1<<m-x,u=1<<v,w=u;do{u-=l,i[d+(A>>x)+u]=I<<24|P<<16|D|0}while(0!==u);for(l=1<<m-1;A&l;)l>>=1;if(0!==l?(A&=l-1,A+=l):A=0,g++,0==--S[m]){if(m===b)break;m=e[r+s[g]]}if(m>y&&(A&f)!==c){for(0===x&&(x=y),d+=w,v=m-x,_=1<<v;v+x<b&&(_-=S[v+x],!(_<=0));)v++,_<<=1;if(k+=1<<v,1===t&&k>852||2===t&&k>592)return 1;c=A&f,i[c]=y<<24|v<<16|d-o|0}}return 0!==A&&(i[d+A]=m-x<<24|64<<16|0),a.bits=y,0};const{Z_FINISH:Se,Z_BLOCK:Ce,Z_TREES:Ie,Z_OK:Pe,Z_STREAM_END:De,Z_NEED_DICT:Te,Z_STREAM_ERROR:Re,Z_DATA_ERROR:Be,Z_MEM_ERROR:Ue,Z_BUF_ERROR:Oe,Z_DEFLATED:Le}=tt,Fe=12,Ne=30,ze=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function je(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Ve=t=>{if(!t||!t.state)return Re;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,Pe},Ye=t=>{if(!t||!t.state)return Re;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Ve(t)},Xe=(t,e)=>{let r;if(!t||!t.state)return Re;const n=t.state;return e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?Re:(null!==n.window&&n.wbits!==e&&(n.window=null),n.wrap=r,n.wbits=e,Ye(t))},We=(t,e)=>{if(!t)return Re;const r=new je;t.state=r,r.window=null;const n=Xe(t,e);return n!==Pe&&(t.state=null),n};let qe,Ze,Ge=!0;const $e=t=>{if(Ge){qe=new Int32Array(512),Ze=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(Ee(1,t.lens,0,288,qe,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;Ee(2,t.lens,0,32,Ze,0,t.work,{bits:5}),Ge=!1}t.lencode=qe,t.lenbits=9,t.distcode=Ze,t.distbits=5},He=(t,e,r,n)=>{let i;const o=t.state;return null===o.window&&(o.wsize=1<<o.wbits,o.wnext=0,o.whave=0,o.window=new Uint8Array(o.wsize)),n>=o.wsize?(o.window.set(e.subarray(r-o.wsize,r),0),o.wnext=0,o.whave=o.wsize):(i=o.wsize-o.wnext,i>n&&(i=n),o.window.set(e.subarray(r-n,r-n+i),o.wnext),(n-=i)?(o.window.set(e.subarray(r-n,r),0),o.wnext=n,o.whave=o.wsize):(o.wnext+=i,o.wnext===o.wsize&&(o.wnext=0),o.whave<o.wsize&&(o.whave+=i))),0};var Qe=Ye,Ke=We,Je=(t,e)=>{let r,n,i,o,s,a,h,l,u,c,f,d,p,m,g,w,b,y,v,x,_,k,A=0;const M=new Uint8Array(4);let E,S;const C=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return Re;r=t.state,r.mode===Fe&&(r.mode=13),s=t.next_out,i=t.output,h=t.avail_out,o=t.next_in,n=t.input,a=t.avail_in,l=r.hold,u=r.bits,c=a,f=h,k=Pe;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;u<16;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(2&r.wrap&&35615===l){r.check=0,M[0]=255&l,M[1]=l>>>8&255,r.check=K(r.check,M,2,0),l=0,u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&l)<<8)+(l>>8))%31){t.msg="incorrect header check",r.mode=Ne;break}if((15&l)!==Le){t.msg="unknown compression method",r.mode=Ne;break}if(l>>>=4,u-=4,_=8+(15&l),0===r.wbits)r.wbits=_;else if(_>r.wbits){t.msg="invalid window size",r.mode=Ne;break}r.dmax=1<<r.wbits,t.adler=r.check=1,r.mode=512&l?10:Fe,l=0,u=0;break;case 2:for(;u<16;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(r.flags=l,(255&r.flags)!==Le){t.msg="unknown compression method",r.mode=Ne;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=Ne;break}r.head&&(r.head.text=l>>8&1),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=K(r.check,M,2,0)),l=0,u=0,r.mode=3;case 3:for(;u<32;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.head&&(r.head.time=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,M[2]=l>>>16&255,M[3]=l>>>24&255,r.check=K(r.check,M,4,0)),l=0,u=0,r.mode=4;case 4:for(;u<16;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.head&&(r.head.xflags=255&l,r.head.os=l>>8),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=K(r.check,M,2,0)),l=0,u=0,r.mode=5;case 5:if(1024&r.flags){for(;u<16;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=K(r.check,M,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(d=r.length,d>a&&(d=a),d&&(r.head&&(_=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Uint8Array(r.head.extra_len)),r.head.extra.set(n.subarray(o,o+d),_)),512&r.flags&&(r.check=K(r.check,n,d,o)),a-=d,o+=d,r.length-=d),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===a)break t;d=0;do{_=n[o+d++],r.head&&_&&r.length<65536&&(r.head.name+=String.fromCharCode(_))}while(_&&d<a);if(512&r.flags&&(r.check=K(r.check,n,d,o)),a-=d,o+=d,_)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===a)break t;d=0;do{_=n[o+d++],r.head&&_&&r.length<65536&&(r.head.comment+=String.fromCharCode(_))}while(_&&d<a);if(512&r.flags&&(r.check=K(r.check,n,d,o)),a-=d,o+=d,_)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;u<16;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(l!==(65535&r.check)){t.msg="header crc mismatch",r.mode=Ne;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=Fe;break;case 10:for(;u<32;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}t.adler=r.check=ze(l),l=0,u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=s,t.avail_out=h,t.next_in=o,t.avail_in=a,r.hold=l,r.bits=u,Te;t.adler=r.check=1,r.mode=Fe;case Fe:if(e===Ce||e===Ie)break t;case 13:if(r.last){l>>>=7&u,u-=7&u,r.mode=27;break}for(;u<3;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}switch(r.last=1&l,l>>>=1,u-=1,3&l){case 0:r.mode=14;break;case 1:if($e(r),r.mode=20,e===Ie){l>>>=2,u-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=Ne}l>>>=2,u-=2;break;case 14:for(l>>>=7&u,u-=7&u;u<32;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if((65535&l)!=(l>>>16^65535)){t.msg="invalid stored block lengths",r.mode=Ne;break}if(r.length=65535&l,l=0,u=0,r.mode=15,e===Ie)break t;case 15:r.mode=16;case 16:if(d=r.length,d){if(d>a&&(d=a),d>h&&(d=h),0===d)break t;i.set(n.subarray(o,o+d),s),a-=d,o+=d,h-=d,s+=d,r.length-=d;break}r.mode=Fe;break;case 17:for(;u<14;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(r.nlen=257+(31&l),l>>>=5,u-=5,r.ndist=1+(31&l),l>>>=5,u-=5,r.ncode=4+(15&l),l>>>=4,u-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=Ne;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;u<3;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.lens[C[r.have++]]=7&l,l>>>=3,u-=3}for(;r.have<19;)r.lens[C[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,E={bits:r.lenbits},k=Ee(0,r.lens,0,19,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid code lengths set",r.mode=Ne;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(b<16)l>>>=g,u-=g,r.lens[r.have++]=b;else{if(16===b){for(S=g+2;u<S;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(l>>>=g,u-=g,0===r.have){t.msg="invalid bit length repeat",r.mode=Ne;break}_=r.lens[r.have-1],d=3+(3&l),l>>>=2,u-=2}else if(17===b){for(S=g+3;u<S;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}l>>>=g,u-=g,_=0,d=3+(7&l),l>>>=3,u-=3}else{for(S=g+7;u<S;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}l>>>=g,u-=g,_=0,d=11+(127&l),l>>>=7,u-=7}if(r.have+d>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=Ne;break}for(;d--;)r.lens[r.have++]=_}}if(r.mode===Ne)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=Ne;break}if(r.lenbits=9,E={bits:r.lenbits},k=Ee(1,r.lens,0,r.nlen,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid literal/lengths set",r.mode=Ne;break}if(r.distbits=6,r.distcode=r.distdyn,E={bits:r.distbits},k=Ee(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,E),r.distbits=E.bits,k){t.msg="invalid distances set",r.mode=Ne;break}if(r.mode=20,e===Ie)break t;case 20:r.mode=21;case 21:if(a>=6&&h>=258){t.next_out=s,t.avail_out=h,t.next_in=o,t.avail_in=a,r.hold=l,r.bits=u,xe(t,f),s=t.next_out,i=t.output,h=t.avail_out,o=t.next_in,n=t.input,a=t.avail_in,l=r.hold,u=r.bits,r.mode===Fe&&(r.back=-1);break}for(r.back=0;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(w&&0==(240&w)){for(y=g,v=w,x=b;A=r.lencode[x+((l&(1<<y+v)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,r.length=b,0===w){r.mode=26;break}if(32&w){r.back=-1,r.mode=Fe;break}if(64&w){t.msg="invalid literal/length code",r.mode=Ne;break}r.extra=15&w,r.mode=22;case 22:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=r.distcode[l&(1<<r.distbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(0==(240&w)){for(y=g,v=w,x=b;A=r.distcode[x+((l&(1<<y+v)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,64&w){t.msg="invalid distance code",r.mode=Ne;break}r.offset=b,r.extra=15&w,r.mode=24;case 24:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=Ne;break}r.mode=25;case 25:if(0===h)break t;if(d=f-h,r.offset>d){if(d=r.offset-d,d>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=Ne;break}d>r.wnext?(d-=r.wnext,p=r.wsize-d):p=r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=i,p=s-r.offset,d=r.length;d>h&&(d=h),h-=d,r.length-=d;do{i[s++]=m[p++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;i[s++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;u<32;){if(0===a)break t;a--,l|=n[o++]<<u,u+=8}if(f-=h,t.total_out+=f,r.total+=f,f&&(t.adler=r.check=r.flags?K(r.check,i,f,s-f):H(r.check,i,f,s-f)),f=h,(r.flags?l:ze(l))!==r.check){t.msg="incorrect data check",r.mode=Ne;break}l=0,u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;u<32;){if(0===a)break t;a--,l+=n[o++]<<u,u+=8}if(l!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=Ne;break}l=0,u=0}r.mode=29;case 29:k=De;break t;case Ne:k=Be;break t;case 31:return Ue;default:return Re}return t.next_out=s,t.avail_out=h,t.next_in=o,t.avail_in=a,r.hold=l,r.bits=u,(r.wsize||f!==t.avail_out&&r.mode<Ne&&(r.mode<27||e!==Se))&&He(t,t.output,t.next_out,f-t.avail_out),c-=t.avail_in,f-=t.avail_out,t.total_in+=c,t.total_out+=f,r.total+=f,r.wrap&&f&&(t.adler=r.check=r.flags?K(r.check,i,f,t.next_out-f):H(r.check,i,f,t.next_out-f)),t.data_type=r.bits+(r.last?64:0)+(r.mode===Fe?128:0)+(20===r.mode||15===r.mode?256:0),(0===c&&0===f||e===Se)&&k===Pe&&(k=Oe),k},tr=t=>{if(!t||!t.state)return Re;let e=t.state;return e.window&&(e.window=null),t.state=null,Pe},er=(t,e)=>{if(!t||!t.state)return Re;const r=t.state;return 0==(2&r.wrap)?Re:(r.head=e,e.done=!1,Pe)},rr=(t,e)=>{const r=e.length;let n,i,o;return t&&t.state?(n=t.state,0!==n.wrap&&11!==n.mode?Re:11===n.mode&&(i=1,i=H(i,e,r,0),i!==n.check)?Be:(o=He(t,e,r,r),o?(n.mode=31,Ue):(n.havedict=1,Pe))):Re},nr=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const ir=Object.prototype.toString,{Z_NO_FLUSH:or,Z_FINISH:sr,Z_OK:ar,Z_STREAM_END:hr,Z_NEED_DICT:lr,Z_STREAM_ERROR:ur,Z_DATA_ERROR:cr,Z_MEM_ERROR:fr}=tt;function dr(t){this.options=te({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new ae,this.strm.avail_out=0;let r=Ke(this.strm,e.windowBits);if(r!==ar)throw new Error(J[r]);if(this.header=new nr,er(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=ie(e.dictionary):"[object ArrayBuffer]"===ir.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=rr(this.strm,e.dictionary),r!==ar)))throw new Error(J[r])}function pr(t,e){const r=new dr(e);if(r.push(t),r.err)throw r.msg||J[r.err];return r.result}dr.prototype.push=function(t,e){const r=this.strm,n=this.options.chunkSize,i=this.options.dictionary;let o,s,a;if(this.ended)return!1;for(s=e===~~e?e:!0===e?sr:or,"[object ArrayBuffer]"===ir.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;){for(0===r.avail_out&&(r.output=new Uint8Array(n),r.next_out=0,r.avail_out=n),o=Je(r,s),o===lr&&i&&(o=rr(r,i),o===ar?o=Je(r,s):o===cr&&(o=lr));r.avail_in>0&&o===hr&&r.state.wrap>0&&0!==t[r.next_in];)Qe(r),o=Je(r,s);switch(o){case ur:case cr:case lr:case fr:return this.onEnd(o),this.ended=!0,!1}if(a=r.avail_out,r.next_out&&(0===r.avail_out||o===hr))if("string"===this.options.to){let t=se(r.output,r.next_out),e=r.next_out-t,i=oe(r.output,t);r.next_out=e,r.avail_out=n-e,e&&r.output.set(r.output.subarray(t,t+e),0),this.onData(i)}else this.onData(r.output.length===r.next_out?r.output:r.output.subarray(0,r.next_out));if(o!==ar||0!==a){if(o===hr)return o=tr(this.strm),this.onEnd(o),this.ended=!0,!0;if(0===r.avail_in)break}}return!0},dr.prototype.onData=function(t){this.chunks.push(t)},dr.prototype.onEnd=function(t){t===ar&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=ee(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var mr={Inflate:dr,inflate:pr,inflateRaw:function(t,e){return(e=e||{}).raw=!0,pr(t,e)},ungzip:pr,constants:tt};const{Deflate:gr,deflate:wr,deflateRaw:br,gzip:yr}=ve,{Inflate:vr,inflate:xr,inflateRaw:_r,ungzip:kr}=mr;var Ar=wr,Mr=vr,Er=xr;const Sr=[137,80,78,71,13,10,26,10],Cr=[];for(let t=0;t<256;t++){let e=t;for(let t=0;t<8;t++)1&e?e=3988292384^e>>>1:e>>>=1;Cr[t]=e}const Ir=4294967295;function Pr(t,e){return(function(t,e,r){let n=4294967295;for(let t=0;t<r;t++)n=Cr[255&(n^e[t])]^n>>>8;return n}(0,t,e)^Ir)>>>0}var Dr,Tr,Rr,Br;!function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.GREYSCALE=0]="GREYSCALE",t[t.TRUECOLOUR=2]="TRUECOLOUR",t[t.INDEXED_COLOUR=3]="INDEXED_COLOUR",t[t.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",t[t.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"}(Dr||(Dr={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.DEFLATE=0]="DEFLATE"}(Tr||(Tr={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.ADAPTIVE=0]="ADAPTIVE"}(Rr||(Rr={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.NO_INTERLACE=0]="NO_INTERLACE",t[t.ADAM7=1]="ADAM7"}(Br||(Br={}));const Ur=new Uint8Array(0),Or=new Uint16Array([255]),Lr=255===new Uint8Array(Or.buffer)[0];class Fr extends g{constructor(t,e={}){super(t);const{checkCrc:r=!1}=e;this._checkCrc=r,this._inflator=new Mr,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._compressionMethod=Tr.UNKNOWN,this._filterMethod=Rr.UNKNOWN,this._interlaceMethod=Br.UNKNOWN,this._colorType=-1,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let t=0;t<Sr.length;t++)if(this.readUint8()!==Sr[t])throw new Error(`wrong PNG signature. Byte at ${t} should be ${Sr[t]}.`)}decodeChunk(){const t=this.readUint32(),e=this.readChars(4),r=this.offset;switch(e){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(t);break;case"IDAT":this.decodeIDAT(t);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(t);break;case"tEXt":this.decodetEXt(t);break;case"pHYs":this.decodepHYs();break;default:this.skip(t)}if(this.offset-r!==t)throw new Error(`Length mismatch while decoding chunk ${e}`);if(this._checkCrc){const r=this.readUint32(),n=t+4,i=Pr(new Uint8Array(this.buffer,this.byteOffset+this.offset-n-4,n),n);if(i!==r)throw new Error(`CRC mismatch for chunk ${e}. Expected ${r}, found ${i}`)}else this.skip(4)}decodeIHDR(){const t=this._png;t.width=this.readUint32(),t.height=this.readUint32(),t.depth=function(t){if(1!==t&&2!==t&&4!==t&&8!==t&&16!==t)throw new Error(`invalid bit depth: ${t}`);return t}(this.readUint8());const e=this.readUint8();let r;switch(this._colorType=e,e){case Dr.GREYSCALE:r=1;break;case Dr.TRUECOLOUR:r=3;break;case Dr.INDEXED_COLOUR:r=1;break;case Dr.GREYSCALE_ALPHA:r=2;break;case Dr.TRUECOLOUR_ALPHA:r=4;break;default:throw new Error(`Unknown color type: ${e}`)}if(this._png.channels=r,this._compressionMethod=this.readUint8(),this._compressionMethod!==Tr.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(t){if(t%3!=0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${t}`);const e=t/3;this._hasPalette=!0;const r=[];this._palette=r;for(let t=0;t<e;t++)r.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(t){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,t)),this.skip(t)}decodetRNS(t){if(3===this._colorType){if(t>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${t} vs ${this._palette.length})`);let e=0;for(;e<t;e++){const t=this.readByte();this._palette[e].push(t)}for(;e<this._palette.length;e++)this._palette[e].push(255)}}decodetEXt(t){let e,r="";for(;"\0"!==(e=this.readChar());)r+=e;this._png.text[r]=this.readChars(t-r.length-1)}decodepHYs(){const t=this.readUint32(),e=this.readUint32(),r=this.readByte();this._png.resolution={x:t,y:e,unit:r}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const t=this._inflator.result;if(this._filterMethod!==Rr.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod!==Br.NO_INTERLACE)throw new Error(`Interlace method ${this._interlaceMethod} not supported`);this.decodeInterlaceNull(t)}decodeInterlaceNull(t){const e=this._png.height,r=this._png.channels*this._png.depth/8,n=this._png.width*r,i=new Uint8Array(this._png.height*n);let o,s,a=Ur,h=0;for(let l=0;l<e;l++){switch(o=t.subarray(h+1,h+1+n),s=i.subarray(l*n,(l+1)*n),t[h]){case 0:Nr(o,s,n);break;case 1:zr(o,s,n,r);break;case 2:jr(o,s,a,n);break;case 3:Vr(o,s,a,n,r);break;case 4:Yr(o,s,a,n,r);break;default:throw new Error(`Unsupported filter: ${t[h]}`)}a=s,h+=n+1}if(this._hasPalette&&(this._png.palette=this._palette),16===this._png.depth){const t=new Uint16Array(i.buffer);if(Lr)for(let e=0;e<t.length;e++)t[e]=(255&(l=t[e]))<<8|l>>8&255;this._png.data=t}else this._png.data=i;var l}}function Nr(t,e,r){for(let n=0;n<r;n++)e[n]=t[n]}function zr(t,e,r,n){let i=0;for(;i<n;i++)e[i]=t[i];for(;i<r;i++)e[i]=t[i]+e[i-n]&255}function jr(t,e,r,n){let i=0;if(0===r.length)for(;i<n;i++)e[i]=t[i];else for(;i<n;i++)e[i]=t[i]+r[i]&255}function Vr(t,e,r,n,i){let o=0;if(0===r.length){for(;o<i;o++)e[o]=t[o];for(;o<n;o++)e[o]=t[o]+(e[o-i]>>1)&255}else{for(;o<i;o++)e[o]=t[o]+(r[o]>>1)&255;for(;o<n;o++)e[o]=t[o]+(e[o-i]+r[o]>>1)&255}}function Yr(t,e,r,n,i){let o=0;if(0===r.length){for(;o<i;o++)e[o]=t[o];for(;o<n;o++)e[o]=t[o]+e[o-i]&255}else{for(;o<i;o++)e[o]=t[o]+r[o]&255;for(;o<n;o++)e[o]=t[o]+Xr(e[o-i],r[o],r[o-i])&255}}function Xr(t,e,r){const n=t+e-r,i=Math.abs(n-t),o=Math.abs(n-e),s=Math.abs(n-r);return i<=o&&i<=s?t:o<=s?e:r}const Wr={level:3};class qr extends g{constructor(t,e={}){super(),this._colorType=Dr.UNKNOWN,this._zlibOptions=Object.assign({},Wr,e.zlib),this._png=this._checkData(t),this.setBigEndian()}encode(){return this.encodeSignature(),this.encodeIHDR(),this.encodeData(),this.encodeIEND(),this.toArray()}encodeSignature(){this.writeBytes(Sr)}encodeIHDR(){this.writeUint32(13),this.writeChars("IHDR"),this.writeUint32(this._png.width),this.writeUint32(this._png.height),this.writeByte(this._png.depth),this.writeByte(this._colorType),this.writeByte(Tr.DEFLATE),this.writeByte(Rr.ADAPTIVE),this.writeByte(Br.NO_INTERLACE),this.writeCrc(17)}encodeIEND(){this.writeUint32(0),this.writeChars("IEND"),this.writeCrc(4)}encodeIDAT(t){this.writeUint32(t.length),this.writeChars("IDAT"),this.writeBytes(t),this.writeCrc(t.length+4)}encodeData(){const{width:t,height:e,channels:r,depth:n,data:i}=this._png,o=r*t,s=(new g).setBigEndian();let a=0;for(let t=0;t<e;t++)if(s.writeByte(0),8===n)a=Gr(i,s,o,a);else{if(16!==n)throw new Error("unreachable");a=$r(i,s,o,a)}const h=s.toArray(),l=Ar(h,this._zlibOptions);this.encodeIDAT(l)}_checkData(t){const{colorType:e,channels:r,depth:n}=function(t){const{channels:e=4,depth:r=8}=t;if(4!==e&&3!==e&&2!==e&&1!==e)throw new RangeError(`unsupported number of channels: ${e}`);if(8!==r&&16!==r)throw new RangeError(`unsupported bit depth: ${r}`);const n={channels:e,depth:r,colorType:Dr.UNKNOWN};switch(e){case 4:n.colorType=Dr.TRUECOLOUR_ALPHA;break;case 3:n.colorType=Dr.TRUECOLOUR;break;case 1:n.colorType=Dr.GREYSCALE;break;case 2:n.colorType=Dr.GREYSCALE_ALPHA;break;default:throw new Error("unsupported number of channels")}return n}(t),i={width:Zr(t.width,"width"),height:Zr(t.height,"height"),channels:r,data:t.data,depth:n,text:{}};this._colorType=e;const o=i.width*i.height*r;if(i.data.length!==o)throw new RangeError(`wrong data size. Found ${i.data.length}, expected ${o}`);return i}writeCrc(t){this.writeUint32(Pr(new Uint8Array(this.buffer,this.byteOffset+this.offset-t,t),t))}}function Zr(t,e){if(Number.isInteger(t)&&t>0)return t;throw new TypeError(`${e} must be a positive integer`)}function Gr(t,e,r,n){for(let i=0;i<r;i++)e.writeByte(t[n++]);return n}function $r(t,e,r,n){for(let i=0;i<r;i++)e.writeUint16(t[n++]);return n}var Hr;!function(t){t[t.UNKNOWN=0]="UNKNOWN",t[t.METRE=1]="METRE"}(Hr||(Hr={}));var Qr=r(7870);let Kr="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Jr=new Uint8Array(256);for(let t=0;t<Kr.length;t++)Jr[Kr.charCodeAt(t)]=t;function tn(t,e){return`data:${e};base64,${function(t){let e,r=t.length,n="";for(e=0;e<r;e+=3)n+=Kr[t[e]>>2],n+=Kr[(3&t[e])<<4|t[e+1]>>4],n+=Kr[(15&t[e+1])<<2|t[e+2]>>6],n+=Kr[63&t[e+2]];return r%3==2?n=`${n.substring(0,n.length-1)}=`:r%3==1&&(n=`${n.substring(0,n.length-2)}==`),n}(t)}`}const en=self.ImageData,rn=self.Image;function nn(t,e){let r=self.document.createElement("canvas");return r.width=t,r.height=e,r}function on(t,e={}){const r={width:t.width,height:t.height,data:t.getRGBAData()};return(0,Qr.encode)(r,e.quality).data}function sn(t,e){const r={width:t.width,height:t.height,channels:t.channels,depth:t.bitDepth,data:t.data};return 1!==r.depth&&32!==r.depth||(r.depth=8,r.channels=4,r.data=t.getRGBAData()),function(t,e){return new qr(t,e).encode()}(r,e)}const an={save(t,e={}){const{useCanvas:r=!1,encoder:n}=e;let{format:i}=e;if(!i){const e=/\.(?<format>[a-zA-Z]+)$/.exec(t);e&&(i=e.groups.format.toLowerCase())}if(!i)throw new Error("file format not provided");return new Promise(((t,e)=>{let o,s;switch(i.toLowerCase()){case"png":r?o=this.getCanvas().pngStream():s=sn(this,n);break;case"jpg":case"jpeg":r?o=this.getCanvas().jpegStream():s=on(this,n);break;case"bmp":s=(0,d.encode)(this,n);break;default:throw new RangeError(`invalid output format: ${i}`)}if(o){let r=function(){throw new Error("createWriteStream does not exist in the browser")}();r.on("finish",t),r.on("error",e),o.pipe(r)}else s&&function(){throw new Error("writeFile does not exist in the browser")}()}))},toDataURL(t="image/png",e={}){"object"==typeof t&&(e=t,t="image/png");const{useCanvas:r=!1,encoder:n}=e;function i(e,r){return tn(e(r,n),t)}return"image/bmp"===(t=function(t){return t.includes("/")||(t=`image/${t}`),t}(t))?i(d.encode,this):"image/png"!==t||r?"image/jpeg"!==t||r?this.getCanvas().toDataURL(t):i(on,this):i(sn,this)},toBuffer(t={}){const{format:e="png",encoder:r}=t;switch(e.toLowerCase()){case"png":return sn(this,r);case"jpeg":case"jpg":return on(this,r);case"bmp":return(0,d.encode)(this,r);default:throw new RangeError(`invalid output format: ${e}`)}},toBase64(t="image/png",e={}){if(e.async)return this.toDataURL(t,e).then((function(t){return t.substring(t.indexOf(",")+1)}));{const r=this.toDataURL(t,e);return r.substring(r.indexOf(",")+1)}},toBlob(t="image/png",e=.8){return c(this.getCanvas(),t,e)},getCanvas(){const t=new en(this.getRGBAData({clamped:!0}),this.width,this.height);let e=nn(this.width,this.height);return e.getContext("2d").putImageData(t,0,0),e}};var hn=r(2251),ln=r.n(hn);let un={configurable:!0,enumerable:!1,get:void 0};const cn="GREY",fn="RGB",dn="HSL",pn="HSV",mn="CMYK",gn="BINARY",wn="RGBA",bn={};bn.BINARY={components:1,alpha:0,bitDepth:1,colorModel:cn},bn.GREYA={components:1,alpha:1,bitDepth:8,colorModel:cn},bn.GREY={components:1,alpha:0,bitDepth:8,colorModel:cn},bn[wn]={components:3,alpha:1,bitDepth:8,colorModel:fn},bn.RGB={components:3,alpha:0,bitDepth:8,colorModel:fn},bn.CMYK={components:4,alpha:0,bitDepth:8,colorModel:mn},bn.CMYKA={components:4,alpha:1,bitDepth:8,colorModel:mn};const yn=[1,8,16,32];var vn=r(9464),xn=r(9184),_n=r.n(xn);r(9798);const kn=new TextDecoder("utf-8"),An=new TextEncoder;class Mn{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const n=e.offset?e.offset>>>0:0,i=t.byteLength-n;let o=n;(ArrayBuffer.isView(t)||t instanceof Mn)&&(t.byteLength!==t.buffer.byteLength&&(o=t.byteOffset+n),t=t.buffer),this.lastWrittenByte=r?i:0,this.buffer=t,this.length=i,this.byteLength=i,this.byteOffset=o,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,o,i),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),kn.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return An.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}const En={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},Sn={};for(let t in En)Sn[En[t]]=Number(t);const Cn={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},In={};for(let t in Cn)In[Cn[t]]=Number(t);const Pn={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},Dn={};for(let t in Pn)Dn[Pn[t]]=Number(t);const Tn={standard:s,exif:i,gps:o};class Rn{constructor(t){if(!t)throw new Error("missing kind");this.data=new Uint8Array,this.fields=new Map,this.kind=t,this._hasMap=!1,this._map={}}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(Tn[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._hasMap){const t=Tn[this.kind].tagsById;for(let e of this.fields.keys())t[e]&&(this._map[t[e]]=this.fields.get(e));this._hasMap=!0}return this._map}}let Bn=new Map([[1,[1,Un]],[2,[1,function(t,e){let r=[],n="";for(let i=0;i<e;i++){let e=String.fromCharCode(t.readUint8());"\0"===e?(r.push(n),n=""):n+=e}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();let r=new Uint16Array(e);for(let n=0;n<e;n++)r[n]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();let r=new Uint32Array(e);for(let n=0;n<e;n++)r[n]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();let r=new Array(e);for(let n=0;n<e;n++)r[n]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();let r=new Int8Array(e);for(let n=0;n<e;n++)r[n]=t.readInt8();return r}]],[7,[1,Un]],[8,[2,function(t,e){if(1===e)return t.readInt16();let r=new Int16Array(e);for(let n=0;n<e;n++)r[n]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();let r=new Int32Array(e);for(let n=0;n<e;n++)r[n]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();let r=new Array(e);for(let n=0;n<e;n++)r[n]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();let r=new Float32Array(e);for(let n=0;n<e;n++)r[n]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();let r=new Float64Array(e);for(let n=0;n<e;n++)r[n]=t.readFloat64();return r}]]]);function Un(t,e){if(1===e)return t.readUint8();let r=new Uint8Array(e);for(let n=0;n<e;n++)r[n]=t.readUint8();return r}const On=[];for(let t=0;t<256;t++)On.push([t]);const Ln=[0];for(let t=256;t<4096;t++)On.push(Ln);class Fn{constructor(t){this.stripArray=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);const e=new Map;for(let t=0;t<256;t++)e.set(t,[t]);this.currentBit=0,this.tableLength=258,this.currentBitLength=9,this.outData=new Mn(t.byteLength)}decode(){let t=0,e=0;for(;257!==(t=this.getNextCode());)if(256===t){if(this.initializeTable(),t=this.getNextCode(),257===t)break;this.writeString(this.stringFromCode(t)),e=t}else if(this.isInTable(t))this.writeString(this.stringFromCode(t)),this.addStringToTable(this.stringFromCode(e).concat(this.stringFromCode(t)[0])),e=t;else{const r=this.stringFromCode(e).concat(this.stringFromCode(e)[0]);this.writeString(r),this.addStringToTable(r),e=t}const r=this.outData.toArray();return new DataView(r.buffer,r.byteOffset,r.byteLength)}initializeTable(){this.tableLength=258,this.currentBitLength=9}writeString(t){this.outData.writeBytes(t)}stringFromCode(t){return On[t]}isInTable(t){return t<this.tableLength}addStringToTable(t){On[this.tableLength++]=t,this.tableLength+1===2**this.currentBitLength&&this.currentBitLength++}getNextCode(){const t=this.currentBit%8,e=this.currentBit>>>3,r=8-t,n=this.currentBit+this.currentBitLength-8*(e+1);let i=8*(e+2)-(this.currentBit+this.currentBitLength);const o=8*(e+2)-this.currentBit;i=Math.max(0,i);let s=this.stripArray[e]&2**(8-t)-1;s<<=this.currentBitLength-r;let a=s;if(e+1<this.stripArray.length){let t=this.stripArray[e+1]>>>i;t<<=Math.max(0,this.currentBitLength-o),a+=t}if(n>8&&e+2<this.stripArray.length){const t=8*(e+3)-(this.currentBit+this.currentBitLength);a+=this.stripArray[e+2]>>>t}return this.currentBit+=this.currentBitLength,a}}function Nn(t){return new Fn(t).decode()}const zn=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;class jn extends Rn{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){let t=new Date,e=zn.exec(this.dateTime);if(null===e)throw new Error(`invalid dateTime: ${this.dateTime}`);return t.setFullYear(Number(e[1]),Number(e[2])-1,Number(e[3])),t.setHours(Number(e[4]),Number(e[5]),Number(e[6])),t}get newSubfileType(){return this.get("NewSubfileType")}get imageWidth(){return this.get("ImageWidth")}get imageLength(){return this.get("ImageLength")}get bitsPerSample(){const t=this.get("BitsPerSample");return t&&"number"!=typeof t?t[0]:t}get alpha(){const t=this.extraSamples;return!!t&&0!==t[0]}get associatedAlpha(){const t=this.extraSamples;return!!t&&1===t[0]}get extraSamples(){return Vn(this.get("ExtraSamples"))}get compression(){return this.get("Compression")||1}get type(){return this.get("PhotometricInterpretation")}get fillOrder(){return this.get("FillOrder")||1}get documentName(){return this.get("DocumentName")}get imageDescription(){return this.get("ImageDescription")}get stripOffsets(){return Vn(this.get("StripOffsets"))}get orientation(){return this.get("Orientation")}get samplesPerPixel(){return this.get("SamplesPerPixel")||1}get rowsPerStrip(){return this.get("RowsPerStrip")}get stripByteCounts(){return Vn(this.get("StripByteCounts"))}get minSampleValue(){return this.get("MinSampleValue")||0}get maxSampleValue(){return this.get("MaxSampleValue")||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get("XResolution")}get yResolution(){return this.get("YResolution")}get planarConfiguration(){return this.get("PlanarConfiguration")||1}get resolutionUnit(){return this.get("ResolutionUnit")||2}get dateTime(){return this.get("DateTime")}get predictor(){return this.get("Predictor")||1}get sampleFormat(){return this.get("SampleFormat")||1}get sMinSampleValue(){return this.get("SMinSampleValue")||this.minSampleValue}get sMaxSampleValue(){return this.get("SMaxSampleValue")||this.maxSampleValue}get palette(){const t=2**this.bitsPerSample,e=this.get("ColorMap");if(!e)return;if(e.length!==3*t)throw new Error(`ColorMap size must be ${t}`);const r=[];for(let n=0;n<t;n++)r.push([e[n],e[n+t],e[n+2*t]]);return r}}function Vn(t){return"number"==typeof t?[t]:t}function Yn(t){const e=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),r=Er(e);return new DataView(r.buffer,r.byteOffset,r.byteLength)}const Xn={ignoreImageData:!1,onlyFirst:!1};class Wn extends Mn{constructor(t){super(t),this._nextIFD=0}get isMultiPage(){let t=0;for(this.decodeHeader();this._nextIFD;)if(t++,this.decodeIFD({ignoreImageData:!0},!0),2===t)return!0;if(1===t)return!1;throw qn("ifdCount",t)}get pageCount(){let t=0;for(this.decodeHeader();this._nextIFD;)t++,this.decodeIFD({ignoreImageData:!0},!0);if(t>0)return t;throw qn("ifdCount",t)}decode(t={}){t=Object.assign({},Xn,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t,!0)),t.onlyFirst)return[e[0]];return e}decodeHeader(){const t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error(`invalid byte order: 0x${t.toString(16)}`);this.setBigEndian()}if(42!==this.readUint16())throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t,e){let r;if(this.seek(this._nextIFD),e)r=new jn;else{if(!t.kind)throw new Error("kind is missing");r=new Rn(t.kind)}const n=this.readUint16();for(let t=0;t<n;t++)this.decodeIFDEntry(r);if(!t.ignoreImageData){if(!(r instanceof jn))throw new Error("must be a tiff ifd");this.decodeImageData(r)}return this._nextIFD=this.readUint32(),r}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),n=this.readUint16(),i=this.readUint32();if(n<1||n>12)return void this.skip(4);const o=function(t,e){const r=Bn.get(t);if(!r)throw new Error(`type not found: ${t}`);return r[0]*e}(n,i);o>4&&this.seek(this.readUint32());const s=function(t,e,r){const n=Bn.get(e);if(!n)throw new Error(`type not found: ${e}`);return n[1](t,r)}(this,n,i);if(t.fields.set(r,s),34665===r||34853===r){let e=this.offset,n="exif";34665===r?n="exif":34853===r&&(n="gps"),this._nextIFD=s,t[n]=this.decodeIFD({kind:n,ignoreImageData:!0},!1),this.offset=e}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;if(e&&1!==e)throw qn("orientation",e);switch(t.type){case 0:case 1:case 2:case 3:this.readStripData(t);break;default:throw qn("image type",t.type)}if(this.applyPredictor(t),this.convertAlpha(t),0===t.type){const e=t.bitsPerSample,r=Math.pow(2,e)-1;for(let e=0;e<t.data.length;e++)t.data[e]=r-t.data[e]}}readStripData(t){const e=t.width,r=t.height,n=t.bitsPerSample,i=t.sampleFormat,o=e*r*t.samplesPerPixel,s=function(t,e,r){if(8===e)return new Uint8Array(t);if(16===e)return new Uint16Array(t);if(32===e&&3===r)return new Float32Array(t);throw qn("bit depth / sample format",`${e} / ${r}`)}(o,n,i),a=t.rowsPerStrip*e*t.samplesPerPixel,h=t.stripOffsets,l=t.stripByteCounts;let u=o,c=0;for(let e=0;e<h.length;e++){let r=new DataView(this.buffer,h[e],l[e]),o=u>a?a:u;u-=o;let f=r;switch(t.compression){case 1:break;case 5:f=Nn(r);break;case 8:f=Yn(r);break;case 2:throw qn("Compression","CCITT Group 3");case 32773:throw qn("Compression","PackBits");default:throw qn("Compression",t.compression)}c=this.fillUncompressed(n,i,s,f,c,o)}t.data=s}fillUncompressed(t,e,r,n,i,o){if(8===t)return function(t,e,r,n){for(let i=0;i<n;i++)t[r++]=e.getUint8(i);return r}(r,n,i,o);if(16===t)return function(t,e,r,n,i){for(let o=0;o<2*n;o+=2)t[r++]=e.getUint16(o,i);return r}(r,n,i,o,this.isLittleEndian());if(32===t&&3===e)return function(t,e,r,n,i){for(let o=0;o<4*n;o+=4)t[r++]=e.getFloat32(o,i);return r}(r,n,i,o,this.isLittleEndian());throw qn("bitDepth",t)}applyPredictor(t){const e=t.bitsPerSample;switch(t.predictor){case 1:break;case 2:if(8===e)!function(t,e,r){let n=0;for(;n<t.length;){for(let i=r;i<e*r;i+=r)for(let e=0;e<r;e++)t[n+i+e]=t[n+i+e]+t[n+i-(r-e)]&255;n+=e*r}}(t.data,t.width,t.components);else{if(16!==e)throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${e}`);!function(t,e,r){let n=0;for(;n<t.length;){for(let i=r;i<e*r;i+=r)for(let e=0;e<r;e++)t[n+i+e]=t[n+i+e]+t[n+i-(r-e)]&65535;n+=e*r}}(t.data,t.width,t.components)}break;default:throw new Error(`invalid predictor: ${t.predictor}`)}}convertAlpha(t){if(t.alpha&&t.associatedAlpha){const{data:e,components:r,maxSampleValue:n}=t;for(let t=0;t<e.length;t+=r){const i=e[t+r-1];for(let o=0;o<r-1;o++)e[t+o]=Math.round(e[t+o]*n/i)}}}}function qn(t,e){return new Error(`Unsupported ${t}: ${e}`)}function Zn(t={}){let{algorithm:e="matchToPrevious",ignoreBorder:r=[0,0]}=t;this.checkProcessable("matchAndCrop",{bitDepth:[8,16]});let n="matchToPrevious"===e,i=this[0],o=[];o[0]={position:[0,0],image:this[0]};let s=[0,0];for(let t=1;t<this.length;t++){let e=i.getBestMatch(this[t],{border:r});o[t]={position:[e[0]+s[0],e[1]+s[1]],image:this[t]},n&&(s[0]+=e[0],s[1]+=e[1],i=this[t])}let a=0,h=0,l=0,u=0;for(let t=0;t<o.length;t++){let e=o[t];e.position[0]>a&&(a=e.position[0]),e.position[0]<h&&(h=e.position[0]),e.position[1]>l&&(l=e.position[1]),e.position[1]<u&&(u=e.position[1])}h=0-h,u=0-u;for(let t=0;t<o.length;t++){let e=o[t];e.crop=e.image.crop({x:a-e.position[0],y:l-e.position[1],width:i.width-h-a,height:i.height-u-l})}let c=[];for(let t=0;t<o.length;t++)c[t]=o[t].crop;return new oi(c)}function Gn(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].min;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.min(t[r],this[e].min[r]);return t}function $n(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].max;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.max(t[r],this[e].max[r]);return t}function Hn(t){let e=t.reduce(((t,e)=>t+e));if(0===e)throw new Error("unreachable");let r,n=0,i=0,o=e/2;for(;;){if(t[n]>0){if(void 0!==r)return(r+n)/2;if(i+=t[n],i>o)return n;i===o&&(r=n)}n++}}function Qn(t){let e=0,r=0;for(let n=0;n<t.length;n++)e+=t[n],r+=t[n]*n;return 0===e?0:r/e}function Kn(){this.checkProcessable("median",{bitDepth:[8,16]});let t=this.getHistograms({maxSlots:this[0].maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let n=t[r];e[r]=Hn(n)}return e}function Jn(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistogram(t);for(let r=1;r<this.length;r++){let n=this[r].getHistogram(t);for(let t=0;t<e.length;t++)e[t]+=n[t]}return e}function ti(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistograms(t),r=e[0].length;for(let n=1;n<this.length;n++){let i=this[n].getHistograms(t);for(let t=0;t<e.length;t++)for(let n=0;n<r;n++)e[t][n]+=i[t][n]}return e}function ei(){this.checkProcessable("averageImage",{bitDepth:[8,16]});let t=new Uint32Array(this[0].data.length);for(let e=0;e<this.length;e++){let r=this[e];for(let e=0;e<this[0].data.length;e++)t[e]+=r.data[e]}let e=fh.createFrom(this[0]),r=e.data;for(let e=0;e<this[0].data.length;e++)r[e]=t[e]/this.length;return e}function ri(){this.checkProcessable("max",{bitDepth:[8,16]});let t=fh.createFrom(this[0]);t.data.fill(0);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.max(e.data[r],t.data[r]);return t}function ni(){this.checkProcessable("max",{bitDepth:[8,16]});let t=fh.createFrom(this[0]);t.data.fill(t.maxValue);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.min(e.data[r],t.data[r]);return t}let ii={configurable:!0,enumerable:!1,get:void 0};class oi extends Array{constructor(t){if(Array.isArray(t)){super(t.length);for(let e=0;e<t.length;e++)this[e]=t[e]}else"number"==typeof t?super(t):super();this.computed=null}static load(t){return Promise.all(t.map(fh.load)).then((t=>new oi(t)))}static extendMethod(t,e,r={}){let{inPlace:n=!1,returnThis:i=!0,partialArgs:o=[]}=r;return oi.prototype[t]=n?function(...t){this.computed=null;let r=e.apply(this,[...o,...t]);return i?this:r}:function(...t){return e.apply(this,[...o,...t])},oi}static extendProperty(t,e,r={}){let{partialArgs:n=[]}=r;return ii.get=function(){if(null===this.computed)this.computed={};else if(ln()(t,this.computed))return this.computed[t];let r=e.apply(this,n);return this.computed[t]=r,r},Object.defineProperty(oi.prototype,t,ii),oi}checkProcessable(t,e={}){if("string"!=typeof t)throw new TypeError("checkProcessable requires as first parameter the processName (a string)");if(0===this.size)throw new TypeError(`The process: ${t} can not be applied on an empty stack`);this[0].checkProcessable(t,e);for(let r=1;r<this.length;r++){if((void 0===e.sameSize||e.sameSize)&&this[0].width!==this[r].width)throw new TypeError(`The process: ${t} can not be applied if width is not identical in all images`);if((void 0===e.sameSize||e.sameSize)&&this[0].height!==this[r].height)throw new TypeError(`The process: ${t} can not be applied if height is not identical in all images`);if((void 0===e.sameAlpha||e.sameAlpha)&&this[0].alpha!==this[r].alpha)throw new TypeError(`The process: ${t} can not be applied if alpha is not identical in all images`);if((void 0===e.sameBitDepth||e.sameBitDepth)&&this[0].bitDepth!==this[r].bitDepth)throw new TypeError(`The process: ${t} can not be applied if bitDepth is not identical in all images`);if((void 0===e.sameColorModel||e.sameColorModel)&&this[0].colorModel!==this[r].colorModel)throw new TypeError(`The process: ${t} can not be applied if colorModel is not identical in all images`);if((void 0===e.sameNumberChannels||e.sameNumberChannels)&&this[0].channels!==this[r].channels)throw new TypeError(`The process: ${t} can not be applied if channels is not identical in all images`)}}}Array[Symbol.species]||(oi.prototype.map=function(t,e){if("function"!=typeof t)throw new TypeError(`${t} is not a function`);let r=new oi(this.length);for(let n=0;n<this.length;n++)r[n]=t.call(e,this[n],n,this);return r}),function(t){t.extendMethod("matchAndCrop",Zn),t.extendMethod("getMin",Gn),t.extendMethod("getMax",$n),t.extendMethod("getMedian",Kn),t.extendMethod("getHistogram",Jn),t.extendMethod("getHistograms",ti),t.extendMethod("getAverage",ei),t.extendMethod("getAverageImage",ei),t.extendMethod("getMaxImage",ri),t.extendMethod("getMinImage",ni)}(oi);const si=/^data:[a-z]+\/(?:[a-z]+);base64,/;function ai(t,e){const r=_n()(t);if(r)switch(r.mime){case"image/png":return function(t){const e=function(t,e){return new Fr(t,void 0).decode()}(t);let r,n=e.channels,i=0;return 2===n||4===n?(r=n-1,i=1):r=n,e.palette?function(t){const e=t.width*t.height,r=t.palette[0].length,n=new Uint8Array(e*r),i=8/t.depth,o=t.depth<8?i:1,s=parseInt("1".repeat(t.depth),2),a=4===r;let h=0;for(let r=0;r<e;r++){const e=Math.floor(r/o);let l=t.data[e];t.depth<8&&(l=l>>>t.depth*(i-1-r%i)&s);const u=t.palette[l];n[h++]=u[0],n[h++]=u[1],n[h++]=u[2],a&&(n[h++]=u[3])}return new fh(t.width,t.height,n,{components:3,alpha:a,bitDepth:8})}(e):new fh(e.width,e.height,e.data,{components:r,alpha:i,bitDepth:e.depth})}(t);case"image/jpeg":return function(t){const e=(0,vn.decode)(t);let r;e.exif&&(r=hi(e.exif));const n=(0,Qr.decode)(t,{useTArray:!0,maxMemoryUsageInMB:1024});return new fh(n.width,n.height,n.data,{meta:r})}(t);case"image/tiff":return function(t){let e=function(t,e){return new Wn(t).decode(void 0)}(t);return 1===e.length?li(e[0]):new oi(e.map(li))}(t);default:return ui(n(r.mime))}return ui(n("application/octet-stream"));function n(r){return e||tn(t,r)}}function hi(t){const e={tiff:{fields:t.fields,tags:t.map}};return t.exif&&(e.exif=t.exif),t.gps&&(e.gps=t.gps),e}function li(t){if(3===t.type){const e=new Uint16Array(3*t.width*t.height),r=t.palette;let n=0;for(let i=0;i<t.data.length;i++){const o=r[t.data[i]];e[n++]=o[0],e[n++]=o[1],e[n++]=o[2]}return new fh(t.width,t.height,e,{components:3,alpha:t.alpha,colorModel:fn,bitDepth:16,meta:hi(t)})}return new fh(t.width,t.height,t.data,{components:2===t.type?3:1,alpha:t.alpha,colorModel:2===t.type?fn:cn,bitDepth:t.bitsPerSample.length?t.bitsPerSample[0]:t.bitsPerSample,meta:hi(t)})}function ui(t,e){return e=e||{},new Promise((function(r,n){let i=new rn;i.onload=function(){let t=i.width,n=i.height,o=nn(t,n).getContext("2d");o.drawImage(i,0,0,t,n);let s=o.getImageData(0,0,t,n).data;r(new fh(t,n,s,e))},i.onerror=function(){n(new Error(`Could not load ${t}`))},i.src=t}))}const ci={getValueXY(t,e,r){return this.data[(e*this.width+t)*this.channels+r]},setValueXY(t,e,r,n){return this.data[(e*this.width+t)*this.channels+r]=n,this.computed=null,this},getValue(t,e){return this.data[t*this.channels+e]},setValue(t,e,r){return this.data[t*this.channels+e]=r,this.computed=null,this},getPixelXY(t,e){return this.getPixel(e*this.width+t)},setPixelXY(t,e,r){return this.setPixel(e*this.width+t,r)},getPixel(t){const e=new Array(this.channels),r=t*this.channels;for(let t=0;t<this.channels;t++)e[t]=this.data[r+t];return e},setPixel(t,e){const r=t*this.channels;for(let t=0;t<e.length;t++)this.data[r+t]=e[t];return this.computed=null,this}};function fi(t){return{width:t.width,height:t.height,components:t.components,alpha:t.alpha,colorModel:t.colorModel,bitDepth:t.bitDepth}}function di(t,e,r,n={}){const{out:i}=e;if(void 0===i)return n.copy?t.clone():fh.createFrom(t,r);{if(!fh.isImage(i))throw new TypeError("out must be an Image object");const e=Object.assign(fi(t),r);for(const t in e)if(i[t]!==e[t])throw new RangeError(`cannot use out. Its ${t} must be "${e[t]}" (found "${i[t]}")`);return i}}function pi(t,e,r){if(void 0!==e.inPlace&&"boolean"!=typeof e.inPlace)throw new TypeError("inPlace option must be a boolean");if(e.inPlace){if(void 0!==e.out)throw new TypeError("out option must not be set if inPlace option is true");return t}return di(t,e,null,r)}function mi(t={}){this.checkProcessable("abs",{bitDepth:[32]});const e=pi(this,t);return function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=Math.abs(t.data[r])}(this,e),e}function gi(t={}){this.checkProcessable("invert",{bitDepth:[1,8,16]});const e=pi(this,t);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=~t.data[r]}(this,e):(function(t,e){for(let r=0;r<t.data.length;r+=t.channels)for(let n=0;n<t.components;n++)e.data[r+n]=t.maxValue-t.data[r+n]}(this,e),this!==e&&function(t,e){if(1===t.alpha&&1===e.alpha)for(let r=0;r<t.size;r++)e.data[r*e.channels+e.components]=t.data[r*t.channels+t.components]}(this,e)),e}function wi(){this.checkProcessable("flipX",{bitDepth:[8,16]});for(let t=0;t<this.height;t++){let e=t*this.width*this.channels;for(let t=0;t<Math.floor(this.width/2);t++){let r=t*this.channels+e,n=(this.width-t-1)*this.channels+e;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[n+t],this.data[n+t]=e}}}return this}function bi(){this.checkProcessable("flipY",{bitDepth:[8,16]});for(let t=0;t<Math.floor(this.height/2);t++)for(let e=0;e<this.width;e++){let r=e*this.channels+t*this.width*this.channels,n=e*this.channels+(this.height-1-t)*this.channels*this.width;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[n+t],this.data[n+t]=e}}return this}function yi(t={}){const{radius:e=1}=t;if(e<1)throw new Error("radius must be greater than 1");const r=2*e+1,n=new Array(r);for(let t=0;t<r;t++){n[t]=new Array(r);for(let e=0;e<r;e++)n[t][e]=1/(r*r)}return this.convolution(n)}var vi=r(5520),xi=r.n(vi);function _i(t,e={}){let{channels:r,allowAlpha:n,defaultAlpha:i}=e;return"boolean"!=typeof n&&(n=!0),void 0===r?function(t,e){let r=e?t.channels:t.components,n=new Array(r);for(let t=0;t<r;t++)n[t]=t;return n}(t,i):function(t,e,r){Array.isArray(e)||(e=[e]);for(let n=0;n<e.length;n++)e[n]=ki(t,e[n],r);return e}(t,r,n)}function ki(t,e,r=!0){if(void 0===e)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if("string"==typeof e){switch(t.colorModel){case cn:break;case fn:if("rgb".includes(e))switch(e){case"r":e=0;break;case"g":e=1;break;case"b":e=2}break;case dn:if("hsl".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"l":e=2}break;case pn:if("hsv".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"v":e=2}break;case mn:if("cmyk".includes(e))switch(e){case"c":e=0;break;case"m":e=1;break;case"y":e=2;break;case"k":e=3}break;default:throw new Error(`Unexpected color model: ${t.colorModel}`)}if("a"===e){if(!t.alpha)throw new Error("validateChannel : the image does not contain alpha channel");e=t.components}if("string"==typeof e)throw new Error(`validateChannel : undefined channel: ${e}`)}if(e>=t.channels)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if(!r&&e>=t.components)throw new RangeError("validateChannel : alpha channel may not be selected");return e}function Ai(t={}){let{radius:e=1,border:r="copy",channels:n}=t;if(this.checkProcessable("medianFilter",{bitDepth:[8,16]}),e<1)throw new Error("radius must be greater than 0");n=_i(this,n);let i=e,o=e,s=fh.createFrom(this),a=new Array((2*i+1)*(2*o+1));for(let t=0;t<n.length;t++){let e=n[t];for(let t=o;t<this.height-o;t++)for(let r=i;r<this.width-i;r++){let n=0;for(let s=-o;s<=o;s++)for(let o=-i;o<=i;o++){let i=((t+s)*this.width+r+o)*this.channels+e;a[n++]=this.data[i]}let h=(t*this.width+r)*this.channels+e;s.data[h]=xi()(a)}}if(this.alpha&&!n.includes(this.channels))for(let t=this.components;t<this.data.length;t+=this.channels)s.data[t]=this.data[t];return s.setBorder({size:[i,o],algorithm:r}),s}function Mi(t={}){let{radius:e=1,sigma:r,channels:n,border:i="copy"}=t;this.checkProcessable("gaussian",{bitDepth:[8,16]});const o=function(t,e){const r=2*t+1,n=new Array(r),i=e||.3*(.5*(r-1)-1)+.8,o=-.5/(i*i);let s=0;for(let e=0;e<r;e++){const r=e-t,i=Math.exp(o*r*r);n[e]=i,s+=i}for(let t=0;t<r;t++)n[t]/=s;return n}(e,r);return this.convolution([o,o],{border:i,channels:n,algorithm:"separable"})}const Ei=[[0,1,0],[1,-4,1],[0,1,0]],Si=[[1,1,1],[1,-8,1],[1,1,1]],Ci=[[-1,0,1],[-2,0,2],[-1,0,1]],Ii=[[-1,-2,-1],[0,0,0],[1,2,1]],Pi=[[3,0,-3],[10,0,-10],[3,0,-3]],Di=[[3,10,3],[0,0,0],[-3,-10,-3]],Ti=[[-1,-2,0,2,1],[-2,-4,0,4,2],[0,0,0,0,0],[1,2,0,-2,-1],[2,4,0,-4,-2]],Ri=[[1,2,0,-2,-1],[2,4,0,-4,-2],[0,0,0,0,0],[-2,-4,0,4,2],[-1,-2,0,2,1]];var Bi=r(450),Ui=r(8336),Oi=r.n(Ui);function Li(t,e){return Math.round(Math.min(Math.max(t,0),e.maxValue))}function Fi(t,e,r){if(void 0===r){const n=t.length+e.length-1;r=new Array(n)}!function(t){for(var e=0;e<t.length;e++)t[e]=0}(r);for(var n=0;n<t.length;n++)for(var i=0;i<e.length;i++)r[n+i]+=t[n]*e[i];return r}function Ni(t,e,r,n){const i=new Array(t.length);let o,s,a,h;h=e[1],a=(h.length-1)/2,s=new Array(r+h.length-1),o=new Array(r);for(let e=0;e<n;e++){for(let n=0;n<r;n++)o[n]=t[e*r+n];Fi(o,h,s);for(let t=0;t<r;t++)i[e*r+t]=s[a+t]}h=e[0],a=(h.length-1)/2,s=new Array(n+h.length-1),o=new Array(n);for(let t=0;t<r;t++){for(let e=0;e<n;e++)o[e]=i[e*r+t];Fi(o,h,s);for(let e=0;e<n;e++)i[e*r+t]=s[a+e]}return i}r(9645),r(995);var zi=r(6943);function ji(t,e={}){let{channels:r,bitDepth:n,normalize:i=!1,divisor:o=1,border:s="copy",algorithm:a="auto"}=e,h={};n&&(h.bitDepth=n);let l,u,c=fh.createFrom(this,h);if(r=_i(this,r),"separable"!==a)({kernel:t}=function(t){let e,r;if(!Array.isArray(t))throw new Error(`validateKernel: Invalid Kernel: ${t}`);if(Array.isArray(t[0])){if(0==(1&t.length)||0==(1&t[0].length))throw new RangeError("validateKernel: Kernel rows and columns should be odd numbers");e=Math.floor(t.length/2),r=Math.floor(t[0].length/2)}else{let n=Math.sqrt(t.length);if(!Oi()(n))throw new RangeError("validateKernel: Kernel array should be a square");r=e=Math.floor(Math.sqrt(t.length)/2);let i=new Array(n);for(let e=0;e<n;e++){i[e]=new Array(n);for(let r=0;r<n;r++)i[e][r]=t[e*n+r]}t=i}return{kernel:t,kWidth:r,kHeight:e}}(t));else if(!Array.isArray(t)||2!==t.length)throw new RangeError("separable convolution requires two arrays of numbers to represent the kernel");if("auto"===a){let e=function(t){const e=new zi.Z(t,{autoTranspose:!0});if(1!==e.rank)return null;const r=Math.sqrt(e.s[0]);return[e.U.to2DArray().map((t=>t[0]*r)),e.V.to2DArray().map((t=>t[0]*r))]}(t);null!==e?(a="separable",t=e):a=(t.length>9||t[0].length>9)&&this.width<=4096&&this.height<=4096?"fft":"direct"}"separable"===a?(l=Math.floor(t[0].length/2),u=Math.floor(t[1].length/2)):(l=Math.floor(t.length/2),u=Math.floor(t[0].length/2));let f,d,p,m,g,w,b=c.isClamped,y=new Array(this.height*this.width);for(m=0;m<r.length;m++){for(g=r[m],p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,y[f]=this.data[f*this.channels+g];if("direct"===a)w=(0,Bi.direct)(y,t,{rows:this.height,cols:this.width,normalize:i,divisor:o});else if("separable"===a){if(w=Ni(y,t,this.width,this.height),i){o=0;for(let e=0;e<t[0].length;e++)for(let r=0;r<t[1].length;r++)o+=t[0][e]*t[1][r]}if(1!==o)for(let t=0;t<w.length;t++)w[t]/=o}else w=(0,Bi.fft)(y,t,{rows:this.height,cols:this.width,normalize:i,divisor:o});for(p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,c.data[f*this.channels+g]=b?Li(w[f],c):w[f]}if(this.alpha&&!r.includes(this.channels))for(d=this.components;d<this.data.length;d+=this.channels)c.data[d]=this.data[d];return"periodic"!==s&&c.setBorder({size:[u,l],algorithm:s}),c}function Vi(t={}){let{direction:e="xy",border:r="copy",kernelX:n,kernelY:i,channels:o,bitDepth:s=this.bitDepth}=t;switch(this.checkProcessable("gradientFilter",{bitDepth:[8,16]}),e){case"x":if(!n)throw new Error("kernelX option is missing");return ji.call(this,n,{channels:o,border:r,bitDepth:s});case"y":if(!i)throw new Error("kernelY option is missing");return ji.call(this,i,{channels:o,border:r,bitDepth:s});case"xy":{if(!n)throw new Error("kernelX option is missing");if(!i)throw new Error("kernelY option is missing");const t=ji.call(this,n,{channels:o,border:r,bitDepth:32}),e=ji.call(this,i,{channels:o,border:r,bitDepth:32});return t.hypotenuse(e,{bitDepth:s,channels:o})}default:throw new Error(`Unknown parameter direction: ${e}`)}}function Yi(t){return Vi.call(this,Object.assign({},t,{kernelX:Ci,kernelY:Ii}))}function Xi(t){return Vi.call(this,Object.assign({},t,{kernelX:Pi,kernelY:Di}))}var Wi=r(2664),qi=r.n(Wi);function Zi(t={}){let{algorithm:e="range",channels:r,min:n=this.min,max:i=this.max}=t;if(this.checkProcessable("level",{bitDepth:[8,16,32]}),r=_i(this,{channels:r}),r.length!==this.channel&&(Array.isArray(n)&&n.length===this.channels&&(n=n.filter(((t,e)=>r.includes(e)))),Array.isArray(i)&&i.length===this.channels&&(i=i.filter(((t,e)=>r.includes(e))))),"range"!==e)throw new Error(`level: algorithm not implement: ${e}`);return n<0&&(n=0),i>this.maxValue&&(i=this.maxValue),Array.isArray(n)||(n=qi()(r.length,n)),Array.isArray(i)||(i=qi()(r.length,i)),function(t,e,r,n){let i=1e-5,o=new Array(n.length);for(let s=0;s<n.length;s++)0===e[s]&&r[s]===t.maxValue||r[s]===e[s]?o[s]=0:o[s]=(t.maxValue+1-i)/(r[s]-e[s]),e[s]+=.499995/o[s];for(let r=0;r<n.length;r++){let i=n[r];if(0!==o[r])for(let n=0;n<t.data.length;n+=t.channels)t.data[n+i]=Math.min(Math.max(0,(t.data[n+i]-e[r])*o[r]+.5|0),t.maxValue)}}(this,n,i,r),this}var Gi=r(7811),$i=r.n(Gi);function Hi(t){if(isNaN(t)){if(t instanceof fh)return t.data;if(!$i()(t))throw new Error("checkNumberArray: the value should be either a number, array or Image");return t}if(t<=0)throw new Error("checkNumberArray: the value must be greater than 0");return t}function Qi(t,e={}){let{channels:r}=e;if(this.checkProcessable("add",{bitDepth:[8,16]}),r=_i(this,{channels:r}),t=Hi(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("add: the data size is different");for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.max(0,Math.min(this.maxValue,this.data[e+n]+t[e+n]>>0))}}else for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.min(this.maxValue,this.data[e+n]+t>>0)}return this}function Ki(t,e={}){let{channels:r}=e;if(this.checkProcessable("subtract",{bitDepth:[8,16]}),r=_i(this,{channels:r}),t=Hi(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("subtract: the data size is different");for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.max(0,Math.min(this.maxValue,this.data[e+n]-t[e+n]>>0))}}else for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.max(0,this.data[e+n]-t>>0)}return this}function Ji(t,e={}){let{channels:r,absolute:n=!1}=e;if(this.checkProcessable("subtractImage",{bitDepth:[8,16]}),this.width!==t.width||this.height!==t.height)throw new Error("subtractImage: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("subtractImage: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("subtractImage: both images must have the same number of channels");let i=this.clone();r=_i(this,{channels:r});for(let e=0;e<r.length;e++)for(let o=r[e];o<this.data.length;o+=this.channels){let e=this.data[o]-t.data[o];i.data[o]=n?Math.abs(e):Math.max(e,0)}return i}function to(t,e={}){let{bitDepth:r=this.bitDepth,channels:n}=e;if(this.checkProcessable("hypotenuse",{bitDepth:[8,16,32]}),this.width!==t.width||this.height!==t.height)throw new Error("hypotenuse: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("hypotenuse: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("hypotenuse: both images must have the same number of channels");let i=fh.createFrom(this,{bitDepth:r});n=_i(this,{channels:n});let o=i.isClamped;for(let e=0;e<n.length;e++)for(let r=n[e];r<this.data.length;r+=this.channels){let e=Math.hypot(this.data[r],t.data[r]);i.data[r]=o?Math.min(Math.max(Math.round(e),0),i.maxValue):e}return i}function eo(t,e={}){let{channels:r}=e;if(this.checkProcessable("multiply",{bitDepth:[8,16]}),t<=0)throw new Error("multiply: the value must be greater than 0");if(r=_i(this,{channels:r}),t=Hi(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("multiply: the data size is different");for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.max(0,Math.min(this.maxValue,this.data[e+n]*t[e+n]>>0))}}else for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.min(this.maxValue,this.data[e+n]*t>>0)}return this}function ro(t,e={}){let{channels:r}=e;if(this.checkProcessable("divide",{bitDepth:[8,16]}),r=_i(this,{channels:r}),t=Hi(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("divide: the: the data size is different");for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.max(0,Math.min(this.maxValue,this.data[e+n]/t[e+n]>>0))}}else for(let e=0;e<r.length;e++){let n=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+n]=Math.min(this.maxValue,this.data[e+n]/t>>0)}return this}var no=r(7531);class io{constructor(){if(new.target===io)throw new Error("BaseRegression must be subclassed")}predict(t){if("number"==typeof t)return this._predict(t);if((0,no.Z)(t)){const e=[];for(let r=0;r<t.length;r++)e.push(this._predict(t[r]));return e}throw new TypeError("x must be a number or array")}_predict(){throw new Error("_predict must be implemented")}train(){}toString(){return""}toLaTeX(){return""}score(t,e){if(!(0,no.Z)(t)||!(0,no.Z)(e)||t.length!==e.length)throw new Error("x and y must be arrays of the same length");const r=t.length,n=new Array(r);for(let e=0;e<r;e++)n[e]=this._predict(t[e]);let i=0,o=0,s=0,a=0,h=0,l=0,u=0;for(let t=0;t<r;t++)i+=n[t],o+=e[t],h+=n[t]*n[t],l+=e[t]*e[t],u+=n[t]*e[t],0!==e[t]&&(s+=(e[t]-n[t])*(e[t]-n[t])/e[t]),a+=(e[t]-n[t])*(e[t]-n[t]);const c=(r*u-i*o)/Math.sqrt((r*h-i*i)*(r*l-o*o));return{r:c,r2:c*c,chi2:s,rmsd:Math.sqrt(a/r)}}}var oo=r(1883),so=(r(5922),r(8345)),ao=r(6952),ho=r.n(ao);const lo={lambda:.1,kernelType:"gaussian",kernelOptions:{},computeCoefficient:!1};class uo extends io{constructor(t,e,r){if(super(),!0===t)this.alpha=e.alpha,this.inputs=e.inputs,this.kernelType=e.kernelType,this.kernelOptions=e.kernelOptions,this.kernel=new(ho())(e.kernelType,e.kernelOptions);else{t=oo.Z.checkMatrix(t),r=Object.assign({},lo,r);const n=new(ho())(r.kernelType,r.kernelOptions),i=n.compute(t),o=t.rows;i.add(oo.Z.eye(o,o).mul(r.lambda)),this.alpha=(0,so.F)(i,e),this.inputs=t,this.kernelType=r.kernelType,this.kernelOptions=r.kernelOptions,this.kernel=n}}_predict(t){return this.kernel.compute([t],this.inputs).mmul(this.alpha).getRow(0)}toJSON(){return{name:"kernelRidgeRegression",alpha:this.alpha,inputs:this.inputs,kernelType:this.kernelType,kernelOptions:this.kernelOptions}}static load(t){if("kernelRidgeRegression"!==t.name)throw new TypeError("not a KRR model");return new uo(!0,t)}}function co(t,e,r){const n=new uo(t,e,r),i=new Array(this.size);for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)i[e*this.width+t]=[t,e];const o=n.predict(i),s=fh.createFrom(this);for(let t=0;t<this.size;t++)s.data[t]=Math.min(this.maxValue,Math.max(0,o[t][0]));return s}function fo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("dilate",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("dilate: The number of rows and columns of the kernel must be odd");let n=!0;t:for(const t of e)for(const e of t)if(1!==e){n=!1;break t}let i=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(n){const t=i.clone();i=wo(i,t,e.length,e[0].length)}else i=go(i,fh.createFrom(i),e);else i=n?mo(i,fh.createFrom(i),e.length,e[0].length):po(i,fh.createFrom(i),e);return i}function po(t,e,r){const n=r.length,i=r[0].length;let o=(n-1)/2,s=(i-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;for(let e=0;e<i;e++)for(let i=0;i<n;i++){if(1!==r[i][e])continue;let n=i-o+h,u=e-s+a;if(n<0||u<0||n>=t.width||u>=t.height)continue;const c=t.getValueXY(n,u,0);c>l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function mo(t,e,r,n){const i=(r-1)/2,o=(n-1)/2,s=[];for(let e=0;e<t.width;e++)s.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let n=0;for(let i=Math.max(0,r-o);i<Math.min(t.height,r+o+1);i++){const r=t.getValueXY(e,i,0);r>n&&(n=r)}s[e]=n}for(let n=0;n<t.width;n++){let o=0;for(let e=Math.max(0,n-i);e<Math.min(t.width,n+i+1);e++)s[e]>o&&(o=s[e]);e.setValueXY(n,r,0,o)}}return e}function go(t,e,r){const n=r.length,i=r[0].length;let o=(n-1)/2,s=(i-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;t:for(let e=0;e<i;e++)for(let i=0;i<n;i++){if(1!==r[i][e])continue;let n=i-o+h,u=e-s+a;if(!(u<0||n<0||n>=t.width||u>=t.height)&&1===t.getBitXY(n,u)){l=1;break t}}1===l&&e.setBitXY(h,a)}return e}function wo(t,e,r,n){const i=(r-1)/2,o=(n-1)/2,s=[];for(let e=0;e<t.width;e++)s.push(1);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){s[e]=0;for(let n=Math.max(0,r-o);n<Math.min(t.height,r+o+1);n++)if(1===t.getBitXY(e,n)){s[e]=1;break}}for(let n=0;n<t.width;n++)if(1!==e.getBitXY(n,r))for(let o=Math.max(0,n-i);o<Math.min(t.width,n+i+1);o++)if(1===s[o]){e.setBitXY(n,r);break}}return e}function bo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("erode",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("erode: The number of rows and columns of the kernel must be odd");let n=!0;t:for(const t of e)for(const e of t)if(1!==e){n=!1;break t}let i=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(n){const t=i.clone();i=_o(i,t,e.length,e[0].length)}else i=xo(i,fh.createFrom(i),e);else i=n?vo(i,fh.createFrom(i),e.length,e[0].length):yo(i,fh.createFrom(i),e);return i}function yo(t,e,r){const n=r.length,i=r[0].length;let o=(n-1)/2,s=(i-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=t.maxValue;for(let e=0;e<i;e++)for(let i=0;i<n;i++){if(1!==r[i][e])continue;let n=i-o+h,u=e-s+a;if(n<0||u<0||n>=t.width||u>=t.height)continue;const c=t.getValueXY(n,u,0);c<l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function vo(t,e,r,n){const i=(r-1)/2,o=(n-1)/2,s=[];for(let e=0;e<t.width;e++)s.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let n=t.maxValue;for(let i=Math.max(0,r-o);i<Math.min(t.height,r+o+1);i++){const r=t.getValueXY(e,i,0);r<n&&(n=r)}s[e]=n}for(let n=0;n<t.width;n++){let o=t.maxValue;for(let e=Math.max(0,n-i);e<Math.min(t.width,n+i+1);e++)s[e]<o&&(o=s[e]);e.setValueXY(n,r,0,o)}}return e}function xo(t,e,r){const n=r.length,i=r[0].length;let o=(n-1)/2,s=(i-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=1;t:for(let e=0;e<i;e++)for(let i=0;i<n;i++){if(1!==r[i][e])continue;let n=i-o+h,u=e-s+a;if(!(u<0||n<0||n>=t.width||u>=t.height)&&0===t.getBitXY(n,u)){l=0;break t}}1===l&&e.setBitXY(h,a)}return e}function _o(t,e,r,n){const i=(r-1)/2,o=(n-1)/2,s=[];for(let e=0;e<t.width;e++)s.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){s[e]=1;for(let n=Math.max(0,r-o);n<Math.min(t.height,r+o+1);n++)if(0===t.getBitXY(e,n)){s[e]=0;break}}for(let n=0;n<t.width;n++)if(0!==e.getBitXY(n,r))for(let o=Math.max(0,n-i);o<Math.min(t.width,n+i+1);o++)if(0===s[o]){e.clearBitXY(n,r);break}}return e}function ko(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("open",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("open: The number of rows and columns of the kernel must be odd");let n=this;for(let t=0;t<r;t++)n=n.erode({kernel:e}),n=n.dilate({kernel:e});return n}function Ao(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("close",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("close: The number of rows and columns of the kernel must be odd");let n=this;for(let t=0;t<r;t++)n=n.dilate({kernel:e}).erode({kernel:e});return n}function Mo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("topHat",{bitDepth:[8,16],components:1,alpha:0}),e.length%2==0||e[0].length%2==0)throw new TypeError("topHat: The number of rows and columns of the kernel must be odd");let n=this;for(let t=0;t<r;t++){let t=n.open({kernel:e});n=t.subtractImage(n,{absolute:!0})}return n}function Eo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("blackHat",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("blackHat: The number of rows and columns of the kernel must be odd");let n=this;for(let t=0;t<r;t++){const t=n.close({kernel:e});n=t.subtractImage(n,{absolute:!0})}return n}function So(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("morphologicalGradient",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("morphologicalGradient: The number of rows and columns of the kernel must be odd");let n=this;for(let t=0;t<r;t++){let t=n.dilate({kernel:e}),r=n.erode({kernel:e});n=t.subtractImage(r,{absolute:!0})}return n}function Co(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2))}function Io(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function Po(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function Do(t,e,r,n,i,o,s,a,h,l,u,c){let[f,d]=[(r*t+n*e+i)/(h*t+l*e+1),(o*t+s*e+a)/(h*t+l*e+1)];return u.getValueXY(Math.floor(f),Math.floor(d),c)}function To(t,e={}){let{calculateRatio:r=!0}=e;if(4!==t.length)throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${t.length} elements`);let n,i,[o,s,a,h]=t,l=[o,s,a,h],[u,c,f,d]=function(t){let e=0,r=0,n=0,i=0,o=t[0][0],s=0;for(let e=1;e<t.length;e++)t[e][0]<o&&(o=t[e][0],s=e);let a=t[(s+1)%t.length][0],h=(s+1)%t.length;for(let e=1;e<t.length;e++)t[e][0]<a&&e!==s&&(a=t[e][0],h=e);return t[h][1]<t[s][1]?(e=t[h],i=t[s],s!==(h+1)%4?(r=t[(h+1)%4],n=t[(h+2)%4]):(r=t[(h+2)%4],n=t[(h+3)%4])):(i=t[h],e=t[s],h!==(s+1)%4?(r=t[(s+1)%4],n=t[(s+2)%4]):(r=t[(s+2)%4],n=t[(s+3)%4])),[e,r,n,i]}(l);r?[n,i]=function(t,e,r,n,i,o){let s=Math.max(Co(t,e),Co(n,r)),a=Math.max(Co(t,n),Co(e,r)),h=0,l=0,u=Math.ceil(i/2),c=Math.ceil(o/2),f=s/a,d=[t[0],t[1],1],p=[e[0],e[1],1],m=[n[0],n[1],1],g=[r[0],r[1],1],w=Po(Io(d,g),m)/Po(Io(p,g),m),b=Po(Io(d,g),p)/Po(Io(m,g),p),y=[w*p[0]-d[0],w*p[1]-d[1],w*p[2]-d[2]],v=[b*m[0]-d[0],b*m[1]-d[1],b*m[2]-d[2]],x=y[0],_=y[1],k=y[2],A=v[0],M=v[1],E=v[2],S=1/(k*E)*(x*A-(x*E+k*A)*u+k*E*u*u+(_*M-(_*E+k*M)*c+k*E*c*c));S=S>=0?Math.sqrt(S):Math.sqrt(-S);let C=new oo.Z([[S,0,u],[0,S,c],[0,0,1]]),I=C.transpose(),P=(0,so.S)(I),D=(0,so.S)(C),T=oo.Z.rowVector(y),R=oo.Z.rowVector(v),B=Math.sqrt(Po(T.mmul(P).mmul(D).to1DArray(),y)/Po(R.mmul(P).mmul(D).to1DArray(),v));return 0===B||0===f?(h=Math.ceil(s),l=Math.ceil(a)):B<f?(h=Math.ceil(s),l=Math.ceil(h/B)):(l=Math.ceil(a),h=Math.ceil(B*l)),[h,l]}(u,c,f,d,this.width,this.height):(n=Math.ceil(Math.max(Co(u,c),Co(d,f))),i=Math.ceil(Math.max(Co(u,d),Co(c,f))));let p=fh.createFrom(this,{width:n,height:i}),[m,g]=u,[w,b]=c,[y,v]=f,[x,_]=d,[k,A]=[0,0],[M,E]=[0,n-1],[S,C]=[i-1,n-1],[I,P]=[i-1,0],D=new oo.Z([[k,A,1,0,0,0,-k*m,-A*m],[M,E,1,0,0,0,-M*w,-E*w],[S,C,1,0,0,0,-S*y,-A*y],[I,P,1,0,0,0,-I*x,-P*x],[0,0,0,k,A,1,-k*g,-A*g],[0,0,0,M,E,1,-M*b,-E*b],[0,0,0,S,C,1,-S*v,-C*v],[0,0,0,I,P,1,-I*_,-P*_]]),T=oo.Z.columnVector([m,w,y,x,g,b,v,_]),R=new zi.Z(D).solve(T),[B,U,O,L,F,N,z,j]=R.to1DArray(),V=new oo.Z(i,n);for(let t=0;t<this.channels;t++){for(let e=0;e<i;e++)for(let r=0;r<n;r++)V.set(e,r,Do(e,r,B,U,O,L,F,N,z,j,this,t));p.setMatrix(V,{channel:t})}return p}function Ro(t={}){let{x:e=0,y:r=0,width:n=this.width-e,height:i=this.height-r}=t;if(this.checkProcessable("max",{bitDepth:[8,16]}),e=Math.round(e),r=Math.round(r),n=Math.round(n),i=Math.round(i),e>this.width-1||r>this.height-1)throw new RangeError(`crop: origin (x:${e}, y:${r}) out of range (${this.width-1}; ${this.height-1})`);if(n<=0||i<=0)throw new RangeError(`crop: width and height (width:${n}; height:${i}) must be positive numbers`);if(e<0||r<0)throw new RangeError(`crop: x and y (x:${e}, y:${r}) must be positive numbers`);if(n>this.width-e||i>this.height-r)throw new RangeError(`crop: (x: ${e}, y:${r}, width:${n}, height:${i}) size is out of range`);let o=fh.createFrom(this,{width:n,height:i,position:[e,r]}),s=n*this.channels,a=r+i,h=0,l=e*this.channels;for(let t=r;t<a;t++){let e=t*this.width*this.channels+l,r=e+s;for(;e<r;e++)o.data[h++]=this.data[e]}return o}function Bo(t={}){this.checkProcessable("cropAlpha",{alpha:1});const{threshold:e=this.maxValue}=t;let r=function(t,e,r){for(let n=0;n<t.width;n++)for(let i=0;i<t.height;i++)if(t.getValueXY(n,i,r)>=e)return n;return-1}(this,e,this.components);if(-1===r)throw new Error("Could not find new dimensions. Threshold may be too high.");let n=function(t,e,r,n){for(let i=0;i<t.height;i++)for(let o=n;o<t.width;o++)if(t.getValueXY(o,i,r)>=e)return i;return-1}(this,e,this.components,r),i=function(t,e,r,n){for(let i=t.height-1;i>=0;i--)for(let o=n;o<t.width;o++)if(t.getValueXY(o,i,r)>=e)return i;return-1}(this,e,this.components,r),o=function(t,e,r,n,i,o){for(let s=t.width-1;s>=n;s--)for(let n=i;n<=o;n++)if(t.getValueXY(s,n,r)>=e)return s;return-1}(this,e,this.components,r,n,i);return this.crop({x:r,y:n,width:o-r+1,height:i-n+1})}function Uo(t,e){if(e<0||e>=t.channels)throw new RangeError(`channel must be included between 0 and ${t.channels-1}. Current value: ${e}`)}const Oo={nearestneighbor:"nearestNeighbor",nearestneighbour:"nearestNeighbor",bilinear:"bilinear"};function Lo(t){if("string"!=typeof t)throw new TypeError("interpolation must be a string");if(t=t.toLowerCase(),!Oo[t])throw new RangeError(`invalid interpolation algorithm: ${t}`);return Oo[t]}function Fo(t,e,r){const n=this.width/e,i=this.height/r;if(this.bitDepth>1)for(let o=0;o<e;o++){const e=Math.floor((o+.5)*n);for(let n=0;n<r;n++){const r=Math.floor((n+.5)*i);for(let i=0;i<this.channels;i++)t.setValueXY(o,n,i,this.getValueXY(e,r,i))}}else for(let o=0;o<e;o++){const e=Math.floor((o+.5)*n);for(let n=0;n<r;n++){const r=Math.floor((n+.5)*i);this.getBitXY(e,r)&&t.setBitXY(o,n)}}}function No(t={}){const{factor:e=1,interpolation:r=Oo.nearestneighbor,preserveAspectRatio:n=!0}=t,i=Lo(r);let o=t.width,s=t.height;if(o||(o=s&&n?Math.round(s*(this.width/this.height)):this.width),s||(s=n?Math.round(o*(this.height/this.width)):this.height),({width:o,height:s}=function(t,e,r){t=function(t){if("string"==typeof t){const e=t[t.length-1];t=parseFloat(t),"%"===e&&(t/=100)}return t}(t);let n=Math.round(t*e),i=Math.round(t*r);return n<=0&&(n=1),i<=0&&(i=1),{width:n,height:i}}(e,o,s)),o===this.width&&s===this.height){const t=this.clone();return t.position=[0,0],t}let a=Math.round((this.width-o)/2),h=Math.round((this.height-s)/2);const l=fh.createFrom(this,{width:o,height:s,position:[a,h]});if(i!==Oo.nearestneighbor)throw new Error(`unsupported resize interpolation: ${i}`);return Fo.call(this,l,o,s),l}function zo(){this.checkProcessable("hsv",{bitDepth:[8,16],alpha:[0,1],colorModel:[fn]});let t=fh.createFrom(this,{colorModel:pn}),e=0,r=this.data;for(let n=0;n<r.length;n+=this.channels){let i=r[n],o=r[n+1],s=r[n+2],a=Math.min(i,o,s),h=Math.max(i,o,s),l=h-a,u=0,c=0===h?0:l/h,f=h;if(h!==a){switch(h){case i:u=(o-s)/l+(o<s?6:0);break;case o:u=(s-i)/l+2;break;case s:u=(i-o)/l+4;break;default:throw new Error("unreachable")}u/=6}t.data[e++]=u*this.maxValue,t.data[e++]=c*this.maxValue,t.data[e++]=f,this.alpha&&(t.data[e++]=r[n+3])}return t}function jo(){this.checkProcessable("hsl",{bitDepth:[8,16],alpha:[0,1],colorModel:[fn]});let t=fh.createFrom(this,{colorModel:dn}),e=Math.floor(this.maxValue/2),r=0,n=this.data;for(let i=0;i<n.length;i+=this.channels){let o=n[i],s=n[i+1],a=n[i+2],h=Math.max(o,s,a),l=Math.min(o,s,a),u=0,c=0,f=(h+l)/2;if(h!==l){let t=h-l;switch(c=f>e?t/(2-h-l):t/(h+l),h){case o:u=(s-a)/t+(s<a?6:0);break;case s:u=(a-o)/t+2;break;case a:u=(o-s)/t+4;break;default:throw new Error("unreachable")}u/=6}t.data[r++]=u*this.maxValue,t.data[r++]=c*this.maxValue,t.data[r++]=f,this.alpha&&(t.data[r++]=n[i+3])}return t}function Vo(){this.checkProcessable("cmyk",{bitDepth:[8,16],alpha:[0,1],colorModel:[fn]});let t=fh.createFrom(this,{components:4,colorModel:mn}),e=0,r=this.data;for(let n=0;n<r.length;n+=this.channels){let i=r[n],o=r[n+1],s=r[n+2],a=Math.min(this.maxValue-i,this.maxValue-o,this.maxValue-s),h=(this.maxValue-i-a)/(1-a/this.maxValue),l=(this.maxValue-o-a)/(1-a/this.maxValue),u=(this.maxValue-s-a)/(1-a/this.maxValue);t.data[e++]=Math.round(h),t.data[e++]=Math.round(l),t.data[e++]=Math.round(u),t.data[e++]=Math.round(a),this.alpha&&(t.data[e++]=r[n+3])}return t}function Yo(){return new fh(this.width,this.height,this.getRGBAData(),{kind:"RGBA",parent:this})}const Xo={luma709:(t,e,r)=>6966*t+23436*e+2366*r>>15,luma601:(t,e,r)=>9798*t+19235*e+3735*r>>15,maximum:(t,e,r)=>Math.max(t,e,r),minimum:(t,e,r)=>Math.min(t,e,r),average:(t,e,r)=>(t+e+r)/3>>0,minmax:(t,e,r)=>(Math.max(t,e,r)+Math.min(t,e,r))/2,red:t=>t,green:(t,e)=>e,blue:(t,e,r)=>r,cyan(t,e,r,n){let i=Xo.black(t,e,r,n);return(n.maxValue-t-i)/(1-i/n.maxValue)>>0},magenta(t,e,r,n){let i=Xo.black(t,e,r,n);return(n.maxValue-e-i)/(1-i/n.maxValue)>>0},yellow(t,e,r,n){let i=Xo.black(t,e,r,n);return(n.maxValue-r-i)/(1-i/n.maxValue)>>0},black:(t,e,r,n)=>Math.min(n.maxValue-t,n.maxValue-e,n.maxValue-r),hue(t,e,r,n){let i=Xo.min(t,e,r),o=Xo.max(t,e,r);if(o===i)return 0;let s=0,a=o-i;switch(o){case t:s=(e-r)/a+(e<r?6:0);break;case e:s=(r-t)/a+2;break;case r:s=(t-e)/a+4;break;default:throw new Error("unreachable")}return s/6*n.maxValue>>0},saturation(t,e,r,n){let i=Xo.min(t,e,r),o=Xo.max(t,e,r);return 0===o?0:(o-i)/o*n.maxValue},lightness(t,e,r){let n=Xo.min(t,e,r);return(Xo.max(t,e,r)+n)/2}};Object.defineProperty(Xo,"luminosity",{enumerable:!1,value:Xo.lightness}),Object.defineProperty(Xo,"luminance",{enumerable:!1,value:Xo.lightness}),Object.defineProperty(Xo,"min",{enumerable:!1,value:Xo.minimum}),Object.defineProperty(Xo,"max",{enumerable:!1,value:Xo.maximum}),Object.defineProperty(Xo,"brightness",{enumerable:!1,value:Xo.maximum});const Wo={};function qo(t={}){let{algorithm:e="luma709",keepAlpha:r=!1,mergeAlpha:n=!0}=t;if("string"!=typeof e&&"function"!=typeof e)throw new TypeError("algorithm must be a string or a function");this.checkProcessable("grey",{bitDepth:[8,16],alpha:[0,1]}),1===this.components&&(e="red"),r&=this.alpha,n&=this.alpha,r&&(n=!1);let i,o=di(this,t,{components:1,alpha:r,colorModel:cn});if("function"==typeof e)i=e;else if(i=Xo[e.toLowerCase()],!i)throw new Error(`unsupported grey algorithm: ${e}`);let s=0;for(let t=0;t<this.data.length;t+=this.channels)n?o.data[s++]=Li(i(this.data[t],this.data[t+1],this.data[t+2],this)*this.data[t+this.components]/this.maxValue,this):(o.data[s++]=Li(i(this.data[t],this.data[t+1],this.data[t+2],this),this),o.alpha&&(o.data[s++]=this.data[t+this.components]));return o}function Zo(t){let e=!1,r=0;for(let e=1;e<t.length-1;e++)if(t[e-1]<t[e]&&t[e+1]<t[e]&&(r++,r>2))return!1;return 2===r&&(e=!0),e}function Go(t,e){let r=0;for(let n=0;n<=e;n++)r+=t[n];return r}function $o(t,e){let r=0;for(let n=0;n<=e;n++)r+=n*t[n];return r}function Ho(t,e){let r=0;for(let n=0;n<=e;n++)r+=n*n*t[n];return r}function Qo(t){let e=new Array(t.length);for(let r=1;r<t.length-1;r++)e[r]=(t[r-1]+t[r]+t[r+1])/3;return e[0]=(t[0]+t[1])/3,e[t.length-1]=(t[t.length-2]+t[t.length-1])/3,e}function Ko(t){let e=t.length,r=!1,n=0;for(let r=1;r<e-1;r++)if(t[r-1]<t[r]&&t[r+1]<t[r]&&(n++,n>2))return!1;return 2===n&&(r=!0),r}function Jo(t,e){let r=0;for(let n=0;n<=e;n++)r+=t[n];return r}Object.keys(Xo).forEach((t=>{Wo[t]=t}));var ts=r(6563);const es={huang:function(t){let e=0;for(let r=0;r<t.length;r++)if(0!==t[r]){e=r;break}let r=t.length-1;for(let n=t.length-1;n>=e;n--)if(0!==t[n]){r=n;break}let n=1/(r-e),i=new Array(t.length),o=0,s=0;for(let r=e;r<t.length;r++)o+=r*t[r],s+=t[r],i[r]=o/s;let a=new Array(t.length);o=s=0;for(let e=r;e>0;e--)o+=e*t[e],s+=t[e],a[e-1]=o/s;let h=-1,l=Number.MAX_VALUE;for(let e=0;e<t.length;e++){let r,o=0;for(let s=0;s<=e;s++)r=1/(1+n*Math.abs(s-i[e])),r<1e-6||r>.999999||(o+=t[s]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));for(let i=e+1;i<t.length;i++)r=1/(1+n*Math.abs(i-a[e])),r<1e-6||r>.999999||(o+=t[i]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));o<l&&(l=o,h=e)}return h},intermodes:function(t){let e=t.slice(),r=0;for(;!Zo(e);){let n=0,i=0,o=e[0];for(let r=0;r<t.length-1;r++)n=i,i=o,o=e[r+1],e[r]=(n+i+o)/3;if(e[t.length-1]=(i+o)/3,r++,r>1e4)throw new Error("Intermodes Threshold not found after 10000 iterations")}let n=0;for(let r=1;r<t.length-1;r++)e[r-1]<e[r]&&e[r+1]<e[r]&&(n+=r);return Math.floor(n/2)},isodata:function(t){let e,r,n,i,o=0;for(let e=1;e<t.length;e++)if(t[e]>0){o=e+1;break}for(;;){e=0,n=0;for(let r=0;r<o;r++)n+=t[r],e+=t[r]*r;i=0,r=0;for(let e=o+1;e<t.length;e++)r+=t[e],i+=t[e]*e;if(n>0&&r>0&&(e/=n,i/=r,o===Math.round((e+i)/2)))break;if(o++,o>t.length-2)throw new Error("Threshold not found")}return o},li:function(t,e){let r,n,i,o,s,a,h,l,u,c,f,d;f=.5,c=0;for(let e=0;e<t.length;e++)c+=e*t[e];c/=e,h=c;do{a=h,r=a+.5|0,n=0,o=0;for(let e=0;e<=r;e++)n+=e*t[e],o+=t[e];l=0===o?0:n/o,i=0,s=0;for(let e=r+1;e<t.length;e++)i+=e*t[e],s+=t[e];u=0===s?0:i/s,d=(l-u)/(Math.log(l)-Math.log(u)),h=d<-Number.EPSILON?d-.5|0:d+.5|0}while(Math.abs(h-a)>.5);return r},maxentropy:function(t,e){let r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=t[n]/e;let n=new Array(t.length),i=new Array(t.length);n[0]=r[0],i[0]=1-n[0];for(let e=1;e<t.length;e++)n[e]=n[e-1]+r[e],i[e]=1-n[e];let o=0;for(let e=0;e<t.length;e++)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let s=t.length-1;for(let e=t.length-1;e>=o;e--)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let a,h,l,u=-1,c=Number.MIN_VALUE;for(let e=o;e<=s;e++){h=0;for(let i=0;i<=e;i++)0!==t[i]&&(h-=r[i]/n[e]*Math.log(r[i]/n[e]));l=0;for(let n=e+1;n<t.length;n++)0!==t[n]&&(l-=r[n]/i[e]*Math.log(r[n]/i[e]));a=h+l,c<a&&(c=a,u=e)}return u},mean:function(t,e){let r=0;for(let e=0;e<t.length;e++)r+=e*t[e];return Math.floor(r/e)},minerror:function(t,e){let r,n,i,o,s,a,h,l,u,c,f,d,p=-2,m=0;for(let e=0;e<t.length;e++)m+=e*t[e];for(m/=e,r=m;r!==p;){let e=Go(t,r),m=Go(t,t.length-1),g=$o(t,r),w=$o(t,t.length-1),b=Ho(t,r);if(n=g/e,i=(w-g)/(m-e),o=e/m,s=(m-e)/m,a=b/e-n*n,h=(Ho(t,t.length-1)-b)/(m-e)-i*i,l=1/a-1/h,u=n/a-i/h,c=n*n/a-i*i/h+Math.log10(a*(s*s)/(h*(o*o))),f=u*u-l*c,f<0)return r;p=r,d=(u+Math.sqrt(f))/l,r=isNaN(d)?p:Math.floor(d)}return r},minimum:function(t){if(t.length<2)return 0;let e=0,r=-1,n=-1,i=new Array(t.length);for(let e=0;e<t.length;e++)i[e]=t[e],t[e]>0&&(n=e);for(;!Ko(i);)if(i=Qo(i),e++,e>1e4)return r;return r=function(t,e){let r;for(let n=1;n<e;n++)if(t[n-1]>t[n]&&t[n+1]>=t[n]){r=n;break}return r}(i,n),r},moments:function(t,e){let r,n,i,o,s,a,h=0,l=0,u=0,c=0,f=-1,d=t.length,p=new Array(d);for(let r=0;r<d;r++)p[r]=t[r]/e;for(let t=0;t<d;t++)h+=t*p[t],l+=t*t*p[t],u+=t*t*t*p[t];n=1*l-h*h,i=(-l*l+h*u)/n,o=(1*-u+l*h)/n,s=.5*(-o-Math.sqrt(o*o-4*i)),a=.5*(-o+Math.sqrt(o*o-4*i)),r=(a-h)/(a-s);for(let t=0;t<d;t++)if(c+=p[t],c>r){f=t;break}return f},otsu:function(t,e){let r=0,n=0,i=0,o=0,s=0;for(let e=0;e<t.length;e++)s+=e*t[e];for(let a=0;a<t.length;a++){n+=t[a];const h=e-n;if(0===n||0===h)continue;r+=a*t[a];const l=(s-r)/h,u=n*h*(r/n-l)*(r/n-l);u>=i&&(o=a,i=u)}return o},percentile:function(t){let e=-1,r=new Array(t.length),n=Jo(t,t.length-1),i=1;for(let o=0;o<t.length;o++)r[o]=Math.abs(Jo(t,o)/n-.5),r[o]<i&&(i=r[o],e=o);return e},renyientropy:function(t,e){let r,n,i,o=new Array(t.length),s=new Array(t.length),a=new Array(t.length),h=0,l=0,u=0,c=0,f=0,d=0;for(let r=0;r<t.length;r++)o[r]=t[r]/e;s[0]=o[0],a[0]=1-s[0];for(let e=1;e<t.length;e++)s[e]=s[e-1]+o[e],a[e]=1-s[e];n=0;for(let e=0;e<t.length;e++)if(Math.abs(s[e])>=Number.EPSILON){n=e;break}i=t.length-1;for(let e=t.length-1;e>=n;e--)if(Math.abs(a[e])>=Number.EPSILON){i=e;break}for(let e=n;e<=i;e++){let r=0,n=0,i=0;for(let a=0;a<=e;a++)0!==t[a]&&(r-=o[a]/s[e]*Math.log(o[a]/s[e])),n+=Math.sqrt(o[a]/s[e]),i+=o[a]*o[a]/(s[e]*s[e]);let p=0,m=0,g=0;for(let r=e+1;r<t.length;r++)0!==t[r]&&(p-=o[r]/a[e]*Math.log(o[r]/a[e])),m+=Math.sqrt(o[r]/a[e]),g+=o[r]*o[r]/(a[e]*a[e]);let w=r+p,b=2*(n*m>0?Math.log(n*m):0),y=-1*(i*g>0?Math.log(i*g):0);w>c&&(c=w,h=e),b>f&&(f=b,l=e),y>d&&(d=y,u=e)}let p,m=[h,l,u];m.sort(ts.j),p=Math.abs(m[0]-m[1])<=5?Math.abs(m[1]-m[2])<=5?[1,2,1]:[0,1,3]:Math.abs(m[1]-m[2])<=5?[3,1,0]:[1,2,1];let g=s[m[2]]-s[m[0]];return r=Math.round(m[0]*(s[m[0]]+.25*g*p[0])+.25*m[1]*g*p[1]+m[2]*(a[m[2]]+.25*g*p[2])),r},shanbhag:function(t,e){let r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=t[n]/e;let n=new Array(t.length),i=new Array(t.length);n[0]=r[0],i[0]=1-n[0];for(let e=1;e<t.length;e++)n[e]=n[e-1]+r[e],i[e]=1-n[e];let o=0;for(let e=0;e<t.length;e++)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let s=t.length-1;for(let e=t.length-1;e>=o;e--)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let a,h,l,u,c=-1,f=Number.MAX_VALUE;for(let e=o;e<=s;e++){l=0,a=.5/n[e];for(let t=1;t<=e;t++)l-=r[t]*Math.log(1-a*n[t-1]);l*=a,u=0,a=.5/i[e];for(let n=e+1;n<t.length;n++)u-=r[n]*Math.log(1-a*i[n]);u*=a,h=Math.abs(l-u),h<f&&(f=h,c=e)}return c},triangle:function(t){let e=0,r=0,n=0,i=0;for(let r=0;r<t.length;r++)if(t[r]>0){e=r;break}e>0&&e--;for(let e=t.length-1;e>0;e--)if(t[e]>0){i=e;break}i<t.length-1&&i++;for(let e=0;e<t.length;e++)t[e]>r&&(n=e,r=t[e]);let o,s,a,h=!1;if(n-e<i-n){h=!0;let r=0,o=t.length-1;for(;r<o;){let e=t[r];t[r]=t[o],t[o]=e,r++,o--}e=t.length-1-i,n=t.length-1-n}if(e===n)return e;o=t[n],s=e-n,a=Math.sqrt(o*o+s*s),o/=a,s/=a,a=o*e+s*t[e];let l=e,u=0;for(let r=e+1;r<=n;r++){let e=o*r+s*t[r]-a;e>u&&(l=r,u=e)}if(l--,h){let e=0,r=t.length-1;for(;e<r;){let n=t[e];t[e]=t[r],t[r]=n,e++,r--}return t.length-1-l}return l},yen:function(t,e){let r=new Array(t.length);for(let n=0;n<t.length;n++)r[n]=t[n]/e;let n=new Array(t.length);n[0]=r[0];for(let e=1;e<t.length;e++)n[e]=n[e-1]+r[e];let i=new Array(t.length);i[0]=r[0]*r[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e]*r[e];let o=new Array(t.length);o[t.length-1]=0;for(let e=t.length-2;e>=0;e--)o[e]=o[e+1]+r[e+1]*r[e+1];let s,a=-1,h=Number.MIN_VALUE;for(let e=0;e<t.length;e++)s=-1*(i[e]*o[e]>0?Math.log(i[e]*o[e]):0)+2*(n[e]*(1-n[e])>0?Math.log(n[e]*(1-n[e])):0),s>h&&(h=s,a=e);return a}},rs={};function ns(t={}){let{algorithm:e=rs.otsu}=t;this.checkProcessable("getThreshold",{components:1,bitDepth:[8,16]});let r=es[e.toLowerCase()];if(r)return r(this.getHistogram(),this.size);throw new Error(`unknown thresholding algorithm: ${e}`)}Object.keys(es).forEach((t=>{rs[t]=t}));const is="threshold";function os(t={}){let{algorithm:e=is,threshold:r=.5,useAlpha:n=!0,invert:i=!1}=t;this.checkProcessable("mask",{components:1,bitDepth:[8,16]}),r=e===is?function(t,e){if(!e)throw Error("getThreshold : the maxValue should be specified");if("string"==typeof t){if("%"!==t[t.length-1])throw Error("getThreshold : if the value is a string it must finish by %");return parseFloat(t)/100*e}if("number"==typeof t)return t<1?t*e:t;throw Error("getThreshold : the value is not valid")}(r,this.maxValue):ns.call(this,t);let o=new fh(this.width,this.height,{kind:"BINARY",parent:this}),s=0;if(this.alpha&&n)for(let t=0;t<this.data.length;t+=this.channels){let e=this.data[t]+(this.maxValue-this.data[t])*(this.maxValue-this.data[t+1])/this.maxValue;(i&&e<=r||!i&&e>=r)&&o.setBit(s),s++}else for(let t=0;t<this.data.length;t+=this.channels)(i&&this.data[t]<=r||!i&&this.data[t]>=r)&&o.setBit(s),s++;return o}function ss(t={}){let{size:e=0,algorithm:r="copy",color:n}=t;if(this.checkProcessable("pad",{bitDepth:[8,16]}),"set"===r){if(n.length!==this.channels)throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<n.length;t++)0===n[t]&&(n[t]=.001)}else n=qi()(this.channels,null);Array.isArray(e)||(e=[e,e]);let i=this.width+2*e[0],o=this.height+2*e[1],s=this.channels,a=fh.createFrom(this,{width:i,height:o});!function(t,e,r,n){let i=t.width,o=t.height,s=e.width,a=t.channels;for(let h=0;h<i;h++)for(let l=0;l<o;l++)for(let o=0;o<a;o++){let u=(l*i+h)*a+o,c=((n+l)*s+r+h)*a+o;e.data[c]=t.data[u]}}(this,a,e[0],e[1]);for(let t=e[0];t<i-e[0];t++)for(let r=0;r<s;r++){let h=n[r]||a.data[(e[1]*i+t)*s+r];for(let n=0;n<e[1];n++)a.data[(n*i+t)*s+r]=h;h=n[r]||a.data[((o-e[1]-1)*i+t)*s+r];for(let n=o-e[1];n<o;n++)a.data[(n*i+t)*s+r]=h}for(let t=0;t<o;t++)for(let r=0;r<s;r++){let o=n[r]||a.data[(t*i+e[0])*s+r];for(let n=0;n<e[0];n++)a.data[(t*i+n)*s+r]=o;o=n[r]||a.data[(t*i+i-e[0]-1)*s+r];for(let n=i-e[0];n<i;n++)a.data[(t*i+n)*s+r]=o}return a}function as(t=8){if(this.checkProcessable("colorDepth",{bitDepth:[1,8,16]}),![8,16].includes(t))throw Error("You need to specify the new colorDepth as 8 or 16");if(this.bitDepth===t)return this.clone();let e=fh.createFrom(this,{bitDepth:t});switch(t){case 8:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=255);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]>>8;break;case 16:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=65535);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]<<8|this.data[t];break;default:throw new Error("colorDepth conversion unexpected case")}return e}function hs(t,e={}){const{interpolation:r=Oo.nearestneighbor,width:n=this.width,height:i=this.height}=e;if("number"!=typeof t)throw new TypeError("degrees must be a number");const o=Lo(r),s=t*Math.PI/180,a=Math.floor(Math.abs(n*Math.cos(s))+Math.abs(i*Math.sin(s))),h=Math.floor(Math.abs(i*Math.cos(s))+Math.abs(n*Math.sin(s))),l=fh.createFrom(this,{width:a,height:h}),u=Math.cos(-s),c=Math.sin(-s);let f=a/2,d=h/2;a%2==0?(f-=.5,h%2==0?d-=.5:d=Math.floor(d)):(f=Math.floor(f),h%2==0?d-=.5:d=Math.floor(d));const p=Math.floor(n/2-f),m=Math.floor(i/2-d);switch(o){case Oo.nearestneighbor:return function(t,e,r,n,i,o,s,a){for(let h=0;h<e.width;h+=1)for(let l=0;l<e.height;l+=1)for(let u=0;u<t.channels;u++){let c=Math.round((h-i)*s-(l-o)*a+i)+r,f=Math.round((l-o)*s+(h-i)*a+o)+n;c<0||c>=t.width||f<0||f>=t.height?1===t.alpha&&u===t.channels-1?e.setValueXY(h,l,u,0):e.setValueXY(h,l,u,t.maxValue):e.setValueXY(h,l,u,t.getValueXY(c,f,u))}return e}(this,l,p,m,f,d,u,c);case Oo.bilinear:return function(t,e,r,n,i,o,s,a){let h=t.width*t.channels;for(let l=0;l<e.height;l++)for(let u=0;u<e.width;u++){let c=(u-i)*s-(l-o)*a+i+r,f=(l-o)*s+(u-i)*a+o+n,d=0|c,p=0|f,m=c-d,g=f-p;for(let r=0;r<t.channels;r++)if(c<0||c>=t.width||f<0||f>=t.height)1===t.alpha&&r===t.channels-1?e.setValueXY(u,l,r,0):e.setValueXY(u,l,r,t.maxValue);else{let n=(p*t.width+d)*t.channels+r,i=t.data[n],o=t.data[n+t.channels],s=t.data[n+h],a=i+m*(o-i)+g*(s-i)+m*g*(i-o-s+t.data[n+h+t.channels])|0;e.setValueXY(u,l,r,a)}}return e}(this,l,p,m,f,d,u,c);default:throw new Error(`unsupported rotate interpolation: ${o}`)}}function ls(t,e){if("number"!=typeof t)throw new TypeError("angle must be a number");switch(t<0&&(t=360*Math.ceil(-t/360)+t),t%360){case 0:return this.clone();case 90:return cs.call(this);case 180:return fs.call(this);case 270:return us.call(this);default:return hs.call(this,t,e)}}function us(){const t=fh.createFrom(this,{width:this.height,height:this.width}),e=t.height-1;for(let r=0;r<this.height;r++)for(let n=0;n<this.width;n++)for(let i=0;i<this.channels;i++)t.setValueXY(r,e-n,i,this.getValueXY(n,r,i));return t}function cs(){const t=fh.createFrom(this,{width:this.height,height:this.width}),e=t.width-1;for(let r=0;r<this.height;r++)for(let n=0;n<this.width;n++)for(let i=0;i<this.channels;i++)t.setValueXY(e-r,n,i,this.getValueXY(n,r,i));return t}function fs(){const t=fh.createFrom(this),e=t.width-1,r=t.height-1;for(let n=0;n<this.height;n++)for(let i=0;i<this.width;i++)for(let o=0;o<this.channels;o++)t.setValueXY(e-i,r-n,o,this.getValueXY(i,n,o));return t}function ds(t,e={}){const r=fi(t);this.checkProcessable("insert",r);let{x:n=0,y:i=0}=e;const o=pi(this,e,{copy:!0}),s=Math.min(o.height,i+t.height),a=Math.min(o.width,n+t.width);if(1===o.bitDepth)for(let e=i;e<s;e++)for(let r=n;r<a;r++)t.getBitXY(r-n,e-i)?o.setBitXY(r,e):o.clearBitXY(r,e);else for(let e=i;e<s;e++)for(let r=n;r<a;r++)o.setPixelXY(r,e,t.getPixelXY(r-n,e-i));return o}function ps(t={}){let{size:e=0,algorithm:r="copy",color:n}=t;if(this.checkProcessable("setBorder",{bitDepth:[8,16,32,64]}),"set"===r){if(n.length!==this.channels)throw new Error(`setBorder: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<n.length;t++)0===n[t]&&(n[t]=.001)}else n=qi()(this.channels,null);Array.isArray(e)||(e=[e,e]);let i=e[0],o=e[1],s=this.channels;for(let t=i;t<this.width-i;t++)for(let e=0;e<s;e++){let r=n[e]||this.data[(t+this.width*o)*s+e];for(let n=0;n<o;n++)this.data[(n*this.width+t)*s+e]=r;r=n[e]||this.data[(t+this.width*(this.height-o-1))*s+e];for(let n=this.height-o;n<this.height;n++)this.data[(n*this.width+t)*s+e]=r}for(let t=0;t<this.height;t++)for(let e=0;e<s;e++){let r=n[e]||this.data[(t*this.width+i)*s+e];for(let n=0;n<i;n++)this.data[(t*this.width+n)*s+e]=r;r=n[e]||this.data[(t*this.width+this.width-i-1)*s+e];for(let n=this.width-i;n<this.width;n++)this.data[(t*this.width+n)*s+e]=r}return this}function ms(t={}){let{preserveAlpha:e=!0}=t;if(this.checkProcessable("split",{bitDepth:[8,16]}),1===this.components)return new oi([this.clone()]);let r=new oi,n=this.data;if(this.alpha&&e)for(let t=0;t<this.components;t++){let e=fh.createFrom(this,{components:1,alpha:!0,colorModel:cn}),i=0;for(let r=0;r<n.length;r+=this.channels)e.data[i++]=n[r+t],e.data[i++]=n[r+this.components];r.push(e)}else for(let t=0;t<this.channels;t++){let e=fh.createFrom(this,{components:1,alpha:!1,colorModel:cn}),i=0;for(let r=0;r<n.length;r+=this.channels)e.data[i++]=n[r+t];r.push(e)}return r}function gs(t,e={}){let{keepAlpha:r=!1,mergeAlpha:n=!1}=e;r&=this.alpha,n&=this.alpha,this.checkProcessable("getChannel",{bitDepth:[8,16]}),t=ki(this,t);let i=fh.createFrom(this,{components:1,alpha:r,colorModel:cn}),o=0;for(let e=0;e<this.data.length;e+=this.channels)n?i.data[o++]=this.data[e+t]*this.data[e+this.components]/this.maxValue:(i.data[o++]=this.data[e+t],r&&(i.data[o++]=this.data[e+this.components]));return i}function ws(t=bs,e={}){let{mergeAlpha:r=!1,keepAlpha:n=!1}=e;r&=this.alpha,n&=this.alpha,this.checkProcessable("combineChannels",{bitDepth:[8,16]});let i=fh.createFrom(this,{components:1,alpha:n,colorModel:cn}),o=0;for(let e=0;e<this.size;e++){let s=t(this.getPixel(e));r?i.data[o++]=s*this.data[e*this.channels+this.components]/this.maxValue:(i.data[o++]=s,n&&(i.data[o++]=this.data[e*this.channels+this.components]))}return i}function bs(t){return(t[0]+t[1]+t[2])/3}function ys(t,e){if(this.checkProcessable("setChannel",{bitDepth:[8,16]}),e.checkProcessable("setChannel (image parameter check)",{bitDepth:[this.bitDepth],alpha:[0],components:[1]}),e.width!==this.width||e.height!==this.height)throw new Error("Images must have exactly the same width and height");let r=t=ki(this,t);for(let t=0;t<e.data.length;t++)this.data[r]=e.data[t],r+=this.channels;return this}function vs(t,e={}){let{shift:r=[0,0],average:n,channels:i,defaultAlpha:o,normalize:s,border:a=[0,0]}=e;if(this.checkProcessable("getSimilarity",{bitDepth:[8,16]}),Array.isArray(a)||(a=[a,a]),i=_i(this,{channels:i,defaultAlpha:o}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");void 0===n&&(n=!0);let h=Math.max(a[0],-r[0]),l=Math.min(this.width-a[0],this.width-r[0]),u=Math.max(a[1],-r[1]),c=Math.min(this.height-a[1],this.height-r[1]),f=qi()(i.length,0);for(let e=0;e<i.length;e++){let n=i[e],o=s?this.sum[n]:Math.max(this.sum[n],t.sum[n]),a=s?t.sum[n]:Math.max(this.sum[n],t.sum[n]);if(0!==o&&0!==a)for(let i=h;i<l;i++)for(let s=u;s<c;s++){let h=i*this.multiplierX+s*this.multiplierY+n,l=h+r[0]*this.multiplierX+r[1]*this.multiplierY;f[e]+=Math.min(this.data[h]/o,t.data[l]/a)}}return n?f.reduce(((t,e)=>t+e))/f.length:f}function xs(t={}){let{sampling:e=[10,10],painted:r=!1,mask:n}=t;this.checkProcessable("getPixelsGrid",{bitDepth:[8,16],channels:1}),Array.isArray(e)||(e=[e,e]);const i=e[0],o=e[1],s=[],a=[],h=this.width/i,l=this.height/o;let u=Math.floor(h/2);for(let t=0;t<i;t++){let t=Math.floor(l/2);for(let e=0;e<o;e++){let e=Math.round(u),r=Math.round(t);n&&!n.getBitXY(e,r)||(s.push([e,r]),a.push(this.getPixelXY(e,r))),t+=l}u+=h}const c={xyS:s,zS:a};return r&&(c.painted=this.rgba8().paintPoints(s)),c}function _s(t,e,r){const n=new Array(t);for(let r=0;r<t;r++)n[r]=new Array(e);if(r)for(let i=0;i<t;i++)for(let t=0;t<e;t++)n[i][t]=r;return n.width=t,n.height=e,Object.setPrototypeOf(n,_s.prototype),n}function ks(t,e={}){let{border:r}=e;if(this.checkProcessable("getChannel",{bitDepth:[8,16]}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");let n=new _s(t.width,t.height,-1/0),i=Math.floor(t.width/2),o=Math.floor(t.height/2),s=i,a=o,h=!1;for(;!h;){let e=n.localSearch(i,o,-1/0);for(let i=0;i<e.length;i++){let o=e[i],h=this.getSimilarity(t,{border:r,shift:[s-o[0],a-o[1]]});n[o[0]][o[1]]=h}let l=n.localMax(i,o);l.position[0]!==i||l.position[1]!==o?(i=l.position[0],o=l.position[1]):h=!0}return[i-s,o-a]}function As(t,e=0){this.checkProcessable("getRow",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.height)throw new RangeError(`row must be included between 0 and ${t.height-1}. Current value: ${e}`)}(this,t),Uo(this,e);let r=new Array(this.width),n=0,i=t*this.width*this.channels+e,o=i+this.width*this.channels;for(let t=i;t<o;t+=this.channels)r[n++]=this.data[t];return r}function Ms(t,e=0){this.checkProcessable("getColumn",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.width)throw new RangeError(`column must be included between 0 and ${t.width-1}. Current value: ${e}`)}(this,t),Uo(this,e);let r=new Array(this.height),n=0,i=this.width*this.channels;for(let o=e+t*this.channels;o<this.data.length;o+=i)r[n++]=this.data[o];return r}function Es(t={}){let{channel:e}=t;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===e){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");e=0}let r=new oo.Z(this.height,this.width);for(let t=0;t<this.height;t++)for(let n=0;n<this.width;n++)r.set(t,n,this.getValueXY(n,t,e));return r}function Ss(t,e={}){t=new oo.Z(t);let{channel:r}=e;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}if(this.width!==t.columns||this.height!==t.rows)throw new RangeError("The size of the matrix must be equal to the size of the image");for(let e=0;e<this.height;e++)for(let n=0;n<this.width;n++)this.setValueXY(n,e,r,t.get(e,n))}function Cs(){this.checkProcessable("getPixelsArray",{bitDepth:[8,16,32]});let t=new Array(this.size),e=0;for(let r=0;r<this.data.length;r+=this.channels){let n=new Array(this.components);for(let t=0;t<this.components;t++)n[t]=this.data[r+t];t[e++]=n}return t}function Is(t){let e=this,r=e.getClosestCommonParent(t),n=e.getRelativePosition(r,{defaultFurther:!0}),i=Ps(e,n),o=t.getRelativePosition(r,{defaultFurther:!0}),s=Ps(t,o),a=function(t,e){let r=0,n=0,i=[];for(;r<t.length&&n<e.length;)t[r][0]===e[n][0]&&t[r][1]===e[n][1]?(i.push(t[r]),r++,n++):t[r][0]<e[n][0]||t[r][0]===e[n][0]&&t[r][1]<e[n][1]?r++:n++;return i}(i,s),h={whitePixelsMask1:[],whitePixelsMask2:[],commonWhitePixels:[]};for(let r=0;r<a.length;r++){let i=a[r],s=[i[0]-n[0],i[1]-n[1]],l=[i[0]-o[0],i[1]-o[1]],u=e.getBitXY(s[0],s[1]),c=t.getBitXY(l[0],l[1]);1===u&&1===c&&h.commonWhitePixels.push(i)}for(let t=0;t<i.length;t++){let r,n;0!==t&&(r=Math.floor(t/e.width),n=t%e.width),1===e.getBitXY(r,n)&&h.whitePixelsMask1.push(i[t])}for(let e=0;e<s.length;e++){let r=0,n=0;0!==e&&(r=Math.floor(e/t.width),n=e%t.width),1===t.getBitXY(r,n)&&h.whitePixelsMask2.push(s[e])}return h}function Ps(t,e){let r=[];for(let n=0;n<t.height;n++)for(let i=0;i<t.width;i++){let t=[n,i];r.push([t[0]+e[0],t[1]+e[1]])}return r}function Ds(t){let e,r=Ts(this),n=Ts(t);if(e=r>=n?Rs(this,r):Rs(t,n),0===r||0===n)return e;let i=this,o=t;for(;r!==n;)if(r>n){if(i=i.parent,null===i)return e;r-=1}else{if(o=o.parent,null===o)return e;n-=1}for(;i!==o&&null!==i&&null!==o;)if(i=i.parent,o=o.parent,null===i||null===o)return e;return i!==o?e:i}function Ts(t){let e=0,r=t;for(;null!=r.parent;)r=r.parent,e++;return e}function Rs(t,e){let r=t;for(;e>0;)r=r.parent,e-=1;return r}_s.prototype.localMin=function(t,e){let r=this[t][e],n=[t,e];for(let i=Math.max(0,t-1);i<Math.min(this.length,t+2);i++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[i][t]<r&&(r=this[i][t],n=[i,t]);return{position:n,value:r}},_s.prototype.localMax=function(t,e){let r=this[t][e],n=[t,e];for(let i=Math.max(0,t-1);i<Math.min(this.length,t+2);i++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[i][t]>r&&(r=this[i][t],n=[i,t]);return{position:n,value:r}},_s.prototype.localSearch=function(t,e,r){let n=[];for(let i=Math.max(0,t-1);i<Math.min(this.length,t+2);i++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[i][t]===r&&n.push([i,t]);return n};const Bs={lowThreshold:10,highThreshold:30,gaussianBlur:1.1},Us=[[-1,0,1],[-2,0,2],[-1,0,1]],Os=[[-1,-2,-1],[0,0,0],[1,2,1]],Ls={bitDepth:32,mode:"periodic"};function Fs(t){return function(t,e){t.checkProcessable("Canny edge detector",{bitDepth:8,channels:1,components:1}),e=Object.assign({},Bs,e);const r=t.width,n=t.height,i=t.maxValue,o={sigma:e.gaussianBlur,radius:3},s=t.gaussianFilter(o),a=s.convolution(Os,Ls),h=s.convolution(Us,Ls),l=h.hypotenuse(a),u=t.constructor,c=new u(r,n,{kind:"GREY",bitDepth:32}),f=new u(r,n,{kind:"GREY",bitDepth:32}),d=new u(r,n,{kind:"GREY"});for(var p=1;p<r-1;p++)for(var m=1;m<n-1;m++){var g=(Math.round(Math.atan2(h.getValueXY(p,m,0),a.getValueXY(p,m,0))*(5/Math.PI))+5)%5;0===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p,m+1,0))||1===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m+1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m-1,0))||2===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m,0))||3===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m+1,0))||c.setValueXY(p,m,0,l.getValueXY(p,m,0))}for(p=0;p<r*n;++p){var w=c.data[p],b=0;w>e.highThreshold&&(b++,d.data[p]=i),w>e.lowThreshold&&b++,f.data[p]=b}var y=[];for(p=1;p<r-1;++p)for(m=1;m<n-1;++m)if(1===f.getValueXY(p,m,0))t:for(var v=p-1;v<p+2;++v)for(var x=m-1;x<m+2;++x)if(2===f.getValueXY(v,x,0)){y.push([p,m]),d.setValueXY(p,m,0,i);break t}for(;y.length>0;){var _=[];for(p=0;p<y.length;++p)for(m=-1;m<2;++m)for(v=-1;v<2;++v)if(0!==m||0!==v){var k=y[p][0]+m,A=y[p][1]+v;1===f.getValueXY(k,A,0)&&0===d.getValueXY(k,A,0)&&(_.push([k,A]),d.setValueXY(k,A,0,i))}y=_}return d}(this,t)}function Ns(t,e={}){let{position:r}=e;if(this.checkProcessable("extract",{bitDepth:[1,8,16]}),!r&&(r=t.getRelativePosition(this),!r))throw new Error("extract : can not extract an image because the relative position can not be determined, try to specify manually the position as an array of 2 elements [x,y].");if(this.bitDepth>1){let e=fh.createFrom(this,{width:t.width,height:t.height,alpha:1,position:r,parent:this});for(let n=0;n<t.width;n++)for(let i=0;i<t.height;i++){for(let t=0;t<this.channels;t++){let o=this.getValueXY(n+r[0],i+r[1],t);e.setValueXY(n,i,t,o)}t.getBitXY(n,i)||e.setValueXY(n,i,this.components,0)}return e}{let e=fh.createFrom(this,{width:t.width,height:t.height,position:r,parent:this});for(let n=0;n<t.height;n++)for(let i=0;i<t.width;i++)t.getBitXY(i,n)&&this.getBitXY(i+r[0],n+r[1])&&e.setBitXY(i,n);return e}}var zs=r(9271),js=r.n(zs);function Vs(t={}){const{x:e=0,y:r=0,inPlace:n=!0}=t,i=n?this:fh.createFrom(this);if(this.checkProcessable("floodFill",{bitDepth:1}),this.getBitXY(e,r))return i;const o=new(js());for(o.push(new Ys(e,r));o.length>0;){const t=o.shift();i.setBitXY(t.x,t.y);for(let e=t.x+1;e<this.width&&!i.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)i.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&o.push(new Ys(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&o.push(new Ys(e,t.y-1));for(let e=t.x-1;e>=0&&!i.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)i.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&o.push(new Ys(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&o.push(new Ys(e,t.y-1))}return i}function Ys(t,e){this.x=t,this.y=e}function Xs(){return Xs=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}return t},Xs.apply(this,arguments)}function Ws(t,e,r){var n=function(t,e,r){return{h:t,s:2*(e*=(r<50?r:100-r)/100)/(r+e)*100,v:r+e}}(t,e,r);return function(t,e,r){var n,i=(r/=100)*(e/=100),o=t/60,s=i*(1-Math.abs(o%2-1)),a=r-i;return n=o>=0&&o<1?[i,s,0]:o>=1&&o<2?[s,i,0]:o>=2&&o<3?[0,i,s]:t>=3&&o<4?[0,s,i]:t>=4&&o<5?[s,0,i]:t>=5&&o<=6?[i,0,s]:[0,0,0],{r:Math.round(255*(n[0]+a)),g:Math.round(255*(n[1]+a)),b:Math.round(255*(n[2]+a))}}(n.h,n.s,n.v)}var qs={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]};function Zs(t){let e=function(t){var e=qs[t.toLowerCase()];if(e)return{r:e[0],g:e[1],b:e[2],a:100}}(r=t)||function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:100}}(r)||function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:100}}(r)||function(t){var e=t.match(/rgb\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100}}}(r)||function(t){var e=t.match(/rgba\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100*r[3]}}}(r)||function(t){var e=t.match(/hsl\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */);return Xs({},Ws(parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10)),{a:100})}}(r)||function(t){var e=t.match(/hsla\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */),n=parseInt(r[0],10),i=parseInt(r[1],10),o=parseInt(r[2],10),s=parseInt(100*parseFloat(r[3]),10);return Xs({},Ws(n,i,o),{a:s})}}(r);var r;return[e.r,e.g,e.b,Math.round(255*e.a/100)]}function Gs(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function $s(t,e,r){let n,i,o,s,a,h;return r/=100,0==(e/=100)?s=a=h=255*r:(i=r<=.5?r*(e+1):r+e-r*e,n=2*r-i,o=t/360,s=Gs(n,i,o+1/3),a=Gs(n,i,o),h=Gs(n,i,o-1/3)),{r:s,g:a,b:h}}function Hs(t){let{color:e,colors:r,randomColors:n,numberColors:i=50}=t;if(e&&!Array.isArray(e)&&(e=Zs(e)),e)return[e];if(r)return r=r.map((function(t){return Array.isArray(t)?t:Zs(t)})),r;if(n){r=new Array(i);for(let t=0;t<i;t++)r[t]=[Math.floor(256*Math.random()),Math.floor(256*Math.random()),Math.floor(256*Math.random())]}return function(t){let e=new Array(t),r=0;for(let n=0;n<360;n+=360/t){r++;let t=$s(n,100,30+r%4*15);e[r-1]=[Math.round(255*t.r),Math.round(255*t.g),Math.round(255*t.b)]}return e}(i)}function Qs(t,e,r={}){let{color:n="blue",colors:i,font:o="12px Helvetica",rotate:s=0}=r;if(this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:fn}),!Array.isArray(t))throw Error("paintLabels: labels must be an array");if(!Array.isArray(e))throw Error("paintLabels: positions must be an array");if(n&&!Array.isArray(n)&&(n=Zs(n)),i=i?i.map((function(t){return Array.isArray(t)?t:Zs(t)})):[n],t.length!==e.length)throw Error("paintLabels: positions and labels must be arrays from the same size");Array.isArray(o)||(o=[o]),Array.isArray(s)||(s=[s]);let a=this.getCanvas().getContext("2d");for(let r=0;r<t.length;r++){a.save();let n=i[r%i.length];a.fillStyle=`rgba(${n[0]},${n[1]},${n[2]},${n[3]/this.maxValue})`,a.font=o[r%o.length];let h=e[r];a.translate(h[0],h[1]),a.rotate(s[r%s.length]/180*Math.PI),a.fillText(t[r],0,0),a.restore()}return this.data=Uint8Array.from(a.getImageData(0,0,this.width,this.height).data),this}function Ks(t,e={}){let{alpha:r=255,labels:n=[],labelsPosition:i=[],labelColor:o="blue",labelFont:s="12px Helvetica"}=e;this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:fn});let a=Hs(Object.assign({},e,{numberColors:t.length}));Array.isArray(t)||(t=[t]);for(let e=0;e<t.length;e++){let n=t[e],i=a[e%a.length];for(let t=0;t<n.width;t++)for(let e=0;e<n.height;e++)if(n.getBitXY(t,e))for(let o=0;o<Math.min(this.components,i.length);o++)if(255===r)this.setValueXY(t+n.position[0],e+n.position[1],o,i[o]);else{let s=this.getValueXY(t+n.position[0],e+n.position[1],o);s=Math.round((s*(255-r)+i[o]*r)/255),this.setValueXY(t+n.position[0],e+n.position[1],o,s)}}if(Array.isArray(n)&&n.length>0){let e=this.getCanvas().getContext("2d");e.fillStyle=o,e.font=s;for(let r=0;r<Math.min(t.length,n.length);r++){let o=i[r]?i[r]:t[r].position;e.fillText(n[r],o[0],o[1])}this.data=Uint8Array.from(e.getImageData(0,0,this.width,this.height).data)}return this}function Js(t,e){let r=new Array(t);for(let n=0;n<t;n++)r[n]=new Array(e).fill(0);return r}const ta=[[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0]],ea=[[0,1,0],[1,1,1],[0,1,0]];class ra{constructor(t={}){let{kind:e="cross",shape:r,size:n,width:i,height:o,filled:s=!0}=t;if(n&&(i=n,o=n),r)switch(r.toLowerCase()){case"square":case"rectangle":this.matrix=function(t,e,r){const n=Js(e,t);if(r.filled)for(let r=0;r<e;r++)for(let e=0;e<t;e++)n[r][e]=1;else{for(let r of[0,e-1])for(let e=0;e<t;e++)n[r][e]=1;for(let r=0;r<e;r++)for(let e of[0,t-1])n[r][e]=1}return n}(i,o,{filled:s});break;case"circle":case"ellipse":this.matrix=function(t,e,r){const n=Js(e,t);let i=1-e%2,o=1-t%2,s=Math.floor((t-1)/2),a=Math.floor((e-1)/2),h=s*s,l=a*a;if(r.filled)for(let e=0;e<=a;e++)for(let r=s-Math.floor(Math.sqrt(h-h*e*e/l));r<=s;r++)n[a-e][r]=1,n[a+e+i][r]=1,n[a-e][t-r-1]=1,n[a+e+i][t-r-1]=1;else{for(let e=0;e<=a;e++){let r=s-Math.floor(Math.sqrt(h-h*e*e/l));n[a-e][r]=1,n[a+e+i][r]=1,n[a-e][t-r-1]=1,n[a+e+i][t-r-1]=1}for(let t=0;t<=s;t++){let r=a-Math.floor(Math.sqrt(l-l*t*t/h));n[r][s-t]=1,n[r][s+t+o]=1,n[e-r-1][s-t]=1,n[e-r-1][s+t+o]=1}}return n}(i,o,{filled:s});break;case"triangle":this.matrix=function(t,e,r){if(!r.filled)throw new Error("Non filled triangle is not implemented");const n=Js(e,t);for(let r=0;r<e;r++){let i=Math.floor((1-r/e)*t/2);for(let e=i;e<t-i;e++)n[r][e]=1}return n}(i,o,{filled:s});break;default:throw new Error(`Shape: unexpected shape: ${r}`)}else{if(!e)throw new Error("Shape: expected a kind or a shape option");switch(e.toLowerCase()){case"cross":this.matrix=ta;break;case"smallcross":this.matrix=ea;break;default:throw new Error(`Shape: unexpected kind: ${e}`)}}this.height=this.matrix.length,this.width=this.matrix[0].length,this.halfHeight=this.height/2>>0,this.halfWidth=this.width/2>>0}getPoints(){let t=this.matrix,e=[];for(let r=0;r<t.length;r++)for(let n=0;n<t[0].length;n++)t[r][n]&&e.push([n-this.halfWidth,r-this.halfHeight]);return e}getMask(){let t=new fh(this.width,this.height,{kind:gn});for(let e=0;e<this.matrix.length;e++)for(let r=0;r<this.matrix[0].length;r++)this.matrix[e][r]&&t.setBitXY(r,e);return t}}function na(t,e={}){let{shape:r}=e;this.checkProcessable("paintPoints",{bitDepth:[8,16]});let n=Hs(Object.assign({},e,{numberColors:t.length})),i=new ra(r).getPoints(),o=Math.min(this.channels,n[0].length);for(let e=0;e<t.length;e++){let r=n[e%n.length],s=t[e][0],a=t[e][1];for(let t=0;t<i.length;t++){let e=i[t][0],n=i[t][1];if(s+e>=0&&a+n>=0&&s+e<this.width&&a+n<this.height){let t=(s+e+(a+n)*this.width)*this.channels;for(let e=0;e<o;e++)this.data[t+e]=r[e]}}}return this}function ia(t,e={}){let{color:r=[this.maxValue,0,0],closed:n=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]});let i=Math.min(this.channels,r.length);for(let e=0;e<t.length-1+n;e++){let n=t[e],o=t[(e+1)%t.length],s=o[0]-n[0],a=o[1]-n[1],h=Math.max(Math.abs(s),Math.abs(a)),l=s/h,u=a/h,c=n[0],f=n[1];for(let t=0;t<=h;t++){let t=Math.round(c),e=Math.round(f);if(t>=0&&e>=0&&t<this.width&&e<this.height)if(1===this.bitDepth)this.setBitXY(t,e);else{let n=(t+e*this.width)*this.channels;for(let t=0;t<i;t++)this.data[n+t]=r[t]}c+=l,f+=u}}return this}function oa(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolylines",{bitDepth:[8,16]});let n=Hs(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=n[e%n.length],this.paintPolyline(t[e],r);return this}function sa(t,e={}){let{color:r=[this.maxValue,0,0],filled:n=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]}),e.closed=!0;let i=function(t){let e=[];for(let r=0;r<t.length;r++)t[r][0]===t[(r+1)%t.length][0]&&t[r][1]===t[(r+1)%t.length][1]||t[r][0]===t[(r-1+t.length)%t.length][0]&&t[r][1]===t[(r-1+t.length)%t.length][1]||t[(r+1)%t.length][0]===t[(r-1+t.length)%t.length][0]&&t[(r-1+t.length)%t.length][1]===t[(r+1)%t.length][1]||e.push(t[r]);return e}(t);if(!1===n)return this.paintPolyline(t,e);{let n=Array(this.height);for(let t=0;t<this.height;t++){n[t]=[];for(let e=0;e<this.width;e++)n[t].push(0)}for(let t=0;t<i.length;t++){const e=aa(i[t],i[(t+1)%i.length]);for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)ha(r,t,e,this.height)&&(n[t][r]=0===n[t][r]?1:0)}for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)if(1===n[t][e])if(1===this.bitDepth)this.setBitXY(e,t);else{let n=Math.min(this.channels,r.length),i=(e+t*this.width)*this.channels;for(let t=0;t<n;t++)this.data[i+t]=r[t]}return this.paintPolyline(t,e)}}function aa(t,e){if(t[0]===e[0])return{a:0,b:t[0],vertical:!0};{const r=(e[1]-t[1])/(e[0]-t[0]);return{a:r,b:t[1]-r*t[0],vertical:!1}}}function ha(t,e,r,n){if(!0===r.vertical)return r.b<=t;if(0===r.a)return!1;{const i=(e-r.b)/r.a;return i<t&&i>=0&&i<=n}}function la(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolygons",{bitDepth:[8,16]});let n=Hs(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=n[e%n.length],this.paintPolygon(t[e],r);return this}function ua(t={}){let{maxSlots:e=256,channel:r,useAlpha:n=!0}=t;if(this.checkProcessable("getHistogram",{bitDepth:[1,8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}return fa.call(this,r,{useAlpha:n,maxSlots:e})}function ca(t={}){const{maxSlots:e=256,useAlpha:r=!0}=t;this.checkProcessable("getHistograms",{bitDepth:[8,16]});let n=new Array(r?this.components:this.channels);for(let t=0;t<n.length;t++)n[t]=fa.call(this,t,{useAlpha:r,maxSlots:e});return n}function fa(t,e){let{useAlpha:r,maxSlots:n}=e;if(1===this.bitDepth){let t=[0,0];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let n=this.getBitXY(e,r);0===n?t[0]+=1:1===n&&(t[1]+=1)}return t}let i=Math.log2(n);if(!Oi()(i))throw new RangeError("maxSlots must be a power of 2, for example: 64, 256, 1024");let o=0;this.bitDepth>i&&(o=this.bitDepth-i);let s=this.data,a=qi()(Math.pow(2,Math.min(this.bitDepth,i)),0);if(r&&this.alpha){let e=this.channels-t-1;for(let r=t;r<s.length;r+=this.channels)a[s[r]>>o]+=s[r+e]/this.maxValue}else for(let e=t;e<s.length;e+=this.channels)a[s[e]>>o]++;return a}function da(t={}){let{useAlpha:e=!0,nbSlots:r=512}=t;this.checkProcessable("getColorHistogram",{bitDepth:[8,16],components:[3]});let n=Math.log(r)/Math.log(8);if(n!==Math.floor(n))throw new RangeError("nbSlots must be a power of 8. Usually 8, 64, 512 or 4096");let i=this.bitDepth-n,o=this.data,s=qi()(Math.pow(8,n),0),a=Math.pow(2,2*n),h=Math.pow(2,n);for(let t=0;t<o.length;t+=this.channels){let r=(o[t]>>i)*a+(o[t+1]>>i)*h+(o[t+2]>>i);e&&this.alpha?s[r]+=o[t+this.channels-1]/this.maxValue:s[r]++}return s}function pa(){this.checkProcessable("min",{bitDepth:[8,16,32]});let t=qi()(this.channels,1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]<t[r]&&(t[r]=this.data[e+r]);return t}function ma(){this.checkProcessable("max",{bitDepth:[8,16,32]});let t=qi()(this.channels,-1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]>t[r]&&(t[r]=this.data[e+r]);return t}function ga(){this.checkProcessable("sum",{bitDepth:[8,16]});let t=qi()(this.channels,0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)t[r]+=this.data[e+r];return t}function wa(t=0,e=0){this.checkProcessable("getMoment",{bitDepth:[1]});let r=0;for(let n=0;n<this.width;n++)for(let i=0;i<this.height;i++)1===this.getBitXY(n,i)&&(r+=n**t*i**e);return r}function ba(t={}){let{mask:e,region:r=3,removeClosePoints:n=0,invert:i=!1,maxEquals:o=2}=t,s=this;this.checkProcessable("localMaxima",{bitDepth:[8,16],components:1}),r*=4;let a=i?0:1,h=[1,0,-1,0,1,1,-1,-1,2,0,-2,0,2,2,-2,-2],l=[0,1,0,-1,1,-1,1,-1,0,2,0,-2,2,-2,2,-2],u=r<=8?1:2,c=[];for(let t=u;t<s.height-u;t++)for(let n=u;n<s.width-u;n++){if(e&&e.getBitXY(n,t)!==a)continue;let u=0,f=0,d=s.data[n+t*s.width];for(let e=0;e<r;e++)i?s.data[n+h[e]+(t+l[e])*s.width]>d&&u++:s.data[n+h[e]+(t+l[e])*s.width]<d&&u++,s.data[n+h[e]+(t+l[e])*s.width]===d&&f++;u+f===r&&f<=o&&c.push([n,t])}if(n>0)for(let t=0;t<c.length;t++)for(let e=t+1;e<c.length;e++)Math.sqrt(Math.pow(c[t][0]-c[e][0],2)+Math.pow(c[t][1]-c[e][1],2))<n&&(c[t][0]=c[t][0]+c[e][0]>>1,c[t][1]=c[t][1]+c[e][1]>>1,c.splice(e,1),e--);return c}function ya(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let n=t[r];e[r]=Qn(n)}return e}function va(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let n=t[r];e[r]=Hn(n)}return e}function xa(){this.checkProcessable("points",{bitDepth:[1]});const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)1===this.getBitXY(e,r)&&t.push([e,r]);return t}function _a(){this.checkProcessable("extendedPoints",{bitDepth:[1]});const t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++)1===this.getBitXY(r,e)&&(t.push([r,e]),1!==this.getBitXY(r+1,e)?(t.push([r+1,e]),t.push([r+1,e+1]),1!==this.getBitXY(r,e+1)&&t.push([r,e+1])):1!==this.getBitXY(r,e+1)&&(t.push([r,e+1]),t.push([r+1,e+1])));return t}function ka(t,e={}){if(this===t)return[0,0];let r=[0,0],n=this;for(;n;){if(n===t)return r;n.position&&(r[0]+=n.position[0],r[1]+=n.position[1]),n=n.parent}return!!e.defaultFurther&&r}function Aa(t={}){let{alpha:e=1}=t;this.checkProcessable("countAlphaPixels",{bitDepth:[8,16],alpha:1});let r=0;if(void 0!==e){for(let t=this.components;t<this.data.length;t+=this.channels)this.data[t]===e&&r++;return r}return this.size}function Ma(t,e={}){e.sorted||t.sort(Sa);const r=t.length,n=new Array(2*r);for(var i=0,o=0;o<r;o++){const e=t[o];for(;i>=2&&Ea(n[i-2],n[i-1],e)<=0;)i--;n[i++]=e}const s=i+1;for(o=r-2;o>=0;o--){const e=t[o];for(;i>=s&&Ea(n[i-2],n[i-1],e)<=0;)i--;n[i++]=e}return n.slice(0,i-1)}function Ea(t,e,r){return(e[1]-t[1])*(r[0]-t[0])-(e[0]-t[0])*(r[1]-t[1])}function Sa(t,e){return t[0]===e[0]?t[1]-e[1]:t[0]-e[0]}function Ca(){return Ma(this.extendedPoints,{sorted:!1})}function Ia(t,e){return[t[0]-e[0],t[1]-e[1]]}function Pa(t){let e=Math.sqrt(t[0]**2+t[1]**2);return[t[0]/e,t[1]/e]}function Da(t,e,r){void 0===r&&(r=new Array(e.length));let n=Math.cos(t),i=Math.sin(t);for(let t=0;t<r.length;++t)r[t]=[n*e[t][0]-i*e[t][1],i*e[t][0]+n*e[t][1]];return r}function Ta(t){let e=0;for(let r=0;r<t.length;r++){let n=t[r][0],i=t[r][1],o=t[r===t.length-1?0:r+1][0],s=t[r===t.length-1?0:r+1][1];e+=Math.sqrt((o-n)**2+(s-i)**2)}return e}function Ra(t){let e=0;for(let r=0;r<t.length;r++)e+=t[r][0]*t[r===t.length-1?0:r+1][1]*.5,e-=t[r===t.length-1?0:r+1][0]*t[r][1]*.5;return Math.abs(e)}function Ba(t){let e=1/0,r=1/0,n=-1/0,i=-1/0;for(let o=0;o<t.length;o++)t[o][0]<e&&(e=t[o][0]),t[o][0]>n&&(n=t[o][0]),t[o][1]<r&&(r=t[o][1]),t[o][1]>i&&(i=t[o][1]);return[[e,r],[n,i]]}function Ua(t={}){const{originalPoints:e=Ca.call(this)}=t;if(0===e.length)return[];if(1===e.length)return[e[0],e[0],e[0],e[0]];const r=new Array(e.length);let n,i=1/0,o=0;for(let t=0;t<r.length;t++){let s=Oa(e[t],e[(t+1)%r.length]);Da(-s,e,r);let a=r[t][0],h=r[t][1],l=r[(t+1)%r.length][0],u=r[(t+1)%r.length][1],c=!0,f=0,d=0,p=0;for(let t=0;t<r.length;t++){let e=r[t][0],n=r[t][1],i=(e-a)/(l-a);!0===c?(c=!1,f=i,d=i):(i<f&&(f=i),i>d&&(d=i));let o=(-(l-a)*n+l*h-u*a)/(l-a);Math.abs(o)>Math.abs(p)&&(p=o)}let m=[a+f*(l-a),h],g=[a+d*(l-a),h],w=Math.abs(p*(f-d)*(l-a));w<i&&(o=s,i=w,n=[m,g,[g[0],g[1]-p],[m[0],m[1]-p]])}return Da(o,n,n),n}function Oa(t,e){let r=Pa(Ia(e,t)),n=Math.acos(r[0]);return r[1]<0?-n:n}var La=r(2229),Fa=r.n(La),Na=r(4707),za=r.n(Na);function ja(t,e){let r=Pa(Ia(e,t)),n=Math.acos(r[0]);return r[1]<0?-n:n}class Va{constructor(t,e){this.map=t,this.id=e,this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY,this.minY=Number.POSITIVE_INFINITY,this.maxY=Number.NEGATIVE_INFINITY,this.meanX=0,this.meanY=0,this.surface=0,this.computed={}}getMask(t={}){const{scale:e=1,kind:r=""}=t;let n;switch(r){case"contour":n=this.contourMask;break;case"box":n=this.boxMask;break;case"filled":n=this.filledMask;break;case"center":n=this.centerMask;break;case"mbr":n=this.mbrFilledMask;break;case"hull":n=this.convexHullFilledMask;break;case"hullContour":n=this.convexHullMask;break;case"mbrContour":n=this.mbrMask;break;case"feret":n=this.feretMask;break;default:n=this.mask}return e<1&&(n=n.resize({factor:e}),n.parent=this.mask.parent,n.position[0]+=this.minX,n.position[1]+=this.minY),n}get mean(){throw new Error("Roi mean not implemented yet")}get center(){return this.computed.center||(this.computed.center=[this.width/2>>0,this.height/2>>0]),this.computed.center}get ratio(){return this.width/this.height}get width(){return this.maxX-this.minX+1}get height(){return this.maxY-this.minY+1}_computExternalIDs(){let t=this.borderIDs,e=this.borderLengths;this.computed.externalIDs=[],this.computed.externalLengths=[];let r=this.internalIDs;for(let n=0;n<t.length;n++)r.includes(t[n])||(this.computed.externalIDs.push(t[n]),this.computed.externalLengths.push(e[n]))}get externalIDs(){return this.computed.externalIDs||this._computExternalIDs(),this.computed.externalIDs}get externalLengths(){return this.computed.externalLengths||this._computExternalIDs(),this.computed.externalLengths}_computeBorderIDs(){let t=function(t){let e=t.map,r=e.data,n=new Set,i=new Map,o=new Set,s=[1,0,-1,0],a=[0,1,0,-1];for(let h=t.minX;h<=t.maxX;h++)for(let l=t.minY;l<=t.maxY;l++)if(r[h+l*e.width]===t.id)for(let u=0;u<4;u++){let c=h+s[u],f=l+a[u];if(c>=0&&f>=0&&c<e.width&&f<e.height){let s=c+f*e.width;if(r[s]!==t.id&&!o.has(s)){o.add(s),n.add(r[s]);let t=i.get(r[s]);t?i.set(r[s],++t):i.set(r[s],1)}}}let h=Array.from(n),l=h.map((function(t){return i.get(t)}));return{ids:h,lengths:l}}(this);this.computed.borderIDs=t.ids,this.computed.borderLengths=t.lengths}get borderIDs(){return this.computed.borderIDs||this._computeBorderIDs(),this.computed.borderIDs}get borderLengths(){return this.computed.borderLengths||this._computeBorderIDs(),this.computed.borderLengths}get boxIDs(){return this.computed.boxIDs||(this.computed.boxIDs=function(t){let e=new Set,r=t.map,n=r.data;for(let i of[0,t.height-1])for(let o=0;o<t.width;o++){let s=(i+t.minY)*r.width+o+t.minX;if(o-t.minX>0&&n[s]===t.id&&n[s-1]!==t.id){let t=n[s-1];e.add(t)}if(r.width-o-t.minX>1&&n[s]===t.id&&n[s+1]!==t.id){let t=n[s+1];e.add(t)}}for(let i of[0,t.width-1])for(let o=0;o<t.height;o++){let s=(o+t.minY)*r.width+i+t.minX;if(o-t.minY>0&&n[s]===t.id&&n[s-r.width]!==t.id){let t=n[s-r.width];e.add(t)}if(r.height-o-t.minY>1&&n[s]===t.id&&n[s+r.width]!==t.id){let t=n[s+r.width];e.add(t)}}return Array.from(e)}(this)),this.computed.boxIDs}get internalIDs(){return this.computed.internalIDs||(this.computed.internalIDs=function(t){let e=[t.id],r=t.map,n=r.data;if(t.height>2)for(let i=0;i<t.width;i++){let o=t.minY*r.width+i+t.minX;if(e.includes(n[o])){let i=n[o+r.width];e.includes(i)||t.boxIDs.includes(i)||e.push(i)}}let i=new Array(4);for(let o=1;o<t.width-1;o++)for(let s=1;s<t.height-1;s++){let a=(s+t.minY)*r.width+o+t.minX;if(e.includes(n[a])){i[0]=n[a-1],i[1]=n[a+1],i[2]=n[a-r.width],i[3]=n[a+r.width];for(let r=0;r<4;r++){let n=i[r];e.includes(n)||t.boxIDs.includes(n)||e.push(n)}}}return e}(this)),this.computed.internalIDs}get box(){return this.computed.box||(this.computed.box=function(t){let e=0,r=t.map,n=r.data,i=[0];t.height>1&&(i[1]=t.height-1);for(let o of i)for(let i=1;i<t.width-1;i++)n[(o+t.minY)*r.width+i+t.minX]===t.id&&e++;let o=[0];t.width>1&&(o[1]=t.width-1);for(let i of o)for(let o=0;o<t.height;o++)n[(o+t.minY)*r.width+i+t.minX]===t.id&&e++;return e}(this)),this.computed.box}get external(){return this.computed.external||(this.computed.external=function(t){let e=0,r=t.map,n=r.data;for(let i=1;i<t.width-1;i++)for(let o=1;o<t.height-1;o++){let s=(o+t.minY)*r.width+i+t.minX;n[s]===t.id&&(t.externalIDs.includes(n[s-1])||t.externalIDs.includes(n[s+1])||t.externalIDs.includes(n[s-r.width])||t.externalIDs.includes(n[s+r.width]))&&e++}return e+t.box}(this)),this.computed.external}get holesInfo(){return this.computed.holesInfo||(this.computed.holesInfo=function(t){let e=0,r=t.map.width,n=t.map.data;for(let i=1;i<t.width-1;i++)for(let o=1;o<t.height-1;o++){let s=(o+t.minY)*r+i+t.minX;t.internalIDs.includes(n[s])&&n[s]!==t.id&&e++}return{number:t.internalIDs.length-1,surface:e}}(this)),this.computed.holesInfo}get border(){return this.computed.border||(this.computed.border=function(t){let e=0,r=t.map,n=r.data;for(let i=1;i<t.width-1;i++)for(let o=1;o<t.height-1;o++){let s=(o+t.minY)*r.width+i+t.minX;n[s]===t.id&&(n[s-1]===t.id&&n[s+1]===t.id&&n[s-r.width]===t.id&&n[s+r.width]===t.id||e++)}return e+t.box}(this)),this.computed.border}get contourMask(){if(!this.computed.contourMask){let t=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||t.setBitXY(e,r));this.computed.contourMask=t}return this.computed.contourMask}get boxMask(){if(!this.computed.boxMask){let t=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)t.setBitXY(e,0),t.setBitXY(e,this.height-1);for(let e=0;e<this.height;e++)t.setBitXY(0,e),t.setBitXY(this.width-1,e);this.computed.boxMask=t}return this.computed.boxMask}get mask(){if(!this.computed.mask){let t=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&t.setBitXY(e,r);this.computed.mask=t}return this.computed.mask}get filledMask(){if(!this.computed.filledMask){let t=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++){let n=e+this.minX+(r+this.minY)*this.map.width;this.internalIDs.includes(this.map.data[n])&&t.setBitXY(e,r)}this.computed.filledMask=t}return this.computed.filledMask}get centerMask(){if(!this.computed.centerMask){let t=new ra({kind:"smallCross"}).getMask();t.parent=this.map.parent,t.position=[this.minX+this.center[0]-1,this.minY+this.center[1]-1],this.computed.centerMask=t}return this.computed.centerMask}get convexHull(){if(!this.computed.convexHull){const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||(t.push([e,r]),t.push([e+1,r]),t.push([e,r+1]),t.push([e+1,r+1])));const e=Ma(t);this.computed.convexHull={polyline:e,surface:Ra(e),perimeter:Ta(e)}}return this.computed.convexHull}get convexHullMask(){if(!this.computed.convexHullMask){const t=this.convexHull,e=new fh(this.width+1,this.height+1,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});e.paintPolyline(t.polyline,{closed:!0}),this.computed.convexHullMask=e}return this.computed.convexHullMask}get convexHullFilledMask(){if(!this.computed.convexHullFilledMask){const t=this.convexHull,e=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});for(let r=0;r<this.width;r++)for(let n=0;n<this.height;n++)1!==za()(t.polyline,[r,n])&&e.setBitXY(r,n);this.computed.convexHullFilledMask=e}return this.computed.convexHullFilledMask}get mbr(){if(!this.computed.mbr){let t=Ua({originalPoints:this.convexHull.polyline});if(0===t.length)this.computed.mbr={width:0,height:0,surface:0,perimeter:0,rectangle:t};else{let e=t[0],r=t[1],n=t[2],i=Math.sqrt((e[0]-r[0])**2+(e[1]-r[1])**2),o=Math.sqrt((n[0]-r[0])**2+(n[1]-r[1])**2);this.computed.mbr={width:i,height:o,elongation:1-i/o,aspectRatio:i/o,surface:i*o,perimeter:2*(i+o),rectangle:t}}}return this.computed.mbr}get fillRatio(){return this.surface/(this.surface+this.holesInfo.surface)}get feretDiameters(){return this.computed.feretDiameters||(this.computed.feretDiameters=function(t={}){const{originalPoints:e=Ca.call(this)}=t;if(0===e.length)return{min:0,max:0,minLine:[],maxLine:[],aspectRatio:1};if(1===e.length)return{min:1,max:1,minLine:[e[0],e[0]],maxLine:[e[0],e[0]],aspectRatio:1};const r=new Array(e.length);let n=1/0,i=0,o=[];for(let t=0;t<e.length;t++){let s=ja(e[t],e[(t+1)%e.length]);Da(-s,e,r);let a=0,h=[];for(let n=0;n<e.length;n++){let e=Math.abs(r[t][1]-r[n][1]);e>a&&(a=e,h=[],h.push([r[n][0],r[t][1]],[r[n][0],r[n][1]]))}a<n&&(n=a,i=s,o=h)}Da(i,o,o);let s=0,a=[],h=0;for(let t=0;t<e.length-1;t++)for(let r=t+1;r<e.length;r++){let n=(e[t][0]-e[r][0])**2+(e[t][1]-e[r][1])**2;n>h&&(h=n,s=Math.sqrt(n),a=[e[t],e[r]])}return{min:n,minLine:o,max:s,maxLine:a,aspectRatio:n/s}}({originalPoints:this.convexHull.polyline})),this.computed.feretDiameters}get eqpc(){return this.computed.eqpc||(this.computed.eqpc=2*Math.sqrt(this.surface/Math.PI)),this.computed.eqpc}get perimeterInfo(){return this.computed.perimeterInfo||(this.computed.perimeterInfo=function(t){let e=t.map,r=e.data,n=0,i=0,o=0,s=0;for(let a=0;a<t.width;a++)for(let h=0;h<t.height;h++){let l=(h+t.minY)*e.width+a+t.minX;if(r[l]===t.id){let u=0;switch((0===a||t.externalIDs.includes(r[l-1]))&&u++,(a===t.width-1||t.externalIDs.includes(r[l+1]))&&u++,(0===h||t.externalIDs.includes(r[l-e.width]))&&u++,(h===t.height-1||t.externalIDs.includes(r[l+e.width]))&&u++,u){case 1:n++;break;case 2:i++;break;case 3:o++;break;case 4:s++}}}return{one:n,two:i,three:o,four:s}}(this)),this.computed.perimeterInfo}get perimeter(){let t=this.perimeterInfo,e=2-Math.sqrt(2);return t.one+2*t.two+3*t.three+4*t.four-e*(t.two+2*t.three+t.four)}get ped(){return this.computed.ped||(this.computed.ped=this.perimeter/Math.PI),this.computed.ped}get feretMask(){if(!this.computed.feretMask){const t=new fh(this.width+1,this.height+1,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent});t.paintPolyline(this.feretDiameters.minLine),t.paintPolyline(this.feretDiameters.maxLine),this.computed.feretMask=t}return this.computed.feretMask}get mbrMask(){if(!this.computed.mbrMask){let t=function(t){for(let e=0;e<t.length;e++)t[e][0]=Math.round(t[e][0]),t[e][1]=Math.round(t[e][1]);return t}(this.mbr.rectangle);if(t.length>0){const e=Ba(t),r=new fh(e[1][0]-e[0][0]+1,e[1][1]-e[0][1]+1,{kind:gn,position:[this.minX+e[0][0],this.minY+e[0][1]],parent:this.map.parent});t=function(t,e){void 0===e&&(e=new Array(t.length).fill(0).map((()=>[])));let r=Ba(t),n=r[0][0],i=r[0][1];for(let r=0;r<t.length;r++)e[r][0]=t[r][0]-n,e[r][1]=t[r][1]-i;return e}(t),r.paintPolyline(t,{closed:!0}),this.computed.mbrMask=r}else this.computed.mbrMask=new fh(1,1,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent})}return this.computed.mbrMask}get mbrFilledMask(){if(!this.computed.mbrFilledMask){const t=new fh(this.width,this.height,{kind:gn,position:[this.minX,this.minY],parent:this.map.parent}),e=this.mask.minimalBoundingRectangle();for(let r=0;r<this.width;r++)for(let n=0;n<this.height;n++)1!==za()(e,[r,n])&&t.setBitXY(r,n);this.computed.mbrFilledMask=t}return this.computed.mbrFilledMask}get points(){if(!this.computed.points){let t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let n=(e+this.minY)*this.map.width+r+this.minX;this.map.data[n]===this.id&&t.push([r,e])}this.computed.points=t}return this.computed.points}get maxLengthPoints(){if(!this.computed.maxLengthPoints){let t,e=0;const r=this.points;for(let n=0;n<r.length;n++)for(let i=n+1;i<r.length;i++){let o=Math.pow(r[n][0]-r[i][0],2)+Math.pow(r[n][1]-r[i][1],2);o>=e&&(e=o,t=[r[n],r[i]])}this.computed.maxLengthPoints=t}return this.computed.maxLengthPoints}get maxLength(){if(!this.computed.maxLength){let t=Math.sqrt(Math.pow(this.maxLengthPoints[0][0]-this.maxLengthPoints[1][0],2)+Math.pow(this.maxLengthPoints[0][1]-this.maxLengthPoints[1][1],2));this.computed.maxLength=t}return this.computed.maxLength}get roundness(){return 4*this.surface/(Math.PI*this.feretDiameters.max**2)}get sphericity(){return 2*Math.sqrt(this.surface*Math.PI)/this.perimeter}get solidity(){return this.surface/this.convexHull.surface}get angle(){if(!this.computed.angle){let t=this.maxLengthPoints,e=180*-Math.atan2(t[0][1]-t[1][1],t[0][0]-t[1][0])/Math.PI;this.computed.angle=e}return this.computed.angle}toJSON(){return{id:this.id,minX:this.minX,maxX:this.maxX,minY:this.minY,maxY:this.maxY,meanX:this.meanX,meanY:this.meanY,height:this.height,width:this.width,surface:this.surface,mbrWidth:this.mbr.width,mbrHeight:this.mbr.height,mbrSurface:this.mbr.surface,eqpc:this.eqpc,ped:this.ped,feretDiameterMin:this.feretDiameters.min,feretDiameterMax:this.feretDiameters.max,aspectRatio:this.feretDiameters.aspectRatio,fillRatio:this.fillRatio,sphericity:this.sphericity,roundness:this.roundness,solidity:this.solidity,perimeter:this.perimeter}}}class Ya{constructor(t,e){this.roiMap=t,this.options=e,this.roi=this.createRoi()}createRoi(){let t=this.roiMap.data,e={};this.roiMap.positive=0,this.roiMap.negative=0;for(let r=0;r<t.length;r++)t[r]&&!e[t[r]]&&(e[t[r]]=!0,t[r]>0?this.roiMap.positive++:this.roiMap.negative++);let r={};for(let t in e)r[t]=new Va(this.roiMap,1*t);let n=this.roiMap.width,i=this.roiMap.height;for(let e=0;e<i;e++)for(let i=0;i<n;i++){let o=e*n+i;if(0!==t[o]){const n=r[t[o]];i<n.minX&&(n.minX=i),i>n.maxX&&(n.maxX=i),e<n.minY&&(n.minY=e),e>n.maxY&&(n.maxY=e),n.meanX+=i,n.meanY+=e,n.surface++}}let o=[];for(let t in e)r[t].meanX/=r[t].surface,r[t].meanY/=r[t].surface,o.push(r[t]);return o}}function Xa(t={}){const{algorithm:e="commonBorderLength",minCommonBorderLength:r=5,maxCommonBorderLength:n=100,minCommonBorderRatio:i=.3,maxCommonBorderRatio:o=1}=t;let s=function(t,e,i){return t[i]>=r&&t[i]<=n};"function"==typeof e&&(s=e),"commonborderratio"===e.toLowerCase()&&(s=function(t,e,r){let n=Math.min(t[r]/t[e],1);return n>=i&&n<=o});const a=this,h=a.commonBorderLength;let l={},u={};for(let t of Object.keys(h)){let e=h[t],r=Object.keys(e);for(let n of r)if(n!==t&&s(e,t,n)){let e=n;u[n]&&(e=u[n]);let r=t;if(u[t]&&(r=u[t]),Number(e)!==r){let t=Math.min(e,r),n=Math.max(e,r);if(l[t]||(l[t]={}),l[t][n]=!0,u[n]=t,l[n]){for(let e of Object.keys(l[n]))l[t][e]=!0,u[e]=t;delete l[n]}}}}let c=a.minMax,f=-c.min,d=c.max+f,p=new Array(d+1).fill(0);for(let t of Object.keys(u))p[Number(t)+f]=u[t];let m=a.data;for(let t=0;t<m.length;t++){let e=m[t];if(0!==e){let r=p[e+f];0!==r&&(m[t]=r)}}return a.computed={},a}class Wa{constructor(t,e){this.parent=t,this.width=t.width,this.height=t.height,this.data=e,this.negative=0,this.positive=0}get total(){return this.negative+this.positive}get minMax(){let t=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;for(let r=0;r<this.data.length;r++)this.data[r]<t&&(t=this.data[r]),this.data[r]>e&&(e=this.data[r]);return{min:t,max:e}}get commonBorderLength(){return function(t){let e=t.data,r=[1,0,-1,0],n=[0,1,0,-1],i=t.minMax,o=-i.min,s=i.max+o,a=[];for(let t=0;t<=s;t++)a.push(Object.create(null));for(let i=0;i<t.width;i++)for(let s=0;s<t.height;s++){let h=e[i+s*t.width];if(0!==h){let l=Object.create(null),u=!1;for(let c=0;c<4;c++){let f=i+r[c],d=s+n[c];if(f>=0&&d>=0&&f<t.width&&d<t.height){let r=e[f+d*t.width];h!==r&&(u=!0,0!==r&&void 0===l[r]&&(l[r]=!0,a[r+o][h]?a[r+o][h]++:a[r+o][h]=1))}else u=!0}u&&(a[h+o][h]?a[h+o][h]++:a[h+o][h]=1)}}let h={};for(let t=0;t<a.length;t++)Object.keys(a[t]).length>0&&(h[t-o]=a[t]);return h}(this)}mergeRoi(t={}){return Xa.call(this,t)}mergeRois(t){const e=t[0],r=t.slice(1);for(let t=0;t<this.data.length;t++)r.includes(this.data[t])&&(this.data[t]=e)}rowsInfo(){let t=new Array(this.height),e=0;for(let r=0;r<this.data.length;r+=this.width){let n={row:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=n;let i={},o={},s=[],a=this.data[r],h=0;for(let t=r;t<r+this.width;t++){let e=this.data[t];a!==e&&(a=e,s.push(h),h=0),h++,e>0?(n.positivePixel++,i[e]||(i[e]=!0)):e<0?(n.negativePixel++,o[e]||(o[e]=!0)):n.zeroPixel++}s.push(h),n.medianChange=s.sort(((t,e)=>t-e))[Math.floor(s.length/2)],n.positiveRoiIDs=Object.keys(i),n.negativeRoiIDs=Object.keys(o),n.positiveRoi=n.positiveRoiIDs.length,n.negativeRoi=n.negativeRoiIDs.length}return t}colsInfo(){let t=new Array(this.width),e=0;for(let r=0;r<this.width;r++){let n={col:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=n;let i={},o={},s=[],a=this.data[r],h=0;for(let t=r;t<r+this.data.length;t+=this.width){let e=this.data[t];a!==e&&(a=e,s.push(h),h=0),h++,e>0?(n.positivePixel++,i[e]||(i[e]=!0)):e<0?(n.negativePixel++,o[e]||(o[e]=!0)):n.zeroPixel++}s.push(h),n.medianChange=s.sort(((t,e)=>t-e))[Math.floor(s.length/2)],n.positiveRoiIDs=Object.keys(i),n.negativeRoiIDs=Object.keys(o),n.positiveRoi=n.positiveRoiIDs.length,n.negativeRoi=n.negativeRoiIDs.length}return t}}function qa(t,e={}){const{allowCorners:r=!1}=e,n=65535;let i=new Int16Array(t.size),o=0,s=0,a=new Uint16Array(65536),h=new Uint16Array(65536);for(let e=0;e<t.width;e++)for(let r=0;r<t.height;r++)0===i[r*t.width+e]&&l(e,r);function l(e,l){let u=0,c=0,f=t.getBitXY(e,l),d=f?++o:--s;if(o>32767||s<-32768)throw new Error("Too many regions of interest");for(a[0]=e,h[0]=l;u<=c;){let e=a[u&n],o=h[u&n];if(i[o*t.width+e]=d,e>0&&0===i[o*t.width+e-1]&&t.getBitXY(e-1,o)===f&&(c++,a[c&n]=e-1,h[c&n]=o,i[o*t.width+e-1]=-32768),o>0&&0===i[(o-1)*t.width+e]&&t.getBitXY(e,o-1)===f&&(c++,a[c&n]=e,h[c&n]=o-1,i[(o-1)*t.width+e]=-32768),e<t.width-1&&0===i[o*t.width+e+1]&&t.getBitXY(e+1,o)===f&&(c++,a[c&n]=e+1,h[c&n]=o,i[o*t.width+e+1]=-32768),o<t.height-1&&0===i[(o+1)*t.width+e]&&t.getBitXY(e,o+1)===f&&(c++,a[c&n]=e,h[c&n]=o+1,i[(o+1)*t.width+e]=-32768),r&&(e>0&&o>0&&0===i[(o-1)*t.width+e-1]&&t.getBitXY(e-1,o-1)===f&&(c++,a[c&n]=e-1,h[c&n]=o-1,i[(o-1)*t.width+e-1]=-32768),e<t.width-1&&o>0&&0===i[(o-1)*t.width+e+1]&&t.getBitXY(e+1,o-1)===f&&(c++,a[c&n]=e+1,h[c&n]=o-1,i[(o-1)*t.width+e+1]=-32768),e>0&&o<t.height-1&&0===i[(o+1)*t.width+e-1]&&t.getBitXY(e-1,o+1)===f&&(c++,a[c&n]=e-1,h[c&n]=o+1,i[(o+1)*t.width+e-1]=-32768),e<t.width-1&&o<t.height-1&&0===i[(o+1)*t.width+e+1]&&t.getBitXY(e+1,o+1)===f&&(c++,a[c&n]=e+1,h[c&n]=o+1,i[(o+1)*t.width+e+1]=-32768)),u++,c-u>n)throw new Error("analyseMask can not finish, the array to manage internal data is not big enough.You could improve mask by changing MAX_ARRAY")}}return new Wa(t,i)}var Za=r(530),Ga=r.n(Za);const $a=[-1,0],Ha=[0,-1],Qa=[null,null],Ka=[-1,-1,0,1],Ja=[0,-1,-1,-1],th=[null,null,null,null];function eh(t,e={}){const{allowCorners:r=!1}=e;let n,i,o,s=4;if(r&&(s=8),8===s)n=Ka,i=Ja,o=th;else{if(4!==s)throw new RangeError(`unsupported neighbours count: ${s}`);n=$a,i=Ha,o=Qa}const a=t.size,h=t.width,l=t.height,u=new Array(a),c=new Uint32Array(a),f=new(Ga());let d=1;for(let e=0;e<l;e++)for(let r=0;r<h;r++){const s=r+e*h;if(t.getBit(s)){let t=null;for(let s=0;s<o.length;s++){const a=r+n[s],c=e+i[s];if(a>=0&&c>=0&&a<h&&c<l){let e=u[a+c*h];e?(o[s]=e,(!t||o[s].value<t.value)&&(t=o[s])):o[s]=null}}if(t){u[s]=t;for(let e=0;e<o.length;e++)o[e]&&o[e]!==t&&f.union(t,o[e])}else u[s]=f.add(d++)}}for(let e=0;e<l;e++)for(let r=0;r<h;r++){const n=r+e*h;t.getBit(n)&&(c[n]=f.find(u[n]).value)}return new Wa(t,c)}function rh(t={}){let{allowCorner:e=!0,onlyTop:r=!1,invert:n=!1}=t,i=this;i.checkProcessable("fromMaxima",{components:[1]});let o=0,s=0,a=new Int16Array(i.size),h=new Int8Array(i.size),l=new Float32Array(i.size),u=1048575,c=new Uint16Array(1048576),f=new Uint16Array(1048576),d=0,p=0,m=new Uint16Array(1048576),g=new Uint16Array(1048576),w=0,b=0;for(function({maxima:t=!0}){for(let r=1;r<i.height-1;r++)for(let n=1;n<i.width-1;n++){let l=n+r*i.width;if(0===h[l]){let h=t?i.data[l]:-i.data[n+r*i.width];if(i.data[r*i.width+n-1]>h)continue;if(i.data[r*i.width+n+1]>h)continue;if(i.data[(r-1)*i.width+n]>h)continue;if(i.data[(r+1)*i.width+n]>h)continue;if(e){if(i.data[(r-1)*i.width+n-1]>h)continue;if(i.data[(r-1)*i.width+n+1]>h)continue;if(i.data[(r+1)*i.width+n-1]>h)continue;if(i.data[(r+1)*i.width+n+1]>h)continue}a[l]=t?++o:--s,y(n,r)||(t?--o:++s)}}}(i);d<p;)v(c[d&u],f[d&u],2),d++;return new Wa(i,a);function y(t,e){let r=p;w=0,b=1,m[0]=t,g[0]=e;let n=!0;for(;w<b;)n&=v(m[w&u],g[w&u],1),w++;if(!n){for(let t=0;t<b;t++){let e=m[t&u],r=g[t&u]*i.width+e;a[r]=0}p=r}return n}function v(t,e,n){let o=a[e*i.width+t],s=i.data[e*i.width+t];for(let d=e-1;d<=e+1;d++)for(let e=t-1;e<=t+1;e++){let t=d*i.width+e;if(0===h[t])switch(h[t]=1,l[t]=i.data[t]-s,n){case 1:if(0===l[t]){if(0===e||0===d||e===i.width-1||d===i.height-1)return!1;a[t]=o,m[b&u]=e,g[b&u]=d,b++}else{if(l[t]>0)return!1;r||(a[t]=o,c[p&u]=e,f[p&u]=d,p++)}break;case 2:l[t]<=0&&(a[t]=o,c[p&u]=e,f[p&u]=d,p++);break;default:throw new Error("unreachable")}}return!0}}function nh(t,e={}){let r=new ra(e),n=new Int16Array(this.size),i=0,o=r.getPoints();for(let e=0;e<t.length;e++){i++;let r=t[e][0],s=t[e][1];for(let t=0;t<o.length;t++){let e=o[t][0],a=o[t][1];r+e>=0&&s+a>=0&&r+e<this.width&&s+a<this.height&&(n[r+e+(s+a)*this.width]=i)}}return new Wa(this,n)}var ih=r(5307),oh=r.n(ih);const sh=[1,0,-1,0,1,1,-1,-1],ah=[0,1,0,-1,1,-1,1,-1];function hh(t={}){let{points:e,mask:r,image:n,fillMaxValue:i=this.maxValue,invert:o=!1}=t,s=n||this;s.checkProcessable("fromWaterShed",{bitDepth:[8,16],components:1}),o=!o,e||(e=s.getLocalMaxima({invert:o,mask:r}));let a=o?0:1,h=new Int16Array(s.size),l=s.width,u=s.height,c=new(oh())({comparator:(t,e)=>t[2]-e[2],strategy:oh().BinaryHeapStrategy});for(let t=0;t<e.length;t++){let r=e[t][0]+e[t][1]*l;h[r]=t+1;let n=s.data[r];(o&&n<=i||!o&&n>=i)&&c.queue([e[t][0],e[t][1],n])}for(;c.length>0;){let t=c.dequeue(),e=t[0]+t[1]*l;for(let n=0;n<4;n++){let f=t[0]+sh[n],d=t[1]+ah[n];if(f>=0&&d>=0&&f<l&&d<u){let u=f+d*l;if(!r||r.getBit(u)===a){let r=s.data[u];(o&&r<=i||!o&&r>=i)&&0===h[u]&&(h[u]=h[e],c.queue([t[0]+sh[n],t[1]+ah[n],r]))}}}}return new Wa(s,h)}class lh{constructor(t,e={}){this._image=t,this._options=e,this._options.label||(this._options.label="default"),this._layers={},this._painted=null}fromMaxima(t={}){let e=Object.assign({},this._options,t),r=rh.call(this._image,t);this._layers[e.label]=new Ya(r,e)}fromPoints(t,e={}){let r=Object.assign({},this._options,e),n=nh.call(this._image,t,e);return this._layers[r.label]=new Ya(n,r),this}putMap(t,e={}){let r=new Wa(this._image,t),n=Object.assign({},this._options,e);return this._layers[n.label]=new Ya(r,n),this}fromWaterShed(t={}){let e=Object.assign({},this._options,t),r=hh.call(this._image,t);this._layers[e.label]=new Ya(r,e)}fromMask(t,e={}){let r=Object.assign({},this._options,e),n=qa.call(this._image,t,e);return this._layers[r.label]=new Ya(n,r),this}fromMaskConnectedComponentLabelingAlgorithm(t,e={}){let r=Object.assign({},this._options,e),n=eh.call(this._image,t,e);return this._layers[r.label]=new Ya(n,r),this}getMap(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap}rowsInfo(t={}){return this.getMap(t).rowsInfo()}colsInfo(t={}){return this.getMap(t).rowsInfo()}getRoiIds(t={}){let e=this.getRois(t);if(e){let t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=e[r].id;return t}throw new Error("ROIs not found")}getRois(t={}){let{label:e=this._options.label,positive:r=!0,negative:n=!0,minSurface:i=0,maxSurface:o=Number.POSITIVE_INFINITY,minWidth:s=0,maxWidth:a=Number.POSITIVE_INFINITY,minHeight:h=0,maxHeight:l=Number.POSITIVE_INFINITY,minRatio:u=0,maxRatio:c=Number.POSITIVE_INFINITY}=t;if(!this._layers[e])throw new Error(`this Roi layer (${e}) does not exist`);const f=this._layers[e].roi,d=[];for(const t of f)(t.id<0&&n||t.id>0&&r)&&t.surface>=i&&t.surface<=o&&t.width>=s&&t.width<=a&&t.height>=h&&t.height<=l&&t.ratio>=u&&t.ratio<=c&&d.push(t);return d}getRoi(t,e={}){const{label:r=this._options.label}=e;if(!this._layers[r])throw new Error(`this Roi layer (${r}) does not exist`);const n=this._layers[r].roi.find((e=>e.id===t));if(!n)throw new Error(`found no Roi with id ${t}`);return n}getMasks(t={}){let e=this.getRois(t),r=new Array(e.length);for(let n=0;n<e.length;n++)r[n]=e[n].getMask(t);return r}getAnalysisMasks(t={}){const{analysisProperty:e}=t;let r=`${e}Mask`,n=this.getRois(t);return 0!==n.length&&n[0][r]?n.map((t=>t[r])):[]}getData(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap.data}paint(t={}){let{labelProperty:e,analysisProperty:r}=t;this._painted||(this._painted=this._image.rgba8());let n=this.getMasks(t);if(e){const r=this.getRois(t);t.labels=r.map((t=>function(t,e=""){let r=e.split(".");for(let e of r){if(void 0===t[e])return;t=t[e]}return t}(t,e)));const n=Math.max(...t.labels);let i=!1,o=!1;if(e.includes("surface")?i=!0:/(?:perimeter|min|max|external|width|height|length)/.test(e)&&(o=!0),isFinite(n)){let e="";if("pixel"!==t.unit&&t.pixelSize&&(o||i)){e=i?`${t.unit}^2`:t.unit;let r=i?"m^2":"m",n=i?t.pixelSize**2:t.pixelSize;const o=Fa().swiftConverter(r,e);t.labels=t.labels.map((t=>o(n*t)))}t.labels=n>50?t.labels.map((t=>Math.round(t)+e)):n>10?t.labels.map((t=>t.toFixed(1)+e)):t.labels.map((t=>t.toFixed(2)+e))}t.labelsPosition=r.map((t=>[t.meanX,t.meanY]))}if(this._painted.paintMasks(n,t),r){let e=this.getAnalysisMasks(t);this._painted.paintMasks(e,{color:t.analysisColor,alpha:t.analysisAlpha})}return this._painted}getMask(t={}){let e=new fh(this._image.width,this._image.height,{kind:"BINARY"}),r=this.getMasks(t);for(let t=0;t<r.length;t++){let n=r[t];for(let t=0;t<n.width;t++)for(let r=0;r<n.height;r++)n.getBitXY(t,r)&&e.setBitXY(t+n.position[0],r+n.position[1])}return e}resetPainted(t={}){const{image:e}=t;this._painted=e?this.image.rgba8():this._image.rgba8()}mergeRoi(t={}){const e=this.getMap(t);return e.mergeRoi(t),this.putMap(e.data,t),this}mergeRois(t,e={}){if(!Array.isArray(t)||t.some((t=>!Number.isInteger(t))))throw new Error("Roi ids must be an array of integers");if(t.length<2)throw new Error("Roi ids must have at least two elements");if(new Set(t).size!==t.length)throw new Error("Roi ids must be all different");t.forEach((t=>this.getRoi(t)));const r=this.getMap(e);return r.mergeRois(t),this.putMap(r.data,e),this}findCorrespondingRoi(t,e={}){let r=this.getRois(e),n=[];for(let e=0;e<r.length;e++){let i=r[e],o=uh(i.minX,i.minY,i.points,t,Math.sign(i.id));n.push(o)}return n}_assertLayerWithLabel(t){if(!this._layers[t])throw new Error(`no layer with label ${t}`)}}function uh(t,e,r,n,i){let o={id:[],surface:[],roiSurfaceCovered:[],same:0,opposite:0,total:0};for(let i=0;i<r.length;i++){let s=r[i],a=s[0]+t+(s[1]+e)*n.width,h=n.data[a];(h>0||h<0)&&(o.id.includes(h)?o.surface[o.id.indexOf(h)]+=1:(o.id.push(h),o.surface.push(1)))}for(let t=0;t<o.id.length;t++)Math.sign(o.id[t])===i?o.same+=o.surface[t]:o.opposite+=o.surface[t],o.roiSurfaceCovered[t]=o.surface[t]/r.length;return o.total=o.opposite+o.same,o}const ch=Object.prototype.toString;class fh{constructor(t,e,r,i){if(1===arguments.length?(i=t,({width:t,height:e,data:r}=i)):r&&!r.length&&(i=r,({data:r}=i)),void 0===t&&(t=1),void 0===e&&(e=1),void 0===i&&(i={}),"object"!=typeof i||null===i)throw new TypeError("options must be an object");if(!Number.isInteger(t)||t<=0)throw new RangeError("width must be a positive integer");if(!Number.isInteger(e)||e<=0)throw new RangeError("height must be a positive integer");const{kind:o=wn}=i;if("string"!=typeof o)throw new TypeError("kind must be a string");const s=function(t){const e=bn[t];if(!e)throw new RangeError(`invalid image kind: ${t}`);return e}(o),a=Object.assign({},i);for(const t in s)void 0===a[t]&&(a[t]=s[t]);!function(t){const{components:e,alpha:r,bitDepth:i,colorModel:o}=t;if(!Number.isInteger(e)||e<=0)throw new RangeError(`invalid components: ${e}. Must be a positive integer`);if(0!==r&&1!==r&&"boolean"!=typeof r)throw new TypeError(`invalid alpha: ${r}: must be a boolean, 0 or 1`);if(!yn.includes(i))throw new RangeError(`invalid bitDepth: ${i}. Must be one of ${yn.join(", ")}`);if(!n[o])throw new RangeError(`invalid colorModel: ${o}. Must be one of ${Object.keys(n).join(", ")}`)}(a);const{components:h,bitDepth:l,colorModel:u}=a,c=a.alpha+0,f=t*e,d=h+c,p=32===l?Number.MAX_VALUE:2**l-1;if(void 0===r)r=function(t,e,r,n,i,o){const s=n*t;let a;switch(i){case 1:a=new Uint8Array(Math.ceil(s/8));break;case 8:a=new Uint8Array(s);break;case 16:a=new Uint16Array(s);break;case 32:a=new Float32Array(s);break;default:throw new Error(`Cannot create pixel array for bit depth ${i}`)}if(r)for(let t=e;t<a.length;t+=n)a[t]=o;return a}(f,h,c,d,l,p);else{const t=function(t,e,r){let n=e*t;return 1===r&&(n=Math.ceil(n/8)),n}(f,d,l);if(r.length!==t)throw new RangeError(`incorrect data size: ${r.length}. Should be ${t}`)}this.width=t,this.height=e,this.data=r,this.size=f,this.components=h,this.alpha=c,this.bitDepth=l,this.maxValue=p,this.colorModel=u,this.channels=d,this.meta=i.meta||{},Object.defineProperty(this,"parent",{enumerable:!1,writable:!0,configurable:!0,value:i.parent||null}),this.position=i.position||[0,0],this.computed=null,this.sizes=[this.width,this.height],this.multiplierX=this.channels,this.multiplierY=this.channels*this.width,this.isClamped=this.bitDepth<32,this.borderSizes=[0,0]}get[Symbol.toStringTag](){return"IJSImage"}static isImage(t){return"[object IJSImage]"===ch.call(t)}static fromCanvas(t){const e=t.getContext("2d").getImageData(0,0,t.width,t.height);return new fh(e.width,e.height,e.data)}static createFrom(t,e){const r=fi(t);return Object.assign(r,{parent:t,position:[0,0]},e),new fh(r)}getRoiManager(t){return new lh(this,t)}clone(){const t=this.data.slice();return new fh(this.width,this.height,t,this)}apply(t){for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let n=(e*this.width+r)*this.channels;t.call(this,n)}}}function dh(t,e,r){let n,i,o,s,a=new Array(e);r||(r=100),r*=-1;let h=(e-1)/2,l=2*t*t;for(n=0;n<e;n++)for(a[n]=new Array(e),s=(n-h)*(n-h),i=0;i<e;i++)o=(i-h)*(i-h),a[n][i]=Math.round(r*(1-(o+s)/l)*Math.exp(-(o+s)/l));return a}!function(t){for(const e in ci)t.prototype[e]=ci[e]}(fh),function(t){for(const e in h)t.prototype[e]=h[e]}(fh),function(t){for(const e in an)t.prototype[e]=an[e]}(fh),fh.prototype.checkProcessable=function(t,e={}){let{bitDepth:r,alpha:n,colorModel:i,components:o,channels:s}=e;if("string"!=typeof t||0===t.length)throw new TypeError("processName must be a string");if(r&&(Array.isArray(r)||(r=[r]),!r.includes(this.bitDepth)))throw new TypeError(`The process: ${t} can only be applied if bit depth is in: ${r}`);if(n&&(Array.isArray(n)||(n=[n]),!n.includes(this.alpha)))throw new TypeError(`The process: ${t} can only be applied if alpha is in: ${n}`);if(i&&(Array.isArray(i)||(i=[i]),!i.includes(this.colorModel)))throw new TypeError(`The process: ${t} can only be applied if color model is in: ${i}`);if(o&&(Array.isArray(o)||(o=[o]),!o.includes(this.components))){let e=`The process: ${t} can only be applied if the number of components is in: ${o}`;throw 1===o.length&&1===o[0]?new TypeError(`${e}.\rYou should transform your image using "image.grey()" before applying the algorithm.`):new TypeError(e)}if(s&&(Array.isArray(s)||(s=[s]),!s.includes(this.channels)))throw new TypeError(`The process: ${t} can only be applied if the number of channels is in: ${s}`)},fh.prototype.getRGBAData=function(t={}){const{clamped:e}=t;this.checkProcessable("getRGBAData",{components:[1,3],bitDepth:[1,8,16,32]});const r=this.width*this.height*4;let n=e?new Uint8ClampedArray(r):new Uint8Array(r);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.size;r++){const n=t.getBit(r);e[4*r]=255*n,e[4*r+1]=255*n,e[4*r+2]=255*n}}(this,n):32===this.bitDepth?(this.checkProcessable("getRGBAData",{alpha:0}),1===this.components?function(t,e){const r=t.min[0],n=t.max[0]-r;for(let i=0;i<t.size;i++){const o=Math.floor(255*(t.data[i]-r)/n);e[4*i]=o,e[4*i+1]=o,e[4*i+2]=o}}(this,n):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[fn]}),function(t,e){const r=Math.min(...t.min),n=Math.max(...t.max)-r;for(let i=0;i<t.size;i++){const o=Math.floor(255*(t.data[3*i]-r)/n),s=Math.floor(255*(t.data[3*i+1]-r)/n),a=Math.floor(255*(t.data[3*i+2]-r)/n);e[4*i]=o,e[4*i+1]=s,e[4*i+2]=a}}(this,n))):1===this.components?function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels]>>>t.bitDepth-8}(this,n):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[fn]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels+1]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels+2]>>>t.bitDepth-8}(this,n)),1===this.alpha?(this.checkProcessable("getRGBAData",{bitDepth:[8,16]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=t.data[r*t.channels+t.components]>>t.bitDepth-8}(this,n)):function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=255}(this,n),n},fh.load=function(t,e){if("string"==typeof t)return function(t,e){const r=t.slice(0,64).match(si);let n;return n=null!==r?Promise.resolve(function(t){let e,r,n,i,o=.75*t.length,s=t.length,a=0;"="===t[t.length-1]&&(o--,"="===t[t.length-2]&&o--);const h=new Uint8Array(o);for(let o=0;o<s;o+=4)e=Jr[t.charCodeAt(o)],r=Jr[t.charCodeAt(o+1)],n=Jr[t.charCodeAt(o+2)],i=Jr[t.charCodeAt(o+3)],h[a++]=e<<2|r>>4,h[a++]=(15&r)<<4|n>>2,h[a++]=(3&n)<<6|63&i;return h}(t.slice(r[0].length))):function(t,{withCredentials:e=!1}={}){return new Promise((function(r,n){let i=new self.XMLHttpRequest;i.open("GET",t,!0),i.responseType="arraybuffer",i.withCredentials=e,i.onload=function(t){200!==this.status?n(t):r(this.response)},i.onerror=n,i.send()}))}(t,e),n.then((e=>ai(new Uint8Array(e),r?t:void 0)))}(t,e);if(t instanceof ArrayBuffer)return Promise.resolve(ai(new Uint8Array(t)));if(t.buffer)return Promise.resolve(ai(t));throw new Error('argument to "load" must be a string or buffer.')},fh.extendMethod=function(t,e,r={}){let{inPlace:n=!1,returnThis:i=!0,partialArgs:o=[]}=r;return fh.prototype[t]=n?function(...t){this.computed=null;let r=e.apply(this,[...o,...t]);return i?this:r}:function(...t){return e.apply(this,[...o,...t])},fh},fh.extendProperty=function(t,e,r={}){let{partialArgs:n=[]}=r;return un.get=function(){if(null===this.computed)this.computed={};else if(ln()(t,this.computed))return this.computed[t];let r=e.apply(this,n);return this.computed[t]=r,r},Object.defineProperty(fh.prototype,t,un),fh},function(t){let e={inPlace:!0};t.extendMethod("invert",gi),t.extendMethod("abs",mi),t.extendMethod("level",Zi,e),t.extendMethod("add",Qi,e),t.extendMethod("subtract",Ki,e),t.extendMethod("subtractImage",Ji),t.extendMethod("multiply",eo,e),t.extendMethod("divide",ro,e),t.extendMethod("hypotenuse",to),t.extendMethod("background",co),t.extendMethod("flipX",wi),t.extendMethod("flipY",bi),t.extendMethod("blurFilter",yi),t.extendMethod("medianFilter",Ai),t.extendMethod("gaussianFilter",Mi),t.extendMethod("sobelFilter",Yi),t.extendMethod("gradientFilter",Vi),t.extendMethod("scharrFilter",Xi),t.extendMethod("dilate",fo),t.extendMethod("erode",bo),t.extendMethod("open",ko),t.extendMethod("close",Ao),t.extendMethod("topHat",Mo),t.extendMethod("blackHat",Eo),t.extendMethod("morphologicalGradient",So),t.extendMethod("warpingFourPoints",To),t.extendMethod("crop",Ro),t.extendMethod("cropAlpha",Bo),t.extendMethod("resize",No).extendMethod("scale",No),t.extendMethod("hsv",zo),t.extendMethod("hsl",jo),t.extendMethod("cmyk",Vo),t.extendMethod("rgba8",Yo),t.extendMethod("grey",qo).extendMethod("gray",qo),t.extendMethod("mask",os),t.extendMethod("pad",ss),t.extendMethod("colorDepth",as),t.extendMethod("setBorder",ps,e),t.extendMethod("rotate",ls),t.extendMethod("rotateLeft",us),t.extendMethod("rotateRight",cs),t.extendMethod("insert",ds),t.extendMethod("getRow",As),t.extendMethod("getColumn",Ms),t.extendMethod("getMatrix",Es),t.extendMethod("setMatrix",Ss),t.extendMethod("getPixelsArray",Cs),t.extendMethod("getIntersection",Is),t.extendMethod("getClosestCommonParent",Ds),t.extendMethod("getThreshold",ns),t.extendMethod("split",ms),t.extendMethod("getChannel",gs),t.extendMethod("combineChannels",ws),t.extendMethod("setChannel",ys),t.extendMethod("getSimilarity",vs),t.extendMethod("getPixelsGrid",xs),t.extendMethod("getBestMatch",ks),t.extendMethod("cannyEdge",Fs),t.extendMethod("convolution",ji),t.extendMethod("extract",Ns),t.extendMethod("floodFill",Vs),t.extendMethod("paintLabels",Qs,e),t.extendMethod("paintMasks",Ks,e),t.extendMethod("paintPoints",na,e),t.extendMethod("paintPolyline",ia,e),t.extendMethod("paintPolylines",oa,e),t.extendMethod("paintPolygon",sa,e),t.extendMethod("paintPolygons",la,e),t.extendMethod("countAlphaPixels",Aa),t.extendMethod("monotoneChainConvexHull",Ca),t.extendMethod("minimalBoundingRectangle",Ua),t.extendMethod("getHistogram",ua).extendProperty("histogram",ua),t.extendMethod("getHistograms",ca).extendProperty("histograms",ca),t.extendMethod("getColorHistogram",da).extendProperty("colorHistogram",da),t.extendMethod("getMin",pa).extendProperty("min",pa),t.extendMethod("getMax",ma).extendProperty("max",ma),t.extendMethod("getSum",ga).extendProperty("sum",ga),t.extendMethod("getMoment",wa).extendProperty("moment",wa),t.extendMethod("getLocalMaxima",ba),t.extendMethod("getMedian",va).extendProperty("median",va),t.extendMethod("getMean",ya).extendProperty("mean",ya),t.extendMethod("getPoints",xa).extendProperty("points",xa),t.extendMethod("getExtendedPoints",_a).extendProperty("extendedPoints",_a),t.extendMethod("getRelativePosition",ka)}(fh);var ph=r(6732),mh=r.n(ph);const gh={regression:{kernelType:"polynomial",kernelOptions:{degree:2,constant:1}},threshold:.02,roi:{minSurface:100,positive:!1},sampling:20,include:[]};function wh(t,e,r){return t.post("data",[e,r]).then((function(t){for(let e in t)t[e]=new fh(t[e]);return t}))}const bh={run:function(t,e,r){e=Object.assign({},gh,e);const n=this.manager;return Array.isArray(t)?Promise.all(t.map((function(t){const i=wh(n,t,e);return"function"==typeof r&&i.then(r),i}))):wh(n,t,e)},work:function(){worker.on("data",(function(t,e,r){e=new IJS(e);const n={},i=[],o=e.grey(),s=o.sobelFilter();d("sobel",s);const a=s.level().mask({threshold:r.threshold});d("mask",a);const h=s.getRoiManager();h.fromMask(a);const l=h.getMask(r.roi);d("realMask",l);const u=o.getPixelsGrid({sampling:r.sampling,mask:l}),c=e.getBackground(u.xyS,u.zS,r.regression);d("background",c);const f=e.subtract(c);function d(t,e){r.include.includes(t)&&(n[t]=e,i.push(e.data.buffer))}n.result=f,i.push(f.data.buffer),t(n,i)}))}},yh=bh;class vh{constructor(){this._url=null,this._deps=[null]}checkUrl(){if(null===this._url)throw new Error("image worker must be initialized with an URL")}get url(){return this._url}set url(t){if("string"!=typeof t)throw new TypeError("worker URL must be a string");this._url=t,this._deps[0]=t}static extendMethod(t,e){let r,n,i={};function o(...t){return r||(this.checkUrl(),n=this.url,r=new(mh())(e.work,{deps:n}),i.manager=r),e.run.call(i,...t)}o.reset=function(){r&&(r.terminate(),r=new(mh())(e.work,{deps:n}),i.manager=r)},vh.prototype[t]=o}}!function(t){t.extendMethod("background",yh)}(vh);const xh=new vh,_h={grey:Wo,threshold:rs}},9184:(t,e,r)=>{"use strict";const n=r(7769),i=new Set(["jpg","png","gif","webp","flif","cr2","tif","bmp","jxr","psd","ico","bpg","jp2","jpm","jpx","heic","cur","dcm"]),o=t=>{const e=n(t);return i.has(e&&e.ext)?e:null};t.exports=o,t.exports.default=o,Object.defineProperty(o,"minimumBytes",{value:n.minimumBytes})},5838:t=>{"use strict";const e=[];t.exports=class{constructor(t,e){e=e||{},void 0===t&&(t=8192),"number"==typeof t&&(t=new ArrayBuffer(t));let r=t.byteLength;const n=e.offset?e.offset>>>0:0;t.buffer&&(r=t.byteLength-n,t=t.byteLength!==t.buffer.byteLength?t.buffer.slice(t.byteOffset+n,t.byteOffset+t.byteLength):n?t.buffer.slice(n):t.buffer),this.buffer=t,this.length=r,this.byteLength=r,this.byteOffset=0,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer),this._increment=r||8192,this._mark=0}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){this.littleEndian=!0}isBigEndian(){return!this.littleEndian}setBigEndian(){this.littleEndian=!1}skip(t){void 0===t&&(t=1),this.offset+=t}seek(t){this.offset=t}mark(){this._mark=this.offset}reset(){this.offset=this._mark}rewind(){this.offset=0}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const t=this._increment+this._increment;this._increment=t;const e=this.length+t,r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=e,this._data=new DataView(this.buffer)}}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),e.length=t;for(var r=0;r<t;r++)e[r]=this.readChar();return e.join("")}writeBoolean(t){this.writeUint8(t?255:0)}writeInt8(t){this.ensureAvailable(1),this._data.setInt8(this.offset++,t)}writeUint8(t){this.ensureAvailable(1),this._data.setUint8(this.offset++,t)}writeByte(t){this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e])}writeInt16(t){this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2}writeUint16(t){this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2}writeInt32(t){this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4}writeUint32(t){this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat32(t){this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat64(t){this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8}writeChar(t){this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e))}toArray(){return new Uint8Array(this.buffer,0,this.offset)}}},7531:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});const n=Object.prototype.toString;function i(t){return n.call(t).endsWith("Array]")}},7811:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){return"Array"===e.call(t).substr(-6,5)}},1867:t=>{"use strict";t.exports=Number.isFinite||function(t){return!("number"!=typeof t||t!=t||t===1/0||t===-1/0)}},8336:(t,e,r)=>{var n=r(1867);t.exports=Number.isInteger||function(t){return"number"==typeof t&&n(t)&&Math.floor(t)===t}},7870:(t,e,r)=>{var n=r(587),i=r(914);t.exports={encode:n,decode:i}},914:t=>{var e=function(){"use strict";var t=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),e=4017,r=799,n=3406,i=2276,o=1567,s=3784,a=5793,h=2896;function l(){}function u(t,e){for(var r,n,i=0,o=[],s=16;s>0&&!t[s-1];)s--;o.push({children:[],index:0});var a,h=o[0];for(r=0;r<s;r++){for(n=0;n<t[r];n++){for((h=o.pop()).children[h.index]=e[i];h.index>0;){if(0===o.length)throw new Error("Could not recreate Huffman Table");h=o.pop()}for(h.index++,o.push(h);o.length<=r;)o.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a;i++}r+1<s&&(o.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a)}return o[0].children}function c(e,r,n,i,o,s,a,h,l,u){n.precision,n.samplesPerLine,n.scanLines;var c=n.mcusPerLine,f=n.progressive,d=(n.maxH,n.maxV,r),p=0,m=0;function g(){if(m>0)return m--,p>>m&1;if(255==(p=e[r++])){var t=e[r++];if(t)throw new Error("unexpected marker: "+(p<<8|t).toString(16))}return m=7,p>>>7}function w(t){for(var e,r=t;null!==(e=g());){if("number"==typeof(r=r[e]))return r;if("object"!=typeof r)throw new Error("invalid huffman sequence")}return null}function b(t){for(var e=0;t>0;){var r=g();if(null===r)return;e=e<<1|r,t--}return e}function y(t){var e=b(t);return e>=1<<t-1?e:e+(-1<<t)+1}var v,x=0,_=0;function k(t,e,r,n,i){var o=r%c,s=(r/c|0)*t.v+n,a=o*t.h+i;void 0===t.blocks[s]&&u.tolerantDecoding||e(t,t.blocks[s][a])}function A(t,e,r){var n=r/t.blocksPerLine|0,i=r%t.blocksPerLine;void 0===t.blocks[n]&&u.tolerantDecoding||e(t,t.blocks[n][i])}var M,E,S,C,I,P,D=i.length;P=f?0===s?0===h?function(t,e){var r=w(t.huffmanTableDC),n=0===r?0:y(r)<<l;e[0]=t.pred+=n}:function(t,e){e[0]|=g()<<l}:0===h?function(e,r){if(x>0)x--;else for(var n=s,i=a;n<=i;){var o=w(e.huffmanTableAC),h=15&o,u=o>>4;if(0!==h)r[t[n+=u]]=y(h)*(1<<l),n++;else{if(u<15){x=b(u)+(1<<u)-1;break}n+=16}}}:function(e,r){for(var n=s,i=a,o=0;n<=i;){var h=t[n],u=r[h]<0?-1:1;switch(_){case 0:var c=w(e.huffmanTableAC),f=15&c;if(o=c>>4,0===f)o<15?(x=b(o)+(1<<o),_=4):(o=16,_=1);else{if(1!==f)throw new Error("invalid ACn encoding");v=y(f),_=o?2:3}continue;case 1:case 2:r[h]?r[h]+=(g()<<l)*u:0==--o&&(_=2==_?3:0);break;case 3:r[h]?r[h]+=(g()<<l)*u:(r[h]=v<<l,_=0);break;case 4:r[h]&&(r[h]+=(g()<<l)*u)}n++}4===_&&0==--x&&(_=0)}:function(e,r){var n=w(e.huffmanTableDC),i=0===n?0:y(n);r[0]=e.pred+=i;for(var o=1;o<64;){var s=w(e.huffmanTableAC),a=15&s,h=s>>4;if(0!==a)r[t[o+=h]]=y(a),o++;else{if(h<15)break;o+=16}}};var T,R,B,U,O=0;for(R=1==D?i[0].blocksPerLine*i[0].blocksPerColumn:c*n.mcusPerColumn,o||(o=R);O<R;){for(E=0;E<D;E++)i[E].pred=0;if(x=0,1==D)for(M=i[0],I=0;I<o;I++)A(M,P,O),O++;else for(I=0;I<o;I++){for(E=0;E<D;E++)for(B=(M=i[E]).h,U=M.v,S=0;S<U;S++)for(C=0;C<B;C++)k(M,P,O,S,C);if(++O===R)break}if(O===R)do{if(255===e[r]&&0!==e[r+1])break;r+=1}while(r<e.length-2);if(m=0,(T=e[r]<<8|e[r+1])<65280)throw new Error("marker was not found");if(!(T>=65488&&T<=65495))break;r+=2}return r-d}function f(t,l){var u,c,f=[],d=l.blocksPerLine,p=l.blocksPerColumn,m=d<<3,w=new Int32Array(64),b=new Uint8Array(64);function y(t,u,c){var f,d,p,m,g,w,b,y,v,x,_=l.quantizationTable,k=c;for(x=0;x<64;x++)k[x]=t[x]*_[x];for(x=0;x<8;++x){var A=8*x;0!=k[1+A]||0!=k[2+A]||0!=k[3+A]||0!=k[4+A]||0!=k[5+A]||0!=k[6+A]||0!=k[7+A]?(f=a*k[0+A]+128>>8,d=a*k[4+A]+128>>8,p=k[2+A],m=k[6+A],g=h*(k[1+A]-k[7+A])+128>>8,y=h*(k[1+A]+k[7+A])+128>>8,w=k[3+A]<<4,b=k[5+A]<<4,v=f-d+1>>1,f=f+d+1>>1,d=v,v=p*s+m*o+128>>8,p=p*o-m*s+128>>8,m=v,v=g-b+1>>1,g=g+b+1>>1,b=v,v=y+w+1>>1,w=y-w+1>>1,y=v,v=f-m+1>>1,f=f+m+1>>1,m=v,v=d-p+1>>1,d=d+p+1>>1,p=v,v=g*i+y*n+2048>>12,g=g*n-y*i+2048>>12,y=v,v=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=v,k[0+A]=f+y,k[7+A]=f-y,k[1+A]=d+b,k[6+A]=d-b,k[2+A]=p+w,k[5+A]=p-w,k[3+A]=m+g,k[4+A]=m-g):(v=a*k[0+A]+512>>10,k[0+A]=v,k[1+A]=v,k[2+A]=v,k[3+A]=v,k[4+A]=v,k[5+A]=v,k[6+A]=v,k[7+A]=v)}for(x=0;x<8;++x){var M=x;0!=k[8+M]||0!=k[16+M]||0!=k[24+M]||0!=k[32+M]||0!=k[40+M]||0!=k[48+M]||0!=k[56+M]?(f=a*k[0+M]+2048>>12,d=a*k[32+M]+2048>>12,p=k[16+M],m=k[48+M],g=h*(k[8+M]-k[56+M])+2048>>12,y=h*(k[8+M]+k[56+M])+2048>>12,w=k[24+M],b=k[40+M],v=f-d+1>>1,f=f+d+1>>1,d=v,v=p*s+m*o+2048>>12,p=p*o-m*s+2048>>12,m=v,v=g-b+1>>1,g=g+b+1>>1,b=v,v=y+w+1>>1,w=y-w+1>>1,y=v,v=f-m+1>>1,f=f+m+1>>1,m=v,v=d-p+1>>1,d=d+p+1>>1,p=v,v=g*i+y*n+2048>>12,g=g*n-y*i+2048>>12,y=v,v=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=v,k[0+M]=f+y,k[56+M]=f-y,k[8+M]=d+b,k[48+M]=d-b,k[16+M]=p+w,k[40+M]=p-w,k[24+M]=m+g,k[32+M]=m-g):(v=a*c[x+0]+8192>>14,k[0+M]=v,k[8+M]=v,k[16+M]=v,k[24+M]=v,k[32+M]=v,k[40+M]=v,k[48+M]=v,k[56+M]=v)}for(x=0;x<64;++x){var E=128+(k[x]+8>>4);u[x]=E<0?0:E>255?255:E}}g(m*p*8);for(var v=0;v<p;v++){var x=v<<3;for(u=0;u<8;u++)f.push(new Uint8Array(m));for(var _=0;_<d;_++){y(l.blocks[v][_],b,w);var k=0,A=_<<3;for(c=0;c<8;c++){var M=f[x+c];for(u=0;u<8;u++)M[A+u]=b[k++]}}}return f}function d(t){return t<0?0:t>255?255:t}l.prototype={load:function(t){var e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="arraybuffer",e.onload=function(){var t=new Uint8Array(e.response||e.mozResponseArrayBuffer);this.parse(t),this.onload&&this.onload()}.bind(this),e.send(null)},parse:function(e){var r=1e3*this.opts.maxResolutionInMP*1e3,n=0;function i(){var t=e[n]<<8|e[n+1];return n+=2,t}function o(t){var e,r,n=0,i=0;for(r in t.components)t.components.hasOwnProperty(r)&&(n<(e=t.components[r]).h&&(n=e.h),i<e.v&&(i=e.v));var o=Math.ceil(t.samplesPerLine/8/n),s=Math.ceil(t.scanLines/8/i);for(r in t.components)if(t.components.hasOwnProperty(r)){e=t.components[r];var a=Math.ceil(Math.ceil(t.samplesPerLine/8)*e.h/n),h=Math.ceil(Math.ceil(t.scanLines/8)*e.v/i),l=o*e.h,u=s*e.v,c=[];g(u*l*256);for(var f=0;f<u;f++){for(var d=[],p=0;p<l;p++)d.push(new Int32Array(64));c.push(d)}e.blocksPerLine=a,e.blocksPerColumn=h,e.blocks=c}t.maxH=n,t.maxV=i,t.mcusPerLine=o,t.mcusPerColumn=s}e.length;var s,a,h,l,d=null,p=null,m=[],w=[],b=[],y=[],v=i(),x=-1;if(this.comments=[],65496!=v)throw new Error("SOI not found");for(v=i();65497!=v;){switch(v){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var _=(h=void 0,l=void 0,h=i(),l=e.subarray(n,n+h-2),n+=l.length,l);if(65534===v){var k=String.fromCharCode.apply(null,_);this.comments.push(k)}65504===v&&74===_[0]&&70===_[1]&&73===_[2]&&70===_[3]&&0===_[4]&&(d={version:{major:_[5],minor:_[6]},densityUnits:_[7],xDensity:_[8]<<8|_[9],yDensity:_[10]<<8|_[11],thumbWidth:_[12],thumbHeight:_[13],thumbData:_.subarray(14,14+3*_[12]*_[13])}),65505===v&&69===_[0]&&120===_[1]&&105===_[2]&&102===_[3]&&0===_[4]&&(this.exifBuffer=_.subarray(5,_.length)),65518===v&&65===_[0]&&100===_[1]&&111===_[2]&&98===_[3]&&101===_[4]&&0===_[5]&&(p={version:_[6],flags0:_[7]<<8|_[8],flags1:_[9]<<8|_[10],transformCode:_[11]});break;case 65499:for(var A=i()+n-2;n<A;){var M=e[n++];g(256);var E=new Int32Array(64);if(M>>4==0)for(G=0;G<64;G++)E[t[G]]=e[n++];else{if(M>>4!=1)throw new Error("DQT: invalid table spec");for(G=0;G<64;G++)E[t[G]]=i()}m[15&M]=E}break;case 65472:case 65473:case 65474:i(),(s={}).extended=65473===v,s.progressive=65474===v,s.precision=e[n++],s.scanLines=i(),s.samplesPerLine=i(),s.components={},s.componentsOrder=[];var S=s.scanLines*s.samplesPerLine;if(S>r){var C=Math.ceil((S-r)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${C}MP`)}var I,P=e[n++];for(q=0;q<P;q++){I=e[n];var D=e[n+1]>>4,T=15&e[n+1],R=e[n+2];s.componentsOrder.push(I),s.components[I]={h:D,v:T,quantizationIdx:R},n+=3}o(s),w.push(s);break;case 65476:var B=i();for(q=2;q<B;){var U=e[n++],O=new Uint8Array(16),L=0;for(G=0;G<16;G++,n++)L+=O[G]=e[n];g(16+L);var F=new Uint8Array(L);for(G=0;G<L;G++,n++)F[G]=e[n];q+=17+L,(U>>4==0?y:b)[15&U]=u(O,F)}break;case 65501:i(),a=i();break;case 65500:i(),i();break;case 65498:i();var N=e[n++],z=[];for(q=0;q<N;q++){$=s.components[e[n++]];var j=e[n++];$.huffmanTableDC=y[j>>4],$.huffmanTableAC=b[15&j],z.push($)}var V=e[n++],Y=e[n++],X=e[n++],W=c(e,n,s,z,a,V,Y,X>>4,15&X,this.opts);n+=W;break;case 65535:255!==e[n]&&n--;break;default:if(255==e[n-3]&&e[n-2]>=192&&e[n-2]<=254){n-=3;break}if(224===v||225==v){if(-1!==x)throw new Error(`first unknown JPEG marker at offset ${x.toString(16)}, second unknown JPEG marker ${v.toString(16)} at offset ${(n-1).toString(16)}`);x=n-1;const t=i();if(255===e[n+t-2]){n+=t-2;break}}throw new Error("unknown JPEG marker "+v.toString(16))}v=i()}if(1!=w.length)throw new Error("only single frame JPEGs supported");for(var q=0;q<w.length;q++){var Z=w[q].components;for(var G in Z)Z[G].quantizationTable=m[Z[G].quantizationIdx],delete Z[G].quantizationIdx}for(this.width=s.samplesPerLine,this.height=s.scanLines,this.jfif=d,this.adobe=p,this.components=[],q=0;q<s.componentsOrder.length;q++){var $=s.components[s.componentsOrder[q]];this.components.push({lines:f(0,$),scaleX:$.h/s.maxH,scaleY:$.v/s.maxV})}},getData:function(t,e){var r,n,i,o,s,a,h,l,u,c,f,p,m,w,b,y,v,x,_,k,A,M=this.width/t,E=this.height/e,S=0,C=t*e*this.components.length;g(C);var I=new Uint8Array(C);switch(this.components.length){case 1:for(r=this.components[0],c=0;c<e;c++)for(s=r.lines[0|c*r.scaleY*E],u=0;u<t;u++)f=s[0|u*r.scaleX*M],I[S++]=f;break;case 2:for(r=this.components[0],n=this.components[1],c=0;c<e;c++)for(s=r.lines[0|c*r.scaleY*E],a=n.lines[0|c*n.scaleY*E],u=0;u<t;u++)f=s[0|u*r.scaleX*M],I[S++]=f,f=a[0|u*n.scaleX*M],I[S++]=f;break;case 3:for(A=!0,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],n=this.components[1],i=this.components[2],c=0;c<e;c++)for(s=r.lines[0|c*r.scaleY*E],a=n.lines[0|c*n.scaleY*E],h=i.lines[0|c*i.scaleY*E],u=0;u<t;u++)A?(f=s[0|u*r.scaleX*M],p=a[0|u*n.scaleX*M],x=d(f+1.402*((m=h[0|u*i.scaleX*M])-128)),_=d(f-.3441363*(p-128)-.71413636*(m-128)),k=d(f+1.772*(p-128))):(x=s[0|u*r.scaleX*M],_=a[0|u*n.scaleX*M],k=h[0|u*i.scaleX*M]),I[S++]=x,I[S++]=_,I[S++]=k;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(A=!1,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],n=this.components[1],i=this.components[2],o=this.components[3],c=0;c<e;c++)for(s=r.lines[0|c*r.scaleY*E],a=n.lines[0|c*n.scaleY*E],h=i.lines[0|c*i.scaleY*E],l=o.lines[0|c*o.scaleY*E],u=0;u<t;u++)A?(f=s[0|u*r.scaleX*M],p=a[0|u*n.scaleX*M],m=h[0|u*i.scaleX*M],w=l[0|u*o.scaleX*M],b=255-d(f+1.402*(m-128)),y=255-d(f-.3441363*(p-128)-.71413636*(m-128)),v=255-d(f+1.772*(p-128))):(b=s[0|u*r.scaleX*M],y=a[0|u*n.scaleX*M],v=h[0|u*i.scaleX*M],w=l[0|u*o.scaleX*M]),I[S++]=255-b,I[S++]=255-y,I[S++]=255-v,I[S++]=255-w;break;default:throw new Error("Unsupported color mode")}return I},copyToImageData:function(t,e){var r,n,i,o,s,a,h,l,u,c=t.width,f=t.height,p=t.data,m=this.getData(c,f),g=0,w=0;switch(this.components.length){case 1:for(n=0;n<f;n++)for(r=0;r<c;r++)i=m[g++],p[w++]=i,p[w++]=i,p[w++]=i,e&&(p[w++]=255);break;case 3:for(n=0;n<f;n++)for(r=0;r<c;r++)h=m[g++],l=m[g++],u=m[g++],p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;case 4:for(n=0;n<f;n++)for(r=0;r<c;r++)s=m[g++],a=m[g++],i=m[g++],h=255-d(s*(1-(o=m[g++])/255)+o),l=255-d(a*(1-o/255)+o),u=255-d(i*(1-o/255)+o),p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;default:throw new Error("Unsupported color mode")}}};var p=0,m=0;function g(t=0){var e=p+t;if(e>m){var r=Math.ceil((e-m)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${r}MB`)}p=e}return l.resetMaxMemoryUsage=function(t){p=0,m=t},l.getBytesAllocated=function(){return p},l.requestMemoryAllocation=g,l}();t.exports=function(t,r={}){var n={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512,...r},i=new Uint8Array(t),o=new e;o.opts=n,e.resetMaxMemoryUsage(1024*n.maxMemoryUsageInMB*1024),o.parse(i);var s=n.formatAsRGBA?4:3,a=o.width*o.height*s;try{e.requestMemoryAllocation(a);var h={width:o.width,height:o.height,exifBuffer:o.exifBuffer,data:n.useTArray?new Uint8Array(a):Buffer.alloc(a)};o.comments.length>0&&(h.comments=o.comments)}catch(t){throw t instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+a):t}return o.copyToImageData(h,n.formatAsRGBA),h}},587:t=>{function e(t){Math.round;var e,r,n,i,o,s=Math.floor,a=new Array(64),h=new Array(64),l=new Array(64),u=new Array(64),c=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),m=[],g=0,w=7,b=new Array(64),y=new Array(64),v=new Array(64),x=new Array(256),_=new Array(2048),k=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],A=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],M=[0,1,2,3,4,5,6,7,8,9,10,11],E=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],S=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],C=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],P=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],D=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function T(t,e){for(var r=0,n=0,i=new Array,o=1;o<=16;o++){for(var s=1;s<=t[o];s++)i[e[n]]=[],i[e[n]][0]=r,i[e[n]][1]=o,n++,r++;r*=2}return i}function R(t){for(var e=t[0],r=t[1]-1;r>=0;)e&1<<r&&(g|=1<<w),r--,--w<0&&(255==g?(B(255),B(0)):B(g),w=7,g=0)}function B(t){m.push(t)}function U(t){B(t>>8&255),B(255&t)}function O(t,e,r,n,i){for(var o,s=i[0],a=i[240],h=function(t,e){var r,n,i,o,s,a,h,l,u,c,f=0;for(u=0;u<8;++u){r=t[f],n=t[f+1],i=t[f+2],o=t[f+3],s=t[f+4],a=t[f+5],h=t[f+6];var p=r+(l=t[f+7]),m=r-l,g=n+h,w=n-h,b=i+a,y=i-a,v=o+s,x=o-s,_=p+v,k=p-v,A=g+b,M=g-b;t[f]=_+A,t[f+4]=_-A;var E=.707106781*(M+k);t[f+2]=k+E,t[f+6]=k-E;var S=.382683433*((_=x+y)-(M=w+m)),C=.5411961*_+S,I=1.306562965*M+S,P=.707106781*(A=y+w),D=m+P,T=m-P;t[f+5]=T+C,t[f+3]=T-C,t[f+1]=D+I,t[f+7]=D-I,f+=8}for(f=0,u=0;u<8;++u){r=t[f],n=t[f+8],i=t[f+16],o=t[f+24],s=t[f+32],a=t[f+40],h=t[f+48];var R=r+(l=t[f+56]),B=r-l,U=n+h,O=n-h,L=i+a,F=i-a,N=o+s,z=o-s,j=R+N,V=R-N,Y=U+L,X=U-L;t[f]=j+Y,t[f+32]=j-Y;var W=.707106781*(X+V);t[f+16]=V+W,t[f+48]=V-W;var q=.382683433*((j=z+F)-(X=O+B)),Z=.5411961*j+q,G=1.306562965*X+q,$=.707106781*(Y=F+O),H=B+$,Q=B-$;t[f+40]=Q+Z,t[f+24]=Q-Z,t[f+8]=H+G,t[f+56]=H-G,f++}for(u=0;u<64;++u)c=t[u]*e[u],d[u]=c>0?c+.5|0:c-.5|0;return d}(t,e),l=0;l<64;++l)p[k[l]]=h[l];var u=p[0]-r;r=p[0],0==u?R(n[0]):(R(n[f[o=32767+u]]),R(c[o]));for(var m=63;m>0&&0==p[m];m--);if(0==m)return R(s),r;for(var g,w=1;w<=m;){for(var b=w;0==p[w]&&w<=m;++w);var y=w-b;if(y>=16){g=y>>4;for(var v=1;v<=g;++v)R(a);y&=15}o=32767+p[w],R(i[(y<<4)+f[o]]),R(c[o]),w++}return 63!=m&&R(s),r}function L(t){t<=0&&(t=1),t>100&&(t=100),o!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],r=0;r<64;r++){var n=s((e[r]*t+50)/100);n<1?n=1:n>255&&(n=255),a[k[r]]=n}for(var i=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],o=0;o<64;o++){var c=s((i[o]*t+50)/100);c<1?c=1:c>255&&(c=255),h[k[o]]=c}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var m=0;m<8;m++)l[d]=1/(a[k[d]]*f[p]*f[m]*8),u[d]=1/(h[k[d]]*f[p]*f[m]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),o=t)}this.encode=function(t,o){(new Date).getTime(),o&&L(o),m=new Array,g=0,w=7,U(65496),U(65504),U(16),B(74),B(70),B(73),B(70),B(0),B(1),B(1),B(0),U(1),U(1),B(0),B(0),function(t){if(t){U(65505),69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]?U(t.length+2):(U(t.length+5+2),B(69),B(120),B(105),B(102),B(0));for(var e=0;e<t.length;e++)B(t[e])}}(t.exifBuffer),function(){U(65499),U(132),B(0);for(var t=0;t<64;t++)B(a[t]);B(1);for(var e=0;e<64;e++)B(h[e])}(),function(t,e){U(65472),U(17),B(8),U(e),U(t),B(3),B(1),B(17),B(0),B(2),B(17),B(1),B(3),B(17),B(1)}(t.width,t.height),function(){U(65476),U(418),B(0);for(var t=0;t<16;t++)B(A[t+1]);for(var e=0;e<=11;e++)B(M[e]);B(16);for(var r=0;r<16;r++)B(E[r+1]);for(var n=0;n<=161;n++)B(S[n]);B(1);for(var i=0;i<16;i++)B(C[i+1]);for(var o=0;o<=11;o++)B(I[o]);B(17);for(var s=0;s<16;s++)B(P[s+1]);for(var a=0;a<=161;a++)B(D[a])}(),U(65498),U(12),B(3),B(1),B(0),B(2),B(17),B(3),B(17),B(0),B(63),B(0);var s=0,c=0,f=0;g=0,w=7,this.encode.displayName="_encode_";for(var d,p,x,k,T,F,N,z,j,V=t.data,Y=t.width,X=t.height,W=4*Y,q=0;q<X;){for(d=0;d<W;){for(F=T=W*q+d,N=-1,z=0,j=0;j<64;j++)F=T+(z=j>>3)*W+(N=4*(7&j)),q+z>=X&&(F-=W*(q+1+z-X)),d+N>=W&&(F-=d+N-W+4),p=V[F++],x=V[F++],k=V[F++],b[j]=(_[p]+_[x+256>>0]+_[k+512>>0]>>16)-128,y[j]=(_[p+768>>0]+_[x+1024>>0]+_[k+1280>>0]>>16)-128,v[j]=(_[p+1280>>0]+_[x+1536>>0]+_[k+1792>>0]>>16)-128;s=O(b,l,s,e,n),c=O(y,u,c,r,i),f=O(v,u,f,r,i),d+=32}q+=8}if(w>=0){var Z=[];Z[1]=w+1,Z[0]=(1<<w+1)-1,R(Z)}return U(65497),Buffer.from(m)},(new Date).getTime(),t||(t=50),function(){for(var t=String.fromCharCode,e=0;e<256;e++)x[e]=t(e)}(),e=T(A,M),r=T(C,I),n=T(E,S),i=T(P,D),function(){for(var t=1,e=2,r=1;r<=15;r++){for(var n=t;n<e;n++)f[32767+n]=r,c[32767+n]=[],c[32767+n][1]=r,c[32767+n][0]=n;for(var i=-(e-1);i<=-t;i++)f[32767+i]=r,c[32767+i]=[],c[32767+i][1]=r,c[32767+i][0]=e-1+i;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)_[t]=19595*t,_[t+256>>0]=38470*t,_[t+512>>0]=7471*t+32768,_[t+768>>0]=-11059*t,_[t+1024>>0]=-21709*t,_[t+1280>>0]=32768*t+8421375,_[t+1536>>0]=-27439*t,_[t+1792>>0]=-5329*t}(),L(t),(new Date).getTime()}t.exports=function(t,r){return void 0===r&&(r=50),{data:new e(r).encode(t,r),width:t.width,height:t.height}}},5307:t=>{t.exports=function t(e,r,n){function i(s,a){if(!r[s]){if(!e[s]){if(o)return o(s,!0);var h=new Error("Cannot find module '"+s+"'");throw h.code="MODULE_NOT_FOUND",h}var l=r[s]={exports:{}};e[s][0].call(l.exports,(function(t){return i(e[s][1][t]||t)}),l,l.exports,t,e,r,n)}return r[s].exports}for(var o=void 0,s=0;s<n.length;s++)i(n[s]);return i}({1:[function(t,e,r){var n,i,o,s,a,h={}.hasOwnProperty;n=t("./PriorityQueue/AbstractPriorityQueue"),i=t("./PriorityQueue/ArrayStrategy"),s=t("./PriorityQueue/BinaryHeapStrategy"),o=t("./PriorityQueue/BHeapStrategy"),(a=function(t){function e(t){t||(t={}),t.strategy||(t.strategy=s),t.comparator||(t.comparator=function(t,e){return(t||0)-(e||0)}),e.__super__.constructor.call(this,t)}return function(t,e){for(var r in e)h.call(e,r)&&(t[r]=e[r]);function n(){this.constructor=t}n.prototype=e.prototype,t.prototype=new n,t.__super__=e.prototype}(e,t),e}(n)).ArrayStrategy=i,a.BinaryHeapStrategy=s,a.BHeapStrategy=o,e.exports=a},{"./PriorityQueue/AbstractPriorityQueue":2,"./PriorityQueue/ArrayStrategy":3,"./PriorityQueue/BHeapStrategy":4,"./PriorityQueue/BinaryHeapStrategy":5}],2:[function(t,e,r){e.exports=function(){function t(t){var e;if(null==(null!=t?t.strategy:void 0))throw"Must pass options.strategy, a strategy";if(null==(null!=t?t.comparator:void 0))throw"Must pass options.comparator, a comparator";this.priv=new t.strategy(t),this.length=(null!=t&&null!=(e=t.initialValues)?e.length:void 0)||0}return t.prototype.queue=function(t){this.length++,this.priv.queue(t)},t.prototype.dequeue=function(t){if(!this.length)throw"Empty queue";return this.length--,this.priv.dequeue()},t.prototype.peek=function(t){if(!this.length)throw"Empty queue";return this.priv.peek()},t.prototype.clear=function(){return this.length=0,this.priv.clear()},t}()},{}],3:[function(t,e,r){var n;n=function(t,e,r){var n,i,o;for(i=0,n=t.length;i<n;)r(t[o=i+n>>>1],e)>=0?i=o+1:n=o;return i},e.exports=function(){function t(t){var e;this.options=t,this.comparator=this.options.comparator,this.data=(null!=(e=this.options.initialValues)?e.slice(0):void 0)||[],this.data.sort(this.comparator).reverse()}return t.prototype.queue=function(t){var e;e=n(this.data,t,this.comparator),this.data.splice(e,0,t)},t.prototype.dequeue=function(){return this.data.pop()},t.prototype.peek=function(){return this.data[this.data.length-1]},t.prototype.clear=function(){this.data.length=0},t}()},{}],4:[function(t,e,r){e.exports=function(){function t(t){var e,r,n,i,o,s,a,h;for(this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.pageSize=(null!=t?t.pageSize:void 0)||512,this.length=0,a=0;1<<a<this.pageSize;)a+=1;if(1<<a!==this.pageSize)throw"pageSize must be a power of two";for(this._shift=a,this._emptyMemoryPageTemplate=e=[],r=0,o=this.pageSize;0<=o?r<o:r>o;0<=o?++r:--r)e.push(null);if(this._memory=[],this._mask=this.pageSize-1,t.initialValues)for(n=0,i=(s=t.initialValues).length;n<i;n++)h=s[n],this.queue(h)}return t.prototype.queue=function(t){this.length+=1,this._write(this.length,t),this._bubbleUp(this.length,t)},t.prototype.dequeue=function(){var t,e;return t=this._read(1),e=this._read(this.length),this.length-=1,this.length>0&&(this._write(1,e),this._bubbleDown(1,e)),t},t.prototype.peek=function(){return this._read(1)},t.prototype.clear=function(){this.length=0,this._memory.length=0},t.prototype._write=function(t,e){var r;for(r=t>>this._shift;r>=this._memory.length;)this._memory.push(this._emptyMemoryPageTemplate.slice(0));return this._memory[r][t&this._mask]=e},t.prototype._read=function(t){return this._memory[t>>this._shift][t&this._mask]},t.prototype._bubbleUp=function(t,e){var r,n,i,o;for(r=this.comparator;t>1&&(n=t&this._mask,t<this.pageSize||n>3?i=t&~this._mask|n>>1:n<2?(i=t-this.pageSize>>this._shift,i+=i&~(this._mask>>1),i|=this.pageSize>>1):i=t-2,!(r(o=this._read(i),e)<0));)this._write(i,e),this._write(t,o),t=i},t.prototype._bubbleDown=function(t,e){var r,n,i,o,s;for(s=this.comparator;t<this.length;)if(t>this._mask&&!(t&this._mask-1)?r=n=t+2:t&this.pageSize>>1?(r=(t&~this._mask)>>1,n=1+(r=1+(r|=t&this._mask>>1)<<this._shift)):n=(r=t+(t&this._mask))+1,r!==n&&n<=this.length)if(i=this._read(r),o=this._read(n),s(i,e)<0&&s(i,o)<=0)this._write(r,e),this._write(t,i),t=r;else{if(!(s(o,e)<0))break;this._write(n,e),this._write(t,o),t=n}else{if(!(r<=this.length))break;if(!(s(i=this._read(r),e)<0))break;this._write(r,e),this._write(t,i),t=r}},t}()},{}],5:[function(t,e,r){e.exports=function(){function t(t){var e;this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.length=0,this.data=(null!=(e=t.initialValues)?e.slice(0):void 0)||[],this._heapify()}return t.prototype._heapify=function(){var t,e,r;if(this.data.length>0)for(t=e=1,r=this.data.length;1<=r?e<r:e>r;t=1<=r?++e:--e)this._bubbleUp(t)},t.prototype.queue=function(t){this.data.push(t),this._bubbleUp(this.data.length-1)},t.prototype.dequeue=function(){var t,e;return e=this.data[0],t=this.data.pop(),this.data.length>0&&(this.data[0]=t,this._bubbleDown(0)),e},t.prototype.peek=function(){return this.data[0]},t.prototype.clear=function(){this.length=0,this.data.length=0},t.prototype._bubbleUp=function(t){for(var e,r;t>0&&(e=t-1>>>1,this.comparator(this.data[t],this.data[e])<0);)r=this.data[e],this.data[e]=this.data[t],this.data[t]=r,t=e},t.prototype._bubbleDown=function(t){var e,r,n,i,o;for(e=this.data.length-1;i=1+(r=1+(t<<1)),n=t,r<=e&&this.comparator(this.data[r],this.data[n])<0&&(n=r),i<=e&&this.comparator(this.data[i],this.data[n])<0&&(n=i),n!==t;)o=this.data[n],this.data[n]=this.data[t],this.data[t]=o,t=n},t}()},{}]},{},[1])(1)},2229:function(t){t.exports=function(){"use strict";function t(t){return"string"==typeof t||t instanceof String}var e=Number.isFinite||window.isFinite;function r(t){return e(t)}function n(t){return t}function i(t,e){if(e.length!==t.length)return!1;for(var r=0;r<t.length;r++){if(e[r].compareArray&&!e[r].compareArray(t[r]))return!1;if(e[r]!==t[r])return!1}return!0}function o(t,e){Object.keys(e).forEach((function(r){t[r]=e[r]}))}function s(){for(var t=1,e=0,r=0;r<arguments.length;r++){var n=arguments[r];e+=l(n),t*=n}return 0!==e?h(t,e):t}function a(t,e){if(0===e)throw new Error("Divide by zero");var r=Math.pow(10,l(e));return s(t,r/(r*e))}function h(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)}function l(t){if(!isFinite(t))return 0;for(var e=0;t%1!=0;)t*=10,e++;return e}function u(){var t;if(!this)return t=Object.create(u.prototype),u.apply(t,arguments),t;t=Error.apply(this,arguments),this.name="QtyError",this.message=t.message,this.stack=t.stack}function c(t,e){throw new u("Incompatible units: "+t+" and "+e)}u.prototype=Object.create(Error.prototype,{constructor:{value:u}});var f={"<googol>":[["googol"],1e100,"prefix"],"<kibi>":[["Ki","Kibi","kibi"],Math.pow(2,10),"prefix"],"<mebi>":[["Mi","Mebi","mebi"],Math.pow(2,20),"prefix"],"<gibi>":[["Gi","Gibi","gibi"],Math.pow(2,30),"prefix"],"<tebi>":[["Ti","Tebi","tebi"],Math.pow(2,40),"prefix"],"<pebi>":[["Pi","Pebi","pebi"],Math.pow(2,50),"prefix"],"<exi>":[["Ei","Exi","exi"],Math.pow(2,60),"prefix"],"<zebi>":[["Zi","Zebi","zebi"],Math.pow(2,70),"prefix"],"<yebi>":[["Yi","Yebi","yebi"],Math.pow(2,80),"prefix"],"<yotta>":[["Y","Yotta","yotta"],1e24,"prefix"],"<zetta>":[["Z","Zetta","zetta"],1e21,"prefix"],"<exa>":[["E","Exa","exa"],1e18,"prefix"],"<peta>":[["P","Peta","peta"],1e15,"prefix"],"<tera>":[["T","Tera","tera"],1e12,"prefix"],"<giga>":[["G","Giga","giga"],1e9,"prefix"],"<mega>":[["M","Mega","mega"],1e6,"prefix"],"<kilo>":[["k","kilo"],1e3,"prefix"],"<hecto>":[["h","Hecto","hecto"],100,"prefix"],"<deca>":[["da","Deca","deca","deka"],10,"prefix"],"<deci>":[["d","Deci","deci"],.1,"prefix"],"<centi>":[["c","Centi","centi"],.01,"prefix"],"<milli>":[["m","Milli","milli"],.001,"prefix"],"<micro>":[["u","μ","µ","Micro","mc","micro"],1e-6,"prefix"],"<nano>":[["n","Nano","nano"],1e-9,"prefix"],"<pico>":[["p","Pico","pico"],1e-12,"prefix"],"<femto>":[["f","Femto","femto"],1e-15,"prefix"],"<atto>":[["a","Atto","atto"],1e-18,"prefix"],"<zepto>":[["z","Zepto","zepto"],1e-21,"prefix"],"<yocto>":[["y","Yocto","yocto"],1e-24,"prefix"],"<1>":[["1","<1>"],1,""],"<meter>":[["m","meter","meters","metre","metres"],1,"length",["<meter>"]],"<inch>":[["in","inch","inches",'"'],.0254,"length",["<meter>"]],"<foot>":[["ft","foot","feet","'"],.3048,"length",["<meter>"]],"<yard>":[["yd","yard","yards"],.9144,"length",["<meter>"]],"<mile>":[["mi","mile","miles"],1609.344,"length",["<meter>"]],"<naut-mile>":[["nmi","naut-mile"],1852,"length",["<meter>"]],"<league>":[["league","leagues"],4828,"length",["<meter>"]],"<furlong>":[["furlong","furlongs"],201.2,"length",["<meter>"]],"<rod>":[["rd","rod","rods"],5.029,"length",["<meter>"]],"<mil>":[["mil","mils"],254e-7,"length",["<meter>"]],"<angstrom>":[["ang","angstrom","angstroms"],1e-10,"length",["<meter>"]],"<fathom>":[["fathom","fathoms"],1.829,"length",["<meter>"]],"<pica>":[["pica","picas"],.00423333333,"length",["<meter>"]],"<point>":[["pt","point","points"],.000352777778,"length",["<meter>"]],"<redshift>":[["z","red-shift","redshift"],1302773e20,"length",["<meter>"]],"<AU>":[["AU","astronomical-unit"],1495979e5,"length",["<meter>"]],"<light-second>":[["ls","light-second"],299792500,"length",["<meter>"]],"<light-minute>":[["lmin","light-minute"],1798755e4,"length",["<meter>"]],"<light-year>":[["ly","light-year"],9460528e9,"length",["<meter>"]],"<parsec>":[["pc","parsec","parsecs"],3085678e10,"length",["<meter>"]],"<datamile>":[["DM","datamile"],1828.8,"length",["<meter>"]],"<kilogram>":[["kg","kilogram","kilograms"],1,"mass",["<kilogram>"]],"<AMU>":[["u","AMU","amu"],1660538921e-36,"mass",["<kilogram>"]],"<dalton>":[["Da","Dalton","Daltons","dalton","daltons"],1660538921e-36,"mass",["<kilogram>"]],"<slug>":[["slug","slugs"],14.5939029,"mass",["<kilogram>"]],"<short-ton>":[["tn","ton","short-ton"],907.18474,"mass",["<kilogram>"]],"<metric-ton>":[["tonne","metric-ton"],1e3,"mass",["<kilogram>"]],"<carat>":[["ct","carat","carats"],2e-4,"mass",["<kilogram>"]],"<pound>":[["lbs","lb","pound","pounds","#"],.45359237,"mass",["<kilogram>"]],"<ounce>":[["oz","ounce","ounces"],.0283495231,"mass",["<kilogram>"]],"<gram>":[["g","gram","grams","gramme","grammes"],.001,"mass",["<kilogram>"]],"<grain>":[["grain","grains","gr"],6479891e-11,"mass",["<kilogram>"]],"<dram>":[["dram","drams","dr"],.0017718452,"mass",["<kilogram>"]],"<stone>":[["stone","stones","st"],6.35029318,"mass",["<kilogram>"]],"<hectare>":[["hectare"],1e4,"area",["<meter>","<meter>"]],"<acre>":[["acre","acres"],4046.85642,"area",["<meter>","<meter>"]],"<sqft>":[["sqft"],1,"area",["<foot>","<foot>"]],"<liter>":[["l","L","liter","liters","litre","litres"],.001,"volume",["<meter>","<meter>","<meter>"]],"<gallon>":[["gal","gallon","gallons"],.0037854118,"volume",["<meter>","<meter>","<meter>"]],"<gallon-imp>":[["galimp","gallon-imp","gallons-imp"],.00454609,"volume",["<meter>","<meter>","<meter>"]],"<quart>":[["qt","quart","quarts"],.00094635295,"volume",["<meter>","<meter>","<meter>"]],"<pint>":[["pt","pint","pints"],.000473176475,"volume",["<meter>","<meter>","<meter>"]],"<pint-imp>":[["ptimp","pint-imp","pints-imp"],.00056826125,"volume",["<meter>","<meter>","<meter>"]],"<cup>":[["cu","cup","cups"],.000236588238,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce>":[["floz","fluid-ounce","fluid-ounces"],295735297e-13,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce-imp>":[["flozimp","floz-imp","fluid-ounce-imp","fluid-ounces-imp"],284130625e-13,"volume",["<meter>","<meter>","<meter>"]],"<tablespoon>":[["tb","tbsp","tbs","tablespoon","tablespoons"],147867648e-13,"volume",["<meter>","<meter>","<meter>"]],"<teaspoon>":[["tsp","teaspoon","teaspoons"],492892161e-14,"volume",["<meter>","<meter>","<meter>"]],"<bushel>":[["bu","bsh","bushel","bushels"],.035239072,"volume",["<meter>","<meter>","<meter>"]],"<oilbarrel>":[["bbl","oilbarrel","oilbarrels","oil-barrel","oil-barrels"],.158987294928,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel>":[["bl","bl-us","beerbarrel","beerbarrels","beer-barrel","beer-barrels"],.1173477658,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel-imp>":[["blimp","bl-imp","beerbarrel-imp","beerbarrels-imp","beer-barrel-imp","beer-barrels-imp"],.16365924,"volume",["<meter>","<meter>","<meter>"]],"<kph>":[["kph"],.277777778,"speed",["<meter>"],["<second>"]],"<mph>":[["mph"],.44704,"speed",["<meter>"],["<second>"]],"<knot>":[["kt","kn","kts","knot","knots"],.514444444,"speed",["<meter>"],["<second>"]],"<fps>":[["fps"],.3048,"speed",["<meter>"],["<second>"]],"<gee>":[["gee"],9.80665,"acceleration",["<meter>"],["<second>","<second>"]],"<Gal>":[["Gal"],.01,"acceleration",["<meter>"],["<second>","<second>"]],"<kelvin>":[["degK","kelvin"],1,"temperature",["<kelvin>"]],"<celsius>":[["degC","celsius","celsius","centigrade"],1,"temperature",["<kelvin>"]],"<fahrenheit>":[["degF","fahrenheit"],5/9,"temperature",["<kelvin>"]],"<rankine>":[["degR","rankine"],5/9,"temperature",["<kelvin>"]],"<temp-K>":[["tempK","temp-K"],1,"temperature",["<temp-K>"]],"<temp-C>":[["tempC","temp-C"],1,"temperature",["<temp-K>"]],"<temp-F>":[["tempF","temp-F"],5/9,"temperature",["<temp-K>"]],"<temp-R>":[["tempR","temp-R"],5/9,"temperature",["<temp-K>"]],"<second>":[["s","sec","secs","second","seconds"],1,"time",["<second>"]],"<minute>":[["min","mins","minute","minutes"],60,"time",["<second>"]],"<hour>":[["h","hr","hrs","hour","hours"],3600,"time",["<second>"]],"<day>":[["d","day","days"],86400,"time",["<second>"]],"<week>":[["wk","week","weeks"],604800,"time",["<second>"]],"<fortnight>":[["fortnight","fortnights"],1209600,"time",["<second>"]],"<year>":[["y","yr","year","years","annum"],31556926,"time",["<second>"]],"<decade>":[["decade","decades"],315569260,"time",["<second>"]],"<century>":[["century","centuries"],3155692600,"time",["<second>"]],"<pascal>":[["Pa","pascal","Pascal"],1,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<bar>":[["bar","bars"],1e5,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<mmHg>":[["mmHg"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inHg>":[["inHg"],3386.3881472,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<torr>":[["torr"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<atm>":[["atm","ATM","atmosphere","atmospheres"],101325,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<psi>":[["psi"],6894.76,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<cmh2o>":[["cmH2O","cmh2o"],98.0638,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inh2o>":[["inH2O","inh2o"],249.082052,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<poise>":[["P","poise"],.1,"viscosity",["<kilogram>"],["<meter>","<second>"]],"<stokes>":[["St","stokes"],1e-4,"viscosity",["<meter>","<meter>"],["<second>"]],"<mole>":[["mol","mole"],1,"substance",["<mole>"]],"<molar>":[["M","molar"],1e3,"concentration",["<mole>"],["<meter>","<meter>","<meter>"]],"<wtpercent>":[["wt%","wtpercent"],10,"concentration",["<kilogram>"],["<meter>","<meter>","<meter>"]],"<katal>":[["kat","katal","Katal"],1,"activity",["<mole>"],["<second>"]],"<unit>":[["U","enzUnit","unit"],16667e-19,"activity",["<mole>"],["<second>"]],"<farad>":[["F","farad","Farad"],1,"capacitance",["<second>","<second>","<second>","<second>","<ampere>","<ampere>"],["<meter>","<meter>","<kilogram>"]],"<coulomb>":[["C","coulomb","Coulomb"],1,"charge",["<ampere>","<second>"]],"<Ah>":[["Ah"],3600,"charge",["<ampere>","<second>"]],"<ampere>":[["A","Ampere","ampere","amp","amps"],1,"current",["<ampere>"]],"<siemens>":[["S","Siemens","siemens"],1,"conductance",["<second>","<second>","<second>","<ampere>","<ampere>"],["<kilogram>","<meter>","<meter>"]],"<henry>":[["H","Henry","henry"],1,"inductance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>","<ampere>"]],"<volt>":[["V","Volt","volt","volts"],1,"potential",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>"]],"<ohm>":[["Ohm","ohm","Ω","Ω"],1,"resistance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>","<ampere>"]],"<weber>":[["Wb","weber","webers"],1,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<tesla>":[["T","tesla","teslas"],1,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<gauss>":[["G","gauss"],1e-4,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<maxwell>":[["Mx","maxwell","maxwells"],1e-8,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<oersted>":[["Oe","oersted","oersteds"],250/Math.PI,"magnetism",["<ampere>"],["<meter>"]],"<joule>":[["J","joule","Joule","joules"],1,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<erg>":[["erg","ergs"],1e-7,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<btu>":[["BTU","btu","BTUs"],1055.056,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<calorie>":[["cal","calorie","calories"],4.184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Calorie>":[["Cal","Calorie","Calories"],4184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<therm-US>":[["th","therm","therms","Therm","therm-US"],105480400,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Wh>":[["Wh"],3600,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<newton>":[["N","Newton","newton"],1,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<dyne>":[["dyn","dyne"],1e-5,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<pound-force>":[["lbf","pound-force"],4.448222,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<hertz>":[["Hz","hertz","Hertz"],1,"frequency",["<1>"],["<second>"]],"<radian>":[["rad","radian","radians"],1,"angle",["<radian>"]],"<degree>":[["deg","degree","degrees"],Math.PI/180,"angle",["<radian>"]],"<gradian>":[["gon","grad","gradian","grads"],Math.PI/200,"angle",["<radian>"]],"<steradian>":[["sr","steradian","steradians"],1,"solid_angle",["<steradian>"]],"<rotation>":[["rotation"],2*Math.PI,"angle",["<radian>"]],"<rpm>":[["rpm"],2*Math.PI/60,"angular_velocity",["<radian>"],["<second>"]],"<byte>":[["B","byte","bytes"],1,"information",["<byte>"]],"<bit>":[["b","bit","bits"],.125,"information",["<byte>"]],"<Bps>":[["Bps"],1,"information_rate",["<byte>"],["<second>"]],"<bps>":[["bps"],.125,"information_rate",["<byte>"],["<second>"]],"<dollar>":[["USD","dollar"],1,"currency",["<dollar>"]],"<cents>":[["cents"],.01,"currency",["<dollar>"]],"<candela>":[["cd","candela"],1,"luminosity",["<candela>"]],"<lumen>":[["lm","lumen"],1,"luminous_power",["<candela>","<steradian>"]],"<lux>":[["lux"],1,"illuminance",["<candela>","<steradian>"],["<meter>","<meter>"]],"<watt>":[["W","watt","watts"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere>":[["VA","volt-ampere"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere-reactive>":[["var","Var","VAr","VAR","volt-ampere-reactive"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<horsepower>":[["hp","horsepower"],745.699872,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<gray>":[["Gy","gray","grays"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<roentgen>":[["R","roentgen"],.00933,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<sievert>":[["Sv","sievert","sieverts"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<becquerel>":[["Bq","becquerel","becquerels"],1,"radiation",["<1>"],["<second>"]],"<curie>":[["Ci","curie","curies"],37e9,"radiation",["<1>"],["<second>"]],"<cpm>":[["cpm"],1/60,"rate",["<count>"],["<second>"]],"<dpm>":[["dpm"],1/60,"rate",["<count>"],["<second>"]],"<bpm>":[["bpm"],1/60,"rate",["<count>"],["<second>"]],"<dot>":[["dot","dots"],1,"resolution",["<each>"]],"<pixel>":[["pixel","px"],1,"resolution",["<each>"]],"<ppi>":[["ppi"],1,"resolution",["<pixel>"],["<inch>"]],"<dpi>":[["dpi"],1,"typography",["<dot>"],["<inch>"]],"<cell>":[["cells","cell"],1,"counting",["<each>"]],"<each>":[["each"],1,"counting",["<each>"]],"<count>":[["count"],1,"counting",["<each>"]],"<base-pair>":[["bp","base-pair"],1,"counting",["<each>"]],"<nucleotide>":[["nt","nucleotide"],1,"counting",["<each>"]],"<molecule>":[["molecule","molecules"],1,"counting",["<1>"]],"<dozen>":[["doz","dz","dozen"],12,"prefix_only",["<each>"]],"<percent>":[["%","percent"],.01,"prefix_only",["<1>"]],"<ppm>":[["ppm"],1e-6,"prefix_only",["<1>"]],"<ppt>":[["ppt"],1e-9,"prefix_only",["<1>"]],"<gross>":[["gr","gross"],144,"prefix_only",["<dozen>","<dozen>"]],"<decibel>":[["dB","decibel","decibels"],1,"logarithmic",["<decibel>"]]},d=["<meter>","<kilogram>","<second>","<mole>","<ampere>","<radian>","<kelvin>","<temp-K>","<byte>","<dollar>","<candela>","<each>","<steradian>","<decibel>"],p="<1>",m=[p];function g(t,e){var n=e[1],i=e[3]||[],o=e[4]||[];if(!r(n))throw new u(t+": Invalid unit definition. 'scalar' must be a number");i.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'numerator' is not recognized")})),o.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'denominator' is not recognized")}))}var w={},b={},y={},v={},x={};for(var _ in f)if(f.hasOwnProperty(_)){var k=f[_];if("prefix"===k[2]){w[_]=k[1];for(var A=0;A<k[0].length;A++)b[k[0][A]]=_}else{g(_,k),y[_]={scalar:k[1],numerator:k[3],denominator:k[4]};for(var M=0;M<k[0].length;M++)v[k[0][M]]=_}x[_]=k[0][0]}var E=["length","time","temperature","mass","current","substance","luminosity","currency","information","angle"];function S(){if(this.signature)return this.signature;for(var t=C.call(this),e=0;e<t.length;e++)t[e]*=Math.pow(20,e);return t.reduce((function(t,e){return t+e}),0)}function C(){if(!this.isBase())return C.call(this.toBase());for(var t,e,r=new Array(E.length),n=0;n<r.length;n++)r[n]=0;for(var i=0;i<this.numerator.length;i++)(t=f[this.numerator[i]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]+1);for(var o=0;o<this.denominator.length;o++)(t=f[this.denominator[o]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]-1);return r}var I=new RegExp("^([+-]?\\s*(?:(?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))(?:[Ee][+-]?\\d+)?)?\\s*([^/]*)(?:/(.+))?$"),P=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?(-?[01234](?![a-zA-Z]))"),D=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?([01234](?![a-zA-Z]))");function T(e){t(e)||(e=e.toString()),e=e.trim();var r=I.exec(e);if(!r)throw new u(e+": Quantity not recognized");var n=r[1];n?(n=n.replace(/\s/g,""),this.scalar=parseFloat(n)):this.scalar=1;for(var i,o,s,a=r[2],h=r[3];r=P.exec(a);){if(i=parseFloat(r[2]),isNaN(i))throw new u("Unit exponent is not a number");if(0===i&&!B.test(r[1]))throw new u("Unit not recognized");o=r[1]+" ",s="";for(var l=0;l<Math.abs(i);l++)s+=o;i>=0?a=a.replace(r[0],s):(h=h?h+s:s,a=a.replace(r[0],""))}for(;r=D.exec(h);){if(i=parseFloat(r[2]),isNaN(i))throw new u("Unit exponent is not a number");if(0===i&&!B.test(r[1]))throw new u("Unit not recognized");o=r[1]+" ",s="";for(var c=0;c<i;c++)s+=o;h=h.replace(r[0],s)}a&&(this.numerator=L(a.trim())),h&&(this.denominator=L(h.trim()))}var R="("+Object.keys(b).sort((function(t,e){return e.length-t.length})).join("|")+")??("+Object.keys(v).sort((function(t,e){return e.length-t.length})).join("|")+")(?:\\b|$)",B=new RegExp("^\\s*("+R+"[\\s\\*]*)+$"),U=new RegExp(R,"g"),O={};function L(t){var e=O[t];if(e)return e;var r,n=[];if(!B.test(t))throw new u("Unit not recognized");for(;r=U.exec(t);)n.push(r.slice(1));return n=(n=(n=n.map((function(t){return b[t[0]]?[b[t[0]],v[t[1]]]:[v[t[1]]]}))).reduce((function(t,e){return t.concat(e)}),[])).filter((function(t){return t})),O[t]=n,n}function F(t){return t instanceof N}function N(t,e){if(z.apply(null,arguments),!F(this))return new N(t,e);if(this.scalar=null,this.baseScalar=null,this.signature=null,this._conversionCache={},this.numerator=m,this.denominator=m,j(t)?(this.scalar=t.scalar,this.numerator=t.numerator&&0!==t.numerator.length?t.numerator:m,this.denominator=t.denominator&&0!==t.denominator.length?t.denominator:m):e?(T.call(this,e),this.scalar=t):T.call(this,t),this.denominator.join("*").indexOf("temp")>=0)throw new u("Cannot divide with temperatures");if(this.numerator.join("*").indexOf("temp")>=0){if(this.numerator.length>1)throw new u("Cannot multiply by temperatures");if(!i(this.denominator,m))throw new u("Cannot divide with temperatures")}if(this.initValue=t,V.call(this),this.isTemperature()&&this.baseScalar<0)throw new u("Temperatures must not be less than absolute zero")}function z(e,n){if(n){if(!r(e)||!t(n))throw new u("Only number accepted as initialization value when units are explicitly provided")}else if(!(t(e)||r(e)||F(e)||j(e)))throw new u("Only string, number or quantity accepted as single initialization value")}function j(t){return t&&"object"==typeof t&&t.hasOwnProperty("scalar")}function V(){if(this.baseScalar)return this.baseScalar;if(this.isBase())this.baseScalar=this.scalar,this.signature=S.call(this);else{var t=this.toBase();this.baseScalar=t.scalar,this.signature=t.signature}}N.prototype={constructor:N};var Y={"-312078":"elastance","-312058":"resistance","-312038":"inductance","-152058":"potential","-152040":"magnetism","-152038":"magnetism","-7997":"specific_volume","-79":"snap","-59":"jolt","-39":"acceleration","-38":"radiation","-20":"frequency","-19":"speed","-18":"viscosity","-17":"volumetric_flow","-1":"wavenumber",0:"unitless",1:"length",2:"area",3:"volume",20:"time",400:"temperature",7941:"yank",7942:"power",7959:"pressure",7961:"force",7962:"energy",7979:"viscosity",7981:"momentum",7982:"angular_momentum",7997:"density",7998:"area_density",8e3:"mass",152020:"radiation_exposure",159999:"magnetism",16e4:"current",160020:"charge",312058:"conductance",312078:"capacitance",3199980:"activity",3199997:"molar_concentration",32e5:"substance",63999998:"illuminance",64e6:"luminous_power",128e7:"currency",25599999980:"information_rate",256e8:"information",511999999980:"angular_velocity",512e9:"angle"};function X(t,e){var r=e.to(W(t.units()));return N({scalar:t.scalar+r.scalar,numerator:t.numerator,denominator:t.denominator})}function W(t){if("tempK"===t)return"degK";if("tempC"===t)return"degC";if("tempF"===t)return"degF";if("tempR"===t)return"degR";throw new u("Unknown type for temp conversion from: "+t)}function q(t,e){var r,n=function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar;else if("tempF"===r)e=5*t.scalar/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<kelvin>"],denominator:m})}(t),i=e.units();if("degK"===i)r=n.scalar;else if("degC"===i)r=n.scalar;else if("degF"===i)r=9*n.scalar/5;else{if("degR"!==i)throw new u("Unknown type for degree conversion to: "+i);r=9*n.scalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}N.prototype.kind=function(){return Y[this.signature.toString()]},o(N.prototype,{isDegrees:function(){return(null===this.signature||400===this.signature)&&1===this.numerator.length&&i(this.denominator,m)&&(this.numerator[0].match(/<temp-[CFRK]>/)||this.numerator[0].match(/<(kelvin|celsius|rankine|fahrenheit)>/))},isTemperature:function(){return this.isDegrees()&&this.numerator[0].match(/<temp-[CFRK]>/)}}),o(N.prototype,{to:function(e){var r,n;return null==e?this:t(e)?(r=this._conversionCache[e])?r:(n=N(e)).units()===this.units()?this:(this.isCompatible(n)?n=n.isTemperature()?function(t,e){var r,n=e.units();if("tempK"===n)r=t.baseScalar;else if("tempC"===n)r=t.baseScalar-273.15;else if("tempF"===n)r=9*t.baseScalar/5-459.67;else{if("tempR"!==n)throw new u("Unknown type for temp conversion to: "+n);r=9*t.baseScalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}(this,n):n.isDegrees()?q(this,n):N({scalar:a(this.baseScalar,n.baseScalar),numerator:n.numerator,denominator:n.denominator}):this.isInverse(n)?n=this.inverse().to(e):c(this.units(),n.units()),this._conversionCache[e]=n,n):this.to(e.units())},toBase:function(){if(this.isBase())return this;if(this.isTemperature())return function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar+273.15;else if("tempF"===r)e=5*(t.scalar+459.67)/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<temp-K>"],denominator:m})}(this);var t=Z[this.units()];return t||(t=function(t,e){for(var r,n=[],i=[],o=1,a=0;a<t.length;a++)r=t[a],w[r]?o=s(o,w[r]):y[r]&&(o*=y[r].scalar,y[r].numerator&&n.push(y[r].numerator),y[r].denominator&&i.push(y[r].denominator));for(var h=0;h<e.length;h++)r=e[h],w[r]?o/=w[r]:y[r]&&(o/=y[r].scalar,y[r].numerator&&i.push(y[r].numerator),y[r].denominator&&n.push(y[r].denominator));return N({scalar:o,numerator:n=n.reduce((function(t,e){return t.concat(e)}),[]),denominator:i=i.reduce((function(t,e){return t.concat(e)}),[])})}(this.numerator,this.denominator),Z[this.units()]=t),t.mul(this.scalar)},toFloat:function(){if(this.isUnitless())return this.scalar;throw new u("Can't convert to Float unless unitless.  Use Unit#scalar")},toPrec:function(e){if(t(e)&&(e=N(e)),r(e)&&(e=N(e+" "+this.units())),this.isUnitless()?e.isUnitless()||c(this.units(),e.units()):e=e.to(this.units()),0===e.scalar)throw new u("Divide by zero");return N(s(Math.round(this.scalar/e.scalar),e.scalar)+this.units())}});var Z={};function G(t,e,r,n){function i(t){return t!==p}t=t.filter(i),r=r.filter(i),e=e.filter(i),n=n.filter(i);var o={};function s(t,e){for(var r,n,i,s=0;s<t.length;s++)if(w[t[s]]?(r=t[s+1],n=t[s],i=w[n],s++):(r=t[s],n=null,i=1),r&&r!==p)if(o[r]){o[r][0]+=e;var h=o[r][2]?w[o[r][2]]:1;o[r][1===e?3:4]*=a(i,h)}else o[r]=[e,r,n,1,1]}s(t,1),s(e,-1),s(r,1),s(n,-1);var h=[],l=[],u=1;for(var c in o)if(o.hasOwnProperty(c)){var f,d=o[c];if(d[0]>0)for(f=0;f<d[0];f++)h.push(null===d[2]?d[1]:[d[2],d[1]]);else if(d[0]<0)for(f=0;f<-d[0];f++)l.push(null===d[2]?d[1]:[d[2],d[1]]);u*=a(d[3],d[4])}return 0===h.length&&(h=m),0===l.length&&(l=m),[h=h.reduce((function(t,e){return t.concat(e)}),[]),l=l.reduce((function(t,e){return t.concat(e)}),[]),u]}function $(){}N.parse=function(e){if(!t(e))throw new u("Argument should be a string");try{return this(e)}catch(t){return null}},N.getUnits=function(t){var e,r=[],n=Object.keys(f);if(void 0===t)for(e=0;e<n.length;e++)-1===["","prefix"].indexOf(f[n[e]][2])&&r.push(n[e].substr(1,n[e].length-2));else{if(-1===this.getKinds().indexOf(t))throw new u("Kind not recognized");for(e=0;e<n.length;e++)f[n[e]][2]===t&&r.push(n[e].substr(1,n[e].length-2))}return r.sort((function(t,e){return t.toLowerCase()<e.toLowerCase()?-1:t.toLowerCase()>e.toLowerCase()?1:0}))},N.getAliases=function(t){if(!v[t])throw new u("Unit not recognized");return f[v[t]][0]},N.mulSafe=s,N.divSafe=a,N.getKinds=function(){return t=Object.keys(Y).map((function(t){return Y[t]})),e={},t.filter((function(t){return!e.hasOwnProperty(t)&&(e[t]=!0)}));var t,e},N.swiftConverter=function(t,e){var r,i=N(t),o=N(e);return i.eq(o)?n:(r=i.isTemperature()?function(t){return i.mul(t).to(o).scalar}:function(t){return t*i.baseScalar/o.baseScalar},function(t){var e,n,i;if(Array.isArray(t)){for(n=t.length,i=[],e=0;e<n;e++)i.push(r(t[e]));return i}return r(t)})},N.Error=u,o(N.prototype,{add:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())throw new u("Cannot add two temperatures");return this.isTemperature()?X(this,e):e.isTemperature()?X(e,this):N({scalar:this.scalar+e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},sub:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())return n=e,i=(r=this).units(),o=n.to(i),s=N(W(i)),N({scalar:r.scalar-o.scalar,numerator:s.numerator,denominator:s.denominator});var r,n,i,o,s,a,h;if(this.isTemperature())return a=this,h=e.to(W(a.units())),N({scalar:a.scalar-h.scalar,numerator:a.numerator,denominator:a.denominator});if(e.isTemperature())throw new u("Cannot subtract a temperature from a differential degree unit");return N({scalar:this.scalar-e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},mul:function(e){if(r(e))return N({scalar:s(this.scalar,e),numerator:this.numerator,denominator:this.denominator});if(t(e)&&(e=N(e)),(this.isTemperature()||e.isTemperature())&&!this.isUnitless()&&!e.isUnitless())throw new u("Cannot multiply by temperatures");var n=this,i=e;n.isCompatible(i)&&400!==n.signature&&(i=i.to(n));var o=G(n.numerator,n.denominator,i.numerator,i.denominator);return N({scalar:s(n.scalar,i.scalar,o[2]),numerator:o[0],denominator:o[1]})},div:function(e){if(r(e)){if(0===e)throw new u("Divide by zero");return N({scalar:this.scalar/e,numerator:this.numerator,denominator:this.denominator})}if(t(e)&&(e=N(e)),0===e.scalar)throw new u("Divide by zero");if(e.isTemperature())throw new u("Cannot divide with temperatures");if(this.isTemperature()&&!e.isUnitless())throw new u("Cannot divide with temperatures");var n=this,i=e;n.isCompatible(i)&&400!==n.signature&&(i=i.to(n));var o=G(n.numerator,n.denominator,i.denominator,i.numerator);return N({scalar:s(n.scalar,o[2])/i.scalar,numerator:o[0],denominator:o[1]})},inverse:function(){if(this.isTemperature())throw new u("Cannot divide with temperatures");if(0===this.scalar)throw new u("Divide by zero");return N({scalar:1/this.scalar,numerator:this.denominator,denominator:this.numerator})}}),o(N.prototype,{eq:function(t){return 0===this.compareTo(t)},lt:function(t){return-1===this.compareTo(t)},lte:function(t){return this.eq(t)||this.lt(t)},gt:function(t){return 1===this.compareTo(t)},gte:function(t){return this.eq(t)||this.gt(t)},compareTo:function(e){return t(e)?this.compareTo(N(e)):(this.isCompatible(e)||c(this.units(),e.units()),this.baseScalar<e.baseScalar?-1:this.baseScalar===e.baseScalar?0:this.baseScalar>e.baseScalar?1:void 0)},same:function(t){return this.scalar===t.scalar&&this.units()===t.units()}}),o(N.prototype,{isUnitless:function(){return[this.numerator,this.denominator].every((function(t){return i(t,m)}))},isCompatible:function(e){return t(e)?this.isCompatible(N(e)):!!F(e)&&void 0!==e.signature&&this.signature===e.signature},isInverse:function(t){return this.inverse().isCompatible(t)},isBase:function(){return void 0!==this._isBase?this._isBase:this.isDegrees()&&this.numerator[0].match(/<(kelvin|temp-K)>/)?(this._isBase=!0,this._isBase):(this.numerator.concat(this.denominator).forEach((function(t){t!==p&&-1===d.indexOf(t)&&(this._isBase=!1)}),this),!1===this._isBase||(this._isBase=!0),this._isBase)}}),$.prototype.get=function(t){return arguments.length>1&&(t=Array.apply(null,arguments)),t.reduce((function(e,r,n){if(e){var i=e[r];return n===t.length-1?i?i.data:void 0:i}}),this)},$.prototype.set=function(t,e){return arguments.length>2&&(t=Array.prototype.slice.call(arguments,0,-1),e=arguments[arguments.length-1]),t.reduce((function(r,n,i){var o=r[n];return void 0===o&&(o=r[n]={}),i===t.length-1?(o.data=e,e):o}),this)},N.formatter=function(t,e){return(t+" "+e).trim()},o(N.prototype,{units:function(){if(void 0!==this._units)return this._units;var t=i(this.numerator,m),e=i(this.denominator,m);if(t&&e)return this._units="",this._units;var r=Q(this.numerator),n=Q(this.denominator);return this._units=r+(e?"":"/"+n),this._units},toString:function(e,n){var i;if(r(e))i=this.units(),n=e;else if(t(e))i=e;else if(F(e))return this.toPrec(e).toString(n);var o=this.to(i);return((void 0!==n?h(o.scalar,n):o.scalar)+" "+o.units()).trim()},format:function(t,e){1===arguments.length&&"function"==typeof t&&(e=t,t=void 0),e=e||N.formatter;var r=this.to(t);return e.call(this,r.scalar,r.units())}});var H=new $;function Q(t){var e=H.get(t);return e||(e=i(t,m)?"1":function(t){return t.reduce((function(t,e){var r=t[e];return r||t.push(r=t[e]=[e,0]),r[1]++,t}),[]).map((function(t){return t[0]+(t[1]>1?t[1]:"")}))}(function(t){for(var e,r,n=[],i=0;i<t.length;i++)e=t[i],r=t[i+1],w[e]?(n.push(x[e]+x[r]),i++):n.push(x[e]);return n}(t)).join("*"),H.set(t,e),e)}return N.version="1.7.6",N}()},5520:t=>{!function(){function e(t){for(var e=0,i=t.length-1,o=void 0,s=void 0,a=void 0,h=n(e,i);;){if(i<=e)return t[h];if(i==e+1)return t[e]>t[i]&&r(t,e,i),t[h];for(t[o=n(e,i)]>t[i]&&r(t,o,i),t[e]>t[i]&&r(t,e,i),t[o]>t[e]&&r(t,o,e),r(t,o,e+1),s=e+1,a=i;;){do{s++}while(t[e]>t[s]);do{a--}while(t[a]>t[e]);if(a<s)break;r(t,s,a)}r(t,e,a),a<=h&&(e=s),a>=h&&(i=a-1)}}var r=function(t,e,r){var n;return n=[t[r],t[e]],t[e]=n[0],t[r]=n[1],n},n=function(t,e){return~~((t+e)/2)};t.exports?t.exports=e:window.median=e}()},530:t=>{"use strict";function e(t){this.value=t,this.parent=null,this.rank=0}t.exports=class{constructor(){this.nodes=new Map}add(t){var r=this.nodes.get(t);return r||(r=new e(t),this.nodes.set(t,r)),r}union(t,e){const r=this.find(t),n=this.find(e);r!==n&&(r.rank<n.rank?r.parent=n:r.rank>n.rank?n.parent=r:(n.parent=r,r.rank++))}find(t){for(var e=t;null!==e.parent;)e=e.parent;for(var r=t;null!==r.parent;){var n=r;r=r.parent,n.parent=e}return e}connected(t,e){return this.find(t)===this.find(e)}}},4953:(t,e,r)=>{"use strict";function n(t,e){let r=0;for(let n=0;n<t.length;n++)r+=(t[n]-e[n])*(t[n]-e[n]);return r}function i(t,e){return Math.sqrt(n(t,e))}r.r(e),r.d(e,{squaredEuclidean:()=>n,euclidean:()=>i})},7345:(t,e,r)=>{"use strict";var n=r(5571),i={DEBUG:!1,ifft2DArray:function(t,e,r){var i=new Array(e*r),o=e/2,s=2*(r-1);n.init(o);for(var a={re:new Array(o),im:new Array(o)},h=0;h<r;h++){for(var l=o-1;l>=0;l--)a.re[l]=t[2*l*r+h],a.im[l]=t[(2*l+1)*r+h];for(n.bt(a.re,a.im),l=o-1;l>=0;l--)i[2*l*r+h]=a.re[l],i[(2*l+1)*r+h]=a.im[l]}var u=new Array(o*s);n.init(s);var c={re:new Array(s),im:new Array(s)},f=s*o;for(l=0;l<e;l+=2){for(c.re[0]=i[l*r],c.im[0]=i[(l+1)*r],h=1;h<r;h++)c.re[h]=i[l*r+h],c.im[h]=i[(l+1)*r+h],c.re[s-h]=i[l*r+h],c.im[s-h]=-i[(l+1)*r+h];n.bt(c.re,c.im);var d=l/2*s;for(h=s-1;h>=0;h--)u[d+h]=c.re[h]/f}return u},fft2DArray:function(t,e,r,i){Object.assign({},{inplace:!0});var o=r/2+1,s=2*e,a=new Array(s*o);n.init(r);for(var h,l,u,c,f,d={re:new Array(r),im:new Array(r)},p={re:new Array(r),im:new Array(r)},m={re:new Array(r),im:new Array(r)},g=0;g<e/2;g++){h=2*g*r,d.re=t.slice(h,h+r),h=(2*g+1)*r,d.im=t.slice(h,h+r),n.fft1d(d.re,d.im),this.reconstructTwoRealFFT(d,p,m),l=4*g*o,u=(4*g+1)*o,c=(4*g+2)*o,f=(4*g+3)*o;for(var w=o-1;w>=0;w--)a[l+w]=p.re[w],a[u+w]=p.im[w],a[c+w]=m.re[w],a[f+w]=m.im[w]}p=null,m=null;var b=new Array(s*o);n.init(e);for(var y={re:new Array(e),im:new Array(e)},v=o-1;v>=0;v--){for(g=e-1;g>=0;g--)y.re[g]=a[2*g*o+v],y.im[g]=a[(2*g+1)*o+v],isNaN(y.re[g])&&(y.re[g]=0),isNaN(y.im[g])&&(y.im[g]=0);for(n.fft1d(y.re,y.im),g=e-1;g>=0;g--)b[2*g*o+v]=y.re[g],b[(2*g+1)*o+v]=y.im[g]}return b},reconstructTwoRealFFT:function(t,e,r){var n,i,o,s,a,h=t.re.length;e.re[0]=t.re[0],e.im[0]=0,r.re[0]=t.im[0],r.im[0]=0;for(var l=h/2;l>0;l--)a=h-l,n=.5*(t.re[l]-t.re[a]),i=.5*(t.re[l]+t.re[a]),o=.5*(t.im[l]-t.im[a]),s=.5*(t.im[l]+t.im[a]),e.re[l]=i,e.im[l]=o,e.re[a]=i,e.im[a]=-o,r.re[l]=s,r.im[l]=-n,r.re[a]=s,r.im[a]=n},convolute2DI:function(t,e,r,n){for(var i,o,s=0;s<r/2;s++)for(var a=0;a<n;a++)i=t[2*s*n+a]*e[2*s*n+a]-t[(2*s+1)*n+a]*e[(2*s+1)*n+a],o=t[2*s*n+a]*e[(2*s+1)*n+a]+t[(2*s+1)*n+a]*e[2*s*n+a],t[2*s*n+a]=i,t[(2*s+1)*n+a]=o},convolute:function(t,e,r,n,i){for(var o=new Array(n*r),s=0;s<r*n;s++)o[s]=t[s];o=this.fft2DArray(o,r,n);var a,h=e.length,l=e[0].length,u=new Array(n*r);for(s=0;s<n*r;s++)u[s]=0;for(var c=Math.floor((h-1)/2),f=Math.floor((l-1)/2),d=0;d<h;d++){a=(d-c+r)%r;for(var p=0;p<l;p++)u[a*n+(p-f+n)%n]=e[d][p]}u=this.fft2DArray(u,r,n);var m=2*r,g=n/2+1;return this.convolute2DI(o,u,m,g),this.ifft2DArray(o,m,g)},toRadix2:function(t,e,r){var n,i,o,s,a=r,h=e;if(0===r||0!=(r&r-1)){for(a=0;r>>++a!=0;);a=1<<a}if(0===e||0!=(e&e-1)){for(h=0;e>>++h!=0;);h=1<<h}if(h==e&&a==r)return{data:t,rows:e,cols:r};var l=new Array(h*a),u=Math.floor((h-e)/2)-e,c=Math.floor((a-r)/2)-r;for(n=0;n<h;n++)for(o=n*a,s=(n-u)%e*r,i=0;i<a;i++)l[o+i]=t[s+(i-c)%r];return{data:l,rows:h,cols:a}},crop:function(t,e,r,n,i,o){if(e==n&&r==i)return t;Object.assign({},o);var s,a,h,l,u=new Array(i*n),c=Math.floor((e-n)/2),f=Math.floor((r-i)/2);for(h=0;h<n;h++)for(s=h*i,a=(h+c)*r,l=0;l<i;l++)u[s+l]=t[a+(l+f)];return u}};t.exports=i},5571:function(t,e){(function(){var t;(t=e).toString=function(){return"version 0.3.0, released 2013-03"};for(var r=0,n=null,i=null,o={init:function(t){if(0===t||0!=(t&t-1))throw new Error("init: radix-2 required");r=t,o._initArray(),o._makeBitReversalTable(),o._makeCosSinTable()},fft1d:function(t,e){o.fft(t,e,1)},ifft1d:function(t,e){var n=1/r;o.fft(t,e,-1);for(var i=0;i<r;i++)t[i]*=n,e[i]*=n},bt1d:function(t,e){o.fft(t,e,-1)},fft2d:function(t,e){for(var n=[],i=[],s=0,a=0;a<r;a++){s=a*r;for(var h=0;h<r;h++)n[h]=t[h+s],i[h]=e[h+s];o.fft1d(n,i);for(var l=0;l<r;l++)t[l+s]=n[l],e[l+s]=i[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)s=u+c*r,n[c]=t[s],i[c]=e[s];o.fft1d(n,i);for(var f=0;f<r;f++)t[s=u+f*r]=n[f],e[s]=i[f]}},ifft2d:function(t,e){for(var n=[],i=[],s=0,a=0;a<r;a++){s=a*r;for(var h=0;h<r;h++)n[h]=t[h+s],i[h]=e[h+s];o.ifft1d(n,i);for(var l=0;l<r;l++)t[l+s]=n[l],e[l+s]=i[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)s=u+c*r,n[c]=t[s],i[c]=e[s];o.ifft1d(n,i);for(var f=0;f<r;f++)t[s=u+f*r]=n[f],e[s]=i[f]}},fft:function(t,e,o){for(var s,a,h,l,u,c,f,d,p,m=r>>2,g=0;g<r;g++)g<(l=n[g])&&(u=t[g],t[g]=t[l],t[l]=u,u=e[g],e[g]=e[l],e[l]=u);for(var w=1;w<r;w<<=1){a=0,s=r/(w<<1);for(var b=0;b<w;b++){c=i[a+m],f=o*i[a];for(var y=b;y<r;y+=w<<1)d=c*t[h=y+w]+f*e[h],p=c*e[h]-f*t[h],t[h]=t[y]-d,t[y]+=d,e[h]=e[y]-p,e[y]+=p;a+=s}}},_initArray:function(){n="undefined"!=typeof Uint32Array?new Uint32Array(r):[],i="undefined"!=typeof Float64Array?new Float64Array(1.25*r):[]},_paddingZero:function(){},_makeBitReversalTable:function(){var t=0,e=0,i=0;for(n[0]=0;++t<r;){for(i=r>>1;i<=e;)e-=i,i>>=1;e+=i,n[t]=e}},_makeCosSinTable:function(){var t=r>>1,e=r>>2,n=r>>3,o=t+e,s=Math.sin(Math.PI/r),a=2*s*s,h=Math.sqrt(a*(2-a)),l=i[e]=1,u=i[0]=0;s=2*a;for(var c=1;c<n;c++)a+=s*(l-=a),h-=s*(u+=h),i[c]=u,i[e-c]=l;0!==n&&(i[n]=Math.sqrt(.5));for(var f=0;f<e;f++)i[t-f]=i[f];for(var d=0;d<o;d++)i[d+t]=-i[d]}},s=["init","fft1d","ifft1d","fft2d","ifft2d"],a=0;a<s.length;a++)t[s[a]]=o[s[a]];return t.bt=o.bt1d,t.fft=o.fft1d,t.ifft=o.ifft1d,t}).call(this)},3910:(t,e,r)=>{"use strict";e.FFTUtils=r(7345),r(5571)},8881:(t,e,r)=>{"use strict";const{squaredEuclidean:n}=r(4953),i={sigma:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=n(t,e);return Math.exp(-r/this.divisor)}}},4229:t=>{"use strict";const e={degree:1,constant:1,scale:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.degree=t.degree,this.constant=t.constant,this.scale=t.scale}compute(t,e){for(var r=0,n=0;n<t.length;n++)r+=t[n]*e[n];return Math.pow(this.scale*r+this.constant,this.degree)}}},7613:t=>{"use strict";const e={alpha:.01,constant:-Math.E};t.exports=class{constructor(t){t=Object.assign({},e,t),this.alpha=t.alpha,this.constant=t.constant}compute(t,e){for(var r=0,n=0;n<t.length;n++)r+=t[n]*e[n];return Math.tanh(this.alpha*r+this.constant)}}},6952:(t,e,r)=>{"use strict";const{Matrix:n,MatrixTransposeView:i}=r(2864),o=r(8881),s=r(4229),a=r(7613),h=r(8541),l=r(9176),u=r(3316),c=r(1960),f={gaussian:o,rbf:o,polynomial:s,poly:s,anova:h,cauchy:l,exponential:u,histogram:c,min:c,laplacian:r(8557),multiquadratic:r(8609),rational:r(3029),sigmoid:a,mlp:a};t.exports=class{constructor(t,e){if(this.kernelType=t,"linear"!==t)if("string"==typeof t){t=t.toLowerCase();var r=f[t];if(!r)throw new Error(`unsupported kernel type: ${t}`);this.kernelFunction=new r(e)}else{if("object"!=typeof t||"function"!=typeof t.compute)throw new TypeError("first argument must be a valid kernel type or instance");this.kernelFunction=t}}compute(t,e){if(t=n.checkMatrix(t),e=void 0===e?t:n.checkMatrix(e),"linear"===this.kernelType)return t.mmul(new i(e));const r=new n(t.rows,e.rows);if(t===e)for(let e=0;e<t.rows;e++)for(let n=e;n<t.rows;n++){const i=this.kernelFunction.compute(t.getRow(e),t.getRow(n));r.set(e,n,i),r.set(n,e,i)}else for(let n=0;n<t.rows;n++)for(let i=0;i<e.rows;i++)r.set(n,i,this.kernelFunction.compute(t.getRow(n),e.getRow(i)));return r}}},8541:t=>{"use strict";const e={sigma:1,degree:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.sigma=t.sigma,this.degree=t.degree}compute(t,e){for(var r=0,n=Math.min(t.length,e.length),i=1;i<=n;++i)r+=Math.pow(Math.exp(-this.sigma*Math.pow(Math.pow(t[i-1],i)-Math.pow(e[i-1],i),2)),this.degree);return r}}},9176:(t,e,r)=>{"use strict";const{squaredEuclidean:n}=r(4953),i={sigma:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.sigma=t.sigma}compute(t,e){return 1/(1+n(t,e)/(this.sigma*this.sigma))}}},3316:(t,e,r)=>{"use strict";const{euclidean:n}=r(4953),i={sigma:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=n(t,e);return Math.exp(-r/this.divisor)}}},1960:t=>{"use strict";t.exports=class{compute(t,e){for(var r=Math.min(t.length,e.length),n=0,i=0;i<r;++i)n+=Math.min(t[i],e[i]);return n}}},8557:(t,e,r)=>{"use strict";const{euclidean:n}=r(4953),i={sigma:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.sigma=t.sigma}compute(t,e){const r=n(t,e);return Math.exp(-r/this.sigma)}}},8609:(t,e,r)=>{"use strict";const{squaredEuclidean:n}=r(4953),i={constant:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.constant=t.constant}compute(t,e){return Math.sqrt(n(t,e)+this.constant*this.constant)}}},3029:(t,e,r)=>{"use strict";const{squaredEuclidean:n}=r(4953),i={constant:1};t.exports=class{constructor(t){t=Object.assign({},i,t),this.constant=t.constant}compute(t,e){const r=n(t,e);return 1-r/(r+this.constant)}}},450:(t,e,r)=>{var n=r(3910).FFTUtils;function i(t){var e,r,n=t;if("number"!=typeof t[0]){e=t.length,r=t[0].length,n=new Array(e*r);for(var i=0;i<e;i++)for(var o=0;o<r;o++)n[i*r+o]=t[i][o]}else{var s=Math.sqrt(t.length);Number.isInteger(s)&&(e=s,r=s)}return{data:n,rows:e,cols:r}}t.exports={fft:function(t,e,r){var o,s,a=i(t),h=a.data,l=Object.assign({normalize:!1,divisor:1,rows:a.rows,cols:a.cols},r);if(!l.rows||!l.cols)throw new Error("Invalid number of rows or columns "+o+" "+s);o=l.rows,s=l.cols;var u,c,f=l.divisor,d=e.length,p=e[0].length;if(l.normalize)for(f=0,u=0;u<d;u++)for(c=0;c<p;c++)f+=e[u][c];if(0===f)throw new RangeError("convolution: The divisor is equal to zero");var m=n.toRadix2(h,o,s),g=n.convolute(m.data,e,m.rows,m.cols);if(g=n.crop(g,m.rows,m.cols,o,s),0!=f&&1!=f)for(u=0;u<g.length;u++)g[u]/=f;return g},direct:function(t,e,r){var n,o,s=i(t),a=s.data,h=Object.assign({normalize:!1,divisor:1,rows:s.rows,cols:s.cols},r);if(!h.rows||!h.cols)throw new Error("Invalid number of rows or columns "+n+" "+o);n=h.rows,o=h.cols;var l,u,c,f,d,p,m=h.divisor,g=e.length,w=e[0].length;if(h.normalize)for(m=0,l=0;l<g;l++)for(u=0;u<w;u++)m+=e[l][u];if(0===m)throw new RangeError("convolution: The divisor is equal to zero");var b=new Array(n*o),y=Math.floor(g/2),v=Math.floor(w/2);for(f=0;f<n;f++)for(c=0;c<o;c++){for(d=0,u=0;u<g;u++)for(l=0;l<w;l++)p=e[g-u-1][w-l-1],d+=a[(f+u-y+n)%n*o+(c+l-v+o)%o]*p;b[f*o+c]=d/m}return b},kernelFactory:{LoG:function(t,e,r){var n=1e3;r&&r.factor&&(n=r.factor);var i,o,s,a,h=new Array(e);n*=-1;var l=(e-1)/2,u=2*t*t;for(i=0;i<e;i++)for(h[i]=new Array(e),a=(i-l)*(i-l),o=0;o<e;o++)s=-((o-l)*(o-l)+a)/u,h[i][o]=Math.round(n*(1+s)*Math.exp(s));return h}},matrix2Array:i}},2313:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var n=r(1883),i=r(1548);class o{constructor(t){let e,r,n,o,s,a,h,l,u,c=(t=i.Z.checkMatrix(t)).clone(),f=c.rows,d=c.columns,p=new Float64Array(f),m=1;for(e=0;e<f;e++)p[e]=e;for(l=new Float64Array(f),r=0;r<d;r++){for(e=0;e<f;e++)l[e]=c.get(e,r);for(e=0;e<f;e++){for(u=Math.min(e,r),s=0,n=0;n<u;n++)s+=c.get(e,n)*l[n];l[e]-=s,c.set(e,r,l[e])}for(o=r,e=r+1;e<f;e++)Math.abs(l[e])>Math.abs(l[o])&&(o=e);if(o!==r){for(n=0;n<d;n++)a=c.get(o,n),c.set(o,n,c.get(r,n)),c.set(r,n,a);h=p[o],p[o]=p[r],p[r]=h,m=-m}if(r<f&&0!==c.get(r,r))for(e=r+1;e<f;e++)c.set(e,r,c.get(e,r)/c.get(r,r))}this.LU=c,this.pivotVector=p,this.pivotSign=m}isSingular(){let t=this.LU,e=t.columns;for(let r=0;r<e;r++)if(0===t.get(r,r))return!0;return!1}solve(t){t=n.Z.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let r,i,o,s=t.columns,a=t.subMatrixRow(this.pivotVector,0,s-1),h=e.columns;for(o=0;o<h;o++)for(r=o+1;r<h;r++)for(i=0;i<s;i++)a.set(r,i,a.get(r,i)-a.get(o,i)*e.get(r,o));for(o=h-1;o>=0;o--){for(i=0;i<s;i++)a.set(o,i,a.get(o,i)/e.get(o,o));for(r=0;r<o;r++)for(i=0;i<s;i++)a.set(r,i,a.get(r,i)-a.get(o,i)*e.get(r,o))}return a}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,r=t.columns;for(let n=0;n<r;n++)e*=t.get(n,n);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,i=new n.Z(e,r);for(let n=0;n<e;n++)for(let e=0;e<r;e++)n>e?i.set(n,e,t.get(n,e)):n===e?i.set(n,e,1):i.set(n,e,0);return i}get upperTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,i=new n.Z(e,r);for(let n=0;n<e;n++)for(let e=0;e<r;e++)n<=e?i.set(n,e,t.get(n,e)):i.set(n,e,0);return i}get pivotPermutationVector(){return Array.from(this.pivotVector)}}},7072:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(1883),i=r(1548),o=r(6310);class s{constructor(t){let e,r,n,s,a=(t=i.Z.checkMatrix(t)).clone(),h=t.rows,l=t.columns,u=new Float64Array(l);for(n=0;n<l;n++){let t=0;for(e=n;e<h;e++)t=(0,o.G)(t,a.get(e,n));if(0!==t){for(a.get(n,n)<0&&(t=-t),e=n;e<h;e++)a.set(e,n,a.get(e,n)/t);for(a.set(n,n,a.get(n,n)+1),r=n+1;r<l;r++){for(s=0,e=n;e<h;e++)s+=a.get(e,n)*a.get(e,r);for(s=-s/a.get(n,n),e=n;e<h;e++)a.set(e,r,a.get(e,r)+s*a.get(e,n))}}u[n]=-t}this.QR=a,this.Rdiag=u}solve(t){t=n.Z.checkMatrix(t);let e=this.QR,r=e.rows;if(t.rows!==r)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let i,o,s,a,h=t.columns,l=t.clone(),u=e.columns;for(s=0;s<u;s++)for(o=0;o<h;o++){for(a=0,i=s;i<r;i++)a+=e.get(i,s)*l.get(i,o);for(a=-a/e.get(s,s),i=s;i<r;i++)l.set(i,o,l.get(i,o)+a*e.get(i,s))}for(s=u-1;s>=0;s--){for(o=0;o<h;o++)l.set(s,o,l.get(s,o)/this.Rdiag[s]);for(i=0;i<s;i++)for(o=0;o<h;o++)l.set(i,o,l.get(i,o)-l.get(s,o)*e.get(i,s))}return l.subMatrix(0,u-1,0,h-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,r=this.QR,i=r.columns,o=new n.Z(i,i);for(t=0;t<i;t++)for(e=0;e<i;e++)t<e?o.set(t,e,r.get(t,e)):t===e?o.set(t,e,this.Rdiag[t]):o.set(t,e,0);return o}get orthogonalMatrix(){let t,e,r,i,o=this.QR,s=o.rows,a=o.columns,h=new n.Z(s,a);for(r=a-1;r>=0;r--){for(t=0;t<s;t++)h.set(t,r,0);for(h.set(r,r,1),e=r;e<a;e++)if(0!==o.get(r,r)){for(i=0,t=r;t<s;t++)i+=o.get(t,r)*h.get(t,e);for(i=-i/o.get(r,r),t=r;t<s;t++)h.set(t,e,h.get(t,e)+i*o.get(t,r))}}return h}}},6943:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(1883),i=r(1548),o=r(6310);class s{constructor(t,e={}){if((t=i.Z.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let r=t.rows,s=t.columns;const{computeLeftSingularVectors:a=!0,computeRightSingularVectors:h=!0,autoTranspose:l=!1}=e;let u,c=Boolean(a),f=Boolean(h),d=!1;if(r<s)if(l){u=t.transpose(),r=u.rows,s=u.columns,d=!0;let e=c;c=f,f=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let p=Math.min(r,s),m=Math.min(r+1,s),g=new Float64Array(m),w=new n.Z(r,p),b=new n.Z(s,s),y=new Float64Array(s),v=new Float64Array(r),x=new Float64Array(m);for(let t=0;t<m;t++)x[t]=t;let _=Math.min(r-1,s),k=Math.max(0,Math.min(s-2,r)),A=Math.max(_,k);for(let t=0;t<A;t++){if(t<_){g[t]=0;for(let e=t;e<r;e++)g[t]=(0,o.G)(g[t],u.get(e,t));if(0!==g[t]){u.get(t,t)<0&&(g[t]=-g[t]);for(let e=t;e<r;e++)u.set(e,t,u.get(e,t)/g[t]);u.set(t,t,u.get(t,t)+1)}g[t]=-g[t]}for(let e=t+1;e<s;e++){if(t<_&&0!==g[t]){let n=0;for(let i=t;i<r;i++)n+=u.get(i,t)*u.get(i,e);n=-n/u.get(t,t);for(let i=t;i<r;i++)u.set(i,e,u.get(i,e)+n*u.get(i,t))}y[e]=u.get(t,e)}if(c&&t<_)for(let e=t;e<r;e++)w.set(e,t,u.get(e,t));if(t<k){y[t]=0;for(let e=t+1;e<s;e++)y[t]=(0,o.G)(y[t],y[e]);if(0!==y[t]){y[t+1]<0&&(y[t]=0-y[t]);for(let e=t+1;e<s;e++)y[e]/=y[t];y[t+1]+=1}if(y[t]=-y[t],t+1<r&&0!==y[t]){for(let e=t+1;e<r;e++)v[e]=0;for(let e=t+1;e<r;e++)for(let r=t+1;r<s;r++)v[e]+=y[r]*u.get(e,r);for(let e=t+1;e<s;e++){let n=-y[e]/y[t+1];for(let i=t+1;i<r;i++)u.set(i,e,u.get(i,e)+n*v[i])}}if(f)for(let e=t+1;e<s;e++)b.set(e,t,y[e])}}let M=Math.min(s,r+1);if(_<s&&(g[_]=u.get(_,_)),r<M&&(g[M-1]=0),k+1<M&&(y[k]=u.get(k,M-1)),y[M-1]=0,c){for(let t=_;t<p;t++){for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}for(let t=_-1;t>=0;t--)if(0!==g[t]){for(let e=t+1;e<p;e++){let n=0;for(let i=t;i<r;i++)n+=w.get(i,t)*w.get(i,e);n=-n/w.get(t,t);for(let i=t;i<r;i++)w.set(i,e,w.get(i,e)+n*w.get(i,t))}for(let e=t;e<r;e++)w.set(e,t,-w.get(e,t));w.set(t,t,1+w.get(t,t));for(let e=0;e<t-1;e++)w.set(e,t,0)}else{for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}}if(f)for(let t=s-1;t>=0;t--){if(t<k&&0!==y[t])for(let e=t+1;e<s;e++){let r=0;for(let n=t+1;n<s;n++)r+=b.get(n,t)*b.get(n,e);r=-r/b.get(t+1,t);for(let n=t+1;n<s;n++)b.set(n,e,b.get(n,e)+r*b.get(n,t))}for(let e=0;e<s;e++)b.set(e,t,0);b.set(t,t,1)}let E=M-1,S=0,C=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+C*Math.abs(g[t]+Math.abs(g[t+1]));if(Math.abs(y[t])<=e||Number.isNaN(y[t])){y[t]=0;break}}if(t===M-2)e=4;else{let r;for(r=M-1;r>=t&&r!==t;r--){let e=(r!==M?Math.abs(y[r]):0)+(r!==t+1?Math.abs(y[r-1]):0);if(Math.abs(g[r])<=C*e){g[r]=0;break}}r===t?e=3:r===M-1?e=1:(e=2,t=r)}switch(t++,e){case 1:{let e=y[M-2];y[M-2]=0;for(let r=M-2;r>=t;r--){let n=(0,o.G)(g[r],e),i=g[r]/n,a=e/n;if(g[r]=n,r!==t&&(e=-a*y[r-1],y[r-1]=i*y[r-1]),f)for(let t=0;t<s;t++)n=i*b.get(t,r)+a*b.get(t,M-1),b.set(t,M-1,-a*b.get(t,r)+i*b.get(t,M-1)),b.set(t,r,n)}break}case 2:{let e=y[t-1];y[t-1]=0;for(let n=t;n<M;n++){let i=(0,o.G)(g[n],e),s=g[n]/i,a=e/i;if(g[n]=i,e=-a*y[n],y[n]=s*y[n],c)for(let e=0;e<r;e++)i=s*w.get(e,n)+a*w.get(e,t-1),w.set(e,t-1,-a*w.get(e,n)+s*w.get(e,t-1)),w.set(e,n,i)}break}case 3:{const e=Math.max(Math.abs(g[M-1]),Math.abs(g[M-2]),Math.abs(y[M-2]),Math.abs(g[t]),Math.abs(y[t])),n=g[M-1]/e,i=g[M-2]/e,a=y[M-2]/e,h=g[t]/e,l=y[t]/e,u=((i+n)*(i-n)+a*a)/2,d=n*a*(n*a);let p=0;0===u&&0===d||(p=u<0?0-Math.sqrt(u*u+d):Math.sqrt(u*u+d),p=d/(u+p));let m=(h+n)*(h-n)+p,v=h*l;for(let e=t;e<M-1;e++){let n=(0,o.G)(m,v);0===n&&(n=Number.MIN_VALUE);let i=m/n,a=v/n;if(e!==t&&(y[e-1]=n),m=i*g[e]+a*y[e],y[e]=i*y[e]-a*g[e],v=a*g[e+1],g[e+1]=i*g[e+1],f)for(let t=0;t<s;t++)n=i*b.get(t,e)+a*b.get(t,e+1),b.set(t,e+1,-a*b.get(t,e)+i*b.get(t,e+1)),b.set(t,e,n);if(n=(0,o.G)(m,v),0===n&&(n=Number.MIN_VALUE),i=m/n,a=v/n,g[e]=n,m=i*y[e]+a*g[e+1],g[e+1]=-a*y[e]+i*g[e+1],v=a*y[e+1],y[e+1]=i*y[e+1],c&&e<r-1)for(let t=0;t<r;t++)n=i*w.get(t,e)+a*w.get(t,e+1),w.set(t,e+1,-a*w.get(t,e)+i*w.get(t,e+1)),w.set(t,e,n)}y[M-2]=m,S+=1;break}case 4:if(g[t]<=0&&(g[t]=g[t]<0?-g[t]:0,f))for(let e=0;e<=E;e++)b.set(e,t,-b.get(e,t));for(;t<E&&!(g[t]>=g[t+1]);){let e=g[t];if(g[t]=g[t+1],g[t+1]=e,f&&t<s-1)for(let r=0;r<s;r++)e=b.get(r,t+1),b.set(r,t+1,b.get(r,t)),b.set(r,t,e);if(c&&t<r-1)for(let n=0;n<r;n++)e=w.get(n,t+1),w.set(n,t+1,w.get(n,t)),w.set(n,t,e);t++}S=0,M--}}if(d){let t=b;b=w,w=t}this.m=r,this.n=s,this.s=g,this.U=w,this.V=b}solve(t){let e=t,r=this.threshold,i=this.s.length,o=n.Z.zeros(i,i);for(let t=0;t<i;t++)Math.abs(this.s[t])<=r?o.set(t,t,0):o.set(t,t,1/this.s[t]);let s=this.U,a=this.rightSingularVectors,h=a.mmul(o),l=a.rows,u=s.rows,c=n.Z.zeros(l,u);for(let t=0;t<l;t++)for(let e=0;e<u;e++){let r=0;for(let n=0;n<i;n++)r+=h.get(t,n)*s.get(e,n);c.set(t,e,r)}return c.mmul(e)}solveForDiagonal(t){return this.solve(n.Z.diag(t))}inverse(){let t=this.V,e=this.threshold,r=t.rows,i=t.columns,o=new n.Z(r,this.s.length);for(let n=0;n<r;n++)for(let r=0;r<i;r++)Math.abs(this.s[r])>e&&o.set(n,r,t.get(n,r)/this.s[r]);let s=this.U,a=s.rows,h=s.columns,l=new n.Z(r,a);for(let t=0;t<r;t++)for(let e=0;e<a;e++){let r=0;for(let n=0;n<h;n++)r+=o.get(t,n)*s.get(e,n);l.set(t,e,r)}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s;for(let n=0,i=r.length;n<i;n++)r[n]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return n.Z.diag(this.s)}}},6310:(t,e,r)=>{"use strict";function n(t,e){let r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}r.d(e,{G:()=>n})},8345:(t,e,r)=>{"use strict";r.d(e,{S:()=>h,F:()=>l});var n=r(2313),i=r(7072),o=r(6943),s=r(1883),a=r(1548);function h(t,e=!1){return t=a.Z.checkMatrix(t),e?new o.Z(t).inverse():l(t,s.Z.eye(t.rows))}function l(t,e,r=!1){return t=a.Z.checkMatrix(t),e=a.Z.checkMatrix(e),r?new o.Z(t).solve(e):t.isSquare()?new n.Z(t).solve(e):new i.Z(t).solve(e)}},2864:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AbstractMatrix:()=>n.X,CHO:()=>D,CholeskyDecomposition:()=>D,EVD:()=>I,EigenvalueDecomposition:()=>I,LU:()=>y.Z,LuDecomposition:()=>y.Z,Matrix:()=>n.Z,MatrixColumnSelectionView:()=>a,MatrixColumnView:()=>s,MatrixFlipColumnView:()=>h,MatrixFlipRowView:()=>l,MatrixRowSelectionView:()=>c,MatrixRowView:()=>u,MatrixSelectionView:()=>f,MatrixSubView:()=>d,MatrixTransposeView:()=>p.Z,NIPALS:()=>R,Nipals:()=>R,QR:()=>T.Z,QrDecomposition:()=>T.Z,SVD:()=>x.Z,SingularValueDecomposition:()=>x.Z,WrapperMatrix1D:()=>m,WrapperMatrix2D:()=>g.Z,correlation:()=>S,covariance:()=>E,default:()=>n.Z,determinant:()=>v,inverse:()=>b.S,linearDependencies:()=>A,pseudoInverse:()=>M,solve:()=>b.F,wrap:()=>w});var n=r(1883),i=r(3018),o=r(4920);class s extends o.Z{constructor(t,e){(0,i.bp)(t,e),super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class a extends o.Z{constructor(t,e){e=(0,i.g)(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class h extends o.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}class l extends o.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class u extends o.Z{constructor(t,e){(0,i.zb)(t,e),super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class c extends o.Z{constructor(t,e){super(t,(e=(0,i.ZR)(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class f extends o.Z{constructor(t,e,r){let n=(0,i.N2)(t,e,r);super(t,n.row.length,n.column.length),this.rowIndices=n.row,this.columnIndices=n.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class d extends o.Z{constructor(t,e,r,n,o){(0,i.J5)(t,e,r,n,o),super(t,r-e+1,o-n+1),this.startRow=e,this.startColumn=n}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}var p=r(5922);class m extends n.X{constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){let n=this._calculateIndex(t,e);return this.data[n]=r,this}get(t,e){let r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}}var g=r(1548);function w(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new g.Z(t):new m(t,e);throw new Error("the argument is not an array")}var b=r(8345),y=r(2313);function v(t){if((t=n.Z.checkMatrix(t)).isSquare()){if(0===t.columns)return 1;let e,r,n,i;if(2===t.columns)return e=t.get(0,0),r=t.get(0,1),n=t.get(1,0),i=t.get(1,1),e*i-r*n;if(3===t.columns){let i,o,s;return i=new f(t,[1,2],[1,2]),o=new f(t,[1,2],[0,2]),s=new f(t,[1,2],[0,1]),e=t.get(0,0),r=t.get(0,1),n=t.get(0,2),e*v(i)-r*v(o)+n*v(s)}return new y.Z(t).determinant}throw Error("determinant can only be calculated for a square matrix")}var x=r(6943);function _(t,e){let r=[];for(let n=0;n<t;n++)n!==e&&r.push(n);return r}function k(t,e,r,n=1e-9,i=1e-9){if(t>i)return new Array(e.rows+1).fill(0);{let t=e.addRow(r,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<n&&t.set(e,0,0);return t.to1DArray()}}function A(t,e={}){const{thresholdValue:r=1e-9,thresholdError:i=1e-9}=e;let o=(t=n.Z.checkMatrix(t)).rows,s=new n.Z(o,o);for(let e=0;e<o;e++){let a=n.Z.columnVector(t.getRow(e)),h=t.subMatrixRow(_(o,e)).transpose(),l=new x.Z(h).solve(a),u=n.Z.sub(a,h.mmul(l)).abs().max();s.setRow(e,k(u,l,e,r,i))}return s}function M(t,e=Number.EPSILON){if((t=n.Z.checkMatrix(t)).isEmpty())return t.transpose();let r=new x.Z(t,{autoTranspose:!0}),i=r.leftSingularVectors,o=r.rightSingularVectors,s=r.diagonal;for(let t=0;t<s.length;t++)Math.abs(s[t])>e?s[t]=1/s[t]:s[t]=0;return o.mmul(n.Z.diag(s).mmul(i.transpose()))}function E(t,e=t,r={}){t=new n.Z(t);let i=!1;if("object"!=typeof e||n.Z.isMatrix(e)||Array.isArray(e)?e=new n.Z(e):(r=e,e=t,i=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:o=!0}=r;o&&(t=t.center("column"),i||(e=e.center("column")));const s=t.transpose().mmul(e);for(let e=0;e<s.rows;e++)for(let r=0;r<s.columns;r++)s.set(e,r,s.get(e,r)*(1/(t.rows-1)));return s}function S(t,e=t,r={}){t=new n.Z(t);let i=!1;if("object"!=typeof e||n.Z.isMatrix(e)||Array.isArray(e)?e=new n.Z(e):(r=e,e=t,i=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:o=!0,scale:s=!0}=r;o&&(t.center("column"),i||e.center("column")),s&&(t.scale("column"),i||e.scale("column"));const a=t.standardDeviation("column",{unbiased:!0}),h=i?a:e.standardDeviation("column",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let r=0;r<l.columns;r++)l.set(e,r,l.get(e,r)*(1/(a[e]*h[r]))*(1/(t.rows-1)));return l}var C=r(6310);class I{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=g.Z.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let i,o,s=t.columns,a=new n.Z(s,s),h=new Float64Array(s),l=new Float64Array(s),u=t,c=!1;if(c=!!r||t.isSymmetric(),c){for(i=0;i<s;i++)for(o=0;o<s;o++)a.set(i,o,u.get(i,o));!function(t,e,r,n){let i,o,s,a,h,l,u,c;for(h=0;h<t;h++)r[h]=n.get(t-1,h);for(a=t-1;a>0;a--){for(c=0,s=0,l=0;l<a;l++)c+=Math.abs(r[l]);if(0===c)for(e[a]=r[a-1],h=0;h<a;h++)r[h]=n.get(a-1,h),n.set(a,h,0),n.set(h,a,0);else{for(l=0;l<a;l++)r[l]/=c,s+=r[l]*r[l];for(i=r[a-1],o=Math.sqrt(s),i>0&&(o=-o),e[a]=c*o,s-=i*o,r[a-1]=i-o,h=0;h<a;h++)e[h]=0;for(h=0;h<a;h++){for(i=r[h],n.set(h,a,i),o=e[h]+n.get(h,h)*i,l=h+1;l<=a-1;l++)o+=n.get(l,h)*r[l],e[l]+=n.get(l,h)*i;e[h]=o}for(i=0,h=0;h<a;h++)e[h]/=s,i+=e[h]*r[h];for(u=i/(s+s),h=0;h<a;h++)e[h]-=u*r[h];for(h=0;h<a;h++){for(i=r[h],o=e[h],l=h;l<=a-1;l++)n.set(l,h,n.get(l,h)-(i*e[l]+o*r[l]));r[h]=n.get(a-1,h),n.set(a,h,0)}}r[a]=s}for(a=0;a<t-1;a++){if(n.set(t-1,a,n.get(a,a)),n.set(a,a,1),s=r[a+1],0!==s){for(l=0;l<=a;l++)r[l]=n.get(l,a+1)/s;for(h=0;h<=a;h++){for(o=0,l=0;l<=a;l++)o+=n.get(l,a+1)*n.get(l,h);for(l=0;l<=a;l++)n.set(l,h,n.get(l,h)-o*r[l])}}for(l=0;l<=a;l++)n.set(l,a+1,0)}for(h=0;h<t;h++)r[h]=n.get(t-1,h),n.set(t-1,h,0);n.set(t-1,t-1,1),e[0]=0}(s,l,h,a),function(t,e,r,n){let i,o,s,a,h,l,u,c,f,d,p,m,g,w,b,y,v;for(s=1;s<t;s++)e[s-1]=e[s];e[t-1]=0;let x=0,_=0,k=Number.EPSILON;for(l=0;l<t;l++){for(_=Math.max(_,Math.abs(r[l])+Math.abs(e[l])),u=l;u<t&&!(Math.abs(e[u])<=k*_);)u++;if(u>l){v=0;do{for(v+=1,i=r[l],c=(r[l+1]-i)/(2*e[l]),f=(0,C.G)(c,1),c<0&&(f=-f),r[l]=e[l]/(c+f),r[l+1]=e[l]*(c+f),d=r[l+1],o=i-r[l],s=l+2;s<t;s++)r[s]-=o;for(x+=o,c=r[u],p=1,m=p,g=p,w=e[l+1],b=0,y=0,s=u-1;s>=l;s--)for(g=m,m=p,y=b,i=p*e[s],o=p*c,f=(0,C.G)(c,e[s]),e[s+1]=b*f,b=e[s]/f,p=c/f,c=p*r[s]-b*i,r[s+1]=o+b*(p*i+b*r[s]),h=0;h<t;h++)o=n.get(h,s+1),n.set(h,s+1,b*n.get(h,s)+p*o),n.set(h,s,p*n.get(h,s)-b*o);c=-b*y*g*w*e[l]/d,e[l]=b*c,r[l]=p*c}while(Math.abs(e[l])>k*_)}r[l]=r[l]+x,e[l]=0}for(s=0;s<t-1;s++){for(h=s,c=r[s],a=s+1;a<t;a++)r[a]<c&&(h=a,c=r[a]);if(h!==s)for(r[h]=r[s],r[s]=c,a=0;a<t;a++)c=n.get(a,s),n.set(a,s,n.get(a,h)),n.set(a,h,c)}}(s,l,h,a)}else{let t=new n.Z(s,s),e=new Float64Array(s);for(o=0;o<s;o++)for(i=0;i<s;i++)t.set(i,o,u.get(i,o));!function(t,e,r,n){let i,o,s,a,h,l,u,c=t-1;for(l=1;l<=c-1;l++){for(u=0,a=l;a<=c;a++)u+=Math.abs(e.get(a,l-1));if(0!==u){for(s=0,a=c;a>=l;a--)r[a]=e.get(a,l-1)/u,s+=r[a]*r[a];for(o=Math.sqrt(s),r[l]>0&&(o=-o),s-=r[l]*o,r[l]=r[l]-o,h=l;h<t;h++){for(i=0,a=c;a>=l;a--)i+=r[a]*e.get(a,h);for(i/=s,a=l;a<=c;a++)e.set(a,h,e.get(a,h)-i*r[a])}for(a=0;a<=c;a++){for(i=0,h=c;h>=l;h--)i+=r[h]*e.get(a,h);for(i/=s,h=l;h<=c;h++)e.set(a,h,e.get(a,h)-i*r[h])}r[l]=u*r[l],e.set(l,l-1,u*o)}}for(a=0;a<t;a++)for(h=0;h<t;h++)n.set(a,h,a===h?1:0);for(l=c-1;l>=1;l--)if(0!==e.get(l,l-1)){for(a=l+1;a<=c;a++)r[a]=e.get(a,l-1);for(h=l;h<=c;h++){for(o=0,a=l;a<=c;a++)o+=r[a]*n.get(a,h);for(o=o/r[l]/e.get(l,l-1),a=l;a<=c;a++)n.set(a,h,n.get(a,h)+o*r[a])}}}(s,t,e,a),function(t,e,r,n,i){let o,s,a,h,l,u,c,f,d,p,m,g,w,b,y,v=t-1,x=t-1,_=Number.EPSILON,k=0,A=0,M=0,E=0,S=0,C=0,I=0,D=0;for(o=0;o<t;o++)for((o<0||o>x)&&(r[o]=i.get(o,o),e[o]=0),s=Math.max(o-1,0);s<t;s++)A+=Math.abs(i.get(o,s));for(;v>=0;){for(h=v;h>0&&(C=Math.abs(i.get(h-1,h-1))+Math.abs(i.get(h,h)),0===C&&(C=A),!(Math.abs(i.get(h,h-1))<_*C));)h--;if(h===v)i.set(v,v,i.get(v,v)+k),r[v]=i.get(v,v),e[v]=0,v--,D=0;else if(h===v-1){if(c=i.get(v,v-1)*i.get(v-1,v),M=(i.get(v-1,v-1)-i.get(v,v))/2,E=M*M+c,I=Math.sqrt(Math.abs(E)),i.set(v,v,i.get(v,v)+k),i.set(v-1,v-1,i.get(v-1,v-1)+k),f=i.get(v,v),E>=0){for(I=M>=0?M+I:M-I,r[v-1]=f+I,r[v]=r[v-1],0!==I&&(r[v]=f-c/I),e[v-1]=0,e[v]=0,f=i.get(v,v-1),C=Math.abs(f)+Math.abs(I),M=f/C,E=I/C,S=Math.sqrt(M*M+E*E),M/=S,E/=S,s=v-1;s<t;s++)I=i.get(v-1,s),i.set(v-1,s,E*I+M*i.get(v,s)),i.set(v,s,E*i.get(v,s)-M*I);for(o=0;o<=v;o++)I=i.get(o,v-1),i.set(o,v-1,E*I+M*i.get(o,v)),i.set(o,v,E*i.get(o,v)-M*I);for(o=0;o<=x;o++)I=n.get(o,v-1),n.set(o,v-1,E*I+M*n.get(o,v)),n.set(o,v,E*n.get(o,v)-M*I)}else r[v-1]=f+M,r[v]=f+M,e[v-1]=I,e[v]=-I;v-=2,D=0}else{if(f=i.get(v,v),d=0,c=0,h<v&&(d=i.get(v-1,v-1),c=i.get(v,v-1)*i.get(v-1,v)),10===D){for(k+=f,o=0;o<=v;o++)i.set(o,o,i.get(o,o)-f);C=Math.abs(i.get(v,v-1))+Math.abs(i.get(v-1,v-2)),f=d=.75*C,c=-.4375*C*C}if(30===D&&(C=(d-f)/2,C=C*C+c,C>0)){for(C=Math.sqrt(C),d<f&&(C=-C),C=f-c/((d-f)/2+C),o=0;o<=v;o++)i.set(o,o,i.get(o,o)-C);k+=C,f=d=c=.964}for(D+=1,l=v-2;l>=h&&(I=i.get(l,l),S=f-I,C=d-I,M=(S*C-c)/i.get(l+1,l)+i.get(l,l+1),E=i.get(l+1,l+1)-I-S-C,S=i.get(l+2,l+1),C=Math.abs(M)+Math.abs(E)+Math.abs(S),M/=C,E/=C,S/=C,l!==h)&&!(Math.abs(i.get(l,l-1))*(Math.abs(E)+Math.abs(S))<_*(Math.abs(M)*(Math.abs(i.get(l-1,l-1))+Math.abs(I)+Math.abs(i.get(l+1,l+1)))));)l--;for(o=l+2;o<=v;o++)i.set(o,o-2,0),o>l+2&&i.set(o,o-3,0);for(a=l;a<=v-1&&(b=a!==v-1,a!==l&&(M=i.get(a,a-1),E=i.get(a+1,a-1),S=b?i.get(a+2,a-1):0,f=Math.abs(M)+Math.abs(E)+Math.abs(S),0!==f&&(M/=f,E/=f,S/=f)),0!==f);a++)if(C=Math.sqrt(M*M+E*E+S*S),M<0&&(C=-C),0!==C){for(a!==l?i.set(a,a-1,-C*f):h!==l&&i.set(a,a-1,-i.get(a,a-1)),M+=C,f=M/C,d=E/C,I=S/C,E/=M,S/=M,s=a;s<t;s++)M=i.get(a,s)+E*i.get(a+1,s),b&&(M+=S*i.get(a+2,s),i.set(a+2,s,i.get(a+2,s)-M*I)),i.set(a,s,i.get(a,s)-M*f),i.set(a+1,s,i.get(a+1,s)-M*d);for(o=0;o<=Math.min(v,a+3);o++)M=f*i.get(o,a)+d*i.get(o,a+1),b&&(M+=I*i.get(o,a+2),i.set(o,a+2,i.get(o,a+2)-M*S)),i.set(o,a,i.get(o,a)-M),i.set(o,a+1,i.get(o,a+1)-M*E);for(o=0;o<=x;o++)M=f*n.get(o,a)+d*n.get(o,a+1),b&&(M+=I*n.get(o,a+2),n.set(o,a+2,n.get(o,a+2)-M*S)),n.set(o,a,n.get(o,a)-M),n.set(o,a+1,n.get(o,a+1)-M*E)}}}if(0!==A){for(v=t-1;v>=0;v--)if(M=r[v],E=e[v],0===E)for(h=v,i.set(v,v,1),o=v-1;o>=0;o--){for(c=i.get(o,o)-M,S=0,s=h;s<=v;s++)S+=i.get(o,s)*i.get(s,v);if(e[o]<0)I=c,C=S;else if(h=o,0===e[o]?i.set(o,v,0!==c?-S/c:-S/(_*A)):(f=i.get(o,o+1),d=i.get(o+1,o),E=(r[o]-M)*(r[o]-M)+e[o]*e[o],u=(f*C-I*S)/E,i.set(o,v,u),i.set(o+1,v,Math.abs(f)>Math.abs(I)?(-S-c*u)/f:(-C-d*u)/I)),u=Math.abs(i.get(o,v)),_*u*u>1)for(s=o;s<=v;s++)i.set(s,v,i.get(s,v)/u)}else if(E<0)for(h=v-1,Math.abs(i.get(v,v-1))>Math.abs(i.get(v-1,v))?(i.set(v-1,v-1,E/i.get(v,v-1)),i.set(v-1,v,-(i.get(v,v)-M)/i.get(v,v-1))):(y=P(0,-i.get(v-1,v),i.get(v-1,v-1)-M,E),i.set(v-1,v-1,y[0]),i.set(v-1,v,y[1])),i.set(v,v-1,0),i.set(v,v,1),o=v-2;o>=0;o--){for(p=0,m=0,s=h;s<=v;s++)p+=i.get(o,s)*i.get(s,v-1),m+=i.get(o,s)*i.get(s,v);if(c=i.get(o,o)-M,e[o]<0)I=c,S=p,C=m;else if(h=o,0===e[o]?(y=P(-p,-m,c,E),i.set(o,v-1,y[0]),i.set(o,v,y[1])):(f=i.get(o,o+1),d=i.get(o+1,o),g=(r[o]-M)*(r[o]-M)+e[o]*e[o]-E*E,w=2*(r[o]-M)*E,0===g&&0===w&&(g=_*A*(Math.abs(c)+Math.abs(E)+Math.abs(f)+Math.abs(d)+Math.abs(I))),y=P(f*S-I*p+E*m,f*C-I*m-E*p,g,w),i.set(o,v-1,y[0]),i.set(o,v,y[1]),Math.abs(f)>Math.abs(I)+Math.abs(E)?(i.set(o+1,v-1,(-p-c*i.get(o,v-1)+E*i.get(o,v))/f),i.set(o+1,v,(-m-c*i.get(o,v)-E*i.get(o,v-1))/f)):(y=P(-S-d*i.get(o,v-1),-C-d*i.get(o,v),I,E),i.set(o+1,v-1,y[0]),i.set(o+1,v,y[1]))),u=Math.max(Math.abs(i.get(o,v-1)),Math.abs(i.get(o,v))),_*u*u>1)for(s=o;s<=v;s++)i.set(s,v-1,i.get(s,v-1)/u),i.set(s,v,i.get(s,v)/u)}for(o=0;o<t;o++)if(o<0||o>x)for(s=o;s<t;s++)n.set(o,s,i.get(o,s));for(s=t-1;s>=0;s--)for(o=0;o<=x;o++){for(I=0,a=0;a<=Math.min(s,x);a++)I+=n.get(o,a)*i.get(a,s);n.set(o,s,I)}}}(s,l,h,a,t)}this.n=s,this.e=l,this.d=h,this.V=a}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,r=this.n,i=this.e,o=this.d,s=new n.Z(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)s.set(t,e,0);s.set(t,t,o[t]),i[t]>0?s.set(t,t+1,i[t]):i[t]<0&&s.set(t,t-1,i[t])}return s}}function P(t,e,r,n){let i,o;return Math.abs(r)>Math.abs(n)?(i=n/r,o=r+i*n,[(t+i*e)/o,(e-i*t)/o]):(i=r/n,o=n+i*r,[(i*t+e)/o,(i*e-t)/o])}class D{constructor(t){if(!(t=g.Z.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,r,i,o=t,s=o.rows,a=new n.Z(s,s),h=!0;for(r=0;r<s;r++){let t=0;for(i=0;i<r;i++){let n=0;for(e=0;e<i;e++)n+=a.get(i,e)*a.get(r,e);n=(o.get(r,i)-n)/a.get(i,i),a.set(r,i,n),t+=n*n}for(t=o.get(r,r)-t,h&=t>0,a.set(r,r,Math.sqrt(Math.max(t,0))),i=r+1;i<s;i++)a.set(r,i,0)}this.L=a,this.positiveDefinite=Boolean(h)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=g.Z.checkMatrix(t);let e=this.L,r=e.rows;if(t.rows!==r)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let n,i,o,s=t.columns,a=t.clone();for(o=0;o<r;o++)for(i=0;i<s;i++){for(n=0;n<o;n++)a.set(o,i,a.get(o,i)-a.get(n,i)*e.get(o,n));a.set(o,i,a.get(o,i)/e.get(o,o))}for(o=r-1;o>=0;o--)for(i=0;i<s;i++){for(n=o+1;n<r;n++)a.set(o,i,a.get(o,i)-a.get(n,i)*e.get(n,o));a.set(o,i,a.get(o,i)/e.get(o,o))}return a}get lowerTriangularMatrix(){return this.L}}var T=r(7072);class R{constructor(t,e={}){t=g.Z.checkMatrix(t);let{Y:r}=e;const{scaleScores:i=!1,maxIterations:o=1e3,terminationCriteria:s=1e-10}=e;let a;if(r){if(r=Array.isArray(r)&&"number"==typeof r[0]?n.Z.columnVector(r):g.Z.checkMatrix(r),r.rows!==t.rows)throw new Error("Y should have the same number of rows as X");a=r.getColumnVector(0)}else a=t.getColumnVector(0);let h,l,u,c,f=1;for(let e=0;e<o&&f>s;e++)u=t.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0)),u=u.div(u.norm()),h=t.mmul(u).div(u.transpose().mmul(u).get(0,0)),e>0&&(f=h.clone().sub(c).pow(2).sum()),c=h.clone(),r?(l=r.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),l=l.div(l.norm()),a=r.mmul(l).div(l.transpose().mmul(l).get(0,0))):a=h;if(r){let e=t.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0));e=e.div(e.norm());let n=t.clone().sub(h.clone().mmul(e.transpose())),i=a.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),o=r.clone().sub(h.clone().mulS(i.get(0,0)).mmul(l.transpose()));this.t=h,this.p=e.transpose(),this.w=u.transpose(),this.q=l,this.u=a,this.s=h.transpose().mmul(h),this.xResidual=n,this.yResidual=o,this.betas=i}else this.w=u.transpose(),this.s=h.transpose().mmul(h).sqrt(),this.t=i?h.clone().div(this.s.get(0,0)):h,this.xResidual=t.sub(h.mmul(u.transpose()))}}},1883:(t,e,r)=>{"use strict";r.d(e,{X:()=>f,Z:()=>p});var n=r(7531);const i=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,n.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,i=void 0===r?0:r,o=e.toIndex,s=void 0===o?t.length:o;if(i<0||i>=t.length||!Number.isInteger(i))throw new Error("fromIndex must be a positive integer smaller than length");if(s<=i||s>t.length||!Number.isInteger(s))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[i],h=i+1;h<s;h++)t[h]>a&&(a=t[h]);return a},o=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,n.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,i=void 0===r?0:r,o=e.toIndex,s=void 0===o?t.length:o;if(i<0||i>=t.length||!Number.isInteger(i))throw new Error("fromIndex must be a positive integer smaller than length");if(s<=i||s>t.length||!Number.isInteger(s))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[i],h=i+1;h<s;h++)t[h]<a&&(a=t[h]);return a};function s(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,n.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==r.output){if(!(0,n.Z)(r.output))throw new TypeError("output option must be an array if specified");e=r.output}else e=new Array(t.length);var s=o(t),a=i(t);if(s===a)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var h=r.min,l=void 0===h?r.autoMinMax?s:0:h,u=r.max,c=void 0===u?r.autoMinMax?a:1:u;if(l>=c)throw new RangeError("min option must be smaller than max option");for(var f=(c-l)/(a-s),d=0;d<t.length;d++)e[d]=(t[d]-s)*f+l;return e}const a=" ".repeat(2),h=" ".repeat(4);function l(t,e={}){const{maxRows:r=15,maxColumns:n=10,maxNumSize:i=8}=e;return`${t.constructor.name} {\n${a}[\n${h}${function(t,e,r,n){const{rows:i,columns:o}=t,s=Math.min(i,e),a=Math.min(o,r),l=[];for(let e=0;e<s;e++){let r=[];for(let i=0;i<a;i++)r.push(u(t.get(e,i),n));l.push(`${r.join(" ")}`)}return a!==o&&(l[l.length-1]+=` ... ${o-r} more columns`),s!==i&&l.push(`... ${i-e} more rows`),l.join(`\n${h}`)}(t,r,n,i)}\n${a}]\n${a}rows: ${t.rows}\n${a}columns: ${t.columns}\n}`}function u(t,e){const r=String(t);if(r.length<=e)return r.padEnd(e," ");const n=t.toPrecision(e-2);if(n.length<=e)return n;const i=t.toExponential(e-2),o=i.indexOf("e"),s=i.slice(o);return i.slice(0,e-s.length)+s}var c=r(3018);class f{static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError("data length does not match given dimensions");let n=new p(t,e);for(let i=0;i<t;i++)for(let t=0;t<e;t++)n.set(i,t,r[i*e+t]);return n}static rowVector(t){let e=new p(1,t.length);for(let r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){let e=new p(t.length,1);for(let r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static zeros(t,e){return new p(t,e)}static ones(t,e){return new p(t,e).fill(1)}static rand(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{random:n=Math.random}=r;let i=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++)i.set(r,t,n());return i}static randInt(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{min:n=0,max:i=1e3,random:o=Math.random}=r;if(!Number.isInteger(n))throw new TypeError("min must be an integer");if(!Number.isInteger(i))throw new TypeError("max must be an integer");if(n>=i)throw new RangeError("min must be smaller than max");let s=i-n,a=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++){let e=n+Math.round(o()*s);a.set(r,t,e)}return a}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);let n=Math.min(t,e),i=this.zeros(t,e);for(let t=0;t<n;t++)i.set(t,t,r);return i}static diag(t,e,r){let n=t.length;void 0===e&&(e=n),void 0===r&&(r=e);let i=Math.min(n,e,r),o=this.zeros(e,r);for(let e=0;e<i;e++)o.set(e,e,t[e]);return o}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,n=t.columns,i=new p(r,n);for(let o=0;o<r;o++)for(let r=0;r<n;r++)i.set(o,r,Math.min(t.get(o,r),e.get(o,r)));return i}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,n=t.columns,i=new this(r,n);for(let o=0;o<r;o++)for(let r=0;r<n;r++)i.set(o,r,Math.max(t.get(o,r),e.get(o,r)));return i}static checkMatrix(t){return f.isMatrix(t)?t:new p(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.call(this,e,r);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.push(this.get(e,r));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let r=0;r<this.columns;r++)t[e].push(this.get(e,r))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,r=-1,n=!0,i=!1;for(;t<this.rows&&n;){for(e=0,i=!1;e<this.columns&&!1===i;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(i=!0,r=e):(n=!1,i=!0);t++}return n}isReducedEchelonForm(){let t=0,e=0,r=-1,n=!0,i=!1;for(;t<this.rows&&n;){for(e=0,i=!1;e<this.columns&&!1===i;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(i=!0,r=e):(n=!1,i=!0);for(let r=e+1;r<this.rows;r++)0!==this.get(t,r)&&(n=!1);t++}return n}echelonForm(){let t=this.clone(),e=0,r=0;for(;e<t.rows&&r<t.columns;){let n=e;for(let i=e;i<t.rows;i++)t.get(i,r)>t.get(n,r)&&(n=i);if(0===t.get(n,r))r++;else{t.swapRows(e,n);let i=t.get(e,r);for(let n=r;n<t.columns;n++)t.set(e,n,t.get(e,n)/i);for(let n=e+1;n<t.rows;n++){let i=t.get(n,r)/t.get(e,r);t.set(n,r,0);for(let o=r+1;o<t.columns;o++)t.set(n,o,t.get(n,o)-t.get(e,o)*i)}e++,r++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,r=t.rows,n=r-1;for(;n>=0;)if(0===t.maxRow(n))n--;else{let i=0,o=!1;for(;i<r&&!1===o;)1===t.get(n,i)?o=!0:i++;for(let r=0;r<n;r++){let o=t.get(r,i);for(let s=i;s<e;s++){let e=t.get(r,s)-o*t.get(n,s);t.set(r,s,e)}}n--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:r=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new TypeError("columns must be a positive integer");let n=new p(this.rows*e,this.columns*r);for(let t=0;t<e;t++)for(let e=0;e<r;e++)n.setSubMatrix(this,this.rows*t,this.columns*e);return n}fill(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){(0,c.zb)(this,t);let e=[];for(let r=0;r<this.columns;r++)e.push(this.get(t,r));return e}getRowVector(t){return p.rowVector(this.getRow(t))}setRow(t,e){(0,c.zb)(this,t),e=(0,c.on)(this,e);for(let r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){(0,c.zb)(this,t),(0,c.zb)(this,e);for(let r=0;r<this.columns;r++){let n=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,n)}return this}getColumn(t){(0,c.bp)(this,t);let e=[];for(let r=0;r<this.rows;r++)e.push(this.get(r,t));return e}getColumnVector(t){return p.columnVector(this.getColumn(t))}setColumn(t,e){(0,c.bp)(this,t),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){(0,c.bp)(this,t),(0,c.bp)(this,e);for(let r=0;r<this.rows;r++){let n=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,n)}return this}addRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){(0,c.zb)(this,t);for(let r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){(0,c.bp)(this,t);for(let r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let n=0;n<this.columns;n++)this.get(r,n)>t&&(t=this.get(r,n),e[0]=r,e[1]=n);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let n=0;n<this.columns;n++)this.get(r,n)<t&&(t=this.get(r,n),e[0]=r,e[1]=n);return e}maxRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let n=1;n<this.columns;n++)this.get(t,n)>e&&(e=this.get(t,n),r[1]=n);return r}minRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let n=1;n<this.columns;n++)this.get(t,n)<e&&(e=this.get(t,n),r[1]=n);return r}maxColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let n=1;n<this.rows;n++)this.get(n,t)>e&&(e=this.get(n,t),r[0]=n);return r}minColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let n=1;n<this.rows;n++)this.get(n,t)<e&&(e=this.get(n,t),r[0]=n);return r}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let r=0;r<t;r++)e.push(this.get(r,r));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let r=0;r<this.columns;r++)e+=this.get(t,r)*this.get(t,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){f.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let r=0;for(let n=0;n<e.length;n++)r+=e[n]*t[n];return r}mmul(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,n=t.columns,i=new p(e,n),o=new Float64Array(r);for(let s=0;s<n;s++){for(let e=0;e<r;e++)o[e]=t.get(e,s);for(let t=0;t<e;t++){let e=0;for(let n=0;n<r;n++)e+=this.get(t,n)*o[n];i.set(t,s,e)}}return i}strassen2x2(t){t=p.checkMatrix(t);let e=new p(2,2);const r=this.get(0,0),n=t.get(0,0),i=this.get(0,1),o=t.get(0,1),s=this.get(1,0),a=t.get(1,0),h=this.get(1,1),l=t.get(1,1),u=(r+h)*(n+l),c=(s+h)*n,f=r*(o-l),d=h*(a-n),m=(r+i)*l,g=u+d-m+(i-h)*(a+l),w=f+m,b=c+d,y=u-c+f+(s-r)*(n+o);return e.set(0,0,g),e.set(0,1,w),e.set(1,0,b),e.set(1,1,y),e}strassen3x3(t){t=p.checkMatrix(t);let e=new p(3,3);const r=this.get(0,0),n=this.get(0,1),i=this.get(0,2),o=this.get(1,0),s=this.get(1,1),a=this.get(1,2),h=this.get(2,0),l=this.get(2,1),u=this.get(2,2),c=t.get(0,0),f=t.get(0,1),d=t.get(0,2),m=t.get(1,0),g=t.get(1,1),w=t.get(1,2),b=t.get(2,0),y=t.get(2,1),v=t.get(2,2),x=(r-o)*(-f+g),_=(-r+o+s)*(c-f+g),k=(o+s)*(-c+f),A=r*c,M=(-r+h+l)*(c-d+w),E=(-r+h)*(d-w),S=(h+l)*(-c+d),C=(-i+l+u)*(g+b-y),I=(i-u)*(g-y),P=i*b,D=(l+u)*(-b+y),T=(-i+s+a)*(w+b-v),R=(i-a)*(w-v),B=(s+a)*(-b+v),U=A+P+n*m,O=(r+n+i-o-s-l-u)*g+_+k+A+C+P+D,L=A+M+S+(r+n+i-s-a-h-l)*w+P+T+B,F=x+s*(-c+f+m-g-w-b+v)+_+A+P+T+R,N=x+_+k+A+a*y,z=P+T+R+B+o*d,j=A+M+E+l*(-c+d+m-g-w-b+y)+C+I+P,V=C+I+P+D+h*f,Y=A+M+E+S+u*v;return e.set(0,0,U),e.set(0,1,O),e.set(0,2,L),e.set(1,0,F),e.set(1,1,N),e.set(1,2,z),e.set(2,0,j),e.set(2,1,V),e.set(2,2,Y),e}mmulStrassen(t){t=p.checkMatrix(t);let e=this.clone(),r=e.rows,n=e.columns,i=t.rows,o=t.columns;function s(t,e,r){let n=t.rows,i=t.columns;if(n===e&&i===r)return t;{let n=f.zeros(e,r);return n=n.setSubMatrix(t,0,0),n}}n!==i&&console.warn(`Multiplying ${r} x ${n} and ${i} x ${o} matrix: dimensions do not match.`);let a=Math.max(r,i),h=Math.max(n,o);return e=s(e,a,h),function t(e,r,n,i){if(n<=512||i<=512)return e.mmul(r);n%2==1&&i%2==1?(e=s(e,n+1,i+1),r=s(r,n+1,i+1)):n%2==1?(e=s(e,n+1,i),r=s(r,n+1,i)):i%2==1&&(e=s(e,n,i+1),r=s(r,n,i+1));let o=parseInt(e.rows/2,10),a=parseInt(e.columns/2,10),h=e.subMatrix(0,o-1,0,a-1),l=r.subMatrix(0,o-1,0,a-1),u=e.subMatrix(0,o-1,a,e.columns-1),c=r.subMatrix(0,o-1,a,r.columns-1),d=e.subMatrix(o,e.rows-1,0,a-1),p=r.subMatrix(o,r.rows-1,0,a-1),m=e.subMatrix(o,e.rows-1,a,e.columns-1),g=r.subMatrix(o,r.rows-1,a,r.columns-1),w=t(f.add(h,m),f.add(l,g),o,a),b=t(f.add(d,m),l,o,a),y=t(h,f.sub(c,g),o,a),v=t(m,f.sub(p,l),o,a),x=t(f.add(h,u),g,o,a),_=t(f.sub(d,h),f.add(l,c),o,a),k=t(f.sub(u,m),f.add(p,g),o,a),A=f.add(w,v);A.sub(x),A.add(k);let M=f.add(y,x),E=f.add(b,v),S=f.sub(w,b);S.add(y),S.add(_);let C=f.zeros(2*A.rows,2*A.columns);return C=C.setSubMatrix(A,0,0),C=C.setSubMatrix(M,A.rows,0),C=C.setSubMatrix(E,0,A.columns),C=C.setSubMatrix(S,A.rows,A.columns),C.subMatrix(0,n-1,0,i-1)}(e,t=s(t,a,h),a,h)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let n=new p(this.rows,this.columns);for(let t=0;t<this.rows;t++){const i=this.getRow(t);i.length>0&&s(i,{min:e,max:r,output:i}),n.setRow(t,i)}return n}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let n=new p(this.rows,this.columns);for(let t=0;t<this.columns;t++){const i=this.getColumn(t);i.length&&s(i,{min:e,max:r,output:i}),n.setColumn(t,i)}return n}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let r=0;r<t;r++){let t=this.get(e,r),n=this.get(e,this.columns-1-r);this.set(e,r,n),this.set(e,this.columns-1-r,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let r=0;r<t;r++){let t=this.get(r,e),n=this.get(this.rows-1-r,e);this.set(r,e,n),this.set(this.rows-1-r,e,t)}return this}kroneckerProduct(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,n=t.rows,i=t.columns,o=new p(e*n,r*i);for(let s=0;s<e;s++)for(let e=0;e<r;e++)for(let r=0;r<n;r++)for(let a=0;a<i;a++)o.set(n*s+r,i*e+a,this.get(s,e)*t.get(r,a));return o}kroneckerSum(t){if(t=p.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,r=t.rows,n=this.kroneckerProduct(p.eye(r,r)),i=p.eye(e,e).kroneckerProduct(t);return n.add(i)}transpose(){let t=new p(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t=d){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=d){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,n){(0,c.J5)(this,t,e,r,n);let i=new p(e-t+1,n-r+1);for(let o=t;o<=e;o++)for(let e=r;e<=n;e++)i.set(o-t,e-r,this.get(o,e));return i}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError("Argument out of range");let n=new p(t.length,r-e+1);for(let i=0;i<t.length;i++)for(let o=e;o<=r;o++){if(t[i]<0||t[i]>=this.rows)throw new RangeError(`Row index out of range: ${t[i]}`);n.set(i,o-e,this.get(t[i],o))}return n}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError("Argument out of range");let n=new p(r-e+1,t.length);for(let i=0;i<t.length;i++)for(let o=e;o<=r;o++){if(t[i]<0||t[i]>=this.columns)throw new RangeError(`Column index out of range: ${t[i]}`);n.set(o-e,i,this.get(o,t[i]))}return n}setSubMatrix(t,e,r){if((t=p.checkMatrix(t)).isEmpty())return this;let n=e+t.rows-1,i=r+t.columns-1;(0,c.J5)(this,e,n,r,i);for(let n=0;n<t.rows;n++)for(let i=0;i<t.columns;i++)this.set(e+n,r+i,t.get(n,i));return this}selection(t,e){let r=(0,c.N2)(this,t,e),n=new p(t.length,e.length);for(let t=0;t<r.row.length;t++){let e=r.row[t];for(let i=0;i<r.column.length;i++){let o=r.column[i];n.set(t,i,this.get(e,o))}}return n}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let r=0;r<t;r++)e+=this.get(r,r);return e}clone(){let t=new p(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}sum(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows);for(let r=0;r<t.rows;++r)for(let n=0;n<t.columns;++n)e[r]+=t.get(r,n);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns);for(let r=0;r<t.rows;++r)for(let n=0;n<t.columns;++n)e[n]+=t.get(r,n);return e}(this);case void 0:return function(t){let e=0;for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)e+=t.get(r,n);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows,1);for(let r=0;r<t.rows;++r)for(let n=0;n<t.columns;++n)e[r]*=t.get(r,n);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns,1);for(let r=0;r<t.rows;++r)for(let n=0;n<t.columns;++n)e[n]*=t.get(r,n);return e}(this);case void 0:return function(t){let e=1;for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)e*=t.get(r,n);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:r=!0,mean:n=this.mean(t)}=e;if("boolean"!=typeof r)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(n))throw new TypeError("mean must be an array");return function(t,e,r){const n=t.rows,i=t.columns,o=[];for(let s=0;s<n;s++){let n=0,a=0,h=0;for(let e=0;e<i;e++)h=t.get(s,e)-r[s],n+=h,a+=h*h;e?o.push((a-n*n/i)/(i-1)):o.push((a-n*n/i)/i)}return o}(this,r,n);case"column":if(!Array.isArray(n))throw new TypeError("mean must be an array");return function(t,e,r){const n=t.rows,i=t.columns,o=[];for(let s=0;s<i;s++){let i=0,a=0,h=0;for(let e=0;e<n;e++)h=t.get(e,s)-r[s],i+=h,a+=h*h;e?o.push((a-i*i/n)/(n-1)):o.push((a-i*i/n)/n)}return o}(this,r,n);case void 0:if("number"!=typeof n)throw new TypeError("mean must be a number");return function(t,e,r){const n=t.rows,i=t.columns,o=n*i;let s=0,a=0,h=0;for(let e=0;e<n;e++)for(let n=0;n<i;n++)h=t.get(e,n)-r,s+=h,a+=h*h;return e?(a-s*s/o)/(o-1):(a-s*s/o)/o}(this,r,n);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const r=this.variance(t,e);if(void 0===t)return Math.sqrt(r);for(let t=0;t<r.length;t++)r[t]=Math.sqrt(r[t]);return r}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:r=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)-e[r])}(this,r),this;case"column":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)-e[n])}(this,r),this;case void 0:if("number"!=typeof r)throw new TypeError("center must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)-e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let r=e.scale;switch(t){case"row":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.rows;r++){let n=0;for(let e=0;e<t.columns;e++)n+=Math.pow(t.get(r,e),2)/(t.columns-1);e.push(Math.sqrt(n))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)/e[r])}(this,r),this;case"column":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.columns;r++){let n=0;for(let e=0;e<t.rows;e++)n+=Math.pow(t.get(e,r),2)/(t.rows-1);e.push(Math.sqrt(n))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)/e[n])}(this,r),this;case void 0:if(void 0===r)r=function(t){const e=t.size-1;let r=0;for(let n=0;n<t.columns;n++)for(let i=0;i<t.rows;i++)r+=Math.pow(t.get(i,n),2)/e;return Math.sqrt(r)}(this);else if("number"!=typeof r)throw new TypeError("scale must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let n=0;n<t.columns;n++)t.set(r,n,t.get(r,n)/e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return l(this,t)}}function d(t,e){return t-e}f.prototype.klass="Matrix","undefined"!=typeof Symbol&&(f.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return l(this)}),f.random=f.rand,f.randomInt=f.randInt,f.diagonal=f.diag,f.prototype.diagonal=f.prototype.diag,f.identity=f.eye,f.prototype.negate=f.prototype.neg,f.prototype.tensorProduct=f.prototype.kroneckerProduct;class p extends f{constructor(t,e){if(super(),p.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let r=0;r<t;r++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const r=t;if("number"!=typeof(e=(t=r.length)?r[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let n=0;n<t;n++){if(r[n].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(r[n]))}}}this.rows=t,this.columns=e}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}removeRow(t){return(0,c.zb)(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),(0,c.zb)(this,t,!0),e=Float64Array.from((0,c.on)(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){(0,c.bp)(this,t);for(let e=0;e<this.rows;e++){const r=new Float64Array(this.columns-1);for(let n=0;n<t;n++)r[n]=this.data[e][n];for(let n=t+1;n<this.columns;n++)r[n-1]=this.data[e][n];this.data[e]=r}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),(0,c.bp)(this,t,!0),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++){const n=new Float64Array(this.columns+1);let i=0;for(;i<t;i++)n[i]=this.data[r][i];for(n[i++]=e[r];i<this.columns+1;i++)n[i]=this.data[r][i-1];this.data[r]=n}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t.get(e,r));return this},t.add=function(t,r){return new e(t).add(r)},t.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t.get(e,r));return this},t.sub=function(t,r){return new e(t).sub(r)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t.get(e,r));return this},t.mul=function(t,r){return new e(t).mul(r)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t.get(e,r));return this},t.div=function(t,r){return new e(t).div(r)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t.get(e,r));return this},t.mod=function(t,r){return new e(t).mod(r)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t.get(e,r));return this},t.and=function(t,r){return new e(t).and(r)},t.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t.get(e,r));return this},t.or=function(t,r){return new e(t).or(r)},t.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t.get(e,r));return this},t.xor=function(t,r){return new e(t).xor(r)},t.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t.get(e,r));return this},t.leftShift=function(t,r){return new e(t).leftShift(r)},t.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t.get(e,r));return this},t.signPropagatingRightShift=function(t,r){return new e(t).signPropagatingRightShift(r)},t.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t.get(e,r));return this},t.rightShift=function(t,r){return new e(t).rightShift(r)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,r){return new e(t).pow(r)},t.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t.get(e,r)));return this}}(f,p)},3018:(t,e,r)=>{"use strict";function n(t,e,r){let n=r?t.rows:t.rows-1;if(e<0||e>n)throw new RangeError("Row index out of range")}function i(t,e,r){let n=r?t.columns:t.columns-1;if(e<0||e>n)throw new RangeError("Column index out of range")}function o(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function s(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function a(t,e,r){return{row:h(t,e),column:l(t,r)}}function h(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some((e=>e<0||e>=t.rows)))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function l(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some((e=>e<0||e>=t.columns)))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function u(t,e,r,n,i){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(f("startRow",e),f("endRow",r),f("startColumn",n),f("endColumn",i),e>r||n>i||e<0||e>=t.rows||r<0||r>=t.rows||n<0||n>=t.columns||i<0||i>=t.columns)throw new RangeError("Submatrix indices are out of range")}function c(t,e=0){let r=[];for(let n=0;n<t;n++)r.push(e);return r}function f(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function d(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}r.d(e,{zb:()=>n,bp:()=>i,on:()=>o,Um:()=>s,N2:()=>a,ZR:()=>h,g:()=>l,J5:()=>u,B4:()=>c,cT:()=>d})},4920:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(1883);class i extends n.X{constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}}},5922:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(4920);class i extends n.Z{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}},1548:(t,e,r)=>{"use strict";r.d(e,{Z:()=>i});var n=r(1883);class i extends n.X{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}}},2664:t=>{t.exports=function(t,e){t=t||0;for(var r=new Array(t),n=0;n<t;n++)r[n]=e;return r}},995:t=>{t.exports=function(t){return 0===t?1:(t--,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16))}},6563:(t,e)=>{"use strict";function r(t){if("number"!=typeof t)throw new TypeError("Expected a number")}e.j=(t,e)=>(r(t),r(e),Number.isNaN(t)?-1:Number.isNaN(e)?1:t-e)},146:(t,e,r)=>{"use strict";var n=r(8005),i=r(6740),o=r(5442),s=r(7972);function a(t,e,r,n){return function(r,i,o){var s=t(t(e(i[1],o[0]),e(-o[1],i[0])),t(e(r[1],i[0]),e(-i[1],r[0]))),a=t(e(r[1],o[0]),e(-o[1],r[0])),h=n(s,a);return h[h.length-1]}}function h(t,e,r,n){return function(i,o,s,a){var h=t(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),o[2]),t(r(t(e(o[1],a[0]),e(-a[1],o[0])),-s[2]),r(t(e(o[1],s[0]),e(-s[1],o[0])),a[2]))),t(r(t(e(o[1],a[0]),e(-a[1],o[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),a[2])))),l=t(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-s[2]),r(t(e(i[1],s[0]),e(-s[1],i[0])),a[2]))),t(r(t(e(o[1],s[0]),e(-s[1],o[0])),i[2]),t(r(t(e(i[1],s[0]),e(-s[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),s[2])))),u=n(h,l);return u[u.length-1]}}function l(t,e,r,n){return function(i,o,s,a,h){var l=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),o[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),-s[3]),r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-s[2]),r(t(e(o[1],s[0]),e(-s[1],o[0])),h[2]))),a[3]))),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),o[2]),t(r(t(e(o[1],a[0]),e(-a[1],o[0])),-s[2]),r(t(e(o[1],s[0]),e(-s[1],o[0])),a[2]))),-h[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),i[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-a[2]),r(t(e(i[1],a[0]),e(-a[1],i[0])),h[2]))),-o[3])))),t(t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),h[2]))),a[3]),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),a[2]))),-h[3]),r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),o[2]),t(r(t(e(o[1],a[0]),e(-a[1],o[0])),-s[2]),r(t(e(o[1],s[0]),e(-s[1],o[0])),a[2]))),i[3]))),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-s[2]),r(t(e(i[1],s[0]),e(-s[1],i[0])),a[2]))),-o[3]),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),a[2]))),s[3]),r(t(r(t(e(o[1],s[0]),e(-s[1],o[0])),i[2]),t(r(t(e(i[1],s[0]),e(-s[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),s[2]))),-a[3]))))),u=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),i[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-a[2]),r(t(e(i[1],a[0]),e(-a[1],i[0])),h[2]))),-s[3])),t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-s[2]),r(t(e(i[1],s[0]),e(-s[1],i[0])),h[2]))),a[3]),r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),i[2]),t(r(t(e(i[1],a[0]),e(-a[1],i[0])),-s[2]),r(t(e(i[1],s[0]),e(-s[1],i[0])),a[2]))),-h[3]))),t(t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-s[2]),r(t(e(o[1],s[0]),e(-s[1],o[0])),h[2]))),i[3]),r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-s[2]),r(t(e(i[1],s[0]),e(-s[1],i[0])),h[2]))),-o[3])),t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),i[2]),t(r(t(e(i[1],h[0]),e(-h[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),h[2]))),s[3]),r(t(r(t(e(o[1],s[0]),e(-s[1],o[0])),i[2]),t(r(t(e(i[1],s[0]),e(-s[1],i[0])),-o[2]),r(t(e(i[1],o[0]),e(-o[1],i[0])),s[2]))),-h[3])))),c=n(l,u);return c[c.length-1]}}function u(t){return(3===t?a:4===t?h:l)(i,n,o,s)}var c=u(3),f=u(4),d=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,r){var n,i=(t[1]-r[1])*(e[0]-r[0]),o=(t[0]-r[0])*(e[1]-r[1]),s=i-o;if(i>0){if(o<=0)return s;n=i+o}else{if(!(i<0))return s;if(o>=0)return s;n=-(i+o)}var a=33306690738754716e-32*n;return s>=a||s<=-a?s:c(t,e,r)},function(t,e,r,n){var i=t[0]-n[0],o=e[0]-n[0],s=r[0]-n[0],a=t[1]-n[1],h=e[1]-n[1],l=r[1]-n[1],u=t[2]-n[2],c=e[2]-n[2],d=r[2]-n[2],p=o*l,m=s*h,g=s*a,w=i*l,b=i*h,y=o*a,v=u*(p-m)+c*(g-w)+d*(b-y),x=7771561172376103e-31*((Math.abs(p)+Math.abs(m))*Math.abs(u)+(Math.abs(g)+Math.abs(w))*Math.abs(c)+(Math.abs(b)+Math.abs(y))*Math.abs(d));return v>x||-v>x?v:f(t,e,r,n)}];function p(t){var e=d[t.length];return e||(e=d[t.length]=u(t.length)),e.apply(void 0,t)}function m(t,e,r,n,i,o,s){return function(e,r,a,h,l){switch(arguments.length){case 0:case 1:return 0;case 2:return n(e,r);case 3:return i(e,r,a);case 4:return o(e,r,a,h);case 5:return s(e,r,a,h,l)}for(var u=new Array(arguments.length),c=0;c<arguments.length;++c)u[c]=arguments[c];return t(u)}}!function(){for(;d.length<=5;)d.push(u(d.length));t.exports=m.apply(void 0,[p].concat(d));for(var e=0;e<=5;++e)t.exports[e]=d[e]}()},4707:(t,e,r)=>{t.exports=function(t,e){for(var r=e[0],i=e[1],o=t.length,s=1,a=o,h=0,l=o-1;h<a;l=h++){var u=t[h],c=t[l],f=u[1],d=c[1];if(d<f){if(d<i&&i<f){if(0===(g=n(u,c,e)))return 0;s^=0<g|0}else if(i===f){var p=(m=t[(h+1)%o])[1];if(f<p){if(0===(g=n(u,c,e)))return 0;s^=0<g|0}}}else if(f<d){if(f<i&&i<d){if(0===(g=n(u,c,e)))return 0;s^=g<0|0}else if(i===f){var m=t[(h+1)%o];if((p=m[1])<f){var g;if(0===(g=n(u,c,e)))return 0;s^=g<0|0}}}else if(i===f){var w=Math.min(u[0],c[0]),b=Math.max(u[0],c[0]);if(0===h){for(;l>0;){var y=(l+o-1)%o;if((_=t[y])[1]!==i)break;var v=_[0];w=Math.min(w,v),b=Math.max(b,v),l=y}if(0===l)return w<=r&&r<=b?0:1;a=l+1}for(var x=t[(l+o-1)%o][1];h+1<a;){var _;if((_=t[h+1])[1]!==i)break;v=_[0],w=Math.min(w,v),b=Math.max(b,v),h+=1}if(w<=r&&r<=b)return 0;var k=t[(h+1)%o][1];r<w&&x<i!=k<i&&(s^=1)}}return 2*s-1};var n=r(146)},5442:(t,e,r)=>{"use strict";var n=r(8005),i=r(6359);t.exports=function(t,e){var r=t.length;if(1===r){var o=n(t[0],e);return o[0]?o:[o[1]]}var s=new Array(2*r),a=[.1,.1],h=[.1,.1],l=0;n(t[0],e,a),a[0]&&(s[l++]=a[0]);for(var u=1;u<r;++u){n(t[u],e,h);var c=a[1];i(c,h[0],a),a[0]&&(s[l++]=a[0]);var f=h[1],d=a[1],p=f+d,m=d-(p-f);a[1]=p,m&&(s[l++]=m)}return a[1]&&(s[l++]=a[1]),0===l&&(s[l++]=0),s.length=l,s}},7972:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,i=t-(r-n)+(e-n);return i?[i,r]:[r]}(t[0],-e[0]);var i,o,s=new Array(r+n),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=-e[l],p=u(d);f<p?(o=c,(h+=1)<r&&(f=u(c=t[h]))):(o=d,(l+=1)<n&&(p=u(d=-e[l]))),h<r&&f<p||l>=n?(i=c,(h+=1)<r&&(f=u(c=t[h]))):(i=d,(l+=1)<n&&(p=u(d=-e[l])));for(var m,g,w=i+o,b=w-i,y=o-b,v=y,x=w;h<r&&l<n;)f<p?(i=c,(h+=1)<r&&(f=u(c=t[h]))):(i=d,(l+=1)<n&&(p=u(d=-e[l]))),(y=(o=v)-(b=(w=i+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m;for(;h<r;)(y=(o=v)-(b=(w=(i=c)+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m,(h+=1)<r&&(c=t[h]);for(;l<n;)(y=(o=v)-(b=(w=(i=d)+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m,(l+=1)<n&&(d=-e[l]);return v&&(s[a++]=v),x&&(s[a++]=x),a||(s[a++]=0),s.length=a,s}},6740:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,n=0|e.length;if(1===r&&1===n)return function(t,e){var r=t+e,n=r-t,i=t-(r-n)+(e-n);return i?[i,r]:[r]}(t[0],e[0]);var i,o,s=new Array(r+n),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=e[l],p=u(d);f<p?(o=c,(h+=1)<r&&(f=u(c=t[h]))):(o=d,(l+=1)<n&&(p=u(d=e[l]))),h<r&&f<p||l>=n?(i=c,(h+=1)<r&&(f=u(c=t[h]))):(i=d,(l+=1)<n&&(p=u(d=e[l])));for(var m,g,w=i+o,b=w-i,y=o-b,v=y,x=w;h<r&&l<n;)f<p?(i=c,(h+=1)<r&&(f=u(c=t[h]))):(i=d,(l+=1)<n&&(p=u(d=e[l]))),(y=(o=v)-(b=(w=i+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m;for(;h<r;)(y=(o=v)-(b=(w=(i=c)+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m,(h+=1)<r&&(c=t[h]);for(;l<n;)(y=(o=v)-(b=(w=(i=d)+o)-i))&&(s[a++]=y),v=x-((m=x+w)-(g=m-x))+(w-g),x=m,(l+=1)<n&&(d=e[l]);return v&&(s[a++]=v),x&&(s[a++]=x),a||(s[a++]=0),s.length=a,s}},9666:(t,e,r)=>{"use strict";r.r(e),r.d(e,{ArgumentOutOfRangeError:()=>K.W,AsyncSubject:()=>w.c,BehaviorSubject:()=>m.X,ConnectableObservable:()=>i.c,EMPTY:()=>gt.E,EmptyError:()=>$.K,NEVER:()=>Ft,NotFoundError:()=>J.d,Notification:()=>Y.P_,NotificationKind:()=>Y.W7,ObjectUnsubscribedError:()=>tt.N,Observable:()=>n.y,ReplaySubject:()=>g.t,Scheduler:()=>j.b,SequenceError:()=>et.c,Subject:()=>p.x,Subscriber:()=>V.Lv,Subscription:()=>s.w0,TimeoutError:()=>rt.W,UnsubscriptionError:()=>nt.B,VirtualAction:()=>z,VirtualTimeScheduler:()=>N,animationFrame:()=>F,animationFrameScheduler:()=>L,animationFrames:()=>u,asap:()=>I,asapScheduler:()=>C,async:()=>P.P,asyncScheduler:()=>P.z,audit:()=>re.U,auditTime:()=>ne.e,bindCallback:()=>lt,bindNodeCallback:()=>ut,buffer:()=>ie.f,bufferCount:()=>oe.j,bufferTime:()=>se.e,bufferToggle:()=>ae.P,bufferWhen:()=>he.R,catchError:()=>le.K,combineAll:()=>ue.c,combineLatest:()=>ct.a,combineLatestAll:()=>ce.h,combineLatestWith:()=>fe.V,concat:()=>ft.z,concatAll:()=>de.u,concatMap:()=>pe.b,concatMapTo:()=>me.w,concatWith:()=>ge.T,config:()=>ee.v,connect:()=>we.$,connectable:()=>mt,count:()=>be.Q,debounce:()=>ye.D,debounceTime:()=>ve.b,defaultIfEmpty:()=>xe.d,defer:()=>dt.P,delay:()=>_e.g,delayWhen:()=>ke.j,dematerialize:()=>Ae.D,distinct:()=>Me.E,distinctUntilChanged:()=>Ee.x,distinctUntilKeyChanged:()=>Se.g,elementAt:()=>Ce.T,empty:()=>gt.c,endWith:()=>Ie.l,every:()=>Pe.y,exhaust:()=>De.b,exhaustAll:()=>Te.Y,exhaustMap:()=>Re.z,expand:()=>Be.j,filter:()=>qt.h,finalize:()=>Ue.x,find:()=>Oe.s,findIndex:()=>Le.c,first:()=>Fe.P,firstValueFrom:()=>Q,flatMap:()=>Ze.V,forkJoin:()=>_t,from:()=>kt.D,fromEvent:()=>It,fromEventPattern:()=>Dt,generate:()=>Rt,groupBy:()=>Ne.v,identity:()=>q.y,ignoreElements:()=>ze.l,iif:()=>Bt,interval:()=>Ut.F,isEmpty:()=>je.x,isObservable:()=>G,last:()=>Ve.Z,lastValueFrom:()=>H,map:()=>Ye.U,mapTo:()=>Xe.h,materialize:()=>We.i,max:()=>qe.F,merge:()=>Lt,mergeAll:()=>Ot.J,mergeMap:()=>At.z,mergeMapTo:()=>Ge.j,mergeScan:()=>$e.f,mergeWith:()=>He.b,min:()=>Qe.V,multicast:()=>Ke.O,never:()=>Nt,noop:()=>W.Z,observable:()=>o.L,observeOn:()=>at.Q,of:()=>zt.of,onErrorResumeNext:()=>Yt,pairs:()=>Xt,pairwise:()=>Je.G,partition:()=>Zt,pipe:()=>X.z,pluck:()=>tr.j,publish:()=>er.n,publishBehavior:()=>rr.n,publishLast:()=>nr.C,publishReplay:()=>ir._,queue:()=>B,queueScheduler:()=>R,race:()=>Gt.S,raceWith:()=>or.Q,range:()=>$t,reduce:()=>sr.u,refCount:()=>cr.x,repeat:()=>ar.r,repeatWhen:()=>hr.a,retry:()=>lr.X,retryWhen:()=>ur.a,sample:()=>fr.U,sampleTime:()=>dr.b,scan:()=>pr.R,scheduled:()=>te.x,sequenceEqual:()=>mr.N,share:()=>gr.B,shareReplay:()=>wr.d,single:()=>br.Z,skip:()=>yr.T,skipLast:()=>vr.W,skipUntil:()=>xr.u,skipWhile:()=>_r.n,startWith:()=>kr.O,subscribeOn:()=>ot.R,switchAll:()=>Ar.B,switchMap:()=>Mr.w,switchMapTo:()=>Er.c,switchScan:()=>Sr.w,take:()=>Cr.q,takeLast:()=>Ir.h,takeUntil:()=>Pr.R,takeWhile:()=>Dr.o,tap:()=>Tr.b,throttle:()=>Rr.P,throttleTime:()=>Br.p,throwError:()=>Ht._,throwIfEmpty:()=>Ur.T,timeInterval:()=>Or.J,timeout:()=>rt.V,timeoutWith:()=>Lr.L,timer:()=>Qt.H,timestamp:()=>Fr.A,toArray:()=>Nr.q,using:()=>Kt,window:()=>zr.u,windowCount:()=>jr.r,windowTime:()=>Vr.I,windowToggle:()=>Yr.j,windowWhen:()=>Xr.Q,withLatestFrom:()=>Wr.M,zip:()=>Jt.$,zipAll:()=>qr.h,zipWith:()=>Zr.y});var n=r(230),i=r(2537),o=r(6766),s=r(204),a={now:function(){return(a.delegate||performance).now()},delegate:void 0},h=r(5987),l={schedule:function(t){var e=requestAnimationFrame,r=cancelAnimationFrame,n=l.delegate;n&&(e=n.requestAnimationFrame,r=n.cancelAnimationFrame);var i=e((function(e){r=void 0,t(e)}));return new s.w0((function(){return null==r?void 0:r(i)}))},requestAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=l.delegate;return((null==r?void 0:r.requestAnimationFrame)||requestAnimationFrame).apply(void 0,(0,h.ev)([],(0,h.CR)(t)))},cancelAnimationFrame:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=l.delegate;return((null==r?void 0:r.cancelAnimationFrame)||cancelAnimationFrame).apply(void 0,(0,h.ev)([],(0,h.CR)(t)))},delegate:void 0};function u(t){return t?c(t):d}function c(t){var e=l.schedule;return new n.y((function(r){var n=new s.w0,i=t||a,o=i.now(),h=function(s){var a=i.now();r.next({timestamp:t?a:s,elapsed:a-o}),r.closed||n.add(e(h))};return n.add(e(h)),n}))}var f,d=c(),p=r(9248),m=r(6515),g=r(3),w=r(2207),b=r(8337),y=1,v={};function x(t){return t in v&&(delete v[t],!0)}var _=function(t){var e=y++;return v[e]=!0,f||(f=Promise.resolve()),f.then((function(){return x(e)&&t()})),e},k=function(t){x(t)},A={setImmediate:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=A.delegate;return((null==r?void 0:r.setImmediate)||_).apply(void 0,(0,h.ev)([],(0,h.CR)(t)))},clearImmediate:function(t){var e=A.delegate;return((null==e?void 0:e.clearImmediate)||k)(t)},delegate:void 0},M=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return(0,h.ZT)(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e._scheduled||(e._scheduled=A.setImmediate(e.flush.bind(e,void 0))))},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(A.clearImmediate(r),e._scheduled=void 0)},e}(b.o),E=r(597),S=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,h.ZT)(e,t),e.prototype.flush=function(t){this._active=!0,this._scheduled=void 0;var e,r=this.actions,n=-1;t=t||r.shift();var i=r.length;do{if(e=t.execute(t.state,t.delay))break}while(++n<i&&(t=r.shift()));if(this._active=!1,e){for(;++n<i&&(t=r.shift());)t.unsubscribe();throw e}},e}(E.v),C=new S(M),I=C,P=r(7991),D=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return(0,h.ZT)(e,t),e.prototype.schedule=function(e,r){return void 0===r&&(r=0),r>0?t.prototype.schedule.call(this,e,r):(this.delay=r,this.state=e,this.scheduler.flush(this),this)},e.prototype.execute=function(e,r){return r>0||this.closed?t.prototype.execute.call(this,e,r):this._execute(e,r)},e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0?t.prototype.requestAsyncId.call(this,e,r,n):e.flush(this)},e}(b.o),T=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,h.ZT)(e,t),e}(E.v),R=new T(D),B=R,U=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n}return(0,h.ZT)(e,t),e.prototype.requestAsyncId=function(e,r,n){return void 0===n&&(n=0),null!==n&&n>0?t.prototype.requestAsyncId.call(this,e,r,n):(e.actions.push(this),e._scheduled||(e._scheduled=l.requestAnimationFrame((function(){return e.flush(void 0)}))))},e.prototype.recycleAsyncId=function(e,r,n){if(void 0===n&&(n=0),null!=n&&n>0||null==n&&this.delay>0)return t.prototype.recycleAsyncId.call(this,e,r,n);0===e.actions.length&&(l.cancelAnimationFrame(r),e._scheduled=void 0)},e}(b.o),O=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,h.ZT)(e,t),e.prototype.flush=function(t){this._active=!0,this._scheduled=void 0;var e,r=this.actions,n=-1;t=t||r.shift();var i=r.length;do{if(e=t.execute(t.state,t.delay))break}while(++n<i&&(t=r.shift()));if(this._active=!1,e){for(;++n<i&&(t=r.shift());)t.unsubscribe();throw e}},e}(E.v),L=new O(U),F=L,N=function(t){function e(e,r){void 0===e&&(e=z),void 0===r&&(r=1/0);var n=t.call(this,e,(function(){return n.frame}))||this;return n.maxFrames=r,n.frame=0,n.index=-1,n}return(0,h.ZT)(e,t),e.prototype.flush=function(){for(var t,e,r=this.actions,n=this.maxFrames;(e=r[0])&&e.delay<=n&&(r.shift(),this.frame=e.delay,!(t=e.execute(e.state,e.delay))););if(t){for(;e=r.shift();)e.unsubscribe();throw t}},e.frameTimeFactor=10,e}(E.v),z=function(t){function e(e,r,n){void 0===n&&(n=e.index+=1);var i=t.call(this,e,r)||this;return i.scheduler=e,i.work=r,i.index=n,i.active=!0,i.index=e.index=n,i}return(0,h.ZT)(e,t),e.prototype.schedule=function(r,n){if(void 0===n&&(n=0),Number.isFinite(n)){if(!this.id)return t.prototype.schedule.call(this,r,n);this.active=!1;var i=new e(this.scheduler,this.work);return this.add(i),i.schedule(r,n)}return s.w0.EMPTY},e.prototype.requestAsyncId=function(t,r,n){void 0===n&&(n=0),this.delay=t.frame+n;var i=t.actions;return i.push(this),i.sort(e.sortActions),!0},e.prototype.recycleAsyncId=function(t,e,r){void 0===r&&(r=0)},e.prototype._execute=function(e,r){if(!0===this.active)return t.prototype._execute.call(this,e,r)},e.sortActions=function(t,e){return t.delay===e.delay?t.index===e.index?0:t.index>e.index?1:-1:t.delay>e.delay?1:-1},e}(b.o),j=r(5022),V=r(6267),Y=r(4029),X=r(2749),W=r(2967),q=r(278),Z=r(8474);function G(t){return!!t&&(t instanceof n.y||(0,Z.m)(t.lift)&&(0,Z.m)(t.subscribe))}var $=r(8084);function H(t,e){var r="object"==typeof e;return new Promise((function(n,i){var o,s=!1;t.subscribe({next:function(t){o=t,s=!0},error:i,complete:function(){s?n(o):r?n(e.defaultValue):i(new $.K)}})}))}function Q(t,e){var r="object"==typeof e;return new Promise((function(n,i){var o=new V.Hp({next:function(t){n(t),o.unsubscribe()},error:i,complete:function(){r?n(e.defaultValue):i(new $.K)}});t.subscribe(o)}))}var K=r(4192),J=r(2519),tt=r(9825),et=r(3791),rt=r(5211),nt=r(5948),it=r(4865),ot=r(8720),st=r(3211),at=r(9526);function ht(t,e,r,i){if(r){if(!(0,it.K)(r))return function(){for(var n=[],o=0;o<arguments.length;o++)n[o]=arguments[o];return ht(t,e,i).apply(this,n).pipe((0,st.Z)(r))};i=r}return i?function(){for(var r=[],n=0;n<arguments.length;n++)r[n]=arguments[n];return ht(t,e).apply(this,r).pipe((0,ot.R)(i),(0,at.Q)(i))}:function(){for(var r=this,i=[],o=0;o<arguments.length;o++)i[o]=arguments[o];var s=new w.c,a=!0;return new n.y((function(n){var o=s.subscribe(n);if(a){a=!1;var l=!1,u=!1;e.apply(r,(0,h.ev)((0,h.ev)([],(0,h.CR)(i)),[function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];if(t){var n=e.shift();if(null!=n)return void s.error(n)}s.next(1<e.length?e:e[0]),u=!0,l&&s.complete()}])),u&&s.complete(),l=!0}return o}))}}function lt(t,e,r){return ht(!1,t,e,r)}function ut(t,e,r){return ht(!0,t,e,r)}var ct=r(564),ft=r(6362),dt=r(9917),pt={connector:function(){return new p.x},resetOnDisconnect:!0};function mt(t,e){void 0===e&&(e=pt);var r=null,i=e.connector,o=e.resetOnDisconnect,s=void 0===o||o,a=i(),h=new n.y((function(t){return a.subscribe(t)}));return h.connect=function(){return r&&!r.closed||(r=(0,dt.P)((function(){return t})).subscribe(a),s&&r.add((function(){return a=i()}))),r},h}var gt=r(1545),wt=r(9061),bt=r(7878),yt=r(2457),vt=r(2566),xt=r(5210);function _t(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,yt.jO)(t),i=(0,wt.D)(t),o=i.args,s=i.keys,a=new n.y((function(t){var e=o.length;if(e)for(var r=new Array(e),n=e,i=e,a=function(e){var a=!1;(0,bt.Xf)(o[e]).subscribe(new vt.Q(t,(function(t){a||(a=!0,i--),r[e]=t}),(function(){return n--}),void 0,(function(){n&&a||(i||t.next(s?(0,xt.n)(s,r):r),t.complete())})))},h=0;h<e;h++)a(h);else t.complete()}));return r?a.pipe((0,st.Z)(r)):a}var kt=r(52),At=r(3994),Mt=r(5685),Et=["addListener","removeListener"],St=["addEventListener","removeEventListener"],Ct=["on","off"];function It(t,e,r,i){if((0,Z.m)(r)&&(i=r,r=void 0),i)return It(t,e,r).pipe((0,st.Z)(i));var o=(0,h.CR)(function(t){return(0,Z.m)(t.addEventListener)&&(0,Z.m)(t.removeEventListener)}(t)?St.map((function(n){return function(i){return t[n](e,i,r)}})):function(t){return(0,Z.m)(t.addListener)&&(0,Z.m)(t.removeListener)}(t)?Et.map(Pt(t,e)):function(t){return(0,Z.m)(t.on)&&(0,Z.m)(t.off)}(t)?Ct.map(Pt(t,e)):[],2),s=o[0],a=o[1];if(!s&&(0,Mt.z)(t))return(0,At.z)((function(t){return It(t,e,r)}))((0,bt.Xf)(t));if(!s)throw new TypeError("Invalid event target");return new n.y((function(t){var e=function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];return t.next(1<e.length?e:e[0])};return s(e),function(){return a(e)}}))}function Pt(t,e){return function(r){return function(n){return t[r](e,n)}}}function Dt(t,e,r){return r?Dt(t,e).pipe((0,st.Z)(r)):new n.y((function(r){var n=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return r.next(1===t.length?t[0]:t)},i=t(n);return(0,Z.m)(e)?function(){return e(n,i)}:void 0}))}var Tt=r(8077);function Rt(t,e,r,n,i){var o,s,a,l;function u(){var t;return(0,h.Jh)(this,(function(n){switch(n.label){case 0:t=l,n.label=1;case 1:return e&&!e(t)?[3,4]:[4,a(t)];case 2:n.sent(),n.label=3;case 3:return t=r(t),[3,1];case 4:return[2]}}))}return 1===arguments.length?(l=(o=t).initialState,e=o.condition,r=o.iterate,s=o.resultSelector,a=void 0===s?q.y:s,i=o.scheduler):(l=t,!n||(0,it.K)(n)?(a=q.y,i=n):a=n),(0,dt.P)(i?function(){return(0,Tt.Q)(u(),i)}:u)}function Bt(t,e,r){return(0,dt.P)((function(){return t()?e:r}))}var Ut=r(6697),Ot=r(4367);function Lt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,yt.yG)(t),n=(0,yt._6)(t,1/0),i=t;return i.length?1===i.length?(0,bt.Xf)(i[0]):(0,Ot.J)(n)((0,kt.D)(i,r)):gt.E}var Ft=new n.y(W.Z);function Nt(){return Ft}var zt=r(2817),jt=r(5873),Vt=r(8936);function Yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,jt.h)((0,Vt.k)(t))(gt.E)}function Xt(t,e){return(0,kt.D)(Object.entries(t),e)}var Wt=r(414),qt=r(4975);function Zt(t,e,r){return[(0,qt.h)(e,r)((0,bt.Xf)(t)),(0,qt.h)((0,Wt.f)(e,r))((0,bt.Xf)(t))]}var Gt=r(7901);function $t(t,e,r){if(null==e&&(e=t,t=0),e<=0)return gt.E;var i=e+t;return new n.y(r?function(e){var n=t;return r.schedule((function(){n<i?(e.next(n++),this.schedule()):e.complete()}))}:function(e){for(var r=t;r<i&&!e.closed;)e.next(r++);e.complete()})}var Ht=r(3610),Qt=r(6625);function Kt(t,e){return new n.y((function(r){var n=t(),i=e(n);return(i?(0,bt.Xf)(i):gt.E).subscribe(r),function(){n&&n.unsubscribe()}}))}var Jt=r(8234),te=r(5857),ee=r(3912),re=r(9070),ne=r(605),ie=r(7567),oe=r(7229),se=r(5315),ae=r(4626),he=r(4647),le=r(9878),ue=r(3775),ce=r(9619),fe=r(2602),de=r(9834),pe=r(1313),me=r(9536),ge=r(9527),we=r(1704),be=r(4698),ye=r(2574),ve=r(2965),xe=r(5700),_e=r(7782),ke=r(5284),Ae=r(5542),Me=r(5631),Ee=r(3741),Se=r(6482),Ce=r(3212),Ie=r(1491),Pe=r(4813),De=r(865),Te=r(9680),Re=r(6899),Be=r(9683),Ue=r(3286),Oe=r(4513),Le=r(8582),Fe=r(1458),Ne=r(6890),ze=r(533),je=r(6458),Ve=r(2487),Ye=r(9127),Xe=r(3833),We=r(5323),qe=r(497),Ze=r(8796),Ge=r(8902),$e=r(8603),He=r(9423),Qe=r(5877),Ke=r(5992),Je=r(6472),tr=r(7606),er=r(1145),rr=r(8372),nr=r(655),ir=r(8172),or=r(2383),sr=r(7270),ar=r(5696),hr=r(2101),lr=r(6371),ur=r(2237),cr=r(218),fr=r(26),dr=r(8622),pr=r(6542),mr=r(9033),gr=r(5583),wr=r(8515),br=r(4621),yr=r(7753),vr=r(2510),xr=r(3424),_r=r(7603),kr=r(6108),Ar=r(5826),Mr=r(4978),Er=r(8550),Sr=r(6934),Cr=r(4727),Ir=r(1320),Pr=r(3505),Dr=r(198),Tr=r(2006),Rr=r(5978),Br=r(9132),Ur=r(3815),Or=r(5444),Lr=r(3608),Fr=r(7185),Nr=r(62),zr=r(1804),jr=r(5383),Vr=r(3051),Yr=r(1235),Xr=r(8737),Wr=r(3428),qr=r(694),Zr=r(6810)},2207:(t,e,r)=>{"use strict";r.d(e,{c:()=>i});var n=r(5987),i=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e._value=null,e._hasValue=!1,e._isComplete=!1,e}return(0,n.ZT)(e,t),e.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,n=e._hasValue,i=e._value,o=e.thrownError,s=e.isStopped,a=e._isComplete;r?t.error(o):(s||a)&&(n&&t.next(i),t.complete())},e.prototype.next=function(t){this.isStopped||(this._value=t,this._hasValue=!0)},e.prototype.complete=function(){var e=this,r=e._hasValue,n=e._value;e._isComplete||(this._isComplete=!0,r&&t.prototype.next.call(this,n),t.prototype.complete.call(this))},e}(r(9248).x)},6515:(t,e,r)=>{"use strict";r.d(e,{X:()=>i});var n=r(5987),i=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return(0,n.ZT)(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){var t=this,e=t.hasError,r=t.thrownError,n=t._value;if(e)throw r;return this._throwIfClosed(),n},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(r(9248).x)},4029:(t,e,r)=>{"use strict";r.d(e,{W7:()=>n,P_:()=>h,kV:()=>l});var n,i=r(1545),o=r(2817),s=r(3610),a=r(8474);!function(t){t.NEXT="N",t.ERROR="E",t.COMPLETE="C"}(n||(n={}));var h=function(){function t(t,e,r){this.kind=t,this.value=e,this.error=r,this.hasValue="N"===t}return t.prototype.observe=function(t){return l(this,t)},t.prototype.do=function(t,e,r){var n=this,i=n.kind,o=n.value,s=n.error;return"N"===i?null==t?void 0:t(o):"E"===i?null==e?void 0:e(s):null==r?void 0:r()},t.prototype.accept=function(t,e,r){var n;return(0,a.m)(null===(n=t)||void 0===n?void 0:n.next)?this.observe(t):this.do(t,e,r)},t.prototype.toObservable=function(){var t=this,e=t.kind,r=t.value,n=t.error,a="N"===e?(0,o.of)(r):"E"===e?(0,s._)((function(){return n})):"C"===e?i.E:0;if(!a)throw new TypeError("Unexpected notification kind "+e);return a},t.createNext=function(e){return new t("N",e)},t.createError=function(e){return new t("E",void 0,e)},t.createComplete=function(){return t.completeNotification},t.completeNotification=new t("C"),t}();function l(t,e){var r,n,i,o=t,s=o.kind,a=o.value,h=o.error;if("string"!=typeof s)throw new TypeError('Invalid notification, missing "kind"');"N"===s?null===(r=e.next)||void 0===r||r.call(e,a):"E"===s?null===(n=e.error)||void 0===n||n.call(e,h):null===(i=e.complete)||void 0===i||i.call(e)}},230:(t,e,r)=>{"use strict";r.d(e,{y:()=>u});var n=r(6267),i=r(204),o=r(6766),s=r(2749),a=r(3912),h=r(8474),l=r(8846),u=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var o,s=this,a=(o=t)&&o instanceof n.Lv||function(t){return t&&(0,h.m)(t.next)&&(0,h.m)(t.error)&&(0,h.m)(t.complete)}(o)&&(0,i.Nn)(o)?t:new n.Hp(t,e,r);return(0,l.x)((function(){var t=s,e=t.operator,r=t.source;a.add(e?e.call(a,r):r?s._subscribe(a):s._trySubscribe(a))})),a},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=c(e))((function(e,n){var i;i=r.subscribe((function(e){try{t(e)}catch(t){n(t),null==i||i.unsubscribe()}}),n,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[o.L]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,s.U)(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=c(t))((function(t,r){var n;e.subscribe((function(t){return n=t}),(function(t){return r(t)}),(function(){return t(n)}))}))},t.create=function(e){return new t(e)},t}();function c(t){var e;return null!==(e=null!=t?t:a.v.Promise)&&void 0!==e?e:Promise}},3:(t,e,r)=>{"use strict";r.d(e,{t:()=>s});var n=r(5987),i=r(9248),o=r(4318),s=function(t){function e(e,r,n){void 0===e&&(e=1/0),void 0===r&&(r=1/0),void 0===n&&(n=o.l);var i=t.call(this)||this;return i._bufferSize=e,i._windowTime=r,i._timestampProvider=n,i._buffer=[],i._infiniteTimeWindow=!0,i._infiniteTimeWindow=r===1/0,i._bufferSize=Math.max(1,e),i._windowTime=Math.max(1,r),i}return(0,n.ZT)(e,t),e.prototype.next=function(e){var r=this,n=r.isStopped,i=r._buffer,o=r._infiniteTimeWindow,s=r._timestampProvider,a=r._windowTime;n||(i.push(e),!o&&i.push(s.now()+a)),this._trimBuffer(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){this._throwIfClosed(),this._trimBuffer();for(var e=this._innerSubscribe(t),r=this._infiniteTimeWindow,n=this._buffer.slice(),i=0;i<n.length&&!t.closed;i+=r?1:2)t.next(n[i]);return this._checkFinalizedStatuses(t),e},e.prototype._trimBuffer=function(){var t=this,e=t._bufferSize,r=t._timestampProvider,n=t._buffer,i=t._infiniteTimeWindow,o=(i?1:2)*e;if(e<1/0&&o<n.length&&n.splice(0,n.length-o),!i){for(var s=r.now(),a=0,h=1;h<n.length&&n[h]<=s;h+=2)a=h;a&&n.splice(0,a+1)}},e}(i.x)},5022:(t,e,r)=>{"use strict";r.d(e,{b:()=>i});var n=r(4318),i=function(){function t(e,r){void 0===r&&(r=t.now),this.schedulerActionCtor=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(r,e)},t.now=n.l.now,t}()},9248:(t,e,r)=>{"use strict";r.d(e,{x:()=>l});var n=r(5987),i=r(230),o=r(204),s=r(9825),a=r(3699),h=r(8846),l=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return(0,n.ZT)(e,t),e.prototype.lift=function(t){var e=new u(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new s.N},e.prototype.next=function(t){var e=this;(0,h.x)((function(){var r,i;if(e._throwIfClosed(),!e.isStopped){var o=e.observers.slice();try{for(var s=(0,n.XA)(o),a=s.next();!a.done;a=s.next())a.value.next(t)}catch(t){r={error:t}}finally{try{a&&!a.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}}}))},e.prototype.error=function(t){var e=this;(0,h.x)((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var r=e.observers;r.length;)r.shift().error(t)}}))},e.prototype.complete=function(){var t=this;(0,h.x)((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,r=e.hasError,n=e.isStopped,i=e.observers;return r||n?o.Lc:(i.push(t),new o.w0((function(){return(0,a.P)(i,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,n=e.thrownError,i=e.isStopped;r?t.error(n):i&&t.complete()},e.prototype.asObservable=function(){var t=new i.y;return t.source=this,t},e.create=function(t,e){return new u(t,e)},e}(i.y),u=function(t){function e(e,r){var n=t.call(this)||this;return n.destination=e,n.source=r,n}return(0,n.ZT)(e,t),e.prototype.next=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===r||r.call(e,t)},e.prototype.error=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===r||r.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,r;return null!==(r=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==r?r:o.Lc},e}(l)},6267:(t,e,r)=>{"use strict";r.d(e,{Hp:()=>p,Lv:()=>d});var n=r(5987),i=r(8474),o=r(204),s=r(3912),a=r(5),h=r(2967),l=u("C",void 0,void 0);function u(t,e,r){return{kind:t,value:e,error:r}}var c=r(8380),f=r(8846),d=function(t){function e(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,(0,o.Nn)(e)&&e.add(r)):r.destination=b,r}return(0,n.ZT)(e,t),e.create=function(t,e,r){return new p(t,e,r)},e.prototype.next=function(t){this.isStopped?w(function(t){return u("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?w(u("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?w(l,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(o.w0),p=function(t){function e(e,r,n){var o,a=t.call(this)||this;if((0,i.m)(e))o=e;else if(e){var l;o=e.next,r=e.error,n=e.complete,a&&s.v.useDeprecatedNextContext?(l=Object.create(e)).unsubscribe=function(){return a.unsubscribe()}:l=e,o=null==o?void 0:o.bind(l),r=null==r?void 0:r.bind(l),n=null==n?void 0:n.bind(l)}return a.destination={next:o?m(o):h.Z,error:m(null!=r?r:g),complete:n?m(n):h.Z},a}return(0,n.ZT)(e,t),e}(d);function m(t,e){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,(0,n.ev)([],(0,n.CR)(e)))}catch(t){s.v.useDeprecatedSynchronousErrorHandling?(0,f.O)(t):(0,a.h)(t)}}}function g(t){throw t}function w(t,e){var r=s.v.onStoppedNotification;r&&c.z.setTimeout((function(){return r(t,e)}))}var b={closed:!0,next:h.Z,error:g,complete:h.Z}},204:(t,e,r)=>{"use strict";r.d(e,{w0:()=>a,Lc:()=>h,Nn:()=>l});var n=r(5987),i=r(8474),o=r(5948),s=r(3699),a=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}var e;return t.prototype.unsubscribe=function(){var t,e,r,s,a;if(!this.closed){this.closed=!0;var h=this._parentage;if(h)if(this._parentage=null,Array.isArray(h))try{for(var l=(0,n.XA)(h),c=l.next();!c.done;c=l.next())c.value.remove(this)}catch(e){t={error:e}}finally{try{c&&!c.done&&(e=l.return)&&e.call(l)}finally{if(t)throw t.error}}else h.remove(this);var f=this.initialTeardown;if((0,i.m)(f))try{f()}catch(t){a=t instanceof o.B?t.errors:[t]}var d=this._teardowns;if(d){this._teardowns=null;try{for(var p=(0,n.XA)(d),m=p.next();!m.done;m=p.next()){var g=m.value;try{u(g)}catch(t){a=null!=a?a:[],t instanceof o.B?a=(0,n.ev)((0,n.ev)([],(0,n.CR)(a)),(0,n.CR)(t.errors)):a.push(t)}}}catch(t){r={error:t}}finally{try{m&&!m.done&&(s=p.return)&&s.call(p)}finally{if(r)throw r.error}}}if(a)throw new o.B(a)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)u(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(r=this._teardowns)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&(0,s.P)(e,t)},t.prototype.remove=function(e){var r=this._teardowns;r&&(0,s.P)(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=((e=new t).closed=!0,e),t}(),h=a.EMPTY;function l(t){return t instanceof a||t&&"closed"in t&&(0,i.m)(t.remove)&&(0,i.m)(t.add)&&(0,i.m)(t.unsubscribe)}function u(t){(0,i.m)(t)?t():t.unsubscribe()}},3912:(t,e,r)=>{"use strict";r.d(e,{v:()=>n});var n={onUnhandledError:null,onStoppedNotification:null,Promise:void 0,useDeprecatedSynchronousErrorHandling:!1,useDeprecatedNextContext:!1}},2537:(t,e,r)=>{"use strict";r.d(e,{c:()=>l});var n=r(5987),i=r(230),o=r(204),s=r(218),a=r(2566),h=r(6798),l=function(t){function e(e,r){var n=t.call(this)||this;return n.source=e,n.subjectFactory=r,n._subject=null,n._refCount=0,n._connection=null,(0,h.A)(e)&&(n.lift=e.lift),n}return(0,n.ZT)(e,t),e.prototype._subscribe=function(t){return this.getSubject().subscribe(t)},e.prototype.getSubject=function(){var t=this._subject;return t&&!t.isStopped||(this._subject=this.subjectFactory()),this._subject},e.prototype._teardown=function(){this._refCount=0;var t=this._connection;this._subject=this._connection=null,null==t||t.unsubscribe()},e.prototype.connect=function(){var t=this,e=this._connection;if(!e){e=this._connection=new o.w0;var r=this.getSubject();e.add(this.source.subscribe(new a.Q(r,void 0,(function(){t._teardown(),r.complete()}),(function(e){t._teardown(),r.error(e)}),(function(){return t._teardown()})))),e.closed&&(this._connection=null,e=o.w0.EMPTY)}return e},e.prototype.refCount=function(){return(0,s.x)()(this)},e}(i.y)},564:(t,e,r)=>{"use strict";r.d(e,{a:()=>f,l:()=>d});var n=r(230),i=r(9061),o=r(52),s=r(278),a=r(3211),h=r(2457),l=r(5210),u=r(2566),c=r(7845);function f(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,h.yG)(t),u=(0,h.jO)(t),c=(0,i.D)(t),f=c.args,p=c.keys;if(0===f.length)return(0,o.D)([],r);var m=new n.y(d(f,r,p?function(t){return(0,l.n)(p,t)}:s.y));return u?m.pipe((0,a.Z)(u)):m}function d(t,e,r){return void 0===r&&(r=s.y),function(n){p(e,(function(){for(var i=t.length,s=new Array(i),a=i,h=i,l=function(i){p(e,(function(){var l=(0,o.D)(t[i],e),c=!1;l.subscribe(new u.Q(n,(function(t){s[i]=t,c||(c=!0,h--),h||n.next(r(s.slice()))}),(function(){--a||n.complete()})))}),n)},c=0;c<i;c++)l(c)}),n)}}function p(t,e,r){t?(0,c.f)(r,t,e):e()}},6362:(t,e,r)=>{"use strict";r.d(e,{z:()=>s});var n=r(9834),i=r(2457),o=r(52);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,n.u)()((0,o.D)(t,(0,i.yG)(t)))}},9917:(t,e,r)=>{"use strict";r.d(e,{P:()=>o});var n=r(230),i=r(7878);function o(t){return new n.y((function(e){(0,i.Xf)(t()).subscribe(e)}))}},1545:(t,e,r)=>{"use strict";r.d(e,{E:()=>i,c:()=>o});var n=r(230),i=new n.y((function(t){return t.complete()}));function o(t){return t?function(t){return new n.y((function(e){return t.schedule((function(){return e.complete()}))}))}(t):i}},52:(t,e,r)=>{"use strict";r.d(e,{D:()=>o});var n=r(5857),i=r(7878);function o(t,e){return e?(0,n.x)(t,e):(0,i.Xf)(t)}},7878:(t,e,r)=>{"use strict";r.d(e,{Xf:()=>m});var n=r(5987),i=r(5685),o=r(3841),s=r(230),a=r(1764),h=r(8430),l=r(8729),u=r(1837),c=r(8671),f=r(8474),d=r(5),p=r(6766);function m(t){if(t instanceof s.y)return t;if(null!=t){if((0,a.c)(t))return b=t,new s.y((function(t){var e=b[p.L]();if((0,f.m)(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((0,i.z)(t))return w=t,new s.y((function(t){for(var e=0;e<w.length&&!t.closed;e++)t.next(w[e]);t.complete()}));if((0,o.t)(t))return m=t,new s.y((function(t){m.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,d.h)}));if((0,h.D)(t))return g(t);if((0,u.T)(t))return r=t,new s.y((function(t){var e,i;try{for(var o=(0,n.XA)(r),s=o.next();!s.done;s=o.next()){var a=s.value;if(t.next(a),t.closed)return}}catch(t){e={error:t}}finally{try{s&&!s.done&&(i=o.return)&&i.call(o)}finally{if(e)throw e.error}}t.complete()}));if((0,c.L)(t))return e=t,g((0,c.Q)(e))}var e,r,m,w,b;throw(0,l.z)(t)}function g(t){return new s.y((function(e){(function(t,e){var r,i,o,s;return(0,n.mG)(this,void 0,void 0,(function(){var a,h;return(0,n.Jh)(this,(function(l){switch(l.label){case 0:l.trys.push([0,5,6,11]),r=(0,n.KL)(t),l.label=1;case 1:return[4,r.next()];case 2:if((i=l.sent()).done)return[3,4];if(a=i.value,e.next(a),e.closed)return[2];l.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return h=l.sent(),o={error:h},[3,11];case 6:return l.trys.push([6,,9,10]),i&&!i.done&&(s=r.return)?[4,s.call(r)]:[3,8];case 7:l.sent(),l.label=8;case 8:return[3,10];case 9:if(o)throw o.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))}))})(t,e).catch((function(t){return e.error(t)}))}))}},6697:(t,e,r)=>{"use strict";r.d(e,{F:()=>o});var n=r(7991),i=r(6625);function o(t,e){return void 0===t&&(t=0),void 0===e&&(e=n.z),t<0&&(t=0),(0,i.H)(t,t,e)}},2817:(t,e,r)=>{"use strict";r.d(e,{of:()=>o});var n=r(2457),i=r(52);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,n.yG)(t);return(0,i.D)(t,r)}},7901:(t,e,r)=>{"use strict";r.d(e,{S:()=>a,R:()=>h});var n=r(230),i=r(7878),o=r(8936),s=r(2566);function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return 1===(t=(0,o.k)(t)).length?(0,i.Xf)(t[0]):new n.y(h(t))}function h(t){return function(e){for(var r=[],n=function(n){r.push((0,i.Xf)(t[n]).subscribe(new s.Q(e,(function(t){if(r){for(var i=0;i<r.length;i++)i!==n&&r[i].unsubscribe();r=null}e.next(t)}))))},o=0;r&&!e.closed&&o<t.length;o++)n(o)}}},3610:(t,e,r)=>{"use strict";r.d(e,{_:()=>o});var n=r(230),i=r(8474);function o(t,e){var r=(0,i.m)(t)?t:function(){return t},o=function(t){return t.error(r())};return new n.y(e?function(t){return e.schedule(o,0,t)}:o)}},6625:(t,e,r)=>{"use strict";r.d(e,{H:()=>a});var n=r(230),i=r(7991),o=r(4865),s=r(1454);function a(t,e,r){void 0===t&&(t=0),void 0===r&&(r=i.P);var a=-1;return null!=e&&((0,o.K)(e)?r=e:a=e),new n.y((function(e){var n=(0,s.q)(t)?+t-r.now():t;n<0&&(n=0);var i=0;return r.schedule((function(){e.closed||(e.next(i++),0<=a?this.schedule(void 0,a):e.complete())}),n)}))}},8234:(t,e,r)=>{"use strict";r.d(e,{$:()=>u});var n=r(5987),i=r(230),o=r(7878),s=r(8936),a=r(1545),h=r(2566),l=r(2457);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,l.jO)(t),u=(0,s.k)(t);return u.length?new i.y((function(t){var e=u.map((function(){return[]})),i=u.map((function(){return!1}));t.add((function(){e=i=null}));for(var s=function(s){(0,o.Xf)(u[s]).subscribe(new h.Q(t,(function(o){if(e[s].push(o),e.every((function(t){return t.length}))){var a=e.map((function(t){return t.shift()}));t.next(r?r.apply(void 0,(0,n.ev)([],(0,n.CR)(a))):a),e.some((function(t,e){return!t.length&&i[e]}))&&t.complete()}}),(function(){i[s]=!0,!e[s].length&&t.complete()})))},a=0;!t.closed&&a<u.length;a++)s(a);return function(){e=i=null}})):a.E}},2566:(t,e,r)=>{"use strict";r.d(e,{Q:()=>i});var n=r(5987),i=function(t){function e(e,r,n,i,o){var s=t.call(this,e)||this;return s.onFinalize=o,s._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,s._error=i?function(t){try{i(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,s._complete=n?function(){try{n()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,s}return(0,n.ZT)(e,t),e.prototype.unsubscribe=function(){var e,r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(r(6267).Lv)},9070:(t,e,r)=>{"use strict";r.d(e,{U:()=>s});var n=r(6798),i=r(7878),o=r(2566);function s(t){return(0,n.e)((function(e,r){var n=!1,s=null,a=null,h=!1,l=function(){if(null==a||a.unsubscribe(),a=null,n){n=!1;var t=s;s=null,r.next(t)}h&&r.complete()},u=function(){a=null,h&&r.complete()};e.subscribe(new o.Q(r,(function(e){n=!0,s=e,a||(0,i.Xf)(t(e)).subscribe(a=new o.Q(r,l,u))}),(function(){h=!0,(!n||!a||a.closed)&&r.complete()})))}))}},605:(t,e,r)=>{"use strict";r.d(e,{e:()=>s});var n=r(7991),i=r(9070),o=r(6625);function s(t,e){return void 0===e&&(e=n.P),(0,i.U)((function(){return(0,o.H)(t,e)}))}},7567:(t,e,r)=>{"use strict";r.d(e,{f:()=>s});var n=r(6798),i=r(2967),o=r(2566);function s(t){return(0,n.e)((function(e,r){var n=[];return e.subscribe(new o.Q(r,(function(t){return n.push(t)}),(function(){r.next(n),r.complete()}))),t.subscribe(new o.Q(r,(function(){var t=n;n=[],r.next(t)}),i.Z)),function(){n=null}}))}},7229:(t,e,r)=>{"use strict";r.d(e,{j:()=>a});var n=r(5987),i=r(6798),o=r(2566),s=r(3699);function a(t,e){return void 0===e&&(e=null),e=null!=e?e:t,(0,i.e)((function(r,i){var a=[],h=0;r.subscribe(new o.Q(i,(function(r){var o,l,u,c,f=null;h++%e==0&&a.push([]);try{for(var d=(0,n.XA)(a),p=d.next();!p.done;p=d.next())(w=p.value).push(r),t<=w.length&&(f=null!=f?f:[]).push(w)}catch(t){o={error:t}}finally{try{p&&!p.done&&(l=d.return)&&l.call(d)}finally{if(o)throw o.error}}if(f)try{for(var m=(0,n.XA)(f),g=m.next();!g.done;g=m.next()){var w=g.value;(0,s.P)(a,w),i.next(w)}}catch(t){u={error:t}}finally{try{g&&!g.done&&(c=m.return)&&c.call(m)}finally{if(u)throw u.error}}}),(function(){var t,e;try{for(var r=(0,n.XA)(a),o=r.next();!o.done;o=r.next()){var s=o.value;i.next(s)}}catch(e){t={error:e}}finally{try{o&&!o.done&&(e=r.return)&&e.call(r)}finally{if(t)throw t.error}}i.complete()}),void 0,(function(){a=null})))}))}},5315:(t,e,r)=>{"use strict";r.d(e,{e:()=>c});var n=r(5987),i=r(204),o=r(6798),s=r(2566),a=r(3699),h=r(7991),l=r(2457),u=r(7845);function c(t){for(var e,r,c=[],f=1;f<arguments.length;f++)c[f-1]=arguments[f];var d=null!==(e=(0,l.yG)(c))&&void 0!==e?e:h.z,p=null!==(r=c[0])&&void 0!==r?r:null,m=c[1]||1/0;return(0,o.e)((function(e,r){var o=[],h=!1,l=function(t){var e=t.buffer;t.subs.unsubscribe(),(0,a.P)(o,t),r.next(e),h&&c()},c=function(){if(o){var e=new i.w0;r.add(e);var n={buffer:[],subs:e};o.push(n),(0,u.f)(e,d,(function(){return l(n)}),t)}};null!==p&&p>=0?(0,u.f)(r,d,c,p,!0):h=!0,c();var f=new s.Q(r,(function(t){var e,r,i=o.slice();try{for(var s=(0,n.XA)(i),a=s.next();!a.done;a=s.next()){var h=a.value,u=h.buffer;u.push(t),m<=u.length&&l(h)}}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=s.return)&&r.call(s)}finally{if(e)throw e.error}}}),(function(){for(;null==o?void 0:o.length;)r.next(o.shift().buffer);null==f||f.unsubscribe(),r.complete(),r.unsubscribe()}),void 0,(function(){return o=null}));e.subscribe(f)}))}},4626:(t,e,r)=>{"use strict";r.d(e,{P:()=>u});var n=r(5987),i=r(204),o=r(6798),s=r(7878),a=r(2566),h=r(2967),l=r(3699);function u(t,e){return(0,o.e)((function(r,o){var u=[];(0,s.Xf)(t).subscribe(new a.Q(o,(function(t){var r=[];u.push(r);var n=new i.w0;n.add((0,s.Xf)(e(t)).subscribe(new a.Q(o,(function(){(0,l.P)(u,r),o.next(r),n.unsubscribe()}),h.Z)))}),h.Z)),r.subscribe(new a.Q(o,(function(t){var e,r;try{for(var i=(0,n.XA)(u),o=i.next();!o.done;o=i.next())o.value.push(t)}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}}),(function(){for(;u.length>0;)o.next(u.shift());o.complete()})))}))}},4647:(t,e,r)=>{"use strict";r.d(e,{R:()=>a});var n=r(6798),i=r(2967),o=r(2566),s=r(7878);function a(t){return(0,n.e)((function(e,r){var n=null,a=null,h=function(){null==a||a.unsubscribe();var e=n;n=[],e&&r.next(e),(0,s.Xf)(t()).subscribe(a=new o.Q(r,h,i.Z))};h(),e.subscribe(new o.Q(r,(function(t){return null==n?void 0:n.push(t)}),(function(){n&&r.next(n),r.complete()}),void 0,(function(){return n=a=null})))}))}},9878:(t,e,r)=>{"use strict";r.d(e,{K:()=>s});var n=r(7878),i=r(2566),o=r(6798);function s(t){return(0,o.e)((function(e,r){var o,a=null,h=!1;a=e.subscribe(new i.Q(r,void 0,void 0,(function(i){o=(0,n.Xf)(t(i,s(t)(e))),a?(a.unsubscribe(),a=null,o.subscribe(r)):h=!0}))),h&&(a.unsubscribe(),a=null,o.subscribe(r))}))}},3775:(t,e,r)=>{"use strict";r.d(e,{c:()=>n});var n=r(9619).h},8980:(t,e,r)=>{"use strict";r.d(e,{a:()=>u});var n=r(5987),i=r(564),o=r(6798),s=r(8936),a=r(3211),h=r(2749),l=r(2457);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,l.jO)(t);return r?(0,h.z)(u.apply(void 0,(0,n.ev)([],(0,n.CR)(t))),(0,a.Z)(r)):(0,o.e)((function(e,r){(0,i.l)((0,n.ev)([e],(0,n.CR)((0,s.k)(t))))(r)}))}},9619:(t,e,r)=>{"use strict";r.d(e,{h:()=>o});var n=r(564),i=r(1410);function o(t){return(0,i.Z)(n.a,t)}},2602:(t,e,r)=>{"use strict";r.d(e,{V:()=>o});var n=r(5987),i=r(8980);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.a.apply(void 0,(0,n.ev)([],(0,n.CR)(t)))}},6038:(t,e,r)=>{"use strict";r.d(e,{z:()=>h});var n=r(5987),i=r(6798),o=r(9834),s=r(2457),a=r(52);function h(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,s.yG)(t);return(0,i.e)((function(e,i){(0,o.u)()((0,a.D)((0,n.ev)([e],(0,n.CR)(t)),r)).subscribe(i)}))}},9834:(t,e,r)=>{"use strict";r.d(e,{u:()=>i});var n=r(4367);function i(){return(0,n.J)(1)}},1313:(t,e,r)=>{"use strict";r.d(e,{b:()=>o});var n=r(3994),i=r(8474);function o(t,e){return(0,i.m)(e)?(0,n.z)(t,e,1):(0,n.z)(t,1)}},9536:(t,e,r)=>{"use strict";r.d(e,{w:()=>o});var n=r(1313),i=r(8474);function o(t,e){return(0,i.m)(e)?(0,n.b)((function(){return t}),e):(0,n.b)((function(){return t}))}},9527:(t,e,r)=>{"use strict";r.d(e,{T:()=>o});var n=r(5987),i=r(6038);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.z.apply(void 0,(0,n.ev)([],(0,n.CR)(t)))}},1704:(t,e,r)=>{"use strict";r.d(e,{$:()=>h});var n=r(9248),i=r(52),o=r(6798),s=r(230),a={connector:function(){return new n.x}};function h(t,e){void 0===e&&(e=a);var r=e.connector;return(0,o.e)((function(e,n){var o,a=r();(0,i.D)(t((o=a,new s.y((function(t){return o.subscribe(t)}))))).subscribe(n),n.add(e.subscribe(a))}))}},4698:(t,e,r)=>{"use strict";r.d(e,{Q:()=>i});var n=r(7270);function i(t){return(0,n.u)((function(e,r,n){return!t||t(r,n)?e+1:e}),0)}},2574:(t,e,r)=>{"use strict";r.d(e,{D:()=>a});var n=r(6798),i=r(2967),o=r(2566),s=r(7878);function a(t){return(0,n.e)((function(e,r){var n=!1,a=null,h=null,l=function(){if(null==h||h.unsubscribe(),h=null,n){n=!1;var t=a;a=null,r.next(t)}};e.subscribe(new o.Q(r,(function(e){null==h||h.unsubscribe(),n=!0,a=e,h=new o.Q(r,l,i.Z),(0,s.Xf)(t(e)).subscribe(h)}),(function(){l(),r.complete()}),void 0,(function(){a=h=null})))}))}},2965:(t,e,r)=>{"use strict";r.d(e,{b:()=>s});var n=r(7991),i=r(6798),o=r(2566);function s(t,e){return void 0===e&&(e=n.z),(0,i.e)((function(r,n){var i=null,s=null,a=null,h=function(){if(i){i.unsubscribe(),i=null;var t=s;s=null,n.next(t)}};function l(){var r=a+t,o=e.now();if(o<r)return i=this.schedule(void 0,r-o),void n.add(i);h()}r.subscribe(new o.Q(n,(function(r){s=r,a=e.now(),i||(i=e.schedule(l,t),n.add(i))}),(function(){h(),n.complete()}),void 0,(function(){s=i=null})))}))}},5700:(t,e,r)=>{"use strict";r.d(e,{d:()=>o});var n=r(6798),i=r(2566);function o(t){return(0,n.e)((function(e,r){var n=!1;e.subscribe(new i.Q(r,(function(t){n=!0,r.next(t)}),(function(){n||r.next(t),r.complete()})))}))}},7782:(t,e,r)=>{"use strict";r.d(e,{g:()=>s});var n=r(7991),i=r(5284),o=r(6625);function s(t,e){void 0===e&&(e=n.z);var r=(0,o.H)(t,e);return(0,i.j)((function(){return r}))}},5284:(t,e,r)=>{"use strict";r.d(e,{j:()=>h});var n=r(6362),i=r(4727),o=r(533),s=r(3833),a=r(3994);function h(t,e){return e?function(r){return(0,n.z)(e.pipe((0,i.q)(1),(0,o.l)()),r.pipe(h(t)))}:(0,a.z)((function(e,r){return t(e,r).pipe((0,i.q)(1),(0,s.h)(e))}))}},5542:(t,e,r)=>{"use strict";r.d(e,{D:()=>s});var n=r(4029),i=r(6798),o=r(2566);function s(){return(0,i.e)((function(t,e){t.subscribe(new o.Q(e,(function(t){return(0,n.kV)(t,e)})))}))}},5631:(t,e,r)=>{"use strict";r.d(e,{E:()=>s});var n=r(6798),i=r(2566),o=r(2967);function s(t,e){return(0,n.e)((function(r,n){var s=new Set;r.subscribe(new i.Q(n,(function(e){var r=t?t(e):e;s.has(r)||(s.add(r),n.next(e))}))),null==e||e.subscribe(new i.Q(n,(function(){return s.clear()}),o.Z))}))}},3741:(t,e,r)=>{"use strict";r.d(e,{x:()=>s});var n=r(278),i=r(6798),o=r(2566);function s(t,e){return void 0===e&&(e=n.y),t=null!=t?t:a,(0,i.e)((function(r,n){var i,s=!0;r.subscribe(new o.Q(n,(function(r){var o=e(r);!s&&t(i,o)||(s=!1,i=o,n.next(r))})))}))}function a(t,e){return t===e}},6482:(t,e,r)=>{"use strict";r.d(e,{g:()=>i});var n=r(3741);function i(t,e){return(0,n.x)((function(r,n){return e?e(r[t],n[t]):r[t]===n[t]}))}},3212:(t,e,r)=>{"use strict";r.d(e,{T:()=>h});var n=r(4192),i=r(4975),o=r(3815),s=r(5700),a=r(4727);function h(t,e){if(t<0)throw new n.W;var r=arguments.length>=2;return function(h){return h.pipe((0,i.h)((function(e,r){return r===t})),(0,a.q)(1),r?(0,s.d)(e):(0,o.T)((function(){return new n.W})))}}},1491:(t,e,r)=>{"use strict";r.d(e,{l:()=>s});var n=r(5987),i=r(6362),o=r(2817);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return function(e){return(0,i.z)(e,o.of.apply(void 0,(0,n.ev)([],(0,n.CR)(t))))}}},4813:(t,e,r)=>{"use strict";r.d(e,{y:()=>o});var n=r(6798),i=r(2566);function o(t,e){return(0,n.e)((function(r,n){var o=0;r.subscribe(new i.Q(n,(function(i){t.call(e,i,o++,r)||(n.next(!1),n.complete())}),(function(){n.next(!0),n.complete()})))}))}},865:(t,e,r)=>{"use strict";r.d(e,{b:()=>n});var n=r(9680).Y},9680:(t,e,r)=>{"use strict";r.d(e,{Y:()=>s});var n=r(6798),i=r(7878),o=r(2566);function s(){return(0,n.e)((function(t,e){var r=!1,n=null;t.subscribe(new o.Q(e,(function(t){n||(n=(0,i.Xf)(t).subscribe(new o.Q(e,void 0,(function(){n=null,r&&e.complete()}))))}),(function(){r=!0,!n&&e.complete()})))}))}},6899:(t,e,r)=>{"use strict";r.d(e,{z:()=>a});var n=r(9127),i=r(7878),o=r(6798),s=r(2566);function a(t,e){return e?function(r){return r.pipe(a((function(r,o){return(0,i.Xf)(t(r,o)).pipe((0,n.U)((function(t,n){return e(r,t,o,n)})))})))}:(0,o.e)((function(e,r){var n=0,o=null,a=!1;e.subscribe(new s.Q(r,(function(e){o||(o=new s.Q(r,void 0,(function(){o=null,a&&r.complete()})),(0,i.Xf)(t(e,n++)).subscribe(o))}),(function(){a=!0,!o&&r.complete()})))}))}},9683:(t,e,r)=>{"use strict";r.d(e,{j:()=>o});var n=r(6798),i=r(9007);function o(t,e,r){return void 0===e&&(e=1/0),e=(e||0)<1?1/0:e,(0,n.e)((function(n,o){return(0,i.p)(n,o,t,e,void 0,!0,r)}))}},4975:(t,e,r)=>{"use strict";r.d(e,{h:()=>o});var n=r(6798),i=r(2566);function o(t,e){return(0,n.e)((function(r,n){var o=0;r.subscribe(new i.Q(n,(function(r){return t.call(e,r,o++)&&n.next(r)})))}))}},3286:(t,e,r)=>{"use strict";r.d(e,{x:()=>i});var n=r(6798);function i(t){return(0,n.e)((function(e,r){try{e.subscribe(r)}finally{r.add(t)}}))}},4513:(t,e,r)=>{"use strict";r.d(e,{s:()=>o,U:()=>s});var n=r(6798),i=r(2566);function o(t,e){return(0,n.e)(s(t,e,"value"))}function s(t,e,r){var n="index"===r;return function(r,o){var s=0;r.subscribe(new i.Q(o,(function(i){var a=s++;t.call(e,i,a,r)&&(o.next(n?a:i),o.complete())}),(function(){o.next(n?-1:void 0),o.complete()})))}}},8582:(t,e,r)=>{"use strict";r.d(e,{c:()=>o});var n=r(6798),i=r(4513);function o(t,e){return(0,n.e)((0,i.U)(t,e,"index"))}},1458:(t,e,r)=>{"use strict";r.d(e,{P:()=>l});var n=r(8084),i=r(4975),o=r(4727),s=r(5700),a=r(3815),h=r(278);function l(t,e){var r=arguments.length>=2;return function(l){return l.pipe(t?(0,i.h)((function(e,r){return t(e,r,l)})):h.y,(0,o.q)(1),r?(0,s.d)(e):(0,a.T)((function(){return new n.K})))}}},8796:(t,e,r)=>{"use strict";r.d(e,{V:()=>n});var n=r(3994).z},6890:(t,e,r)=>{"use strict";r.d(e,{v:()=>l});var n=r(5987),i=r(230),o=r(7878),s=r(9248),a=r(6798),h=r(2566);function l(t,e,r,n){return(0,a.e)((function(a,l){var c;e&&"function"!=typeof e?(r=e.duration,c=e.element,n=e.connector):c=e;var f=new Map,d=function(t){f.forEach(t),t(l)},p=function(t){return d((function(e){return e.error(t)}))},m=new u(l,(function(e){try{var a=t(e),u=f.get(a);if(!u){f.set(a,u=n?n():new s.x);var d=(w=a,b=u,(y=new i.y((function(t){m.activeGroups++;var e=b.subscribe(t);return function(){e.unsubscribe(),0==--m.activeGroups&&m.teardownAttempted&&m.unsubscribe()}}))).key=w,y);if(l.next(d),r){var g=new h.Q(u,(function(){u.complete(),null==g||g.unsubscribe()}),void 0,void 0,(function(){return f.delete(a)}));m.add((0,o.Xf)(r(d)).subscribe(g))}}u.next(c?c(e):e)}catch(t){p(t)}var w,b,y}),(function(){return d((function(t){return t.complete()}))}),p,(function(){return f.clear()}));a.subscribe(m)}))}var u=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.activeGroups=0,e.teardownAttempted=!1,e}return(0,n.ZT)(e,t),e.prototype.unsubscribe=function(){this.teardownAttempted=!0,0===this.activeGroups&&t.prototype.unsubscribe.call(this)},e}(h.Q)},533:(t,e,r)=>{"use strict";r.d(e,{l:()=>s});var n=r(6798),i=r(2566),o=r(2967);function s(){return(0,n.e)((function(t,e){t.subscribe(new i.Q(e,o.Z))}))}},6458:(t,e,r)=>{"use strict";r.d(e,{x:()=>o});var n=r(6798),i=r(2566);function o(){return(0,n.e)((function(t,e){t.subscribe(new i.Q(e,(function(){e.next(!1),e.complete()}),(function(){e.next(!0),e.complete()})))}))}},1410:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(278),i=r(3211),o=r(2749),s=r(3994),a=r(62);function h(t,e){return(0,o.z)((0,a.q)(),(0,s.z)((function(e){return t(e)})),e?(0,i.Z)(e):n.y)}},2487:(t,e,r)=>{"use strict";r.d(e,{Z:()=>l});var n=r(8084),i=r(4975),o=r(1320),s=r(3815),a=r(5700),h=r(278);function l(t,e){var r=arguments.length>=2;return function(l){return l.pipe(t?(0,i.h)((function(e,r){return t(e,r,l)})):h.y,(0,o.h)(1),r?(0,a.d)(e):(0,s.T)((function(){return new n.K})))}}},9127:(t,e,r)=>{"use strict";r.d(e,{U:()=>o});var n=r(6798),i=r(2566);function o(t,e){return(0,n.e)((function(r,n){var o=0;r.subscribe(new i.Q(n,(function(r){n.next(t.call(e,r,o++))})))}))}},3833:(t,e,r)=>{"use strict";r.d(e,{h:()=>i});var n=r(9127);function i(t){return(0,n.U)((function(){return t}))}},5323:(t,e,r)=>{"use strict";r.d(e,{i:()=>s});var n=r(4029),i=r(6798),o=r(2566);function s(){return(0,i.e)((function(t,e){t.subscribe(new o.Q(e,(function(t){e.next(n.P_.createNext(t))}),(function(){e.next(n.P_.createComplete()),e.complete()}),(function(t){e.next(n.P_.createError(t)),e.complete()})))}))}},497:(t,e,r)=>{"use strict";r.d(e,{F:()=>o});var n=r(7270),i=r(8474);function o(t){return(0,n.u)((0,i.m)(t)?function(e,r){return t(e,r)>0?e:r}:function(t,e){return t>e?t:e})}},2426:(t,e,r)=>{"use strict";r.d(e,{T:()=>l});var n=r(5987),i=r(6798),o=r(8936),s=r(4367),a=r(2457),h=r(52);function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,a.yG)(t),l=(0,a._6)(t,1/0);return t=(0,o.k)(t),(0,i.e)((function(e,i){(0,s.J)(l)((0,h.D)((0,n.ev)([e],(0,n.CR)(t)),r)).subscribe(i)}))}},4367:(t,e,r)=>{"use strict";r.d(e,{J:()=>o});var n=r(3994),i=r(278);function o(t){return void 0===t&&(t=1/0),(0,n.z)(i.y,t)}},9007:(t,e,r)=>{"use strict";r.d(e,{p:()=>s});var n=r(7878),i=r(7845),o=r(2566);function s(t,e,r,s,a,h,l,u){var c=[],f=0,d=0,p=!1,m=function(){!p||c.length||f||e.complete()},g=function(t){return f<s?w(t):c.push(t)},w=function(t){h&&e.next(t),f++;var u=!1;(0,n.Xf)(r(t,d++)).subscribe(new o.Q(e,(function(t){null==a||a(t),h?g(t):e.next(t)}),(function(){u=!0}),void 0,(function(){if(u)try{f--;for(var t=function(){var t=c.shift();l?(0,i.f)(e,l,(function(){return w(t)})):w(t)};c.length&&f<s;)t();m()}catch(t){e.error(t)}})))};return t.subscribe(new o.Q(e,g,(function(){p=!0,m()}))),function(){null==u||u()}}},3994:(t,e,r)=>{"use strict";r.d(e,{z:()=>h});var n=r(9127),i=r(7878),o=r(6798),s=r(9007),a=r(8474);function h(t,e,r){return void 0===r&&(r=1/0),(0,a.m)(e)?h((function(r,o){return(0,n.U)((function(t,n){return e(r,t,o,n)}))((0,i.Xf)(t(r,o)))}),r):("number"==typeof e&&(r=e),(0,o.e)((function(e,n){return(0,s.p)(e,n,t,r)})))}},8902:(t,e,r)=>{"use strict";r.d(e,{j:()=>o});var n=r(3994),i=r(8474);function o(t,e,r){return void 0===r&&(r=1/0),(0,i.m)(e)?(0,n.z)((function(){return t}),e,r):("number"==typeof e&&(r=e),(0,n.z)((function(){return t}),r))}},8603:(t,e,r)=>{"use strict";r.d(e,{f:()=>o});var n=r(6798),i=r(9007);function o(t,e,r){return void 0===r&&(r=1/0),(0,n.e)((function(n,o){var s=e;return(0,i.p)(n,o,(function(e,r){return t(s,e,r)}),r,(function(t){s=t}),!1,void 0,(function(){return s=null}))}))}},9423:(t,e,r)=>{"use strict";r.d(e,{b:()=>o});var n=r(5987),i=r(2426);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.T.apply(void 0,(0,n.ev)([],(0,n.CR)(t)))}},5877:(t,e,r)=>{"use strict";r.d(e,{V:()=>o});var n=r(7270),i=r(8474);function o(t){return(0,n.u)((0,i.m)(t)?function(e,r){return t(e,r)<0?e:r}:function(t,e){return t<e?t:e})}},5992:(t,e,r)=>{"use strict";r.d(e,{O:()=>s});var n=r(2537),i=r(8474),o=r(1704);function s(t,e){var r=(0,i.m)(t)?t:function(){return t};return(0,i.m)(e)?(0,o.$)(e,{connector:r}):function(t){return new n.c(t,r)}}},9526:(t,e,r)=>{"use strict";r.d(e,{Q:()=>s});var n=r(7845),i=r(6798),o=r(2566);function s(t,e){return void 0===e&&(e=0),(0,i.e)((function(r,i){r.subscribe(new o.Q(i,(function(r){return(0,n.f)(i,t,(function(){return i.next(r)}),e)}),(function(){return(0,n.f)(i,t,(function(){return i.complete()}),e)}),(function(r){return(0,n.f)(i,t,(function(){return i.error(r)}),e)})))}))}},5873:(t,e,r)=>{"use strict";r.d(e,{h:()=>l});var n=r(5987),i=r(6798),o=r(7878),s=r(8936),a=r(2566),h=r(2967);function l(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,s.k)(t);return(0,i.e)((function(t,e){var i=(0,n.ev)([t],(0,n.CR)(r)),s=function(){if(!e.closed)if(i.length>0){var t=void 0;try{t=(0,o.Xf)(i.shift())}catch(t){return void s()}var r=new a.Q(e,void 0,h.Z,h.Z);e.add(t.subscribe(r)),r.add(s)}else e.complete()};s()}))}},6472:(t,e,r)=>{"use strict";r.d(e,{G:()=>o});var n=r(6798),i=r(2566);function o(){return(0,n.e)((function(t,e){var r,n=!1;t.subscribe(new i.Q(e,(function(t){var i=r;r=t,n&&e.next([i,t]),n=!0})))}))}},7606:(t,e,r)=>{"use strict";r.d(e,{j:()=>i});var n=r(9127);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=t.length;if(0===r)throw new Error("list of properties cannot be empty.");return(0,n.U)((function(e){for(var n=e,i=0;i<r;i++){var o=null==n?void 0:n[t[i]];if(void 0===o)return;n=o}return n}))}},1145:(t,e,r)=>{"use strict";r.d(e,{n:()=>s});var n=r(9248),i=r(5992),o=r(1704);function s(t){return t?function(e){return(0,o.$)(t)(e)}:function(t){return(0,i.O)(new n.x)(t)}}},8372:(t,e,r)=>{"use strict";r.d(e,{n:()=>o});var n=r(6515),i=r(2537);function o(t){return function(e){var r=new n.X(t);return new i.c(e,(function(){return r}))}}},655:(t,e,r)=>{"use strict";r.d(e,{C:()=>o});var n=r(2207),i=r(2537);function o(){return function(t){var e=new n.c;return new i.c(t,(function(){return e}))}}},8172:(t,e,r)=>{"use strict";r.d(e,{_:()=>s});var n=r(3),i=r(5992),o=r(8474);function s(t,e,r,s){r&&!(0,o.m)(r)&&(s=r);var a=(0,o.m)(r)?r:void 0;return function(r){return(0,i.O)(new n.t(t,e,s),a)(r)}}},2383:(t,e,r)=>{"use strict";r.d(e,{Q:()=>a});var n=r(5987),i=r(7901),o=r(6798),s=r(278);function a(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return t.length?(0,o.e)((function(e,r){(0,i.R)((0,n.ev)([e],(0,n.CR)(t)))(r)})):s.y}},7270:(t,e,r)=>{"use strict";r.d(e,{u:()=>o});var n=r(1674),i=r(6798);function o(t,e){return(0,i.e)((0,n.U)(t,e,arguments.length>=2,!1,!0))}},218:(t,e,r)=>{"use strict";r.d(e,{x:()=>o});var n=r(6798),i=r(2566);function o(){return(0,n.e)((function(t,e){var r=null;t._refCount++;var n=new i.Q(e,void 0,void 0,void 0,(function(){if(!t||t._refCount<=0||0<--t._refCount)r=null;else{var n=t._connection,i=r;r=null,!n||i&&n!==i||n.unsubscribe(),e.unsubscribe()}}));t.subscribe(n),n.closed||(r=t.connect())}))}},5696:(t,e,r)=>{"use strict";r.d(e,{r:()=>s});var n=r(1545),i=r(6798),o=r(2566);function s(t){return void 0===t&&(t=1/0),t<=0?function(){return n.E}:(0,i.e)((function(e,r){var n,i=0,s=function(){var a=!1;n=e.subscribe(new o.Q(r,void 0,(function(){++i<t?n?(n.unsubscribe(),n=null,s()):a=!0:r.complete()}))),a&&(n.unsubscribe(),n=null,s())};s()}))}},2101:(t,e,r)=>{"use strict";r.d(e,{a:()=>s});var n=r(9248),i=r(6798),o=r(2566);function s(t){return(0,i.e)((function(e,r){var i,s,a=!1,h=!1,l=!1,u=function(){return l&&h&&(r.complete(),!0)},c=function(){l=!1,i=e.subscribe(new o.Q(r,void 0,(function(){l=!0,!u()&&(s||(s=new n.x,t(s).subscribe(new o.Q(r,(function(){i?c():a=!0}),(function(){h=!0,u()})))),s).next()}))),a&&(i.unsubscribe(),i=null,a=!1,c())};c()}))}},6371:(t,e,r)=>{"use strict";r.d(e,{X:()=>h});var n=r(6798),i=r(2566),o=r(278),s=r(6625),a=r(7878);function h(t){var e;void 0===t&&(t=1/0);var r=(e=t&&"object"==typeof t?t:{count:t}).count,h=void 0===r?1/0:r,l=e.delay,u=e.resetOnSuccess,c=void 0!==u&&u;return h<=0?o.y:(0,n.e)((function(t,e){var r,n=0,o=function(){var u=!1;r=t.subscribe(new i.Q(e,(function(t){c&&(n=0),e.next(t)}),void 0,(function(t){if(n++<h){var c=function(){r?(r.unsubscribe(),r=null,o()):u=!0};if(null!=l){var f="number"==typeof l?(0,s.H)(l):(0,a.Xf)(l(t,n)),d=new i.Q(e,(function(){d.unsubscribe(),c()}),(function(){e.complete()}));f.subscribe(d)}else c()}else e.error(t)}))),u&&(r.unsubscribe(),r=null,o())};o()}))}},2237:(t,e,r)=>{"use strict";r.d(e,{a:()=>s});var n=r(9248),i=r(6798),o=r(2566);function s(t){return(0,i.e)((function(e,r){var i,s,a=!1,h=function(){i=e.subscribe(new o.Q(r,void 0,void 0,(function(e){s||(s=new n.x,t(s).subscribe(new o.Q(r,(function(){return i?h():a=!0})))),s&&s.next(e)}))),a&&(i.unsubscribe(),i=null,a=!1,h())};h()}))}},26:(t,e,r)=>{"use strict";r.d(e,{U:()=>s});var n=r(6798),i=r(2967),o=r(2566);function s(t){return(0,n.e)((function(e,r){var n=!1,s=null;e.subscribe(new o.Q(r,(function(t){n=!0,s=t}))),t.subscribe(new o.Q(r,(function(){if(n){n=!1;var t=s;s=null,r.next(t)}}),i.Z))}))}},8622:(t,e,r)=>{"use strict";r.d(e,{b:()=>s});var n=r(7991),i=r(26),o=r(6697);function s(t,e){return void 0===e&&(e=n.z),(0,i.U)((0,o.F)(t,e))}},6542:(t,e,r)=>{"use strict";r.d(e,{R:()=>o});var n=r(6798),i=r(1674);function o(t,e){return(0,n.e)((0,i.U)(t,e,arguments.length>=2,!0))}},1674:(t,e,r)=>{"use strict";r.d(e,{U:()=>i});var n=r(2566);function i(t,e,r,i,o){return function(s,a){var h=r,l=e,u=0;s.subscribe(new n.Q(a,(function(e){var r=u++;l=h?t(l,e,r):(h=!0,e),i&&a.next(l)}),o&&function(){h&&a.next(l),a.complete()}))}}},9033:(t,e,r)=>{"use strict";r.d(e,{N:()=>o});var n=r(6798),i=r(2566);function o(t,e){return void 0===e&&(e=function(t,e){return t===e}),(0,n.e)((function(r,n){var o={buffer:[],complete:!1},s={buffer:[],complete:!1},a=function(t){n.next(t),n.complete()},h=function(t,r){var o=new i.Q(n,(function(n){var i=r.buffer,o=r.complete;0===i.length?o?a(!1):t.buffer.push(n):!e(n,i.shift())&&a(!1)}),(function(){t.complete=!0;var e=r.complete,n=r.buffer;e&&a(0===n.length),null==o||o.unsubscribe()}));return o};r.subscribe(h(o,s)),t.subscribe(h(s,o))}))}},5583:(t,e,r)=>{"use strict";r.d(e,{B:()=>l});var n=r(5987),i=r(52),o=r(4727),s=r(9248),a=r(6267),h=r(6798);function l(t){void 0===t&&(t={});var e=t.connector,r=void 0===e?function(){return new s.x}:e,n=t.resetOnError,o=void 0===n||n,l=t.resetOnComplete,c=void 0===l||l,f=t.resetOnRefCountZero,d=void 0===f||f;return function(t){var e=null,n=null,s=null,l=0,f=!1,p=!1,m=function(){null==n||n.unsubscribe(),n=null},g=function(){m(),e=s=null,f=p=!1},w=function(){var t=e;g(),null==t||t.unsubscribe()};return(0,h.e)((function(t,h){l++,p||f||m();var b=s=null!=s?s:r();h.add((function(){0!=--l||p||f||(n=u(w,d))})),b.subscribe(h),e||(e=new a.Hp({next:function(t){return b.next(t)},error:function(t){p=!0,m(),n=u(g,o,t),b.error(t)},complete:function(){f=!0,m(),n=u(g,c),b.complete()}}),(0,i.D)(t).subscribe(e))}))(t)}}function u(t,e){for(var r=[],i=2;i<arguments.length;i++)r[i-2]=arguments[i];return!0===e?(t(),null):!1===e?null:e.apply(void 0,(0,n.ev)([],(0,n.CR)(r))).pipe((0,o.q)(1)).subscribe((function(){return t()}))}},8515:(t,e,r)=>{"use strict";r.d(e,{d:()=>o});var n=r(3),i=r(5583);function o(t,e,r){var o,s,a,h=!1;return t&&"object"==typeof t?(a=null!==(o=t.bufferSize)&&void 0!==o?o:1/0,e=null!==(s=t.windowTime)&&void 0!==s?s:1/0,h=!!t.refCount,r=t.scheduler):a=null!=t?t:1/0,(0,i.B)({connector:function(){return new n.t(a,e,r)},resetOnError:!0,resetOnComplete:!1,resetOnRefCountZero:h})}},4621:(t,e,r)=>{"use strict";r.d(e,{Z:()=>h});var n=r(8084),i=r(3791),o=r(2519),s=r(6798),a=r(2566);function h(t){return(0,s.e)((function(e,r){var s,h=!1,l=!1,u=0;e.subscribe(new a.Q(r,(function(n){l=!0,t&&!t(n,u++,e)||(h&&r.error(new i.c("Too many matching values")),h=!0,s=n)}),(function(){h?(r.next(s),r.complete()):r.error(l?new o.d("No matching values"):new n.K)})))}))}},7753:(t,e,r)=>{"use strict";r.d(e,{T:()=>i});var n=r(4975);function i(t){return(0,n.h)((function(e,r){return t<=r}))}},2510:(t,e,r)=>{"use strict";r.d(e,{W:()=>s});var n=r(278),i=r(6798),o=r(2566);function s(t){return t<=0?n.y:(0,i.e)((function(e,r){var n=new Array(t),i=0;return e.subscribe(new o.Q(r,(function(e){var o=i++;if(o<t)n[o]=e;else{var s=o%t,a=n[s];n[s]=e,r.next(a)}}))),function(){n=null}}))}},3424:(t,e,r)=>{"use strict";r.d(e,{u:()=>a});var n=r(6798),i=r(2566),o=r(7878),s=r(2967);function a(t){return(0,n.e)((function(e,r){var n=!1,a=new i.Q(r,(function(){null==a||a.unsubscribe(),n=!0}),s.Z);(0,o.Xf)(t).subscribe(a),e.subscribe(new i.Q(r,(function(t){return n&&r.next(t)})))}))}},7603:(t,e,r)=>{"use strict";r.d(e,{n:()=>o});var n=r(6798),i=r(2566);function o(t){return(0,n.e)((function(e,r){var n=!1,o=0;e.subscribe(new i.Q(r,(function(e){return(n||(n=!t(e,o++)))&&r.next(e)})))}))}},6108:(t,e,r)=>{"use strict";r.d(e,{O:()=>s});var n=r(6362),i=r(2457),o=r(6798);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,i.yG)(t);return(0,o.e)((function(e,i){(r?(0,n.z)(t,e,r):(0,n.z)(t,e)).subscribe(i)}))}},8720:(t,e,r)=>{"use strict";r.d(e,{R:()=>i});var n=r(6798);function i(t,e){return void 0===e&&(e=0),(0,n.e)((function(r,n){n.add(t.schedule((function(){return r.subscribe(n)}),e))}))}},5826:(t,e,r)=>{"use strict";r.d(e,{B:()=>o});var n=r(4978),i=r(278);function o(){return(0,n.w)(i.y)}},4978:(t,e,r)=>{"use strict";r.d(e,{w:()=>s});var n=r(7878),i=r(6798),o=r(2566);function s(t,e){return(0,i.e)((function(r,i){var s=null,a=0,h=!1,l=function(){return h&&!s&&i.complete()};r.subscribe(new o.Q(i,(function(r){null==s||s.unsubscribe();var h=0,u=a++;(0,n.Xf)(t(r,u)).subscribe(s=new o.Q(i,(function(t){return i.next(e?e(r,t,u,h++):t)}),(function(){s=null,l()})))}),(function(){h=!0,l()})))}))}},8550:(t,e,r)=>{"use strict";r.d(e,{c:()=>o});var n=r(4978),i=r(8474);function o(t,e){return(0,i.m)(e)?(0,n.w)((function(){return t}),e):(0,n.w)((function(){return t}))}},6934:(t,e,r)=>{"use strict";r.d(e,{w:()=>o});var n=r(4978),i=r(6798);function o(t,e){return(0,i.e)((function(r,i){var o=e;return(0,n.w)((function(e,r){return t(o,e,r)}),(function(t,e){return o=e,e}))(r).subscribe(i),function(){o=null}}))}},4727:(t,e,r)=>{"use strict";r.d(e,{q:()=>s});var n=r(1545),i=r(6798),o=r(2566);function s(t){return t<=0?function(){return n.E}:(0,i.e)((function(e,r){var n=0;e.subscribe(new o.Q(r,(function(e){++n<=t&&(r.next(e),t<=n&&r.complete())})))}))}},1320:(t,e,r)=>{"use strict";r.d(e,{h:()=>a});var n=r(5987),i=r(1545),o=r(6798),s=r(2566);function a(t){return t<=0?function(){return i.E}:(0,o.e)((function(e,r){var i=[];e.subscribe(new s.Q(r,(function(e){i.push(e),t<i.length&&i.shift()}),(function(){var t,e;try{for(var o=(0,n.XA)(i),s=o.next();!s.done;s=o.next()){var a=s.value;r.next(a)}}catch(e){t={error:e}}finally{try{s&&!s.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}r.complete()}),void 0,(function(){i=null})))}))}},3505:(t,e,r)=>{"use strict";r.d(e,{R:()=>a});var n=r(6798),i=r(2566),o=r(7878),s=r(2967);function a(t){return(0,n.e)((function(e,r){(0,o.Xf)(t).subscribe(new i.Q(r,(function(){return r.complete()}),s.Z)),!r.closed&&e.subscribe(r)}))}},198:(t,e,r)=>{"use strict";r.d(e,{o:()=>o});var n=r(6798),i=r(2566);function o(t,e){return void 0===e&&(e=!1),(0,n.e)((function(r,n){var o=0;r.subscribe(new i.Q(n,(function(r){var i=t(r,o++);(i||e)&&n.next(r),!i&&n.complete()})))}))}},2006:(t,e,r)=>{"use strict";r.d(e,{b:()=>a});var n=r(8474),i=r(6798),o=r(2566),s=r(278);function a(t,e,r){var a=(0,n.m)(t)||e||r?{next:t,error:e,complete:r}:t;return a?(0,i.e)((function(t,e){var r;null===(r=a.subscribe)||void 0===r||r.call(a);var n=!0;t.subscribe(new o.Q(e,(function(t){var r;null===(r=a.next)||void 0===r||r.call(a,t),e.next(t)}),(function(){var t;n=!1,null===(t=a.complete)||void 0===t||t.call(a),e.complete()}),(function(t){var r;n=!1,null===(r=a.error)||void 0===r||r.call(a,t),e.error(t)}),(function(){var t,e;n&&(null===(t=a.unsubscribe)||void 0===t||t.call(a)),null===(e=a.finalize)||void 0===e||e.call(a)})))})):s.y}},5978:(t,e,r)=>{"use strict";r.d(e,{d:()=>s,P:()=>a});var n=r(6798),i=r(2566),o=r(7878),s={leading:!0,trailing:!1};function a(t,e){var r=void 0===e?s:e,a=r.leading,h=r.trailing;return(0,n.e)((function(e,r){var n=!1,s=null,l=null,u=!1,c=function(){null==l||l.unsubscribe(),l=null,h&&(p(),u&&r.complete())},f=function(){l=null,u&&r.complete()},d=function(e){return l=(0,o.Xf)(t(e)).subscribe(new i.Q(r,c,f))},p=function(){if(n){n=!1;var t=s;s=null,r.next(t),!u&&d(t)}};e.subscribe(new i.Q(r,(function(t){n=!0,s=t,(!l||l.closed)&&(a?p():d(t))}),(function(){u=!0,(!(h&&n&&l)||l.closed)&&r.complete()})))}))}},9132:(t,e,r)=>{"use strict";r.d(e,{p:()=>s});var n=r(7991),i=r(5978),o=r(6625);function s(t,e,r){void 0===e&&(e=n.z),void 0===r&&(r=i.d);var s=(0,o.H)(t,e);return(0,i.P)((function(){return s}),r)}},3815:(t,e,r)=>{"use strict";r.d(e,{T:()=>s});var n=r(8084),i=r(6798),o=r(2566);function s(t){return void 0===t&&(t=a),(0,i.e)((function(e,r){var n=!1;e.subscribe(new o.Q(r,(function(t){n=!0,r.next(t)}),(function(){return n?r.complete():r.error(t())})))}))}function a(){return new n.K}},5444:(t,e,r)=>{"use strict";r.d(e,{J:()=>a});var n=r(7991),i=r(6542),o=r(9917),s=r(9127);function a(t){return void 0===t&&(t=n.P),function(e){return(0,o.P)((function(){return e.pipe((0,i.R)((function(e,r){var n=e.current;return{value:r,current:t.now(),last:n}}),{current:t.now(),value:void 0,last:void 0}),(0,s.U)((function(t){var e=t.current,r=t.last,n=t.value;return new h(n,e-r)})))}))}}var h=function(t,e){this.value=t,this.interval=e}},5211:(t,e,r)=>{"use strict";r.d(e,{W:()=>u,V:()=>c});var n=r(7991),i=r(1454),o=r(6798),s=r(7878),a=r(1819),h=r(2566),l=r(7845),u=(0,a.d)((function(t){return function(e){void 0===e&&(e=null),t(this),this.message="Timeout has occurred",this.name="TimeoutError",this.info=e}}));function c(t,e){var r=(0,i.q)(t)?{first:t}:"number"==typeof t?{each:t}:t,a=r.first,u=r.each,c=r.with,d=void 0===c?f:c,p=r.scheduler,m=void 0===p?null!=e?e:n.z:p,g=r.meta,w=void 0===g?null:g;if(null==a&&null==u)throw new TypeError("No timeout provided.");return(0,o.e)((function(t,e){var r,n,i=null,o=0,c=function(t){n=(0,l.f)(e,m,(function(){try{r.unsubscribe(),(0,s.Xf)(d({meta:w,lastValue:i,seen:o})).subscribe(e)}catch(t){e.error(t)}}),t)};r=t.subscribe(new h.Q(e,(function(t){null==n||n.unsubscribe(),o++,e.next(i=t),u>0&&c(u)}),void 0,void 0,(function(){(null==n?void 0:n.closed)||null==n||n.unsubscribe(),i=null}))),c(null!=a?"number"==typeof a?a:+a-m.now():u)}))}function f(t){throw new u(t)}},3608:(t,e,r)=>{"use strict";r.d(e,{L:()=>s});var n=r(7991),i=r(1454),o=r(5211);function s(t,e,r){var s,a,h;if(r=null!=r?r:n.P,(0,i.q)(t)?s=t:"number"==typeof t&&(a=t),!e)throw new TypeError("No observable provided to switch to");if(h=function(){return e},null==s&&null==a)throw new TypeError("No timeout provided.");return(0,o.V)({first:s,each:a,scheduler:r,with:h})}},7185:(t,e,r)=>{"use strict";r.d(e,{A:()=>o});var n=r(4318),i=r(9127);function o(t){return void 0===t&&(t=n.l),(0,i.U)((function(e){return{value:e,timestamp:t.now()}}))}},62:(t,e,r)=>{"use strict";r.d(e,{q:()=>s});var n=r(7270),i=r(6798),o=function(t,e){return t.push(e),t};function s(){return(0,i.e)((function(t,e){(0,n.u)(o,[])(t).subscribe(e)}))}},1804:(t,e,r)=>{"use strict";r.d(e,{u:()=>a});var n=r(9248),i=r(6798),o=r(2566),s=r(2967);function a(t){return(0,i.e)((function(e,r){var i=new n.x;r.next(i.asObservable());var a=function(t){i.error(t),r.error(t)};return e.subscribe(new o.Q(r,(function(t){return null==i?void 0:i.next(t)}),(function(){i.complete(),r.complete()}),a)),t.subscribe(new o.Q(r,(function(){i.complete(),r.next(i=new n.x)}),s.Z,a)),function(){null==i||i.unsubscribe(),i=null}}))}},5383:(t,e,r)=>{"use strict";r.d(e,{r:()=>a});var n=r(5987),i=r(9248),o=r(6798),s=r(2566);function a(t,e){void 0===e&&(e=0);var r=e>0?e:t;return(0,o.e)((function(e,o){var a=[new i.x],h=0;o.next(a[0].asObservable()),e.subscribe(new s.Q(o,(function(e){var s,l;try{for(var u=(0,n.XA)(a),c=u.next();!c.done;c=u.next())c.value.next(e)}catch(t){s={error:t}}finally{try{c&&!c.done&&(l=u.return)&&l.call(u)}finally{if(s)throw s.error}}var f=h-t+1;if(f>=0&&f%r==0&&a.shift().complete(),++h%r==0){var d=new i.x;a.push(d),o.next(d.asObservable())}}),(function(){for(;a.length>0;)a.shift().complete();o.complete()}),(function(t){for(;a.length>0;)a.shift().error(t);o.error(t)}),(function(){a=null})))}))}},3051:(t,e,r)=>{"use strict";r.d(e,{I:()=>c});var n=r(9248),i=r(7991),o=r(204),s=r(6798),a=r(2566),h=r(3699),l=r(2457),u=r(7845);function c(t){for(var e,r,c=[],f=1;f<arguments.length;f++)c[f-1]=arguments[f];var d=null!==(e=(0,l.yG)(c))&&void 0!==e?e:i.z,p=null!==(r=c[0])&&void 0!==r?r:null,m=c[1]||1/0;return(0,s.e)((function(e,r){var i=[],s=!1,l=function(t){var e=t.window,r=t.subs;e.complete(),r.unsubscribe(),(0,h.P)(i,t),s&&c()},c=function(){if(i){var e=new o.w0;r.add(e);var s=new n.x,a={window:s,subs:e,seen:0};i.push(a),r.next(s.asObservable()),(0,u.f)(e,d,(function(){return l(a)}),t)}};null!==p&&p>=0?(0,u.f)(r,d,c,p,!0):s=!0,c();var f=function(t){return i.slice().forEach(t)},g=function(t){f((function(e){var r=e.window;return t(r)})),t(r),r.unsubscribe()};return e.subscribe(new a.Q(r,(function(t){f((function(e){e.window.next(t),m<=++e.seen&&l(e)}))}),(function(){return g((function(t){return t.complete()}))}),(function(t){return g((function(e){return e.error(t)}))}))),function(){i=null}}))}},1235:(t,e,r)=>{"use strict";r.d(e,{j:()=>c});var n=r(5987),i=r(9248),o=r(204),s=r(6798),a=r(7878),h=r(2566),l=r(2967),u=r(3699);function c(t,e){return(0,s.e)((function(r,s){var c=[],f=function(t){for(;0<c.length;)c.shift().error(t);s.error(t)};(0,a.Xf)(t).subscribe(new h.Q(s,(function(t){var r=new i.x;c.push(r);var n,d=new o.w0;try{n=(0,a.Xf)(e(t))}catch(t){return void f(t)}s.next(r.asObservable()),d.add(n.subscribe(new h.Q(s,(function(){(0,u.P)(c,r),r.complete(),d.unsubscribe()}),l.Z,f)))}),l.Z)),r.subscribe(new h.Q(s,(function(t){var e,r,i=c.slice();try{for(var o=(0,n.XA)(i),s=o.next();!s.done;s=o.next())s.value.next(t)}catch(t){e={error:t}}finally{try{s&&!s.done&&(r=o.return)&&r.call(o)}finally{if(e)throw e.error}}}),(function(){for(;0<c.length;)c.shift().complete();s.complete()}),f,(function(){for(;0<c.length;)c.shift().unsubscribe()})))}))}},8737:(t,e,r)=>{"use strict";r.d(e,{Q:()=>a});var n=r(9248),i=r(6798),o=r(2566),s=r(7878);function a(t){return(0,i.e)((function(e,r){var i,a,h=function(t){i.error(t),r.error(t)},l=function(){var e;null==a||a.unsubscribe(),null==i||i.complete(),i=new n.x,r.next(i.asObservable());try{e=(0,s.Xf)(t())}catch(t){return void h(t)}e.subscribe(a=new o.Q(r,l,l,h))};l(),e.subscribe(new o.Q(r,(function(t){return i.next(t)}),(function(){i.complete(),r.complete()}),h,(function(){null==a||a.unsubscribe(),i=null})))}))}},3428:(t,e,r)=>{"use strict";r.d(e,{M:()=>u});var n=r(5987),i=r(6798),o=r(2566),s=r(7878),a=r(278),h=r(2967),l=r(2457);function u(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=(0,l.jO)(t);return(0,i.e)((function(e,i){for(var l=t.length,u=new Array(l),c=t.map((function(){return!1})),f=!1,d=function(e){(0,s.Xf)(t[e]).subscribe(new o.Q(i,(function(t){u[e]=t,f||c[e]||(c[e]=!0,(f=c.every(a.y))&&(c=null))}),h.Z))},p=0;p<l;p++)d(p);e.subscribe(new o.Q(i,(function(t){if(f){var e=(0,n.ev)([t],(0,n.CR)(u));i.next(r?r.apply(void 0,(0,n.ev)([],(0,n.CR)(e))):e)}})))}))}},1823:(t,e,r)=>{"use strict";r.d(e,{$:()=>s});var n=r(5987),i=r(8234),o=r(6798);function s(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return(0,o.e)((function(e,r){i.$.apply(void 0,(0,n.ev)([e],(0,n.CR)(t))).subscribe(r)}))}},694:(t,e,r)=>{"use strict";r.d(e,{h:()=>o});var n=r(8234),i=r(1410);function o(t){return(0,i.Z)(n.$,t)}},6810:(t,e,r)=>{"use strict";r.d(e,{y:()=>o});var n=r(5987),i=r(1823);function o(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return i.$.apply(void 0,(0,n.ev)([],(0,n.CR)(t)))}},8077:(t,e,r)=>{"use strict";r.d(e,{Q:()=>a});var n=r(230),i=r(9768),o=r(8474),s=r(7845);function a(t,e){return new n.y((function(r){var n;return(0,s.f)(r,e,(function(){n=t[i.h](),(0,s.f)(r,e,(function(){var t,e,i;try{e=(t=n.next()).value,i=t.done}catch(t){return void r.error(t)}i?r.complete():r.next(e)}),0,!0)})),function(){return(0,o.m)(null==n?void 0:n.return)&&n.return()}}))}},5857:(t,e,r)=>{"use strict";r.d(e,{x:()=>w});var n=r(7878),i=r(9526),o=r(8720),s=r(230),a=r(8077),h=r(7845);function l(t,e){if(!t)throw new Error("Iterable cannot be null");return new s.y((function(r){(0,h.f)(r,e,(function(){var n=t[Symbol.asyncIterator]();(0,h.f)(r,e,(function(){n.next().then((function(t){t.done?r.complete():r.next(t.value)}))}),0,!0)}))}))}var u=r(1764),c=r(3841),f=r(5685),d=r(1837),p=r(8430),m=r(8729),g=r(8671);function w(t,e){if(null!=t){if((0,u.c)(t))return function(t,e){return(0,n.Xf)(t).pipe((0,o.R)(e),(0,i.Q)(e))}(t,e);if((0,f.z)(t))return function(t,e){return new s.y((function(r){var n=0;return e.schedule((function(){n===t.length?r.complete():(r.next(t[n++]),r.closed||this.schedule())}))}))}(t,e);if((0,c.t)(t))return function(t,e){return(0,n.Xf)(t).pipe((0,o.R)(e),(0,i.Q)(e))}(t,e);if((0,p.D)(t))return l(t,e);if((0,d.T)(t))return(0,a.Q)(t,e);if((0,g.L)(t))return function(t,e){return l((0,g.Q)(t),e)}(t,e)}throw(0,m.z)(t)}},8337:(t,e,r)=>{"use strict";r.d(e,{o:()=>a});var n=r(5987),i=function(t){function e(e,r){return t.call(this)||this}return(0,n.ZT)(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(r(204).w0),o={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=o.delegate;return((null==r?void 0:r.setInterval)||setInterval).apply(void 0,(0,n.ev)([],(0,n.CR)(t)))},clearInterval:function(t){var e=o.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},s=r(3699),a=function(t){function e(e,r){var n=t.call(this,e,r)||this;return n.scheduler=e,n.work=r,n.pending=!1,n}return(0,n.ZT)(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,n=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(n,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(n,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),o.setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return e;o.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r,n=!1;try{this.work(t)}catch(t){n=!0,r=t||new Error("Scheduled action threw falsy error")}if(n)return this.unsubscribe(),r},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,r=this.scheduler,n=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,(0,s.P)(n,this),null!=e&&(this.id=this.recycleAsyncId(r,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(i)},597:(t,e,r)=>{"use strict";r.d(e,{v:()=>o});var n=r(5987),i=r(5022),o=function(t){function e(e,r){void 0===r&&(r=i.b.now);var n=t.call(this,e,r)||this;return n.actions=[],n._active=!1,n._scheduled=void 0,n}return(0,n.ZT)(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(i.b)},7991:(t,e,r)=>{"use strict";r.d(e,{z:()=>i,P:()=>o});var n=r(8337),i=new(r(597).v)(n.o),o=i},4318:(t,e,r)=>{"use strict";r.d(e,{l:()=>n});var n={now:function(){return(n.delegate||Date).now()},delegate:void 0}},8380:(t,e,r)=>{"use strict";r.d(e,{z:()=>i});var n=r(5987),i={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=i.delegate;return((null==r?void 0:r.setTimeout)||setTimeout).apply(void 0,(0,n.ev)([],(0,n.CR)(t)))},clearTimeout:function(t){var e=i.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0}},9768:(t,e,r)=>{"use strict";r.d(e,{h:()=>n});var n="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator"},6766:(t,e,r)=>{"use strict";r.d(e,{L:()=>n});var n="function"==typeof Symbol&&Symbol.observable||"@@observable"},4192:(t,e,r)=>{"use strict";r.d(e,{W:()=>n});var n=(0,r(1819).d)((function(t){return function(){t(this),this.name="ArgumentOutOfRangeError",this.message="argument out of range"}}))},8084:(t,e,r)=>{"use strict";r.d(e,{K:()=>n});var n=(0,r(1819).d)((function(t){return function(){t(this),this.name="EmptyError",this.message="no elements in sequence"}}))},2519:(t,e,r)=>{"use strict";r.d(e,{d:()=>n});var n=(0,r(1819).d)((function(t){return function(e){t(this),this.name="NotFoundError",this.message=e}}))},9825:(t,e,r)=>{"use strict";r.d(e,{N:()=>n});var n=(0,r(1819).d)((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}}))},3791:(t,e,r)=>{"use strict";r.d(e,{c:()=>n});var n=(0,r(1819).d)((function(t){return function(e){t(this),this.name="SequenceError",this.message=e}}))},5948:(t,e,r)=>{"use strict";r.d(e,{B:()=>n});var n=(0,r(1819).d)((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}))},2457:(t,e,r)=>{"use strict";r.d(e,{jO:()=>s,yG:()=>a,_6:()=>h});var n=r(8474),i=r(4865);function o(t){return t[t.length-1]}function s(t){return(0,n.m)(o(t))?t.pop():void 0}function a(t){return(0,i.K)(o(t))?t.pop():void 0}function h(t,e){return"number"==typeof o(t)?t.pop():e}},9061:(t,e,r)=>{"use strict";r.d(e,{D:()=>a});var n=Array.isArray,i=Object.getPrototypeOf,o=Object.prototype,s=Object.keys;function a(t){if(1===t.length){var e=t[0];if(n(e))return{args:e,keys:null};if((a=e)&&"object"==typeof a&&i(a)===o){var r=s(e);return{args:r.map((function(t){return e[t]})),keys:r}}}var a;return{args:t,keys:null}}},8936:(t,e,r)=>{"use strict";r.d(e,{k:()=>i});var n=Array.isArray;function i(t){return 1===t.length&&n(t[0])?t[0]:t}},3699:(t,e,r)=>{"use strict";function n(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}r.d(e,{P:()=>n})},1819:(t,e,r)=>{"use strict";function n(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}r.d(e,{d:()=>n})},5210:(t,e,r)=>{"use strict";function n(t,e){return t.reduce((function(t,r,n){return t[r]=e[n],t}),{})}r.d(e,{n:()=>n})},8846:(t,e,r)=>{"use strict";r.d(e,{x:()=>o,O:()=>s});var n=r(3912),i=null;function o(t){if(n.v.useDeprecatedSynchronousErrorHandling){var e=!i;if(e&&(i={errorThrown:!1,error:null}),t(),e){var r=i,o=r.errorThrown,s=r.error;if(i=null,o)throw s}}else t()}function s(t){n.v.useDeprecatedSynchronousErrorHandling&&i&&(i.errorThrown=!0,i.error=t)}},7845:(t,e,r)=>{"use strict";function n(t,e,r,n,i){void 0===n&&(n=0),void 0===i&&(i=!1);var o=e.schedule((function(){r(),i?t.add(this.schedule(null,n)):this.unsubscribe()}),n);if(t.add(o),!i)return o}r.d(e,{f:()=>n})},278:(t,e,r)=>{"use strict";function n(t){return t}r.d(e,{y:()=>n})},5685:(t,e,r)=>{"use strict";r.d(e,{z:()=>n});var n=function(t){return t&&"number"==typeof t.length&&"function"!=typeof t}},8430:(t,e,r)=>{"use strict";r.d(e,{D:()=>i});var n=r(8474);function i(t){return Symbol.asyncIterator&&(0,n.m)(null==t?void 0:t[Symbol.asyncIterator])}},1454:(t,e,r)=>{"use strict";function n(t){return t instanceof Date&&!isNaN(t)}r.d(e,{q:()=>n})},8474:(t,e,r)=>{"use strict";function n(t){return"function"==typeof t}r.d(e,{m:()=>n})},1764:(t,e,r)=>{"use strict";r.d(e,{c:()=>o});var n=r(6766),i=r(8474);function o(t){return(0,i.m)(t[n.L])}},1837:(t,e,r)=>{"use strict";r.d(e,{T:()=>o});var n=r(9768),i=r(8474);function o(t){return(0,i.m)(null==t?void 0:t[n.h])}},3841:(t,e,r)=>{"use strict";r.d(e,{t:()=>i});var n=r(8474);function i(t){return(0,n.m)(null==t?void 0:t.then)}},8671:(t,e,r)=>{"use strict";r.d(e,{Q:()=>o,L:()=>s});var n=r(5987),i=r(8474);function o(t){return(0,n.FC)(this,arguments,(function(){var e,r,i;return(0,n.Jh)(this,(function(o){switch(o.label){case 0:e=t.getReader(),o.label=1;case 1:o.trys.push([1,,9,10]),o.label=2;case 2:return[4,(0,n.qq)(e.read())];case 3:return r=o.sent(),i=r.value,r.done?[4,(0,n.qq)(void 0)]:[3,5];case 4:return[2,o.sent()];case 5:return[4,(0,n.qq)(i)];case 6:return[4,o.sent()];case 7:return o.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}function s(t){return(0,i.m)(null==t?void 0:t.getReader)}},4865:(t,e,r)=>{"use strict";r.d(e,{K:()=>i});var n=r(8474);function i(t){return t&&(0,n.m)(t.schedule)}},6798:(t,e,r)=>{"use strict";r.d(e,{A:()=>i,e:()=>o});var n=r(8474);function i(t){return(0,n.m)(null==t?void 0:t.lift)}function o(t){return function(e){if(i(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}},3211:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var n=r(5987),i=r(9127),o=Array.isArray;function s(t){return(0,i.U)((function(e){return function(t,e){return o(e)?t.apply(void 0,(0,n.ev)([],(0,n.CR)(e))):t(e)}(t,e)}))}},2967:(t,e,r)=>{"use strict";function n(){}r.d(e,{Z:()=>n})},414:(t,e,r)=>{"use strict";function n(t,e){return function(r,n){return!t.call(e,r,n)}}r.d(e,{f:()=>n})},2749:(t,e,r)=>{"use strict";r.d(e,{z:()=>i,U:()=>o});var n=r(278);function i(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return o(t)}function o(t){return 0===t.length?n.y:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}},5:(t,e,r)=>{"use strict";r.d(e,{h:()=>o});var n=r(3912),i=r(8380);function o(t){i.z.setTimeout((function(){var e=n.v.onUnhandledError;if(!e)throw t;e(t)}))}},8729:(t,e,r)=>{"use strict";function n(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}r.d(e,{z:()=>n})},3232:(t,e,r)=>{"use strict";r.r(e),r.d(e,{audit:()=>n.U,auditTime:()=>i.e,buffer:()=>o.f,bufferCount:()=>s.j,bufferTime:()=>a.e,bufferToggle:()=>h.P,bufferWhen:()=>l.R,catchError:()=>u.K,combineAll:()=>c.c,combineLatest:()=>d.a,combineLatestAll:()=>f.h,combineLatestWith:()=>p.V,concat:()=>m.z,concatAll:()=>g.u,concatMap:()=>w.b,concatMapTo:()=>b.w,concatWith:()=>y.T,connect:()=>v.$,count:()=>x.Q,debounce:()=>_.D,debounceTime:()=>k.b,defaultIfEmpty:()=>A.d,delay:()=>M.g,delayWhen:()=>E.j,dematerialize:()=>S.D,distinct:()=>C.E,distinctUntilChanged:()=>I.x,distinctUntilKeyChanged:()=>P.g,elementAt:()=>D.T,endWith:()=>T.l,every:()=>R.y,exhaust:()=>B.b,exhaustAll:()=>U.Y,exhaustMap:()=>O.z,expand:()=>L.j,filter:()=>F.h,finalize:()=>N.x,find:()=>z.s,findIndex:()=>j.c,first:()=>V.P,flatMap:()=>J.V,groupBy:()=>Y.v,ignoreElements:()=>X.l,isEmpty:()=>W.x,last:()=>q.Z,map:()=>Z.U,mapTo:()=>G.h,materialize:()=>$.i,max:()=>H.F,merge:()=>Q.T,mergeAll:()=>K.J,mergeMap:()=>tt.z,mergeMapTo:()=>et.j,mergeScan:()=>rt.f,mergeWith:()=>nt.b,min:()=>it.V,multicast:()=>ot.O,observeOn:()=>st.Q,onErrorResumeNext:()=>at.h,pairwise:()=>ht.G,partition:()=>ut,pluck:()=>ct.j,publish:()=>ft.n,publishBehavior:()=>dt.n,publishLast:()=>pt.C,publishReplay:()=>mt._,race:()=>yt,raceWith:()=>bt.Q,reduce:()=>vt.u,refCount:()=>Mt.x,repeat:()=>xt.r,repeatWhen:()=>_t.a,retry:()=>kt.X,retryWhen:()=>At.a,sample:()=>Et.U,sampleTime:()=>St.b,scan:()=>Ct.R,sequenceEqual:()=>It.N,share:()=>Pt.B,shareReplay:()=>Dt.d,single:()=>Tt.Z,skip:()=>Rt.T,skipLast:()=>Bt.W,skipUntil:()=>Ut.u,skipWhile:()=>Ot.n,startWith:()=>Lt.O,subscribeOn:()=>Ft.R,switchAll:()=>Nt.B,switchMap:()=>zt.w,switchMapTo:()=>jt.c,switchScan:()=>Vt.w,take:()=>Yt.q,takeLast:()=>Xt.h,takeUntil:()=>Wt.R,takeWhile:()=>qt.o,tap:()=>Zt.b,throttle:()=>Gt.P,throttleTime:()=>$t.p,throwIfEmpty:()=>Ht.T,timeInterval:()=>Qt.J,timeout:()=>Kt.V,timeoutWith:()=>Jt.L,timestamp:()=>te.A,toArray:()=>ee.q,window:()=>re.u,windowCount:()=>ne.r,windowTime:()=>ie.I,windowToggle:()=>oe.j,windowWhen:()=>se.Q,withLatestFrom:()=>ae.M,zip:()=>he.$,zipAll:()=>le.h,zipWith:()=>ue.y});var n=r(9070),i=r(605),o=r(7567),s=r(7229),a=r(5315),h=r(4626),l=r(4647),u=r(9878),c=r(3775),f=r(9619),d=r(8980),p=r(2602),m=r(6038),g=r(9834),w=r(1313),b=r(9536),y=r(9527),v=r(1704),x=r(4698),_=r(2574),k=r(2965),A=r(5700),M=r(7782),E=r(5284),S=r(5542),C=r(5631),I=r(3741),P=r(6482),D=r(3212),T=r(1491),R=r(4813),B=r(865),U=r(9680),O=r(6899),L=r(9683),F=r(4975),N=r(3286),z=r(4513),j=r(8582),V=r(1458),Y=r(6890),X=r(533),W=r(6458),q=r(2487),Z=r(9127),G=r(3833),$=r(5323),H=r(497),Q=r(2426),K=r(4367),J=r(8796),tt=r(3994),et=r(8902),rt=r(8603),nt=r(9423),it=r(5877),ot=r(5992),st=r(9526),at=r(5873),ht=r(6472),lt=r(414);function ut(t,e){return function(r){return[(0,F.h)(t,e)(r),(0,F.h)((0,lt.f)(t,e))(r)]}}var ct=r(7606),ft=r(1145),dt=r(8372),pt=r(655),mt=r(8172),gt=r(5987),wt=r(8936),bt=r(2383);function yt(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return bt.Q.apply(void 0,(0,gt.ev)([],(0,gt.CR)((0,wt.k)(t))))}var vt=r(7270),xt=r(5696),_t=r(2101),kt=r(6371),At=r(2237),Mt=r(218),Et=r(26),St=r(8622),Ct=r(6542),It=r(9033),Pt=r(5583),Dt=r(8515),Tt=r(4621),Rt=r(7753),Bt=r(2510),Ut=r(3424),Ot=r(7603),Lt=r(6108),Ft=r(8720),Nt=r(5826),zt=r(4978),jt=r(8550),Vt=r(6934),Yt=r(4727),Xt=r(1320),Wt=r(3505),qt=r(198),Zt=r(2006),Gt=r(5978),$t=r(9132),Ht=r(3815),Qt=r(5444),Kt=r(5211),Jt=r(3608),te=r(7185),ee=r(62),re=r(1804),ne=r(5383),ie=r(3051),oe=r(1235),se=r(8737),ae=r(3428),he=r(1823),le=r(694),ue=r(6810)},5987:(t,e,r)=>{"use strict";r.d(e,{ZT:()=>i,mG:()=>o,Jh:()=>s,XA:()=>a,CR:()=>h,ev:()=>l,qq:()=>u,FC:()=>c,KL:()=>f});var n=function(t,e){return n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},n(t,e)};function i(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function o(t,e,r,n){return new(r||(r=Promise))((function(i,o){function s(t){try{h(n.next(t))}catch(t){o(t)}}function a(t){try{h(n.throw(t))}catch(t){o(t)}}function h(t){var e;t.done?i(t.value):(e=t.value,e instanceof r?e:new r((function(t){t(e)}))).then(s,a)}h((n=n.apply(t,e||[])).next())}))}function s(t,e){var r,n,i,o,s={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function a(o){return function(a){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;s;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return s.label++,{value:o[1],done:!1};case 5:s.label++,n=o[1],o=[0];continue;case 7:o=s.ops.pop(),s.trys.pop();continue;default:if(!((i=(i=s.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){s=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){s.label=o[1];break}if(6===o[0]&&s.label<i[1]){s.label=i[1],i=o;break}if(i&&s.label<i[2]){s.label=i[2],s.ops.push(o);break}i[2]&&s.ops.pop(),s.trys.pop();continue}o=e.call(t,s)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,a])}}}function a(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],n=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&n>=t.length&&(t=void 0),{value:t&&t[n++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function h(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),s=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)s.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return s}function l(t,e){for(var r=0,n=e.length,i=t.length;r<n;r++,i++)t[i]=e[r];return t}function u(t){return this instanceof u?(this.v=t,this):new u(t)}function c(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var n,i=r.apply(t,e||[]),o=[];return n={},s("next"),s("throw"),s("return"),n[Symbol.asyncIterator]=function(){return this},n;function s(t){i[t]&&(n[t]=function(e){return new Promise((function(r,n){o.push([t,e,r,n])>1||a(t,e)}))})}function a(t,e){try{(r=i[t](e)).value instanceof u?Promise.resolve(r.value.v).then(h,l):c(o[0][2],r)}catch(t){c(o[0][3],t)}var r}function h(t){a("next",t)}function l(t){a("throw",t)}function c(t,e){t(e),o.shift(),o.length&&a(o[0][0],o[0][1])}}function f(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=a(t),e={},n("next"),n("throw"),n("return"),e[Symbol.asyncIterator]=function(){return this},e);function n(r){e[r]=t[r]&&function(e){return new Promise((function(n,i){!function(t,e,r,n){Promise.resolve(n).then((function(e){t({value:e,done:r})}),e)}(n,i,(e=t[r](e)).done,e.value)}))}}}Object.create,Object.create},6948:(t,e,r)=>{"use strict";r.r(e),r.d(e,{default:()=>w});var n=r(3379),i=r.n(n),o=r(7795),s=r.n(o),a=r(569),h=r.n(a),l=r(3565),u=r.n(l),c=r(9216),f=r.n(c),d=r(4589),p=r.n(d),m=r(4645),g={};g.styleTagTransform=p(),g.setAttributes=u(),g.insert=h().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=f(),i()(m.Z,g);const w=m.Z&&m.Z.locals?m.Z.locals:void 0},3379:t=>{"use strict";var e=[];function r(t){for(var r=-1,n=0;n<e.length;n++)if(e[n].identifier===t){r=n;break}return r}function n(t,n){for(var o={},s=[],a=0;a<t.length;a++){var h=t[a],l=n.base?h[0]+n.base:h[0],u=o[l]||0,c="".concat(l," ").concat(u);o[l]=u+1;var f=r(c),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=i(d,n);n.byIndex=a,e.splice(a,0,{identifier:c,updater:p,references:1})}s.push(c)}return s}function i(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,i){var o=n(t=t||[],i=i||{});return function(t){t=t||[];for(var s=0;s<o.length;s++){var a=r(o[s]);e[a].references--}for(var h=n(t,i),l=0;l<o.length;l++){var u=r(o[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}o=h}}},569:t=>{"use strict";var e={};t.exports=function(t,r){var n=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");n.appendChild(r)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var n="";r.supports&&(n+="@supports (".concat(r.supports,") {")),r.media&&(n+="@media ".concat(r.media," {"));var i=void 0!==r.layer;i&&(n+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),n+=r.css,i&&(n+="}"),r.media&&(n+="}"),r.supports&&(n+="}");var o=r.sourceMap;o&&"undefined"!=typeof btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(n,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},9798:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const n=t.length;let i=0,o=Math.max(32,n+(n>>1)+7),s=new Uint8Array(o>>3<<3);for(;r<n;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<n){const n=t.charCodeAt(r);56320==(64512&n)&&(++r,e=((1023&e)<<10)+(1023&n)+65536)}if(e>=55296&&e<=56319)continue}if(i+4>s.length){o+=8,o*=1+r/t.length*2,o=o>>3<<3;const e=new Uint8Array(o);e.set(s),s=e}if(0!=(4294967168&e)){if(0==(4294965248&e))s[i++]=e>>6&31|192;else if(0==(4294901760&e))s[i++]=e>>12&15|224,s[i++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;s[i++]=e>>18&7|240,s[i++]=e>>12&63|128,s[i++]=e>>6&63|128}s[i++]=63&e|128}else s[i++]=e}return s.slice(0,i)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let n=0;const i=r.length,o=[];for(;n<i;){const t=r[n++];if(0===t)break;if(0==(128&t))o.push(t);else if(192==(224&t)){const e=63&r[n++];o.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[n++],i=63&r[n++];o.push((31&t)<<12|e<<6|i)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[n++])<<12|(63&r[n++])<<6|63&r[n++];e>65535&&(e-=65536,o.push(e>>>10&1023|55296),e=56320|1023&e),o.push(e)}}return String.fromCharCode.apply(null,o)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},8005:t=>{"use strict";t.exports=function(t,r,n){var i=t*r,o=e*t,s=o-(o-t),a=t-s,h=e*r,l=h-(h-r),u=r-l,c=a*u-(i-s*l-a*l-s*u);return n?(n[0]=c,n[1]=i,n):[c,i]};var e=+(Math.pow(2,27)+1)},6359:t=>{"use strict";t.exports=function(t,e,r){var n=t+e,i=n-t,o=e-i,s=t-(n-i);return r?(r[0]=s+o,r[1]=n,r):[s+o,n]}},7458:function(t,e,r){var n;t=r.nmd(t),function(i){var o=(t&&t.exports,"object"==typeof r.g&&r.g);o.global!==o&&o.window;var s,a,h,l=String.fromCharCode;function u(t){for(var e,r,n=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(r=t.charCodeAt(i++)))?n.push(((1023&e)<<10)+(1023&r)+65536):(n.push(e),i--):n.push(e);return n}function c(t){if(t>=55296&&t<=57343)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value")}function f(t,e){return l(t>>e&63|128)}function d(t){if(0==(4294967168&t))return l(t);var e="";return 0==(4294965248&t)?e=l(t>>6&31|192):0==(4294901760&t)?(c(t),e=l(t>>12&15|224),e+=f(t,6)):0==(4292870144&t)&&(e=l(t>>18&7|240),e+=f(t,12),e+=f(t,6)),e+l(63&t|128)}function p(){if(h>=a)throw Error("Invalid byte index");var t=255&s[h];if(h++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function m(){var t,e;if(h>a)throw Error("Invalid byte index");if(h==a)return!1;if(t=255&s[h],h++,0==(128&t))return t;if(192==(224&t)){if((e=(31&t)<<6|p())>=128)return e;throw Error("Invalid continuation byte")}if(224==(240&t)){if((e=(15&t)<<12|p()<<6|p())>=2048)return c(e),e;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=(7&t)<<18|p()<<12|p()<<6|p())>=65536&&e<=1114111)return e;throw Error("Invalid UTF-8 detected")}var g={version:"2.1.2",encode:function(t){for(var e=u(t),r=e.length,n=-1,i="";++n<r;)i+=d(e[n]);return i},decode:function(t){s=u(t),a=s.length,h=0;for(var e,r=[];!1!==(e=m());)r.push(e);return function(t){for(var e,r=t.length,n=-1,i="";++n<r;)(e=t[n])>65535&&(i+=l((e-=65536)>>>10&1023|55296),e=56320|1023&e),i+=l(e);return i}(r)}};void 0===(n=function(){return g}.call(e,r,e,t))||(t.exports=n)}()},6732:(t,e,r)=>{"use strict";var n=r(7963),i=navigator.hardwareConcurrency||1;function o(t,e){if("string"!=typeof t&&"function"!=typeof t)throw new TypeError("func argument must be a function");if(void 0===e&&(e={}),"object"!=typeof e||null===e)throw new TypeError("options argument must be an object");this._workerCode=t.toString(),void 0===e.maxWorkers||"auto"===e.maxWorkers?this._numWorkers=Math.min(i-1,1):e.maxWorkers>0?this._numWorkers=Math.min(e.maxWorkers,i):this._numWorkers=i,this._workers=new Map,this._timeout=e.timeout||0,this._terminateOnError=!!e.terminateOnError;var r=e.deps;"string"==typeof r&&(r=[r]),Array.isArray(r)||(r=void 0),this._id=0,this._terminated=!1,this._working=0,this._waiting=[],this._init(r)}Function.prototype,o.prototype._init=function(t){for(var e=n.newWorkerURL(this._workerCode,t),r=0;r<this._numWorkers;r++){var i=new Worker(e);i.onmessage=this._onmessage.bind(this,i),i.onerror=this._onerror.bind(this,i),i.running=!1,i.id=r,this._workers.set(i,null)}URL.revokeObjectURL(e)},o.prototype._onerror=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[1](e.message),this._workers.set(t,null),this._terminateOnError?this.terminate():this._exec()}},o.prototype._onmessage=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[0](e.data.data),this._workers.set(t,null),this._exec()}},o.prototype._exec=function(){for(var t of this._workers.keys()){if(this._working===this._numWorkers||0===this._waiting.length)return;if(!t.running)for(var e=0;e<this._waiting.length;e++){var r=this._waiting[e];if("number"!=typeof r[4]||r[4]===t.id){this._waiting.splice(e,1),t.postMessage({action:"exec",event:r[0],args:r[1]},r[2]),t.running=!0,t.time=Date.now(),this._workers.set(t,r[3]),this._working++;break}}}},o.prototype.terminate=function(){if(!this._terminated){for(var t of this._workers)t[0].terminate(),t[1]&&t[1][1](new Error("Terminated"));this._workers.clear(),this._waiting=[],this._working=0,this._terminated=!0}},o.prototype.postAll=function(t,e){if(this._terminated)throw new Error("Cannot post (terminated)");var r=[];for(var n of this._workers.keys())r.push(this.post(t,e,[],n.id));return Promise.all(r)},o.prototype.post=function(t,e,r,n){void 0===e&&(e=[]),void 0===r&&(r=[]),Array.isArray(e)||(e=[e]),Array.isArray(r)||(r=[r]);var i=this;return new Promise((function(o,s){if(i._terminated)throw new Error("Cannot post (terminated)");i._waiting.push([t,e,r,[o,s],n]),i._exec()}))},t.exports=o},7963:(t,e)=>{"use strict";var r=function(){function t(){this._listeners={}}self.window=self,t.prototype.on=function(t,e){if(this._listeners[t])throw new RangeError("there is already a listener for "+t);if("function"!=typeof e)throw new TypeError("callback argument must be a function");this._listeners[t]=e},t.prototype._send=function(t,e,r){void 0===r?r=[]:Array.isArray(r)||(r=[r]),self.postMessage({id:t,data:e},r)},t.prototype._trigger=function(t,e){if(!this._listeners[t])throw new Error("event "+t+" is not defined");this._listeners[t].apply(null,e)};var e=new t;self.onmessage=function(t){switch(t.data.action){case"exec":t.data.args.unshift((function(r,n){e._send(t.data.id,r,n)})),e._trigger(t.data.event,t.data.args);break;case"ping":e._send(t.data.id,"pong");break;default:throw new Error("unexpected action: "+t.data.action)}}}.toString().split('"CODE";');e.newWorkerURL=function(t,e){var n=new Blob(["(",r[0],"importScripts.apply(self, "+JSON.stringify(e)+");\n","(",t,")();",r[1],")();"],{type:"application/javascript"});return URL.createObjectURL(n)}},359:t=>{"use strict";t.exports=__WEBPACK_EXTERNAL_MODULE__359__},2898:t=>{"use strict";t.exports={version:"1.0.1"}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={id:t,loaded:!1,exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.loaded=!0,r.exports}__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t);var __webpack_exports__={};return(()=>{"use strict";var t=__webpack_exports__;Object.defineProperty(t,"__esModule",{value:!0}),t.ReactResponsiveRgbStream=t.ReactRgbStream=t.OperatorDebug=t.OperatorCanvas=t.RembrainImage=void 0;var e=__webpack_require__(1516);Object.defineProperty(t,"RembrainImage",{enumerable:!0,get:function(){return e.RembrainImage}});var r=__webpack_require__(5426);Object.defineProperty(t,"OperatorCanvas",{enumerable:!0,get:function(){return r.OperatorCanvas}}),Object.defineProperty(t,"OperatorDebug",{enumerable:!0,get:function(){return r.OperatorDebug}});var n=o(__webpack_require__(7935)),i=o(__webpack_require__(1065));function o(t){return t&&t.__esModule?t:{default:t}}t.ReactRgbStream=n.default,t.ReactResponsiveRgbStream=i.default})(),__webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,