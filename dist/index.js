/*! For license information please see index.js.LICENSE.txt */
!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define([],e):"object"==typeof exports?exports.rembrain_streams=e():t.rembrain_streams=e()}(self,(function(){return(()=>{var __webpack_modules__={9742:(t,e)=>{"use strict";e.byteLength=function(t){var e=h(t),r=e[0],i=e[1];return 3*(r+i)/4-i},e.toByteArray=function(t){var e,r,s=h(t),o=s[0],a=s[1],l=new n(function(t,e,r){return 3*(e+r)/4-r}(0,o,a)),u=0,c=a>0?o-4:o;for(r=0;r<c;r+=4)e=i[t.charCodeAt(r)]<<18|i[t.charCodeAt(r+1)]<<12|i[t.charCodeAt(r+2)]<<6|i[t.charCodeAt(r+3)],l[u++]=e>>16&255,l[u++]=e>>8&255,l[u++]=255&e;return 2===a&&(e=i[t.charCodeAt(r)]<<2|i[t.charCodeAt(r+1)]>>4,l[u++]=255&e),1===a&&(e=i[t.charCodeAt(r)]<<10|i[t.charCodeAt(r+1)]<<4|i[t.charCodeAt(r+2)]>>2,l[u++]=e>>8&255,l[u++]=255&e),l},e.fromByteArray=function(t){for(var e,i=t.length,n=i%3,s=[],o=16383,a=0,h=i-n;a<h;a+=o)s.push(l(t,a,a+o>h?h:a+o));return 1===n?(e=t[i-1],s.push(r[e>>2]+r[e<<4&63]+"==")):2===n&&(e=(t[i-2]<<8)+t[i-1],s.push(r[e>>10]+r[e>>4&63]+r[e<<2&63]+"=")),s.join("")};for(var r=[],i=[],n="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",o=0,a=s.length;o<a;++o)r[o]=s[o],i[s.charCodeAt(o)]=o;function h(t){var e=t.length;if(e%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var r=t.indexOf("=");return-1===r&&(r=e),[r,r===e?0:4-r%4]}function l(t,e,i){for(var n,s,o=[],a=e;a<i;a+=3)n=(t[a]<<16&16711680)+(t[a+1]<<8&65280)+(255&t[a+2]),o.push(r[(s=n)>>18&63]+r[s>>12&63]+r[s>>6&63]+r[63&s]);return o.join("")}i["-".charCodeAt(0)]=62,i["_".charCodeAt(0)]=63},8764:(t,e,r)=>{"use strict";const i=r(9742),n=r(645),s="function"==typeof Symbol&&"function"==typeof Symbol.for?Symbol.for("nodejs.util.inspect.custom"):null;e.lW=h,e.h2=50;const o=2147483647;function a(t){if(t>o)throw new RangeError('The value "'+t+'" is invalid for option "size"');const e=new Uint8Array(t);return Object.setPrototypeOf(e,h.prototype),e}function h(t,e,r){if("number"==typeof t){if("string"==typeof e)throw new TypeError('The "string" argument must be of type string. Received type number');return c(t)}return l(t,e,r)}function l(t,e,r){if("string"==typeof t)return function(t,e){if("string"==typeof e&&""!==e||(e="utf8"),!h.isEncoding(e))throw new TypeError("Unknown encoding: "+e);const r=0|m(t,e);let i=a(r);const n=i.write(t,e);return n!==r&&(i=i.slice(0,n)),i}(t,e);if(ArrayBuffer.isView(t))return function(t){if(Z(t,Uint8Array)){const e=new Uint8Array(t);return d(e.buffer,e.byteOffset,e.byteLength)}return f(t)}(t);if(null==t)throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t);if(Z(t,ArrayBuffer)||t&&Z(t.buffer,ArrayBuffer))return d(t,e,r);if("undefined"!=typeof SharedArrayBuffer&&(Z(t,SharedArrayBuffer)||t&&Z(t.buffer,SharedArrayBuffer)))return d(t,e,r);if("number"==typeof t)throw new TypeError('The "value" argument must not be of type number. Received type number');const i=t.valueOf&&t.valueOf();if(null!=i&&i!==t)return h.from(i,e,r);const n=function(t){if(h.isBuffer(t)){const e=0|p(t.length),r=a(e);return 0===r.length||t.copy(r,0,0,e),r}return void 0!==t.length?"number"!=typeof t.length||H(t.length)?a(0):f(t):"Buffer"===t.type&&Array.isArray(t.data)?f(t.data):void 0}(t);if(n)return n;if("undefined"!=typeof Symbol&&null!=Symbol.toPrimitive&&"function"==typeof t[Symbol.toPrimitive])return h.from(t[Symbol.toPrimitive]("string"),e,r);throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type "+typeof t)}function u(t){if("number"!=typeof t)throw new TypeError('"size" argument must be of type number');if(t<0)throw new RangeError('The value "'+t+'" is invalid for option "size"')}function c(t){return u(t),a(t<0?0:0|p(t))}function f(t){const e=t.length<0?0:0|p(t.length),r=a(e);for(let i=0;i<e;i+=1)r[i]=255&t[i];return r}function d(t,e,r){if(e<0||t.byteLength<e)throw new RangeError('"offset" is outside of buffer bounds');if(t.byteLength<e+(r||0))throw new RangeError('"length" is outside of buffer bounds');let i;return i=void 0===e&&void 0===r?new Uint8Array(t):void 0===r?new Uint8Array(t,e):new Uint8Array(t,e,r),Object.setPrototypeOf(i,h.prototype),i}function p(t){if(t>=o)throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+o.toString(16)+" bytes");return 0|t}function m(t,e){if(h.isBuffer(t))return t.length;if(ArrayBuffer.isView(t)||Z(t,ArrayBuffer))return t.byteLength;if("string"!=typeof t)throw new TypeError('The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type '+typeof t);const r=t.length,i=arguments.length>2&&!0===arguments[2];if(!i&&0===r)return 0;let n=!1;for(;;)switch(e){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":return G(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return $(t).length;default:if(n)return i?-1:G(t).length;e=(""+e).toLowerCase(),n=!0}}function g(t,e,r){let i=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return D(this,e,r);case"utf8":case"utf-8":return E(this,e,r);case"ascii":return C(this,e,r);case"latin1":case"binary":return I(this,e,r);case"base64":return M(this,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,r);default:if(i)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),i=!0}}function w(t,e,r){const i=t[e];t[e]=t[r],t[r]=i}function b(t,e,r,i,n){if(0===t.length)return-1;if("string"==typeof r?(i=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),H(r=+r)&&(r=n?0:t.length-1),r<0&&(r=t.length+r),r>=t.length){if(n)return-1;r=t.length-1}else if(r<0){if(!n)return-1;r=0}if("string"==typeof e&&(e=h.from(e,i)),h.isBuffer(e))return 0===e.length?-1:y(t,e,r,i,n);if("number"==typeof e)return e&=255,"function"==typeof Uint8Array.prototype.indexOf?n?Uint8Array.prototype.indexOf.call(t,e,r):Uint8Array.prototype.lastIndexOf.call(t,e,r):y(t,[e],r,i,n);throw new TypeError("val must be string, number or Buffer")}function y(t,e,r,i,n){let s,o=1,a=t.length,h=e.length;if(void 0!==i&&("ucs2"===(i=String(i).toLowerCase())||"ucs-2"===i||"utf16le"===i||"utf-16le"===i)){if(t.length<2||e.length<2)return-1;o=2,a/=2,h/=2,r/=2}function l(t,e){return 1===o?t[e]:t.readUInt16BE(e*o)}if(n){let i=-1;for(s=r;s<a;s++)if(l(t,s)===l(e,-1===i?0:s-i)){if(-1===i&&(i=s),s-i+1===h)return i*o}else-1!==i&&(s-=s-i),i=-1}else for(r+h>a&&(r=a-h),s=r;s>=0;s--){let r=!0;for(let i=0;i<h;i++)if(l(t,s+i)!==l(e,i)){r=!1;break}if(r)return s}return-1}function _(t,e,r,i){r=Number(r)||0;const n=t.length-r;i?(i=Number(i))>n&&(i=n):i=n;const s=e.length;let o;for(i>s/2&&(i=s/2),o=0;o<i;++o){const i=parseInt(e.substr(2*o,2),16);if(H(i))return o;t[r+o]=i}return o}function v(t,e,r,i){return W(G(e,t.length-r),t,r,i)}function x(t,e,r,i){return W(function(t){const e=[];for(let r=0;r<t.length;++r)e.push(255&t.charCodeAt(r));return e}(e),t,r,i)}function k(t,e,r,i){return W($(e),t,r,i)}function A(t,e,r,i){return W(function(t,e){let r,i,n;const s=[];for(let o=0;o<t.length&&!((e-=2)<0);++o)r=t.charCodeAt(o),i=r>>8,n=r%256,s.push(n),s.push(i);return s}(e,t.length-r),t,r,i)}function M(t,e,r){return 0===e&&r===t.length?i.fromByteArray(t):i.fromByteArray(t.slice(e,r))}function E(t,e,r){r=Math.min(t.length,r);const i=[];let n=e;for(;n<r;){const e=t[n];let s=null,o=e>239?4:e>223?3:e>191?2:1;if(n+o<=r){let r,i,a,h;switch(o){case 1:e<128&&(s=e);break;case 2:r=t[n+1],128==(192&r)&&(h=(31&e)<<6|63&r,h>127&&(s=h));break;case 3:r=t[n+1],i=t[n+2],128==(192&r)&&128==(192&i)&&(h=(15&e)<<12|(63&r)<<6|63&i,h>2047&&(h<55296||h>57343)&&(s=h));break;case 4:r=t[n+1],i=t[n+2],a=t[n+3],128==(192&r)&&128==(192&i)&&128==(192&a)&&(h=(15&e)<<18|(63&r)<<12|(63&i)<<6|63&a,h>65535&&h<1114112&&(s=h))}}null===s?(s=65533,o=1):s>65535&&(s-=65536,i.push(s>>>10&1023|55296),s=56320|1023&s),i.push(s),n+=o}return function(t){const e=t.length;if(e<=S)return String.fromCharCode.apply(String,t);let r="",i=0;for(;i<e;)r+=String.fromCharCode.apply(String,t.slice(i,i+=S));return r}(i)}h.TYPED_ARRAY_SUPPORT=function(){try{const t=new Uint8Array(1),e={foo:function(){return 42}};return Object.setPrototypeOf(e,Uint8Array.prototype),Object.setPrototypeOf(t,e),42===t.foo()}catch(t){return!1}}(),h.TYPED_ARRAY_SUPPORT||"undefined"==typeof console||"function"!=typeof console.error||console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support."),Object.defineProperty(h.prototype,"parent",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.buffer}}),Object.defineProperty(h.prototype,"offset",{enumerable:!0,get:function(){if(h.isBuffer(this))return this.byteOffset}}),h.poolSize=8192,h.from=function(t,e,r){return l(t,e,r)},Object.setPrototypeOf(h.prototype,Uint8Array.prototype),Object.setPrototypeOf(h,Uint8Array),h.alloc=function(t,e,r){return function(t,e,r){return u(t),t<=0?a(t):void 0!==e?"string"==typeof r?a(t).fill(e,r):a(t).fill(e):a(t)}(t,e,r)},h.allocUnsafe=function(t){return c(t)},h.allocUnsafeSlow=function(t){return c(t)},h.isBuffer=function(t){return null!=t&&!0===t._isBuffer&&t!==h.prototype},h.compare=function(t,e){if(Z(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),Z(e,Uint8Array)&&(e=h.from(e,e.offset,e.byteLength)),!h.isBuffer(t)||!h.isBuffer(e))throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');if(t===e)return 0;let r=t.length,i=e.length;for(let n=0,s=Math.min(r,i);n<s;++n)if(t[n]!==e[n]){r=t[n],i=e[n];break}return r<i?-1:i<r?1:0},h.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},h.concat=function(t,e){if(!Array.isArray(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return h.alloc(0);let r;if(void 0===e)for(e=0,r=0;r<t.length;++r)e+=t[r].length;const i=h.allocUnsafe(e);let n=0;for(r=0;r<t.length;++r){let e=t[r];if(Z(e,Uint8Array))n+e.length>i.length?(h.isBuffer(e)||(e=h.from(e)),e.copy(i,n)):Uint8Array.prototype.set.call(i,e,n);else{if(!h.isBuffer(e))throw new TypeError('"list" argument must be an Array of Buffers');e.copy(i,n)}n+=e.length}return i},h.byteLength=m,h.prototype._isBuffer=!0,h.prototype.swap16=function(){const t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(let e=0;e<t;e+=2)w(this,e,e+1);return this},h.prototype.swap32=function(){const t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(let e=0;e<t;e+=4)w(this,e,e+3),w(this,e+1,e+2);return this},h.prototype.swap64=function(){const t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(let e=0;e<t;e+=8)w(this,e,e+7),w(this,e+1,e+6),w(this,e+2,e+5),w(this,e+3,e+4);return this},h.prototype.toString=function(){const t=this.length;return 0===t?"":0===arguments.length?E(this,0,t):g.apply(this,arguments)},h.prototype.toLocaleString=h.prototype.toString,h.prototype.equals=function(t){if(!h.isBuffer(t))throw new TypeError("Argument must be a Buffer");return this===t||0===h.compare(this,t)},h.prototype.inspect=function(){let t="";const r=e.h2;return t=this.toString("hex",0,r).replace(/(.{2})/g,"$1 ").trim(),this.length>r&&(t+=" ... "),"<Buffer "+t+">"},s&&(h.prototype[s]=h.prototype.inspect),h.prototype.compare=function(t,e,r,i,n){if(Z(t,Uint8Array)&&(t=h.from(t,t.offset,t.byteLength)),!h.isBuffer(t))throw new TypeError('The "target" argument must be one of type Buffer or Uint8Array. Received type '+typeof t);if(void 0===e&&(e=0),void 0===r&&(r=t?t.length:0),void 0===i&&(i=0),void 0===n&&(n=this.length),e<0||r>t.length||i<0||n>this.length)throw new RangeError("out of range index");if(i>=n&&e>=r)return 0;if(i>=n)return-1;if(e>=r)return 1;if(this===t)return 0;let s=(n>>>=0)-(i>>>=0),o=(r>>>=0)-(e>>>=0);const a=Math.min(s,o),l=this.slice(i,n),u=t.slice(e,r);for(let t=0;t<a;++t)if(l[t]!==u[t]){s=l[t],o=u[t];break}return s<o?-1:o<s?1:0},h.prototype.includes=function(t,e,r){return-1!==this.indexOf(t,e,r)},h.prototype.indexOf=function(t,e,r){return b(this,t,e,r,!0)},h.prototype.lastIndexOf=function(t,e,r){return b(this,t,e,r,!1)},h.prototype.write=function(t,e,r,i){if(void 0===e)i="utf8",r=this.length,e=0;else if(void 0===r&&"string"==typeof e)i=e,r=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e>>>=0,isFinite(r)?(r>>>=0,void 0===i&&(i="utf8")):(i=r,r=void 0)}const n=this.length-e;if((void 0===r||r>n)&&(r=n),t.length>0&&(r<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");i||(i="utf8");let s=!1;for(;;)switch(i){case"hex":return _(this,t,e,r);case"utf8":case"utf-8":return v(this,t,e,r);case"ascii":case"latin1":case"binary":return x(this,t,e,r);case"base64":return k(this,t,e,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return A(this,t,e,r);default:if(s)throw new TypeError("Unknown encoding: "+i);i=(""+i).toLowerCase(),s=!0}},h.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};const S=4096;function C(t,e,r){let i="";r=Math.min(t.length,r);for(let n=e;n<r;++n)i+=String.fromCharCode(127&t[n]);return i}function I(t,e,r){let i="";r=Math.min(t.length,r);for(let n=e;n<r;++n)i+=String.fromCharCode(t[n]);return i}function D(t,e,r){const i=t.length;(!e||e<0)&&(e=0),(!r||r<0||r>i)&&(r=i);let n="";for(let i=e;i<r;++i)n+=K[t[i]];return n}function P(t,e,r){const i=t.slice(e,r);let n="";for(let t=0;t<i.length-1;t+=2)n+=String.fromCharCode(i[t]+256*i[t+1]);return n}function B(t,e,r){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>r)throw new RangeError("Trying to access beyond buffer length")}function R(t,e,r,i,n,s){if(!h.isBuffer(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>n||e<s)throw new RangeError('"value" argument is out of bounds');if(r+i>t.length)throw new RangeError("Index out of range")}function T(t,e,r,i,n){Y(e,i,n,t,r,7);let s=Number(e&BigInt(4294967295));t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s,s>>=8,t[r++]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,o>>=8,t[r++]=o,r}function U(t,e,r,i,n){Y(e,i,n,t,r,7);let s=Number(e&BigInt(4294967295));t[r+7]=s,s>>=8,t[r+6]=s,s>>=8,t[r+5]=s,s>>=8,t[r+4]=s;let o=Number(e>>BigInt(32)&BigInt(4294967295));return t[r+3]=o,o>>=8,t[r+2]=o,o>>=8,t[r+1]=o,o>>=8,t[r]=o,r+8}function O(t,e,r,i,n,s){if(r+i>t.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function L(t,e,r,i,s){return e=+e,r>>>=0,s||O(t,0,r,4),n.write(t,e,r,i,23,4),r+4}function F(t,e,r,i,s){return e=+e,r>>>=0,s||O(t,0,r,8),n.write(t,e,r,i,52,8),r+8}h.prototype.slice=function(t,e){const r=this.length;(t=~~t)<0?(t+=r)<0&&(t=0):t>r&&(t=r),(e=void 0===e?r:~~e)<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t);const i=this.subarray(t,e);return Object.setPrototypeOf(i,h.prototype),i},h.prototype.readUintLE=h.prototype.readUIntLE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t],n=1,s=0;for(;++s<e&&(n*=256);)i+=this[t+s]*n;return i},h.prototype.readUintBE=h.prototype.readUIntBE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t+--e],n=1;for(;e>0&&(n*=256);)i+=this[t+--e]*n;return i},h.prototype.readUint8=h.prototype.readUInt8=function(t,e){return t>>>=0,e||B(t,1,this.length),this[t]},h.prototype.readUint16LE=h.prototype.readUInt16LE=function(t,e){return t>>>=0,e||B(t,2,this.length),this[t]|this[t+1]<<8},h.prototype.readUint16BE=h.prototype.readUInt16BE=function(t,e){return t>>>=0,e||B(t,2,this.length),this[t]<<8|this[t+1]},h.prototype.readUint32LE=h.prototype.readUInt32LE=function(t,e){return t>>>=0,e||B(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},h.prototype.readUint32BE=h.prototype.readUInt32BE=function(t,e){return t>>>=0,e||B(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},h.prototype.readBigUInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=e+256*this[++t]+65536*this[++t]+this[++t]*2**24,n=this[++t]+256*this[++t]+65536*this[++t]+r*2**24;return BigInt(i)+(BigInt(n)<<BigInt(32))})),h.prototype.readBigUInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=e*2**24+65536*this[++t]+256*this[++t]+this[++t],n=this[++t]*2**24+65536*this[++t]+256*this[++t]+r;return(BigInt(i)<<BigInt(32))+BigInt(n)})),h.prototype.readIntLE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=this[t],n=1,s=0;for(;++s<e&&(n*=256);)i+=this[t+s]*n;return n*=128,i>=n&&(i-=Math.pow(2,8*e)),i},h.prototype.readIntBE=function(t,e,r){t>>>=0,e>>>=0,r||B(t,e,this.length);let i=e,n=1,s=this[t+--i];for(;i>0&&(n*=256);)s+=this[t+--i]*n;return n*=128,s>=n&&(s-=Math.pow(2,8*e)),s},h.prototype.readInt8=function(t,e){return t>>>=0,e||B(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},h.prototype.readInt16LE=function(t,e){t>>>=0,e||B(t,2,this.length);const r=this[t]|this[t+1]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt16BE=function(t,e){t>>>=0,e||B(t,2,this.length);const r=this[t+1]|this[t]<<8;return 32768&r?4294901760|r:r},h.prototype.readInt32LE=function(t,e){return t>>>=0,e||B(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},h.prototype.readInt32BE=function(t,e){return t>>>=0,e||B(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},h.prototype.readBigInt64LE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=this[t+4]+256*this[t+5]+65536*this[t+6]+(r<<24);return(BigInt(i)<<BigInt(32))+BigInt(e+256*this[++t]+65536*this[++t]+this[++t]*2**24)})),h.prototype.readBigInt64BE=J((function(t){V(t>>>=0,"offset");const e=this[t],r=this[t+7];void 0!==e&&void 0!==r||q(t,this.length-8);const i=(e<<24)+65536*this[++t]+256*this[++t]+this[++t];return(BigInt(i)<<BigInt(32))+BigInt(this[++t]*2**24+65536*this[++t]+256*this[++t]+r)})),h.prototype.readFloatLE=function(t,e){return t>>>=0,e||B(t,4,this.length),n.read(this,t,!0,23,4)},h.prototype.readFloatBE=function(t,e){return t>>>=0,e||B(t,4,this.length),n.read(this,t,!1,23,4)},h.prototype.readDoubleLE=function(t,e){return t>>>=0,e||B(t,8,this.length),n.read(this,t,!0,52,8)},h.prototype.readDoubleBE=function(t,e){return t>>>=0,e||B(t,8,this.length),n.read(this,t,!1,52,8)},h.prototype.writeUintLE=h.prototype.writeUIntLE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||R(this,t,e,r,Math.pow(2,8*r)-1,0);let n=1,s=0;for(this[e]=255&t;++s<r&&(n*=256);)this[e+s]=t/n&255;return e+r},h.prototype.writeUintBE=h.prototype.writeUIntBE=function(t,e,r,i){t=+t,e>>>=0,r>>>=0,i||R(this,t,e,r,Math.pow(2,8*r)-1,0);let n=r-1,s=1;for(this[e+n]=255&t;--n>=0&&(s*=256);)this[e+n]=t/s&255;return e+r},h.prototype.writeUint8=h.prototype.writeUInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,255,0),this[e]=255&t,e+1},h.prototype.writeUint16LE=h.prototype.writeUInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeUint16BE=h.prototype.writeUInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,65535,0),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeUint32LE=h.prototype.writeUInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t,e+4},h.prototype.writeUint32BE=h.prototype.writeUInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,4294967295,0),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigUInt64LE=J((function(t,e=0){return T(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeBigUInt64BE=J((function(t,e=0){return U(this,t,e,BigInt(0),BigInt("0xffffffffffffffff"))})),h.prototype.writeIntLE=function(t,e,r,i){if(t=+t,e>>>=0,!i){const i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}let n=0,s=1,o=0;for(this[e]=255&t;++n<r&&(s*=256);)t<0&&0===o&&0!==this[e+n-1]&&(o=1),this[e+n]=(t/s>>0)-o&255;return e+r},h.prototype.writeIntBE=function(t,e,r,i){if(t=+t,e>>>=0,!i){const i=Math.pow(2,8*r-1);R(this,t,e,r,i-1,-i)}let n=r-1,s=1,o=0;for(this[e+n]=255&t;--n>=0&&(s*=256);)t<0&&0===o&&0!==this[e+n+1]&&(o=1),this[e+n]=(t/s>>0)-o&255;return e+r},h.prototype.writeInt8=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,1,127,-128),t<0&&(t=255+t+1),this[e]=255&t,e+1},h.prototype.writeInt16LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=255&t,this[e+1]=t>>>8,e+2},h.prototype.writeInt16BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,2,32767,-32768),this[e]=t>>>8,this[e+1]=255&t,e+2},h.prototype.writeInt32LE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24,e+4},h.prototype.writeInt32BE=function(t,e,r){return t=+t,e>>>=0,r||R(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t,e+4},h.prototype.writeBigInt64LE=J((function(t,e=0){return T(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeBigInt64BE=J((function(t,e=0){return U(this,t,e,-BigInt("0x8000000000000000"),BigInt("0x7fffffffffffffff"))})),h.prototype.writeFloatLE=function(t,e,r){return L(this,t,e,!0,r)},h.prototype.writeFloatBE=function(t,e,r){return L(this,t,e,!1,r)},h.prototype.writeDoubleLE=function(t,e,r){return F(this,t,e,!0,r)},h.prototype.writeDoubleBE=function(t,e,r){return F(this,t,e,!1,r)},h.prototype.copy=function(t,e,r,i){if(!h.isBuffer(t))throw new TypeError("argument should be a Buffer");if(r||(r=0),i||0===i||(i=this.length),e>=t.length&&(e=t.length),e||(e=0),i>0&&i<r&&(i=r),i===r)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("Index out of range");if(i<0)throw new RangeError("sourceEnd out of bounds");i>this.length&&(i=this.length),t.length-e<i-r&&(i=t.length-e+r);const n=i-r;return this===t&&"function"==typeof Uint8Array.prototype.copyWithin?this.copyWithin(e,r,i):Uint8Array.prototype.set.call(t,this.subarray(r,i),e),n},h.prototype.fill=function(t,e,r,i){if("string"==typeof t){if("string"==typeof e?(i=e,e=0,r=this.length):"string"==typeof r&&(i=r,r=this.length),void 0!==i&&"string"!=typeof i)throw new TypeError("encoding must be a string");if("string"==typeof i&&!h.isEncoding(i))throw new TypeError("Unknown encoding: "+i);if(1===t.length){const e=t.charCodeAt(0);("utf8"===i&&e<128||"latin1"===i)&&(t=e)}}else"number"==typeof t?t&=255:"boolean"==typeof t&&(t=Number(t));if(e<0||this.length<e||this.length<r)throw new RangeError("Out of range index");if(r<=e)return this;let n;if(e>>>=0,r=void 0===r?this.length:r>>>0,t||(t=0),"number"==typeof t)for(n=e;n<r;++n)this[n]=t;else{const s=h.isBuffer(t)?t:h.from(t,i),o=s.length;if(0===o)throw new TypeError('The value "'+t+'" is invalid for argument "value"');for(n=0;n<r-e;++n)this[n+e]=s[n%o]}return this};const N={};function z(t,e,r){N[t]=class extends r{constructor(){super(),Object.defineProperty(this,"message",{value:e.apply(this,arguments),writable:!0,configurable:!0}),this.name=`${this.name} [${t}]`,this.stack,delete this.name}get code(){return t}set code(t){Object.defineProperty(this,"code",{configurable:!0,enumerable:!0,value:t,writable:!0})}toString(){return`${this.name} [${t}]: ${this.message}`}}}function j(t){let e="",r=t.length;const i="-"===t[0]?1:0;for(;r>=i+4;r-=3)e=`_${t.slice(r-3,r)}${e}`;return`${t.slice(0,r)}${e}`}function Y(t,e,r,i,n,s){if(t>r||t<e){const i="bigint"==typeof e?"n":"";let n;throw n=s>3?0===e||e===BigInt(0)?`>= 0${i} and < 2${i} ** ${8*(s+1)}${i}`:`>= -(2${i} ** ${8*(s+1)-1}${i}) and < 2 ** ${8*(s+1)-1}${i}`:`>= ${e}${i} and <= ${r}${i}`,new N.ERR_OUT_OF_RANGE("value",n,t)}!function(t,e,r){V(e,"offset"),void 0!==t[e]&&void 0!==t[e+r]||q(e,t.length-(r+1))}(i,n,s)}function V(t,e){if("number"!=typeof t)throw new N.ERR_INVALID_ARG_TYPE(e,"number",t)}function q(t,e,r){if(Math.floor(t)!==t)throw V(t,r),new N.ERR_OUT_OF_RANGE(r||"offset","an integer",t);if(e<0)throw new N.ERR_BUFFER_OUT_OF_BOUNDS;throw new N.ERR_OUT_OF_RANGE(r||"offset",`>= ${r?1:0} and <= ${e}`,t)}z("ERR_BUFFER_OUT_OF_BOUNDS",(function(t){return t?`${t} is outside of buffer bounds`:"Attempt to access memory outside buffer bounds"}),RangeError),z("ERR_INVALID_ARG_TYPE",(function(t,e){return`The "${t}" argument must be of type number. Received type ${typeof e}`}),TypeError),z("ERR_OUT_OF_RANGE",(function(t,e,r){let i=`The value of "${t}" is out of range.`,n=r;return Number.isInteger(r)&&Math.abs(r)>2**32?n=j(String(r)):"bigint"==typeof r&&(n=String(r),(r>BigInt(2)**BigInt(32)||r<-(BigInt(2)**BigInt(32)))&&(n=j(n)),n+="n"),i+=` It must be ${e}. Received ${n}`,i}),RangeError);const X=/[^+/0-9A-Za-z-_]/g;function G(t,e){let r;e=e||1/0;const i=t.length;let n=null;const s=[];for(let o=0;o<i;++o){if(r=t.charCodeAt(o),r>55295&&r<57344){if(!n){if(r>56319){(e-=3)>-1&&s.push(239,191,189);continue}if(o+1===i){(e-=3)>-1&&s.push(239,191,189);continue}n=r;continue}if(r<56320){(e-=3)>-1&&s.push(239,191,189),n=r;continue}r=65536+(n-55296<<10|r-56320)}else n&&(e-=3)>-1&&s.push(239,191,189);if(n=null,r<128){if((e-=1)<0)break;s.push(r)}else if(r<2048){if((e-=2)<0)break;s.push(r>>6|192,63&r|128)}else if(r<65536){if((e-=3)<0)break;s.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;s.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return s}function $(t){return i.toByteArray(function(t){if((t=(t=t.split("=")[0]).trim().replace(X,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function W(t,e,r,i){let n;for(n=0;n<i&&!(n+r>=e.length||n>=t.length);++n)e[n+r]=t[n];return n}function Z(t,e){return t instanceof e||null!=t&&null!=t.constructor&&null!=t.constructor.name&&t.constructor.name===e.name}function H(t){return t!=t}const K=function(){const t="0123456789abcdef",e=new Array(256);for(let r=0;r<16;++r){const i=16*r;for(let n=0;n<16;++n)e[i+n]=t[r]+t[n]}return e}();function J(t){return"undefined"==typeof BigInt?Q:t}function Q(){throw new Error("BigInt not supported")}},6655:(t,e,r)=>{var i=r(6679);t.exports=function(t,e,r){var s="SVG"===t.nodeName.toUpperCase();return t.style.position=t.style.position||"absolute",t.style.top=0,t.style.left=0,o.scale=parseFloat(r||1),o.parent=e,o();function o(){var e=o.parent||t.parentNode;if("function"==typeof e)var r=e(n)||n,a=r[0],h=r[1];else if(e&&e!==document.body){var l=i(e);a=0|l[0],h=0|l[1]}else a=window.innerWidth,h=window.innerHeight;return s?(t.setAttribute("width",a*o.scale+"px"),t.setAttribute("height",h*o.scale+"px")):(t.width=a*o.scale,t.height=h*o.scale),t.style.width=a+"px",t.style.height=h+"px",o}};var n=new Float32Array(2)},4645:(t,e,r)=>{"use strict";r.d(e,{Z:()=>a});var i=r(7537),n=r.n(i),s=r(3645),o=r.n(s)()(n());o.push([t.id,".debug-operator-container{display:flex;flex-direction:row}.debug-operator-container .controls{display:inline-flex;vertical-align:top;flex-direction:column-reverse;margin-right:10px;margin-left:10px}.debug-operator-container .operator-buttons{flex-grow:1}.debug-operator-container .input-container{padding:5px;margin-bottom:5px;align-items:center;grid-auto-rows:25px;grid-row-gap:5px;grid-column-gap:5px}.debug-operator-container .connection{display:grid;grid-template-columns:.7fr 2fr}.debug-operator-container .connection>span{text-align:right}.debug-operator-container .joint-controls{display:grid;grid-template-columns:20px repeat(2, 1fr) 100px repeat(2, 1fr);grid-column-gap:5px;align-items:center}.debug-operator-container .joint-controls .joint-num{text-align:right}.debug-operator-container .joint-controls .joint-degrees{text-align:center}.debug-operator-container .joint-controls+.joint-controls{margin-top:10px}.debug-operator-container .vacuum{display:grid;grid-template-columns:repeat(2, 1fr)}.debug-operator-container .calibration{border-radius:5px;padding:5px;margin-bottom:5px;align-items:center}.debug-operator-container .calibration>div+div{margin-top:10px}.debug-operator-container .calibration>.tags{display:grid;grid-auto-rows:25px;grid-column-gap:5px}.debug-operator-container .btn-send-home{width:100%;margin-top:7px;margin-bottom:7px}.debug-operator-container .depth-view{width:320px;height:180px}.debug-operator-container .camera-view{width:854px;height:480px}.debug-operator-container .debug-command-container{width:100%;display:flex;flex-direction:row}.debug-operator-container .command-item-container{display:flex;flex-direction:row;flex-wrap:wrap;height:max-content !important}.debug-operator-container .command-item{margin:5px;font-size:1.1em;min-width:100px;background-color:#d3d3d3;display:flex;flex-direction:row;justify-content:space-between;align-content:center;align-items:center;flex-grow:1;border-radius:5px;height:max-content !important;-webkit-user-select:none;-khtml-user-select:none;-moz-user-select:none;-o-user-select:none;user-select:none;cursor:pointer}.debug-operator-container .command-item>span{margin-left:10px}.debug-operator-container .command-item-icon{filter:brightness(0.9);padding:7px 12px;display:flex;align-items:center;align-content:center;background-color:#d3d3d3}.debug-operator-container .command-input{width:max-content;padding:6px;border-radius:5px;height:max-content !important}.debug-operator-container .command-input-item{display:flex;flex-direction:column}.debug-operator-container .command-input-item>span{margin-top:5px;margin-bottom:5px}.debug-operator-container .command-item:hover{filter:brightness(0.9)}.debug-operator-container .debug-operator-info-container{display:flex;flex-direction:row;justify-content:space-around}","",{version:3,sources:["webpack://./src/web-operators/operator-debug.scss"],names:[],mappings:"AAAA,0BACE,YAAA,CACA,kBAAA,CACA,oCACE,mBAAA,CAEA,kBAAA,CACA,6BAAA,CACA,iBAAA,CACA,gBAAA,CAEF,4CACE,WAAA,CAEF,2CACE,WAAA,CACA,iBAAA,CACA,kBAAA,CACA,mBAAA,CACA,gBAAA,CACA,mBAAA,CAGF,sCACE,YAAA,CACA,8BAAA,CAEF,2CACE,gBAAA,CAGF,0CACE,YAAA,CACA,8DAAA,CACA,mBAAA,CACA,kBAAA,CAEA,qDACE,gBAAA,CAGF,yDACE,iBAAA,CAIJ,0DACE,eAAA,CAGF,kCACE,YAAA,CACA,oCAAA,CAEF,uCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CACA,kBAAA,CAEF,+CACE,eAAA,CAEF,6CACE,YAAA,CACA,mBAAA,CACA,mBAAA,CAGF,yCACE,UAAA,CACA,cAAA,CACA,iBAAA,CAGF,sCACE,WAAA,CACA,YAAA,CAGF,uCACE,WAAA,CACA,YAAA,CAEF,mDACE,UAAA,CACA,YAAA,CACA,kBAAA,CAEF,kDACE,YAAA,CACA,kBAAA,CACA,cAAA,CACA,6BAAA,CAEF,wCACE,UAAA,CACA,eAAA,CACA,eAAA,CACA,wBAAA,CACA,YAAA,CACA,kBAAA,CACA,6BAAA,CACA,oBAAA,CACA,kBAAA,CACA,WAAA,CACA,iBAAA,CACA,6BAAA,CACA,wBAAA,CACA,uBAAA,CACA,qBAAA,CACA,mBAAA,CACA,gBAAA,CACA,cAAA,CAEF,6CACE,gBAAA,CAEF,6CACE,sBAAA,CACA,gBAAA,CACA,YAAA,CACA,kBAAA,CACA,oBAAA,CACA,wBAAA,CAEF,yCACE,iBAAA,CACA,WAAA,CACA,iBAAA,CAEA,6BAAA,CAEF,8CACE,YAAA,CACA,qBAAA,CAEF,mDACE,cAAA,CACA,iBAAA,CAEF,8CACE,sBAAA,CAEF,yDACE,YAAA,CACA,kBAAA,CACA,4BAAA",sourcesContent:[".debug-operator-container {\n  display: flex;\n  flex-direction: row;\n  .controls {\n    display: inline-flex;\n\n    vertical-align: top;\n    flex-direction: column-reverse;\n    margin-right: 10px;\n    margin-left: 10px;\n  }\n  .operator-buttons {\n    flex-grow: 1;\n  }\n  .input-container {\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n    grid-auto-rows: 25px;\n    grid-row-gap: 5px;\n    grid-column-gap: 5px;\n  }\n\n  .connection {\n    display: grid;\n    grid-template-columns: 0.7fr 2fr;\n  }\n  .connection > span {\n    text-align: right;\n  }\n\n  .joint-controls {\n    display: grid;\n    grid-template-columns: 20px repeat(2, 1fr) 100px repeat(2, 1fr);\n    grid-column-gap: 5px;\n    align-items: center;\n\n    .joint-num {\n      text-align: right;\n    }\n\n    .joint-degrees {\n      text-align: center;\n    }\n  }\n\n  .joint-controls + .joint-controls {\n    margin-top: 10px;\n  }\n\n  .vacuum {\n    display: grid;\n    grid-template-columns: repeat(2, 1fr);\n  }\n  .calibration {\n    border-radius: 5px;\n    padding: 5px;\n    margin-bottom: 5px;\n    align-items: center;\n  }\n  .calibration > div + div {\n    margin-top: 10px;\n  }\n  .calibration > .tags {\n    display: grid;\n    grid-auto-rows: 25px;\n    grid-column-gap: 5px;\n  }\n\n  .btn-send-home {\n    width: 100%;\n    margin-top: 7px;\n    margin-bottom: 7px;\n  }\n\n  .depth-view {\n    width: 320px;\n    height: 180px;\n  }\n\n  .camera-view {\n    width: 854px;\n    height: 480px;\n  }\n  .debug-command-container {\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n  }\n  .command-item-container {\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n    height: max-content !important;\n  }\n  .command-item {\n    margin: 5px;\n    font-size: 1.1em;\n    min-width: 100px;\n    background-color: lightgray;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    align-content: center;\n    align-items: center;\n    flex-grow: 1;\n    border-radius: 5px;\n    height: max-content !important;\n    -webkit-user-select: none;\n    -khtml-user-select: none;\n    -moz-user-select: none;\n    -o-user-select: none;\n    user-select: none;\n    cursor: pointer;\n  }\n  .command-item > span {\n    margin-left: 10px;\n  }\n  .command-item-icon {\n    filter: brightness(0.9);\n    padding: 7px 12px;\n    display: flex;\n    align-items: center;\n    align-content: center;\n    background-color: lightgray;\n  }\n  .command-input {\n    width: max-content;\n    padding: 6px;\n    border-radius: 5px;\n\n    height: max-content !important;\n  }\n  .command-input-item {\n    display: flex;\n    flex-direction: column;\n  }\n  .command-input-item > span {\n    margin-top: 5px;\n    margin-bottom: 5px;\n  }\n  .command-item:hover {\n    filter: brightness(0.9);\n  }\n  .debug-operator-info-container {\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n}\n"],sourceRoot:""}]);const a=o},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var r="",i=void 0!==e[5];return e[4]&&(r+="@supports (".concat(e[4],") {")),e[2]&&(r+="@media ".concat(e[2]," {")),i&&(r+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),r+=t(e),i&&(r+="}"),e[2]&&(r+="}"),e[4]&&(r+="}"),r})).join("")},e.i=function(t,r,i,n,s){"string"==typeof t&&(t=[[null,t,void 0]]);var o={};if(i)for(var a=0;a<this.length;a++){var h=this[a][0];null!=h&&(o[h]=!0)}for(var l=0;l<t.length;l++){var u=[].concat(t[l]);i&&o[u[0]]||(void 0!==s&&(void 0===u[5]||(u[1]="@layer".concat(u[5].length>0?" ".concat(u[5]):""," {").concat(u[1],"}")),u[5]=s),r&&(u[2]?(u[1]="@media ".concat(u[2]," {").concat(u[1],"}"),u[2]=r):u[2]=r),n&&(u[4]?(u[1]="@supports (".concat(u[4],") {").concat(u[1],"}"),u[4]=n):u[4]="".concat(n)),e.push(u))}},e}},7537:t=>{"use strict";t.exports=function(t){var e=t[1],r=t[3];if(!r)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(r)))),n="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(n," */"),o=r.sources.map((function(t){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(t," */")}));return[e].concat(o).concat([s]).join("\n")}return[e].join("\n")}},6679:t=>{function e(t){return parseFloat(t)||0}t.exports=function(t){if(t===window||t===document.body)return[window.innerWidth,window.innerHeight];if(!t.parentNode){var r=!0;document.body.appendChild(t)}var i=t.getBoundingClientRect(),n=getComputedStyle(t),s=(0|i.height)+e(n.getPropertyValue("margin-top"))+e(n.getPropertyValue("margin-bottom")),o=(0|i.width)+e(n.getPropertyValue("margin-left"))+e(n.getPropertyValue("margin-right"));return r&&document.body.removeChild(t),[o,s]}},5372:(t,e,r)=>{"use strict";const i=r(7458),n=[];t.exports=class{constructor(t,e){e=e||{};var r=!1;void 0===t&&(t=8192),"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this._lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0;let n=t.byteLength-i,s=i;t.buffer&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this._lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t){return void 0===t&&(t=1),this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),n.length=t;for(var e=0;e<t;e++)n[e]=this.readChar();return n.join("")}readUtf8(t){void 0===t&&(t=1);const e=this.readChars(t);return i.decode(e)}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){const e=i.encode(t);return this.writeChars(e)}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this._lastWrittenByte)}getBuffer(){return"undefined"!=typeof Buffer?Buffer.from(this.toArray()):this.toArray()}_updateLastWrittenByte(){this.offset>this._lastWrittenByte&&(this._lastWrittenByte=this.offset)}}},5578:t=>{"use strict";t.exports={BITMAPV5HEADER:{LogicalColorSpace:{LCS_CALIBRATED_RGB:0,LCS_sRGB:1934772034,LCS_WINDOWS_COLOR_SPACE:1466527264},Compression:{BI_RGB:0,BI_RLE8:1,BI_RLE4:2,BI_BITFIELDS:3,BI_JPEG:4,BI_PNG:5,BI_CMYK:11,BI_CMYKRLE8:12,BI_CMYKRLE4:13},GamutMappingIntent:{LCS_GM_ABS_COLORIMETRIC:8,LCS_GM_BUSINESS:1,LCS_GM_GRAPHICS:2,LCS_GM_IMAGES:4}}}},4893:(t,e,r)=>{"use strict";const i=r(5372),n=r(5578),s=[];for(var o=0;o<=8;o++)s.push(255<<o);t.exports=function(t){if(1!==t.bitDepth)throw new Error("Only bitDepth of 1 is supported");if(!t.height||!t.width)throw new Error("ImageData width and height are required");if(1!==t.components)throw new Error("Only 1 component is supported");if(1!==t.channels)throw new Error("Only 1 channel is supported");var e=new i;e.skip(14),function(t,e){t.writeUint32(124).writeInt32(e.width).writeInt32(e.height).writeUint16(1).writeUint16(e.bitDepth).writeUint32(n.BITMAPV5HEADER.Compression.BI_RGB).writeUint32(e.width*e.height*e.bitDepth).writeInt32(0).writeInt32(0).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(Math.pow(2,e.bitDepth)).writeUint32(4278190080).writeUint32(16711680).writeUint32(65280).writeUint32(255).writeUint32(n.BITMAPV5HEADER.LogicalColorSpace.LCS_sRGB).skip(36).skip(12).writeUint32(n.BITMAPV5HEADER.GamutMappingIntent.LCS_GM_IMAGES).skip(12)}(e,t),function(t,e){e.bitDepth>8||t.writeUint32(0).writeUint32(16777215)}(e,t);const r=e.offset;return function(t,e){const r=4*Math.floor((e.bitDepth*e.width+31)/32),n=Math.ceil(e.bitDepth*e.width/8),o=r-n,a=e.bitDepth*e.width%8,h=0===a?0:8-a,l=r*e.height;var u,c;const f=new i(e.data);let d=0,p=0,m=8;t.mark(),c=f.readUint8();for(var g=e.height-1;g>=0;g--){const e=0===g;t.reset(),t.skip(g*r);for(var w=0;w<n;w++){const r=w===n-1;p<=h&&r?(t.writeByte(c<<p),0!==h&&h!==p||e||(u=c,c=f.readByte())):0===p?(u=c,c=f.readUint8(),t.writeByte(u)):(u=c,c=f.readUint8(),t.writeByte(u<<p&s[p]|c>>m)),r?(d+=a||8,t.skip(o),p=d%8,m=8-p):d+=8}}r>n&&(t.reset(),t.skip(l-1),t.writeUint8(0))}(e,t),e.rewind(),function(t,e){t.writeChars("BM"),t.writeInt32(t._lastWrittenByte),t.writeUint16(0),t.writeUint16(0),t.writeUint32(e)}(e,r),e.getBuffer()}},4665:(t,e,r)=>{"use strict";e.encode=r(4893)},3311:(t,e,r)=>{"use strict";const i=r(6752);t.exports=function(t,e){return new i(t,e).decode(e)}},8029:(t,e,r)=>{"use strict";const i={standard:r(4263),exif:r(9640),gps:r(5367)};t.exports=class{constructor(t){if(!t)throw new Error("missing kind");this.data=null,this.fields=new Map,this.kind=t,this._map=null}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(i[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._map){this._map={};const e=i[this.kind].tagsById;for(var t of this.fields.keys())e[t]&&(this._map[e[t]]=this.fields.get(t))}return this._map}}},6486:(t,e)=>{"use strict";var r=new Map([[1,[1,i]],[2,[1,function(t,e){for(var r=[],i="",n=0;n<e;n++){var s=String.fromCharCode(t.readUint8());"\0"===s?(r.push(i),i=""):i+=s}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();for(var r=new Uint16Array(e),i=0;i<e;i++)r[i]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();for(var r=new Uint32Array(e),i=0;i<e;i++)r[i]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();for(var r=new Array(e),i=0;i<e;i++)r[i]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();for(var r=new Int8Array(e),i=0;i<e;i++)r[i]=t.readInt8();return r}]],[7,[1,i]],[8,[2,function(t,e){if(1===e)return t.readInt16();for(var r=new Int16Array(e),i=0;i<e;i++)r[i]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();for(var r=new Int32Array(e),i=0;i<e;i++)r[i]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();for(var r=new Array(e),i=0;i<e;i++)r[i]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();for(var r=new Float32Array(e),i=0;i<e;i++)r[i]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();for(var r=new Float64Array(e),i=0;i<e;i++)r[i]=t.readFloat64();return r}]]]);function i(t,e){if(1===e)return t.readUint8();for(var r=new Uint8Array(e),i=0;i<e;i++)r[i]=t.readUint8();return r}e.getByteLength=function(t,e){return r.get(t)[0]*e},e.readData=function(t,e,i){return r.get(e)[1](t,i)}},9469:(t,e,r)=>{"use strict";e.decode=r(3311)},9640:t=>{"use strict";const e={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},5367:t=>{"use strict";const e={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},4263:t=>{"use strict";const e={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},r={};for(var i in e)r[e[i]]=i;t.exports={tagsById:e,tagsByName:r}},6752:(t,e,r)=>{"use strict";const i=r(5838),n=r(8029),s=r(8353),o=r(6486),a={ignoreImageData:!1,onlyFirst:!1};function h(t,e,r,i){for(var n=0;n<i;n++)t[r++]=e.getUint8(n);return r}function l(t,e,r,i,n){for(var s=0;s<2*i;s+=2)t[r++]=e.getUint16(s,n);return r}function u(t,e,r,i,n){for(var s=0;s<4*i;s+=4)t[r++]=e.getFloat32(s,n);return r}function c(t,e){throw new Error("Unsupported "+t+": "+e)}t.exports=class extends i{constructor(t,e){super(t,e),this._nextIFD=0}decode(t){t=Object.assign({},a,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t)),t.onlyFirst)return e[0];return e}decodeHeader(){let t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error("invalid byte order: 0x"+t.toString(16));this.setBigEndian()}if(t=this.readUint16(),42!==t)throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t){var e;this.seek(this._nextIFD),e=t.kind?new n(t.kind):new s;const r=this.readUint16();for(var i=0;i<r;i++)this.decodeIFDEntry(e);return t.ignoreImageData||this.decodeImageData(e),this._nextIFD=this.readUint32(),e}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),i=this.readUint16(),n=this.readUint32();if(i<1||i>12)return void this.skip(4);o.getByteLength(i,n)>4&&this.seek(this.readUint32());const s=o.readData(this,i,n);if(t.fields.set(r,s),34665===r||34853===r){let e,i=this.offset;34665===r?e="exif":34853===r&&(e="gps"),this._nextIFD=s,t[e]=this.decodeIFD({kind:e,ignoreImageData:!0}),this.offset=i}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;switch(e&&1!==e&&c("orientation",e),t.type){case 1:case 2:this.readStripData(t);break;default:c("image type",t.type)}}readStripData(t){const e=t.width,r=t.height,i=function(t){if(t.length){const r=t;t=r[0];for(var e=0;e<r.length;e++)r[e]!==t&&c("bit depth",r)}return t}(t.bitsPerSample),n=t.sampleFormat;let s=e*r;const o=function(t,e,r,i){return 8===r?new Uint8Array(1*t):16===r?new Uint16Array(1*t):32===r&&3===i?new Float32Array(1*t):c("bit depth / sample format",r+" / "+i)}(s,0,i,n),a=t.compression,f=t.rowsPerStrip*e,d=t.stripOffsets,p=t.stripByteCounts;for(var m=0,g=0;g<d.length;g++){var w=this.getStripData(a,d[g],p[g]),b=s>f?f:s;s-=b,8===i?m=h(o,w,m,b):16===i?m=l(o,w,m,b,this.isLittleEndian()):32===i&&3===n?m=u(o,w,m,b,this.isLittleEndian()):c("bitDepth",i)}t.data=o}getStripData(t,e,r){switch(t){case 1:return new DataView(this.buffer,e,r);case 2:case 32773:return c("Compression",t);default:throw new Error("invalid compression: "+t)}}}},8353:(t,e,r)=>{"use strict";const i=r(8029),n=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;function s(t){return"number"==typeof t?[t]:t}t.exports=class extends i{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){var t=new Date,e=n.exec(this.dateTime);return t.setFullYear(e[1],e[2]-1,e[3]),t.setHours(e[4],e[5],e[6]),t}get newSubfileType(){return this.get(254)}get imageWidth(){return this.get(256)}get imageLength(){return this.get(257)}get bitsPerSample(){return this.get(258)}get compression(){return this.get(259)||1}get type(){return this.get(262)}get fillOrder(){return this.get(266)||1}get documentName(){return this.get(269)}get imageDescription(){return this.get(270)}get stripOffsets(){return s(this.get(273))}get orientation(){return this.get(274)}get samplesPerPixel(){return this.get(277)}get rowsPerStrip(){return this.get(278)}get stripByteCounts(){return s(this.get(279))}get minSampleValue(){return this.get(280)||0}get maxSampleValue(){return this.get(281)||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get(282)}get yResolution(){return this.get(283)}get planarConfiguration(){return this.get(284)||1}get resolutionUnit(){return this.get(296)||2}get dateTime(){return this.get(306)}get predictor(){return this.get(317)||1}get sampleFormat(){return this.get(339)||1}get sMinSampleValue(){return this.get(340)||this.minSampleValue}get sMaxSampleValue(){return this.get(341)||this.maxSampleValue}}},9698:(t,e,r)=>{"use strict";const i=r(5838),n=r(9469);t.exports=function(t){const e=new i(t),r={};if(e.setBigEndian(),65496!==e.readUint16())throw new Error("SOI marker not found. Not a valid JPEG file");if(65505===e.readUint16()){e.readUint16();const t=e.readBytes(6);if(69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]&&0===t[4]&&0===t[5]){const t=n.decode(e,{onlyFirst:!0,ignoreImageData:!0,offset:e.offset});r.exif=t}}return r}},9464:(t,e,r)=>{"use strict";e.decode=r(9698)},8737:t=>{!function(){function e(t,e,r){this.next=r,r&&(r.prev=this),this.prev=e,e&&(e.next=this),this.data=t}function r(){if(!(this instanceof r))return new r;this._head=null,this._tail=null,this.length=0}r.prototype={push:function(t){this._tail=new e(t,this._tail,null),this._head||(this._head=this._tail),this.length++},pop:function(){if(0!==this.length){var t=this._tail;return this._tail=t.prev,t.prev&&(t.prev=this._tail.next=null),this.length--,1===this.length?this._head=this._tail:0===this.length&&(this._head=this._tail=null),t.data}},unshift:function(t){this._head=new e(t,null,this._head),this._tail||(this._tail=this._head),this.length++},shift:function(){if(0!==this.length){var t=this._head;return this._head=t.next,t.next&&(t.next=this._head.prev=null),this.length--,1===this.length?this._tail=this._head:0===this.length&&(this._head=this._tail=null),t.data}},item:function(t){t<0&&(t=this.length+t);for(var e=this._head;t-- >0&&e;)e=e.next;return e?e.data:void 0},slice:function(t,e){if(t||(t=0),e||(e=this.length),e<0&&(e=this.length+e),t<0&&(t=this.length+t),e===t)return[];if(e<t)throw new Error("invalid offset: "+t+","+e+" (length="+this.length+")");for(var r=e-t,i=new Array(r),n=0,s=this._head;t-- >0&&s;)s=s.next;for(;n<r&&s;)i[n++]=s.data,s=s.next;return i},drop:function(){r.call(this)},forEach:function(t,e){for(var r=this._head,i=0,n=this.length;i<n&&r;)t.call(e||this,r.data,i,this),r=r.next,i++},map:function(t,e){var i=new r;return this.forEach((function(r,n,s){i.push(t.call(e||s,r,n,s))})),i},filter:function(t,e){var i=new r;return this.forEach((function(r,n,s){t.call(e||s,r,n,s)&&i.push(r)})),i},reduce:function(t,e,r){var i=0,n=this._head,s=this.length;for(e||(i=1,e=n&&n.data,n=n&&n.next);i<s&&n;)e=t.call(r||this,e,n.data,this),i++,n=n.next;return e}},t.exports=r}()},7638:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const i=t.length;let n=0,s=Math.max(32,i+(i>>1)+7),o=new Uint8Array(s>>3<<3);for(;r<i;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<i){const i=t.charCodeAt(r);56320==(64512&i)&&(++r,e=((1023&e)<<10)+(1023&i)+65536)}if(e>=55296&&e<=56319)continue}if(n+4>o.length){s+=8,s*=1+r/t.length*2,s=s>>3<<3;const e=new Uint8Array(s);e.set(o),o=e}if(0!=(4294967168&e)){if(0==(4294965248&e))o[n++]=e>>6&31|192;else if(0==(4294901760&e))o[n++]=e>>12&15|224,o[n++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;o[n++]=e>>18&7|240,o[n++]=e>>12&63|128,o[n++]=e>>6&63|128}o[n++]=63&e|128}else o[n++]=e}return o.slice(0,n)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let i=0;const n=r.length,s=[];for(;i<n;){const t=r[i++];if(0===t)break;if(0==(128&t))s.push(t);else if(192==(224&t)){const e=63&r[i++];s.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[i++],n=63&r[i++];s.push((31&t)<<12|e<<6|n)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[i++])<<12|(63&r[i++])<<6|63&r[i++];e>65535&&(e-=65536,s.push(e>>>10&1023|55296),e=56320|1023&e),s.push(e)}}return String.fromCharCode.apply(null,s)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},9645:t=>{"use strict";function e(t){if(this.size=0|t,this.size<=1||0!=(this.size&this.size-1))throw new Error("FFT size must be a power of two and bigger than 1");this._csize=t<<1;for(var e=new Array(2*this.size),r=0;r<e.length;r+=2){const t=Math.PI*r/this.size;e[r]=Math.cos(t),e[r+1]=-Math.sin(t)}this.table=e;for(var i=0,n=1;this.size>n;n<<=1)i++;this._width=i%2==0?i-1:i,this._bitrev=new Array(1<<this._width);for(var s=0;s<this._bitrev.length;s++){this._bitrev[s]=0;for(var o=0;o<this._width;o+=2){var a=this._width-o-2;this._bitrev[s]|=(s>>>o&3)<<a}}this._out=null,this._data=null,this._inv=0}t.exports=e,e.prototype.fromComplexArray=function(t,e){for(var r=e||new Array(t.length>>>1),i=0;i<t.length;i+=2)r[i>>>1]=t[i];return r},e.prototype.createComplexArray=function(){const t=new Array(this._csize);for(var e=0;e<t.length;e++)t[e]=0;return t},e.prototype.toComplexArray=function(t,e){for(var r=e||this.createComplexArray(),i=0;i<r.length;i+=2)r[i]=t[i>>>1],r[i+1]=0;return r},e.prototype.completeSpectrum=function(t){for(var e=this._csize,r=e>>>1,i=2;i<r;i+=2)t[e-i]=t[i],t[e-i+1]=-t[i+1]},e.prototype.transform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._transform4(),this._out=null,this._data=null},e.prototype.realTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=0,this._realTransform4(),this._out=null,this._data=null},e.prototype.inverseTransform=function(t,e){if(t===e)throw new Error("Input and output buffers must be different");this._out=t,this._data=e,this._inv=1,this._transform4();for(var r=0;r<t.length;r++)t[r]/=this.size;this._out=null,this._data=null},e.prototype._transform4=function(){var t,e,r=this._out,i=this._csize,n=1<<this._width,s=i/n<<1,o=this._bitrev;if(4===s)for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleTransform2(t,r,n)}else for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleTransform4(t,r,n)}var a=this._inv?-1:1,h=this.table;for(n>>=2;n>=2;n>>=2){var l=(s=i/n<<1)>>>2;for(t=0;t<i;t+=s)for(var u=t+l,c=t,f=0;c<u;c+=2,f+=n){const t=c,e=t+l,i=e+l,n=i+l,s=r[t],o=r[t+1],u=r[e],d=r[e+1],p=r[i],m=r[i+1],g=r[n],w=r[n+1],b=s,y=o,_=h[f],v=a*h[f+1],x=u*_-d*v,k=u*v+d*_,A=h[2*f],M=a*h[2*f+1],E=p*A-m*M,S=p*M+m*A,C=h[3*f],I=a*h[3*f+1],D=g*C-w*I,P=g*I+w*C,B=b+E,R=y+S,T=b-E,U=y-S,O=x+D,L=k+P,F=a*(x-D),N=a*(k-P),z=B+O,j=R+L,Y=B-O,V=R-L,q=T+N,X=U-F,G=T-N,$=U+F;r[t]=z,r[t+1]=j,r[e]=q,r[e+1]=X,r[i]=Y,r[i+1]=V,r[n]=G,r[n+1]=$}}},e.prototype._singleTransform2=function(t,e,r){const i=this._out,n=this._data,s=n[e],o=n[e+1],a=n[e+r],h=n[e+r+1],l=s+a,u=o+h,c=s-a,f=o-h;i[t]=l,i[t+1]=u,i[t+2]=c,i[t+3]=f},e.prototype._singleTransform4=function(t,e,r){const i=this._out,n=this._data,s=this._inv?-1:1,o=2*r,a=3*r,h=n[e],l=n[e+1],u=n[e+r],c=n[e+r+1],f=n[e+o],d=n[e+o+1],p=n[e+a],m=n[e+a+1],g=h+f,w=l+d,b=h-f,y=l-d,_=u+p,v=c+m,x=s*(u-p),k=s*(c-m),A=g+_,M=w+v,E=b+k,S=y-x,C=g-_,I=w-v,D=b-k,P=y+x;i[t]=A,i[t+1]=M,i[t+2]=E,i[t+3]=S,i[t+4]=C,i[t+5]=I,i[t+6]=D,i[t+7]=P},e.prototype._realTransform4=function(){var t,e,r=this._out,i=this._csize,n=1<<this._width,s=i/n<<1,o=this._bitrev;if(4===s)for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleRealTransform2(t,r>>>1,n>>>1)}else for(t=0,e=0;t<i;t+=s,e++){const r=o[e];this._singleRealTransform4(t,r>>>1,n>>>1)}var a=this._inv?-1:1,h=this.table;for(n>>=2;n>=2;n>>=2){var l=(s=i/n<<1)>>>1,u=l>>>1,c=u>>>1;for(t=0;t<i;t+=s)for(var f=0,d=0;f<=c;f+=2,d+=n){var p=t+f,m=p+u,g=m+u,w=g+u,b=r[p],y=r[p+1],_=r[m],v=r[m+1],x=r[g],k=r[g+1],A=r[w],M=r[w+1],E=b,S=y,C=h[d],I=a*h[d+1],D=_*C-v*I,P=_*I+v*C,B=h[2*d],R=a*h[2*d+1],T=x*B-k*R,U=x*R+k*B,O=h[3*d],L=a*h[3*d+1],F=A*O-M*L,N=A*L+M*O,z=E+T,j=S+U,Y=E-T,V=S-U,q=D+F,X=P+N,G=a*(D-F),$=a*(P-N),W=z+q,Z=j+X,H=Y+$,K=V-G;if(r[p]=W,r[p+1]=Z,r[m]=H,r[m+1]=K,0!==f){if(f!==c){var J=Y+-a*$,Q=-a*G-V,tt=z+-a*q,et=-j- -a*X,rt=t+u-f,it=t+l-f;r[rt]=J,r[rt+1]=Q,r[it]=tt,r[it+1]=et}}else{var nt=z-q,st=j-X;r[g]=nt,r[g+1]=st}}}},e.prototype._singleRealTransform2=function(t,e,r){const i=this._out,n=this._data,s=n[e],o=n[e+r],a=s+o,h=s-o;i[t]=a,i[t+1]=0,i[t+2]=h,i[t+3]=0},e.prototype._singleRealTransform4=function(t,e,r){const i=this._out,n=this._data,s=this._inv?-1:1,o=2*r,a=3*r,h=n[e],l=n[e+r],u=n[e+o],c=n[e+a],f=h+u,d=h-u,p=l+c,m=s*(l-c),g=f+p,w=d,b=-m,y=f-p,_=d,v=m;i[t]=g,i[t+1]=0,i[t+2]=w,i[t+3]=b,i[t+4]=y,i[t+5]=0,i[t+6]=_,i[t+7]=v}},7769:module=>{"use strict";const toBytes=t=>[...t].map((t=>t.charCodeAt(0))),xpiZipFilename=toBytes("META-INF/mozilla.rsa"),oxmlContentTypes=toBytes("[Content_Types].xml"),oxmlRels=toBytes("_rels/.rels");function readUInt64LE(t,e=0){let r=t[e],i=1,n=0;for(;++n<8;)i*=256,r+=t[e+n]*i;return r}const fileType=t=>{if(!(t instanceof Uint8Array||t instanceof ArrayBuffer||Buffer.isBuffer(t)))throw new TypeError(`Expected the \`input\` argument to be of type \`Uint8Array\` or \`Buffer\` or \`ArrayBuffer\`, got \`${typeof t}\``);const e=t instanceof Uint8Array?t:new Uint8Array(t);if(!(e&&e.length>1))return null;const r=(t,r)=>{r=Object.assign({offset:0},r);for(let i=0;i<t.length;i++)if(r.mask){if(t[i]!==(r.mask[i]&e[i+r.offset]))return!1}else if(t[i]!==e[i+r.offset])return!1;return!0},i=(t,e)=>r(toBytes(t),e);if(r([255,216,255]))return{ext:"jpg",mime:"image/jpeg"};if(r([137,80,78,71,13,10,26,10]))return{ext:"png",mime:"image/png"};if(r([71,73,70]))return{ext:"gif",mime:"image/gif"};if(r([87,69,66,80],{offset:8}))return{ext:"webp",mime:"image/webp"};if(r([70,76,73,70]))return{ext:"flif",mime:"image/flif"};if((r([73,73,42,0])||r([77,77,0,42]))&&r([67,82],{offset:8}))return{ext:"cr2",mime:"image/x-canon-cr2"};if(r([73,73,42,0])||r([77,77,0,42]))return{ext:"tif",mime:"image/tiff"};if(r([66,77]))return{ext:"bmp",mime:"image/bmp"};if(r([73,73,188]))return{ext:"jxr",mime:"image/vnd.ms-photo"};if(r([56,66,80,83]))return{ext:"psd",mime:"image/vnd.adobe.photoshop"};if(r([80,75,3,4])){if(r([109,105,109,101,116,121,112,101,97,112,112,108,105,99,97,116,105,111,110,47,101,112,117,98,43,122,105,112],{offset:30}))return{ext:"epub",mime:"application/epub+zip"};if(r(xpiZipFilename,{offset:30}))return{ext:"xpi",mime:"application/x-xpinstall"};if(i("mimetypeapplication/vnd.oasis.opendocument.text",{offset:30}))return{ext:"odt",mime:"application/vnd.oasis.opendocument.text"};if(i("mimetypeapplication/vnd.oasis.opendocument.spreadsheet",{offset:30}))return{ext:"ods",mime:"application/vnd.oasis.opendocument.spreadsheet"};if(i("mimetypeapplication/vnd.oasis.opendocument.presentation",{offset:30}))return{ext:"odp",mime:"application/vnd.oasis.opendocument.presentation"};const t=(t,e=0)=>t.findIndex(((t,r,i)=>r>=e&&80===i[r]&&75===i[r+1]&&3===i[r+2]&&4===i[r+3]));let n=0,s=!1,o=null;do{const a=n+30;if(s||(s=r(oxmlContentTypes,{offset:a})||r(oxmlRels,{offset:a})),o||(i("word/",{offset:a})?o={ext:"docx",mime:"application/vnd.openxmlformats-officedocument.wordprocessingml.document"}:i("ppt/",{offset:a})?o={ext:"pptx",mime:"application/vnd.openxmlformats-officedocument.presentationml.presentation"}:i("xl/",{offset:a})&&(o={ext:"xlsx",mime:"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"})),s&&o)return o;n=t(e,a)}while(n>=0);if(o)return o}if(r([80,75])&&(3===e[2]||5===e[2]||7===e[2])&&(4===e[3]||6===e[3]||8===e[3]))return{ext:"zip",mime:"application/zip"};if(r([117,115,116,97,114],{offset:257}))return{ext:"tar",mime:"application/x-tar"};if(r([82,97,114,33,26,7])&&(0===e[6]||1===e[6]))return{ext:"rar",mime:"application/x-rar-compressed"};if(r([31,139,8]))return{ext:"gz",mime:"application/gzip"};if(r([66,90,104]))return{ext:"bz2",mime:"application/x-bzip2"};if(r([55,122,188,175,39,28]))return{ext:"7z",mime:"application/x-7z-compressed"};if(r([120,1]))return{ext:"dmg",mime:"application/x-apple-diskimage"};if(r([51,103,112,53])||r([0,0,0])&&r([102,116,121,112],{offset:4})&&(r([109,112,52,49],{offset:8})||r([109,112,52,50],{offset:8})||r([105,115,111,109],{offset:8})||r([105,115,111,50],{offset:8})||r([109,109,112,52],{offset:8})||r([77,52,86],{offset:8})||r([100,97,115,104],{offset:8})))return{ext:"mp4",mime:"video/mp4"};if(r([77,84,104,100]))return{ext:"mid",mime:"audio/midi"};if(r([26,69,223,163])){const t=e.subarray(4,4100),r=t.findIndex(((t,e,r)=>66===r[e]&&130===r[e+1]));if(-1!==r){const e=r+3,i=r=>[...r].every(((r,i)=>t[e+i]===r.charCodeAt(0)));if(i("matroska"))return{ext:"mkv",mime:"video/x-matroska"};if(i("webm"))return{ext:"webm",mime:"video/webm"}}}if(r([0,0,0,20,102,116,121,112,113,116,32,32])||r([102,114,101,101],{offset:4})||r([102,116,121,112,113,116,32,32],{offset:4})||r([109,100,97,116],{offset:4})||r([109,111,111,118],{offset:4})||r([119,105,100,101],{offset:4}))return{ext:"mov",mime:"video/quicktime"};if(r([82,73,70,70])){if(r([65,86,73],{offset:8}))return{ext:"avi",mime:"video/vnd.avi"};if(r([87,65,86,69],{offset:8}))return{ext:"wav",mime:"audio/vnd.wave"};if(r([81,76,67,77],{offset:8}))return{ext:"qcp",mime:"audio/qcelp"}}if(r([48,38,178,117,142,102,207,17,166,217])){let t=30;do{const i=readUInt64LE(e,t+16);if(r([145,7,220,183,183,169,207,17,142,230,0,192,12,32,83,101],{offset:t})){if(r([64,158,105,248,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wma",mime:"audio/x-ms-wma"};if(r([192,239,25,188,77,91,207,17,168,253,0,128,95,92,68,43],{offset:t+24}))return{ext:"wmv",mime:"video/x-ms-asf"};break}t+=i}while(t+24<=e.length);return{ext:"asf",mime:"application/vnd.ms-asf"}}if(r([0,0,1,186])||r([0,0,1,179]))return{ext:"mpg",mime:"video/mpeg"};if(r([102,116,121,112,51,103],{offset:4}))return{ext:"3gp",mime:"video/3gpp"};for(let t=0;t<2&&t<e.length-16;t++){if(r([73,68,51],{offset:t})||r([255,226],{offset:t,mask:[255,226]}))return{ext:"mp3",mime:"audio/mpeg"};if(r([255,228],{offset:t,mask:[255,228]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,248],{offset:t,mask:[255,252]}))return{ext:"mp2",mime:"audio/mpeg"};if(r([255,240],{offset:t,mask:[255,252]}))return{ext:"mp4",mime:"audio/mpeg"}}if(r([102,116,121,112,77,52,65],{offset:4}))return{ext:"m4a",mime:"audio/mp4"};if(r([79,112,117,115,72,101,97,100],{offset:28}))return{ext:"opus",mime:"audio/opus"};if(r([79,103,103,83]))return r([128,116,104,101,111,114,97],{offset:28})?{ext:"ogv",mime:"video/ogg"}:r([1,118,105,100,101,111,0],{offset:28})?{ext:"ogm",mime:"video/ogg"}:r([127,70,76,65,67],{offset:28})?{ext:"oga",mime:"audio/ogg"}:r([83,112,101,101,120,32,32],{offset:28})?{ext:"spx",mime:"audio/ogg"}:r([1,118,111,114,98,105,115],{offset:28})?{ext:"ogg",mime:"audio/ogg"}:{ext:"ogx",mime:"application/ogg"};if(r([102,76,97,67]))return{ext:"flac",mime:"audio/x-flac"};if(r([77,65,67,32]))return{ext:"ape",mime:"audio/ape"};if(r([119,118,112,107]))return{ext:"wv",mime:"audio/wavpack"};if(r([35,33,65,77,82,10]))return{ext:"amr",mime:"audio/amr"};if(r([37,80,68,70]))return{ext:"pdf",mime:"application/pdf"};if(r([77,90]))return{ext:"exe",mime:"application/x-msdownload"};if((67===e[0]||70===e[0])&&r([87,83],{offset:1}))return{ext:"swf",mime:"application/x-shockwave-flash"};if(r([123,92,114,116,102]))return{ext:"rtf",mime:"application/rtf"};if(r([0,97,115,109]))return{ext:"wasm",mime:"application/wasm"};if(r([119,79,70,70])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff",mime:"font/woff"};if(r([119,79,70,50])&&(r([0,1,0,0],{offset:4})||r([79,84,84,79],{offset:4})))return{ext:"woff2",mime:"font/woff2"};if(r([76,80],{offset:34})&&(r([0,0,1],{offset:8})||r([1,0,2],{offset:8})||r([2,0,2],{offset:8})))return{ext:"eot",mime:"application/vnd.ms-fontobject"};if(r([0,1,0,0,0]))return{ext:"ttf",mime:"font/ttf"};if(r([79,84,84,79,0]))return{ext:"otf",mime:"font/otf"};if(r([0,0,1,0]))return{ext:"ico",mime:"image/x-icon"};if(r([0,0,2,0]))return{ext:"cur",mime:"image/x-icon"};if(r([70,76,86,1]))return{ext:"flv",mime:"video/x-flv"};if(r([37,33]))return{ext:"ps",mime:"application/postscript"};if(r([253,55,122,88,90,0]))return{ext:"xz",mime:"application/x-xz"};if(r([83,81,76,105]))return{ext:"sqlite",mime:"application/x-sqlite3"};if(r([78,69,83,26]))return{ext:"nes",mime:"application/x-nintendo-nes-rom"};if(r([67,114,50,52]))return{ext:"crx",mime:"application/x-google-chrome-extension"};if(r([77,83,67,70])||r([73,83,99,40]))return{ext:"cab",mime:"application/vnd.ms-cab-compressed"};if(r([33,60,97,114,99,104,62,10,100,101,98,105,97,110,45,98,105,110,97,114,121]))return{ext:"deb",mime:"application/x-deb"};if(r([33,60,97,114,99,104,62]))return{ext:"ar",mime:"application/x-unix-archive"};if(r([237,171,238,219]))return{ext:"rpm",mime:"application/x-rpm"};if(r([31,160])||r([31,157]))return{ext:"Z",mime:"application/x-compress"};if(r([76,90,73,80]))return{ext:"lz",mime:"application/x-lzip"};if(r([208,207,17,224,161,177,26,225]))return{ext:"msi",mime:"application/x-msi"};if(r([6,14,43,52,2,5,1,1,13,1,2,1,1,2]))return{ext:"mxf",mime:"application/mxf"};if(r([71],{offset:4})&&(r([71],{offset:192})||r([71],{offset:196})))return{ext:"mts",mime:"video/mp2t"};if(r([66,76,69,78,68,69,82]))return{ext:"blend",mime:"application/x-blender"};if(r([66,80,71,251]))return{ext:"bpg",mime:"image/bpg"};if(r([0,0,0,12,106,80,32,32,13,10,135,10])){if(r([106,112,50,32],{offset:20}))return{ext:"jp2",mime:"image/jp2"};if(r([106,112,120,32],{offset:20}))return{ext:"jpx",mime:"image/jpx"};if(r([106,112,109,32],{offset:20}))return{ext:"jpm",mime:"image/jpm"};if(r([109,106,112,50],{offset:20}))return{ext:"mj2",mime:"image/mj2"}}if(r([70,79,82,77]))return{ext:"aif",mime:"audio/aiff"};if(i("<?xml "))return{ext:"xml",mime:"application/xml"};if(r([66,79,79,75,77,79,66,73],{offset:60}))return{ext:"mobi",mime:"application/x-mobipocket-ebook"};if(r([102,116,121,112],{offset:4})){if(r([109,105,102,49],{offset:8}))return{ext:"heic",mime:"image/heif"};if(r([109,115,102,49],{offset:8}))return{ext:"heic",mime:"image/heif-sequence"};if(r([104,101,105,99],{offset:8})||r([104,101,105,120],{offset:8}))return{ext:"heic",mime:"image/heic"};if(r([104,101,118,99],{offset:8})||r([104,101,118,120],{offset:8}))return{ext:"heic",mime:"image/heic-sequence"}}return r([171,75,84,88,32,49,49,187,13,10,26,10])?{ext:"ktx",mime:"image/ktx"}:r([68,73,67,77],{offset:128})?{ext:"dcm",mime:"application/dicom"}:r([77,80,43])||r([77,80,67,75])?{ext:"mpc",mime:"audio/x-musepack"}:r([66,69,71,73,78,58])?{ext:"ics",mime:"text/calendar"}:r([103,108,84,70,2,0,0,0])?{ext:"glb",mime:"model/gltf-binary"}:r([212,195,178,161])||r([161,178,195,212])?{ext:"pcap",mime:"application/vnd.tcpdump.pcap"}:null};module.exports=fileType,module.exports.default=fileType,Object.defineProperty(fileType,"minimumBytes",{value:4100}),module.exports.stream=readableStream=>new Promise(((resolve,reject)=>{const stream=eval("require")("stream");readableStream.once("readable",(()=>{const t=new stream.PassThrough,e=readableStream.read(module.exports.minimumBytes)||readableStream.read();try{t.fileType=fileType(e)}catch(t){reject(t)}readableStream.unshift(e),stream.pipeline?resolve(stream.pipeline(readableStream,t,(()=>{}))):resolve(readableStream.pipe(t))}))}))},2251:(t,e,r)=>{var i=Object.prototype.hasOwnProperty;t.exports=e=function(t,e){return i.call(e,t)},e.version=r(2898).version},645:(t,e)=>{e.read=function(t,e,r,i,n){var s,o,a=8*n-i-1,h=(1<<a)-1,l=h>>1,u=-7,c=r?n-1:0,f=r?-1:1,d=t[e+c];for(c+=f,s=d&(1<<-u)-1,d>>=-u,u+=a;u>0;s=256*s+t[e+c],c+=f,u-=8);for(o=s&(1<<-u)-1,s>>=-u,u+=i;u>0;o=256*o+t[e+c],c+=f,u-=8);if(0===s)s=1-l;else{if(s===h)return o?NaN:1/0*(d?-1:1);o+=Math.pow(2,i),s-=l}return(d?-1:1)*o*Math.pow(2,s-i)},e.write=function(t,e,r,i,n,s){var o,a,h,l=8*s-n-1,u=(1<<l)-1,c=u>>1,f=23===n?Math.pow(2,-24)-Math.pow(2,-77):0,d=i?0:s-1,p=i?1:-1,m=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(a=isNaN(e)?1:0,o=u):(o=Math.floor(Math.log(e)/Math.LN2),e*(h=Math.pow(2,-o))<1&&(o--,h*=2),(e+=o+c>=1?f/h:f*Math.pow(2,1-c))*h>=2&&(o++,h/=2),o+c>=u?(a=0,o=u):o+c>=1?(a=(e*h-1)*Math.pow(2,n),o+=c):(a=e*Math.pow(2,c-1)*Math.pow(2,n),o=0));n>=8;t[r+d]=255&a,d+=p,a/=256,n-=8);for(o=o<<n|a,l+=n;l>0;t[r+d]=255&o,d+=p,o/=256,l-=8);t[r+d-p]|=128*m}},9184:(t,e,r)=>{"use strict";const i=r(7769),n=new Set(["jpg","png","gif","webp","flif","cr2","tif","bmp","jxr","psd","ico","bpg","jp2","jpm","jpx","heic","cur","dcm"]),s=t=>{const e=i(t);return n.has(e&&e.ext)?e:null};t.exports=s,t.exports.default=s,Object.defineProperty(s,"minimumBytes",{value:i.minimumBytes})},5838:t=>{"use strict";const e=[];t.exports=class{constructor(t,e){e=e||{},void 0===t&&(t=8192),"number"==typeof t&&(t=new ArrayBuffer(t));let r=t.byteLength;const i=e.offset?e.offset>>>0:0;t.buffer&&(r=t.byteLength-i,t=t.byteLength!==t.buffer.byteLength?t.buffer.slice(t.byteOffset+i,t.byteOffset+t.byteLength):i?t.buffer.slice(i):t.buffer),this.buffer=t,this.length=r,this.byteLength=r,this.byteOffset=0,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer),this._increment=r||8192,this._mark=0}available(t){return void 0===t&&(t=1),this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){this.littleEndian=!0}isBigEndian(){return!this.littleEndian}setBigEndian(){this.littleEndian=!1}skip(t){void 0===t&&(t=1),this.offset+=t}seek(t){this.offset=t}mark(){this._mark=this.offset}reset(){this.offset=this._mark}rewind(){this.offset=0}ensureAvailable(t){if(void 0===t&&(t=1),!this.available(t)){const t=this._increment+this._increment;this._increment=t;const e=this.length+t,r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=e,this._data=new DataView(this.buffer)}}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t){void 0===t&&(t=1);for(var e=new Uint8Array(t),r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){var t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){var t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){var t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){var t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){var t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){var t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t){void 0===t&&(t=1),e.length=t;for(var r=0;r<t;r++)e[r]=this.readChar();return e.join("")}writeBoolean(t){this.writeUint8(t?255:0)}writeInt8(t){this.ensureAvailable(1),this._data.setInt8(this.offset++,t)}writeUint8(t){this.ensureAvailable(1),this._data.setUint8(this.offset++,t)}writeByte(t){this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(var e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e])}writeInt16(t){this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2}writeUint16(t){this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2}writeInt32(t){this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4}writeUint32(t){this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat32(t){this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4}writeFloat64(t){this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8}writeChar(t){this.writeUint8(t.charCodeAt(0))}writeChars(t){for(var e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e))}toArray(){return new Uint8Array(this.buffer,0,this.offset)}}},7531:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});const i=Object.prototype.toString;function n(t){return i.call(t).endsWith("Array]")}},7811:t=>{"use strict";var e=Object.prototype.toString;t.exports=function(t){return"Array"===e.call(t).substr(-6,5)}},1867:t=>{"use strict";t.exports=Number.isFinite||function(t){return!("number"!=typeof t||t!=t||t===1/0||t===-1/0)}},8336:(t,e,r)=>{var i=r(1867);t.exports=Number.isInteger||function(t){return"number"==typeof t&&i(t)&&Math.floor(t)===t}},7870:(t,e,r)=>{var i=r(587),n=r(914);t.exports={encode:i,decode:n}},914:t=>{var e=function(){"use strict";var t=new Int32Array([0,1,8,16,9,2,3,10,17,24,32,25,18,11,4,5,12,19,26,33,40,48,41,34,27,20,13,6,7,14,21,28,35,42,49,56,57,50,43,36,29,22,15,23,30,37,44,51,58,59,52,45,38,31,39,46,53,60,61,54,47,55,62,63]),e=4017,r=799,i=3406,n=2276,s=1567,o=3784,a=5793,h=2896;function l(){}function u(t,e){for(var r,i,n=0,s=[],o=16;o>0&&!t[o-1];)o--;s.push({children:[],index:0});var a,h=s[0];for(r=0;r<o;r++){for(i=0;i<t[r];i++){for((h=s.pop()).children[h.index]=e[n];h.index>0;){if(0===s.length)throw new Error("Could not recreate Huffman Table");h=s.pop()}for(h.index++,s.push(h);s.length<=r;)s.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a;n++}r+1<o&&(s.push(a={children:[],index:0}),h.children[h.index]=a.children,h=a)}return s[0].children}function c(e,r,i,n,s,o,a,h,l,u){i.precision,i.samplesPerLine,i.scanLines;var c=i.mcusPerLine,f=i.progressive,d=(i.maxH,i.maxV,r),p=0,m=0;function g(){if(m>0)return m--,p>>m&1;if(255==(p=e[r++])){var t=e[r++];if(t)throw new Error("unexpected marker: "+(p<<8|t).toString(16))}return m=7,p>>>7}function w(t){for(var e,r=t;null!==(e=g());){if("number"==typeof(r=r[e]))return r;if("object"!=typeof r)throw new Error("invalid huffman sequence")}return null}function b(t){for(var e=0;t>0;){var r=g();if(null===r)return;e=e<<1|r,t--}return e}function y(t){var e=b(t);return e>=1<<t-1?e:e+(-1<<t)+1}var _,v=0,x=0;function k(t,e,r,i,n){var s=r%c,o=(r/c|0)*t.v+i,a=s*t.h+n;void 0===t.blocks[o]&&u.tolerantDecoding||e(t,t.blocks[o][a])}function A(t,e,r){var i=r/t.blocksPerLine|0,n=r%t.blocksPerLine;void 0===t.blocks[i]&&u.tolerantDecoding||e(t,t.blocks[i][n])}var M,E,S,C,I,D,P=n.length;D=f?0===o?0===h?function(t,e){var r=w(t.huffmanTableDC),i=0===r?0:y(r)<<l;e[0]=t.pred+=i}:function(t,e){e[0]|=g()<<l}:0===h?function(e,r){if(v>0)v--;else for(var i=o,n=a;i<=n;){var s=w(e.huffmanTableAC),h=15&s,u=s>>4;if(0!==h)r[t[i+=u]]=y(h)*(1<<l),i++;else{if(u<15){v=b(u)+(1<<u)-1;break}i+=16}}}:function(e,r){for(var i=o,n=a,s=0;i<=n;){var h=t[i],u=r[h]<0?-1:1;switch(x){case 0:var c=w(e.huffmanTableAC),f=15&c;if(s=c>>4,0===f)s<15?(v=b(s)+(1<<s),x=4):(s=16,x=1);else{if(1!==f)throw new Error("invalid ACn encoding");_=y(f),x=s?2:3}continue;case 1:case 2:r[h]?r[h]+=(g()<<l)*u:0==--s&&(x=2==x?3:0);break;case 3:r[h]?r[h]+=(g()<<l)*u:(r[h]=_<<l,x=0);break;case 4:r[h]&&(r[h]+=(g()<<l)*u)}i++}4===x&&0==--v&&(x=0)}:function(e,r){var i=w(e.huffmanTableDC),n=0===i?0:y(i);r[0]=e.pred+=n;for(var s=1;s<64;){var o=w(e.huffmanTableAC),a=15&o,h=o>>4;if(0!==a)r[t[s+=h]]=y(a),s++;else{if(h<15)break;s+=16}}};var B,R,T,U,O=0;for(R=1==P?n[0].blocksPerLine*n[0].blocksPerColumn:c*i.mcusPerColumn,s||(s=R);O<R;){for(E=0;E<P;E++)n[E].pred=0;if(v=0,1==P)for(M=n[0],I=0;I<s;I++)A(M,D,O),O++;else for(I=0;I<s;I++){for(E=0;E<P;E++)for(T=(M=n[E]).h,U=M.v,S=0;S<U;S++)for(C=0;C<T;C++)k(M,D,O,S,C);if(++O===R)break}if(O===R)do{if(255===e[r]&&0!==e[r+1])break;r+=1}while(r<e.length-2);if(m=0,(B=e[r]<<8|e[r+1])<65280)throw new Error("marker was not found");if(!(B>=65488&&B<=65495))break;r+=2}return r-d}function f(t,l){var u,c,f=[],d=l.blocksPerLine,p=l.blocksPerColumn,m=d<<3,w=new Int32Array(64),b=new Uint8Array(64);function y(t,u,c){var f,d,p,m,g,w,b,y,_,v,x=l.quantizationTable,k=c;for(v=0;v<64;v++)k[v]=t[v]*x[v];for(v=0;v<8;++v){var A=8*v;0!=k[1+A]||0!=k[2+A]||0!=k[3+A]||0!=k[4+A]||0!=k[5+A]||0!=k[6+A]||0!=k[7+A]?(f=a*k[0+A]+128>>8,d=a*k[4+A]+128>>8,p=k[2+A],m=k[6+A],g=h*(k[1+A]-k[7+A])+128>>8,y=h*(k[1+A]+k[7+A])+128>>8,w=k[3+A]<<4,b=k[5+A]<<4,_=f-d+1>>1,f=f+d+1>>1,d=_,_=p*o+m*s+128>>8,p=p*s-m*o+128>>8,m=_,_=g-b+1>>1,g=g+b+1>>1,b=_,_=y+w+1>>1,w=y-w+1>>1,y=_,_=f-m+1>>1,f=f+m+1>>1,m=_,_=d-p+1>>1,d=d+p+1>>1,p=_,_=g*n+y*i+2048>>12,g=g*i-y*n+2048>>12,y=_,_=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=_,k[0+A]=f+y,k[7+A]=f-y,k[1+A]=d+b,k[6+A]=d-b,k[2+A]=p+w,k[5+A]=p-w,k[3+A]=m+g,k[4+A]=m-g):(_=a*k[0+A]+512>>10,k[0+A]=_,k[1+A]=_,k[2+A]=_,k[3+A]=_,k[4+A]=_,k[5+A]=_,k[6+A]=_,k[7+A]=_)}for(v=0;v<8;++v){var M=v;0!=k[8+M]||0!=k[16+M]||0!=k[24+M]||0!=k[32+M]||0!=k[40+M]||0!=k[48+M]||0!=k[56+M]?(f=a*k[0+M]+2048>>12,d=a*k[32+M]+2048>>12,p=k[16+M],m=k[48+M],g=h*(k[8+M]-k[56+M])+2048>>12,y=h*(k[8+M]+k[56+M])+2048>>12,w=k[24+M],b=k[40+M],_=f-d+1>>1,f=f+d+1>>1,d=_,_=p*o+m*s+2048>>12,p=p*s-m*o+2048>>12,m=_,_=g-b+1>>1,g=g+b+1>>1,b=_,_=y+w+1>>1,w=y-w+1>>1,y=_,_=f-m+1>>1,f=f+m+1>>1,m=_,_=d-p+1>>1,d=d+p+1>>1,p=_,_=g*n+y*i+2048>>12,g=g*i-y*n+2048>>12,y=_,_=w*r+b*e+2048>>12,w=w*e-b*r+2048>>12,b=_,k[0+M]=f+y,k[56+M]=f-y,k[8+M]=d+b,k[48+M]=d-b,k[16+M]=p+w,k[40+M]=p-w,k[24+M]=m+g,k[32+M]=m-g):(_=a*c[v+0]+8192>>14,k[0+M]=_,k[8+M]=_,k[16+M]=_,k[24+M]=_,k[32+M]=_,k[40+M]=_,k[48+M]=_,k[56+M]=_)}for(v=0;v<64;++v){var E=128+(k[v]+8>>4);u[v]=E<0?0:E>255?255:E}}g(m*p*8);for(var _=0;_<p;_++){var v=_<<3;for(u=0;u<8;u++)f.push(new Uint8Array(m));for(var x=0;x<d;x++){y(l.blocks[_][x],b,w);var k=0,A=x<<3;for(c=0;c<8;c++){var M=f[v+c];for(u=0;u<8;u++)M[A+u]=b[k++]}}}return f}function d(t){return t<0?0:t>255?255:t}l.prototype={load:function(t){var e=new XMLHttpRequest;e.open("GET",t,!0),e.responseType="arraybuffer",e.onload=function(){var t=new Uint8Array(e.response||e.mozResponseArrayBuffer);this.parse(t),this.onload&&this.onload()}.bind(this),e.send(null)},parse:function(e){var r=1e3*this.opts.maxResolutionInMP*1e3,i=0;function n(){var t=e[i]<<8|e[i+1];return i+=2,t}function s(t){var e,r,i=0,n=0;for(r in t.components)t.components.hasOwnProperty(r)&&(i<(e=t.components[r]).h&&(i=e.h),n<e.v&&(n=e.v));var s=Math.ceil(t.samplesPerLine/8/i),o=Math.ceil(t.scanLines/8/n);for(r in t.components)if(t.components.hasOwnProperty(r)){e=t.components[r];var a=Math.ceil(Math.ceil(t.samplesPerLine/8)*e.h/i),h=Math.ceil(Math.ceil(t.scanLines/8)*e.v/n),l=s*e.h,u=o*e.v,c=[];g(u*l*256);for(var f=0;f<u;f++){for(var d=[],p=0;p<l;p++)d.push(new Int32Array(64));c.push(d)}e.blocksPerLine=a,e.blocksPerColumn=h,e.blocks=c}t.maxH=i,t.maxV=n,t.mcusPerLine=s,t.mcusPerColumn=o}e.length;var o,a,h,l,d=null,p=null,m=[],w=[],b=[],y=[],_=n(),v=-1;if(this.comments=[],65496!=_)throw new Error("SOI not found");for(_=n();65497!=_;){switch(_){case 65280:break;case 65504:case 65505:case 65506:case 65507:case 65508:case 65509:case 65510:case 65511:case 65512:case 65513:case 65514:case 65515:case 65516:case 65517:case 65518:case 65519:case 65534:var x=(h=void 0,l=void 0,h=n(),l=e.subarray(i,i+h-2),i+=l.length,l);if(65534===_){var k=String.fromCharCode.apply(null,x);this.comments.push(k)}65504===_&&74===x[0]&&70===x[1]&&73===x[2]&&70===x[3]&&0===x[4]&&(d={version:{major:x[5],minor:x[6]},densityUnits:x[7],xDensity:x[8]<<8|x[9],yDensity:x[10]<<8|x[11],thumbWidth:x[12],thumbHeight:x[13],thumbData:x.subarray(14,14+3*x[12]*x[13])}),65505===_&&69===x[0]&&120===x[1]&&105===x[2]&&102===x[3]&&0===x[4]&&(this.exifBuffer=x.subarray(5,x.length)),65518===_&&65===x[0]&&100===x[1]&&111===x[2]&&98===x[3]&&101===x[4]&&0===x[5]&&(p={version:x[6],flags0:x[7]<<8|x[8],flags1:x[9]<<8|x[10],transformCode:x[11]});break;case 65499:for(var A=n()+i-2;i<A;){var M=e[i++];g(256);var E=new Int32Array(64);if(M>>4==0)for(W=0;W<64;W++)E[t[W]]=e[i++];else{if(M>>4!=1)throw new Error("DQT: invalid table spec");for(W=0;W<64;W++)E[t[W]]=n()}m[15&M]=E}break;case 65472:case 65473:case 65474:n(),(o={}).extended=65473===_,o.progressive=65474===_,o.precision=e[i++],o.scanLines=n(),o.samplesPerLine=n(),o.components={},o.componentsOrder=[];var S=o.scanLines*o.samplesPerLine;if(S>r){var C=Math.ceil((S-r)/1e6);throw new Error(`maxResolutionInMP limit exceeded by ${C}MP`)}var I,D=e[i++];for(G=0;G<D;G++){I=e[i];var P=e[i+1]>>4,B=15&e[i+1],R=e[i+2];o.componentsOrder.push(I),o.components[I]={h:P,v:B,quantizationIdx:R},i+=3}s(o),w.push(o);break;case 65476:var T=n();for(G=2;G<T;){var U=e[i++],O=new Uint8Array(16),L=0;for(W=0;W<16;W++,i++)L+=O[W]=e[i];g(16+L);var F=new Uint8Array(L);for(W=0;W<L;W++,i++)F[W]=e[i];G+=17+L,(U>>4==0?y:b)[15&U]=u(O,F)}break;case 65501:n(),a=n();break;case 65500:n(),n();break;case 65498:n();var N=e[i++],z=[];for(G=0;G<N;G++){Z=o.components[e[i++]];var j=e[i++];Z.huffmanTableDC=y[j>>4],Z.huffmanTableAC=b[15&j],z.push(Z)}var Y=e[i++],V=e[i++],q=e[i++],X=c(e,i,o,z,a,Y,V,q>>4,15&q,this.opts);i+=X;break;case 65535:255!==e[i]&&i--;break;default:if(255==e[i-3]&&e[i-2]>=192&&e[i-2]<=254){i-=3;break}if(224===_||225==_){if(-1!==v)throw new Error(`first unknown JPEG marker at offset ${v.toString(16)}, second unknown JPEG marker ${_.toString(16)} at offset ${(i-1).toString(16)}`);v=i-1;const t=n();if(255===e[i+t-2]){i+=t-2;break}}throw new Error("unknown JPEG marker "+_.toString(16))}_=n()}if(1!=w.length)throw new Error("only single frame JPEGs supported");for(var G=0;G<w.length;G++){var $=w[G].components;for(var W in $)$[W].quantizationTable=m[$[W].quantizationIdx],delete $[W].quantizationIdx}for(this.width=o.samplesPerLine,this.height=o.scanLines,this.jfif=d,this.adobe=p,this.components=[],G=0;G<o.componentsOrder.length;G++){var Z=o.components[o.componentsOrder[G]];this.components.push({lines:f(0,Z),scaleX:Z.h/o.maxH,scaleY:Z.v/o.maxV})}},getData:function(t,e){var r,i,n,s,o,a,h,l,u,c,f,p,m,w,b,y,_,v,x,k,A,M=this.width/t,E=this.height/e,S=0,C=t*e*this.components.length;g(C);var I=new Uint8Array(C);switch(this.components.length){case 1:for(r=this.components[0],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],u=0;u<t;u++)f=o[0|u*r.scaleX*M],I[S++]=f;break;case 2:for(r=this.components[0],i=this.components[1],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],u=0;u<t;u++)f=o[0|u*r.scaleX*M],I[S++]=f,f=a[0|u*i.scaleX*M],I[S++]=f;break;case 3:for(A=!0,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],i=this.components[1],n=this.components[2],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],h=n.lines[0|c*n.scaleY*E],u=0;u<t;u++)A?(f=o[0|u*r.scaleX*M],p=a[0|u*i.scaleX*M],v=d(f+1.402*((m=h[0|u*n.scaleX*M])-128)),x=d(f-.3441363*(p-128)-.71413636*(m-128)),k=d(f+1.772*(p-128))):(v=o[0|u*r.scaleX*M],x=a[0|u*i.scaleX*M],k=h[0|u*n.scaleX*M]),I[S++]=v,I[S++]=x,I[S++]=k;break;case 4:if(!this.adobe)throw new Error("Unsupported color mode (4 components)");for(A=!1,this.adobe&&this.adobe.transformCode?A=!0:void 0!==this.opts.colorTransform&&(A=!!this.opts.colorTransform),r=this.components[0],i=this.components[1],n=this.components[2],s=this.components[3],c=0;c<e;c++)for(o=r.lines[0|c*r.scaleY*E],a=i.lines[0|c*i.scaleY*E],h=n.lines[0|c*n.scaleY*E],l=s.lines[0|c*s.scaleY*E],u=0;u<t;u++)A?(f=o[0|u*r.scaleX*M],p=a[0|u*i.scaleX*M],m=h[0|u*n.scaleX*M],w=l[0|u*s.scaleX*M],b=255-d(f+1.402*(m-128)),y=255-d(f-.3441363*(p-128)-.71413636*(m-128)),_=255-d(f+1.772*(p-128))):(b=o[0|u*r.scaleX*M],y=a[0|u*i.scaleX*M],_=h[0|u*n.scaleX*M],w=l[0|u*s.scaleX*M]),I[S++]=255-b,I[S++]=255-y,I[S++]=255-_,I[S++]=255-w;break;default:throw new Error("Unsupported color mode")}return I},copyToImageData:function(t,e){var r,i,n,s,o,a,h,l,u,c=t.width,f=t.height,p=t.data,m=this.getData(c,f),g=0,w=0;switch(this.components.length){case 1:for(i=0;i<f;i++)for(r=0;r<c;r++)n=m[g++],p[w++]=n,p[w++]=n,p[w++]=n,e&&(p[w++]=255);break;case 3:for(i=0;i<f;i++)for(r=0;r<c;r++)h=m[g++],l=m[g++],u=m[g++],p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;case 4:for(i=0;i<f;i++)for(r=0;r<c;r++)o=m[g++],a=m[g++],n=m[g++],h=255-d(o*(1-(s=m[g++])/255)+s),l=255-d(a*(1-s/255)+s),u=255-d(n*(1-s/255)+s),p[w++]=h,p[w++]=l,p[w++]=u,e&&(p[w++]=255);break;default:throw new Error("Unsupported color mode")}}};var p=0,m=0;function g(t=0){var e=p+t;if(e>m){var r=Math.ceil((e-m)/1024/1024);throw new Error(`maxMemoryUsageInMB limit exceeded by at least ${r}MB`)}p=e}return l.resetMaxMemoryUsage=function(t){p=0,m=t},l.getBytesAllocated=function(){return p},l.requestMemoryAllocation=g,l}();t.exports=function(t,r={}){var i={colorTransform:void 0,useTArray:!1,formatAsRGBA:!0,tolerantDecoding:!0,maxResolutionInMP:100,maxMemoryUsageInMB:512,...r},n=new Uint8Array(t),s=new e;s.opts=i,e.resetMaxMemoryUsage(1024*i.maxMemoryUsageInMB*1024),s.parse(n);var o=i.formatAsRGBA?4:3,a=s.width*s.height*o;try{e.requestMemoryAllocation(a);var h={width:s.width,height:s.height,exifBuffer:s.exifBuffer,data:i.useTArray?new Uint8Array(a):Buffer.alloc(a)};s.comments.length>0&&(h.comments=s.comments)}catch(t){throw t instanceof RangeError?new Error("Could not allocate enough memory for the image. Required: "+a):t}return s.copyToImageData(h,i.formatAsRGBA),h}},587:t=>{function e(t){Math.round;var e,r,i,n,s,o=Math.floor,a=new Array(64),h=new Array(64),l=new Array(64),u=new Array(64),c=new Array(65535),f=new Array(65535),d=new Array(64),p=new Array(64),m=[],g=0,w=7,b=new Array(64),y=new Array(64),_=new Array(64),v=new Array(256),x=new Array(2048),k=[0,1,5,6,14,15,27,28,2,4,7,13,16,26,29,42,3,8,12,17,25,30,41,43,9,11,18,24,31,40,44,53,10,19,23,32,39,45,52,54,20,22,33,38,46,51,55,60,21,34,37,47,50,56,59,61,35,36,48,49,57,58,62,63],A=[0,0,1,5,1,1,1,1,1,1,0,0,0,0,0,0,0],M=[0,1,2,3,4,5,6,7,8,9,10,11],E=[0,0,2,1,3,3,2,4,3,5,5,4,4,0,0,1,125],S=[1,2,3,0,4,17,5,18,33,49,65,6,19,81,97,7,34,113,20,50,129,145,161,8,35,66,177,193,21,82,209,240,36,51,98,114,130,9,10,22,23,24,25,26,37,38,39,40,41,42,52,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,225,226,227,228,229,230,231,232,233,234,241,242,243,244,245,246,247,248,249,250],C=[0,0,3,1,1,1,1,1,1,1,1,1,0,0,0,0,0],I=[0,1,2,3,4,5,6,7,8,9,10,11],D=[0,0,2,1,2,4,4,3,4,7,5,4,4,0,1,2,119],P=[0,1,2,3,17,4,5,33,49,6,18,65,81,7,97,113,19,34,50,129,8,20,66,145,161,177,193,9,35,51,82,240,21,98,114,209,10,22,36,52,225,37,241,23,24,25,26,38,39,40,41,42,53,54,55,56,57,58,67,68,69,70,71,72,73,74,83,84,85,86,87,88,89,90,99,100,101,102,103,104,105,106,115,116,117,118,119,120,121,122,130,131,132,133,134,135,136,137,138,146,147,148,149,150,151,152,153,154,162,163,164,165,166,167,168,169,170,178,179,180,181,182,183,184,185,186,194,195,196,197,198,199,200,201,202,210,211,212,213,214,215,216,217,218,226,227,228,229,230,231,232,233,234,242,243,244,245,246,247,248,249,250];function B(t,e){for(var r=0,i=0,n=new Array,s=1;s<=16;s++){for(var o=1;o<=t[s];o++)n[e[i]]=[],n[e[i]][0]=r,n[e[i]][1]=s,i++,r++;r*=2}return n}function R(t){for(var e=t[0],r=t[1]-1;r>=0;)e&1<<r&&(g|=1<<w),r--,--w<0&&(255==g?(T(255),T(0)):T(g),w=7,g=0)}function T(t){m.push(t)}function U(t){T(t>>8&255),T(255&t)}function O(t,e,r,i,n){for(var s,o=n[0],a=n[240],h=function(t,e){var r,i,n,s,o,a,h,l,u,c,f=0;for(u=0;u<8;++u){r=t[f],i=t[f+1],n=t[f+2],s=t[f+3],o=t[f+4],a=t[f+5],h=t[f+6];var p=r+(l=t[f+7]),m=r-l,g=i+h,w=i-h,b=n+a,y=n-a,_=s+o,v=s-o,x=p+_,k=p-_,A=g+b,M=g-b;t[f]=x+A,t[f+4]=x-A;var E=.707106781*(M+k);t[f+2]=k+E,t[f+6]=k-E;var S=.382683433*((x=v+y)-(M=w+m)),C=.5411961*x+S,I=1.306562965*M+S,D=.707106781*(A=y+w),P=m+D,B=m-D;t[f+5]=B+C,t[f+3]=B-C,t[f+1]=P+I,t[f+7]=P-I,f+=8}for(f=0,u=0;u<8;++u){r=t[f],i=t[f+8],n=t[f+16],s=t[f+24],o=t[f+32],a=t[f+40],h=t[f+48];var R=r+(l=t[f+56]),T=r-l,U=i+h,O=i-h,L=n+a,F=n-a,N=s+o,z=s-o,j=R+N,Y=R-N,V=U+L,q=U-L;t[f]=j+V,t[f+32]=j-V;var X=.707106781*(q+Y);t[f+16]=Y+X,t[f+48]=Y-X;var G=.382683433*((j=z+F)-(q=O+T)),$=.5411961*j+G,W=1.306562965*q+G,Z=.707106781*(V=F+O),H=T+Z,K=T-Z;t[f+40]=K+$,t[f+24]=K-$,t[f+8]=H+W,t[f+56]=H-W,f++}for(u=0;u<64;++u)c=t[u]*e[u],d[u]=c>0?c+.5|0:c-.5|0;return d}(t,e),l=0;l<64;++l)p[k[l]]=h[l];var u=p[0]-r;r=p[0],0==u?R(i[0]):(R(i[f[s=32767+u]]),R(c[s]));for(var m=63;m>0&&0==p[m];m--);if(0==m)return R(o),r;for(var g,w=1;w<=m;){for(var b=w;0==p[w]&&w<=m;++w);var y=w-b;if(y>=16){g=y>>4;for(var _=1;_<=g;++_)R(a);y&=15}s=32767+p[w],R(n[(y<<4)+f[s]]),R(c[s]),w++}return 63!=m&&R(o),r}function L(t){t<=0&&(t=1),t>100&&(t=100),s!=t&&(function(t){for(var e=[16,11,10,16,24,40,51,61,12,12,14,19,26,58,60,55,14,13,16,24,40,57,69,56,14,17,22,29,51,87,80,62,18,22,37,56,68,109,103,77,24,35,55,64,81,104,113,92,49,64,78,87,103,121,120,101,72,92,95,98,112,100,103,99],r=0;r<64;r++){var i=o((e[r]*t+50)/100);i<1?i=1:i>255&&(i=255),a[k[r]]=i}for(var n=[17,18,24,47,99,99,99,99,18,21,26,66,99,99,99,99,24,26,56,99,99,99,99,99,47,66,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99,99],s=0;s<64;s++){var c=o((n[s]*t+50)/100);c<1?c=1:c>255&&(c=255),h[k[s]]=c}for(var f=[1,1.387039845,1.306562965,1.175875602,1,.785694958,.5411961,.275899379],d=0,p=0;p<8;p++)for(var m=0;m<8;m++)l[d]=1/(a[k[d]]*f[p]*f[m]*8),u[d]=1/(h[k[d]]*f[p]*f[m]*8),d++}(t<50?Math.floor(5e3/t):Math.floor(200-2*t)),s=t)}this.encode=function(t,s){(new Date).getTime(),s&&L(s),m=new Array,g=0,w=7,U(65496),U(65504),U(16),T(74),T(70),T(73),T(70),T(0),T(1),T(1),T(0),U(1),U(1),T(0),T(0),function(t){if(t){U(65505),69===t[0]&&120===t[1]&&105===t[2]&&102===t[3]?U(t.length+2):(U(t.length+5+2),T(69),T(120),T(105),T(102),T(0));for(var e=0;e<t.length;e++)T(t[e])}}(t.exifBuffer),function(){U(65499),U(132),T(0);for(var t=0;t<64;t++)T(a[t]);T(1);for(var e=0;e<64;e++)T(h[e])}(),function(t,e){U(65472),U(17),T(8),U(e),U(t),T(3),T(1),T(17),T(0),T(2),T(17),T(1),T(3),T(17),T(1)}(t.width,t.height),function(){U(65476),U(418),T(0);for(var t=0;t<16;t++)T(A[t+1]);for(var e=0;e<=11;e++)T(M[e]);T(16);for(var r=0;r<16;r++)T(E[r+1]);for(var i=0;i<=161;i++)T(S[i]);T(1);for(var n=0;n<16;n++)T(C[n+1]);for(var s=0;s<=11;s++)T(I[s]);T(17);for(var o=0;o<16;o++)T(D[o+1]);for(var a=0;a<=161;a++)T(P[a])}(),U(65498),U(12),T(3),T(1),T(0),T(2),T(17),T(3),T(17),T(0),T(63),T(0);var o=0,c=0,f=0;g=0,w=7,this.encode.displayName="_encode_";for(var d,p,v,k,B,F,N,z,j,Y=t.data,V=t.width,q=t.height,X=4*V,G=0;G<q;){for(d=0;d<X;){for(F=B=X*G+d,N=-1,z=0,j=0;j<64;j++)F=B+(z=j>>3)*X+(N=4*(7&j)),G+z>=q&&(F-=X*(G+1+z-q)),d+N>=X&&(F-=d+N-X+4),p=Y[F++],v=Y[F++],k=Y[F++],b[j]=(x[p]+x[v+256>>0]+x[k+512>>0]>>16)-128,y[j]=(x[p+768>>0]+x[v+1024>>0]+x[k+1280>>0]>>16)-128,_[j]=(x[p+1280>>0]+x[v+1536>>0]+x[k+1792>>0]>>16)-128;o=O(b,l,o,e,i),c=O(y,u,c,r,n),f=O(_,u,f,r,n),d+=32}G+=8}if(w>=0){var $=[];$[1]=w+1,$[0]=(1<<w+1)-1,R($)}return U(65497),Buffer.from(m)},(new Date).getTime(),t||(t=50),function(){for(var t=String.fromCharCode,e=0;e<256;e++)v[e]=t(e)}(),e=B(A,M),r=B(C,I),i=B(E,S),n=B(D,P),function(){for(var t=1,e=2,r=1;r<=15;r++){for(var i=t;i<e;i++)f[32767+i]=r,c[32767+i]=[],c[32767+i][1]=r,c[32767+i][0]=i;for(var n=-(e-1);n<=-t;n++)f[32767+n]=r,c[32767+n]=[],c[32767+n][1]=r,c[32767+n][0]=e-1+n;t<<=1,e<<=1}}(),function(){for(var t=0;t<256;t++)x[t]=19595*t,x[t+256>>0]=38470*t,x[t+512>>0]=7471*t+32768,x[t+768>>0]=-11059*t,x[t+1024>>0]=-21709*t,x[t+1280>>0]=32768*t+8421375,x[t+1536>>0]=-27439*t,x[t+1792>>0]=-5329*t}(),L(t),(new Date).getTime()}t.exports=function(t,r){return void 0===r&&(r=50),{data:new e(r).encode(t,r),width:t.width,height:t.height}}},5307:t=>{t.exports=function t(e,r,i){function n(o,a){if(!r[o]){if(!e[o]){if(s)return s(o,!0);var h=new Error("Cannot find module '"+o+"'");throw h.code="MODULE_NOT_FOUND",h}var l=r[o]={exports:{}};e[o][0].call(l.exports,(function(t){return n(e[o][1][t]||t)}),l,l.exports,t,e,r,i)}return r[o].exports}for(var s=void 0,o=0;o<i.length;o++)n(i[o]);return n}({1:[function(t,e,r){var i,n,s,o,a,h={}.hasOwnProperty;i=t("./PriorityQueue/AbstractPriorityQueue"),n=t("./PriorityQueue/ArrayStrategy"),o=t("./PriorityQueue/BinaryHeapStrategy"),s=t("./PriorityQueue/BHeapStrategy"),(a=function(t){function e(t){t||(t={}),t.strategy||(t.strategy=o),t.comparator||(t.comparator=function(t,e){return(t||0)-(e||0)}),e.__super__.constructor.call(this,t)}return function(t,e){for(var r in e)h.call(e,r)&&(t[r]=e[r]);function i(){this.constructor=t}i.prototype=e.prototype,t.prototype=new i,t.__super__=e.prototype}(e,t),e}(i)).ArrayStrategy=n,a.BinaryHeapStrategy=o,a.BHeapStrategy=s,e.exports=a},{"./PriorityQueue/AbstractPriorityQueue":2,"./PriorityQueue/ArrayStrategy":3,"./PriorityQueue/BHeapStrategy":4,"./PriorityQueue/BinaryHeapStrategy":5}],2:[function(t,e,r){e.exports=function(){function t(t){var e;if(null==(null!=t?t.strategy:void 0))throw"Must pass options.strategy, a strategy";if(null==(null!=t?t.comparator:void 0))throw"Must pass options.comparator, a comparator";this.priv=new t.strategy(t),this.length=(null!=t&&null!=(e=t.initialValues)?e.length:void 0)||0}return t.prototype.queue=function(t){this.length++,this.priv.queue(t)},t.prototype.dequeue=function(t){if(!this.length)throw"Empty queue";return this.length--,this.priv.dequeue()},t.prototype.peek=function(t){if(!this.length)throw"Empty queue";return this.priv.peek()},t.prototype.clear=function(){return this.length=0,this.priv.clear()},t}()},{}],3:[function(t,e,r){var i;i=function(t,e,r){var i,n,s;for(n=0,i=t.length;n<i;)r(t[s=n+i>>>1],e)>=0?n=s+1:i=s;return n},e.exports=function(){function t(t){var e;this.options=t,this.comparator=this.options.comparator,this.data=(null!=(e=this.options.initialValues)?e.slice(0):void 0)||[],this.data.sort(this.comparator).reverse()}return t.prototype.queue=function(t){var e;e=i(this.data,t,this.comparator),this.data.splice(e,0,t)},t.prototype.dequeue=function(){return this.data.pop()},t.prototype.peek=function(){return this.data[this.data.length-1]},t.prototype.clear=function(){this.data.length=0},t}()},{}],4:[function(t,e,r){e.exports=function(){function t(t){var e,r,i,n,s,o,a,h;for(this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.pageSize=(null!=t?t.pageSize:void 0)||512,this.length=0,a=0;1<<a<this.pageSize;)a+=1;if(1<<a!==this.pageSize)throw"pageSize must be a power of two";for(this._shift=a,this._emptyMemoryPageTemplate=e=[],r=0,s=this.pageSize;0<=s?r<s:r>s;0<=s?++r:--r)e.push(null);if(this._memory=[],this._mask=this.pageSize-1,t.initialValues)for(i=0,n=(o=t.initialValues).length;i<n;i++)h=o[i],this.queue(h)}return t.prototype.queue=function(t){this.length+=1,this._write(this.length,t),this._bubbleUp(this.length,t)},t.prototype.dequeue=function(){var t,e;return t=this._read(1),e=this._read(this.length),this.length-=1,this.length>0&&(this._write(1,e),this._bubbleDown(1,e)),t},t.prototype.peek=function(){return this._read(1)},t.prototype.clear=function(){this.length=0,this._memory.length=0},t.prototype._write=function(t,e){var r;for(r=t>>this._shift;r>=this._memory.length;)this._memory.push(this._emptyMemoryPageTemplate.slice(0));return this._memory[r][t&this._mask]=e},t.prototype._read=function(t){return this._memory[t>>this._shift][t&this._mask]},t.prototype._bubbleUp=function(t,e){var r,i,n,s;for(r=this.comparator;t>1&&(i=t&this._mask,t<this.pageSize||i>3?n=t&~this._mask|i>>1:i<2?(n=t-this.pageSize>>this._shift,n+=n&~(this._mask>>1),n|=this.pageSize>>1):n=t-2,!(r(s=this._read(n),e)<0));)this._write(n,e),this._write(t,s),t=n},t.prototype._bubbleDown=function(t,e){var r,i,n,s,o;for(o=this.comparator;t<this.length;)if(t>this._mask&&!(t&this._mask-1)?r=i=t+2:t&this.pageSize>>1?(r=(t&~this._mask)>>1,i=1+(r=1+(r|=t&this._mask>>1)<<this._shift)):i=(r=t+(t&this._mask))+1,r!==i&&i<=this.length)if(n=this._read(r),s=this._read(i),o(n,e)<0&&o(n,s)<=0)this._write(r,e),this._write(t,n),t=r;else{if(!(o(s,e)<0))break;this._write(i,e),this._write(t,s),t=i}else{if(!(r<=this.length))break;if(!(o(n=this._read(r),e)<0))break;this._write(r,e),this._write(t,n),t=r}},t}()},{}],5:[function(t,e,r){e.exports=function(){function t(t){var e;this.comparator=(null!=t?t.comparator:void 0)||function(t,e){return t-e},this.length=0,this.data=(null!=(e=t.initialValues)?e.slice(0):void 0)||[],this._heapify()}return t.prototype._heapify=function(){var t,e,r;if(this.data.length>0)for(t=e=1,r=this.data.length;1<=r?e<r:e>r;t=1<=r?++e:--e)this._bubbleUp(t)},t.prototype.queue=function(t){this.data.push(t),this._bubbleUp(this.data.length-1)},t.prototype.dequeue=function(){var t,e;return e=this.data[0],t=this.data.pop(),this.data.length>0&&(this.data[0]=t,this._bubbleDown(0)),e},t.prototype.peek=function(){return this.data[0]},t.prototype.clear=function(){this.length=0,this.data.length=0},t.prototype._bubbleUp=function(t){for(var e,r;t>0&&(e=t-1>>>1,this.comparator(this.data[t],this.data[e])<0);)r=this.data[e],this.data[e]=this.data[t],this.data[t]=r,t=e},t.prototype._bubbleDown=function(t){var e,r,i,n,s;for(e=this.data.length-1;n=1+(r=1+(t<<1)),i=t,r<=e&&this.comparator(this.data[r],this.data[i])<0&&(i=r),n<=e&&this.comparator(this.data[n],this.data[i])<0&&(i=n),i!==t;)s=this.data[i],this.data[i]=this.data[t],this.data[t]=s,t=i},t}()},{}]},{},[1])(1)},2229:function(t){t.exports=function(){"use strict";function t(t){return"string"==typeof t||t instanceof String}var e=Number.isFinite||window.isFinite;function r(t){return e(t)}function i(t){return t}function n(t,e){if(e.length!==t.length)return!1;for(var r=0;r<t.length;r++){if(e[r].compareArray&&!e[r].compareArray(t[r]))return!1;if(e[r]!==t[r])return!1}return!0}function s(t,e){Object.keys(e).forEach((function(r){t[r]=e[r]}))}function o(){for(var t=1,e=0,r=0;r<arguments.length;r++){var i=arguments[r];e+=l(i),t*=i}return 0!==e?h(t,e):t}function a(t,e){if(0===e)throw new Error("Divide by zero");var r=Math.pow(10,l(e));return o(t,r/(r*e))}function h(t,e){return Math.round(t*Math.pow(10,e))/Math.pow(10,e)}function l(t){if(!isFinite(t))return 0;for(var e=0;t%1!=0;)t*=10,e++;return e}function u(){var t;if(!this)return t=Object.create(u.prototype),u.apply(t,arguments),t;t=Error.apply(this,arguments),this.name="QtyError",this.message=t.message,this.stack=t.stack}function c(t,e){throw new u("Incompatible units: "+t+" and "+e)}u.prototype=Object.create(Error.prototype,{constructor:{value:u}});var f={"<googol>":[["googol"],1e100,"prefix"],"<kibi>":[["Ki","Kibi","kibi"],Math.pow(2,10),"prefix"],"<mebi>":[["Mi","Mebi","mebi"],Math.pow(2,20),"prefix"],"<gibi>":[["Gi","Gibi","gibi"],Math.pow(2,30),"prefix"],"<tebi>":[["Ti","Tebi","tebi"],Math.pow(2,40),"prefix"],"<pebi>":[["Pi","Pebi","pebi"],Math.pow(2,50),"prefix"],"<exi>":[["Ei","Exi","exi"],Math.pow(2,60),"prefix"],"<zebi>":[["Zi","Zebi","zebi"],Math.pow(2,70),"prefix"],"<yebi>":[["Yi","Yebi","yebi"],Math.pow(2,80),"prefix"],"<yotta>":[["Y","Yotta","yotta"],1e24,"prefix"],"<zetta>":[["Z","Zetta","zetta"],1e21,"prefix"],"<exa>":[["E","Exa","exa"],1e18,"prefix"],"<peta>":[["P","Peta","peta"],1e15,"prefix"],"<tera>":[["T","Tera","tera"],1e12,"prefix"],"<giga>":[["G","Giga","giga"],1e9,"prefix"],"<mega>":[["M","Mega","mega"],1e6,"prefix"],"<kilo>":[["k","kilo"],1e3,"prefix"],"<hecto>":[["h","Hecto","hecto"],100,"prefix"],"<deca>":[["da","Deca","deca","deka"],10,"prefix"],"<deci>":[["d","Deci","deci"],.1,"prefix"],"<centi>":[["c","Centi","centi"],.01,"prefix"],"<milli>":[["m","Milli","milli"],.001,"prefix"],"<micro>":[["u","μ","µ","Micro","mc","micro"],1e-6,"prefix"],"<nano>":[["n","Nano","nano"],1e-9,"prefix"],"<pico>":[["p","Pico","pico"],1e-12,"prefix"],"<femto>":[["f","Femto","femto"],1e-15,"prefix"],"<atto>":[["a","Atto","atto"],1e-18,"prefix"],"<zepto>":[["z","Zepto","zepto"],1e-21,"prefix"],"<yocto>":[["y","Yocto","yocto"],1e-24,"prefix"],"<1>":[["1","<1>"],1,""],"<meter>":[["m","meter","meters","metre","metres"],1,"length",["<meter>"]],"<inch>":[["in","inch","inches",'"'],.0254,"length",["<meter>"]],"<foot>":[["ft","foot","feet","'"],.3048,"length",["<meter>"]],"<yard>":[["yd","yard","yards"],.9144,"length",["<meter>"]],"<mile>":[["mi","mile","miles"],1609.344,"length",["<meter>"]],"<naut-mile>":[["nmi","naut-mile"],1852,"length",["<meter>"]],"<league>":[["league","leagues"],4828,"length",["<meter>"]],"<furlong>":[["furlong","furlongs"],201.2,"length",["<meter>"]],"<rod>":[["rd","rod","rods"],5.029,"length",["<meter>"]],"<mil>":[["mil","mils"],254e-7,"length",["<meter>"]],"<angstrom>":[["ang","angstrom","angstroms"],1e-10,"length",["<meter>"]],"<fathom>":[["fathom","fathoms"],1.829,"length",["<meter>"]],"<pica>":[["pica","picas"],.00423333333,"length",["<meter>"]],"<point>":[["pt","point","points"],.000352777778,"length",["<meter>"]],"<redshift>":[["z","red-shift","redshift"],1302773e20,"length",["<meter>"]],"<AU>":[["AU","astronomical-unit"],1495979e5,"length",["<meter>"]],"<light-second>":[["ls","light-second"],299792500,"length",["<meter>"]],"<light-minute>":[["lmin","light-minute"],1798755e4,"length",["<meter>"]],"<light-year>":[["ly","light-year"],9460528e9,"length",["<meter>"]],"<parsec>":[["pc","parsec","parsecs"],3085678e10,"length",["<meter>"]],"<datamile>":[["DM","datamile"],1828.8,"length",["<meter>"]],"<kilogram>":[["kg","kilogram","kilograms"],1,"mass",["<kilogram>"]],"<AMU>":[["u","AMU","amu"],1660538921e-36,"mass",["<kilogram>"]],"<dalton>":[["Da","Dalton","Daltons","dalton","daltons"],1660538921e-36,"mass",["<kilogram>"]],"<slug>":[["slug","slugs"],14.5939029,"mass",["<kilogram>"]],"<short-ton>":[["tn","ton","short-ton"],907.18474,"mass",["<kilogram>"]],"<metric-ton>":[["tonne","metric-ton"],1e3,"mass",["<kilogram>"]],"<carat>":[["ct","carat","carats"],2e-4,"mass",["<kilogram>"]],"<pound>":[["lbs","lb","pound","pounds","#"],.45359237,"mass",["<kilogram>"]],"<ounce>":[["oz","ounce","ounces"],.0283495231,"mass",["<kilogram>"]],"<gram>":[["g","gram","grams","gramme","grammes"],.001,"mass",["<kilogram>"]],"<grain>":[["grain","grains","gr"],6479891e-11,"mass",["<kilogram>"]],"<dram>":[["dram","drams","dr"],.0017718452,"mass",["<kilogram>"]],"<stone>":[["stone","stones","st"],6.35029318,"mass",["<kilogram>"]],"<hectare>":[["hectare"],1e4,"area",["<meter>","<meter>"]],"<acre>":[["acre","acres"],4046.85642,"area",["<meter>","<meter>"]],"<sqft>":[["sqft"],1,"area",["<foot>","<foot>"]],"<liter>":[["l","L","liter","liters","litre","litres"],.001,"volume",["<meter>","<meter>","<meter>"]],"<gallon>":[["gal","gallon","gallons"],.0037854118,"volume",["<meter>","<meter>","<meter>"]],"<gallon-imp>":[["galimp","gallon-imp","gallons-imp"],.00454609,"volume",["<meter>","<meter>","<meter>"]],"<quart>":[["qt","quart","quarts"],.00094635295,"volume",["<meter>","<meter>","<meter>"]],"<pint>":[["pt","pint","pints"],.000473176475,"volume",["<meter>","<meter>","<meter>"]],"<pint-imp>":[["ptimp","pint-imp","pints-imp"],.00056826125,"volume",["<meter>","<meter>","<meter>"]],"<cup>":[["cu","cup","cups"],.000236588238,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce>":[["floz","fluid-ounce","fluid-ounces"],295735297e-13,"volume",["<meter>","<meter>","<meter>"]],"<fluid-ounce-imp>":[["flozimp","floz-imp","fluid-ounce-imp","fluid-ounces-imp"],284130625e-13,"volume",["<meter>","<meter>","<meter>"]],"<tablespoon>":[["tb","tbsp","tbs","tablespoon","tablespoons"],147867648e-13,"volume",["<meter>","<meter>","<meter>"]],"<teaspoon>":[["tsp","teaspoon","teaspoons"],492892161e-14,"volume",["<meter>","<meter>","<meter>"]],"<bushel>":[["bu","bsh","bushel","bushels"],.035239072,"volume",["<meter>","<meter>","<meter>"]],"<oilbarrel>":[["bbl","oilbarrel","oilbarrels","oil-barrel","oil-barrels"],.158987294928,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel>":[["bl","bl-us","beerbarrel","beerbarrels","beer-barrel","beer-barrels"],.1173477658,"volume",["<meter>","<meter>","<meter>"]],"<beerbarrel-imp>":[["blimp","bl-imp","beerbarrel-imp","beerbarrels-imp","beer-barrel-imp","beer-barrels-imp"],.16365924,"volume",["<meter>","<meter>","<meter>"]],"<kph>":[["kph"],.277777778,"speed",["<meter>"],["<second>"]],"<mph>":[["mph"],.44704,"speed",["<meter>"],["<second>"]],"<knot>":[["kt","kn","kts","knot","knots"],.514444444,"speed",["<meter>"],["<second>"]],"<fps>":[["fps"],.3048,"speed",["<meter>"],["<second>"]],"<gee>":[["gee"],9.80665,"acceleration",["<meter>"],["<second>","<second>"]],"<Gal>":[["Gal"],.01,"acceleration",["<meter>"],["<second>","<second>"]],"<kelvin>":[["degK","kelvin"],1,"temperature",["<kelvin>"]],"<celsius>":[["degC","celsius","celsius","centigrade"],1,"temperature",["<kelvin>"]],"<fahrenheit>":[["degF","fahrenheit"],5/9,"temperature",["<kelvin>"]],"<rankine>":[["degR","rankine"],5/9,"temperature",["<kelvin>"]],"<temp-K>":[["tempK","temp-K"],1,"temperature",["<temp-K>"]],"<temp-C>":[["tempC","temp-C"],1,"temperature",["<temp-K>"]],"<temp-F>":[["tempF","temp-F"],5/9,"temperature",["<temp-K>"]],"<temp-R>":[["tempR","temp-R"],5/9,"temperature",["<temp-K>"]],"<second>":[["s","sec","secs","second","seconds"],1,"time",["<second>"]],"<minute>":[["min","mins","minute","minutes"],60,"time",["<second>"]],"<hour>":[["h","hr","hrs","hour","hours"],3600,"time",["<second>"]],"<day>":[["d","day","days"],86400,"time",["<second>"]],"<week>":[["wk","week","weeks"],604800,"time",["<second>"]],"<fortnight>":[["fortnight","fortnights"],1209600,"time",["<second>"]],"<year>":[["y","yr","year","years","annum"],31556926,"time",["<second>"]],"<decade>":[["decade","decades"],315569260,"time",["<second>"]],"<century>":[["century","centuries"],3155692600,"time",["<second>"]],"<pascal>":[["Pa","pascal","Pascal"],1,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<bar>":[["bar","bars"],1e5,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<mmHg>":[["mmHg"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inHg>":[["inHg"],3386.3881472,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<torr>":[["torr"],133.322368,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<atm>":[["atm","ATM","atmosphere","atmospheres"],101325,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<psi>":[["psi"],6894.76,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<cmh2o>":[["cmH2O","cmh2o"],98.0638,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<inh2o>":[["inH2O","inh2o"],249.082052,"pressure",["<kilogram>"],["<meter>","<second>","<second>"]],"<poise>":[["P","poise"],.1,"viscosity",["<kilogram>"],["<meter>","<second>"]],"<stokes>":[["St","stokes"],1e-4,"viscosity",["<meter>","<meter>"],["<second>"]],"<mole>":[["mol","mole"],1,"substance",["<mole>"]],"<molar>":[["M","molar"],1e3,"concentration",["<mole>"],["<meter>","<meter>","<meter>"]],"<wtpercent>":[["wt%","wtpercent"],10,"concentration",["<kilogram>"],["<meter>","<meter>","<meter>"]],"<katal>":[["kat","katal","Katal"],1,"activity",["<mole>"],["<second>"]],"<unit>":[["U","enzUnit","unit"],16667e-19,"activity",["<mole>"],["<second>"]],"<farad>":[["F","farad","Farad"],1,"capacitance",["<second>","<second>","<second>","<second>","<ampere>","<ampere>"],["<meter>","<meter>","<kilogram>"]],"<coulomb>":[["C","coulomb","Coulomb"],1,"charge",["<ampere>","<second>"]],"<Ah>":[["Ah"],3600,"charge",["<ampere>","<second>"]],"<ampere>":[["A","Ampere","ampere","amp","amps"],1,"current",["<ampere>"]],"<siemens>":[["S","Siemens","siemens"],1,"conductance",["<second>","<second>","<second>","<ampere>","<ampere>"],["<kilogram>","<meter>","<meter>"]],"<henry>":[["H","Henry","henry"],1,"inductance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>","<ampere>"]],"<volt>":[["V","Volt","volt","volts"],1,"potential",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>"]],"<ohm>":[["Ohm","ohm","Ω","Ω"],1,"resistance",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<second>","<ampere>","<ampere>"]],"<weber>":[["Wb","weber","webers"],1,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<tesla>":[["T","tesla","teslas"],1,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<gauss>":[["G","gauss"],1e-4,"magnetism",["<kilogram>"],["<second>","<second>","<ampere>"]],"<maxwell>":[["Mx","maxwell","maxwells"],1e-8,"magnetism",["<meter>","<meter>","<kilogram>"],["<second>","<second>","<ampere>"]],"<oersted>":[["Oe","oersted","oersteds"],250/Math.PI,"magnetism",["<ampere>"],["<meter>"]],"<joule>":[["J","joule","Joule","joules"],1,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<erg>":[["erg","ergs"],1e-7,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<btu>":[["BTU","btu","BTUs"],1055.056,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<calorie>":[["cal","calorie","calories"],4.184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Calorie>":[["Cal","Calorie","Calories"],4184,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<therm-US>":[["th","therm","therms","Therm","therm-US"],105480400,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<Wh>":[["Wh"],3600,"energy",["<meter>","<meter>","<kilogram>"],["<second>","<second>"]],"<newton>":[["N","Newton","newton"],1,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<dyne>":[["dyn","dyne"],1e-5,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<pound-force>":[["lbf","pound-force"],4.448222,"force",["<kilogram>","<meter>"],["<second>","<second>"]],"<hertz>":[["Hz","hertz","Hertz"],1,"frequency",["<1>"],["<second>"]],"<radian>":[["rad","radian","radians"],1,"angle",["<radian>"]],"<degree>":[["deg","degree","degrees"],Math.PI/180,"angle",["<radian>"]],"<gradian>":[["gon","grad","gradian","grads"],Math.PI/200,"angle",["<radian>"]],"<steradian>":[["sr","steradian","steradians"],1,"solid_angle",["<steradian>"]],"<rotation>":[["rotation"],2*Math.PI,"angle",["<radian>"]],"<rpm>":[["rpm"],2*Math.PI/60,"angular_velocity",["<radian>"],["<second>"]],"<byte>":[["B","byte","bytes"],1,"information",["<byte>"]],"<bit>":[["b","bit","bits"],.125,"information",["<byte>"]],"<Bps>":[["Bps"],1,"information_rate",["<byte>"],["<second>"]],"<bps>":[["bps"],.125,"information_rate",["<byte>"],["<second>"]],"<dollar>":[["USD","dollar"],1,"currency",["<dollar>"]],"<cents>":[["cents"],.01,"currency",["<dollar>"]],"<candela>":[["cd","candela"],1,"luminosity",["<candela>"]],"<lumen>":[["lm","lumen"],1,"luminous_power",["<candela>","<steradian>"]],"<lux>":[["lux"],1,"illuminance",["<candela>","<steradian>"],["<meter>","<meter>"]],"<watt>":[["W","watt","watts"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere>":[["VA","volt-ampere"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<volt-ampere-reactive>":[["var","Var","VAr","VAR","volt-ampere-reactive"],1,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<horsepower>":[["hp","horsepower"],745.699872,"power",["<kilogram>","<meter>","<meter>"],["<second>","<second>","<second>"]],"<gray>":[["Gy","gray","grays"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<roentgen>":[["R","roentgen"],.00933,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<sievert>":[["Sv","sievert","sieverts"],1,"radiation",["<meter>","<meter>"],["<second>","<second>"]],"<becquerel>":[["Bq","becquerel","becquerels"],1,"radiation",["<1>"],["<second>"]],"<curie>":[["Ci","curie","curies"],37e9,"radiation",["<1>"],["<second>"]],"<cpm>":[["cpm"],1/60,"rate",["<count>"],["<second>"]],"<dpm>":[["dpm"],1/60,"rate",["<count>"],["<second>"]],"<bpm>":[["bpm"],1/60,"rate",["<count>"],["<second>"]],"<dot>":[["dot","dots"],1,"resolution",["<each>"]],"<pixel>":[["pixel","px"],1,"resolution",["<each>"]],"<ppi>":[["ppi"],1,"resolution",["<pixel>"],["<inch>"]],"<dpi>":[["dpi"],1,"typography",["<dot>"],["<inch>"]],"<cell>":[["cells","cell"],1,"counting",["<each>"]],"<each>":[["each"],1,"counting",["<each>"]],"<count>":[["count"],1,"counting",["<each>"]],"<base-pair>":[["bp","base-pair"],1,"counting",["<each>"]],"<nucleotide>":[["nt","nucleotide"],1,"counting",["<each>"]],"<molecule>":[["molecule","molecules"],1,"counting",["<1>"]],"<dozen>":[["doz","dz","dozen"],12,"prefix_only",["<each>"]],"<percent>":[["%","percent"],.01,"prefix_only",["<1>"]],"<ppm>":[["ppm"],1e-6,"prefix_only",["<1>"]],"<ppt>":[["ppt"],1e-9,"prefix_only",["<1>"]],"<gross>":[["gr","gross"],144,"prefix_only",["<dozen>","<dozen>"]],"<decibel>":[["dB","decibel","decibels"],1,"logarithmic",["<decibel>"]]},d=["<meter>","<kilogram>","<second>","<mole>","<ampere>","<radian>","<kelvin>","<temp-K>","<byte>","<dollar>","<candela>","<each>","<steradian>","<decibel>"],p="<1>",m=[p];function g(t,e){var i=e[1],n=e[3]||[],s=e[4]||[];if(!r(i))throw new u(t+": Invalid unit definition. 'scalar' must be a number");n.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'numerator' is not recognized")})),s.forEach((function(e){if(void 0===f[e])throw new u(t+": Invalid unit definition. Unit "+e+" in 'denominator' is not recognized")}))}var w={},b={},y={},_={},v={};for(var x in f)if(f.hasOwnProperty(x)){var k=f[x];if("prefix"===k[2]){w[x]=k[1];for(var A=0;A<k[0].length;A++)b[k[0][A]]=x}else{g(x,k),y[x]={scalar:k[1],numerator:k[3],denominator:k[4]};for(var M=0;M<k[0].length;M++)_[k[0][M]]=x}v[x]=k[0][0]}var E=["length","time","temperature","mass","current","substance","luminosity","currency","information","angle"];function S(){if(this.signature)return this.signature;for(var t=C.call(this),e=0;e<t.length;e++)t[e]*=Math.pow(20,e);return t.reduce((function(t,e){return t+e}),0)}function C(){if(!this.isBase())return C.call(this.toBase());for(var t,e,r=new Array(E.length),i=0;i<r.length;i++)r[i]=0;for(var n=0;n<this.numerator.length;n++)(t=f[this.numerator[n]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]+1);for(var s=0;s<this.denominator.length;s++)(t=f[this.denominator[s]])&&(e=E.indexOf(t[2]))>=0&&(r[e]=r[e]-1);return r}var I=new RegExp("^([+-]?\\s*(?:(?:\\d+(?:\\.\\d+)?)|(?:\\.\\d+))(?:[Ee][+-]?\\d+)?)?\\s*([^/]*)(?:/(.+))?$"),D=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?(-?[01234](?![a-zA-Z]))"),P=new RegExp("([^ \\*\\d]+?)(?:\\^|\\*{2})?([01234](?![a-zA-Z]))");function B(e){t(e)||(e=e.toString()),e=e.trim();var r=I.exec(e);if(!r)throw new u(e+": Quantity not recognized");var i=r[1];i?(i=i.replace(/\s/g,""),this.scalar=parseFloat(i)):this.scalar=1;for(var n,s,o,a=r[2],h=r[3];r=D.exec(a);){if(n=parseFloat(r[2]),isNaN(n))throw new u("Unit exponent is not a number");if(0===n&&!T.test(r[1]))throw new u("Unit not recognized");s=r[1]+" ",o="";for(var l=0;l<Math.abs(n);l++)o+=s;n>=0?a=a.replace(r[0],o):(h=h?h+o:o,a=a.replace(r[0],""))}for(;r=P.exec(h);){if(n=parseFloat(r[2]),isNaN(n))throw new u("Unit exponent is not a number");if(0===n&&!T.test(r[1]))throw new u("Unit not recognized");s=r[1]+" ",o="";for(var c=0;c<n;c++)o+=s;h=h.replace(r[0],o)}a&&(this.numerator=L(a.trim())),h&&(this.denominator=L(h.trim()))}var R="("+Object.keys(b).sort((function(t,e){return e.length-t.length})).join("|")+")??("+Object.keys(_).sort((function(t,e){return e.length-t.length})).join("|")+")(?:\\b|$)",T=new RegExp("^\\s*("+R+"[\\s\\*]*)+$"),U=new RegExp(R,"g"),O={};function L(t){var e=O[t];if(e)return e;var r,i=[];if(!T.test(t))throw new u("Unit not recognized");for(;r=U.exec(t);)i.push(r.slice(1));return i=(i=(i=i.map((function(t){return b[t[0]]?[b[t[0]],_[t[1]]]:[_[t[1]]]}))).reduce((function(t,e){return t.concat(e)}),[])).filter((function(t){return t})),O[t]=i,i}function F(t){return t instanceof N}function N(t,e){if(z.apply(null,arguments),!F(this))return new N(t,e);if(this.scalar=null,this.baseScalar=null,this.signature=null,this._conversionCache={},this.numerator=m,this.denominator=m,j(t)?(this.scalar=t.scalar,this.numerator=t.numerator&&0!==t.numerator.length?t.numerator:m,this.denominator=t.denominator&&0!==t.denominator.length?t.denominator:m):e?(B.call(this,e),this.scalar=t):B.call(this,t),this.denominator.join("*").indexOf("temp")>=0)throw new u("Cannot divide with temperatures");if(this.numerator.join("*").indexOf("temp")>=0){if(this.numerator.length>1)throw new u("Cannot multiply by temperatures");if(!n(this.denominator,m))throw new u("Cannot divide with temperatures")}if(this.initValue=t,Y.call(this),this.isTemperature()&&this.baseScalar<0)throw new u("Temperatures must not be less than absolute zero")}function z(e,i){if(i){if(!r(e)||!t(i))throw new u("Only number accepted as initialization value when units are explicitly provided")}else if(!(t(e)||r(e)||F(e)||j(e)))throw new u("Only string, number or quantity accepted as single initialization value")}function j(t){return t&&"object"==typeof t&&t.hasOwnProperty("scalar")}function Y(){if(this.baseScalar)return this.baseScalar;if(this.isBase())this.baseScalar=this.scalar,this.signature=S.call(this);else{var t=this.toBase();this.baseScalar=t.scalar,this.signature=t.signature}}N.prototype={constructor:N};var V={"-312078":"elastance","-312058":"resistance","-312038":"inductance","-152058":"potential","-152040":"magnetism","-152038":"magnetism","-7997":"specific_volume","-79":"snap","-59":"jolt","-39":"acceleration","-38":"radiation","-20":"frequency","-19":"speed","-18":"viscosity","-17":"volumetric_flow","-1":"wavenumber",0:"unitless",1:"length",2:"area",3:"volume",20:"time",400:"temperature",7941:"yank",7942:"power",7959:"pressure",7961:"force",7962:"energy",7979:"viscosity",7981:"momentum",7982:"angular_momentum",7997:"density",7998:"area_density",8e3:"mass",152020:"radiation_exposure",159999:"magnetism",16e4:"current",160020:"charge",312058:"conductance",312078:"capacitance",3199980:"activity",3199997:"molar_concentration",32e5:"substance",63999998:"illuminance",64e6:"luminous_power",128e7:"currency",25599999980:"information_rate",256e8:"information",511999999980:"angular_velocity",512e9:"angle"};function q(t,e){var r=e.to(X(t.units()));return N({scalar:t.scalar+r.scalar,numerator:t.numerator,denominator:t.denominator})}function X(t){if("tempK"===t)return"degK";if("tempC"===t)return"degC";if("tempF"===t)return"degF";if("tempR"===t)return"degR";throw new u("Unknown type for temp conversion from: "+t)}function G(t,e){var r,i=function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar;else if("tempF"===r)e=5*t.scalar/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<kelvin>"],denominator:m})}(t),n=e.units();if("degK"===n)r=i.scalar;else if("degC"===n)r=i.scalar;else if("degF"===n)r=9*i.scalar/5;else{if("degR"!==n)throw new u("Unknown type for degree conversion to: "+n);r=9*i.scalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}N.prototype.kind=function(){return V[this.signature.toString()]},s(N.prototype,{isDegrees:function(){return(null===this.signature||400===this.signature)&&1===this.numerator.length&&n(this.denominator,m)&&(this.numerator[0].match(/<temp-[CFRK]>/)||this.numerator[0].match(/<(kelvin|celsius|rankine|fahrenheit)>/))},isTemperature:function(){return this.isDegrees()&&this.numerator[0].match(/<temp-[CFRK]>/)}}),s(N.prototype,{to:function(e){var r,i;return null==e?this:t(e)?(r=this._conversionCache[e])?r:(i=N(e)).units()===this.units()?this:(this.isCompatible(i)?i=i.isTemperature()?function(t,e){var r,i=e.units();if("tempK"===i)r=t.baseScalar;else if("tempC"===i)r=t.baseScalar-273.15;else if("tempF"===i)r=9*t.baseScalar/5-459.67;else{if("tempR"!==i)throw new u("Unknown type for temp conversion to: "+i);r=9*t.baseScalar/5}return N({scalar:r,numerator:e.numerator,denominator:e.denominator})}(this,i):i.isDegrees()?G(this,i):N({scalar:a(this.baseScalar,i.baseScalar),numerator:i.numerator,denominator:i.denominator}):this.isInverse(i)?i=this.inverse().to(e):c(this.units(),i.units()),this._conversionCache[e]=i,i):this.to(e.units())},toBase:function(){if(this.isBase())return this;if(this.isTemperature())return function(t){var e,r=t.units();if(r.match(/(deg)[CFRK]/))e=t.baseScalar;else if("tempK"===r)e=t.scalar;else if("tempC"===r)e=t.scalar+273.15;else if("tempF"===r)e=5*(t.scalar+459.67)/9;else{if("tempR"!==r)throw new u("Unknown type for temp conversion from: "+r);e=5*t.scalar/9}return N({scalar:e,numerator:["<temp-K>"],denominator:m})}(this);var t=$[this.units()];return t||(t=function(t,e){for(var r,i=[],n=[],s=1,a=0;a<t.length;a++)r=t[a],w[r]?s=o(s,w[r]):y[r]&&(s*=y[r].scalar,y[r].numerator&&i.push(y[r].numerator),y[r].denominator&&n.push(y[r].denominator));for(var h=0;h<e.length;h++)r=e[h],w[r]?s/=w[r]:y[r]&&(s/=y[r].scalar,y[r].numerator&&n.push(y[r].numerator),y[r].denominator&&i.push(y[r].denominator));return N({scalar:s,numerator:i=i.reduce((function(t,e){return t.concat(e)}),[]),denominator:n=n.reduce((function(t,e){return t.concat(e)}),[])})}(this.numerator,this.denominator),$[this.units()]=t),t.mul(this.scalar)},toFloat:function(){if(this.isUnitless())return this.scalar;throw new u("Can't convert to Float unless unitless.  Use Unit#scalar")},toPrec:function(e){if(t(e)&&(e=N(e)),r(e)&&(e=N(e+" "+this.units())),this.isUnitless()?e.isUnitless()||c(this.units(),e.units()):e=e.to(this.units()),0===e.scalar)throw new u("Divide by zero");return N(o(Math.round(this.scalar/e.scalar),e.scalar)+this.units())}});var $={};function W(t,e,r,i){function n(t){return t!==p}t=t.filter(n),r=r.filter(n),e=e.filter(n),i=i.filter(n);var s={};function o(t,e){for(var r,i,n,o=0;o<t.length;o++)if(w[t[o]]?(r=t[o+1],i=t[o],n=w[i],o++):(r=t[o],i=null,n=1),r&&r!==p)if(s[r]){s[r][0]+=e;var h=s[r][2]?w[s[r][2]]:1;s[r][1===e?3:4]*=a(n,h)}else s[r]=[e,r,i,1,1]}o(t,1),o(e,-1),o(r,1),o(i,-1);var h=[],l=[],u=1;for(var c in s)if(s.hasOwnProperty(c)){var f,d=s[c];if(d[0]>0)for(f=0;f<d[0];f++)h.push(null===d[2]?d[1]:[d[2],d[1]]);else if(d[0]<0)for(f=0;f<-d[0];f++)l.push(null===d[2]?d[1]:[d[2],d[1]]);u*=a(d[3],d[4])}return 0===h.length&&(h=m),0===l.length&&(l=m),[h=h.reduce((function(t,e){return t.concat(e)}),[]),l=l.reduce((function(t,e){return t.concat(e)}),[]),u]}function Z(){}N.parse=function(e){if(!t(e))throw new u("Argument should be a string");try{return this(e)}catch(t){return null}},N.getUnits=function(t){var e,r=[],i=Object.keys(f);if(void 0===t)for(e=0;e<i.length;e++)-1===["","prefix"].indexOf(f[i[e]][2])&&r.push(i[e].substr(1,i[e].length-2));else{if(-1===this.getKinds().indexOf(t))throw new u("Kind not recognized");for(e=0;e<i.length;e++)f[i[e]][2]===t&&r.push(i[e].substr(1,i[e].length-2))}return r.sort((function(t,e){return t.toLowerCase()<e.toLowerCase()?-1:t.toLowerCase()>e.toLowerCase()?1:0}))},N.getAliases=function(t){if(!_[t])throw new u("Unit not recognized");return f[_[t]][0]},N.mulSafe=o,N.divSafe=a,N.getKinds=function(){return t=Object.keys(V).map((function(t){return V[t]})),e={},t.filter((function(t){return!e.hasOwnProperty(t)&&(e[t]=!0)}));var t,e},N.swiftConverter=function(t,e){var r,n=N(t),s=N(e);return n.eq(s)?i:(r=n.isTemperature()?function(t){return n.mul(t).to(s).scalar}:function(t){return t*n.baseScalar/s.baseScalar},function(t){var e,i,n;if(Array.isArray(t)){for(i=t.length,n=[],e=0;e<i;e++)n.push(r(t[e]));return n}return r(t)})},N.Error=u,s(N.prototype,{add:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())throw new u("Cannot add two temperatures");return this.isTemperature()?q(this,e):e.isTemperature()?q(e,this):N({scalar:this.scalar+e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},sub:function(e){if(t(e)&&(e=N(e)),this.isCompatible(e)||c(this.units(),e.units()),this.isTemperature()&&e.isTemperature())return i=e,n=(r=this).units(),s=i.to(n),o=N(X(n)),N({scalar:r.scalar-s.scalar,numerator:o.numerator,denominator:o.denominator});var r,i,n,s,o,a,h;if(this.isTemperature())return a=this,h=e.to(X(a.units())),N({scalar:a.scalar-h.scalar,numerator:a.numerator,denominator:a.denominator});if(e.isTemperature())throw new u("Cannot subtract a temperature from a differential degree unit");return N({scalar:this.scalar-e.to(this).scalar,numerator:this.numerator,denominator:this.denominator})},mul:function(e){if(r(e))return N({scalar:o(this.scalar,e),numerator:this.numerator,denominator:this.denominator});if(t(e)&&(e=N(e)),(this.isTemperature()||e.isTemperature())&&!this.isUnitless()&&!e.isUnitless())throw new u("Cannot multiply by temperatures");var i=this,n=e;i.isCompatible(n)&&400!==i.signature&&(n=n.to(i));var s=W(i.numerator,i.denominator,n.numerator,n.denominator);return N({scalar:o(i.scalar,n.scalar,s[2]),numerator:s[0],denominator:s[1]})},div:function(e){if(r(e)){if(0===e)throw new u("Divide by zero");return N({scalar:this.scalar/e,numerator:this.numerator,denominator:this.denominator})}if(t(e)&&(e=N(e)),0===e.scalar)throw new u("Divide by zero");if(e.isTemperature())throw new u("Cannot divide with temperatures");if(this.isTemperature()&&!e.isUnitless())throw new u("Cannot divide with temperatures");var i=this,n=e;i.isCompatible(n)&&400!==i.signature&&(n=n.to(i));var s=W(i.numerator,i.denominator,n.denominator,n.numerator);return N({scalar:o(i.scalar,s[2])/n.scalar,numerator:s[0],denominator:s[1]})},inverse:function(){if(this.isTemperature())throw new u("Cannot divide with temperatures");if(0===this.scalar)throw new u("Divide by zero");return N({scalar:1/this.scalar,numerator:this.denominator,denominator:this.numerator})}}),s(N.prototype,{eq:function(t){return 0===this.compareTo(t)},lt:function(t){return-1===this.compareTo(t)},lte:function(t){return this.eq(t)||this.lt(t)},gt:function(t){return 1===this.compareTo(t)},gte:function(t){return this.eq(t)||this.gt(t)},compareTo:function(e){return t(e)?this.compareTo(N(e)):(this.isCompatible(e)||c(this.units(),e.units()),this.baseScalar<e.baseScalar?-1:this.baseScalar===e.baseScalar?0:this.baseScalar>e.baseScalar?1:void 0)},same:function(t){return this.scalar===t.scalar&&this.units()===t.units()}}),s(N.prototype,{isUnitless:function(){return[this.numerator,this.denominator].every((function(t){return n(t,m)}))},isCompatible:function(e){return t(e)?this.isCompatible(N(e)):!!F(e)&&void 0!==e.signature&&this.signature===e.signature},isInverse:function(t){return this.inverse().isCompatible(t)},isBase:function(){return void 0!==this._isBase?this._isBase:this.isDegrees()&&this.numerator[0].match(/<(kelvin|temp-K)>/)?(this._isBase=!0,this._isBase):(this.numerator.concat(this.denominator).forEach((function(t){t!==p&&-1===d.indexOf(t)&&(this._isBase=!1)}),this),!1===this._isBase||(this._isBase=!0),this._isBase)}}),Z.prototype.get=function(t){return arguments.length>1&&(t=Array.apply(null,arguments)),t.reduce((function(e,r,i){if(e){var n=e[r];return i===t.length-1?n?n.data:void 0:n}}),this)},Z.prototype.set=function(t,e){return arguments.length>2&&(t=Array.prototype.slice.call(arguments,0,-1),e=arguments[arguments.length-1]),t.reduce((function(r,i,n){var s=r[i];return void 0===s&&(s=r[i]={}),n===t.length-1?(s.data=e,e):s}),this)},N.formatter=function(t,e){return(t+" "+e).trim()},s(N.prototype,{units:function(){if(void 0!==this._units)return this._units;var t=n(this.numerator,m),e=n(this.denominator,m);if(t&&e)return this._units="",this._units;var r=K(this.numerator),i=K(this.denominator);return this._units=r+(e?"":"/"+i),this._units},toString:function(e,i){var n;if(r(e))n=this.units(),i=e;else if(t(e))n=e;else if(F(e))return this.toPrec(e).toString(i);var s=this.to(n);return((void 0!==i?h(s.scalar,i):s.scalar)+" "+s.units()).trim()},format:function(t,e){1===arguments.length&&"function"==typeof t&&(e=t,t=void 0),e=e||N.formatter;var r=this.to(t);return e.call(this,r.scalar,r.units())}});var H=new Z;function K(t){var e=H.get(t);return e||(e=n(t,m)?"1":function(t){return t.reduce((function(t,e){var r=t[e];return r||t.push(r=t[e]=[e,0]),r[1]++,t}),[]).map((function(t){return t[0]+(t[1]>1?t[1]:"")}))}(function(t){for(var e,r,i=[],n=0;n<t.length;n++)e=t[n],r=t[n+1],w[e]?(i.push(v[e]+v[r]),n++):i.push(v[e]);return i}(t)).join("*"),H.set(t,e),e)}return N.version="1.7.6",N}()},5520:t=>{!function(){function e(t){for(var e=0,n=t.length-1,s=void 0,o=void 0,a=void 0,h=i(e,n);;){if(n<=e)return t[h];if(n==e+1)return t[e]>t[n]&&r(t,e,n),t[h];for(t[s=i(e,n)]>t[n]&&r(t,s,n),t[e]>t[n]&&r(t,e,n),t[s]>t[e]&&r(t,s,e),r(t,s,e+1),o=e+1,a=n;;){do{o++}while(t[e]>t[o]);do{a--}while(t[a]>t[e]);if(a<o)break;r(t,o,a)}r(t,e,a),a<=h&&(e=o),a>=h&&(n=a-1)}}var r=function(t,e,r){var i;return i=[t[r],t[e]],t[e]=i[0],t[r]=i[1],i},i=function(t,e){return~~((t+e)/2)};t.exports?t.exports=e:window.median=e}()},530:t=>{"use strict";function e(t){this.value=t,this.parent=null,this.rank=0}t.exports=class{constructor(){this.nodes=new Map}add(t){var r=this.nodes.get(t);return r||(r=new e(t),this.nodes.set(t,r)),r}union(t,e){const r=this.find(t),i=this.find(e);r!==i&&(r.rank<i.rank?r.parent=i:r.rank>i.rank?i.parent=r:(i.parent=r,r.rank++))}find(t){for(var e=t;null!==e.parent;)e=e.parent;for(var r=t;null!==r.parent;){var i=r;r=r.parent,i.parent=e}return e}connected(t,e){return this.find(t)===this.find(e)}}},4953:(t,e,r)=>{"use strict";function i(t,e){let r=0;for(let i=0;i<t.length;i++)r+=(t[i]-e[i])*(t[i]-e[i]);return r}function n(t,e){return Math.sqrt(i(t,e))}r.r(e),r.d(e,{squaredEuclidean:()=>i,euclidean:()=>n})},7345:(t,e,r)=>{"use strict";var i=r(5571),n={DEBUG:!1,ifft2DArray:function(t,e,r){var n=new Array(e*r),s=e/2,o=2*(r-1);i.init(s);for(var a={re:new Array(s),im:new Array(s)},h=0;h<r;h++){for(var l=s-1;l>=0;l--)a.re[l]=t[2*l*r+h],a.im[l]=t[(2*l+1)*r+h];for(i.bt(a.re,a.im),l=s-1;l>=0;l--)n[2*l*r+h]=a.re[l],n[(2*l+1)*r+h]=a.im[l]}var u=new Array(s*o);i.init(o);var c={re:new Array(o),im:new Array(o)},f=o*s;for(l=0;l<e;l+=2){for(c.re[0]=n[l*r],c.im[0]=n[(l+1)*r],h=1;h<r;h++)c.re[h]=n[l*r+h],c.im[h]=n[(l+1)*r+h],c.re[o-h]=n[l*r+h],c.im[o-h]=-n[(l+1)*r+h];i.bt(c.re,c.im);var d=l/2*o;for(h=o-1;h>=0;h--)u[d+h]=c.re[h]/f}return u},fft2DArray:function(t,e,r,n){Object.assign({},{inplace:!0});var s=r/2+1,o=2*e,a=new Array(o*s);i.init(r);for(var h,l,u,c,f,d={re:new Array(r),im:new Array(r)},p={re:new Array(r),im:new Array(r)},m={re:new Array(r),im:new Array(r)},g=0;g<e/2;g++){h=2*g*r,d.re=t.slice(h,h+r),h=(2*g+1)*r,d.im=t.slice(h,h+r),i.fft1d(d.re,d.im),this.reconstructTwoRealFFT(d,p,m),l=4*g*s,u=(4*g+1)*s,c=(4*g+2)*s,f=(4*g+3)*s;for(var w=s-1;w>=0;w--)a[l+w]=p.re[w],a[u+w]=p.im[w],a[c+w]=m.re[w],a[f+w]=m.im[w]}p=null,m=null;var b=new Array(o*s);i.init(e);for(var y={re:new Array(e),im:new Array(e)},_=s-1;_>=0;_--){for(g=e-1;g>=0;g--)y.re[g]=a[2*g*s+_],y.im[g]=a[(2*g+1)*s+_],isNaN(y.re[g])&&(y.re[g]=0),isNaN(y.im[g])&&(y.im[g]=0);for(i.fft1d(y.re,y.im),g=e-1;g>=0;g--)b[2*g*s+_]=y.re[g],b[(2*g+1)*s+_]=y.im[g]}return b},reconstructTwoRealFFT:function(t,e,r){var i,n,s,o,a,h=t.re.length;e.re[0]=t.re[0],e.im[0]=0,r.re[0]=t.im[0],r.im[0]=0;for(var l=h/2;l>0;l--)a=h-l,i=.5*(t.re[l]-t.re[a]),n=.5*(t.re[l]+t.re[a]),s=.5*(t.im[l]-t.im[a]),o=.5*(t.im[l]+t.im[a]),e.re[l]=n,e.im[l]=s,e.re[a]=n,e.im[a]=-s,r.re[l]=o,r.im[l]=-i,r.re[a]=o,r.im[a]=i},convolute2DI:function(t,e,r,i){for(var n,s,o=0;o<r/2;o++)for(var a=0;a<i;a++)n=t[2*o*i+a]*e[2*o*i+a]-t[(2*o+1)*i+a]*e[(2*o+1)*i+a],s=t[2*o*i+a]*e[(2*o+1)*i+a]+t[(2*o+1)*i+a]*e[2*o*i+a],t[2*o*i+a]=n,t[(2*o+1)*i+a]=s},convolute:function(t,e,r,i,n){for(var s=new Array(i*r),o=0;o<r*i;o++)s[o]=t[o];s=this.fft2DArray(s,r,i);var a,h=e.length,l=e[0].length,u=new Array(i*r);for(o=0;o<i*r;o++)u[o]=0;for(var c=Math.floor((h-1)/2),f=Math.floor((l-1)/2),d=0;d<h;d++){a=(d-c+r)%r;for(var p=0;p<l;p++)u[a*i+(p-f+i)%i]=e[d][p]}u=this.fft2DArray(u,r,i);var m=2*r,g=i/2+1;return this.convolute2DI(s,u,m,g),this.ifft2DArray(s,m,g)},toRadix2:function(t,e,r){var i,n,s,o,a=r,h=e;if(0===r||0!=(r&r-1)){for(a=0;r>>++a!=0;);a=1<<a}if(0===e||0!=(e&e-1)){for(h=0;e>>++h!=0;);h=1<<h}if(h==e&&a==r)return{data:t,rows:e,cols:r};var l=new Array(h*a),u=Math.floor((h-e)/2)-e,c=Math.floor((a-r)/2)-r;for(i=0;i<h;i++)for(s=i*a,o=(i-u)%e*r,n=0;n<a;n++)l[s+n]=t[o+(n-c)%r];return{data:l,rows:h,cols:a}},crop:function(t,e,r,i,n,s){if(e==i&&r==n)return t;Object.assign({},s);var o,a,h,l,u=new Array(n*i),c=Math.floor((e-i)/2),f=Math.floor((r-n)/2);for(h=0;h<i;h++)for(o=h*n,a=(h+c)*r,l=0;l<n;l++)u[o+l]=t[a+(l+f)];return u}};t.exports=n},5571:function(t,e){(function(){var t;(t=e).toString=function(){return"version 0.3.0, released 2013-03"};for(var r=0,i=null,n=null,s={init:function(t){if(0===t||0!=(t&t-1))throw new Error("init: radix-2 required");r=t,s._initArray(),s._makeBitReversalTable(),s._makeCosSinTable()},fft1d:function(t,e){s.fft(t,e,1)},ifft1d:function(t,e){var i=1/r;s.fft(t,e,-1);for(var n=0;n<r;n++)t[n]*=i,e[n]*=i},bt1d:function(t,e){s.fft(t,e,-1)},fft2d:function(t,e){for(var i=[],n=[],o=0,a=0;a<r;a++){o=a*r;for(var h=0;h<r;h++)i[h]=t[h+o],n[h]=e[h+o];s.fft1d(i,n);for(var l=0;l<r;l++)t[l+o]=i[l],e[l+o]=n[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)o=u+c*r,i[c]=t[o],n[c]=e[o];s.fft1d(i,n);for(var f=0;f<r;f++)t[o=u+f*r]=i[f],e[o]=n[f]}},ifft2d:function(t,e){for(var i=[],n=[],o=0,a=0;a<r;a++){o=a*r;for(var h=0;h<r;h++)i[h]=t[h+o],n[h]=e[h+o];s.ifft1d(i,n);for(var l=0;l<r;l++)t[l+o]=i[l],e[l+o]=n[l]}for(var u=0;u<r;u++){for(var c=0;c<r;c++)o=u+c*r,i[c]=t[o],n[c]=e[o];s.ifft1d(i,n);for(var f=0;f<r;f++)t[o=u+f*r]=i[f],e[o]=n[f]}},fft:function(t,e,s){for(var o,a,h,l,u,c,f,d,p,m=r>>2,g=0;g<r;g++)g<(l=i[g])&&(u=t[g],t[g]=t[l],t[l]=u,u=e[g],e[g]=e[l],e[l]=u);for(var w=1;w<r;w<<=1){a=0,o=r/(w<<1);for(var b=0;b<w;b++){c=n[a+m],f=s*n[a];for(var y=b;y<r;y+=w<<1)d=c*t[h=y+w]+f*e[h],p=c*e[h]-f*t[h],t[h]=t[y]-d,t[y]+=d,e[h]=e[y]-p,e[y]+=p;a+=o}}},_initArray:function(){i="undefined"!=typeof Uint32Array?new Uint32Array(r):[],n="undefined"!=typeof Float64Array?new Float64Array(1.25*r):[]},_paddingZero:function(){},_makeBitReversalTable:function(){var t=0,e=0,n=0;for(i[0]=0;++t<r;){for(n=r>>1;n<=e;)e-=n,n>>=1;e+=n,i[t]=e}},_makeCosSinTable:function(){var t=r>>1,e=r>>2,i=r>>3,s=t+e,o=Math.sin(Math.PI/r),a=2*o*o,h=Math.sqrt(a*(2-a)),l=n[e]=1,u=n[0]=0;o=2*a;for(var c=1;c<i;c++)a+=o*(l-=a),h-=o*(u+=h),n[c]=u,n[e-c]=l;0!==i&&(n[i]=Math.sqrt(.5));for(var f=0;f<e;f++)n[t-f]=n[f];for(var d=0;d<s;d++)n[d+t]=-n[d]}},o=["init","fft1d","ifft1d","fft2d","ifft2d"],a=0;a<o.length;a++)t[o[a]]=s[o[a]];return t.bt=s.bt1d,t.fft=s.fft1d,t.ifft=s.ifft1d,t}).call(this)},3910:(t,e,r)=>{"use strict";e.FFTUtils=r(7345),r(5571)},8881:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.divisor)}}},4229:t=>{"use strict";const e={degree:1,constant:1,scale:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.degree=t.degree,this.constant=t.constant,this.scale=t.scale}compute(t,e){for(var r=0,i=0;i<t.length;i++)r+=t[i]*e[i];return Math.pow(this.scale*r+this.constant,this.degree)}}},7613:t=>{"use strict";const e={alpha:.01,constant:-Math.E};t.exports=class{constructor(t){t=Object.assign({},e,t),this.alpha=t.alpha,this.constant=t.constant}compute(t,e){for(var r=0,i=0;i<t.length;i++)r+=t[i]*e[i];return Math.tanh(this.alpha*r+this.constant)}}},6952:(t,e,r)=>{"use strict";const{Matrix:i,MatrixTransposeView:n}=r(2864),s=r(8881),o=r(4229),a=r(7613),h=r(8541),l=r(9176),u=r(3316),c=r(1960),f={gaussian:s,rbf:s,polynomial:o,poly:o,anova:h,cauchy:l,exponential:u,histogram:c,min:c,laplacian:r(8557),multiquadratic:r(8609),rational:r(3029),sigmoid:a,mlp:a};t.exports=class{constructor(t,e){if(this.kernelType=t,"linear"!==t)if("string"==typeof t){t=t.toLowerCase();var r=f[t];if(!r)throw new Error(`unsupported kernel type: ${t}`);this.kernelFunction=new r(e)}else{if("object"!=typeof t||"function"!=typeof t.compute)throw new TypeError("first argument must be a valid kernel type or instance");this.kernelFunction=t}}compute(t,e){if(t=i.checkMatrix(t),e=void 0===e?t:i.checkMatrix(e),"linear"===this.kernelType)return t.mmul(new n(e));const r=new i(t.rows,e.rows);if(t===e)for(let e=0;e<t.rows;e++)for(let i=e;i<t.rows;i++){const n=this.kernelFunction.compute(t.getRow(e),t.getRow(i));r.set(e,i,n),r.set(i,e,n)}else for(let i=0;i<t.rows;i++)for(let n=0;n<e.rows;n++)r.set(i,n,this.kernelFunction.compute(t.getRow(i),e.getRow(n)));return r}}},8541:t=>{"use strict";const e={sigma:1,degree:1};t.exports=class{constructor(t){t=Object.assign({},e,t),this.sigma=t.sigma,this.degree=t.degree}compute(t,e){for(var r=0,i=Math.min(t.length,e.length),n=1;n<=i;++n)r+=Math.pow(Math.exp(-this.sigma*Math.pow(Math.pow(t[n-1],n)-Math.pow(e[n-1],n),2)),this.degree);return r}}},9176:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma}compute(t,e){return 1/(1+i(t,e)/(this.sigma*this.sigma))}}},3316:(t,e,r)=>{"use strict";const{euclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma,this.divisor=2*t.sigma*t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.divisor)}}},1960:t=>{"use strict";t.exports=class{compute(t,e){for(var r=Math.min(t.length,e.length),i=0,n=0;n<r;++n)i+=Math.min(t[n],e[n]);return i}}},8557:(t,e,r)=>{"use strict";const{euclidean:i}=r(4953),n={sigma:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.sigma=t.sigma}compute(t,e){const r=i(t,e);return Math.exp(-r/this.sigma)}}},8609:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={constant:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.constant=t.constant}compute(t,e){return Math.sqrt(i(t,e)+this.constant*this.constant)}}},3029:(t,e,r)=>{"use strict";const{squaredEuclidean:i}=r(4953),n={constant:1};t.exports=class{constructor(t){t=Object.assign({},n,t),this.constant=t.constant}compute(t,e){const r=i(t,e);return 1-r/(r+this.constant)}}},414:(t,e,r)=>{var i=r(3910).FFTUtils;function n(t){var e,r,i=t;if("number"!=typeof t[0]){e=t.length,r=t[0].length,i=new Array(e*r);for(var n=0;n<e;n++)for(var s=0;s<r;s++)i[n*r+s]=t[n][s]}else{var o=Math.sqrt(t.length);Number.isInteger(o)&&(e=o,r=o)}return{data:i,rows:e,cols:r}}t.exports={fft:function(t,e,r){var s,o,a=n(t),h=a.data,l=Object.assign({normalize:!1,divisor:1,rows:a.rows,cols:a.cols},r);if(!l.rows||!l.cols)throw new Error("Invalid number of rows or columns "+s+" "+o);s=l.rows,o=l.cols;var u,c,f=l.divisor,d=e.length,p=e[0].length;if(l.normalize)for(f=0,u=0;u<d;u++)for(c=0;c<p;c++)f+=e[u][c];if(0===f)throw new RangeError("convolution: The divisor is equal to zero");var m=i.toRadix2(h,s,o),g=i.convolute(m.data,e,m.rows,m.cols);if(g=i.crop(g,m.rows,m.cols,s,o),0!=f&&1!=f)for(u=0;u<g.length;u++)g[u]/=f;return g},direct:function(t,e,r){var i,s,o=n(t),a=o.data,h=Object.assign({normalize:!1,divisor:1,rows:o.rows,cols:o.cols},r);if(!h.rows||!h.cols)throw new Error("Invalid number of rows or columns "+i+" "+s);i=h.rows,s=h.cols;var l,u,c,f,d,p,m=h.divisor,g=e.length,w=e[0].length;if(h.normalize)for(m=0,l=0;l<g;l++)for(u=0;u<w;u++)m+=e[l][u];if(0===m)throw new RangeError("convolution: The divisor is equal to zero");var b=new Array(i*s),y=Math.floor(g/2),_=Math.floor(w/2);for(f=0;f<i;f++)for(c=0;c<s;c++){for(d=0,u=0;u<g;u++)for(l=0;l<w;l++)p=e[g-u-1][w-l-1],d+=a[(f+u-y+i)%i*s+(c+l-_+s)%s]*p;b[f*s+c]=d/m}return b},kernelFactory:{LoG:function(t,e,r){var i=1e3;r&&r.factor&&(i=r.factor);var n,s,o,a,h=new Array(e);i*=-1;var l=(e-1)/2,u=2*t*t;for(n=0;n<e;n++)for(h[n]=new Array(e),a=(n-l)*(n-l),s=0;s<e;s++)o=-((s-l)*(s-l)+a)/u,h[n][s]=Math.round(i*(1+o)*Math.exp(o));return h}},matrix2Array:n}},2313:(t,e,r)=>{"use strict";r.d(e,{Z:()=>s});var i=r(1883),n=r(1548);class s{constructor(t){let e,r,i,s,o,a,h,l,u,c=(t=n.Z.checkMatrix(t)).clone(),f=c.rows,d=c.columns,p=new Float64Array(f),m=1;for(e=0;e<f;e++)p[e]=e;for(l=new Float64Array(f),r=0;r<d;r++){for(e=0;e<f;e++)l[e]=c.get(e,r);for(e=0;e<f;e++){for(u=Math.min(e,r),o=0,i=0;i<u;i++)o+=c.get(e,i)*l[i];l[e]-=o,c.set(e,r,l[e])}for(s=r,e=r+1;e<f;e++)Math.abs(l[e])>Math.abs(l[s])&&(s=e);if(s!==r){for(i=0;i<d;i++)a=c.get(s,i),c.set(s,i,c.get(r,i)),c.set(r,i,a);h=p[s],p[s]=p[r],p[r]=h,m=-m}if(r<f&&0!==c.get(r,r))for(e=r+1;e<f;e++)c.set(e,r,c.get(e,r)/c.get(r,r))}this.LU=c,this.pivotVector=p,this.pivotSign=m}isSingular(){let t=this.LU,e=t.columns;for(let r=0;r<e;r++)if(0===t.get(r,r))return!0;return!1}solve(t){t=i.Z.checkMatrix(t);let e=this.LU;if(e.rows!==t.rows)throw new Error("Invalid matrix dimensions");if(this.isSingular())throw new Error("LU matrix is singular");let r,n,s,o=t.columns,a=t.subMatrixRow(this.pivotVector,0,o-1),h=e.columns;for(s=0;s<h;s++)for(r=s+1;r<h;r++)for(n=0;n<o;n++)a.set(r,n,a.get(r,n)-a.get(s,n)*e.get(r,s));for(s=h-1;s>=0;s--){for(n=0;n<o;n++)a.set(s,n,a.get(s,n)/e.get(s,s));for(r=0;r<s;r++)for(n=0;n<o;n++)a.set(r,n,a.get(r,n)-a.get(s,n)*e.get(r,s))}return a}get determinant(){let t=this.LU;if(!t.isSquare())throw new Error("Matrix must be square");let e=this.pivotSign,r=t.columns;for(let i=0;i<r;i++)e*=t.get(i,i);return e}get lowerTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,n=new i.Z(e,r);for(let i=0;i<e;i++)for(let e=0;e<r;e++)i>e?n.set(i,e,t.get(i,e)):i===e?n.set(i,e,1):n.set(i,e,0);return n}get upperTriangularMatrix(){let t=this.LU,e=t.rows,r=t.columns,n=new i.Z(e,r);for(let i=0;i<e;i++)for(let e=0;e<r;e++)i<=e?n.set(i,e,t.get(i,e)):n.set(i,e,0);return n}get pivotPermutationVector(){return Array.from(this.pivotVector)}}},7072:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var i=r(1883),n=r(1548),s=r(6310);class o{constructor(t){let e,r,i,o,a=(t=n.Z.checkMatrix(t)).clone(),h=t.rows,l=t.columns,u=new Float64Array(l);for(i=0;i<l;i++){let t=0;for(e=i;e<h;e++)t=(0,s.G)(t,a.get(e,i));if(0!==t){for(a.get(i,i)<0&&(t=-t),e=i;e<h;e++)a.set(e,i,a.get(e,i)/t);for(a.set(i,i,a.get(i,i)+1),r=i+1;r<l;r++){for(o=0,e=i;e<h;e++)o+=a.get(e,i)*a.get(e,r);for(o=-o/a.get(i,i),e=i;e<h;e++)a.set(e,r,a.get(e,r)+o*a.get(e,i))}}u[i]=-t}this.QR=a,this.Rdiag=u}solve(t){t=i.Z.checkMatrix(t);let e=this.QR,r=e.rows;if(t.rows!==r)throw new Error("Matrix row dimensions must agree");if(!this.isFullRank())throw new Error("Matrix is rank deficient");let n,s,o,a,h=t.columns,l=t.clone(),u=e.columns;for(o=0;o<u;o++)for(s=0;s<h;s++){for(a=0,n=o;n<r;n++)a+=e.get(n,o)*l.get(n,s);for(a=-a/e.get(o,o),n=o;n<r;n++)l.set(n,s,l.get(n,s)+a*e.get(n,o))}for(o=u-1;o>=0;o--){for(s=0;s<h;s++)l.set(o,s,l.get(o,s)/this.Rdiag[o]);for(n=0;n<o;n++)for(s=0;s<h;s++)l.set(n,s,l.get(n,s)-l.get(o,s)*e.get(n,o))}return l.subMatrix(0,u-1,0,h-1)}isFullRank(){let t=this.QR.columns;for(let e=0;e<t;e++)if(0===this.Rdiag[e])return!1;return!0}get upperTriangularMatrix(){let t,e,r=this.QR,n=r.columns,s=new i.Z(n,n);for(t=0;t<n;t++)for(e=0;e<n;e++)t<e?s.set(t,e,r.get(t,e)):t===e?s.set(t,e,this.Rdiag[t]):s.set(t,e,0);return s}get orthogonalMatrix(){let t,e,r,n,s=this.QR,o=s.rows,a=s.columns,h=new i.Z(o,a);for(r=a-1;r>=0;r--){for(t=0;t<o;t++)h.set(t,r,0);for(h.set(r,r,1),e=r;e<a;e++)if(0!==s.get(r,r)){for(n=0,t=r;t<o;t++)n+=s.get(t,r)*h.get(t,e);for(n=-n/s.get(r,r),t=r;t<o;t++)h.set(t,e,h.get(t,e)+n*s.get(t,r))}}return h}}},6943:(t,e,r)=>{"use strict";r.d(e,{Z:()=>o});var i=r(1883),n=r(1548),s=r(6310);class o{constructor(t,e={}){if((t=n.Z.checkMatrix(t)).isEmpty())throw new Error("Matrix must be non-empty");let r=t.rows,o=t.columns;const{computeLeftSingularVectors:a=!0,computeRightSingularVectors:h=!0,autoTranspose:l=!1}=e;let u,c=Boolean(a),f=Boolean(h),d=!1;if(r<o)if(l){u=t.transpose(),r=u.rows,o=u.columns,d=!0;let e=c;c=f,f=e}else u=t.clone(),console.warn("Computing SVD on a matrix with more columns than rows. Consider enabling autoTranspose");else u=t.clone();let p=Math.min(r,o),m=Math.min(r+1,o),g=new Float64Array(m),w=new i.Z(r,p),b=new i.Z(o,o),y=new Float64Array(o),_=new Float64Array(r),v=new Float64Array(m);for(let t=0;t<m;t++)v[t]=t;let x=Math.min(r-1,o),k=Math.max(0,Math.min(o-2,r)),A=Math.max(x,k);for(let t=0;t<A;t++){if(t<x){g[t]=0;for(let e=t;e<r;e++)g[t]=(0,s.G)(g[t],u.get(e,t));if(0!==g[t]){u.get(t,t)<0&&(g[t]=-g[t]);for(let e=t;e<r;e++)u.set(e,t,u.get(e,t)/g[t]);u.set(t,t,u.get(t,t)+1)}g[t]=-g[t]}for(let e=t+1;e<o;e++){if(t<x&&0!==g[t]){let i=0;for(let n=t;n<r;n++)i+=u.get(n,t)*u.get(n,e);i=-i/u.get(t,t);for(let n=t;n<r;n++)u.set(n,e,u.get(n,e)+i*u.get(n,t))}y[e]=u.get(t,e)}if(c&&t<x)for(let e=t;e<r;e++)w.set(e,t,u.get(e,t));if(t<k){y[t]=0;for(let e=t+1;e<o;e++)y[t]=(0,s.G)(y[t],y[e]);if(0!==y[t]){y[t+1]<0&&(y[t]=0-y[t]);for(let e=t+1;e<o;e++)y[e]/=y[t];y[t+1]+=1}if(y[t]=-y[t],t+1<r&&0!==y[t]){for(let e=t+1;e<r;e++)_[e]=0;for(let e=t+1;e<r;e++)for(let r=t+1;r<o;r++)_[e]+=y[r]*u.get(e,r);for(let e=t+1;e<o;e++){let i=-y[e]/y[t+1];for(let n=t+1;n<r;n++)u.set(n,e,u.get(n,e)+i*_[n])}}if(f)for(let e=t+1;e<o;e++)b.set(e,t,y[e])}}let M=Math.min(o,r+1);if(x<o&&(g[x]=u.get(x,x)),r<M&&(g[M-1]=0),k+1<M&&(y[k]=u.get(k,M-1)),y[M-1]=0,c){for(let t=x;t<p;t++){for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}for(let t=x-1;t>=0;t--)if(0!==g[t]){for(let e=t+1;e<p;e++){let i=0;for(let n=t;n<r;n++)i+=w.get(n,t)*w.get(n,e);i=-i/w.get(t,t);for(let n=t;n<r;n++)w.set(n,e,w.get(n,e)+i*w.get(n,t))}for(let e=t;e<r;e++)w.set(e,t,-w.get(e,t));w.set(t,t,1+w.get(t,t));for(let e=0;e<t-1;e++)w.set(e,t,0)}else{for(let e=0;e<r;e++)w.set(e,t,0);w.set(t,t,1)}}if(f)for(let t=o-1;t>=0;t--){if(t<k&&0!==y[t])for(let e=t+1;e<o;e++){let r=0;for(let i=t+1;i<o;i++)r+=b.get(i,t)*b.get(i,e);r=-r/b.get(t+1,t);for(let i=t+1;i<o;i++)b.set(i,e,b.get(i,e)+r*b.get(i,t))}for(let e=0;e<o;e++)b.set(e,t,0);b.set(t,t,1)}let E=M-1,S=0,C=Number.EPSILON;for(;M>0;){let t,e;for(t=M-2;t>=-1&&-1!==t;t--){const e=Number.MIN_VALUE+C*Math.abs(g[t]+Math.abs(g[t+1]));if(Math.abs(y[t])<=e||Number.isNaN(y[t])){y[t]=0;break}}if(t===M-2)e=4;else{let r;for(r=M-1;r>=t&&r!==t;r--){let e=(r!==M?Math.abs(y[r]):0)+(r!==t+1?Math.abs(y[r-1]):0);if(Math.abs(g[r])<=C*e){g[r]=0;break}}r===t?e=3:r===M-1?e=1:(e=2,t=r)}switch(t++,e){case 1:{let e=y[M-2];y[M-2]=0;for(let r=M-2;r>=t;r--){let i=(0,s.G)(g[r],e),n=g[r]/i,a=e/i;if(g[r]=i,r!==t&&(e=-a*y[r-1],y[r-1]=n*y[r-1]),f)for(let t=0;t<o;t++)i=n*b.get(t,r)+a*b.get(t,M-1),b.set(t,M-1,-a*b.get(t,r)+n*b.get(t,M-1)),b.set(t,r,i)}break}case 2:{let e=y[t-1];y[t-1]=0;for(let i=t;i<M;i++){let n=(0,s.G)(g[i],e),o=g[i]/n,a=e/n;if(g[i]=n,e=-a*y[i],y[i]=o*y[i],c)for(let e=0;e<r;e++)n=o*w.get(e,i)+a*w.get(e,t-1),w.set(e,t-1,-a*w.get(e,i)+o*w.get(e,t-1)),w.set(e,i,n)}break}case 3:{const e=Math.max(Math.abs(g[M-1]),Math.abs(g[M-2]),Math.abs(y[M-2]),Math.abs(g[t]),Math.abs(y[t])),i=g[M-1]/e,n=g[M-2]/e,a=y[M-2]/e,h=g[t]/e,l=y[t]/e,u=((n+i)*(n-i)+a*a)/2,d=i*a*(i*a);let p=0;0===u&&0===d||(p=u<0?0-Math.sqrt(u*u+d):Math.sqrt(u*u+d),p=d/(u+p));let m=(h+i)*(h-i)+p,_=h*l;for(let e=t;e<M-1;e++){let i=(0,s.G)(m,_);0===i&&(i=Number.MIN_VALUE);let n=m/i,a=_/i;if(e!==t&&(y[e-1]=i),m=n*g[e]+a*y[e],y[e]=n*y[e]-a*g[e],_=a*g[e+1],g[e+1]=n*g[e+1],f)for(let t=0;t<o;t++)i=n*b.get(t,e)+a*b.get(t,e+1),b.set(t,e+1,-a*b.get(t,e)+n*b.get(t,e+1)),b.set(t,e,i);if(i=(0,s.G)(m,_),0===i&&(i=Number.MIN_VALUE),n=m/i,a=_/i,g[e]=i,m=n*y[e]+a*g[e+1],g[e+1]=-a*y[e]+n*g[e+1],_=a*y[e+1],y[e+1]=n*y[e+1],c&&e<r-1)for(let t=0;t<r;t++)i=n*w.get(t,e)+a*w.get(t,e+1),w.set(t,e+1,-a*w.get(t,e)+n*w.get(t,e+1)),w.set(t,e,i)}y[M-2]=m,S+=1;break}case 4:if(g[t]<=0&&(g[t]=g[t]<0?-g[t]:0,f))for(let e=0;e<=E;e++)b.set(e,t,-b.get(e,t));for(;t<E&&!(g[t]>=g[t+1]);){let e=g[t];if(g[t]=g[t+1],g[t+1]=e,f&&t<o-1)for(let r=0;r<o;r++)e=b.get(r,t+1),b.set(r,t+1,b.get(r,t)),b.set(r,t,e);if(c&&t<r-1)for(let i=0;i<r;i++)e=w.get(i,t+1),w.set(i,t+1,w.get(i,t)),w.set(i,t,e);t++}S=0,M--}}if(d){let t=b;b=w,w=t}this.m=r,this.n=o,this.s=g,this.U=w,this.V=b}solve(t){let e=t,r=this.threshold,n=this.s.length,s=i.Z.zeros(n,n);for(let t=0;t<n;t++)Math.abs(this.s[t])<=r?s.set(t,t,0):s.set(t,t,1/this.s[t]);let o=this.U,a=this.rightSingularVectors,h=a.mmul(s),l=a.rows,u=o.rows,c=i.Z.zeros(l,u);for(let t=0;t<l;t++)for(let e=0;e<u;e++){let r=0;for(let i=0;i<n;i++)r+=h.get(t,i)*o.get(e,i);c.set(t,e,r)}return c.mmul(e)}solveForDiagonal(t){return this.solve(i.Z.diag(t))}inverse(){let t=this.V,e=this.threshold,r=t.rows,n=t.columns,s=new i.Z(r,this.s.length);for(let i=0;i<r;i++)for(let r=0;r<n;r++)Math.abs(this.s[r])>e&&s.set(i,r,t.get(i,r)/this.s[r]);let o=this.U,a=o.rows,h=o.columns,l=new i.Z(r,a);for(let t=0;t<r;t++)for(let e=0;e<a;e++){let r=0;for(let i=0;i<h;i++)r+=s.get(t,i)*o.get(e,i);l.set(t,e,r)}return l}get condition(){return this.s[0]/this.s[Math.min(this.m,this.n)-1]}get norm2(){return this.s[0]}get rank(){let t=Math.max(this.m,this.n)*this.s[0]*Number.EPSILON,e=0,r=this.s;for(let i=0,n=r.length;i<n;i++)r[i]>t&&e++;return e}get diagonal(){return Array.from(this.s)}get threshold(){return Number.EPSILON/2*Math.max(this.m,this.n)*this.s[0]}get leftSingularVectors(){return this.U}get rightSingularVectors(){return this.V}get diagonalMatrix(){return i.Z.diag(this.s)}}},6310:(t,e,r)=>{"use strict";function i(t,e){let r=0;return Math.abs(t)>Math.abs(e)?(r=e/t,Math.abs(t)*Math.sqrt(1+r*r)):0!==e?(r=t/e,Math.abs(e)*Math.sqrt(1+r*r)):0}r.d(e,{G:()=>i})},8345:(t,e,r)=>{"use strict";r.d(e,{S:()=>h,F:()=>l});var i=r(2313),n=r(7072),s=r(6943),o=r(1883),a=r(1548);function h(t,e=!1){return t=a.Z.checkMatrix(t),e?new s.Z(t).inverse():l(t,o.Z.eye(t.rows))}function l(t,e,r=!1){return t=a.Z.checkMatrix(t),e=a.Z.checkMatrix(e),r?new s.Z(t).solve(e):t.isSquare()?new i.Z(t).solve(e):new n.Z(t).solve(e)}},2864:(t,e,r)=>{"use strict";r.r(e),r.d(e,{AbstractMatrix:()=>i.X,CHO:()=>P,CholeskyDecomposition:()=>P,EVD:()=>I,EigenvalueDecomposition:()=>I,LU:()=>y.Z,LuDecomposition:()=>y.Z,Matrix:()=>i.Z,MatrixColumnSelectionView:()=>a,MatrixColumnView:()=>o,MatrixFlipColumnView:()=>h,MatrixFlipRowView:()=>l,MatrixRowSelectionView:()=>c,MatrixRowView:()=>u,MatrixSelectionView:()=>f,MatrixSubView:()=>d,MatrixTransposeView:()=>p.Z,NIPALS:()=>R,Nipals:()=>R,QR:()=>B.Z,QrDecomposition:()=>B.Z,SVD:()=>v.Z,SingularValueDecomposition:()=>v.Z,WrapperMatrix1D:()=>m,WrapperMatrix2D:()=>g.Z,correlation:()=>S,covariance:()=>E,default:()=>i.Z,determinant:()=>_,inverse:()=>b.S,linearDependencies:()=>A,pseudoInverse:()=>M,solve:()=>b.F,wrap:()=>w});var i=r(1883),n=r(3018),s=r(4920);class o extends s.Z{constructor(t,e){(0,n.bp)(t,e),super(t,t.rows,1),this.column=e}set(t,e,r){return this.matrix.set(t,this.column,r),this}get(t){return this.matrix.get(t,this.column)}}class a extends s.Z{constructor(t,e){e=(0,n.g)(t,e),super(t,t.rows,e.length),this.columnIndices=e}set(t,e,r){return this.matrix.set(t,this.columnIndices[e],r),this}get(t,e){return this.matrix.get(t,this.columnIndices[e])}}class h extends s.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(t,this.columns-e-1,r),this}get(t,e){return this.matrix.get(t,this.columns-e-1)}}class l extends s.Z{constructor(t){super(t,t.rows,t.columns)}set(t,e,r){return this.matrix.set(this.rows-t-1,e,r),this}get(t,e){return this.matrix.get(this.rows-t-1,e)}}class u extends s.Z{constructor(t,e){(0,n.zb)(t,e),super(t,1,t.columns),this.row=e}set(t,e,r){return this.matrix.set(this.row,e,r),this}get(t,e){return this.matrix.get(this.row,e)}}class c extends s.Z{constructor(t,e){super(t,(e=(0,n.ZR)(t,e)).length,t.columns),this.rowIndices=e}set(t,e,r){return this.matrix.set(this.rowIndices[t],e,r),this}get(t,e){return this.matrix.get(this.rowIndices[t],e)}}class f extends s.Z{constructor(t,e,r){let i=(0,n.N2)(t,e,r);super(t,i.row.length,i.column.length),this.rowIndices=i.row,this.columnIndices=i.column}set(t,e,r){return this.matrix.set(this.rowIndices[t],this.columnIndices[e],r),this}get(t,e){return this.matrix.get(this.rowIndices[t],this.columnIndices[e])}}class d extends s.Z{constructor(t,e,r,i,s){(0,n.J5)(t,e,r,i,s),super(t,r-e+1,s-i+1),this.startRow=e,this.startColumn=i}set(t,e,r){return this.matrix.set(this.startRow+t,this.startColumn+e,r),this}get(t,e){return this.matrix.get(this.startRow+t,this.startColumn+e)}}var p=r(5922);class m extends i.X{constructor(t,e={}){const{rows:r=1}=e;if(t.length%r!=0)throw new Error("the data length is not divisible by the number of rows");super(),this.rows=r,this.columns=t.length/r,this.data=t}set(t,e,r){let i=this._calculateIndex(t,e);return this.data[i]=r,this}get(t,e){let r=this._calculateIndex(t,e);return this.data[r]}_calculateIndex(t,e){return t*this.columns+e}}var g=r(1548);function w(t,e){if(Array.isArray(t))return t[0]&&Array.isArray(t[0])?new g.Z(t):new m(t,e);throw new Error("the argument is not an array")}var b=r(8345),y=r(2313);function _(t){if((t=i.Z.checkMatrix(t)).isSquare()){if(0===t.columns)return 1;let e,r,i,n;if(2===t.columns)return e=t.get(0,0),r=t.get(0,1),i=t.get(1,0),n=t.get(1,1),e*n-r*i;if(3===t.columns){let n,s,o;return n=new f(t,[1,2],[1,2]),s=new f(t,[1,2],[0,2]),o=new f(t,[1,2],[0,1]),e=t.get(0,0),r=t.get(0,1),i=t.get(0,2),e*_(n)-r*_(s)+i*_(o)}return new y.Z(t).determinant}throw Error("determinant can only be calculated for a square matrix")}var v=r(6943);function x(t,e){let r=[];for(let i=0;i<t;i++)i!==e&&r.push(i);return r}function k(t,e,r,i=1e-9,n=1e-9){if(t>n)return new Array(e.rows+1).fill(0);{let t=e.addRow(r,[0]);for(let e=0;e<t.rows;e++)Math.abs(t.get(e,0))<i&&t.set(e,0,0);return t.to1DArray()}}function A(t,e={}){const{thresholdValue:r=1e-9,thresholdError:n=1e-9}=e;let s=(t=i.Z.checkMatrix(t)).rows,o=new i.Z(s,s);for(let e=0;e<s;e++){let a=i.Z.columnVector(t.getRow(e)),h=t.subMatrixRow(x(s,e)).transpose(),l=new v.Z(h).solve(a),u=i.Z.sub(a,h.mmul(l)).abs().max();o.setRow(e,k(u,l,e,r,n))}return o}function M(t,e=Number.EPSILON){if((t=i.Z.checkMatrix(t)).isEmpty())return t.transpose();let r=new v.Z(t,{autoTranspose:!0}),n=r.leftSingularVectors,s=r.rightSingularVectors,o=r.diagonal;for(let t=0;t<o.length;t++)Math.abs(o[t])>e?o[t]=1/o[t]:o[t]=0;return s.mmul(i.Z.diag(o).mmul(n.transpose()))}function E(t,e=t,r={}){t=new i.Z(t);let n=!1;if("object"!=typeof e||i.Z.isMatrix(e)||Array.isArray(e)?e=new i.Z(e):(r=e,e=t,n=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:s=!0}=r;s&&(t=t.center("column"),n||(e=e.center("column")));const o=t.transpose().mmul(e);for(let e=0;e<o.rows;e++)for(let r=0;r<o.columns;r++)o.set(e,r,o.get(e,r)*(1/(t.rows-1)));return o}function S(t,e=t,r={}){t=new i.Z(t);let n=!1;if("object"!=typeof e||i.Z.isMatrix(e)||Array.isArray(e)?e=new i.Z(e):(r=e,e=t,n=!0),t.rows!==e.rows)throw new TypeError("Both matrices must have the same number of rows");const{center:s=!0,scale:o=!0}=r;s&&(t.center("column"),n||e.center("column")),o&&(t.scale("column"),n||e.scale("column"));const a=t.standardDeviation("column",{unbiased:!0}),h=n?a:e.standardDeviation("column",{unbiased:!0}),l=t.transpose().mmul(e);for(let e=0;e<l.rows;e++)for(let r=0;r<l.columns;r++)l.set(e,r,l.get(e,r)*(1/(a[e]*h[r]))*(1/(t.rows-1)));return l}var C=r(6310);class I{constructor(t,e={}){const{assumeSymmetric:r=!1}=e;if(!(t=g.Z.checkMatrix(t)).isSquare())throw new Error("Matrix is not a square matrix");if(t.isEmpty())throw new Error("Matrix must be non-empty");let n,s,o=t.columns,a=new i.Z(o,o),h=new Float64Array(o),l=new Float64Array(o),u=t,c=!1;if(c=!!r||t.isSymmetric(),c){for(n=0;n<o;n++)for(s=0;s<o;s++)a.set(n,s,u.get(n,s));!function(t,e,r,i){let n,s,o,a,h,l,u,c;for(h=0;h<t;h++)r[h]=i.get(t-1,h);for(a=t-1;a>0;a--){for(c=0,o=0,l=0;l<a;l++)c+=Math.abs(r[l]);if(0===c)for(e[a]=r[a-1],h=0;h<a;h++)r[h]=i.get(a-1,h),i.set(a,h,0),i.set(h,a,0);else{for(l=0;l<a;l++)r[l]/=c,o+=r[l]*r[l];for(n=r[a-1],s=Math.sqrt(o),n>0&&(s=-s),e[a]=c*s,o-=n*s,r[a-1]=n-s,h=0;h<a;h++)e[h]=0;for(h=0;h<a;h++){for(n=r[h],i.set(h,a,n),s=e[h]+i.get(h,h)*n,l=h+1;l<=a-1;l++)s+=i.get(l,h)*r[l],e[l]+=i.get(l,h)*n;e[h]=s}for(n=0,h=0;h<a;h++)e[h]/=o,n+=e[h]*r[h];for(u=n/(o+o),h=0;h<a;h++)e[h]-=u*r[h];for(h=0;h<a;h++){for(n=r[h],s=e[h],l=h;l<=a-1;l++)i.set(l,h,i.get(l,h)-(n*e[l]+s*r[l]));r[h]=i.get(a-1,h),i.set(a,h,0)}}r[a]=o}for(a=0;a<t-1;a++){if(i.set(t-1,a,i.get(a,a)),i.set(a,a,1),o=r[a+1],0!==o){for(l=0;l<=a;l++)r[l]=i.get(l,a+1)/o;for(h=0;h<=a;h++){for(s=0,l=0;l<=a;l++)s+=i.get(l,a+1)*i.get(l,h);for(l=0;l<=a;l++)i.set(l,h,i.get(l,h)-s*r[l])}}for(l=0;l<=a;l++)i.set(l,a+1,0)}for(h=0;h<t;h++)r[h]=i.get(t-1,h),i.set(t-1,h,0);i.set(t-1,t-1,1),e[0]=0}(o,l,h,a),function(t,e,r,i){let n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_;for(o=1;o<t;o++)e[o-1]=e[o];e[t-1]=0;let v=0,x=0,k=Number.EPSILON;for(l=0;l<t;l++){for(x=Math.max(x,Math.abs(r[l])+Math.abs(e[l])),u=l;u<t&&!(Math.abs(e[u])<=k*x);)u++;if(u>l){_=0;do{for(_+=1,n=r[l],c=(r[l+1]-n)/(2*e[l]),f=(0,C.G)(c,1),c<0&&(f=-f),r[l]=e[l]/(c+f),r[l+1]=e[l]*(c+f),d=r[l+1],s=n-r[l],o=l+2;o<t;o++)r[o]-=s;for(v+=s,c=r[u],p=1,m=p,g=p,w=e[l+1],b=0,y=0,o=u-1;o>=l;o--)for(g=m,m=p,y=b,n=p*e[o],s=p*c,f=(0,C.G)(c,e[o]),e[o+1]=b*f,b=e[o]/f,p=c/f,c=p*r[o]-b*n,r[o+1]=s+b*(p*n+b*r[o]),h=0;h<t;h++)s=i.get(h,o+1),i.set(h,o+1,b*i.get(h,o)+p*s),i.set(h,o,p*i.get(h,o)-b*s);c=-b*y*g*w*e[l]/d,e[l]=b*c,r[l]=p*c}while(Math.abs(e[l])>k*x)}r[l]=r[l]+v,e[l]=0}for(o=0;o<t-1;o++){for(h=o,c=r[o],a=o+1;a<t;a++)r[a]<c&&(h=a,c=r[a]);if(h!==o)for(r[h]=r[o],r[o]=c,a=0;a<t;a++)c=i.get(a,o),i.set(a,o,i.get(a,h)),i.set(a,h,c)}}(o,l,h,a)}else{let t=new i.Z(o,o),e=new Float64Array(o);for(s=0;s<o;s++)for(n=0;n<o;n++)t.set(n,s,u.get(n,s));!function(t,e,r,i){let n,s,o,a,h,l,u,c=t-1;for(l=1;l<=c-1;l++){for(u=0,a=l;a<=c;a++)u+=Math.abs(e.get(a,l-1));if(0!==u){for(o=0,a=c;a>=l;a--)r[a]=e.get(a,l-1)/u,o+=r[a]*r[a];for(s=Math.sqrt(o),r[l]>0&&(s=-s),o-=r[l]*s,r[l]=r[l]-s,h=l;h<t;h++){for(n=0,a=c;a>=l;a--)n+=r[a]*e.get(a,h);for(n/=o,a=l;a<=c;a++)e.set(a,h,e.get(a,h)-n*r[a])}for(a=0;a<=c;a++){for(n=0,h=c;h>=l;h--)n+=r[h]*e.get(a,h);for(n/=o,h=l;h<=c;h++)e.set(a,h,e.get(a,h)-n*r[h])}r[l]=u*r[l],e.set(l,l-1,u*s)}}for(a=0;a<t;a++)for(h=0;h<t;h++)i.set(a,h,a===h?1:0);for(l=c-1;l>=1;l--)if(0!==e.get(l,l-1)){for(a=l+1;a<=c;a++)r[a]=e.get(a,l-1);for(h=l;h<=c;h++){for(s=0,a=l;a<=c;a++)s+=r[a]*i.get(a,h);for(s=s/r[l]/e.get(l,l-1),a=l;a<=c;a++)i.set(a,h,i.get(a,h)+s*r[a])}}}(o,t,e,a),function(t,e,r,i,n){let s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_=t-1,v=t-1,x=Number.EPSILON,k=0,A=0,M=0,E=0,S=0,C=0,I=0,P=0;for(s=0;s<t;s++)for((s<0||s>v)&&(r[s]=n.get(s,s),e[s]=0),o=Math.max(s-1,0);o<t;o++)A+=Math.abs(n.get(s,o));for(;_>=0;){for(h=_;h>0&&(C=Math.abs(n.get(h-1,h-1))+Math.abs(n.get(h,h)),0===C&&(C=A),!(Math.abs(n.get(h,h-1))<x*C));)h--;if(h===_)n.set(_,_,n.get(_,_)+k),r[_]=n.get(_,_),e[_]=0,_--,P=0;else if(h===_-1){if(c=n.get(_,_-1)*n.get(_-1,_),M=(n.get(_-1,_-1)-n.get(_,_))/2,E=M*M+c,I=Math.sqrt(Math.abs(E)),n.set(_,_,n.get(_,_)+k),n.set(_-1,_-1,n.get(_-1,_-1)+k),f=n.get(_,_),E>=0){for(I=M>=0?M+I:M-I,r[_-1]=f+I,r[_]=r[_-1],0!==I&&(r[_]=f-c/I),e[_-1]=0,e[_]=0,f=n.get(_,_-1),C=Math.abs(f)+Math.abs(I),M=f/C,E=I/C,S=Math.sqrt(M*M+E*E),M/=S,E/=S,o=_-1;o<t;o++)I=n.get(_-1,o),n.set(_-1,o,E*I+M*n.get(_,o)),n.set(_,o,E*n.get(_,o)-M*I);for(s=0;s<=_;s++)I=n.get(s,_-1),n.set(s,_-1,E*I+M*n.get(s,_)),n.set(s,_,E*n.get(s,_)-M*I);for(s=0;s<=v;s++)I=i.get(s,_-1),i.set(s,_-1,E*I+M*i.get(s,_)),i.set(s,_,E*i.get(s,_)-M*I)}else r[_-1]=f+M,r[_]=f+M,e[_-1]=I,e[_]=-I;_-=2,P=0}else{if(f=n.get(_,_),d=0,c=0,h<_&&(d=n.get(_-1,_-1),c=n.get(_,_-1)*n.get(_-1,_)),10===P){for(k+=f,s=0;s<=_;s++)n.set(s,s,n.get(s,s)-f);C=Math.abs(n.get(_,_-1))+Math.abs(n.get(_-1,_-2)),f=d=.75*C,c=-.4375*C*C}if(30===P&&(C=(d-f)/2,C=C*C+c,C>0)){for(C=Math.sqrt(C),d<f&&(C=-C),C=f-c/((d-f)/2+C),s=0;s<=_;s++)n.set(s,s,n.get(s,s)-C);k+=C,f=d=c=.964}for(P+=1,l=_-2;l>=h&&(I=n.get(l,l),S=f-I,C=d-I,M=(S*C-c)/n.get(l+1,l)+n.get(l,l+1),E=n.get(l+1,l+1)-I-S-C,S=n.get(l+2,l+1),C=Math.abs(M)+Math.abs(E)+Math.abs(S),M/=C,E/=C,S/=C,l!==h)&&!(Math.abs(n.get(l,l-1))*(Math.abs(E)+Math.abs(S))<x*(Math.abs(M)*(Math.abs(n.get(l-1,l-1))+Math.abs(I)+Math.abs(n.get(l+1,l+1)))));)l--;for(s=l+2;s<=_;s++)n.set(s,s-2,0),s>l+2&&n.set(s,s-3,0);for(a=l;a<=_-1&&(b=a!==_-1,a!==l&&(M=n.get(a,a-1),E=n.get(a+1,a-1),S=b?n.get(a+2,a-1):0,f=Math.abs(M)+Math.abs(E)+Math.abs(S),0!==f&&(M/=f,E/=f,S/=f)),0!==f);a++)if(C=Math.sqrt(M*M+E*E+S*S),M<0&&(C=-C),0!==C){for(a!==l?n.set(a,a-1,-C*f):h!==l&&n.set(a,a-1,-n.get(a,a-1)),M+=C,f=M/C,d=E/C,I=S/C,E/=M,S/=M,o=a;o<t;o++)M=n.get(a,o)+E*n.get(a+1,o),b&&(M+=S*n.get(a+2,o),n.set(a+2,o,n.get(a+2,o)-M*I)),n.set(a,o,n.get(a,o)-M*f),n.set(a+1,o,n.get(a+1,o)-M*d);for(s=0;s<=Math.min(_,a+3);s++)M=f*n.get(s,a)+d*n.get(s,a+1),b&&(M+=I*n.get(s,a+2),n.set(s,a+2,n.get(s,a+2)-M*S)),n.set(s,a,n.get(s,a)-M),n.set(s,a+1,n.get(s,a+1)-M*E);for(s=0;s<=v;s++)M=f*i.get(s,a)+d*i.get(s,a+1),b&&(M+=I*i.get(s,a+2),i.set(s,a+2,i.get(s,a+2)-M*S)),i.set(s,a,i.get(s,a)-M),i.set(s,a+1,i.get(s,a+1)-M*E)}}}if(0!==A){for(_=t-1;_>=0;_--)if(M=r[_],E=e[_],0===E)for(h=_,n.set(_,_,1),s=_-1;s>=0;s--){for(c=n.get(s,s)-M,S=0,o=h;o<=_;o++)S+=n.get(s,o)*n.get(o,_);if(e[s]<0)I=c,C=S;else if(h=s,0===e[s]?n.set(s,_,0!==c?-S/c:-S/(x*A)):(f=n.get(s,s+1),d=n.get(s+1,s),E=(r[s]-M)*(r[s]-M)+e[s]*e[s],u=(f*C-I*S)/E,n.set(s,_,u),n.set(s+1,_,Math.abs(f)>Math.abs(I)?(-S-c*u)/f:(-C-d*u)/I)),u=Math.abs(n.get(s,_)),x*u*u>1)for(o=s;o<=_;o++)n.set(o,_,n.get(o,_)/u)}else if(E<0)for(h=_-1,Math.abs(n.get(_,_-1))>Math.abs(n.get(_-1,_))?(n.set(_-1,_-1,E/n.get(_,_-1)),n.set(_-1,_,-(n.get(_,_)-M)/n.get(_,_-1))):(y=D(0,-n.get(_-1,_),n.get(_-1,_-1)-M,E),n.set(_-1,_-1,y[0]),n.set(_-1,_,y[1])),n.set(_,_-1,0),n.set(_,_,1),s=_-2;s>=0;s--){for(p=0,m=0,o=h;o<=_;o++)p+=n.get(s,o)*n.get(o,_-1),m+=n.get(s,o)*n.get(o,_);if(c=n.get(s,s)-M,e[s]<0)I=c,S=p,C=m;else if(h=s,0===e[s]?(y=D(-p,-m,c,E),n.set(s,_-1,y[0]),n.set(s,_,y[1])):(f=n.get(s,s+1),d=n.get(s+1,s),g=(r[s]-M)*(r[s]-M)+e[s]*e[s]-E*E,w=2*(r[s]-M)*E,0===g&&0===w&&(g=x*A*(Math.abs(c)+Math.abs(E)+Math.abs(f)+Math.abs(d)+Math.abs(I))),y=D(f*S-I*p+E*m,f*C-I*m-E*p,g,w),n.set(s,_-1,y[0]),n.set(s,_,y[1]),Math.abs(f)>Math.abs(I)+Math.abs(E)?(n.set(s+1,_-1,(-p-c*n.get(s,_-1)+E*n.get(s,_))/f),n.set(s+1,_,(-m-c*n.get(s,_)-E*n.get(s,_-1))/f)):(y=D(-S-d*n.get(s,_-1),-C-d*n.get(s,_),I,E),n.set(s+1,_-1,y[0]),n.set(s+1,_,y[1]))),u=Math.max(Math.abs(n.get(s,_-1)),Math.abs(n.get(s,_))),x*u*u>1)for(o=s;o<=_;o++)n.set(o,_-1,n.get(o,_-1)/u),n.set(o,_,n.get(o,_)/u)}for(s=0;s<t;s++)if(s<0||s>v)for(o=s;o<t;o++)i.set(s,o,n.get(s,o));for(o=t-1;o>=0;o--)for(s=0;s<=v;s++){for(I=0,a=0;a<=Math.min(o,v);a++)I+=i.get(s,a)*n.get(a,o);i.set(s,o,I)}}}(o,l,h,a,t)}this.n=o,this.e=l,this.d=h,this.V=a}get realEigenvalues(){return Array.from(this.d)}get imaginaryEigenvalues(){return Array.from(this.e)}get eigenvectorMatrix(){return this.V}get diagonalMatrix(){let t,e,r=this.n,n=this.e,s=this.d,o=new i.Z(r,r);for(t=0;t<r;t++){for(e=0;e<r;e++)o.set(t,e,0);o.set(t,t,s[t]),n[t]>0?o.set(t,t+1,n[t]):n[t]<0&&o.set(t,t-1,n[t])}return o}}function D(t,e,r,i){let n,s;return Math.abs(r)>Math.abs(i)?(n=i/r,s=r+n*i,[(t+n*e)/s,(e-n*t)/s]):(n=r/i,s=i+n*r,[(n*t+e)/s,(n*e-t)/s])}class P{constructor(t){if(!(t=g.Z.checkMatrix(t)).isSymmetric())throw new Error("Matrix is not symmetric");let e,r,n,s=t,o=s.rows,a=new i.Z(o,o),h=!0;for(r=0;r<o;r++){let t=0;for(n=0;n<r;n++){let i=0;for(e=0;e<n;e++)i+=a.get(n,e)*a.get(r,e);i=(s.get(r,n)-i)/a.get(n,n),a.set(r,n,i),t+=i*i}for(t=s.get(r,r)-t,h&=t>0,a.set(r,r,Math.sqrt(Math.max(t,0))),n=r+1;n<o;n++)a.set(r,n,0)}this.L=a,this.positiveDefinite=Boolean(h)}isPositiveDefinite(){return this.positiveDefinite}solve(t){t=g.Z.checkMatrix(t);let e=this.L,r=e.rows;if(t.rows!==r)throw new Error("Matrix dimensions do not match");if(!1===this.isPositiveDefinite())throw new Error("Matrix is not positive definite");let i,n,s,o=t.columns,a=t.clone();for(s=0;s<r;s++)for(n=0;n<o;n++){for(i=0;i<s;i++)a.set(s,n,a.get(s,n)-a.get(i,n)*e.get(s,i));a.set(s,n,a.get(s,n)/e.get(s,s))}for(s=r-1;s>=0;s--)for(n=0;n<o;n++){for(i=s+1;i<r;i++)a.set(s,n,a.get(s,n)-a.get(i,n)*e.get(i,s));a.set(s,n,a.get(s,n)/e.get(s,s))}return a}get lowerTriangularMatrix(){return this.L}}var B=r(7072);class R{constructor(t,e={}){t=g.Z.checkMatrix(t);let{Y:r}=e;const{scaleScores:n=!1,maxIterations:s=1e3,terminationCriteria:o=1e-10}=e;let a;if(r){if(r=Array.isArray(r)&&"number"==typeof r[0]?i.Z.columnVector(r):g.Z.checkMatrix(r),r.rows!==t.rows)throw new Error("Y should have the same number of rows as X");a=r.getColumnVector(0)}else a=t.getColumnVector(0);let h,l,u,c,f=1;for(let e=0;e<s&&f>o;e++)u=t.transpose().mmul(a).div(a.transpose().mmul(a).get(0,0)),u=u.div(u.norm()),h=t.mmul(u).div(u.transpose().mmul(u).get(0,0)),e>0&&(f=h.clone().sub(c).pow(2).sum()),c=h.clone(),r?(l=r.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),l=l.div(l.norm()),a=r.mmul(l).div(l.transpose().mmul(l).get(0,0))):a=h;if(r){let e=t.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0));e=e.div(e.norm());let i=t.clone().sub(h.clone().mmul(e.transpose())),n=a.transpose().mmul(h).div(h.transpose().mmul(h).get(0,0)),s=r.clone().sub(h.clone().mulS(n.get(0,0)).mmul(l.transpose()));this.t=h,this.p=e.transpose(),this.w=u.transpose(),this.q=l,this.u=a,this.s=h.transpose().mmul(h),this.xResidual=i,this.yResidual=s,this.betas=n}else this.w=u.transpose(),this.s=h.transpose().mmul(h).sqrt(),this.t=n?h.clone().div(this.s.get(0,0)):h,this.xResidual=t.sub(h.mmul(u.transpose()))}}},1883:(t,e,r)=>{"use strict";r.d(e,{X:()=>f,Z:()=>p});var i=r(7531);const n=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,n=void 0===r?0:r,s=e.toIndex,o=void 0===s?t.length:s;if(n<0||n>=t.length||!Number.isInteger(n))throw new Error("fromIndex must be a positive integer smaller than length");if(o<=n||o>t.length||!Number.isInteger(o))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[n],h=n+1;h<o;h++)t[h]>a&&(a=t[h]);return a},s=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");var r=e.fromIndex,n=void 0===r?0:r,s=e.toIndex,o=void 0===s?t.length:s;if(n<0||n>=t.length||!Number.isInteger(n))throw new Error("fromIndex must be a positive integer smaller than length");if(o<=n||o>t.length||!Number.isInteger(o))throw new Error("toIndex must be an integer greater than fromIndex and at most equal to length");for(var a=t[n],h=n+1;h<o;h++)t[h]<a&&(a=t[h]);return a};function o(t){var e,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!(0,i.Z)(t))throw new TypeError("input must be an array");if(0===t.length)throw new TypeError("input must not be empty");if(void 0!==r.output){if(!(0,i.Z)(r.output))throw new TypeError("output option must be an array if specified");e=r.output}else e=new Array(t.length);var o=s(t),a=n(t);if(o===a)throw new RangeError("minimum and maximum input values are equal. Cannot rescale a constant array");var h=r.min,l=void 0===h?r.autoMinMax?o:0:h,u=r.max,c=void 0===u?r.autoMinMax?a:1:u;if(l>=c)throw new RangeError("min option must be smaller than max option");for(var f=(c-l)/(a-o),d=0;d<t.length;d++)e[d]=(t[d]-o)*f+l;return e}const a=" ".repeat(2),h=" ".repeat(4);function l(t,e={}){const{maxRows:r=15,maxColumns:i=10,maxNumSize:n=8}=e;return`${t.constructor.name} {\n${a}[\n${h}${function(t,e,r,i){const{rows:n,columns:s}=t,o=Math.min(n,e),a=Math.min(s,r),l=[];for(let e=0;e<o;e++){let r=[];for(let n=0;n<a;n++)r.push(u(t.get(e,n),i));l.push(`${r.join(" ")}`)}return a!==s&&(l[l.length-1]+=` ... ${s-r} more columns`),o!==n&&l.push(`... ${n-e} more rows`),l.join(`\n${h}`)}(t,r,i,n)}\n${a}]\n${a}rows: ${t.rows}\n${a}columns: ${t.columns}\n}`}function u(t,e){const r=String(t);if(r.length<=e)return r.padEnd(e," ");const i=t.toPrecision(e-2);if(i.length<=e)return i;const n=t.toExponential(e-2),s=n.indexOf("e"),o=n.slice(s);return n.slice(0,e-o.length)+o}var c=r(3018);class f{static from1DArray(t,e,r){if(t*e!==r.length)throw new RangeError("data length does not match given dimensions");let i=new p(t,e);for(let n=0;n<t;n++)for(let t=0;t<e;t++)i.set(n,t,r[n*e+t]);return i}static rowVector(t){let e=new p(1,t.length);for(let r=0;r<t.length;r++)e.set(0,r,t[r]);return e}static columnVector(t){let e=new p(t.length,1);for(let r=0;r<t.length;r++)e.set(r,0,t[r]);return e}static zeros(t,e){return new p(t,e)}static ones(t,e){return new p(t,e).fill(1)}static rand(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{random:i=Math.random}=r;let n=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++)n.set(r,t,i());return n}static randInt(t,e,r={}){if("object"!=typeof r)throw new TypeError("options must be an object");const{min:i=0,max:n=1e3,random:s=Math.random}=r;if(!Number.isInteger(i))throw new TypeError("min must be an integer");if(!Number.isInteger(n))throw new TypeError("max must be an integer");if(i>=n)throw new RangeError("min must be smaller than max");let o=n-i,a=new p(t,e);for(let r=0;r<t;r++)for(let t=0;t<e;t++){let e=i+Math.round(s()*o);a.set(r,t,e)}return a}static eye(t,e,r){void 0===e&&(e=t),void 0===r&&(r=1);let i=Math.min(t,e),n=this.zeros(t,e);for(let t=0;t<i;t++)n.set(t,t,r);return n}static diag(t,e,r){let i=t.length;void 0===e&&(e=i),void 0===r&&(r=e);let n=Math.min(i,e,r),s=this.zeros(e,r);for(let e=0;e<n;e++)s.set(e,e,t[e]);return s}static min(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,i=t.columns,n=new p(r,i);for(let s=0;s<r;s++)for(let r=0;r<i;r++)n.set(s,r,Math.min(t.get(s,r),e.get(s,r)));return n}static max(t,e){t=this.checkMatrix(t),e=this.checkMatrix(e);let r=t.rows,i=t.columns,n=new this(r,i);for(let s=0;s<r;s++)for(let r=0;r<i;r++)n.set(s,r,Math.max(t.get(s,r),e.get(s,r)));return n}static checkMatrix(t){return f.isMatrix(t)?t:new p(t)}static isMatrix(t){return null!=t&&"Matrix"===t.klass}get size(){return this.rows*this.columns}apply(t){if("function"!=typeof t)throw new TypeError("callback must be a function");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.call(this,e,r);return this}to1DArray(){let t=[];for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.push(this.get(e,r));return t}to2DArray(){let t=[];for(let e=0;e<this.rows;e++){t.push([]);for(let r=0;r<this.columns;r++)t[e].push(this.get(e,r))}return t}toJSON(){return this.to2DArray()}isRowVector(){return 1===this.rows}isColumnVector(){return 1===this.columns}isVector(){return 1===this.rows||1===this.columns}isSquare(){return this.rows===this.columns}isEmpty(){return 0===this.rows||0===this.columns}isSymmetric(){if(this.isSquare()){for(let t=0;t<this.rows;t++)for(let e=0;e<=t;e++)if(this.get(t,e)!==this.get(e,t))return!1;return!0}return!1}isEchelonForm(){let t=0,e=0,r=-1,i=!0,n=!1;for(;t<this.rows&&i;){for(e=0,n=!1;e<this.columns&&!1===n;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(n=!0,r=e):(i=!1,n=!0);t++}return i}isReducedEchelonForm(){let t=0,e=0,r=-1,i=!0,n=!1;for(;t<this.rows&&i;){for(e=0,n=!1;e<this.columns&&!1===n;)0===this.get(t,e)?e++:1===this.get(t,e)&&e>r?(n=!0,r=e):(i=!1,n=!0);for(let r=e+1;r<this.rows;r++)0!==this.get(t,r)&&(i=!1);t++}return i}echelonForm(){let t=this.clone(),e=0,r=0;for(;e<t.rows&&r<t.columns;){let i=e;for(let n=e;n<t.rows;n++)t.get(n,r)>t.get(i,r)&&(i=n);if(0===t.get(i,r))r++;else{t.swapRows(e,i);let n=t.get(e,r);for(let i=r;i<t.columns;i++)t.set(e,i,t.get(e,i)/n);for(let i=e+1;i<t.rows;i++){let n=t.get(i,r)/t.get(e,r);t.set(i,r,0);for(let s=r+1;s<t.columns;s++)t.set(i,s,t.get(i,s)-t.get(e,s)*n)}e++,r++}}return t}reducedEchelonForm(){let t=this.echelonForm(),e=t.columns,r=t.rows,i=r-1;for(;i>=0;)if(0===t.maxRow(i))i--;else{let n=0,s=!1;for(;n<r&&!1===s;)1===t.get(i,n)?s=!0:n++;for(let r=0;r<i;r++){let s=t.get(r,n);for(let o=n;o<e;o++){let e=t.get(r,o)-s*t.get(i,o);t.set(r,o,e)}}i--}return t}set(){throw new Error("set method is unimplemented")}get(){throw new Error("get method is unimplemented")}repeat(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{rows:e=1,columns:r=1}=t;if(!Number.isInteger(e)||e<=0)throw new TypeError("rows must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new TypeError("columns must be a positive integer");let i=new p(this.rows*e,this.columns*r);for(let t=0;t<e;t++)for(let e=0;e<r;e++)i.setSubMatrix(this,this.rows*t,this.columns*e);return i}fill(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,t);return this}neg(){return this.mulS(-1)}getRow(t){(0,c.zb)(this,t);let e=[];for(let r=0;r<this.columns;r++)e.push(this.get(t,r));return e}getRowVector(t){return p.rowVector(this.getRow(t))}setRow(t,e){(0,c.zb)(this,t),e=(0,c.on)(this,e);for(let r=0;r<this.columns;r++)this.set(t,r,e[r]);return this}swapRows(t,e){(0,c.zb)(this,t),(0,c.zb)(this,e);for(let r=0;r<this.columns;r++){let i=this.get(t,r);this.set(t,r,this.get(e,r)),this.set(e,r,i)}return this}getColumn(t){(0,c.bp)(this,t);let e=[];for(let r=0;r<this.rows;r++)e.push(this.get(r,t));return e}getColumnVector(t){return p.columnVector(this.getColumn(t))}setColumn(t,e){(0,c.bp)(this,t),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++)this.set(r,t,e[r]);return this}swapColumns(t,e){(0,c.bp)(this,t),(0,c.bp)(this,e);for(let r=0;r<this.rows;r++){let i=this.get(r,t);this.set(r,t,this.get(r,e)),this.set(r,e,i)}return this}addRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[r]);return this}subRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[r]);return this}mulRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[r]);return this}divRowVector(t){t=(0,c.on)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[r]);return this}addColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t[e]);return this}subColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t[e]);return this}mulColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t[e]);return this}divColumnVector(t){t=(0,c.Um)(this,t);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t[e]);return this}mulRow(t,e){(0,c.zb)(this,t);for(let r=0;r<this.columns;r++)this.set(t,r,this.get(t,r)*e);return this}mulColumn(t,e){(0,c.bp)(this,t);for(let r=0;r<this.rows;r++)this.set(r,t,this.get(r,t)*e);return this}max(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)>t&&(t=this.get(e,r));return t}maxIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let i=0;i<this.columns;i++)this.get(r,i)>t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}min(){if(this.isEmpty())return NaN;let t=this.get(0,0);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.get(e,r)<t&&(t=this.get(e,r));return t}minIndex(){(0,c.cT)(this);let t=this.get(0,0),e=[0,0];for(let r=0;r<this.rows;r++)for(let i=0;i<this.columns;i++)this.get(r,i)<t&&(t=this.get(r,i),e[0]=r,e[1]=i);return e}maxRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)>e&&(e=this.get(t,r));return e}maxRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let i=1;i<this.columns;i++)this.get(t,i)>e&&(e=this.get(t,i),r[1]=i);return r}minRow(t){if((0,c.zb)(this,t),this.isEmpty())return NaN;let e=this.get(t,0);for(let r=1;r<this.columns;r++)this.get(t,r)<e&&(e=this.get(t,r));return e}minRowIndex(t){(0,c.zb)(this,t),(0,c.cT)(this);let e=this.get(t,0),r=[t,0];for(let i=1;i<this.columns;i++)this.get(t,i)<e&&(e=this.get(t,i),r[1]=i);return r}maxColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)>e&&(e=this.get(r,t));return e}maxColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let i=1;i<this.rows;i++)this.get(i,t)>e&&(e=this.get(i,t),r[0]=i);return r}minColumn(t){if((0,c.bp)(this,t),this.isEmpty())return NaN;let e=this.get(0,t);for(let r=1;r<this.rows;r++)this.get(r,t)<e&&(e=this.get(r,t));return e}minColumnIndex(t){(0,c.bp)(this,t),(0,c.cT)(this);let e=this.get(0,t),r=[0,t];for(let i=1;i<this.rows;i++)this.get(i,t)<e&&(e=this.get(i,t),r[0]=i);return r}diag(){let t=Math.min(this.rows,this.columns),e=[];for(let r=0;r<t;r++)e.push(this.get(r,r));return e}norm(t="frobenius"){let e=0;if("max"===t)return this.max();if("frobenius"===t){for(let t=0;t<this.rows;t++)for(let r=0;r<this.columns;r++)e+=this.get(t,r)*this.get(t,r);return Math.sqrt(e)}throw new RangeError(`unknown norm type: ${t}`)}cumulativeSum(){let t=0;for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t+=this.get(e,r),this.set(e,r,t);return this}dot(t){f.isMatrix(t)&&(t=t.to1DArray());let e=this.to1DArray();if(e.length!==t.length)throw new RangeError("vectors do not have the same size");let r=0;for(let i=0;i<e.length;i++)r+=e[i]*t[i];return r}mmul(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,i=t.columns,n=new p(e,i),s=new Float64Array(r);for(let o=0;o<i;o++){for(let e=0;e<r;e++)s[e]=t.get(e,o);for(let t=0;t<e;t++){let e=0;for(let i=0;i<r;i++)e+=this.get(t,i)*s[i];n.set(t,o,e)}}return n}strassen2x2(t){t=p.checkMatrix(t);let e=new p(2,2);const r=this.get(0,0),i=t.get(0,0),n=this.get(0,1),s=t.get(0,1),o=this.get(1,0),a=t.get(1,0),h=this.get(1,1),l=t.get(1,1),u=(r+h)*(i+l),c=(o+h)*i,f=r*(s-l),d=h*(a-i),m=(r+n)*l,g=u+d-m+(n-h)*(a+l),w=f+m,b=c+d,y=u-c+f+(o-r)*(i+s);return e.set(0,0,g),e.set(0,1,w),e.set(1,0,b),e.set(1,1,y),e}strassen3x3(t){t=p.checkMatrix(t);let e=new p(3,3);const r=this.get(0,0),i=this.get(0,1),n=this.get(0,2),s=this.get(1,0),o=this.get(1,1),a=this.get(1,2),h=this.get(2,0),l=this.get(2,1),u=this.get(2,2),c=t.get(0,0),f=t.get(0,1),d=t.get(0,2),m=t.get(1,0),g=t.get(1,1),w=t.get(1,2),b=t.get(2,0),y=t.get(2,1),_=t.get(2,2),v=(r-s)*(-f+g),x=(-r+s+o)*(c-f+g),k=(s+o)*(-c+f),A=r*c,M=(-r+h+l)*(c-d+w),E=(-r+h)*(d-w),S=(h+l)*(-c+d),C=(-n+l+u)*(g+b-y),I=(n-u)*(g-y),D=n*b,P=(l+u)*(-b+y),B=(-n+o+a)*(w+b-_),R=(n-a)*(w-_),T=(o+a)*(-b+_),U=A+D+i*m,O=(r+i+n-s-o-l-u)*g+x+k+A+C+D+P,L=A+M+S+(r+i+n-o-a-h-l)*w+D+B+T,F=v+o*(-c+f+m-g-w-b+_)+x+A+D+B+R,N=v+x+k+A+a*y,z=D+B+R+T+s*d,j=A+M+E+l*(-c+d+m-g-w-b+y)+C+I+D,Y=C+I+D+P+h*f,V=A+M+E+S+u*_;return e.set(0,0,U),e.set(0,1,O),e.set(0,2,L),e.set(1,0,F),e.set(1,1,N),e.set(1,2,z),e.set(2,0,j),e.set(2,1,Y),e.set(2,2,V),e}mmulStrassen(t){t=p.checkMatrix(t);let e=this.clone(),r=e.rows,i=e.columns,n=t.rows,s=t.columns;function o(t,e,r){let i=t.rows,n=t.columns;if(i===e&&n===r)return t;{let i=f.zeros(e,r);return i=i.setSubMatrix(t,0,0),i}}i!==n&&console.warn(`Multiplying ${r} x ${i} and ${n} x ${s} matrix: dimensions do not match.`);let a=Math.max(r,n),h=Math.max(i,s);return e=o(e,a,h),function t(e,r,i,n){if(i<=512||n<=512)return e.mmul(r);i%2==1&&n%2==1?(e=o(e,i+1,n+1),r=o(r,i+1,n+1)):i%2==1?(e=o(e,i+1,n),r=o(r,i+1,n)):n%2==1&&(e=o(e,i,n+1),r=o(r,i,n+1));let s=parseInt(e.rows/2,10),a=parseInt(e.columns/2,10),h=e.subMatrix(0,s-1,0,a-1),l=r.subMatrix(0,s-1,0,a-1),u=e.subMatrix(0,s-1,a,e.columns-1),c=r.subMatrix(0,s-1,a,r.columns-1),d=e.subMatrix(s,e.rows-1,0,a-1),p=r.subMatrix(s,r.rows-1,0,a-1),m=e.subMatrix(s,e.rows-1,a,e.columns-1),g=r.subMatrix(s,r.rows-1,a,r.columns-1),w=t(f.add(h,m),f.add(l,g),s,a),b=t(f.add(d,m),l,s,a),y=t(h,f.sub(c,g),s,a),_=t(m,f.sub(p,l),s,a),v=t(f.add(h,u),g,s,a),x=t(f.sub(d,h),f.add(l,c),s,a),k=t(f.sub(u,m),f.add(p,g),s,a),A=f.add(w,_);A.sub(v),A.add(k);let M=f.add(y,v),E=f.add(b,_),S=f.sub(w,b);S.add(y),S.add(x);let C=f.zeros(2*A.rows,2*A.columns);return C=C.setSubMatrix(A,0,0),C=C.setSubMatrix(M,A.rows,0),C=C.setSubMatrix(E,0,A.columns),C=C.setSubMatrix(S,A.rows,A.columns),C.subMatrix(0,i-1,0,n-1)}(e,t=o(t,a,h),a,h)}scaleRows(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let i=new p(this.rows,this.columns);for(let t=0;t<this.rows;t++){const n=this.getRow(t);n.length>0&&o(n,{min:e,max:r,output:n}),i.setRow(t,n)}return i}scaleColumns(t={}){if("object"!=typeof t)throw new TypeError("options must be an object");const{min:e=0,max:r=1}=t;if(!Number.isFinite(e))throw new TypeError("min must be a number");if(!Number.isFinite(r))throw new TypeError("max must be a number");if(e>=r)throw new RangeError("min must be smaller than max");let i=new p(this.rows,this.columns);for(let t=0;t<this.columns;t++){const n=this.getColumn(t);n.length&&o(n,{min:e,max:r,output:n}),i.setColumn(t,n)}return i}flipRows(){const t=Math.ceil(this.columns/2);for(let e=0;e<this.rows;e++)for(let r=0;r<t;r++){let t=this.get(e,r),i=this.get(e,this.columns-1-r);this.set(e,r,i),this.set(e,this.columns-1-r,t)}return this}flipColumns(){const t=Math.ceil(this.rows/2);for(let e=0;e<this.columns;e++)for(let r=0;r<t;r++){let t=this.get(r,e),i=this.get(this.rows-1-r,e);this.set(r,e,i),this.set(this.rows-1-r,e,t)}return this}kroneckerProduct(t){t=p.checkMatrix(t);let e=this.rows,r=this.columns,i=t.rows,n=t.columns,s=new p(e*i,r*n);for(let o=0;o<e;o++)for(let e=0;e<r;e++)for(let r=0;r<i;r++)for(let a=0;a<n;a++)s.set(i*o+r,n*e+a,this.get(o,e)*t.get(r,a));return s}kroneckerSum(t){if(t=p.checkMatrix(t),!this.isSquare()||!t.isSquare())throw new Error("Kronecker Sum needs two Square Matrices");let e=this.rows,r=t.rows,i=this.kroneckerProduct(p.eye(r,r)),n=p.eye(e,e).kroneckerProduct(t);return i.add(n)}transpose(){let t=new p(this.columns,this.rows);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(r,e,this.get(e,r));return t}sortRows(t=d){for(let e=0;e<this.rows;e++)this.setRow(e,this.getRow(e).sort(t));return this}sortColumns(t=d){for(let e=0;e<this.columns;e++)this.setColumn(e,this.getColumn(e).sort(t));return this}subMatrix(t,e,r,i){(0,c.J5)(this,t,e,r,i);let n=new p(e-t+1,i-r+1);for(let s=t;s<=e;s++)for(let e=r;e<=i;e++)n.set(s-t,e-r,this.get(s,e));return n}subMatrixRow(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.columns-1),e>r||e<0||e>=this.columns||r<0||r>=this.columns)throw new RangeError("Argument out of range");let i=new p(t.length,r-e+1);for(let n=0;n<t.length;n++)for(let s=e;s<=r;s++){if(t[n]<0||t[n]>=this.rows)throw new RangeError(`Row index out of range: ${t[n]}`);i.set(n,s-e,this.get(t[n],s))}return i}subMatrixColumn(t,e,r){if(void 0===e&&(e=0),void 0===r&&(r=this.rows-1),e>r||e<0||e>=this.rows||r<0||r>=this.rows)throw new RangeError("Argument out of range");let i=new p(r-e+1,t.length);for(let n=0;n<t.length;n++)for(let s=e;s<=r;s++){if(t[n]<0||t[n]>=this.columns)throw new RangeError(`Column index out of range: ${t[n]}`);i.set(s-e,n,this.get(s,t[n]))}return i}setSubMatrix(t,e,r){if((t=p.checkMatrix(t)).isEmpty())return this;let i=e+t.rows-1,n=r+t.columns-1;(0,c.J5)(this,e,i,r,n);for(let i=0;i<t.rows;i++)for(let n=0;n<t.columns;n++)this.set(e+i,r+n,t.get(i,n));return this}selection(t,e){let r=(0,c.N2)(this,t,e),i=new p(t.length,e.length);for(let t=0;t<r.row.length;t++){let e=r.row[t];for(let n=0;n<r.column.length;n++){let s=r.column[n];i.set(t,n,this.get(e,s))}}return i}trace(){let t=Math.min(this.rows,this.columns),e=0;for(let r=0;r<t;r++)e+=this.get(r,r);return e}clone(){let t=new p(this.rows,this.columns);for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)t.set(e,r,this.get(e,r));return t}sum(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[r]+=t.get(r,i);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[i]+=t.get(r,i);return e}(this);case void 0:return function(t){let e=0;for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)e+=t.get(r,i);return e}(this);default:throw new Error(`invalid option: ${t}`)}}product(t){switch(t){case"row":return function(t){let e=(0,c.B4)(t.rows,1);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[r]*=t.get(r,i);return e}(this);case"column":return function(t){let e=(0,c.B4)(t.columns,1);for(let r=0;r<t.rows;++r)for(let i=0;i<t.columns;++i)e[i]*=t.get(r,i);return e}(this);case void 0:return function(t){let e=1;for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)e*=t.get(r,i);return e}(this);default:throw new Error(`invalid option: ${t}`)}}mean(t){const e=this.sum(t);switch(t){case"row":for(let t=0;t<this.rows;t++)e[t]/=this.columns;return e;case"column":for(let t=0;t<this.columns;t++)e[t]/=this.rows;return e;case void 0:return e/this.size;default:throw new Error(`invalid option: ${t}`)}}variance(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{unbiased:r=!0,mean:i=this.mean(t)}=e;if("boolean"!=typeof r)throw new TypeError("unbiased must be a boolean");switch(t){case"row":if(!Array.isArray(i))throw new TypeError("mean must be an array");return function(t,e,r){const i=t.rows,n=t.columns,s=[];for(let o=0;o<i;o++){let i=0,a=0,h=0;for(let e=0;e<n;e++)h=t.get(o,e)-r[o],i+=h,a+=h*h;e?s.push((a-i*i/n)/(n-1)):s.push((a-i*i/n)/n)}return s}(this,r,i);case"column":if(!Array.isArray(i))throw new TypeError("mean must be an array");return function(t,e,r){const i=t.rows,n=t.columns,s=[];for(let o=0;o<n;o++){let n=0,a=0,h=0;for(let e=0;e<i;e++)h=t.get(e,o)-r[o],n+=h,a+=h*h;e?s.push((a-n*n/i)/(i-1)):s.push((a-n*n/i)/i)}return s}(this,r,i);case void 0:if("number"!=typeof i)throw new TypeError("mean must be a number");return function(t,e,r){const i=t.rows,n=t.columns,s=i*n;let o=0,a=0,h=0;for(let e=0;e<i;e++)for(let i=0;i<n;i++)h=t.get(e,i)-r,o+=h,a+=h*h;return e?(a-o*o/s)/(s-1):(a-o*o/s)/s}(this,r,i);default:throw new Error(`invalid option: ${t}`)}}standardDeviation(t,e){"object"==typeof t&&(e=t,t=void 0);const r=this.variance(t,e);if(void 0===t)return Math.sqrt(r);for(let t=0;t<r.length;t++)r[t]=Math.sqrt(r[t]);return r}center(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");const{center:r=this.mean(t)}=e;switch(t){case"row":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e[r])}(this,r),this;case"column":if(!Array.isArray(r))throw new TypeError("center must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e[i])}(this,r),this;case void 0:if("number"!=typeof r)throw new TypeError("center must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)-e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}scale(t,e={}){if("object"==typeof t&&(e=t,t=void 0),"object"!=typeof e)throw new TypeError("options must be an object");let r=e.scale;switch(t){case"row":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.rows;r++){let i=0;for(let e=0;e<t.columns;e++)i+=Math.pow(t.get(r,e),2)/(t.columns-1);e.push(Math.sqrt(i))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e[r])}(this,r),this;case"column":if(void 0===r)r=function(t){const e=[];for(let r=0;r<t.columns;r++){let i=0;for(let e=0;e<t.rows;e++)i+=Math.pow(t.get(e,r),2)/(t.rows-1);e.push(Math.sqrt(i))}return e}(this);else if(!Array.isArray(r))throw new TypeError("scale must be an array");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e[i])}(this,r),this;case void 0:if(void 0===r)r=function(t){const e=t.size-1;let r=0;for(let i=0;i<t.columns;i++)for(let n=0;n<t.rows;n++)r+=Math.pow(t.get(n,i),2)/e;return Math.sqrt(r)}(this);else if("number"!=typeof r)throw new TypeError("scale must be a number");return function(t,e){for(let r=0;r<t.rows;r++)for(let i=0;i<t.columns;i++)t.set(r,i,t.get(r,i)/e)}(this,r),this;default:throw new Error(`invalid option: ${t}`)}}toString(t){return l(this,t)}}function d(t,e){return t-e}f.prototype.klass="Matrix","undefined"!=typeof Symbol&&(f.prototype[Symbol.for("nodejs.util.inspect.custom")]=function(){return l(this)}),f.random=f.rand,f.randomInt=f.randInt,f.diagonal=f.diag,f.prototype.diagonal=f.prototype.diag,f.identity=f.eye,f.prototype.negate=f.prototype.neg,f.prototype.tensorProduct=f.prototype.kroneckerProduct;class p extends f{constructor(t,e){if(super(),p.isMatrix(t))return t.clone();if(Number.isInteger(t)&&t>=0){if(this.data=[],!(Number.isInteger(e)&&e>=0))throw new TypeError("nColumns must be a positive integer");for(let r=0;r<t;r++)this.data.push(new Float64Array(e))}else{if(!Array.isArray(t))throw new TypeError("First argument must be a positive number or an array");{const r=t;if("number"!=typeof(e=(t=r.length)?r[0].length:0))throw new TypeError("Data must be a 2D array with at least one element");this.data=[];for(let i=0;i<t;i++){if(r[i].length!==e)throw new RangeError("Inconsistent array dimensions");this.data.push(Float64Array.from(r[i]))}}}this.rows=t,this.columns=e}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}removeRow(t){return(0,c.zb)(this,t),this.data.splice(t,1),this.rows-=1,this}addRow(t,e){return void 0===e&&(e=t,t=this.rows),(0,c.zb)(this,t,!0),e=Float64Array.from((0,c.on)(this,e)),this.data.splice(t,0,e),this.rows+=1,this}removeColumn(t){(0,c.bp)(this,t);for(let e=0;e<this.rows;e++){const r=new Float64Array(this.columns-1);for(let i=0;i<t;i++)r[i]=this.data[e][i];for(let i=t+1;i<this.columns;i++)r[i-1]=this.data[e][i];this.data[e]=r}return this.columns-=1,this}addColumn(t,e){void 0===e&&(e=t,t=this.columns),(0,c.bp)(this,t,!0),e=(0,c.Um)(this,e);for(let r=0;r<this.rows;r++){const i=new Float64Array(this.columns+1);let n=0;for(;n<t;n++)i[n]=this.data[r][n];for(i[n++]=e[r];n<this.columns+1;n++)i[n]=this.data[r][n-1];this.data[r]=i}return this.columns+=1,this}}!function(t,e){t.prototype.add=function(t){return"number"==typeof t?this.addS(t):this.addM(t)},t.prototype.addS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t);return this},t.prototype.addM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)+t.get(e,r));return this},t.add=function(t,r){return new e(t).add(r)},t.prototype.sub=function(t){return"number"==typeof t?this.subS(t):this.subM(t)},t.prototype.subS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t);return this},t.prototype.subM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)-t.get(e,r));return this},t.sub=function(t,r){return new e(t).sub(r)},t.prototype.subtract=t.prototype.sub,t.prototype.subtractS=t.prototype.subS,t.prototype.subtractM=t.prototype.subM,t.subtract=t.sub,t.prototype.mul=function(t){return"number"==typeof t?this.mulS(t):this.mulM(t)},t.prototype.mulS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t);return this},t.prototype.mulM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)*t.get(e,r));return this},t.mul=function(t,r){return new e(t).mul(r)},t.prototype.multiply=t.prototype.mul,t.prototype.multiplyS=t.prototype.mulS,t.prototype.multiplyM=t.prototype.mulM,t.multiply=t.mul,t.prototype.div=function(t){return"number"==typeof t?this.divS(t):this.divM(t)},t.prototype.divS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t);return this},t.prototype.divM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)/t.get(e,r));return this},t.div=function(t,r){return new e(t).div(r)},t.prototype.divide=t.prototype.div,t.prototype.divideS=t.prototype.divS,t.prototype.divideM=t.prototype.divM,t.divide=t.div,t.prototype.mod=function(t){return"number"==typeof t?this.modS(t):this.modM(t)},t.prototype.modS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t);return this},t.prototype.modM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)%t.get(e,r));return this},t.mod=function(t,r){return new e(t).mod(r)},t.prototype.modulus=t.prototype.mod,t.prototype.modulusS=t.prototype.modS,t.prototype.modulusM=t.prototype.modM,t.modulus=t.mod,t.prototype.and=function(t){return"number"==typeof t?this.andS(t):this.andM(t)},t.prototype.andS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t);return this},t.prototype.andM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)&t.get(e,r));return this},t.and=function(t,r){return new e(t).and(r)},t.prototype.or=function(t){return"number"==typeof t?this.orS(t):this.orM(t)},t.prototype.orS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t);return this},t.prototype.orM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)|t.get(e,r));return this},t.or=function(t,r){return new e(t).or(r)},t.prototype.xor=function(t){return"number"==typeof t?this.xorS(t):this.xorM(t)},t.prototype.xorS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t);return this},t.prototype.xorM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)^t.get(e,r));return this},t.xor=function(t,r){return new e(t).xor(r)},t.prototype.leftShift=function(t){return"number"==typeof t?this.leftShiftS(t):this.leftShiftM(t)},t.prototype.leftShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t);return this},t.prototype.leftShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)<<t.get(e,r));return this},t.leftShift=function(t,r){return new e(t).leftShift(r)},t.prototype.signPropagatingRightShift=function(t){return"number"==typeof t?this.signPropagatingRightShiftS(t):this.signPropagatingRightShiftM(t)},t.prototype.signPropagatingRightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t);return this},t.prototype.signPropagatingRightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>t.get(e,r));return this},t.signPropagatingRightShift=function(t,r){return new e(t).signPropagatingRightShift(r)},t.prototype.rightShift=function(t){return"number"==typeof t?this.rightShiftS(t):this.rightShiftM(t)},t.prototype.rightShiftS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t);return this},t.prototype.rightShiftM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,this.get(e,r)>>>t.get(e,r));return this},t.rightShift=function(t,r){return new e(t).rightShift(r)},t.prototype.zeroFillRightShift=t.prototype.rightShift,t.prototype.zeroFillRightShiftS=t.prototype.rightShiftS,t.prototype.zeroFillRightShiftM=t.prototype.rightShiftM,t.zeroFillRightShift=t.rightShift,t.prototype.not=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,~this.get(t,e));return this},t.not=function(t){return new e(t).not()},t.prototype.abs=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.abs(this.get(t,e)));return this},t.abs=function(t){return new e(t).abs()},t.prototype.acos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acos(this.get(t,e)));return this},t.acos=function(t){return new e(t).acos()},t.prototype.acosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.acosh(this.get(t,e)));return this},t.acosh=function(t){return new e(t).acosh()},t.prototype.asin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asin(this.get(t,e)));return this},t.asin=function(t){return new e(t).asin()},t.prototype.asinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.asinh(this.get(t,e)));return this},t.asinh=function(t){return new e(t).asinh()},t.prototype.atan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atan(this.get(t,e)));return this},t.atan=function(t){return new e(t).atan()},t.prototype.atanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.atanh(this.get(t,e)));return this},t.atanh=function(t){return new e(t).atanh()},t.prototype.cbrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cbrt(this.get(t,e)));return this},t.cbrt=function(t){return new e(t).cbrt()},t.prototype.ceil=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.ceil(this.get(t,e)));return this},t.ceil=function(t){return new e(t).ceil()},t.prototype.clz32=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.clz32(this.get(t,e)));return this},t.clz32=function(t){return new e(t).clz32()},t.prototype.cos=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cos(this.get(t,e)));return this},t.cos=function(t){return new e(t).cos()},t.prototype.cosh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.cosh(this.get(t,e)));return this},t.cosh=function(t){return new e(t).cosh()},t.prototype.exp=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.exp(this.get(t,e)));return this},t.exp=function(t){return new e(t).exp()},t.prototype.expm1=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.expm1(this.get(t,e)));return this},t.expm1=function(t){return new e(t).expm1()},t.prototype.floor=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.floor(this.get(t,e)));return this},t.floor=function(t){return new e(t).floor()},t.prototype.fround=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.fround(this.get(t,e)));return this},t.fround=function(t){return new e(t).fround()},t.prototype.log=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log(this.get(t,e)));return this},t.log=function(t){return new e(t).log()},t.prototype.log1p=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log1p(this.get(t,e)));return this},t.log1p=function(t){return new e(t).log1p()},t.prototype.log10=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log10(this.get(t,e)));return this},t.log10=function(t){return new e(t).log10()},t.prototype.log2=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.log2(this.get(t,e)));return this},t.log2=function(t){return new e(t).log2()},t.prototype.round=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.round(this.get(t,e)));return this},t.round=function(t){return new e(t).round()},t.prototype.sign=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sign(this.get(t,e)));return this},t.sign=function(t){return new e(t).sign()},t.prototype.sin=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sin(this.get(t,e)));return this},t.sin=function(t){return new e(t).sin()},t.prototype.sinh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sinh(this.get(t,e)));return this},t.sinh=function(t){return new e(t).sinh()},t.prototype.sqrt=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.sqrt(this.get(t,e)));return this},t.sqrt=function(t){return new e(t).sqrt()},t.prototype.tan=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tan(this.get(t,e)));return this},t.tan=function(t){return new e(t).tan()},t.prototype.tanh=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.tanh(this.get(t,e)));return this},t.tanh=function(t){return new e(t).tanh()},t.prototype.trunc=function(){for(let t=0;t<this.rows;t++)for(let e=0;e<this.columns;e++)this.set(t,e,Math.trunc(this.get(t,e)));return this},t.trunc=function(t){return new e(t).trunc()},t.pow=function(t,r){return new e(t).pow(r)},t.prototype.pow=function(t){return"number"==typeof t?this.powS(t):this.powM(t)},t.prototype.powS=function(t){for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t));return this},t.prototype.powM=function(t){if(t=e.checkMatrix(t),this.rows!==t.rows||this.columns!==t.columns)throw new RangeError("Matrices dimensions must be equal");for(let e=0;e<this.rows;e++)for(let r=0;r<this.columns;r++)this.set(e,r,Math.pow(this.get(e,r),t.get(e,r)));return this}}(f,p)},3018:(t,e,r)=>{"use strict";function i(t,e,r){let i=r?t.rows:t.rows-1;if(e<0||e>i)throw new RangeError("Row index out of range")}function n(t,e,r){let i=r?t.columns:t.columns-1;if(e<0||e>i)throw new RangeError("Column index out of range")}function s(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.columns)throw new RangeError("vector size must be the same as the number of columns");return e}function o(t,e){if(e.to1DArray&&(e=e.to1DArray()),e.length!==t.rows)throw new RangeError("vector size must be the same as the number of rows");return e}function a(t,e,r){return{row:h(t,e),column:l(t,r)}}function h(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for row indices");if(e.some((e=>e<0||e>=t.rows)))throw new RangeError("row indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function l(t,e){if("object"!=typeof e)throw new TypeError("unexpected type for column indices");if(e.some((e=>e<0||e>=t.columns)))throw new RangeError("column indices are out of range");return Array.isArray(e)||(e=Array.from(e)),e}function u(t,e,r,i,n){if(5!==arguments.length)throw new RangeError("expected 4 arguments");if(f("startRow",e),f("endRow",r),f("startColumn",i),f("endColumn",n),e>r||i>n||e<0||e>=t.rows||r<0||r>=t.rows||i<0||i>=t.columns||n<0||n>=t.columns)throw new RangeError("Submatrix indices are out of range")}function c(t,e=0){let r=[];for(let i=0;i<t;i++)r.push(e);return r}function f(t,e){if("number"!=typeof e)throw new TypeError(`${t} must be a number`)}function d(t){if(t.isEmpty())throw new Error("Empty matrix has no elements to index")}r.d(e,{zb:()=>i,bp:()=>n,on:()=>s,Um:()=>o,N2:()=>a,ZR:()=>h,g:()=>l,J5:()=>u,B4:()=>c,cT:()=>d})},4920:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(1883);class n extends i.X{constructor(t,e,r){super(),this.matrix=t,this.rows=e,this.columns=r}}},5922:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(4920);class n extends i.Z{constructor(t){super(t,t.columns,t.rows)}set(t,e,r){return this.matrix.set(e,t,r),this}get(t,e){return this.matrix.get(e,t)}}},1548:(t,e,r)=>{"use strict";r.d(e,{Z:()=>n});var i=r(1883);class n extends i.X{constructor(t){super(),this.data=t,this.rows=t.length,this.columns=t[0].length}set(t,e,r){return this.data[t][e]=r,this}get(t,e){return this.data[t][e]}}},2664:t=>{t.exports=function(t,e){t=t||0;for(var r=new Array(t),i=0;i<t;i++)r[i]=e;return r}},995:t=>{t.exports=function(t){return 0===t?1:(t--,t|=t>>1,t|=t>>2,t|=t>>4,t|=t>>8,1+(t|=t>>16))}},6563:(t,e)=>{"use strict";function r(t){if("number"!=typeof t)throw new TypeError("Expected a number")}e.j=(t,e)=>(r(t),r(e),Number.isNaN(t)?-1:Number.isNaN(e)?1:t-e)},7418:t=>{"use strict";var e=Object.getOwnPropertySymbols,r=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function n(t){if(null==t)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(t)}t.exports=function(){try{if(!Object.assign)return!1;var t=new String("abc");if(t[5]="de","5"===Object.getOwnPropertyNames(t)[0])return!1;for(var e={},r=0;r<10;r++)e["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(e).map((function(t){return e[t]})).join(""))return!1;var i={};return"abcdefghijklmnopqrst".split("").forEach((function(t){i[t]=t})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},i)).join("")}catch(t){return!1}}()?Object.assign:function(t,s){for(var o,a,h=n(t),l=1;l<arguments.length;l++){for(var u in o=Object(arguments[l]))r.call(o,u)&&(h[u]=o[u]);if(e){a=e(o);for(var c=0;c<a.length;c++)i.call(o,a[c])&&(h[a[c]]=o[a[c]])}}return h}},2408:(t,e,r)=>{"use strict";var i=r(7418),n=60103,s=60106;e.Fragment=60107,e.StrictMode=60108,e.Profiler=60114;var o=60109,a=60110,h=60112;e.Suspense=60113;var l=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var c=Symbol.for;n=c("react.element"),s=c("react.portal"),e.Fragment=c("react.fragment"),e.StrictMode=c("react.strict_mode"),e.Profiler=c("react.profiler"),o=c("react.provider"),a=c("react.context"),h=c("react.forward_ref"),e.Suspense=c("react.suspense"),l=c("react.memo"),u=c("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function d(t){for(var e="https://reactjs.org/docs/error-decoder.html?invariant="+t,r=1;r<arguments.length;r++)e+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+t+"; visit "+e+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},m={};function g(t,e,r){this.props=t,this.context=e,this.refs=m,this.updater=r||p}function w(){}function b(t,e,r){this.props=t,this.context=e,this.refs=m,this.updater=r||p}g.prototype.isReactComponent={},g.prototype.setState=function(t,e){if("object"!=typeof t&&"function"!=typeof t&&null!=t)throw Error(d(85));this.updater.enqueueSetState(this,t,e,"setState")},g.prototype.forceUpdate=function(t){this.updater.enqueueForceUpdate(this,t,"forceUpdate")},w.prototype=g.prototype;var y=b.prototype=new w;y.constructor=b,i(y,g.prototype),y.isPureReactComponent=!0;var _={current:null},v=Object.prototype.hasOwnProperty,x={key:!0,ref:!0,__self:!0,__source:!0};function k(t,e,r){var i,s={},o=null,a=null;if(null!=e)for(i in void 0!==e.ref&&(a=e.ref),void 0!==e.key&&(o=""+e.key),e)v.call(e,i)&&!x.hasOwnProperty(i)&&(s[i]=e[i]);var h=arguments.length-2;if(1===h)s.children=r;else if(1<h){for(var l=Array(h),u=0;u<h;u++)l[u]=arguments[u+2];s.children=l}if(t&&t.defaultProps)for(i in h=t.defaultProps)void 0===s[i]&&(s[i]=h[i]);return{$$typeof:n,type:t,key:o,ref:a,props:s,_owner:_.current}}function A(t){return"object"==typeof t&&null!==t&&t.$$typeof===n}var M=/\/+/g;function E(t,e){return"object"==typeof t&&null!==t&&null!=t.key?function(t){var e={"=":"=0",":":"=2"};return"$"+t.replace(/[=:]/g,(function(t){return e[t]}))}(""+t.key):e.toString(36)}function S(t,e,r,i,o){var a=typeof t;"undefined"!==a&&"boolean"!==a||(t=null);var h=!1;if(null===t)h=!0;else switch(a){case"string":case"number":h=!0;break;case"object":switch(t.$$typeof){case n:case s:h=!0}}if(h)return o=o(h=t),t=""===i?"."+E(h,0):i,Array.isArray(o)?(r="",null!=t&&(r=t.replace(M,"$&/")+"/"),S(o,e,r,"",(function(t){return t}))):null!=o&&(A(o)&&(o=function(t,e){return{$$typeof:n,type:t.type,key:e,ref:t.ref,props:t.props,_owner:t._owner}}(o,r+(!o.key||h&&h.key===o.key?"":(""+o.key).replace(M,"$&/")+"/")+t)),e.push(o)),1;if(h=0,i=""===i?".":i+":",Array.isArray(t))for(var l=0;l<t.length;l++){var u=i+E(a=t[l],l);h+=S(a,e,r,u,o)}else if(u=function(t){return null===t||"object"!=typeof t?null:"function"==typeof(t=f&&t[f]||t["@@iterator"])?t:null}(t),"function"==typeof u)for(t=u.call(t),l=0;!(a=t.next()).done;)h+=S(a=a.value,e,r,u=i+E(a,l++),o);else if("object"===a)throw e=""+t,Error(d(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e));return h}function C(t,e,r){if(null==t)return t;var i=[],n=0;return S(t,i,"","",(function(t){return e.call(r,t,n++)})),i}function I(t){if(-1===t._status){var e=t._result;e=e(),t._status=0,t._result=e,e.then((function(e){0===t._status&&(e=e.default,t._status=1,t._result=e)}),(function(e){0===t._status&&(t._status=2,t._result=e)}))}if(1===t._status)return t._result;throw t._result}var D={current:null};function P(){var t=D.current;if(null===t)throw Error(d(321));return t}var B={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:_,IsSomeRendererActing:{current:!1},assign:i};e.Children={map:C,forEach:function(t,e,r){C(t,(function(){e.apply(this,arguments)}),r)},count:function(t){var e=0;return C(t,(function(){e++})),e},toArray:function(t){return C(t,(function(t){return t}))||[]},only:function(t){if(!A(t))throw Error(d(143));return t}},e.Component=g,e.PureComponent=b,e.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=B,e.cloneElement=function(t,e,r){if(null==t)throw Error(d(267,t));var s=i({},t.props),o=t.key,a=t.ref,h=t._owner;if(null!=e){if(void 0!==e.ref&&(a=e.ref,h=_.current),void 0!==e.key&&(o=""+e.key),t.type&&t.type.defaultProps)var l=t.type.defaultProps;for(u in e)v.call(e,u)&&!x.hasOwnProperty(u)&&(s[u]=void 0===e[u]&&void 0!==l?l[u]:e[u])}var u=arguments.length-2;if(1===u)s.children=r;else if(1<u){l=Array(u);for(var c=0;c<u;c++)l[c]=arguments[c+2];s.children=l}return{$$typeof:n,type:t.type,key:o,ref:a,props:s,_owner:h}},e.createContext=function(t,e){return void 0===e&&(e=null),(t={$$typeof:a,_calculateChangedBits:e,_currentValue:t,_currentValue2:t,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:o,_context:t},t.Consumer=t},e.createElement=k,e.createFactory=function(t){var e=k.bind(null,t);return e.type=t,e},e.createRef=function(){return{current:null}},e.forwardRef=function(t){return{$$typeof:h,render:t}},e.isValidElement=A,e.lazy=function(t){return{$$typeof:u,_payload:{_status:-1,_result:t},_init:I}},e.memo=function(t,e){return{$$typeof:l,type:t,compare:void 0===e?null:e}},e.useCallback=function(t,e){return P().useCallback(t,e)},e.useContext=function(t,e){return P().useContext(t,e)},e.useDebugValue=function(){},e.useEffect=function(t,e){return P().useEffect(t,e)},e.useImperativeHandle=function(t,e,r){return P().useImperativeHandle(t,e,r)},e.useLayoutEffect=function(t,e){return P().useLayoutEffect(t,e)},e.useMemo=function(t,e){return P().useMemo(t,e)},e.useReducer=function(t,e,r){return P().useReducer(t,e,r)},e.useRef=function(t){return P().useRef(t)},e.useState=function(t){return P().useState(t)},e.version="17.0.2"},7294:(t,e,r)=>{"use strict";t.exports=r(2408)},146:(t,e,r)=>{"use strict";var i=r(8005),n=r(6740),s=r(5442),o=r(7972);function a(t,e,r,i){return function(r,n,s){var o=t(t(e(n[1],s[0]),e(-s[1],n[0])),t(e(r[1],n[0]),e(-n[1],r[0]))),a=t(e(r[1],s[0]),e(-s[1],r[0])),h=i(o,a);return h[h.length-1]}}function h(t,e,r,i){return function(n,s,o,a){var h=t(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2])))),l=t(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2])))),u=i(h,l);return u[u.length-1]}}function l(t,e,r,i){return function(n,s,o,a,h){var l=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),s[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),-o[3]),r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),h[2]))),a[3]))),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),-h[3]),t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-a[2]),r(t(e(s[1],a[0]),e(-a[1],s[0])),h[2]))),n[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-a[2]),r(t(e(n[1],a[0]),e(-a[1],n[0])),h[2]))),-s[3])))),t(t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),h[2]))),a[3]),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2]))),-h[3]),r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),s[2]),t(r(t(e(s[1],a[0]),e(-a[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),a[2]))),n[3]))),t(r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),-s[3]),t(r(t(r(t(e(s[1],a[0]),e(-a[1],s[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),a[2]))),o[3]),r(t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2]))),-a[3]))))),u=t(t(t(r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),o[2]),t(r(t(e(o[1],h[0]),e(-h[1],o[0])),-a[2]),r(t(e(o[1],a[0]),e(-a[1],o[0])),h[2]))),n[3]),r(t(r(t(e(a[1],h[0]),e(-h[1],a[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-a[2]),r(t(e(n[1],a[0]),e(-a[1],n[0])),h[2]))),-o[3])),t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),h[2]))),a[3]),r(t(r(t(e(o[1],a[0]),e(-a[1],o[0])),n[2]),t(r(t(e(n[1],a[0]),e(-a[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),a[2]))),-h[3]))),t(t(r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),s[2]),t(r(t(e(s[1],h[0]),e(-h[1],s[0])),-o[2]),r(t(e(s[1],o[0]),e(-o[1],s[0])),h[2]))),n[3]),r(t(r(t(e(o[1],h[0]),e(-h[1],o[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-o[2]),r(t(e(n[1],o[0]),e(-o[1],n[0])),h[2]))),-s[3])),t(r(t(r(t(e(s[1],h[0]),e(-h[1],s[0])),n[2]),t(r(t(e(n[1],h[0]),e(-h[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),h[2]))),o[3]),r(t(r(t(e(s[1],o[0]),e(-o[1],s[0])),n[2]),t(r(t(e(n[1],o[0]),e(-o[1],n[0])),-s[2]),r(t(e(n[1],s[0]),e(-s[1],n[0])),o[2]))),-h[3])))),c=i(l,u);return c[c.length-1]}}function u(t){return(3===t?a:4===t?h:l)(n,i,s,o)}var c=u(3),f=u(4),d=[function(){return 0},function(){return 0},function(t,e){return e[0]-t[0]},function(t,e,r){var i,n=(t[1]-r[1])*(e[0]-r[0]),s=(t[0]-r[0])*(e[1]-r[1]),o=n-s;if(n>0){if(s<=0)return o;i=n+s}else{if(!(n<0))return o;if(s>=0)return o;i=-(n+s)}var a=33306690738754716e-32*i;return o>=a||o<=-a?o:c(t,e,r)},function(t,e,r,i){var n=t[0]-i[0],s=e[0]-i[0],o=r[0]-i[0],a=t[1]-i[1],h=e[1]-i[1],l=r[1]-i[1],u=t[2]-i[2],c=e[2]-i[2],d=r[2]-i[2],p=s*l,m=o*h,g=o*a,w=n*l,b=n*h,y=s*a,_=u*(p-m)+c*(g-w)+d*(b-y),v=7771561172376103e-31*((Math.abs(p)+Math.abs(m))*Math.abs(u)+(Math.abs(g)+Math.abs(w))*Math.abs(c)+(Math.abs(b)+Math.abs(y))*Math.abs(d));return _>v||-_>v?_:f(t,e,r,i)}];function p(t){var e=d[t.length];return e||(e=d[t.length]=u(t.length)),e.apply(void 0,t)}function m(t,e,r,i,n,s,o){return function(e,r,a,h,l){switch(arguments.length){case 0:case 1:return 0;case 2:return i(e,r);case 3:return n(e,r,a);case 4:return s(e,r,a,h);case 5:return o(e,r,a,h,l)}for(var u=new Array(arguments.length),c=0;c<arguments.length;++c)u[c]=arguments[c];return t(u)}}!function(){for(;d.length<=5;)d.push(u(d.length));t.exports=m.apply(void 0,[p].concat(d));for(var e=0;e<=5;++e)t.exports[e]=d[e]}()},4707:(t,e,r)=>{t.exports=function(t,e){for(var r=e[0],n=e[1],s=t.length,o=1,a=s,h=0,l=s-1;h<a;l=h++){var u=t[h],c=t[l],f=u[1],d=c[1];if(d<f){if(d<n&&n<f){if(0===(g=i(u,c,e)))return 0;o^=0<g|0}else if(n===f){var p=(m=t[(h+1)%s])[1];if(f<p){if(0===(g=i(u,c,e)))return 0;o^=0<g|0}}}else if(f<d){if(f<n&&n<d){if(0===(g=i(u,c,e)))return 0;o^=g<0|0}else if(n===f){var m=t[(h+1)%s];if((p=m[1])<f){var g;if(0===(g=i(u,c,e)))return 0;o^=g<0|0}}}else if(n===f){var w=Math.min(u[0],c[0]),b=Math.max(u[0],c[0]);if(0===h){for(;l>0;){var y=(l+s-1)%s;if((x=t[y])[1]!==n)break;var _=x[0];w=Math.min(w,_),b=Math.max(b,_),l=y}if(0===l)return w<=r&&r<=b?0:1;a=l+1}for(var v=t[(l+s-1)%s][1];h+1<a;){var x;if((x=t[h+1])[1]!==n)break;_=x[0],w=Math.min(w,_),b=Math.max(b,_),h+=1}if(w<=r&&r<=b)return 0;var k=t[(h+1)%s][1];r<w&&v<n!=k<n&&(o^=1)}}return 2*o-1};var i=r(146)},5442:(t,e,r)=>{"use strict";var i=r(8005),n=r(6359);t.exports=function(t,e){var r=t.length;if(1===r){var s=i(t[0],e);return s[0]?s:[s[1]]}var o=new Array(2*r),a=[.1,.1],h=[.1,.1],l=0;i(t[0],e,a),a[0]&&(o[l++]=a[0]);for(var u=1;u<r;++u){i(t[u],e,h);var c=a[1];n(c,h[0],a),a[0]&&(o[l++]=a[0]);var f=h[1],d=a[1],p=f+d,m=d-(p-f);a[1]=p,m&&(o[l++]=m)}return a[1]&&(o[l++]=a[1]),0===l&&(o[l++]=0),o.length=l,o}},7972:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,i=0|e.length;if(1===r&&1===i)return function(t,e){var r=t+e,i=r-t,n=t-(r-i)+(e-i);return n?[n,r]:[r]}(t[0],-e[0]);var n,s,o=new Array(r+i),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=-e[l],p=u(d);f<p?(s=c,(h+=1)<r&&(f=u(c=t[h]))):(s=d,(l+=1)<i&&(p=u(d=-e[l]))),h<r&&f<p||l>=i?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=-e[l])));for(var m,g,w=n+s,b=w-n,y=s-b,_=y,v=w;h<r&&l<i;)f<p?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=-e[l]))),(y=(s=_)-(b=(w=n+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m;for(;h<r;)(y=(s=_)-(b=(w=(n=c)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(h+=1)<r&&(c=t[h]);for(;l<i;)(y=(s=_)-(b=(w=(n=d)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(l+=1)<i&&(d=-e[l]);return _&&(o[a++]=_),v&&(o[a++]=v),a||(o[a++]=0),o.length=a,o}},6740:t=>{"use strict";t.exports=function(t,e){var r=0|t.length,i=0|e.length;if(1===r&&1===i)return function(t,e){var r=t+e,i=r-t,n=t-(r-i)+(e-i);return n?[n,r]:[r]}(t[0],e[0]);var n,s,o=new Array(r+i),a=0,h=0,l=0,u=Math.abs,c=t[h],f=u(c),d=e[l],p=u(d);f<p?(s=c,(h+=1)<r&&(f=u(c=t[h]))):(s=d,(l+=1)<i&&(p=u(d=e[l]))),h<r&&f<p||l>=i?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=e[l])));for(var m,g,w=n+s,b=w-n,y=s-b,_=y,v=w;h<r&&l<i;)f<p?(n=c,(h+=1)<r&&(f=u(c=t[h]))):(n=d,(l+=1)<i&&(p=u(d=e[l]))),(y=(s=_)-(b=(w=n+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m;for(;h<r;)(y=(s=_)-(b=(w=(n=c)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(h+=1)<r&&(c=t[h]);for(;l<i;)(y=(s=_)-(b=(w=(n=d)+s)-n))&&(o[a++]=y),_=v-((m=v+w)-(g=m-v))+(w-g),v=m,(l+=1)<i&&(d=e[l]);return _&&(o[a++]=_),v&&(o[a++]=v),a||(o[a++]=0),o.length=a,o}},3379:t=>{"use strict";var e=[];function r(t){for(var r=-1,i=0;i<e.length;i++)if(e[i].identifier===t){r=i;break}return r}function i(t,i){for(var s={},o=[],a=0;a<t.length;a++){var h=t[a],l=i.base?h[0]+i.base:h[0],u=s[l]||0,c="".concat(l," ").concat(u);s[l]=u+1;var f=r(c),d={css:h[1],media:h[2],sourceMap:h[3],supports:h[4],layer:h[5]};if(-1!==f)e[f].references++,e[f].updater(d);else{var p=n(d,i);i.byIndex=a,e.splice(a,0,{identifier:c,updater:p,references:1})}o.push(c)}return o}function n(t,e){var r=e.domAPI(e);return r.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;r.update(t=e)}else r.remove()}}t.exports=function(t,n){var s=i(t=t||[],n=n||{});return function(t){t=t||[];for(var o=0;o<s.length;o++){var a=r(s[o]);e[a].references--}for(var h=i(t,n),l=0;l<s.length;l++){var u=r(s[l]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}s=h}}},569:t=>{"use strict";var e={};t.exports=function(t,r){var i=function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(t){r=null}e[t]=r}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(r)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},3565:(t,e,r)=>{"use strict";t.exports=function(t){var e=r.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(r){!function(t,e,r){var i="";r.supports&&(i+="@supports (".concat(r.supports,") {")),r.media&&(i+="@media ".concat(r.media," {"));var n=void 0!==r.layer;n&&(i+="@layer".concat(r.layer.length>0?" ".concat(r.layer):""," {")),i+=r.css,n&&(i+="}"),r.media&&(i+="}"),r.supports&&(i+="}");var s=r.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),e.styleTagTransform(i,t,e.options)}(e,t,r)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},9798:function(){"use strict";!function(t){if(t.TextEncoder&&t.TextDecoder)return!1;function e(t="utf-8"){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextEncoder': The encoding label provided ('${t}') is invalid.`)}function r(t="utf-8",e={fatal:!1}){if("utf-8"!==t)throw new RangeError(`Failed to construct 'TextDecoder': The encoding label provided ('${t}') is invalid.`);if(e.fatal)throw new Error("Failed to construct 'TextDecoder': the 'fatal' option is unsupported.")}Object.defineProperty(e.prototype,"encoding",{value:"utf-8"}),e.prototype.encode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to encode: the 'stream' option is unsupported.");let r=0;const i=t.length;let n=0,s=Math.max(32,i+(i>>1)+7),o=new Uint8Array(s>>3<<3);for(;r<i;){let e=t.charCodeAt(r++);if(e>=55296&&e<=56319){if(r<i){const i=t.charCodeAt(r);56320==(64512&i)&&(++r,e=((1023&e)<<10)+(1023&i)+65536)}if(e>=55296&&e<=56319)continue}if(n+4>o.length){s+=8,s*=1+r/t.length*2,s=s>>3<<3;const e=new Uint8Array(s);e.set(o),o=e}if(0!=(4294967168&e)){if(0==(4294965248&e))o[n++]=e>>6&31|192;else if(0==(4294901760&e))o[n++]=e>>12&15|224,o[n++]=e>>6&63|128;else{if(0!=(4292870144&e))continue;o[n++]=e>>18&7|240,o[n++]=e>>12&63|128,o[n++]=e>>6&63|128}o[n++]=63&e|128}else o[n++]=e}return o.slice(0,n)},Object.defineProperty(r.prototype,"encoding",{value:"utf-8"}),Object.defineProperty(r.prototype,"fatal",{value:!1}),Object.defineProperty(r.prototype,"ignoreBOM",{value:!1}),r.prototype.decode=function(t,e={stream:!1}){if(e.stream)throw new Error("Failed to decode: the 'stream' option is unsupported.");const r=new Uint8Array(t);let i=0;const n=r.length,s=[];for(;i<n;){const t=r[i++];if(0===t)break;if(0==(128&t))s.push(t);else if(192==(224&t)){const e=63&r[i++];s.push((31&t)<<6|e)}else if(224==(240&t)){const e=63&r[i++],n=63&r[i++];s.push((31&t)<<12|e<<6|n)}else if(240==(248&t)){let e=(7&t)<<18|(63&r[i++])<<12|(63&r[i++])<<6|63&r[i++];e>65535&&(e-=65536,s.push(e>>>10&1023|55296),e=56320|1023&e),s.push(e)}}return String.fromCharCode.apply(null,s)},t.TextEncoder=e,t.TextDecoder=r}("undefined"!=typeof window?window:"undefined"!=typeof self?self:this)},8005:t=>{"use strict";t.exports=function(t,r,i){var n=t*r,s=e*t,o=s-(s-t),a=t-o,h=e*r,l=h-(h-r),u=r-l,c=a*u-(n-o*l-a*l-o*u);return i?(i[0]=c,i[1]=n,i):[c,n]};var e=+(Math.pow(2,27)+1)},6359:t=>{"use strict";t.exports=function(t,e,r){var i=t+e,n=i-t,s=e-n,o=t-(i-n);return r?(r[0]=o+s,r[1]=i,r):[o+s,i]}},7458:function(t,e,r){var i;t=r.nmd(t),function(n){var s=(t&&t.exports,"object"==typeof r.g&&r.g);s.global!==s&&s.window;var o,a,h,l=String.fromCharCode;function u(t){for(var e,r,i=[],n=0,s=t.length;n<s;)(e=t.charCodeAt(n++))>=55296&&e<=56319&&n<s?56320==(64512&(r=t.charCodeAt(n++)))?i.push(((1023&e)<<10)+(1023&r)+65536):(i.push(e),n--):i.push(e);return i}function c(t){if(t>=55296&&t<=57343)throw Error("Lone surrogate U+"+t.toString(16).toUpperCase()+" is not a scalar value")}function f(t,e){return l(t>>e&63|128)}function d(t){if(0==(4294967168&t))return l(t);var e="";return 0==(4294965248&t)?e=l(t>>6&31|192):0==(4294901760&t)?(c(t),e=l(t>>12&15|224),e+=f(t,6)):0==(4292870144&t)&&(e=l(t>>18&7|240),e+=f(t,12),e+=f(t,6)),e+l(63&t|128)}function p(){if(h>=a)throw Error("Invalid byte index");var t=255&o[h];if(h++,128==(192&t))return 63&t;throw Error("Invalid continuation byte")}function m(){var t,e;if(h>a)throw Error("Invalid byte index");if(h==a)return!1;if(t=255&o[h],h++,0==(128&t))return t;if(192==(224&t)){if((e=(31&t)<<6|p())>=128)return e;throw Error("Invalid continuation byte")}if(224==(240&t)){if((e=(15&t)<<12|p()<<6|p())>=2048)return c(e),e;throw Error("Invalid continuation byte")}if(240==(248&t)&&(e=(7&t)<<18|p()<<12|p()<<6|p())>=65536&&e<=1114111)return e;throw Error("Invalid UTF-8 detected")}var g={version:"2.1.2",encode:function(t){for(var e=u(t),r=e.length,i=-1,n="";++i<r;)n+=d(e[i]);return n},decode:function(t){o=u(t),a=o.length,h=0;for(var e,r=[];!1!==(e=m());)r.push(e);return function(t){for(var e,r=t.length,i=-1,n="";++i<r;)(e=t[i])>65535&&(n+=l((e-=65536)>>>10&1023|55296),e=56320|1023&e),n+=l(e);return n}(r)}};void 0===(i=function(){return g}.call(e,r,e,t))||(t.exports=i)}()},6732:(t,e,r)=>{"use strict";var i=r(7963),n=navigator.hardwareConcurrency||1;function s(t,e){if("string"!=typeof t&&"function"!=typeof t)throw new TypeError("func argument must be a function");if(void 0===e&&(e={}),"object"!=typeof e||null===e)throw new TypeError("options argument must be an object");this._workerCode=t.toString(),void 0===e.maxWorkers||"auto"===e.maxWorkers?this._numWorkers=Math.min(n-1,1):e.maxWorkers>0?this._numWorkers=Math.min(e.maxWorkers,n):this._numWorkers=n,this._workers=new Map,this._timeout=e.timeout||0,this._terminateOnError=!!e.terminateOnError;var r=e.deps;"string"==typeof r&&(r=[r]),Array.isArray(r)||(r=void 0),this._id=0,this._terminated=!1,this._working=0,this._waiting=[],this._init(r)}Function.prototype,s.prototype._init=function(t){for(var e=i.newWorkerURL(this._workerCode,t),r=0;r<this._numWorkers;r++){var n=new Worker(e);n.onmessage=this._onmessage.bind(this,n),n.onerror=this._onerror.bind(this,n),n.running=!1,n.id=r,this._workers.set(n,null)}URL.revokeObjectURL(e)},s.prototype._onerror=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[1](e.message),this._workers.set(t,null),this._terminateOnError?this.terminate():this._exec()}},s.prototype._onmessage=function(t,e){if(!this._terminated){this._working--,t.running=!1;var r=this._workers.get(t);r&&r[0](e.data.data),this._workers.set(t,null),this._exec()}},s.prototype._exec=function(){for(var t of this._workers.keys()){if(this._working===this._numWorkers||0===this._waiting.length)return;if(!t.running)for(var e=0;e<this._waiting.length;e++){var r=this._waiting[e];if("number"!=typeof r[4]||r[4]===t.id){this._waiting.splice(e,1),t.postMessage({action:"exec",event:r[0],args:r[1]},r[2]),t.running=!0,t.time=Date.now(),this._workers.set(t,r[3]),this._working++;break}}}},s.prototype.terminate=function(){if(!this._terminated){for(var t of this._workers)t[0].terminate(),t[1]&&t[1][1](new Error("Terminated"));this._workers.clear(),this._waiting=[],this._working=0,this._terminated=!0}},s.prototype.postAll=function(t,e){if(this._terminated)throw new Error("Cannot post (terminated)");var r=[];for(var i of this._workers.keys())r.push(this.post(t,e,[],i.id));return Promise.all(r)},s.prototype.post=function(t,e,r,i){void 0===e&&(e=[]),void 0===r&&(r=[]),Array.isArray(e)||(e=[e]),Array.isArray(r)||(r=[r]);var n=this;return new Promise((function(s,o){if(n._terminated)throw new Error("Cannot post (terminated)");n._waiting.push([t,e,r,[s,o],i]),n._exec()}))},t.exports=s},7963:(t,e)=>{"use strict";var r=function(){function t(){this._listeners={}}self.window=self,t.prototype.on=function(t,e){if(this._listeners[t])throw new RangeError("there is already a listener for "+t);if("function"!=typeof e)throw new TypeError("callback argument must be a function");this._listeners[t]=e},t.prototype._send=function(t,e,r){void 0===r?r=[]:Array.isArray(r)||(r=[r]),self.postMessage({id:t,data:e},r)},t.prototype._trigger=function(t,e){if(!this._listeners[t])throw new Error("event "+t+" is not defined");this._listeners[t].apply(null,e)};var e=new t;self.onmessage=function(t){switch(t.data.action){case"exec":t.data.args.unshift((function(r,i){e._send(t.data.id,r,i)})),e._trigger(t.data.event,t.data.args);break;case"ping":e._send(t.data.id,"pong");break;default:throw new Error("unexpected action: "+t.data.action)}}}.toString().split('"CODE";');e.newWorkerURL=function(t,e){var i=new Blob(["(",r[0],"importScripts.apply(self, "+JSON.stringify(e)+");\n","(",t,")();",r[1],")();"],{type:"application/javascript"});return URL.createObjectURL(i)}},2898:t=>{"use strict";t.exports={version:"1.0.1"}}},__webpack_module_cache__={};function __webpack_require__(t){var e=__webpack_module_cache__[t];if(void 0!==e)return e.exports;var r=__webpack_module_cache__[t]={id:t,loaded:!1,exports:{}};return __webpack_modules__[t].call(r.exports,r,r.exports,__webpack_require__),r.loaded=!0,r.exports}__webpack_require__.m=__webpack_modules__,__webpack_require__.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return __webpack_require__.d(e,{a:e}),e},__webpack_require__.d=(t,e)=>{for(var r in e)__webpack_require__.o(e,r)&&!__webpack_require__.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},__webpack_require__.u=t=>t+".index.js",__webpack_require__.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),__webpack_require__.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),__webpack_require__.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},__webpack_require__.nmd=t=>(t.paths=[],t.children||(t.children=[]),t),(()=>{var t;__webpack_require__.g.importScripts&&(t=__webpack_require__.g.location+"");var e=__webpack_require__.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),__webpack_require__.p=t})(),__webpack_require__.b=document.baseURI||self.location.href;var __webpack_exports__={};return(()=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{OperatorCanvas:()=>Tl,OperatorDebug:()=>Kl,ReactResponsiveRgbStream:()=>l,ReactRgbStream:()=>o,RembrainImage:()=>u});var t={};__webpack_require__.r(t),__webpack_require__.d(t,{CMYK:()=>un,GREY:()=>on,HSL:()=>hn,HSV:()=>ln,RGB:()=>an});var e={};__webpack_require__.r(e),__webpack_require__.d(e,{tagsById:()=>vn,tagsByName:()=>xn});var r={};__webpack_require__.r(r),__webpack_require__.d(r,{tagsById:()=>kn,tagsByName:()=>An});var i={};__webpack_require__.r(i),__webpack_require__.d(i,{tagsById:()=>Mn,tagsByName:()=>En});var n=__webpack_require__(7294);const s=t=>e=>{var{isOn:r=!0,token:i,websocketURL:s,robotName:o,exchange:a="rgbjpeg",handleError:h=(t=>{console.log({error:t})})}=e,l=function(t,e){var r={};for(var i in t)Object.prototype.hasOwnProperty.call(t,i)&&e.indexOf(i)<0&&(r[i]=t[i]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var n=0;for(i=Object.getOwnPropertySymbols(t);n<i.length;n++)e.indexOf(i[n])<0&&Object.prototype.propertyIsEnumerable.call(t,i[n])&&(r[i[n]]=t[i[n]])}return r}(e,["isOn","token","websocketURL","robotName","exchange","handleError"]);const[u,c]=(0,n.useState)(new Image),[f,d]=(0,n.useState)(null);return(0,n.useEffect)((()=>{let t;return t=new Worker(new URL(__webpack_require__.p+__webpack_require__.u(714),__webpack_require__.b)),t.addEventListener("message",(({data:t})=>{const{type:e,payload:r}=t;switch(console.log("it's updated"),e){case"image":const e=new Image;return void(r?(e.src=r,e.onload=()=>{c(e)}):c(e));case"error":return void h(r);default:return void console.log(t)}})),d(t),()=>{t.postMessage({type:"close"}),t.terminate()}}),[]),(0,n.useEffect)((()=>{if(f)if(r){let t={command:"pull",exchange:a,accessToken:i,robot_name:o};f.postMessage({type:"open",payload:JSON.stringify(t),url:s})}else f.postMessage({type:"close"})}),[o,a,i,r,f]),n.createElement(t,Object.assign({image:u},l))},o=s((({posX:t=0,posY:e=0,width:r,height:i,placeholderText:s="No Image",image:o=new Image})=>{const a=(0,n.useRef)(null);return(0,n.useEffect)((()=>{(()=>{const n=a.current;if(n){const s=n.getContext("2d");s&&s.drawImage(o,t,e,r,i)}})(),o.src||(()=>{const t=a.current;if(t){const e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(s,t.width/2,t.height/2))}})()}),[o]),n.createElement("canvas",{ref:a,width:r,height:i})}));var a=__webpack_require__(6655),h=__webpack_require__.n(a);const l=s((({maxWidth:t,minWidth:e,aspectRatio:r,placeholderText:i="No Image",image:s})=>{let o;const[a,l]=(0,n.useState)(!1),u=(0,n.useRef)(null),c=()=>{const t=u.current;if(t){const e=t.getContext("2d");e&&e.drawImage(s,0,0,t.width,t.height)}},f=()=>{clearTimeout(o),l(!1),o=setTimeout((()=>{const t=u.current;t&&(h()(t),l(!0),s.src||d())}),500)},d=()=>{const t=u.current;if(t){const e=t.getContext("2d");e&&(e.clearRect(0,0,t.width,t.height),e.fillStyle="#d3d3d3",e.textAlign="center",e.font="5em Arial",e.textBaseline="middle",e.fillText(i,t.width/2,t.height/2))}};return(0,n.useEffect)((()=>{const t=u.current;return t&&(h()(t),c(),l(!0),window.addEventListener("resize",f,!1)),()=>{window.removeEventListener("resize",f,!1)}}),[]),(0,n.useEffect)((()=>{c(),s.src||d()}),[s]),n.createElement("div",{style:{aspectRatio:r.toString(),maxWidth:t,minWidth:e,padding:0,margin:0,position:"relative"}},n.createElement("canvas",{style:a?{}:{display:"none"},ref:u}))})),u=({token:t,url:e,width:r,height:i,alt:s="Image",onLoad:o=(()=>{}),onError:a=(()=>{})})=>{const[h,l]=(0,n.useState)("");return(0,n.useEffect)((()=>{e&&fetch(e,{headers:{Authorization:t}}).then((t=>{t.blob().then((t=>{const e=t,r=(window.URL||window.webkitURL).createObjectURL(e);l(r)}))})).catch(a)}),[e]),n.createElement("img",{onLoad:o,src:h&&h,id:"rembrainImage",className:"rembrain-image",width:r,height:i,alt:s||""})};class c{constructor(t,e,r,i){this.x=t,this.y=e,this.w=r,this.h=i}static fromPoints(t,e){let r={x:Math.min(t.x,e.x),y:Math.min(t.y,e.y)},i=Math.max(t.x,e.x),n=Math.max(t.y,e.y);return new c(r.x,r.y,i-r.x,n-r.y)}get TopLeft(){return{x:this.x,y:this.y}}get TopRight(){return{x:this.x+this.w,y:this.y}}get BottomLeft(){return{x:this.x,y:this.y+this.h}}get BottomRight(){return{x:this.x+this.w,y:this.y+this.h}}get Center(){return{x:this.x+.5*this.w,y:this.y+.5*this.h}}get CenterTop(){return{x:this.x+.5*this.w,y:this.y}}get CenterBottom(){return{x:this.x+.5*this.w,y:this.y+this.h}}}var f=function(t,e){return f=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r])},f(t,e)};function d(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function r(){this.constructor=t}f(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function p(t,e){var r,i,n,s,o={label:0,sent:function(){if(1&n[0])throw n[1];return n[1]},trys:[],ops:[]};return s={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(s[Symbol.iterator]=function(){return this}),s;function a(s){return function(a){return function(s){if(r)throw new TypeError("Generator is already executing.");for(;o;)try{if(r=1,i&&(n=2&s[0]?i.return:s[0]?i.throw||((n=i.return)&&n.call(i),0):i.next)&&!(n=n.call(i,s[1])).done)return n;switch(i=0,n&&(s=[2&s[0],n.value]),s[0]){case 0:case 1:n=s;break;case 4:return o.label++,{value:s[1],done:!1};case 5:o.label++,i=s[1],s=[0];continue;case 7:s=o.ops.pop(),o.trys.pop();continue;default:if(!((n=(n=o.trys).length>0&&n[n.length-1])||6!==s[0]&&2!==s[0])){o=0;continue}if(3===s[0]&&(!n||s[1]>n[0]&&s[1]<n[3])){o.label=s[1];break}if(6===s[0]&&o.label<n[1]){o.label=n[1],n=s;break}if(n&&o.label<n[2]){o.label=n[2],o.ops.push(s);break}n[2]&&o.ops.pop(),o.trys.pop();continue}s=e.call(t,o)}catch(t){s=[6,t],i=0}finally{r=n=0}if(5&s[0])throw s[1];return{value:s[0]?s[1]:void 0,done:!0}}([s,a])}}}function m(t){var e="function"==typeof Symbol&&Symbol.iterator,r=e&&t[e],i=0;if(r)return r.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function g(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var i,n,s=r.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(i=s.next()).done;)o.push(i.value)}catch(t){n={error:t}}finally{try{i&&!i.done&&(r=s.return)&&r.call(s)}finally{if(n)throw n.error}}return o}function w(t,e){for(var r=0,i=e.length,n=t.length;r<i;r++,n++)t[n]=e[r];return t}function b(t){return this instanceof b?(this.v=t,this):new b(t)}function y(t,e,r){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var i,n=r.apply(t,e||[]),s=[];return i={},o("next"),o("throw"),o("return"),i[Symbol.asyncIterator]=function(){return this},i;function o(t){n[t]&&(i[t]=function(e){return new Promise((function(r,i){s.push([t,e,r,i])>1||a(t,e)}))})}function a(t,e){try{(r=n[t](e)).value instanceof b?Promise.resolve(r.value.v).then(h,l):u(s[0][2],r)}catch(t){u(s[0][3],t)}var r}function h(t){a("next",t)}function l(t){a("throw",t)}function u(t,e){t(e),s.shift(),s.length&&a(s[0][0],s[0][1])}}function _(t){return"function"==typeof t}function v(t){var e=t((function(t){Error.call(t),t.stack=(new Error).stack}));return e.prototype=Object.create(Error.prototype),e.prototype.constructor=e,e}Object.create,Object.create;var x=v((function(t){return function(e){t(this),this.message=e?e.length+" errors occurred during unsubscription:\n"+e.map((function(t,e){return e+1+") "+t.toString()})).join("\n  "):"",this.name="UnsubscriptionError",this.errors=e}}));function k(t,e){if(t){var r=t.indexOf(e);0<=r&&t.splice(r,1)}}var A=function(){function t(t){this.initialTeardown=t,this.closed=!1,this._parentage=null,this._teardowns=null}return t.prototype.unsubscribe=function(){var t,e,r,i,n;if(!this.closed){this.closed=!0;var s=this._parentage;if(s)if(this._parentage=null,Array.isArray(s))try{for(var o=m(s),a=o.next();!a.done;a=o.next())a.value.remove(this)}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}else s.remove(this);var h=this.initialTeardown;if(_(h))try{h()}catch(t){n=t instanceof x?t.errors:[t]}var l=this._teardowns;if(l){this._teardowns=null;try{for(var u=m(l),c=u.next();!c.done;c=u.next()){var f=c.value;try{S(f)}catch(t){n=null!=n?n:[],t instanceof x?n=w(w([],g(n)),g(t.errors)):n.push(t)}}}catch(t){r={error:t}}finally{try{c&&!c.done&&(i=u.return)&&i.call(u)}finally{if(r)throw r.error}}}if(n)throw new x(n)}},t.prototype.add=function(e){var r;if(e&&e!==this)if(this.closed)S(e);else{if(e instanceof t){if(e.closed||e._hasParent(this))return;e._addParent(this)}(this._teardowns=null!==(r=this._teardowns)&&void 0!==r?r:[]).push(e)}},t.prototype._hasParent=function(t){var e=this._parentage;return e===t||Array.isArray(e)&&e.includes(t)},t.prototype._addParent=function(t){var e=this._parentage;this._parentage=Array.isArray(e)?(e.push(t),e):e?[e,t]:t},t.prototype._removeParent=function(t){var e=this._parentage;e===t?this._parentage=null:Array.isArray(e)&&k(e,t)},t.prototype.remove=function(e){var r=this._teardowns;r&&k(r,e),e instanceof t&&e._removeParent(this)},t.EMPTY=function(){var e=new t;return e.closed=!0,e}(),t}(),M=A.EMPTY;function E(t){return t instanceof A||t&&"closed"in t&&_(t.remove)&&_(t.add)&&_(t.unsubscribe)}function S(t){_(t)?t():t.unsubscribe()}var C=null,I=null,D=void 0,P=!1,B=!1,R={setTimeout:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=R.delegate;return((null==r?void 0:r.setTimeout)||setTimeout).apply(void 0,w([],g(t)))},clearTimeout:function(t){var e=R.delegate;return((null==e?void 0:e.clearTimeout)||clearTimeout)(t)},delegate:void 0};function T(t){R.setTimeout((function(){if(!C)throw t;C(t)}))}function U(){}var O=L("C",void 0,void 0);function L(t,e,r){return{kind:t,value:e,error:r}}var F=null;function N(t){if(P){var e=!F;if(e&&(F={errorThrown:!1,error:null}),t(),e){var r=F,i=r.errorThrown,n=r.error;if(F=null,i)throw n}}else t()}function z(t){P&&F&&(F.errorThrown=!0,F.error=t)}var j=function(t){function e(e){var r=t.call(this)||this;return r.isStopped=!1,e?(r.destination=e,E(e)&&e.add(r)):r.destination=G,r}return d(e,t),e.create=function(t,e,r){return new Y(t,e,r)},e.prototype.next=function(t){this.isStopped?X(function(t){return L("N",t,void 0)}(t),this):this._next(t)},e.prototype.error=function(t){this.isStopped?X(L("E",void 0,t),this):(this.isStopped=!0,this._error(t))},e.prototype.complete=function(){this.isStopped?X(O,this):(this.isStopped=!0,this._complete())},e.prototype.unsubscribe=function(){this.closed||(this.isStopped=!0,t.prototype.unsubscribe.call(this),this.destination=null)},e.prototype._next=function(t){this.destination.next(t)},e.prototype._error=function(t){try{this.destination.error(t)}finally{this.unsubscribe()}},e.prototype._complete=function(){try{this.destination.complete()}finally{this.unsubscribe()}},e}(A),Y=function(t){function e(e,r,i){var n,s=t.call(this)||this;if(_(e))n=e;else if(e){var o;n=e.next,r=e.error,i=e.complete,s&&B?(o=Object.create(e)).unsubscribe=function(){return s.unsubscribe()}:o=e,n=null==n?void 0:n.bind(o),r=null==r?void 0:r.bind(o),i=null==i?void 0:i.bind(o)}return s.destination={next:n?V(n):U,error:V(null!=r?r:q),complete:i?V(i):U},s}return d(e,t),e}(j);function V(t,e){return function(){for(var e=[],r=0;r<arguments.length;r++)e[r]=arguments[r];try{t.apply(void 0,w([],g(e)))}catch(t){P?z(t):T(t)}}}function q(t){throw t}function X(t,e){var r=I;r&&R.setTimeout((function(){return r(t,e)}))}var G={closed:!0,next:U,error:q,complete:U},$="function"==typeof Symbol&&Symbol.observable||"@@observable";function W(t){return t}function Z(t){return 0===t.length?W:1===t.length?t[0]:function(e){return t.reduce((function(t,e){return e(t)}),e)}}var H=function(){function t(t){t&&(this._subscribe=t)}return t.prototype.lift=function(e){var r=new t;return r.source=this,r.operator=e,r},t.prototype.subscribe=function(t,e,r){var i,n=this,s=(i=t)&&i instanceof j||function(t){return t&&_(t.next)&&_(t.error)&&_(t.complete)}(i)&&E(i)?t:new Y(t,e,r);return N((function(){var t=n,e=t.operator,r=t.source;s.add(e?e.call(s,r):r?n._subscribe(s):n._trySubscribe(s))})),s},t.prototype._trySubscribe=function(t){try{return this._subscribe(t)}catch(e){t.error(e)}},t.prototype.forEach=function(t,e){var r=this;return new(e=K(e))((function(e,i){var n;n=r.subscribe((function(e){try{t(e)}catch(t){i(t),null==n||n.unsubscribe()}}),i,e)}))},t.prototype._subscribe=function(t){var e;return null===(e=this.source)||void 0===e?void 0:e.subscribe(t)},t.prototype[$]=function(){return this},t.prototype.pipe=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];return Z(t)(this)},t.prototype.toPromise=function(t){var e=this;return new(t=K(t))((function(t,r){var i;e.subscribe((function(t){return i=t}),(function(t){return r(t)}),(function(){return t(i)}))}))},t.create=function(e){return new t(e)},t}();function K(t){var e;return null!==(e=null!=t?t:D)&&void 0!==e?e:Promise}var J=v((function(t){return function(){t(this),this.name="ObjectUnsubscribedError",this.message="object unsubscribed"}})),Q=function(t){function e(){var e=t.call(this)||this;return e.closed=!1,e.observers=[],e.isStopped=!1,e.hasError=!1,e.thrownError=null,e}return d(e,t),e.prototype.lift=function(t){var e=new tt(this,this);return e.operator=t,e},e.prototype._throwIfClosed=function(){if(this.closed)throw new J},e.prototype.next=function(t){var e=this;N((function(){var r,i;if(e._throwIfClosed(),!e.isStopped){var n=e.observers.slice();try{for(var s=m(n),o=s.next();!o.done;o=s.next())o.value.next(t)}catch(t){r={error:t}}finally{try{o&&!o.done&&(i=s.return)&&i.call(s)}finally{if(r)throw r.error}}}}))},e.prototype.error=function(t){var e=this;N((function(){if(e._throwIfClosed(),!e.isStopped){e.hasError=e.isStopped=!0,e.thrownError=t;for(var r=e.observers;r.length;)r.shift().error(t)}}))},e.prototype.complete=function(){var t=this;N((function(){if(t._throwIfClosed(),!t.isStopped){t.isStopped=!0;for(var e=t.observers;e.length;)e.shift().complete()}}))},e.prototype.unsubscribe=function(){this.isStopped=this.closed=!0,this.observers=null},Object.defineProperty(e.prototype,"observed",{get:function(){var t;return(null===(t=this.observers)||void 0===t?void 0:t.length)>0},enumerable:!1,configurable:!0}),e.prototype._trySubscribe=function(e){return this._throwIfClosed(),t.prototype._trySubscribe.call(this,e)},e.prototype._subscribe=function(t){return this._throwIfClosed(),this._checkFinalizedStatuses(t),this._innerSubscribe(t)},e.prototype._innerSubscribe=function(t){var e=this,r=e.hasError,i=e.isStopped,n=e.observers;return r||i?M:(n.push(t),new A((function(){return k(n,t)})))},e.prototype._checkFinalizedStatuses=function(t){var e=this,r=e.hasError,i=e.thrownError,n=e.isStopped;r?t.error(i):n&&t.complete()},e.prototype.asObservable=function(){var t=new H;return t.source=this,t},e.create=function(t,e){return new tt(t,e)},e}(H),tt=function(t){function e(e,r){var i=t.call(this)||this;return i.destination=e,i.source=r,i}return d(e,t),e.prototype.next=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.next)||void 0===r||r.call(e,t)},e.prototype.error=function(t){var e,r;null===(r=null===(e=this.destination)||void 0===e?void 0:e.error)||void 0===r||r.call(e,t)},e.prototype.complete=function(){var t,e;null===(e=null===(t=this.destination)||void 0===t?void 0:t.complete)||void 0===e||e.call(t)},e.prototype._subscribe=function(t){var e,r;return null!==(r=null===(e=this.source)||void 0===e?void 0:e.subscribe(t))&&void 0!==r?r:M},e}(Q),et={now:function(){return(et.delegate||Date).now()},delegate:void 0},rt=function(t){function e(e,r,i){void 0===e&&(e=1/0),void 0===r&&(r=1/0),void 0===i&&(i=et);var n=t.call(this)||this;return n._bufferSize=e,n._windowTime=r,n._timestampProvider=i,n._buffer=[],n._infiniteTimeWindow=!0,n._infiniteTimeWindow=r===1/0,n._bufferSize=Math.max(1,e),n._windowTime=Math.max(1,r),n}return d(e,t),e.prototype.next=function(e){var r=this,i=r.isStopped,n=r._buffer,s=r._infiniteTimeWindow,o=r._timestampProvider,a=r._windowTime;i||(n.push(e),!s&&n.push(o.now()+a)),this._trimBuffer(),t.prototype.next.call(this,e)},e.prototype._subscribe=function(t){this._throwIfClosed(),this._trimBuffer();for(var e=this._innerSubscribe(t),r=this._infiniteTimeWindow,i=this._buffer.slice(),n=0;n<i.length&&!t.closed;n+=r?1:2)t.next(i[n]);return this._checkFinalizedStatuses(t),e},e.prototype._trimBuffer=function(){var t=this,e=t._bufferSize,r=t._timestampProvider,i=t._buffer,n=t._infiniteTimeWindow,s=(n?1:2)*e;if(e<1/0&&s<i.length&&i.splice(0,i.length-s),!n){for(var o=r.now(),a=0,h=1;h<i.length&&i[h]<=o;h+=2)a=h;a&&i.splice(0,a+1)}},e}(Q);const it={getBit(t){return this.data[nt(t)]&1<<st(t)?1:0},setBit(t){this.data[nt(t)]|=1<<st(t)},clearBit(t){this.data[nt(t)]&=~(1<<st(t))},toggleBit(t){this.data[nt(t)]^=1<<st(t)},getBitXY(t,e){return t>=this.width||e>=this.height?0:this.getBit(e*this.width+t)},setBitXY(t,e){this.setBit(e*this.width+t)},clearBitXY(t,e){this.clearBit(e*this.width+t)},toggleBitXY(t,e){this.toggleBit(e*this.width+t)}};function nt(t){return t>>3}function st(t){return 7-(7&t)}function ot(t,e,r){return"function"==typeof t.toBlob?new Promise((function(i){t.toBlob(i,e,r)})):Promise.resolve(function(t){var e=t.match(/data:([^;]+)/)[1],r=t.replace(/^[^,]+,/,"");return function(t,e){t=t||[],"string"==typeof(e=e||{})&&(e={type:e});try{return new Blob(t,e)}catch(n){if("TypeError"!==n.name)throw n;for(var r=new("undefined"!=typeof BlobBuilder?BlobBuilder:"undefined"!=typeof MSBlobBuilder?MSBlobBuilder:"undefined"!=typeof MozBlobBuilder?MozBlobBuilder:WebKitBlobBuilder),i=0;i<t.length;i+=1)r.append(t[i]);return r.getBlob(e.type)}}([at(atob(r))],{type:e})}(t.toDataURL(e,r)))}function at(t){for(var e=t.length,r=new ArrayBuffer(e),i=new Uint8Array(r),n=-1;++n<e;)i[n]=t.charCodeAt(n);return r}var ht=__webpack_require__(4665);__webpack_require__(7638);const lt=new TextDecoder("utf-8"),ut=new TextEncoder;class ct{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0,n=t.byteLength-i;let s=i;(ArrayBuffer.isView(t)||t instanceof ct)&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this.lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),lt.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return ut.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}function ft(t){let e=t.length;for(;--e>=0;)t[e]=0}const dt=new Uint8Array([0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0]),pt=new Uint8Array([0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13]),mt=new Uint8Array([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7]),gt=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]),wt=new Array(576);ft(wt);const bt=new Array(60);ft(bt);const yt=new Array(512);ft(yt);const _t=new Array(256);ft(_t);const vt=new Array(29);ft(vt);const xt=new Array(30);function kt(t,e,r,i,n){this.static_tree=t,this.extra_bits=e,this.extra_base=r,this.elems=i,this.max_length=n,this.has_stree=t&&t.length}let At,Mt,Et;function St(t,e){this.dyn_tree=t,this.max_code=0,this.stat_desc=e}ft(xt);const Ct=t=>t<256?yt[t]:yt[256+(t>>>7)],It=(t,e)=>{t.pending_buf[t.pending++]=255&e,t.pending_buf[t.pending++]=e>>>8&255},Dt=(t,e,r)=>{t.bi_valid>16-r?(t.bi_buf|=e<<t.bi_valid&65535,It(t,t.bi_buf),t.bi_buf=e>>16-t.bi_valid,t.bi_valid+=r-16):(t.bi_buf|=e<<t.bi_valid&65535,t.bi_valid+=r)},Pt=(t,e,r)=>{Dt(t,r[2*e],r[2*e+1])},Bt=(t,e)=>{let r=0;do{r|=1&t,t>>>=1,r<<=1}while(--e>0);return r>>>1},Rt=(t,e,r)=>{const i=new Array(16);let n,s,o=0;for(n=1;n<=15;n++)i[n]=o=o+r[n-1]<<1;for(s=0;s<=e;s++){let e=t[2*s+1];0!==e&&(t[2*s]=Bt(i[e]++,e))}},Tt=t=>{let e;for(e=0;e<286;e++)t.dyn_ltree[2*e]=0;for(e=0;e<30;e++)t.dyn_dtree[2*e]=0;for(e=0;e<19;e++)t.bl_tree[2*e]=0;t.dyn_ltree[512]=1,t.opt_len=t.static_len=0,t.last_lit=t.matches=0},Ut=t=>{t.bi_valid>8?It(t,t.bi_buf):t.bi_valid>0&&(t.pending_buf[t.pending++]=t.bi_buf),t.bi_buf=0,t.bi_valid=0},Ot=(t,e,r,i)=>{const n=2*e,s=2*r;return t[n]<t[s]||t[n]===t[s]&&i[e]<=i[r]},Lt=(t,e,r)=>{const i=t.heap[r];let n=r<<1;for(;n<=t.heap_len&&(n<t.heap_len&&Ot(e,t.heap[n+1],t.heap[n],t.depth)&&n++,!Ot(e,i,t.heap[n],t.depth));)t.heap[r]=t.heap[n],r=n,n<<=1;t.heap[r]=i},Ft=(t,e,r)=>{let i,n,s,o,a=0;if(0!==t.last_lit)do{i=t.pending_buf[t.d_buf+2*a]<<8|t.pending_buf[t.d_buf+2*a+1],n=t.pending_buf[t.l_buf+a],a++,0===i?Pt(t,n,e):(s=_t[n],Pt(t,s+256+1,e),o=dt[s],0!==o&&(n-=vt[s],Dt(t,n,o)),i--,s=Ct(i),Pt(t,s,r),o=pt[s],0!==o&&(i-=xt[s],Dt(t,i,o)))}while(a<t.last_lit);Pt(t,256,e)},Nt=(t,e)=>{const r=e.dyn_tree,i=e.stat_desc.static_tree,n=e.stat_desc.has_stree,s=e.stat_desc.elems;let o,a,h,l=-1;for(t.heap_len=0,t.heap_max=573,o=0;o<s;o++)0!==r[2*o]?(t.heap[++t.heap_len]=l=o,t.depth[o]=0):r[2*o+1]=0;for(;t.heap_len<2;)h=t.heap[++t.heap_len]=l<2?++l:0,r[2*h]=1,t.depth[h]=0,t.opt_len--,n&&(t.static_len-=i[2*h+1]);for(e.max_code=l,o=t.heap_len>>1;o>=1;o--)Lt(t,r,o);h=s;do{o=t.heap[1],t.heap[1]=t.heap[t.heap_len--],Lt(t,r,1),a=t.heap[1],t.heap[--t.heap_max]=o,t.heap[--t.heap_max]=a,r[2*h]=r[2*o]+r[2*a],t.depth[h]=(t.depth[o]>=t.depth[a]?t.depth[o]:t.depth[a])+1,r[2*o+1]=r[2*a+1]=h,t.heap[1]=h++,Lt(t,r,1)}while(t.heap_len>=2);t.heap[--t.heap_max]=t.heap[1],((t,e)=>{const r=e.dyn_tree,i=e.max_code,n=e.stat_desc.static_tree,s=e.stat_desc.has_stree,o=e.stat_desc.extra_bits,a=e.stat_desc.extra_base,h=e.stat_desc.max_length;let l,u,c,f,d,p,m=0;for(f=0;f<=15;f++)t.bl_count[f]=0;for(r[2*t.heap[t.heap_max]+1]=0,l=t.heap_max+1;l<573;l++)u=t.heap[l],f=r[2*r[2*u+1]+1]+1,f>h&&(f=h,m++),r[2*u+1]=f,u>i||(t.bl_count[f]++,d=0,u>=a&&(d=o[u-a]),p=r[2*u],t.opt_len+=p*(f+d),s&&(t.static_len+=p*(n[2*u+1]+d)));if(0!==m){do{for(f=h-1;0===t.bl_count[f];)f--;t.bl_count[f]--,t.bl_count[f+1]+=2,t.bl_count[h]--,m-=2}while(m>0);for(f=h;0!==f;f--)for(u=t.bl_count[f];0!==u;)c=t.heap[--l],c>i||(r[2*c+1]!==f&&(t.opt_len+=(f-r[2*c+1])*r[2*c],r[2*c+1]=f),u--)}})(t,e),Rt(r,l,t.bl_count)},zt=(t,e,r)=>{let i,n,s=-1,o=e[1],a=0,h=7,l=4;for(0===o&&(h=138,l=3),e[2*(r+1)+1]=65535,i=0;i<=r;i++)n=o,o=e[2*(i+1)+1],++a<h&&n===o||(a<l?t.bl_tree[2*n]+=a:0!==n?(n!==s&&t.bl_tree[2*n]++,t.bl_tree[32]++):a<=10?t.bl_tree[34]++:t.bl_tree[36]++,a=0,s=n,0===o?(h=138,l=3):n===o?(h=6,l=3):(h=7,l=4))},jt=(t,e,r)=>{let i,n,s=-1,o=e[1],a=0,h=7,l=4;for(0===o&&(h=138,l=3),i=0;i<=r;i++)if(n=o,o=e[2*(i+1)+1],!(++a<h&&n===o)){if(a<l)do{Pt(t,n,t.bl_tree)}while(0!=--a);else 0!==n?(n!==s&&(Pt(t,n,t.bl_tree),a--),Pt(t,16,t.bl_tree),Dt(t,a-3,2)):a<=10?(Pt(t,17,t.bl_tree),Dt(t,a-3,3)):(Pt(t,18,t.bl_tree),Dt(t,a-11,7));a=0,s=n,0===o?(h=138,l=3):n===o?(h=6,l=3):(h=7,l=4)}};let Yt=!1;const Vt=(t,e,r,i)=>{Dt(t,0+(i?1:0),3),((t,e,r,i)=>{Ut(t),It(t,r),It(t,~r),t.pending_buf.set(t.window.subarray(e,e+r),t.pending),t.pending+=r})(t,e,r)};var qt={_tr_init:t=>{Yt||((()=>{let t,e,r,i,n;const s=new Array(16);for(r=0,i=0;i<28;i++)for(vt[i]=r,t=0;t<1<<dt[i];t++)_t[r++]=i;for(_t[r-1]=i,n=0,i=0;i<16;i++)for(xt[i]=n,t=0;t<1<<pt[i];t++)yt[n++]=i;for(n>>=7;i<30;i++)for(xt[i]=n<<7,t=0;t<1<<pt[i]-7;t++)yt[256+n++]=i;for(e=0;e<=15;e++)s[e]=0;for(t=0;t<=143;)wt[2*t+1]=8,t++,s[8]++;for(;t<=255;)wt[2*t+1]=9,t++,s[9]++;for(;t<=279;)wt[2*t+1]=7,t++,s[7]++;for(;t<=287;)wt[2*t+1]=8,t++,s[8]++;for(Rt(wt,287,s),t=0;t<30;t++)bt[2*t+1]=5,bt[2*t]=Bt(t,5);At=new kt(wt,dt,257,286,15),Mt=new kt(bt,pt,0,30,15),Et=new kt(new Array(0),mt,0,19,7)})(),Yt=!0),t.l_desc=new St(t.dyn_ltree,At),t.d_desc=new St(t.dyn_dtree,Mt),t.bl_desc=new St(t.bl_tree,Et),t.bi_buf=0,t.bi_valid=0,Tt(t)},_tr_stored_block:Vt,_tr_flush_block:(t,e,r,i)=>{let n,s,o=0;t.level>0?(2===t.strm.data_type&&(t.strm.data_type=(t=>{let e,r=4093624447;for(e=0;e<=31;e++,r>>>=1)if(1&r&&0!==t.dyn_ltree[2*e])return 0;if(0!==t.dyn_ltree[18]||0!==t.dyn_ltree[20]||0!==t.dyn_ltree[26])return 1;for(e=32;e<256;e++)if(0!==t.dyn_ltree[2*e])return 1;return 0})(t)),Nt(t,t.l_desc),Nt(t,t.d_desc),o=(t=>{let e;for(zt(t,t.dyn_ltree,t.l_desc.max_code),zt(t,t.dyn_dtree,t.d_desc.max_code),Nt(t,t.bl_desc),e=18;e>=3&&0===t.bl_tree[2*gt[e]+1];e--);return t.opt_len+=3*(e+1)+5+5+4,e})(t),n=t.opt_len+3+7>>>3,s=t.static_len+3+7>>>3,s<=n&&(n=s)):n=s=r+5,r+4<=n&&-1!==e?Vt(t,e,r,i):4===t.strategy||s===n?(Dt(t,2+(i?1:0),3),Ft(t,wt,bt)):(Dt(t,4+(i?1:0),3),((t,e,r,i)=>{let n;for(Dt(t,e-257,5),Dt(t,r-1,5),Dt(t,i-4,4),n=0;n<i;n++)Dt(t,t.bl_tree[2*gt[n]+1],3);jt(t,t.dyn_ltree,e-1),jt(t,t.dyn_dtree,r-1)})(t,t.l_desc.max_code+1,t.d_desc.max_code+1,o+1),Ft(t,t.dyn_ltree,t.dyn_dtree)),Tt(t),i&&Ut(t)},_tr_tally:(t,e,r)=>(t.pending_buf[t.d_buf+2*t.last_lit]=e>>>8&255,t.pending_buf[t.d_buf+2*t.last_lit+1]=255&e,t.pending_buf[t.l_buf+t.last_lit]=255&r,t.last_lit++,0===e?t.dyn_ltree[2*r]++:(t.matches++,e--,t.dyn_ltree[2*(_t[r]+256+1)]++,t.dyn_dtree[2*Ct(e)]++),t.last_lit===t.lit_bufsize-1),_tr_align:t=>{Dt(t,2,3),Pt(t,256,wt),(t=>{16===t.bi_valid?(It(t,t.bi_buf),t.bi_buf=0,t.bi_valid=0):t.bi_valid>=8&&(t.pending_buf[t.pending++]=255&t.bi_buf,t.bi_buf>>=8,t.bi_valid-=8)})(t)}},Xt=(t,e,r,i)=>{let n=65535&t|0,s=t>>>16&65535|0,o=0;for(;0!==r;){o=r>2e3?2e3:r,r-=o;do{n=n+e[i++]|0,s=s+n|0}while(--o);n%=65521,s%=65521}return n|s<<16|0};const Gt=new Uint32Array((()=>{let t,e=[];for(var r=0;r<256;r++){t=r;for(var i=0;i<8;i++)t=1&t?3988292384^t>>>1:t>>>1;e[r]=t}return e})());var $t=(t,e,r,i)=>{const n=Gt,s=i+r;t^=-1;for(let r=i;r<s;r++)t=t>>>8^n[255&(t^e[r])];return-1^t},Wt={2:"need dictionary",1:"stream end",0:"","-1":"file error","-2":"stream error","-3":"data error","-4":"insufficient memory","-5":"buffer error","-6":"incompatible version"},Zt={Z_NO_FLUSH:0,Z_PARTIAL_FLUSH:1,Z_SYNC_FLUSH:2,Z_FULL_FLUSH:3,Z_FINISH:4,Z_BLOCK:5,Z_TREES:6,Z_OK:0,Z_STREAM_END:1,Z_NEED_DICT:2,Z_ERRNO:-1,Z_STREAM_ERROR:-2,Z_DATA_ERROR:-3,Z_MEM_ERROR:-4,Z_BUF_ERROR:-5,Z_NO_COMPRESSION:0,Z_BEST_SPEED:1,Z_BEST_COMPRESSION:9,Z_DEFAULT_COMPRESSION:-1,Z_FILTERED:1,Z_HUFFMAN_ONLY:2,Z_RLE:3,Z_FIXED:4,Z_DEFAULT_STRATEGY:0,Z_BINARY:0,Z_TEXT:1,Z_UNKNOWN:2,Z_DEFLATED:8};const{_tr_init:Ht,_tr_stored_block:Kt,_tr_flush_block:Jt,_tr_tally:Qt,_tr_align:te}=qt,{Z_NO_FLUSH:ee,Z_PARTIAL_FLUSH:re,Z_FULL_FLUSH:ie,Z_FINISH:ne,Z_BLOCK:se,Z_OK:oe,Z_STREAM_END:ae,Z_STREAM_ERROR:he,Z_DATA_ERROR:le,Z_BUF_ERROR:ue,Z_DEFAULT_COMPRESSION:ce,Z_FILTERED:fe,Z_HUFFMAN_ONLY:de,Z_RLE:pe,Z_FIXED:me,Z_DEFAULT_STRATEGY:ge,Z_UNKNOWN:we,Z_DEFLATED:be}=Zt,ye=258,_e=262,ve=103,xe=113,ke=666,Ae=(t,e)=>(t.msg=Wt[e],e),Me=t=>(t<<1)-(t>4?9:0),Ee=t=>{let e=t.length;for(;--e>=0;)t[e]=0};let Se=(t,e,r)=>(e<<t.hash_shift^r)&t.hash_mask;const Ce=t=>{const e=t.state;let r=e.pending;r>t.avail_out&&(r=t.avail_out),0!==r&&(t.output.set(e.pending_buf.subarray(e.pending_out,e.pending_out+r),t.next_out),t.next_out+=r,e.pending_out+=r,t.total_out+=r,t.avail_out-=r,e.pending-=r,0===e.pending&&(e.pending_out=0))},Ie=(t,e)=>{Jt(t,t.block_start>=0?t.block_start:-1,t.strstart-t.block_start,e),t.block_start=t.strstart,Ce(t.strm)},De=(t,e)=>{t.pending_buf[t.pending++]=e},Pe=(t,e)=>{t.pending_buf[t.pending++]=e>>>8&255,t.pending_buf[t.pending++]=255&e},Be=(t,e,r,i)=>{let n=t.avail_in;return n>i&&(n=i),0===n?0:(t.avail_in-=n,e.set(t.input.subarray(t.next_in,t.next_in+n),r),1===t.state.wrap?t.adler=Xt(t.adler,e,n,r):2===t.state.wrap&&(t.adler=$t(t.adler,e,n,r)),t.next_in+=n,t.total_in+=n,n)},Re=(t,e)=>{let r,i,n=t.max_chain_length,s=t.strstart,o=t.prev_length,a=t.nice_match;const h=t.strstart>t.w_size-_e?t.strstart-(t.w_size-_e):0,l=t.window,u=t.w_mask,c=t.prev,f=t.strstart+ye;let d=l[s+o-1],p=l[s+o];t.prev_length>=t.good_match&&(n>>=2),a>t.lookahead&&(a=t.lookahead);do{if(r=e,l[r+o]===p&&l[r+o-1]===d&&l[r]===l[s]&&l[++r]===l[s+1]){s+=2,r++;do{}while(l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&l[++s]===l[++r]&&s<f);if(i=ye-(f-s),s=f-ye,i>o){if(t.match_start=e,o=i,i>=a)break;d=l[s+o-1],p=l[s+o]}}}while((e=c[e&u])>h&&0!=--n);return o<=t.lookahead?o:t.lookahead},Te=t=>{const e=t.w_size;let r,i,n,s,o;do{if(s=t.window_size-t.lookahead-t.strstart,t.strstart>=e+(e-_e)){t.window.set(t.window.subarray(e,e+e),0),t.match_start-=e,t.strstart-=e,t.block_start-=e,i=t.hash_size,r=i;do{n=t.head[--r],t.head[r]=n>=e?n-e:0}while(--i);i=e,r=i;do{n=t.prev[--r],t.prev[r]=n>=e?n-e:0}while(--i);s+=e}if(0===t.strm.avail_in)break;if(i=Be(t.strm,t.window,t.strstart+t.lookahead,s),t.lookahead+=i,t.lookahead+t.insert>=3)for(o=t.strstart-t.insert,t.ins_h=t.window[o],t.ins_h=Se(t,t.ins_h,t.window[o+1]);t.insert&&(t.ins_h=Se(t,t.ins_h,t.window[o+3-1]),t.prev[o&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=o,o++,t.insert--,!(t.lookahead+t.insert<3)););}while(t.lookahead<_e&&0!==t.strm.avail_in)},Ue=(t,e)=>{let r,i;for(;;){if(t.lookahead<_e){if(Te(t),t.lookahead<_e&&e===ee)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),0!==r&&t.strstart-r<=t.w_size-_e&&(t.match_length=Re(t,r)),t.match_length>=3)if(i=Qt(t,t.strstart-t.match_start,t.match_length-3),t.lookahead-=t.match_length,t.match_length<=t.max_lazy_match&&t.lookahead>=3){t.match_length--;do{t.strstart++,t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart}while(0!=--t.match_length);t.strstart++}else t.strstart+=t.match_length,t.match_length=0,t.ins_h=t.window[t.strstart],t.ins_h=Se(t,t.ins_h,t.window[t.strstart+1]);else i=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++;if(i&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=t.strstart<2?t.strstart:2,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2},Oe=(t,e)=>{let r,i,n;for(;;){if(t.lookahead<_e){if(Te(t),t.lookahead<_e&&e===ee)return 1;if(0===t.lookahead)break}if(r=0,t.lookahead>=3&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart),t.prev_length=t.match_length,t.prev_match=t.match_start,t.match_length=2,0!==r&&t.prev_length<t.max_lazy_match&&t.strstart-r<=t.w_size-_e&&(t.match_length=Re(t,r),t.match_length<=5&&(t.strategy===fe||3===t.match_length&&t.strstart-t.match_start>4096)&&(t.match_length=2)),t.prev_length>=3&&t.match_length<=t.prev_length){n=t.strstart+t.lookahead-3,i=Qt(t,t.strstart-1-t.prev_match,t.prev_length-3),t.lookahead-=t.prev_length-1,t.prev_length-=2;do{++t.strstart<=n&&(t.ins_h=Se(t,t.ins_h,t.window[t.strstart+3-1]),r=t.prev[t.strstart&t.w_mask]=t.head[t.ins_h],t.head[t.ins_h]=t.strstart)}while(0!=--t.prev_length);if(t.match_available=0,t.match_length=2,t.strstart++,i&&(Ie(t,!1),0===t.strm.avail_out))return 1}else if(t.match_available){if(i=Qt(t,0,t.window[t.strstart-1]),i&&Ie(t,!1),t.strstart++,t.lookahead--,0===t.strm.avail_out)return 1}else t.match_available=1,t.strstart++,t.lookahead--}return t.match_available&&(i=Qt(t,0,t.window[t.strstart-1]),t.match_available=0),t.insert=t.strstart<2?t.strstart:2,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2};function Le(t,e,r,i,n){this.good_length=t,this.max_lazy=e,this.nice_length=r,this.max_chain=i,this.func=n}const Fe=[new Le(0,0,0,0,((t,e)=>{let r=65535;for(r>t.pending_buf_size-5&&(r=t.pending_buf_size-5);;){if(t.lookahead<=1){if(Te(t),0===t.lookahead&&e===ee)return 1;if(0===t.lookahead)break}t.strstart+=t.lookahead,t.lookahead=0;const i=t.block_start+r;if((0===t.strstart||t.strstart>=i)&&(t.lookahead=t.strstart-i,t.strstart=i,Ie(t,!1),0===t.strm.avail_out))return 1;if(t.strstart-t.block_start>=t.w_size-_e&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):(t.strstart>t.block_start&&(Ie(t,!1),t.strm.avail_out),1)})),new Le(4,4,8,4,Ue),new Le(4,5,16,8,Ue),new Le(4,6,32,32,Ue),new Le(4,4,16,16,Oe),new Le(8,16,32,32,Oe),new Le(8,16,128,128,Oe),new Le(8,32,128,256,Oe),new Le(32,128,258,1024,Oe),new Le(32,258,258,4096,Oe)];function Ne(){this.strm=null,this.status=0,this.pending_buf=null,this.pending_buf_size=0,this.pending_out=0,this.pending=0,this.wrap=0,this.gzhead=null,this.gzindex=0,this.method=be,this.last_flush=-1,this.w_size=0,this.w_bits=0,this.w_mask=0,this.window=null,this.window_size=0,this.prev=null,this.head=null,this.ins_h=0,this.hash_size=0,this.hash_bits=0,this.hash_mask=0,this.hash_shift=0,this.block_start=0,this.match_length=0,this.prev_match=0,this.match_available=0,this.strstart=0,this.match_start=0,this.lookahead=0,this.prev_length=0,this.max_chain_length=0,this.max_lazy_match=0,this.level=0,this.strategy=0,this.good_match=0,this.nice_match=0,this.dyn_ltree=new Uint16Array(1146),this.dyn_dtree=new Uint16Array(122),this.bl_tree=new Uint16Array(78),Ee(this.dyn_ltree),Ee(this.dyn_dtree),Ee(this.bl_tree),this.l_desc=null,this.d_desc=null,this.bl_desc=null,this.bl_count=new Uint16Array(16),this.heap=new Uint16Array(573),Ee(this.heap),this.heap_len=0,this.heap_max=0,this.depth=new Uint16Array(573),Ee(this.depth),this.l_buf=0,this.lit_bufsize=0,this.last_lit=0,this.d_buf=0,this.opt_len=0,this.static_len=0,this.matches=0,this.insert=0,this.bi_buf=0,this.bi_valid=0}const ze=t=>{if(!t||!t.state)return Ae(t,he);t.total_in=t.total_out=0,t.data_type=we;const e=t.state;return e.pending=0,e.pending_out=0,e.wrap<0&&(e.wrap=-e.wrap),e.status=e.wrap?42:xe,t.adler=2===e.wrap?0:1,e.last_flush=ee,Ht(e),oe},je=t=>{const e=ze(t);var r;return e===oe&&((r=t.state).window_size=2*r.w_size,Ee(r.head),r.max_lazy_match=Fe[r.level].max_lazy,r.good_match=Fe[r.level].good_length,r.nice_match=Fe[r.level].nice_length,r.max_chain_length=Fe[r.level].max_chain,r.strstart=0,r.block_start=0,r.lookahead=0,r.insert=0,r.match_length=r.prev_length=2,r.match_available=0,r.ins_h=0),e},Ye=(t,e,r,i,n,s)=>{if(!t)return he;let o=1;if(e===ce&&(e=6),i<0?(o=0,i=-i):i>15&&(o=2,i-=16),n<1||n>9||r!==be||i<8||i>15||e<0||e>9||s<0||s>me)return Ae(t,he);8===i&&(i=9);const a=new Ne;return t.state=a,a.strm=t,a.wrap=o,a.gzhead=null,a.w_bits=i,a.w_size=1<<a.w_bits,a.w_mask=a.w_size-1,a.hash_bits=n+7,a.hash_size=1<<a.hash_bits,a.hash_mask=a.hash_size-1,a.hash_shift=~~((a.hash_bits+3-1)/3),a.window=new Uint8Array(2*a.w_size),a.head=new Uint16Array(a.hash_size),a.prev=new Uint16Array(a.w_size),a.lit_bufsize=1<<n+6,a.pending_buf_size=4*a.lit_bufsize,a.pending_buf=new Uint8Array(a.pending_buf_size),a.d_buf=1*a.lit_bufsize,a.l_buf=3*a.lit_bufsize,a.level=e,a.strategy=s,a.method=r,je(t)};var Ve=Ye,qe=(t,e)=>t&&t.state?2!==t.state.wrap?he:(t.state.gzhead=e,oe):he,Xe=(t,e)=>{let r,i;if(!t||!t.state||e>se||e<0)return t?Ae(t,he):he;const n=t.state;if(!t.output||!t.input&&0!==t.avail_in||n.status===ke&&e!==ne)return Ae(t,0===t.avail_out?ue:he);n.strm=t;const s=n.last_flush;if(n.last_flush=e,42===n.status)if(2===n.wrap)t.adler=0,De(n,31),De(n,139),De(n,8),n.gzhead?(De(n,(n.gzhead.text?1:0)+(n.gzhead.hcrc?2:0)+(n.gzhead.extra?4:0)+(n.gzhead.name?8:0)+(n.gzhead.comment?16:0)),De(n,255&n.gzhead.time),De(n,n.gzhead.time>>8&255),De(n,n.gzhead.time>>16&255),De(n,n.gzhead.time>>24&255),De(n,9===n.level?2:n.strategy>=de||n.level<2?4:0),De(n,255&n.gzhead.os),n.gzhead.extra&&n.gzhead.extra.length&&(De(n,255&n.gzhead.extra.length),De(n,n.gzhead.extra.length>>8&255)),n.gzhead.hcrc&&(t.adler=$t(t.adler,n.pending_buf,n.pending,0)),n.gzindex=0,n.status=69):(De(n,0),De(n,0),De(n,0),De(n,0),De(n,0),De(n,9===n.level?2:n.strategy>=de||n.level<2?4:0),De(n,3),n.status=xe);else{let e=be+(n.w_bits-8<<4)<<8,r=-1;r=n.strategy>=de||n.level<2?0:n.level<6?1:6===n.level?2:3,e|=r<<6,0!==n.strstart&&(e|=32),e+=31-e%31,n.status=xe,Pe(n,e),0!==n.strstart&&(Pe(n,t.adler>>>16),Pe(n,65535&t.adler)),t.adler=1}if(69===n.status)if(n.gzhead.extra){for(r=n.pending;n.gzindex<(65535&n.gzhead.extra.length)&&(n.pending!==n.pending_buf_size||(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending!==n.pending_buf_size));)De(n,255&n.gzhead.extra[n.gzindex]),n.gzindex++;n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),n.gzindex===n.gzhead.extra.length&&(n.gzindex=0,n.status=73)}else n.status=73;if(73===n.status)if(n.gzhead.name){r=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.name.length?255&n.gzhead.name.charCodeAt(n.gzindex++):0,De(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),0===i&&(n.gzindex=0,n.status=91)}else n.status=91;if(91===n.status)if(n.gzhead.comment){r=n.pending;do{if(n.pending===n.pending_buf_size&&(n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),Ce(t),r=n.pending,n.pending===n.pending_buf_size)){i=1;break}i=n.gzindex<n.gzhead.comment.length?255&n.gzhead.comment.charCodeAt(n.gzindex++):0,De(n,i)}while(0!==i);n.gzhead.hcrc&&n.pending>r&&(t.adler=$t(t.adler,n.pending_buf,n.pending-r,r)),0===i&&(n.status=ve)}else n.status=ve;if(n.status===ve&&(n.gzhead.hcrc?(n.pending+2>n.pending_buf_size&&Ce(t),n.pending+2<=n.pending_buf_size&&(De(n,255&t.adler),De(n,t.adler>>8&255),t.adler=0,n.status=xe)):n.status=xe),0!==n.pending){if(Ce(t),0===t.avail_out)return n.last_flush=-1,oe}else if(0===t.avail_in&&Me(e)<=Me(s)&&e!==ne)return Ae(t,ue);if(n.status===ke&&0!==t.avail_in)return Ae(t,ue);if(0!==t.avail_in||0!==n.lookahead||e!==ee&&n.status!==ke){let r=n.strategy===de?((t,e)=>{let r;for(;;){if(0===t.lookahead&&(Te(t),0===t.lookahead)){if(e===ee)return 1;break}if(t.match_length=0,r=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++,r&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2})(n,e):n.strategy===pe?((t,e)=>{let r,i,n,s;const o=t.window;for(;;){if(t.lookahead<=ye){if(Te(t),t.lookahead<=ye&&e===ee)return 1;if(0===t.lookahead)break}if(t.match_length=0,t.lookahead>=3&&t.strstart>0&&(n=t.strstart-1,i=o[n],i===o[++n]&&i===o[++n]&&i===o[++n])){s=t.strstart+ye;do{}while(i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&i===o[++n]&&n<s);t.match_length=ye-(s-n),t.match_length>t.lookahead&&(t.match_length=t.lookahead)}if(t.match_length>=3?(r=Qt(t,1,t.match_length-3),t.lookahead-=t.match_length,t.strstart+=t.match_length,t.match_length=0):(r=Qt(t,0,t.window[t.strstart]),t.lookahead--,t.strstart++),r&&(Ie(t,!1),0===t.strm.avail_out))return 1}return t.insert=0,e===ne?(Ie(t,!0),0===t.strm.avail_out?3:4):t.last_lit&&(Ie(t,!1),0===t.strm.avail_out)?1:2})(n,e):Fe[n.level].func(n,e);if(3!==r&&4!==r||(n.status=ke),1===r||3===r)return 0===t.avail_out&&(n.last_flush=-1),oe;if(2===r&&(e===re?te(n):e!==se&&(Kt(n,0,0,!1),e===ie&&(Ee(n.head),0===n.lookahead&&(n.strstart=0,n.block_start=0,n.insert=0))),Ce(t),0===t.avail_out))return n.last_flush=-1,oe}return e!==ne?oe:n.wrap<=0?ae:(2===n.wrap?(De(n,255&t.adler),De(n,t.adler>>8&255),De(n,t.adler>>16&255),De(n,t.adler>>24&255),De(n,255&t.total_in),De(n,t.total_in>>8&255),De(n,t.total_in>>16&255),De(n,t.total_in>>24&255)):(Pe(n,t.adler>>>16),Pe(n,65535&t.adler)),Ce(t),n.wrap>0&&(n.wrap=-n.wrap),0!==n.pending?oe:ae)},Ge=t=>{if(!t||!t.state)return he;const e=t.state.status;return 42!==e&&69!==e&&73!==e&&91!==e&&e!==ve&&e!==xe&&e!==ke?Ae(t,he):(t.state=null,e===xe?Ae(t,le):oe)},$e=(t,e)=>{let r=e.length;if(!t||!t.state)return he;const i=t.state,n=i.wrap;if(2===n||1===n&&42!==i.status||i.lookahead)return he;if(1===n&&(t.adler=Xt(t.adler,e,r,0)),i.wrap=0,r>=i.w_size){0===n&&(Ee(i.head),i.strstart=0,i.block_start=0,i.insert=0);let t=new Uint8Array(i.w_size);t.set(e.subarray(r-i.w_size,r),0),e=t,r=i.w_size}const s=t.avail_in,o=t.next_in,a=t.input;for(t.avail_in=r,t.next_in=0,t.input=e,Te(i);i.lookahead>=3;){let t=i.strstart,e=i.lookahead-2;do{i.ins_h=Se(i,i.ins_h,i.window[t+3-1]),i.prev[t&i.w_mask]=i.head[i.ins_h],i.head[i.ins_h]=t,t++}while(--e);i.strstart=t,i.lookahead=2,Te(i)}return i.strstart+=i.lookahead,i.block_start=i.strstart,i.insert=i.lookahead,i.lookahead=0,i.match_length=i.prev_length=2,i.match_available=0,t.next_in=o,t.input=a,t.avail_in=s,i.wrap=n,oe};const We=(t,e)=>Object.prototype.hasOwnProperty.call(t,e);var Ze=function(t){const e=Array.prototype.slice.call(arguments,1);for(;e.length;){const r=e.shift();if(r){if("object"!=typeof r)throw new TypeError(r+"must be non-object");for(const e in r)We(r,e)&&(t[e]=r[e])}}return t},He=t=>{let e=0;for(let r=0,i=t.length;r<i;r++)e+=t[r].length;const r=new Uint8Array(e);for(let e=0,i=0,n=t.length;e<n;e++){let n=t[e];r.set(n,i),i+=n.length}return r};let Ke=!0;try{String.fromCharCode.apply(null,new Uint8Array(1))}catch(t){Ke=!1}const Je=new Uint8Array(256);for(let t=0;t<256;t++)Je[t]=t>=252?6:t>=248?5:t>=240?4:t>=224?3:t>=192?2:1;Je[254]=Je[254]=1;var Qe=t=>{if("function"==typeof TextEncoder&&TextEncoder.prototype.encode)return(new TextEncoder).encode(t);let e,r,i,n,s,o=t.length,a=0;for(n=0;n<o;n++)r=t.charCodeAt(n),55296==(64512&r)&&n+1<o&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(r=65536+(r-55296<<10)+(i-56320),n++)),a+=r<128?1:r<2048?2:r<65536?3:4;for(e=new Uint8Array(a),s=0,n=0;s<a;n++)r=t.charCodeAt(n),55296==(64512&r)&&n+1<o&&(i=t.charCodeAt(n+1),56320==(64512&i)&&(r=65536+(r-55296<<10)+(i-56320),n++)),r<128?e[s++]=r:r<2048?(e[s++]=192|r>>>6,e[s++]=128|63&r):r<65536?(e[s++]=224|r>>>12,e[s++]=128|r>>>6&63,e[s++]=128|63&r):(e[s++]=240|r>>>18,e[s++]=128|r>>>12&63,e[s++]=128|r>>>6&63,e[s++]=128|63&r);return e},tr=(t,e)=>{const r=e||t.length;if("function"==typeof TextDecoder&&TextDecoder.prototype.decode)return(new TextDecoder).decode(t.subarray(0,e));let i,n;const s=new Array(2*r);for(n=0,i=0;i<r;){let e=t[i++];if(e<128){s[n++]=e;continue}let o=Je[e];if(o>4)s[n++]=65533,i+=o-1;else{for(e&=2===o?31:3===o?15:7;o>1&&i<r;)e=e<<6|63&t[i++],o--;o>1?s[n++]=65533:e<65536?s[n++]=e:(e-=65536,s[n++]=55296|e>>10&1023,s[n++]=56320|1023&e)}}return((t,e)=>{if(e<65534&&t.subarray&&Ke)return String.fromCharCode.apply(null,t.length===e?t:t.subarray(0,e));let r="";for(let i=0;i<e;i++)r+=String.fromCharCode(t[i]);return r})(s,n)},er=(t,e)=>{(e=e||t.length)>t.length&&(e=t.length);let r=e-1;for(;r>=0&&128==(192&t[r]);)r--;return r<0||0===r?e:r+Je[t[r]]>e?r:e},rr=function(){this.input=null,this.next_in=0,this.avail_in=0,this.total_in=0,this.output=null,this.next_out=0,this.avail_out=0,this.total_out=0,this.msg="",this.state=null,this.data_type=2,this.adler=0};const ir=Object.prototype.toString,{Z_NO_FLUSH:nr,Z_SYNC_FLUSH:sr,Z_FULL_FLUSH:or,Z_FINISH:ar,Z_OK:hr,Z_STREAM_END:lr,Z_DEFAULT_COMPRESSION:ur,Z_DEFAULT_STRATEGY:cr,Z_DEFLATED:fr}=Zt;function dr(t){this.options=Ze({level:ur,method:fr,chunkSize:16384,windowBits:15,memLevel:8,strategy:cr},t||{});let e=this.options;e.raw&&e.windowBits>0?e.windowBits=-e.windowBits:e.gzip&&e.windowBits>0&&e.windowBits<16&&(e.windowBits+=16),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new rr,this.strm.avail_out=0;let r=Ve(this.strm,e.level,e.method,e.windowBits,e.memLevel,e.strategy);if(r!==hr)throw new Error(Wt[r]);if(e.header&&qe(this.strm,e.header),e.dictionary){let t;if(t="string"==typeof e.dictionary?Qe(e.dictionary):"[object ArrayBuffer]"===ir.call(e.dictionary)?new Uint8Array(e.dictionary):e.dictionary,r=$e(this.strm,t),r!==hr)throw new Error(Wt[r]);this._dict_set=!0}}function pr(t,e){const r=new dr(e);if(r.push(t,!0),r.err)throw r.msg||Wt[r.err];return r.result}dr.prototype.push=function(t,e){const r=this.strm,i=this.options.chunkSize;let n,s;if(this.ended)return!1;for(s=e===~~e?e:!0===e?ar:nr,"string"==typeof t?r.input=Qe(t):"[object ArrayBuffer]"===ir.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;)if(0===r.avail_out&&(r.output=new Uint8Array(i),r.next_out=0,r.avail_out=i),(s===sr||s===or)&&r.avail_out<=6)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else{if(n=Xe(r,s),n===lr)return r.next_out>0&&this.onData(r.output.subarray(0,r.next_out)),n=Ge(this.strm),this.onEnd(n),this.ended=!0,n===hr;if(0!==r.avail_out){if(s>0&&r.next_out>0)this.onData(r.output.subarray(0,r.next_out)),r.avail_out=0;else if(0===r.avail_in)break}else this.onData(r.output)}return!0},dr.prototype.onData=function(t){this.chunks.push(t)},dr.prototype.onEnd=function(t){t===hr&&(this.result=He(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var mr={Deflate:dr,deflate:pr,deflateRaw:function(t,e){return(e=e||{}).raw=!0,pr(t,e)},gzip:function(t,e){return(e=e||{}).gzip=!0,pr(t,e)},constants:Zt},gr=function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_,v,x,k,A,M;const E=t.state;r=t.next_in,A=t.input,i=r+(t.avail_in-5),n=t.next_out,M=t.output,s=n-(e-t.avail_out),o=n+(t.avail_out-257),a=E.dmax,h=E.wsize,l=E.whave,u=E.wnext,c=E.window,f=E.hold,d=E.bits,p=E.lencode,m=E.distcode,g=(1<<E.lenbits)-1,w=(1<<E.distbits)-1;t:do{d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=p[f&g];e:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,0===y)M[n++]=65535&b;else{if(!(16&y)){if(0==(64&y)){b=p[(65535&b)+(f&(1<<y)-1)];continue e}if(32&y){E.mode=12;break t}t.msg="invalid literal/length code",E.mode=30;break t}_=65535&b,y&=15,y&&(d<y&&(f+=A[r++]<<d,d+=8),_+=f&(1<<y)-1,f>>>=y,d-=y),d<15&&(f+=A[r++]<<d,d+=8,f+=A[r++]<<d,d+=8),b=m[f&w];r:for(;;){if(y=b>>>24,f>>>=y,d-=y,y=b>>>16&255,!(16&y)){if(0==(64&y)){b=m[(65535&b)+(f&(1<<y)-1)];continue r}t.msg="invalid distance code",E.mode=30;break t}if(v=65535&b,y&=15,d<y&&(f+=A[r++]<<d,d+=8,d<y&&(f+=A[r++]<<d,d+=8)),v+=f&(1<<y)-1,v>a){t.msg="invalid distance too far back",E.mode=30;break t}if(f>>>=y,d-=y,y=n-s,v>y){if(y=v-y,y>l&&E.sane){t.msg="invalid distance too far back",E.mode=30;break t}if(x=0,k=c,0===u){if(x+=h-y,y<_){_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}}else if(u<y){if(x+=h+u-y,y-=u,y<_){_-=y;do{M[n++]=c[x++]}while(--y);if(x=0,u<_){y=u,_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}}}else if(x+=u-y,y<_){_-=y;do{M[n++]=c[x++]}while(--y);x=n-v,k=M}for(;_>2;)M[n++]=k[x++],M[n++]=k[x++],M[n++]=k[x++],_-=3;_&&(M[n++]=k[x++],_>1&&(M[n++]=k[x++]))}else{x=n-v;do{M[n++]=M[x++],M[n++]=M[x++],M[n++]=M[x++],_-=3}while(_>2);_&&(M[n++]=M[x++],_>1&&(M[n++]=M[x++]))}break}}break}}while(r<i&&n<o);_=d>>3,r-=_,d-=_<<3,f&=(1<<d)-1,t.next_in=r,t.next_out=n,t.avail_in=r<i?i-r+5:5-(r-i),t.avail_out=n<o?o-n+257:257-(n-o),E.hold=f,E.bits=d};const wr=new Uint16Array([3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,0,0]),br=new Uint8Array([16,16,16,16,16,16,16,16,17,17,17,17,18,18,18,18,19,19,19,19,20,20,20,20,21,21,21,21,16,72,78]),yr=new Uint16Array([1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577,0,0]),_r=new Uint8Array([16,16,16,16,17,17,18,18,19,19,20,20,21,21,22,22,23,23,24,24,25,25,26,26,27,27,28,28,29,29,64,64]);var vr=(t,e,r,i,n,s,o,a)=>{const h=a.bits;let l,u,c,f,d,p,m=0,g=0,w=0,b=0,y=0,_=0,v=0,x=0,k=0,A=0,M=null,E=0;const S=new Uint16Array(16),C=new Uint16Array(16);let I,D,P,B=null,R=0;for(m=0;m<=15;m++)S[m]=0;for(g=0;g<i;g++)S[e[r+g]]++;for(y=h,b=15;b>=1&&0===S[b];b--);if(y>b&&(y=b),0===b)return n[s++]=20971520,n[s++]=20971520,a.bits=1,0;for(w=1;w<b&&0===S[w];w++);for(y<w&&(y=w),x=1,m=1;m<=15;m++)if(x<<=1,x-=S[m],x<0)return-1;if(x>0&&(0===t||1!==b))return-1;for(C[1]=0,m=1;m<15;m++)C[m+1]=C[m]+S[m];for(g=0;g<i;g++)0!==e[r+g]&&(o[C[e[r+g]]++]=g);if(0===t?(M=B=o,p=19):1===t?(M=wr,E-=257,B=br,R-=257,p=256):(M=yr,B=_r,p=-1),A=0,g=0,m=w,d=s,_=y,v=0,c=-1,k=1<<y,f=k-1,1===t&&k>852||2===t&&k>592)return 1;for(;;){I=m-v,o[g]<p?(D=0,P=o[g]):o[g]>p?(D=B[R+o[g]],P=M[E+o[g]]):(D=96,P=0),l=1<<m-v,u=1<<_,w=u;do{u-=l,n[d+(A>>v)+u]=I<<24|D<<16|P|0}while(0!==u);for(l=1<<m-1;A&l;)l>>=1;if(0!==l?(A&=l-1,A+=l):A=0,g++,0==--S[m]){if(m===b)break;m=e[r+o[g]]}if(m>y&&(A&f)!==c){for(0===v&&(v=y),d+=w,_=m-v,x=1<<_;_+v<b&&(x-=S[_+v],!(x<=0));)_++,x<<=1;if(k+=1<<_,1===t&&k>852||2===t&&k>592)return 1;c=A&f,n[c]=y<<24|_<<16|d-s|0}}return 0!==A&&(n[d+A]=m-v<<24|64<<16|0),a.bits=y,0};const{Z_FINISH:xr,Z_BLOCK:kr,Z_TREES:Ar,Z_OK:Mr,Z_STREAM_END:Er,Z_NEED_DICT:Sr,Z_STREAM_ERROR:Cr,Z_DATA_ERROR:Ir,Z_MEM_ERROR:Dr,Z_BUF_ERROR:Pr,Z_DEFLATED:Br}=Zt,Rr=12,Tr=30,Ur=t=>(t>>>24&255)+(t>>>8&65280)+((65280&t)<<8)+((255&t)<<24);function Or(){this.mode=0,this.last=!1,this.wrap=0,this.havedict=!1,this.flags=0,this.dmax=0,this.check=0,this.total=0,this.head=null,this.wbits=0,this.wsize=0,this.whave=0,this.wnext=0,this.window=null,this.hold=0,this.bits=0,this.length=0,this.offset=0,this.extra=0,this.lencode=null,this.distcode=null,this.lenbits=0,this.distbits=0,this.ncode=0,this.nlen=0,this.ndist=0,this.have=0,this.next=null,this.lens=new Uint16Array(320),this.work=new Uint16Array(288),this.lendyn=null,this.distdyn=null,this.sane=0,this.back=0,this.was=0}const Lr=t=>{if(!t||!t.state)return Cr;const e=t.state;return t.total_in=t.total_out=e.total=0,t.msg="",e.wrap&&(t.adler=1&e.wrap),e.mode=1,e.last=0,e.havedict=0,e.dmax=32768,e.head=null,e.hold=0,e.bits=0,e.lencode=e.lendyn=new Int32Array(852),e.distcode=e.distdyn=new Int32Array(592),e.sane=1,e.back=-1,Mr},Fr=t=>{if(!t||!t.state)return Cr;const e=t.state;return e.wsize=0,e.whave=0,e.wnext=0,Lr(t)},Nr=(t,e)=>{let r;if(!t||!t.state)return Cr;const i=t.state;return e<0?(r=0,e=-e):(r=1+(e>>4),e<48&&(e&=15)),e&&(e<8||e>15)?Cr:(null!==i.window&&i.wbits!==e&&(i.window=null),i.wrap=r,i.wbits=e,Fr(t))},zr=(t,e)=>{if(!t)return Cr;const r=new Or;t.state=r,r.window=null;const i=Nr(t,e);return i!==Mr&&(t.state=null),i};let jr,Yr,Vr=!0;const qr=t=>{if(Vr){jr=new Int32Array(512),Yr=new Int32Array(32);let e=0;for(;e<144;)t.lens[e++]=8;for(;e<256;)t.lens[e++]=9;for(;e<280;)t.lens[e++]=7;for(;e<288;)t.lens[e++]=8;for(vr(1,t.lens,0,288,jr,0,t.work,{bits:9}),e=0;e<32;)t.lens[e++]=5;vr(2,t.lens,0,32,Yr,0,t.work,{bits:5}),Vr=!1}t.lencode=jr,t.lenbits=9,t.distcode=Yr,t.distbits=5},Xr=(t,e,r,i)=>{let n;const s=t.state;return null===s.window&&(s.wsize=1<<s.wbits,s.wnext=0,s.whave=0,s.window=new Uint8Array(s.wsize)),i>=s.wsize?(s.window.set(e.subarray(r-s.wsize,r),0),s.wnext=0,s.whave=s.wsize):(n=s.wsize-s.wnext,n>i&&(n=i),s.window.set(e.subarray(r-i,r-i+n),s.wnext),(i-=n)?(s.window.set(e.subarray(r-i,r),0),s.wnext=i,s.whave=s.wsize):(s.wnext+=n,s.wnext===s.wsize&&(s.wnext=0),s.whave<s.wsize&&(s.whave+=n))),0};var Gr=Fr,$r=zr,Wr=(t,e)=>{let r,i,n,s,o,a,h,l,u,c,f,d,p,m,g,w,b,y,_,v,x,k,A=0;const M=new Uint8Array(4);let E,S;const C=new Uint8Array([16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15]);if(!t||!t.state||!t.output||!t.input&&0!==t.avail_in)return Cr;r=t.state,r.mode===Rr&&(r.mode=13),o=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,a=t.avail_in,l=r.hold,u=r.bits,c=a,f=h,k=Mr;t:for(;;)switch(r.mode){case 1:if(0===r.wrap){r.mode=13;break}for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(2&r.wrap&&35615===l){r.check=0,M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0),l=0,u=0,r.mode=2;break}if(r.flags=0,r.head&&(r.head.done=!1),!(1&r.wrap)||(((255&l)<<8)+(l>>8))%31){t.msg="incorrect header check",r.mode=Tr;break}if((15&l)!==Br){t.msg="unknown compression method",r.mode=Tr;break}if(l>>>=4,u-=4,x=8+(15&l),0===r.wbits)r.wbits=x;else if(x>r.wbits){t.msg="invalid window size",r.mode=Tr;break}r.dmax=1<<r.wbits,t.adler=r.check=1,r.mode=512&l?10:Rr,l=0,u=0;break;case 2:for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(r.flags=l,(255&r.flags)!==Br){t.msg="unknown compression method",r.mode=Tr;break}if(57344&r.flags){t.msg="unknown header flags set",r.mode=Tr;break}r.head&&(r.head.text=l>>8&1),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0,r.mode=3;case 3:for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.head&&(r.head.time=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,M[2]=l>>>16&255,M[3]=l>>>24&255,r.check=$t(r.check,M,4,0)),l=0,u=0,r.mode=4;case 4:for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.head&&(r.head.xflags=255&l,r.head.os=l>>8),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0,r.mode=5;case 5:if(1024&r.flags){for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.length=l,r.head&&(r.head.extra_len=l),512&r.flags&&(M[0]=255&l,M[1]=l>>>8&255,r.check=$t(r.check,M,2,0)),l=0,u=0}else r.head&&(r.head.extra=null);r.mode=6;case 6:if(1024&r.flags&&(d=r.length,d>a&&(d=a),d&&(r.head&&(x=r.head.extra_len-r.length,r.head.extra||(r.head.extra=new Uint8Array(r.head.extra_len)),r.head.extra.set(i.subarray(s,s+d),x)),512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,r.length-=d),r.length))break t;r.length=0,r.mode=7;case 7:if(2048&r.flags){if(0===a)break t;d=0;do{x=i[s+d++],r.head&&x&&r.length<65536&&(r.head.name+=String.fromCharCode(x))}while(x&&d<a);if(512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,x)break t}else r.head&&(r.head.name=null);r.length=0,r.mode=8;case 8:if(4096&r.flags){if(0===a)break t;d=0;do{x=i[s+d++],r.head&&x&&r.length<65536&&(r.head.comment+=String.fromCharCode(x))}while(x&&d<a);if(512&r.flags&&(r.check=$t(r.check,i,d,s)),a-=d,s+=d,x)break t}else r.head&&(r.head.comment=null);r.mode=9;case 9:if(512&r.flags){for(;u<16;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l!==(65535&r.check)){t.msg="header crc mismatch",r.mode=Tr;break}l=0,u=0}r.head&&(r.head.hcrc=r.flags>>9&1,r.head.done=!0),t.adler=r.check=0,r.mode=Rr;break;case 10:for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}t.adler=r.check=Ur(l),l=0,u=0,r.mode=11;case 11:if(0===r.havedict)return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,Sr;t.adler=r.check=1,r.mode=Rr;case Rr:if(e===kr||e===Ar)break t;case 13:if(r.last){l>>>=7&u,u-=7&u,r.mode=27;break}for(;u<3;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}switch(r.last=1&l,l>>>=1,u-=1,3&l){case 0:r.mode=14;break;case 1:if(qr(r),r.mode=20,e===Ar){l>>>=2,u-=2;break t}break;case 2:r.mode=17;break;case 3:t.msg="invalid block type",r.mode=Tr}l>>>=2,u-=2;break;case 14:for(l>>>=7&u,u-=7&u;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if((65535&l)!=(l>>>16^65535)){t.msg="invalid stored block lengths",r.mode=Tr;break}if(r.length=65535&l,l=0,u=0,r.mode=15,e===Ar)break t;case 15:r.mode=16;case 16:if(d=r.length,d){if(d>a&&(d=a),d>h&&(d=h),0===d)break t;n.set(i.subarray(s,s+d),o),a-=d,s+=d,h-=d,o+=d,r.length-=d;break}r.mode=Rr;break;case 17:for(;u<14;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(r.nlen=257+(31&l),l>>>=5,u-=5,r.ndist=1+(31&l),l>>>=5,u-=5,r.ncode=4+(15&l),l>>>=4,u-=4,r.nlen>286||r.ndist>30){t.msg="too many length or distance symbols",r.mode=Tr;break}r.have=0,r.mode=18;case 18:for(;r.have<r.ncode;){for(;u<3;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.lens[C[r.have++]]=7&l,l>>>=3,u-=3}for(;r.have<19;)r.lens[C[r.have++]]=0;if(r.lencode=r.lendyn,r.lenbits=7,E={bits:r.lenbits},k=vr(0,r.lens,0,19,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid code lengths set",r.mode=Tr;break}r.have=0,r.mode=19;case 19:for(;r.have<r.nlen+r.ndist;){for(;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(b<16)l>>>=g,u-=g,r.lens[r.have++]=b;else{if(16===b){for(S=g+2;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l>>>=g,u-=g,0===r.have){t.msg="invalid bit length repeat",r.mode=Tr;break}x=r.lens[r.have-1],d=3+(3&l),l>>>=2,u-=2}else if(17===b){for(S=g+3;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=g,u-=g,x=0,d=3+(7&l),l>>>=3,u-=3}else{for(S=g+7;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=g,u-=g,x=0,d=11+(127&l),l>>>=7,u-=7}if(r.have+d>r.nlen+r.ndist){t.msg="invalid bit length repeat",r.mode=Tr;break}for(;d--;)r.lens[r.have++]=x}}if(r.mode===Tr)break;if(0===r.lens[256]){t.msg="invalid code -- missing end-of-block",r.mode=Tr;break}if(r.lenbits=9,E={bits:r.lenbits},k=vr(1,r.lens,0,r.nlen,r.lencode,0,r.work,E),r.lenbits=E.bits,k){t.msg="invalid literal/lengths set",r.mode=Tr;break}if(r.distbits=6,r.distcode=r.distdyn,E={bits:r.distbits},k=vr(2,r.lens,r.nlen,r.ndist,r.distcode,0,r.work,E),r.distbits=E.bits,k){t.msg="invalid distances set",r.mode=Tr;break}if(r.mode=20,e===Ar)break t;case 20:r.mode=21;case 21:if(a>=6&&h>=258){t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,gr(t,f),o=t.next_out,n=t.output,h=t.avail_out,s=t.next_in,i=t.input,a=t.avail_in,l=r.hold,u=r.bits,r.mode===Rr&&(r.back=-1);break}for(r.back=0;A=r.lencode[l&(1<<r.lenbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(w&&0==(240&w)){for(y=g,_=w,v=b;A=r.lencode[v+((l&(1<<y+_)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,r.length=b,0===w){r.mode=26;break}if(32&w){r.back=-1,r.mode=Rr;break}if(64&w){t.msg="invalid literal/length code",r.mode=Tr;break}r.extra=15&w,r.mode=22;case 22:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.length+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}r.was=r.length,r.mode=23;case 23:for(;A=r.distcode[l&(1<<r.distbits)-1],g=A>>>24,w=A>>>16&255,b=65535&A,!(g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(0==(240&w)){for(y=g,_=w,v=b;A=r.distcode[v+((l&(1<<y+_)-1)>>y)],g=A>>>24,w=A>>>16&255,b=65535&A,!(y+g<=u);){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}l>>>=y,u-=y,r.back+=y}if(l>>>=g,u-=g,r.back+=g,64&w){t.msg="invalid distance code",r.mode=Tr;break}r.offset=b,r.extra=15&w,r.mode=24;case 24:if(r.extra){for(S=r.extra;u<S;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}r.offset+=l&(1<<r.extra)-1,l>>>=r.extra,u-=r.extra,r.back+=r.extra}if(r.offset>r.dmax){t.msg="invalid distance too far back",r.mode=Tr;break}r.mode=25;case 25:if(0===h)break t;if(d=f-h,r.offset>d){if(d=r.offset-d,d>r.whave&&r.sane){t.msg="invalid distance too far back",r.mode=Tr;break}d>r.wnext?(d-=r.wnext,p=r.wsize-d):p=r.wnext-d,d>r.length&&(d=r.length),m=r.window}else m=n,p=o-r.offset,d=r.length;d>h&&(d=h),h-=d,r.length-=d;do{n[o++]=m[p++]}while(--d);0===r.length&&(r.mode=21);break;case 26:if(0===h)break t;n[o++]=r.length,h--,r.mode=21;break;case 27:if(r.wrap){for(;u<32;){if(0===a)break t;a--,l|=i[s++]<<u,u+=8}if(f-=h,t.total_out+=f,r.total+=f,f&&(t.adler=r.check=r.flags?$t(r.check,n,f,o-f):Xt(r.check,n,f,o-f)),f=h,(r.flags?l:Ur(l))!==r.check){t.msg="incorrect data check",r.mode=Tr;break}l=0,u=0}r.mode=28;case 28:if(r.wrap&&r.flags){for(;u<32;){if(0===a)break t;a--,l+=i[s++]<<u,u+=8}if(l!==(4294967295&r.total)){t.msg="incorrect length check",r.mode=Tr;break}l=0,u=0}r.mode=29;case 29:k=Er;break t;case Tr:k=Ir;break t;case 31:return Dr;default:return Cr}return t.next_out=o,t.avail_out=h,t.next_in=s,t.avail_in=a,r.hold=l,r.bits=u,(r.wsize||f!==t.avail_out&&r.mode<Tr&&(r.mode<27||e!==xr))&&Xr(t,t.output,t.next_out,f-t.avail_out),c-=t.avail_in,f-=t.avail_out,t.total_in+=c,t.total_out+=f,r.total+=f,r.wrap&&f&&(t.adler=r.check=r.flags?$t(r.check,n,f,t.next_out-f):Xt(r.check,n,f,t.next_out-f)),t.data_type=r.bits+(r.last?64:0)+(r.mode===Rr?128:0)+(20===r.mode||15===r.mode?256:0),(0===c&&0===f||e===xr)&&k===Mr&&(k=Pr),k},Zr=t=>{if(!t||!t.state)return Cr;let e=t.state;return e.window&&(e.window=null),t.state=null,Mr},Hr=(t,e)=>{if(!t||!t.state)return Cr;const r=t.state;return 0==(2&r.wrap)?Cr:(r.head=e,e.done=!1,Mr)},Kr=(t,e)=>{const r=e.length;let i,n,s;return t&&t.state?(i=t.state,0!==i.wrap&&11!==i.mode?Cr:11===i.mode&&(n=1,n=Xt(n,e,r,0),n!==i.check)?Ir:(s=Xr(t,e,r,r),s?(i.mode=31,Dr):(i.havedict=1,Mr))):Cr},Jr=function(){this.text=0,this.time=0,this.xflags=0,this.os=0,this.extra=null,this.extra_len=0,this.name="",this.comment="",this.hcrc=0,this.done=!1};const Qr=Object.prototype.toString,{Z_NO_FLUSH:ti,Z_FINISH:ei,Z_OK:ri,Z_STREAM_END:ii,Z_NEED_DICT:ni,Z_STREAM_ERROR:si,Z_DATA_ERROR:oi,Z_MEM_ERROR:ai}=Zt;function hi(t){this.options=Ze({chunkSize:65536,windowBits:15,to:""},t||{});const e=this.options;e.raw&&e.windowBits>=0&&e.windowBits<16&&(e.windowBits=-e.windowBits,0===e.windowBits&&(e.windowBits=-15)),!(e.windowBits>=0&&e.windowBits<16)||t&&t.windowBits||(e.windowBits+=32),e.windowBits>15&&e.windowBits<48&&0==(15&e.windowBits)&&(e.windowBits|=15),this.err=0,this.msg="",this.ended=!1,this.chunks=[],this.strm=new rr,this.strm.avail_out=0;let r=$r(this.strm,e.windowBits);if(r!==ri)throw new Error(Wt[r]);if(this.header=new Jr,Hr(this.strm,this.header),e.dictionary&&("string"==typeof e.dictionary?e.dictionary=Qe(e.dictionary):"[object ArrayBuffer]"===Qr.call(e.dictionary)&&(e.dictionary=new Uint8Array(e.dictionary)),e.raw&&(r=Kr(this.strm,e.dictionary),r!==ri)))throw new Error(Wt[r])}function li(t,e){const r=new hi(e);if(r.push(t),r.err)throw r.msg||Wt[r.err];return r.result}hi.prototype.push=function(t,e){const r=this.strm,i=this.options.chunkSize,n=this.options.dictionary;let s,o,a;if(this.ended)return!1;for(o=e===~~e?e:!0===e?ei:ti,"[object ArrayBuffer]"===Qr.call(t)?r.input=new Uint8Array(t):r.input=t,r.next_in=0,r.avail_in=r.input.length;;){for(0===r.avail_out&&(r.output=new Uint8Array(i),r.next_out=0,r.avail_out=i),s=Wr(r,o),s===ni&&n&&(s=Kr(r,n),s===ri?s=Wr(r,o):s===oi&&(s=ni));r.avail_in>0&&s===ii&&r.state.wrap>0&&0!==t[r.next_in];)Gr(r),s=Wr(r,o);switch(s){case si:case oi:case ni:case ai:return this.onEnd(s),this.ended=!0,!1}if(a=r.avail_out,r.next_out&&(0===r.avail_out||s===ii))if("string"===this.options.to){let t=er(r.output,r.next_out),e=r.next_out-t,n=tr(r.output,t);r.next_out=e,r.avail_out=i-e,e&&r.output.set(r.output.subarray(t,t+e),0),this.onData(n)}else this.onData(r.output.length===r.next_out?r.output:r.output.subarray(0,r.next_out));if(s!==ri||0!==a){if(s===ii)return s=Zr(this.strm),this.onEnd(s),this.ended=!0,!0;if(0===r.avail_in)break}}return!0},hi.prototype.onData=function(t){this.chunks.push(t)},hi.prototype.onEnd=function(t){t===ri&&("string"===this.options.to?this.result=this.chunks.join(""):this.result=He(this.chunks)),this.chunks=[],this.err=t,this.msg=this.strm.msg};var ui={Inflate:hi,inflate:li,inflateRaw:function(t,e){return(e=e||{}).raw=!0,li(t,e)},ungzip:li,constants:Zt};const{Deflate:ci,deflate:fi,deflateRaw:di,gzip:pi}=mr,{Inflate:mi,inflate:gi,inflateRaw:wi,ungzip:bi}=ui;var yi=fi,_i=mi,vi=gi;const xi=[137,80,78,71,13,10,26,10],ki=[];for(let t=0;t<256;t++){let e=t;for(let t=0;t<8;t++)1&e?e=3988292384^e>>>1:e>>>=1;ki[t]=e}const Ai=4294967295;function Mi(t,e){return(function(t,e,r){let i=4294967295;for(let t=0;t<r;t++)i=ki[255&(i^e[t])]^i>>>8;return i}(0,t,e)^Ai)>>>0}var Ei,Si,Ci,Ii;!function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.GREYSCALE=0]="GREYSCALE",t[t.TRUECOLOUR=2]="TRUECOLOUR",t[t.INDEXED_COLOUR=3]="INDEXED_COLOUR",t[t.GREYSCALE_ALPHA=4]="GREYSCALE_ALPHA",t[t.TRUECOLOUR_ALPHA=6]="TRUECOLOUR_ALPHA"}(Ei||(Ei={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.DEFLATE=0]="DEFLATE"}(Si||(Si={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.ADAPTIVE=0]="ADAPTIVE"}(Ci||(Ci={})),function(t){t[t.UNKNOWN=-1]="UNKNOWN",t[t.NO_INTERLACE=0]="NO_INTERLACE",t[t.ADAM7=1]="ADAM7"}(Ii||(Ii={}));const Di=new Uint8Array(0),Pi=new Uint16Array([255]),Bi=255===new Uint8Array(Pi.buffer)[0];class Ri extends ct{constructor(t,e={}){super(t);const{checkCrc:r=!1}=e;this._checkCrc=r,this._inflator=new _i,this._png={width:-1,height:-1,channels:-1,data:new Uint8Array(0),depth:1,text:{}},this._end=!1,this._hasPalette=!1,this._palette=[],this._compressionMethod=Si.UNKNOWN,this._filterMethod=Ci.UNKNOWN,this._interlaceMethod=Ii.UNKNOWN,this._colorType=-1,this.setBigEndian()}decode(){for(this.decodeSignature();!this._end;)this.decodeChunk();return this.decodeImage(),this._png}decodeSignature(){for(let t=0;t<xi.length;t++)if(this.readUint8()!==xi[t])throw new Error(`wrong PNG signature. Byte at ${t} should be ${xi[t]}.`)}decodeChunk(){const t=this.readUint32(),e=this.readChars(4),r=this.offset;switch(e){case"IHDR":this.decodeIHDR();break;case"PLTE":this.decodePLTE(t);break;case"IDAT":this.decodeIDAT(t);break;case"IEND":this._end=!0;break;case"tRNS":this.decodetRNS(t);break;case"tEXt":this.decodetEXt(t);break;case"pHYs":this.decodepHYs();break;default:this.skip(t)}if(this.offset-r!==t)throw new Error(`Length mismatch while decoding chunk ${e}`);if(this._checkCrc){const r=this.readUint32(),i=t+4,n=Mi(new Uint8Array(this.buffer,this.byteOffset+this.offset-i-4,i),i);if(n!==r)throw new Error(`CRC mismatch for chunk ${e}. Expected ${r}, found ${n}`)}else this.skip(4)}decodeIHDR(){const t=this._png;t.width=this.readUint32(),t.height=this.readUint32(),t.depth=function(t){if(1!==t&&2!==t&&4!==t&&8!==t&&16!==t)throw new Error(`invalid bit depth: ${t}`);return t}(this.readUint8());const e=this.readUint8();let r;switch(this._colorType=e,e){case Ei.GREYSCALE:r=1;break;case Ei.TRUECOLOUR:r=3;break;case Ei.INDEXED_COLOUR:r=1;break;case Ei.GREYSCALE_ALPHA:r=2;break;case Ei.TRUECOLOUR_ALPHA:r=4;break;default:throw new Error(`Unknown color type: ${e}`)}if(this._png.channels=r,this._compressionMethod=this.readUint8(),this._compressionMethod!==Si.DEFLATE)throw new Error(`Unsupported compression method: ${this._compressionMethod}`);this._filterMethod=this.readUint8(),this._interlaceMethod=this.readUint8()}decodePLTE(t){if(t%3!=0)throw new RangeError(`PLTE field length must be a multiple of 3. Got ${t}`);const e=t/3;this._hasPalette=!0;const r=[];this._palette=r;for(let t=0;t<e;t++)r.push([this.readUint8(),this.readUint8(),this.readUint8()])}decodeIDAT(t){this._inflator.push(new Uint8Array(this.buffer,this.offset+this.byteOffset,t)),this.skip(t)}decodetRNS(t){if(3===this._colorType){if(t>this._palette.length)throw new Error(`tRNS chunk contains more alpha values than there are palette colors (${t} vs ${this._palette.length})`);let e=0;for(;e<t;e++){const t=this.readByte();this._palette[e].push(t)}for(;e<this._palette.length;e++)this._palette[e].push(255)}}decodetEXt(t){let e,r="";for(;"\0"!==(e=this.readChar());)r+=e;this._png.text[r]=this.readChars(t-r.length-1)}decodepHYs(){const t=this.readUint32(),e=this.readUint32(),r=this.readByte();this._png.resolution={x:t,y:e,unit:r}}decodeImage(){if(this._inflator.err)throw new Error(`Error while decompressing the data: ${this._inflator.err}`);const t=this._inflator.result;if(this._filterMethod!==Ci.ADAPTIVE)throw new Error(`Filter method ${this._filterMethod} not supported`);if(this._interlaceMethod!==Ii.NO_INTERLACE)throw new Error(`Interlace method ${this._interlaceMethod} not supported`);this.decodeInterlaceNull(t)}decodeInterlaceNull(t){const e=this._png.height,r=this._png.channels*this._png.depth/8,i=this._png.width*r,n=new Uint8Array(this._png.height*i);let s,o,a=Di,h=0;for(let l=0;l<e;l++){switch(s=t.subarray(h+1,h+1+i),o=n.subarray(l*i,(l+1)*i),t[h]){case 0:Ti(s,o,i);break;case 1:Ui(s,o,i,r);break;case 2:Oi(s,o,a,i);break;case 3:Li(s,o,a,i,r);break;case 4:Fi(s,o,a,i,r);break;default:throw new Error(`Unsupported filter: ${t[h]}`)}a=o,h+=i+1}if(this._hasPalette&&(this._png.palette=this._palette),16===this._png.depth){const t=new Uint16Array(n.buffer);if(Bi)for(let e=0;e<t.length;e++)t[e]=(255&(l=t[e]))<<8|l>>8&255;this._png.data=t}else this._png.data=n;var l}}function Ti(t,e,r){for(let i=0;i<r;i++)e[i]=t[i]}function Ui(t,e,r,i){let n=0;for(;n<i;n++)e[n]=t[n];for(;n<r;n++)e[n]=t[n]+e[n-i]&255}function Oi(t,e,r,i){let n=0;if(0===r.length)for(;n<i;n++)e[n]=t[n];else for(;n<i;n++)e[n]=t[n]+r[n]&255}function Li(t,e,r,i,n){let s=0;if(0===r.length){for(;s<n;s++)e[s]=t[s];for(;s<i;s++)e[s]=t[s]+(e[s-n]>>1)&255}else{for(;s<n;s++)e[s]=t[s]+(r[s]>>1)&255;for(;s<i;s++)e[s]=t[s]+(e[s-n]+r[s]>>1)&255}}function Fi(t,e,r,i,n){let s=0;if(0===r.length){for(;s<n;s++)e[s]=t[s];for(;s<i;s++)e[s]=t[s]+e[s-n]&255}else{for(;s<n;s++)e[s]=t[s]+r[s]&255;for(;s<i;s++)e[s]=t[s]+Ni(e[s-n],r[s],r[s-n])&255}}function Ni(t,e,r){const i=t+e-r,n=Math.abs(i-t),s=Math.abs(i-e),o=Math.abs(i-r);return n<=s&&n<=o?t:s<=o?e:r}const zi={level:3};class ji extends ct{constructor(t,e={}){super(),this._colorType=Ei.UNKNOWN,this._zlibOptions=Object.assign({},zi,e.zlib),this._png=this._checkData(t),this.setBigEndian()}encode(){return this.encodeSignature(),this.encodeIHDR(),this.encodeData(),this.encodeIEND(),this.toArray()}encodeSignature(){this.writeBytes(xi)}encodeIHDR(){this.writeUint32(13),this.writeChars("IHDR"),this.writeUint32(this._png.width),this.writeUint32(this._png.height),this.writeByte(this._png.depth),this.writeByte(this._colorType),this.writeByte(Si.DEFLATE),this.writeByte(Ci.ADAPTIVE),this.writeByte(Ii.NO_INTERLACE),this.writeCrc(17)}encodeIEND(){this.writeUint32(0),this.writeChars("IEND"),this.writeCrc(4)}encodeIDAT(t){this.writeUint32(t.length),this.writeChars("IDAT"),this.writeBytes(t),this.writeCrc(t.length+4)}encodeData(){const{width:t,height:e,channels:r,depth:i,data:n}=this._png,s=r*t,o=(new ct).setBigEndian();let a=0;for(let t=0;t<e;t++)if(o.writeByte(0),8===i)a=Vi(n,o,s,a);else{if(16!==i)throw new Error("unreachable");a=qi(n,o,s,a)}const h=o.toArray(),l=yi(h,this._zlibOptions);this.encodeIDAT(l)}_checkData(t){const{colorType:e,channels:r,depth:i}=function(t){const{channels:e=4,depth:r=8}=t;if(4!==e&&3!==e&&2!==e&&1!==e)throw new RangeError(`unsupported number of channels: ${e}`);if(8!==r&&16!==r)throw new RangeError(`unsupported bit depth: ${r}`);const i={channels:e,depth:r,colorType:Ei.UNKNOWN};switch(e){case 4:i.colorType=Ei.TRUECOLOUR_ALPHA;break;case 3:i.colorType=Ei.TRUECOLOUR;break;case 1:i.colorType=Ei.GREYSCALE;break;case 2:i.colorType=Ei.GREYSCALE_ALPHA;break;default:throw new Error("unsupported number of channels")}return i}(t),n={width:Yi(t.width,"width"),height:Yi(t.height,"height"),channels:r,data:t.data,depth:i,text:{}};this._colorType=e;const s=n.width*n.height*r;if(n.data.length!==s)throw new RangeError(`wrong data size. Found ${n.data.length}, expected ${s}`);return n}writeCrc(t){this.writeUint32(Mi(new Uint8Array(this.buffer,this.byteOffset+this.offset-t,t),t))}}function Yi(t,e){if(Number.isInteger(t)&&t>0)return t;throw new TypeError(`${e} must be a positive integer`)}function Vi(t,e,r,i){for(let n=0;n<r;n++)e.writeByte(t[i++]);return i}function qi(t,e,r,i){for(let n=0;n<r;n++)e.writeUint16(t[i++]);return i}var Xi;!function(t){t[t.UNKNOWN=0]="UNKNOWN",t[t.METRE=1]="METRE"}(Xi||(Xi={}));var Gi=__webpack_require__(7870);let $i="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",Wi=new Uint8Array(256);for(let t=0;t<$i.length;t++)Wi[$i.charCodeAt(t)]=t;function Zi(t,e){return`data:${e};base64,${function(t){let e,r=t.length,i="";for(e=0;e<r;e+=3)i+=$i[t[e]>>2],i+=$i[(3&t[e])<<4|t[e+1]>>4],i+=$i[(15&t[e+1])<<2|t[e+2]>>6],i+=$i[63&t[e+2]];return r%3==2?i=`${i.substring(0,i.length-1)}=`:r%3==1&&(i=`${i.substring(0,i.length-2)}==`),i}(t)}`}const Hi=self.ImageData,Ki=self.Image;function Ji(t,e){let r=self.document.createElement("canvas");return r.width=t,r.height=e,r}function Qi(t,e={}){const r={width:t.width,height:t.height,data:t.getRGBAData()};return(0,Gi.encode)(r,e.quality).data}function tn(t,e){const r={width:t.width,height:t.height,channels:t.channels,depth:t.bitDepth,data:t.data};return 1!==r.depth&&32!==r.depth||(r.depth=8,r.channels=4,r.data=t.getRGBAData()),function(t,e){return new ji(t,e).encode()}(r,e)}const en={save(t,e={}){const{useCanvas:r=!1,encoder:i}=e;let{format:n}=e;if(!n){const e=/\.(?<format>[a-zA-Z]+)$/.exec(t);e&&(n=e.groups.format.toLowerCase())}if(!n)throw new Error("file format not provided");return new Promise(((t,e)=>{let s,o;switch(n.toLowerCase()){case"png":r?s=this.getCanvas().pngStream():o=tn(this,i);break;case"jpg":case"jpeg":r?s=this.getCanvas().jpegStream():o=Qi(this,i);break;case"bmp":o=(0,ht.encode)(this,i);break;default:throw new RangeError(`invalid output format: ${n}`)}if(s){let r=function(){throw new Error("createWriteStream does not exist in the browser")}();r.on("finish",t),r.on("error",e),s.pipe(r)}else o&&function(){throw new Error("writeFile does not exist in the browser")}()}))},toDataURL(t="image/png",e={}){"object"==typeof t&&(e=t,t="image/png");const{useCanvas:r=!1,encoder:i}=e;function n(e,r){return Zi(e(r,i),t)}return"image/bmp"===(t=function(t){return t.includes("/")||(t=`image/${t}`),t}(t))?n(ht.encode,this):"image/png"!==t||r?"image/jpeg"!==t||r?this.getCanvas().toDataURL(t):n(Qi,this):n(tn,this)},toBuffer(t={}){const{format:e="png",encoder:r}=t;switch(e.toLowerCase()){case"png":return tn(this,r);case"jpeg":case"jpg":return Qi(this,r);case"bmp":return(0,ht.encode)(this,r);default:throw new RangeError(`invalid output format: ${e}`)}},toBase64(t="image/png",e={}){if(e.async)return this.toDataURL(t,e).then((function(t){return t.substring(t.indexOf(",")+1)}));{const r=this.toDataURL(t,e);return r.substring(r.indexOf(",")+1)}},toBlob(t="image/png",e=.8){return ot(this.getCanvas(),t,e)},getCanvas(){const t=new Hi(this.getRGBAData({clamped:!0}),this.width,this.height);let e=Ji(this.width,this.height);return e.getContext("2d").putImageData(t,0,0),e}};var rn=__webpack_require__(2251),nn=__webpack_require__.n(rn);let sn={configurable:!0,enumerable:!1,get:void 0};const on="GREY",an="RGB",hn="HSL",ln="HSV",un="CMYK",cn="BINARY",fn="RGBA",dn={};dn.BINARY={components:1,alpha:0,bitDepth:1,colorModel:on},dn.GREYA={components:1,alpha:1,bitDepth:8,colorModel:on},dn.GREY={components:1,alpha:0,bitDepth:8,colorModel:on},dn[fn]={components:3,alpha:1,bitDepth:8,colorModel:an},dn.RGB={components:3,alpha:0,bitDepth:8,colorModel:an},dn.CMYK={components:4,alpha:0,bitDepth:8,colorModel:un},dn.CMYKA={components:4,alpha:1,bitDepth:8,colorModel:un};const pn=[1,8,16,32];var mn=__webpack_require__(9464),gn=__webpack_require__(9184),wn=__webpack_require__.n(gn);__webpack_require__(9798);const bn=new TextDecoder("utf-8"),yn=new TextEncoder;class _n{constructor(t=8192,e={}){let r=!1;"number"==typeof t?t=new ArrayBuffer(t):(r=!0,this.lastWrittenByte=t.byteLength);const i=e.offset?e.offset>>>0:0,n=t.byteLength-i;let s=i;(ArrayBuffer.isView(t)||t instanceof _n)&&(t.byteLength!==t.buffer.byteLength&&(s=t.byteOffset+i),t=t.buffer),this.lastWrittenByte=r?n:0,this.buffer=t,this.length=n,this.byteLength=n,this.byteOffset=s,this.offset=0,this.littleEndian=!0,this._data=new DataView(this.buffer,s,n),this._mark=0,this._marks=[]}available(t=1){return this.offset+t<=this.length}isLittleEndian(){return this.littleEndian}setLittleEndian(){return this.littleEndian=!0,this}isBigEndian(){return!this.littleEndian}setBigEndian(){return this.littleEndian=!1,this}skip(t=1){return this.offset+=t,this}seek(t){return this.offset=t,this}mark(){return this._mark=this.offset,this}reset(){return this.offset=this._mark,this}pushMark(){return this._marks.push(this.offset),this}popMark(){const t=this._marks.pop();if(void 0===t)throw new Error("Mark stack empty");return this.seek(t),this}rewind(){return this.offset=0,this}ensureAvailable(t=1){if(!this.available(t)){const e=2*(this.offset+t),r=new Uint8Array(e);r.set(new Uint8Array(this.buffer)),this.buffer=r.buffer,this.length=this.byteLength=e,this._data=new DataView(this.buffer)}return this}readBoolean(){return 0!==this.readUint8()}readInt8(){return this._data.getInt8(this.offset++)}readUint8(){return this._data.getUint8(this.offset++)}readByte(){return this.readUint8()}readBytes(t=1){const e=new Uint8Array(t);for(let r=0;r<t;r++)e[r]=this.readByte();return e}readInt16(){const t=this._data.getInt16(this.offset,this.littleEndian);return this.offset+=2,t}readUint16(){const t=this._data.getUint16(this.offset,this.littleEndian);return this.offset+=2,t}readInt32(){const t=this._data.getInt32(this.offset,this.littleEndian);return this.offset+=4,t}readUint32(){const t=this._data.getUint32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat32(){const t=this._data.getFloat32(this.offset,this.littleEndian);return this.offset+=4,t}readFloat64(){const t=this._data.getFloat64(this.offset,this.littleEndian);return this.offset+=8,t}readChar(){return String.fromCharCode(this.readInt8())}readChars(t=1){let e="";for(let r=0;r<t;r++)e+=this.readChar();return e}readUtf8(t=1){return e=this.readBytes(t),bn.decode(e);var e}writeBoolean(t){return this.writeUint8(t?255:0),this}writeInt8(t){return this.ensureAvailable(1),this._data.setInt8(this.offset++,t),this._updateLastWrittenByte(),this}writeUint8(t){return this.ensureAvailable(1),this._data.setUint8(this.offset++,t),this._updateLastWrittenByte(),this}writeByte(t){return this.writeUint8(t)}writeBytes(t){this.ensureAvailable(t.length);for(let e=0;e<t.length;e++)this._data.setUint8(this.offset++,t[e]);return this._updateLastWrittenByte(),this}writeInt16(t){return this.ensureAvailable(2),this._data.setInt16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeUint16(t){return this.ensureAvailable(2),this._data.setUint16(this.offset,t,this.littleEndian),this.offset+=2,this._updateLastWrittenByte(),this}writeInt32(t){return this.ensureAvailable(4),this._data.setInt32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeUint32(t){return this.ensureAvailable(4),this._data.setUint32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat32(t){return this.ensureAvailable(4),this._data.setFloat32(this.offset,t,this.littleEndian),this.offset+=4,this._updateLastWrittenByte(),this}writeFloat64(t){return this.ensureAvailable(8),this._data.setFloat64(this.offset,t,this.littleEndian),this.offset+=8,this._updateLastWrittenByte(),this}writeChar(t){return this.writeUint8(t.charCodeAt(0))}writeChars(t){for(let e=0;e<t.length;e++)this.writeUint8(t.charCodeAt(e));return this}writeUtf8(t){return this.writeBytes(function(t){return yn.encode(t)}(t))}toArray(){return new Uint8Array(this.buffer,this.byteOffset,this.lastWrittenByte)}_updateLastWrittenByte(){this.offset>this.lastWrittenByte&&(this.lastWrittenByte=this.offset)}}const vn={33434:"ExposureTime",33437:"FNumber",34850:"ExposureProgram",34852:"SpectralSensitivity",34855:"ISOSpeedRatings",34856:"OECF",34864:"SensitivityType",34865:"StandardOutputSensitivity",34866:"RecommendedExposureIndex",34867:"ISOSpeed",34868:"ISOSpeedLatitudeyyy",34869:"ISOSpeedLatitudezzz",36864:"ExifVersion",36867:"DateTimeOriginal",36868:"DateTimeDigitized",37121:"ComponentsConfiguration",37122:"CompressedBitsPerPixel",37377:"ShutterSpeedValue",37378:"ApertureValue",37379:"BrightnessValue",37380:"ExposureBiasValue",37381:"MaxApertureValue",37382:"SubjectDistance",37383:"MeteringMode",37384:"LightSource",37385:"Flash",37386:"FocalLength",37396:"SubjectArea",37500:"MakerNote",37510:"UserComment",37520:"SubsecTime",37521:"SubsecTimeOriginal",37522:"SubsecTimeDigitized",40960:"FlashpixVersion",40961:"ColorSpace",40962:"PixelXDimension",40963:"PixelYDimension",40964:"RelatedSoundFile",41483:"FlashEnergy",41484:"SpatialFrequencyResponse",41486:"FocalPlaneXResolution",41487:"FocalPlaneYResolution",41488:"FocalPlaneResolutionUnit",41492:"SubjectLocation",41493:"ExposureIndex",41495:"SensingMethod",41728:"FileSource",41729:"SceneType",41730:"CFAPattern",41985:"CustomRendered",41986:"ExposureMode",41987:"WhiteBalance",41988:"DigitalZoomRatio",41989:"FocalLengthIn35mmFilm",41990:"SceneCaptureType",41991:"GainControl",41992:"Contrast",41993:"Saturation",41994:"Sharpness",41995:"DeviceSettingDescription",41996:"SubjectDistanceRange",42016:"ImageUniqueID",42032:"CameraOwnerName",42033:"BodySerialNumber",42034:"LensSpecification",42035:"LensMake",42036:"LensModel",42037:"LensSerialNumber",42240:"Gamma"},xn={};for(let t in vn)xn[vn[t]]=Number(t);const kn={0:"GPSVersionID",1:"GPSLatitudeRef",2:"GPSLatitude",3:"GPSLongitudeRef",4:"GPSLongitude",5:"GPSAltitudeRef",6:"GPSAltitude",7:"GPSTimeStamp",8:"GPSSatellites",9:"GPSStatus",10:"GPSMeasureMode",11:"GPSDOP",12:"GPSSpeedRef",13:"GPSSpeed",14:"GPSTrackRef",15:"GPSTrack",16:"GPSImgDirectionRef",17:"GPSImgDirection",18:"GPSMapDatum",19:"GPSDestLatitudeRef",20:"GPSDestLatitude",21:"GPSDestLongitudeRef",22:"GPSDestLongitude",23:"GPSDestBearingRef",24:"GPSDestBearing",25:"GPSDestDistanceRef",26:"GPSDestDistance",27:"GPSProcessingMethod",28:"GPSAreaInformation",29:"GPSDateStamp",30:"GPSDifferential",31:"GPSHPositioningError"},An={};for(let t in kn)An[kn[t]]=Number(t);const Mn={254:"NewSubfileType",255:"SubfileType",256:"ImageWidth",257:"ImageLength",258:"BitsPerSample",259:"Compression",262:"PhotometricInterpretation",263:"Threshholding",264:"CellWidth",265:"CellLength",266:"FillOrder",270:"ImageDescription",271:"Make",272:"Model",273:"StripOffsets",274:"Orientation",277:"SamplesPerPixel",278:"RowsPerStrip",279:"StripByteCounts",280:"MinSampleValue",281:"MaxSampleValue",282:"XResolution",283:"YResolution",284:"PlanarConfiguration",288:"FreeOffsets",289:"FreeByteCounts",290:"GrayResponseUnit",291:"GrayResponseCurve",296:"ResolutionUnit",305:"Software",306:"DateTime",315:"Artist",316:"HostComputer",320:"ColorMap",338:"ExtraSamples",33432:"Copyright",269:"DocumentName",285:"PageName",286:"XPosition",287:"YPosition",292:"T4Options",293:"T6Options",297:"PageNumber",301:"TransferFunction",317:"Predictor",318:"WhitePoint",319:"PrimaryChromaticities",321:"HalftoneHints",322:"TileWidth",323:"TileLength",324:"TileOffsets",325:"TileByteCounts",326:"BadFaxLines",327:"CleanFaxData",328:"ConsecutiveBadFaxLines",330:"SubIFDs",332:"InkSet",333:"InkNames",334:"NumberOfInks",336:"DotRange",337:"TargetPrinter",339:"SampleFormat",340:"SMinSampleValue",341:"SMaxSampleValue",342:"TransferRange",343:"ClipPath",344:"XClipPathUnits",345:"YClipPathUnits",346:"Indexed",347:"JPEGTables",351:"OPIProxy",400:"GlobalParametersIFD",401:"ProfileType",402:"FaxProfile",403:"CodingMethods",404:"VersionYear",405:"ModeNumber",433:"Decode",434:"DefaultImageColor",512:"JPEGProc",513:"JPEGInterchangeFormat",514:"JPEGInterchangeFormatLength",515:"JPEGRestartInterval",517:"JPEGLosslessPredictors",518:"JPEGPointTransforms",519:"JPEGQTables",520:"JPEGDCTables",521:"JPEGACTables",529:"YCbCrCoefficients",530:"YCbCrSubSampling",531:"YCbCrPositioning",532:"ReferenceBlackWhite",559:"StripRowCounts",700:"XMP",32781:"ImageID",34732:"ImageLayer",32932:"WangAnnotatio",33445:"MDFileTag",33446:"MDScalePixel",33447:"MDColorTable",33448:"MDLabName",33449:"MDSampleInfo",33450:"MDPrepDate",33451:"MDPrepTime",33452:"MDFileUnits",33550:"ModelPixelScaleTag",33723:"IPTC",33918:"INGRPacketDataTag",33919:"INGRFlagRegisters",33920:"IrasBTransformationMatrix",33922:"ModelTiepointTag",34264:"ModelTransformationTag",34377:"Photoshop",34665:"ExifIFD",34675:"ICCProfile",34735:"GeoKeyDirectoryTag",34736:"GeoDoubleParamsTag",34737:"GeoAsciiParamsTag",34853:"GPSIFD",34908:"HylaFAXFaxRecvParams",34909:"HylaFAXFaxSubAddress",34910:"HylaFAXFaxRecvTime",37724:"ImageSourceData",40965:"InteroperabilityIFD",42112:"GDAL_METADATA",42113:"GDAL_NODATA",50215:"OceScanjobDescription",50216:"OceApplicationSelector",50217:"OceIdentificationNumber",50218:"OceImageLogicCharacteristics",50706:"DNGVersion",50707:"DNGBackwardVersion",50708:"UniqueCameraModel",50709:"LocalizedCameraModel",50710:"CFAPlaneColor",50711:"CFALayout",50712:"LinearizationTable",50713:"BlackLevelRepeatDim",50714:"BlackLevel",50715:"BlackLevelDeltaH",50716:"BlackLevelDeltaV",50717:"WhiteLevel",50718:"DefaultScale",50719:"DefaultCropOrigin",50720:"DefaultCropSize",50721:"ColorMatrix1",50722:"ColorMatrix2",50723:"CameraCalibration1",50724:"CameraCalibration2",50725:"ReductionMatrix1",50726:"ReductionMatrix2",50727:"AnalogBalance",50728:"AsShotNeutral",50729:"AsShotWhiteXY",50730:"BaselineExposure",50731:"BaselineNoise",50732:"BaselineSharpness",50733:"BayerGreenSplit",50734:"LinearResponseLimit",50735:"CameraSerialNumber",50736:"LensInfo",50737:"ChromaBlurRadius",50738:"AntiAliasStrength",50740:"DNGPrivateData",50741:"MakerNoteSafety",50778:"CalibrationIlluminant1",50779:"CalibrationIlluminant2",50780:"BestQualityScale",50784:"AliasLayerMetadata"},En={};for(let t in Mn)En[Mn[t]]=Number(t);const Sn={standard:i,exif:e,gps:r};class Cn{constructor(t){if(!t)throw new Error("missing kind");this.data=new Uint8Array,this.fields=new Map,this.kind=t,this._hasMap=!1,this._map={}}get(t){if("number"==typeof t)return this.fields.get(t);if("string"==typeof t)return this.fields.get(Sn[this.kind].tagsByName[t]);throw new Error("expected a number or string")}get map(){if(!this._hasMap){const t=Sn[this.kind].tagsById;for(let e of this.fields.keys())t[e]&&(this._map[t[e]]=this.fields.get(e));this._hasMap=!0}return this._map}}let In=new Map([[1,[1,Dn]],[2,[1,function(t,e){let r=[],i="";for(let n=0;n<e;n++){let e=String.fromCharCode(t.readUint8());"\0"===e?(r.push(i),i=""):i+=e}return 1===r.length?r[0]:r}]],[3,[2,function(t,e){if(1===e)return t.readUint16();let r=new Uint16Array(e);for(let i=0;i<e;i++)r[i]=t.readUint16();return r}]],[4,[4,function(t,e){if(1===e)return t.readUint32();let r=new Uint32Array(e);for(let i=0;i<e;i++)r[i]=t.readUint32();return r}]],[5,[8,function(t,e){if(1===e)return t.readUint32()/t.readUint32();let r=new Array(e);for(let i=0;i<e;i++)r[i]=t.readUint32()/t.readUint32();return r}]],[6,[1,function(t,e){if(1===e)return t.readInt8();let r=new Int8Array(e);for(let i=0;i<e;i++)r[i]=t.readInt8();return r}]],[7,[1,Dn]],[8,[2,function(t,e){if(1===e)return t.readInt16();let r=new Int16Array(e);for(let i=0;i<e;i++)r[i]=t.readInt16();return r}]],[9,[4,function(t,e){if(1===e)return t.readInt32();let r=new Int32Array(e);for(let i=0;i<e;i++)r[i]=t.readInt32();return r}]],[10,[8,function(t,e){if(1===e)return t.readInt32()/t.readInt32();let r=new Array(e);for(let i=0;i<e;i++)r[i]=t.readInt32()/t.readInt32();return r}]],[11,[4,function(t,e){if(1===e)return t.readFloat32();let r=new Float32Array(e);for(let i=0;i<e;i++)r[i]=t.readFloat32();return r}]],[12,[8,function(t,e){if(1===e)return t.readFloat64();let r=new Float64Array(e);for(let i=0;i<e;i++)r[i]=t.readFloat64();return r}]]]);function Dn(t,e){if(1===e)return t.readUint8();let r=new Uint8Array(e);for(let i=0;i<e;i++)r[i]=t.readUint8();return r}const Pn=[];for(let t=0;t<256;t++)Pn.push([t]);const Bn=[0];for(let t=256;t<4096;t++)Pn.push(Bn);class Rn{constructor(t){this.stripArray=new Uint8Array(t.buffer,t.byteOffset,t.byteLength);const e=new Map;for(let t=0;t<256;t++)e.set(t,[t]);this.currentBit=0,this.tableLength=258,this.currentBitLength=9,this.outData=new _n(t.byteLength)}decode(){let t=0,e=0;for(;257!==(t=this.getNextCode());)if(256===t){if(this.initializeTable(),t=this.getNextCode(),257===t)break;this.writeString(this.stringFromCode(t)),e=t}else if(this.isInTable(t))this.writeString(this.stringFromCode(t)),this.addStringToTable(this.stringFromCode(e).concat(this.stringFromCode(t)[0])),e=t;else{const r=this.stringFromCode(e).concat(this.stringFromCode(e)[0]);this.writeString(r),this.addStringToTable(r),e=t}const r=this.outData.toArray();return new DataView(r.buffer,r.byteOffset,r.byteLength)}initializeTable(){this.tableLength=258,this.currentBitLength=9}writeString(t){this.outData.writeBytes(t)}stringFromCode(t){return Pn[t]}isInTable(t){return t<this.tableLength}addStringToTable(t){Pn[this.tableLength++]=t,this.tableLength+1===2**this.currentBitLength&&this.currentBitLength++}getNextCode(){const t=this.currentBit%8,e=this.currentBit>>>3,r=8-t,i=this.currentBit+this.currentBitLength-8*(e+1);let n=8*(e+2)-(this.currentBit+this.currentBitLength);const s=8*(e+2)-this.currentBit;n=Math.max(0,n);let o=this.stripArray[e]&2**(8-t)-1;o<<=this.currentBitLength-r;let a=o;if(e+1<this.stripArray.length){let t=this.stripArray[e+1]>>>n;t<<=Math.max(0,this.currentBitLength-s),a+=t}if(i>8&&e+2<this.stripArray.length){const t=8*(e+3)-(this.currentBit+this.currentBitLength);a+=this.stripArray[e+2]>>>t}return this.currentBit+=this.currentBitLength,a}}function Tn(t){return new Rn(t).decode()}const Un=/^(\d{4}):(\d{2}):(\d{2}) (\d{2}):(\d{2}):(\d{2})$/;class On extends Cn{constructor(){super("standard")}get size(){return this.width*this.height}get width(){return this.imageWidth}get height(){return this.imageLength}get components(){return this.samplesPerPixel}get date(){let t=new Date,e=Un.exec(this.dateTime);if(null===e)throw new Error(`invalid dateTime: ${this.dateTime}`);return t.setFullYear(Number(e[1]),Number(e[2])-1,Number(e[3])),t.setHours(Number(e[4]),Number(e[5]),Number(e[6])),t}get newSubfileType(){return this.get("NewSubfileType")}get imageWidth(){return this.get("ImageWidth")}get imageLength(){return this.get("ImageLength")}get bitsPerSample(){const t=this.get("BitsPerSample");return t&&"number"!=typeof t?t[0]:t}get alpha(){const t=this.extraSamples;return!!t&&0!==t[0]}get associatedAlpha(){const t=this.extraSamples;return!!t&&1===t[0]}get extraSamples(){return Ln(this.get("ExtraSamples"))}get compression(){return this.get("Compression")||1}get type(){return this.get("PhotometricInterpretation")}get fillOrder(){return this.get("FillOrder")||1}get documentName(){return this.get("DocumentName")}get imageDescription(){return this.get("ImageDescription")}get stripOffsets(){return Ln(this.get("StripOffsets"))}get orientation(){return this.get("Orientation")}get samplesPerPixel(){return this.get("SamplesPerPixel")||1}get rowsPerStrip(){return this.get("RowsPerStrip")}get stripByteCounts(){return Ln(this.get("StripByteCounts"))}get minSampleValue(){return this.get("MinSampleValue")||0}get maxSampleValue(){return this.get("MaxSampleValue")||Math.pow(2,this.bitsPerSample)-1}get xResolution(){return this.get("XResolution")}get yResolution(){return this.get("YResolution")}get planarConfiguration(){return this.get("PlanarConfiguration")||1}get resolutionUnit(){return this.get("ResolutionUnit")||2}get dateTime(){return this.get("DateTime")}get predictor(){return this.get("Predictor")||1}get sampleFormat(){return this.get("SampleFormat")||1}get sMinSampleValue(){return this.get("SMinSampleValue")||this.minSampleValue}get sMaxSampleValue(){return this.get("SMaxSampleValue")||this.maxSampleValue}get palette(){const t=2**this.bitsPerSample,e=this.get("ColorMap");if(!e)return;if(e.length!==3*t)throw new Error(`ColorMap size must be ${t}`);const r=[];for(let i=0;i<t;i++)r.push([e[i],e[i+t],e[i+2*t]]);return r}}function Ln(t){return"number"==typeof t?[t]:t}function Fn(t){const e=new Uint8Array(t.buffer,t.byteOffset,t.byteLength),r=vi(e);return new DataView(r.buffer,r.byteOffset,r.byteLength)}const Nn={ignoreImageData:!1,onlyFirst:!1};class zn extends _n{constructor(t){super(t),this._nextIFD=0}get isMultiPage(){let t=0;for(this.decodeHeader();this._nextIFD;)if(t++,this.decodeIFD({ignoreImageData:!0},!0),2===t)return!0;if(1===t)return!1;throw jn("ifdCount",t)}get pageCount(){let t=0;for(this.decodeHeader();this._nextIFD;)t++,this.decodeIFD({ignoreImageData:!0},!0);if(t>0)return t;throw jn("ifdCount",t)}decode(t={}){t=Object.assign({},Nn,t);const e=[];for(this.decodeHeader();this._nextIFD;)if(e.push(this.decodeIFD(t,!0)),t.onlyFirst)return[e[0]];return e}decodeHeader(){const t=this.readUint16();if(18761===t)this.setLittleEndian();else{if(19789!==t)throw new Error(`invalid byte order: 0x${t.toString(16)}`);this.setBigEndian()}if(42!==this.readUint16())throw new Error("not a TIFF file");this._nextIFD=this.readUint32()}decodeIFD(t,e){let r;if(this.seek(this._nextIFD),e)r=new On;else{if(!t.kind)throw new Error("kind is missing");r=new Cn(t.kind)}const i=this.readUint16();for(let t=0;t<i;t++)this.decodeIFDEntry(r);if(!t.ignoreImageData){if(!(r instanceof On))throw new Error("must be a tiff ifd");this.decodeImageData(r)}return this._nextIFD=this.readUint32(),r}decodeIFDEntry(t){const e=this.offset,r=this.readUint16(),i=this.readUint16(),n=this.readUint32();if(i<1||i>12)return void this.skip(4);const s=function(t,e){const r=In.get(t);if(!r)throw new Error(`type not found: ${t}`);return r[0]*e}(i,n);s>4&&this.seek(this.readUint32());const o=function(t,e,r){const i=In.get(e);if(!i)throw new Error(`type not found: ${e}`);return i[1](t,r)}(this,i,n);if(t.fields.set(r,o),34665===r||34853===r){let e=this.offset,i="exif";34665===r?i="exif":34853===r&&(i="gps"),this._nextIFD=o,t[i]=this.decodeIFD({kind:i,ignoreImageData:!0},!1),this.offset=e}this.seek(e),this.skip(12)}decodeImageData(t){const e=t.orientation;if(e&&1!==e)throw jn("orientation",e);switch(t.type){case 0:case 1:case 2:case 3:this.readStripData(t);break;default:throw jn("image type",t.type)}if(this.applyPredictor(t),this.convertAlpha(t),0===t.type){const e=t.bitsPerSample,r=Math.pow(2,e)-1;for(let e=0;e<t.data.length;e++)t.data[e]=r-t.data[e]}}readStripData(t){const e=t.width,r=t.height,i=t.bitsPerSample,n=t.sampleFormat,s=e*r*t.samplesPerPixel,o=function(t,e,r){if(8===e)return new Uint8Array(t);if(16===e)return new Uint16Array(t);if(32===e&&3===r)return new Float32Array(t);throw jn("bit depth / sample format",`${e} / ${r}`)}(s,i,n),a=t.rowsPerStrip*e*t.samplesPerPixel,h=t.stripOffsets,l=t.stripByteCounts;let u=s,c=0;for(let e=0;e<h.length;e++){let r=new DataView(this.buffer,h[e],l[e]),s=u>a?a:u;u-=s;let f=r;switch(t.compression){case 1:break;case 5:f=Tn(r);break;case 8:f=Fn(r);break;case 2:throw jn("Compression","CCITT Group 3");case 32773:throw jn("Compression","PackBits");default:throw jn("Compression",t.compression)}c=this.fillUncompressed(i,n,o,f,c,s)}t.data=o}fillUncompressed(t,e,r,i,n,s){if(8===t)return function(t,e,r,i){for(let n=0;n<i;n++)t[r++]=e.getUint8(n);return r}(r,i,n,s);if(16===t)return function(t,e,r,i,n){for(let s=0;s<2*i;s+=2)t[r++]=e.getUint16(s,n);return r}(r,i,n,s,this.isLittleEndian());if(32===t&&3===e)return function(t,e,r,i,n){for(let s=0;s<4*i;s+=4)t[r++]=e.getFloat32(s,n);return r}(r,i,n,s,this.isLittleEndian());throw jn("bitDepth",t)}applyPredictor(t){const e=t.bitsPerSample;switch(t.predictor){case 1:break;case 2:if(8===e)!function(t,e,r){let i=0;for(;i<t.length;){for(let n=r;n<e*r;n+=r)for(let e=0;e<r;e++)t[i+n+e]=t[i+n+e]+t[i+n-(r-e)]&255;i+=e*r}}(t.data,t.width,t.components);else{if(16!==e)throw new Error(`Horizontal differencing is only supported for images with a bit depth of ${e}`);!function(t,e,r){let i=0;for(;i<t.length;){for(let n=r;n<e*r;n+=r)for(let e=0;e<r;e++)t[i+n+e]=t[i+n+e]+t[i+n-(r-e)]&65535;i+=e*r}}(t.data,t.width,t.components)}break;default:throw new Error(`invalid predictor: ${t.predictor}`)}}convertAlpha(t){if(t.alpha&&t.associatedAlpha){const{data:e,components:r,maxSampleValue:i}=t;for(let t=0;t<e.length;t+=r){const n=e[t+r-1];for(let s=0;s<r-1;s++)e[t+s]=Math.round(e[t+s]*i/n)}}}}function jn(t,e){return new Error(`Unsupported ${t}: ${e}`)}function Yn(t={}){let{algorithm:e="matchToPrevious",ignoreBorder:r=[0,0]}=t;this.checkProcessable("matchAndCrop",{bitDepth:[8,16]});let i="matchToPrevious"===e,n=this[0],s=[];s[0]={position:[0,0],image:this[0]};let o=[0,0];for(let t=1;t<this.length;t++){let e=n.getBestMatch(this[t],{border:r});s[t]={position:[e[0]+o[0],e[1]+o[1]],image:this[t]},i&&(o[0]+=e[0],o[1]+=e[1],n=this[t])}let a=0,h=0,l=0,u=0;for(let t=0;t<s.length;t++){let e=s[t];e.position[0]>a&&(a=e.position[0]),e.position[0]<h&&(h=e.position[0]),e.position[1]>l&&(l=e.position[1]),e.position[1]<u&&(u=e.position[1])}h=0-h,u=0-u;for(let t=0;t<s.length;t++){let e=s[t];e.crop=e.image.crop({x:a-e.position[0],y:l-e.position[1],width:n.width-h-a,height:n.height-u-l})}let c=[];for(let t=0;t<s.length;t++)c[t]=s[t].crop;return new ts(c)}function Vn(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].min;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.min(t[r],this[e].min[r]);return t}function qn(){this.checkProcessable("min",{bitDepth:[8,16]});let t=this[0].max;for(let e=1;e<this.length;e++)for(let r=0;r<t.length;r++)t[r]=Math.max(t[r],this[e].max[r]);return t}function Xn(t){let e=t.reduce(((t,e)=>t+e));if(0===e)throw new Error("unreachable");let r,i=0,n=0,s=e/2;for(;;){if(t[i]>0){if(void 0!==r)return(r+i)/2;if(n+=t[i],n>s)return i;n===s&&(r=i)}i++}}function Gn(t){let e=0,r=0;for(let i=0;i<t.length;i++)e+=t[i],r+=t[i]*i;return 0===e?0:r/e}function $n(){this.checkProcessable("median",{bitDepth:[8,16]});let t=this.getHistograms({maxSlots:this[0].maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Xn(i)}return e}function Wn(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistogram(t);for(let r=1;r<this.length;r++){let i=this[r].getHistogram(t);for(let t=0;t<e.length;t++)e[t]+=i[t]}return e}function Zn(t){this.checkProcessable("min",{bitDepth:[8,16]});let e=this[0].getHistograms(t),r=e[0].length;for(let i=1;i<this.length;i++){let n=this[i].getHistograms(t);for(let t=0;t<e.length;t++)for(let i=0;i<r;i++)e[t][i]+=n[t][i]}return e}function Hn(){this.checkProcessable("averageImage",{bitDepth:[8,16]});let t=new Uint32Array(this[0].data.length);for(let e=0;e<this.length;e++){let r=this[e];for(let e=0;e<this[0].data.length;e++)t[e]+=r.data[e]}let e=il.createFrom(this[0]),r=e.data;for(let e=0;e<this[0].data.length;e++)r[e]=t[e]/this.length;return e}function Kn(){this.checkProcessable("max",{bitDepth:[8,16]});let t=il.createFrom(this[0]);t.data.fill(0);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.max(e.data[r],t.data[r]);return t}function Jn(){this.checkProcessable("max",{bitDepth:[8,16]});let t=il.createFrom(this[0]);t.data.fill(t.maxValue);for(const e of this)for(let r=0;r<t.data.length;r++)t.data[r]=Math.min(e.data[r],t.data[r]);return t}let Qn={configurable:!0,enumerable:!1,get:void 0};class ts extends Array{constructor(t){if(Array.isArray(t)){super(t.length);for(let e=0;e<t.length;e++)this[e]=t[e]}else"number"==typeof t?super(t):super();this.computed=null}static load(t){return Promise.all(t.map(il.load)).then((t=>new ts(t)))}static extendMethod(t,e,r={}){let{inPlace:i=!1,returnThis:n=!0,partialArgs:s=[]}=r;return ts.prototype[t]=i?function(...t){this.computed=null;let r=e.apply(this,[...s,...t]);return n?this:r}:function(...t){return e.apply(this,[...s,...t])},ts}static extendProperty(t,e,r={}){let{partialArgs:i=[]}=r;return Qn.get=function(){if(null===this.computed)this.computed={};else if(nn()(t,this.computed))return this.computed[t];let r=e.apply(this,i);return this.computed[t]=r,r},Object.defineProperty(ts.prototype,t,Qn),ts}checkProcessable(t,e={}){if("string"!=typeof t)throw new TypeError("checkProcessable requires as first parameter the processName (a string)");if(0===this.size)throw new TypeError(`The process: ${t} can not be applied on an empty stack`);this[0].checkProcessable(t,e);for(let r=1;r<this.length;r++){if((void 0===e.sameSize||e.sameSize)&&this[0].width!==this[r].width)throw new TypeError(`The process: ${t} can not be applied if width is not identical in all images`);if((void 0===e.sameSize||e.sameSize)&&this[0].height!==this[r].height)throw new TypeError(`The process: ${t} can not be applied if height is not identical in all images`);if((void 0===e.sameAlpha||e.sameAlpha)&&this[0].alpha!==this[r].alpha)throw new TypeError(`The process: ${t} can not be applied if alpha is not identical in all images`);if((void 0===e.sameBitDepth||e.sameBitDepth)&&this[0].bitDepth!==this[r].bitDepth)throw new TypeError(`The process: ${t} can not be applied if bitDepth is not identical in all images`);if((void 0===e.sameColorModel||e.sameColorModel)&&this[0].colorModel!==this[r].colorModel)throw new TypeError(`The process: ${t} can not be applied if colorModel is not identical in all images`);if((void 0===e.sameNumberChannels||e.sameNumberChannels)&&this[0].channels!==this[r].channels)throw new TypeError(`The process: ${t} can not be applied if channels is not identical in all images`)}}}Array[Symbol.species]||(ts.prototype.map=function(t,e){if("function"!=typeof t)throw new TypeError(`${t} is not a function`);let r=new ts(this.length);for(let i=0;i<this.length;i++)r[i]=t.call(e,this[i],i,this);return r}),function(t){t.extendMethod("matchAndCrop",Yn),t.extendMethod("getMin",Vn),t.extendMethod("getMax",qn),t.extendMethod("getMedian",$n),t.extendMethod("getHistogram",Wn),t.extendMethod("getHistograms",Zn),t.extendMethod("getAverage",Hn),t.extendMethod("getAverageImage",Hn),t.extendMethod("getMaxImage",Kn),t.extendMethod("getMinImage",Jn)}(ts);const es=/^data:[a-z]+\/(?:[a-z]+);base64,/;function rs(t,e){const r=wn()(t);if(r)switch(r.mime){case"image/png":return function(t){const e=function(t,e){return new Ri(t,void 0).decode()}(t);let r,i=e.channels,n=0;return 2===i||4===i?(r=i-1,n=1):r=i,e.palette?function(t){const e=t.width*t.height,r=t.palette[0].length,i=new Uint8Array(e*r),n=8/t.depth,s=t.depth<8?n:1,o=parseInt("1".repeat(t.depth),2),a=4===r;let h=0;for(let r=0;r<e;r++){const e=Math.floor(r/s);let l=t.data[e];t.depth<8&&(l=l>>>t.depth*(n-1-r%n)&o);const u=t.palette[l];i[h++]=u[0],i[h++]=u[1],i[h++]=u[2],a&&(i[h++]=u[3])}return new il(t.width,t.height,i,{components:3,alpha:a,bitDepth:8})}(e):new il(e.width,e.height,e.data,{components:r,alpha:n,bitDepth:e.depth})}(t);case"image/jpeg":return function(t){const e=(0,mn.decode)(t);let r;e.exif&&(r=is(e.exif));const i=(0,Gi.decode)(t,{useTArray:!0,maxMemoryUsageInMB:1024});return new il(i.width,i.height,i.data,{meta:r})}(t);case"image/tiff":return function(t){let e=function(t,e){return new zn(t).decode(void 0)}(t);return 1===e.length?ns(e[0]):new ts(e.map(ns))}(t);default:return ss(i(r.mime))}return ss(i("application/octet-stream"));function i(r){return e||Zi(t,r)}}function is(t){const e={tiff:{fields:t.fields,tags:t.map}};return t.exif&&(e.exif=t.exif),t.gps&&(e.gps=t.gps),e}function ns(t){if(3===t.type){const e=new Uint16Array(3*t.width*t.height),r=t.palette;let i=0;for(let n=0;n<t.data.length;n++){const s=r[t.data[n]];e[i++]=s[0],e[i++]=s[1],e[i++]=s[2]}return new il(t.width,t.height,e,{components:3,alpha:t.alpha,colorModel:an,bitDepth:16,meta:is(t)})}return new il(t.width,t.height,t.data,{components:2===t.type?3:1,alpha:t.alpha,colorModel:2===t.type?an:on,bitDepth:t.bitsPerSample.length?t.bitsPerSample[0]:t.bitsPerSample,meta:is(t)})}function ss(t,e){return e=e||{},new Promise((function(r,i){let n=new Ki;n.onload=function(){let t=n.width,i=n.height,s=Ji(t,i).getContext("2d");s.drawImage(n,0,0,t,i);let o=s.getImageData(0,0,t,i).data;r(new il(t,i,o,e))},n.onerror=function(){i(new Error(`Could not load ${t}`))},n.src=t}))}const os={getValueXY(t,e,r){return this.data[(e*this.width+t)*this.channels+r]},setValueXY(t,e,r,i){return this.data[(e*this.width+t)*this.channels+r]=i,this.computed=null,this},getValue(t,e){return this.data[t*this.channels+e]},setValue(t,e,r){return this.data[t*this.channels+e]=r,this.computed=null,this},getPixelXY(t,e){return this.getPixel(e*this.width+t)},setPixelXY(t,e,r){return this.setPixel(e*this.width+t,r)},getPixel(t){const e=new Array(this.channels),r=t*this.channels;for(let t=0;t<this.channels;t++)e[t]=this.data[r+t];return e},setPixel(t,e){const r=t*this.channels;for(let t=0;t<e.length;t++)this.data[r+t]=e[t];return this.computed=null,this}};function as(t){return{width:t.width,height:t.height,components:t.components,alpha:t.alpha,colorModel:t.colorModel,bitDepth:t.bitDepth}}function hs(t,e,r,i={}){const{out:n}=e;if(void 0===n)return i.copy?t.clone():il.createFrom(t,r);{if(!il.isImage(n))throw new TypeError("out must be an Image object");const e=Object.assign(as(t),r);for(const t in e)if(n[t]!==e[t])throw new RangeError(`cannot use out. Its ${t} must be "${e[t]}" (found "${n[t]}")`);return n}}function ls(t,e,r){if(void 0!==e.inPlace&&"boolean"!=typeof e.inPlace)throw new TypeError("inPlace option must be a boolean");if(e.inPlace){if(void 0!==e.out)throw new TypeError("out option must not be set if inPlace option is true");return t}return hs(t,e,null,r)}function us(t={}){this.checkProcessable("abs",{bitDepth:[32]});const e=ls(this,t);return function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=Math.abs(t.data[r])}(this,e),e}function cs(t={}){this.checkProcessable("invert",{bitDepth:[1,8,16]});const e=ls(this,t);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.data.length;r++)e.data[r]=~t.data[r]}(this,e):(function(t,e){for(let r=0;r<t.data.length;r+=t.channels)for(let i=0;i<t.components;i++)e.data[r+i]=t.maxValue-t.data[r+i]}(this,e),this!==e&&function(t,e){if(1===t.alpha&&1===e.alpha)for(let r=0;r<t.size;r++)e.data[r*e.channels+e.components]=t.data[r*t.channels+t.components]}(this,e)),e}function fs(){this.checkProcessable("flipX",{bitDepth:[8,16]});for(let t=0;t<this.height;t++){let e=t*this.width*this.channels;for(let t=0;t<Math.floor(this.width/2);t++){let r=t*this.channels+e,i=(this.width-t-1)*this.channels+e;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[i+t],this.data[i+t]=e}}}return this}function ds(){this.checkProcessable("flipY",{bitDepth:[8,16]});for(let t=0;t<Math.floor(this.height/2);t++)for(let e=0;e<this.width;e++){let r=e*this.channels+t*this.width*this.channels,i=e*this.channels+(this.height-1-t)*this.channels*this.width;for(let t=0;t<this.channels;t++){let e=this.data[r+t];this.data[r+t]=this.data[i+t],this.data[i+t]=e}}return this}function ps(t={}){const{radius:e=1}=t;if(e<1)throw new Error("radius must be greater than 1");const r=2*e+1,i=new Array(r);for(let t=0;t<r;t++){i[t]=new Array(r);for(let e=0;e<r;e++)i[t][e]=1/(r*r)}return this.convolution(i)}var ms=__webpack_require__(5520),gs=__webpack_require__.n(ms);function ws(t,e={}){let{channels:r,allowAlpha:i,defaultAlpha:n}=e;return"boolean"!=typeof i&&(i=!0),void 0===r?function(t,e){let r=e?t.channels:t.components,i=new Array(r);for(let t=0;t<r;t++)i[t]=t;return i}(t,n):function(t,e,r){Array.isArray(e)||(e=[e]);for(let i=0;i<e.length;i++)e[i]=bs(t,e[i],r);return e}(t,r,i)}function bs(t,e,r=!0){if(void 0===e)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if("string"==typeof e){switch(t.colorModel){case on:break;case an:if("rgb".includes(e))switch(e){case"r":e=0;break;case"g":e=1;break;case"b":e=2}break;case hn:if("hsl".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"l":e=2}break;case ln:if("hsv".includes(e))switch(e){case"h":e=0;break;case"s":e=1;break;case"v":e=2}break;case un:if("cmyk".includes(e))switch(e){case"c":e=0;break;case"m":e=1;break;case"y":e=2;break;case"k":e=3}break;default:throw new Error(`Unexpected color model: ${t.colorModel}`)}if("a"===e){if(!t.alpha)throw new Error("validateChannel : the image does not contain alpha channel");e=t.components}if("string"==typeof e)throw new Error(`validateChannel : undefined channel: ${e}`)}if(e>=t.channels)throw new RangeError(`validateChannel : the channel has to be >=0 and <${t.channels}`);if(!r&&e>=t.components)throw new RangeError("validateChannel : alpha channel may not be selected");return e}function ys(t={}){let{radius:e=1,border:r="copy",channels:i}=t;if(this.checkProcessable("medianFilter",{bitDepth:[8,16]}),e<1)throw new Error("radius must be greater than 0");i=ws(this,i);let n=e,s=e,o=il.createFrom(this),a=new Array((2*n+1)*(2*s+1));for(let t=0;t<i.length;t++){let e=i[t];for(let t=s;t<this.height-s;t++)for(let r=n;r<this.width-n;r++){let i=0;for(let o=-s;o<=s;o++)for(let s=-n;s<=n;s++){let n=((t+o)*this.width+r+s)*this.channels+e;a[i++]=this.data[n]}let h=(t*this.width+r)*this.channels+e;o.data[h]=gs()(a)}}if(this.alpha&&!i.includes(this.channels))for(let t=this.components;t<this.data.length;t+=this.channels)o.data[t]=this.data[t];return o.setBorder({size:[n,s],algorithm:r}),o}function _s(t={}){let{radius:e=1,sigma:r,channels:i,border:n="copy"}=t;this.checkProcessable("gaussian",{bitDepth:[8,16]});const s=function(t,e){const r=2*t+1,i=new Array(r),n=e||.3*(.5*(r-1)-1)+.8,s=-.5/(n*n);let o=0;for(let e=0;e<r;e++){const r=e-t,n=Math.exp(s*r*r);i[e]=n,o+=n}for(let t=0;t<r;t++)i[t]/=o;return i}(e,r);return this.convolution([s,s],{border:n,channels:i,algorithm:"separable"})}const vs=[[-1,0,1],[-2,0,2],[-1,0,1]],xs=[[-1,-2,-1],[0,0,0],[1,2,1]],ks=[[3,0,-3],[10,0,-10],[3,0,-3]],As=[[3,10,3],[0,0,0],[-3,-10,-3]];var Ms=__webpack_require__(414),Es=__webpack_require__(8336),Ss=__webpack_require__.n(Es);function Cs(t,e){return Math.round(Math.min(Math.max(t,0),e.maxValue))}function Is(t,e,r){if(void 0===r){const i=t.length+e.length-1;r=new Array(i)}!function(t){for(var e=0;e<t.length;e++)t[e]=0}(r);for(var i=0;i<t.length;i++)for(var n=0;n<e.length;n++)r[i+n]+=t[i]*e[n];return r}function Ds(t,e,r,i){const n=new Array(t.length);let s,o,a,h;h=e[1],a=(h.length-1)/2,o=new Array(r+h.length-1),s=new Array(r);for(let e=0;e<i;e++){for(let i=0;i<r;i++)s[i]=t[e*r+i];Is(s,h,o);for(let t=0;t<r;t++)n[e*r+t]=o[a+t]}h=e[0],a=(h.length-1)/2,o=new Array(i+h.length-1),s=new Array(i);for(let t=0;t<r;t++){for(let e=0;e<i;e++)s[e]=n[e*r+t];Is(s,h,o);for(let e=0;e<i;e++)n[e*r+t]=o[a+e]}return n}__webpack_require__(9645),__webpack_require__(995);var Ps=__webpack_require__(6943);function Bs(t,e={}){let{channels:r,bitDepth:i,normalize:n=!1,divisor:s=1,border:o="copy",algorithm:a="auto"}=e,h={};i&&(h.bitDepth=i);let l,u,c=il.createFrom(this,h);if(r=ws(this,r),"separable"!==a)({kernel:t}=function(t){let e,r;if(!Array.isArray(t))throw new Error(`validateKernel: Invalid Kernel: ${t}`);if(Array.isArray(t[0])){if(0==(1&t.length)||0==(1&t[0].length))throw new RangeError("validateKernel: Kernel rows and columns should be odd numbers");e=Math.floor(t.length/2),r=Math.floor(t[0].length/2)}else{let i=Math.sqrt(t.length);if(!Ss()(i))throw new RangeError("validateKernel: Kernel array should be a square");r=e=Math.floor(Math.sqrt(t.length)/2);let n=new Array(i);for(let e=0;e<i;e++){n[e]=new Array(i);for(let r=0;r<i;r++)n[e][r]=t[e*i+r]}t=n}return{kernel:t,kWidth:r,kHeight:e}}(t));else if(!Array.isArray(t)||2!==t.length)throw new RangeError("separable convolution requires two arrays of numbers to represent the kernel");if("auto"===a){let e=function(t){const e=new Ps.Z(t,{autoTranspose:!0});if(1!==e.rank)return null;const r=Math.sqrt(e.s[0]);return[e.U.to2DArray().map((t=>t[0]*r)),e.V.to2DArray().map((t=>t[0]*r))]}(t);null!==e?(a="separable",t=e):a=(t.length>9||t[0].length>9)&&this.width<=4096&&this.height<=4096?"fft":"direct"}"separable"===a?(l=Math.floor(t[0].length/2),u=Math.floor(t[1].length/2)):(l=Math.floor(t.length/2),u=Math.floor(t[0].length/2));let f,d,p,m,g,w,b=c.isClamped,y=new Array(this.height*this.width);for(m=0;m<r.length;m++){for(g=r[m],p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,y[f]=this.data[f*this.channels+g];if("direct"===a)w=(0,Ms.direct)(y,t,{rows:this.height,cols:this.width,normalize:n,divisor:s});else if("separable"===a){if(w=Ds(y,t,this.width,this.height),n){s=0;for(let e=0;e<t[0].length;e++)for(let r=0;r<t[1].length;r++)s+=t[0][e]*t[1][r]}if(1!==s)for(let t=0;t<w.length;t++)w[t]/=s}else w=(0,Ms.fft)(y,t,{rows:this.height,cols:this.width,normalize:n,divisor:s});for(p=0;p<this.height;p++)for(d=0;d<this.width;d++)f=p*this.width+d,c.data[f*this.channels+g]=b?Cs(w[f],c):w[f]}if(this.alpha&&!r.includes(this.channels))for(d=this.components;d<this.data.length;d+=this.channels)c.data[d]=this.data[d];return"periodic"!==o&&c.setBorder({size:[u,l],algorithm:o}),c}function Rs(t={}){let{direction:e="xy",border:r="copy",kernelX:i,kernelY:n,channels:s,bitDepth:o=this.bitDepth}=t;switch(this.checkProcessable("gradientFilter",{bitDepth:[8,16]}),e){case"x":if(!i)throw new Error("kernelX option is missing");return Bs.call(this,i,{channels:s,border:r,bitDepth:o});case"y":if(!n)throw new Error("kernelY option is missing");return Bs.call(this,n,{channels:s,border:r,bitDepth:o});case"xy":{if(!i)throw new Error("kernelX option is missing");if(!n)throw new Error("kernelY option is missing");const t=Bs.call(this,i,{channels:s,border:r,bitDepth:32}),e=Bs.call(this,n,{channels:s,border:r,bitDepth:32});return t.hypotenuse(e,{bitDepth:o,channels:s})}default:throw new Error(`Unknown parameter direction: ${e}`)}}function Ts(t){return Rs.call(this,Object.assign({},t,{kernelX:vs,kernelY:xs}))}function Us(t){return Rs.call(this,Object.assign({},t,{kernelX:ks,kernelY:As}))}var Os=__webpack_require__(2664),Ls=__webpack_require__.n(Os);function Fs(t={}){let{algorithm:e="range",channels:r,min:i=this.min,max:n=this.max}=t;if(this.checkProcessable("level",{bitDepth:[8,16,32]}),r=ws(this,{channels:r}),r.length!==this.channel&&(Array.isArray(i)&&i.length===this.channels&&(i=i.filter(((t,e)=>r.includes(e)))),Array.isArray(n)&&n.length===this.channels&&(n=n.filter(((t,e)=>r.includes(e))))),"range"!==e)throw new Error(`level: algorithm not implement: ${e}`);return i<0&&(i=0),n>this.maxValue&&(n=this.maxValue),Array.isArray(i)||(i=Ls()(r.length,i)),Array.isArray(n)||(n=Ls()(r.length,n)),function(t,e,r,i){let n=1e-5,s=new Array(i.length);for(let o=0;o<i.length;o++)0===e[o]&&r[o]===t.maxValue||r[o]===e[o]?s[o]=0:s[o]=(t.maxValue+1-n)/(r[o]-e[o]),e[o]+=.499995/s[o];for(let r=0;r<i.length;r++){let n=i[r];if(0!==s[r])for(let i=0;i<t.data.length;i+=t.channels)t.data[i+n]=Math.min(Math.max(0,(t.data[i+n]-e[r])*s[r]+.5|0),t.maxValue)}}(this,i,n,r),this}var Ns=__webpack_require__(7811),zs=__webpack_require__.n(Ns);function js(t){if(isNaN(t)){if(t instanceof il)return t.data;if(!zs()(t))throw new Error("checkNumberArray: the value should be either a number, array or Image");return t}if(t<=0)throw new Error("checkNumberArray: the value must be greater than 0");return t}function Ys(t,e={}){let{channels:r}=e;if(this.checkProcessable("add",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("add: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]+t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]+t>>0)}return this}function Vs(t,e={}){let{channels:r}=e;if(this.checkProcessable("subtract",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("subtract: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]-t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,this.data[e+i]-t>>0)}return this}function qs(t,e={}){let{channels:r,absolute:i=!1}=e;if(this.checkProcessable("subtractImage",{bitDepth:[8,16]}),this.width!==t.width||this.height!==t.height)throw new Error("subtractImage: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("subtractImage: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("subtractImage: both images must have the same number of channels");let n=this.clone();r=ws(this,{channels:r});for(let e=0;e<r.length;e++)for(let s=r[e];s<this.data.length;s+=this.channels){let e=this.data[s]-t.data[s];n.data[s]=i?Math.abs(e):Math.max(e,0)}return n}function Xs(t,e={}){let{bitDepth:r=this.bitDepth,channels:i}=e;if(this.checkProcessable("hypotenuse",{bitDepth:[8,16,32]}),this.width!==t.width||this.height!==t.height)throw new Error("hypotenuse: both images must have the same size");if(this.alpha!==t.alpha||this.bitDepth!==t.bitDepth)throw new Error("hypotenuse: both images must have the same alpha and bitDepth");if(this.channels!==t.channels)throw new Error("hypotenuse: both images must have the same number of channels");let n=il.createFrom(this,{bitDepth:r});i=ws(this,{channels:i});let s=n.isClamped;for(let e=0;e<i.length;e++)for(let r=i[e];r<this.data.length;r+=this.channels){let e=Math.hypot(this.data[r],t.data[r]);n.data[r]=s?Math.min(Math.max(Math.round(e),0),n.maxValue):e}return n}function Gs(t,e={}){let{channels:r}=e;if(this.checkProcessable("multiply",{bitDepth:[8,16]}),t<=0)throw new Error("multiply: the value must be greater than 0");if(r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("multiply: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]*t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]*t>>0)}return this}function $s(t,e={}){let{channels:r}=e;if(this.checkProcessable("divide",{bitDepth:[8,16]}),r=ws(this,{channels:r}),t=js(t),isNaN(t)){if(this.data.length!==t.length)throw new Error("divide: the: the data size is different");for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.max(0,Math.min(this.maxValue,this.data[e+i]/t[e+i]>>0))}}else for(let e=0;e<r.length;e++){let i=r[e];for(let e=0;e<this.data.length;e+=this.channels)this.data[e+i]=Math.min(this.maxValue,this.data[e+i]/t>>0)}return this}var Ws=__webpack_require__(7531);class Zs{constructor(){if(new.target===Zs)throw new Error("BaseRegression must be subclassed")}predict(t){if("number"==typeof t)return this._predict(t);if((0,Ws.Z)(t)){const e=[];for(let r=0;r<t.length;r++)e.push(this._predict(t[r]));return e}throw new TypeError("x must be a number or array")}_predict(){throw new Error("_predict must be implemented")}train(){}toString(){return""}toLaTeX(){return""}score(t,e){if(!(0,Ws.Z)(t)||!(0,Ws.Z)(e)||t.length!==e.length)throw new Error("x and y must be arrays of the same length");const r=t.length,i=new Array(r);for(let e=0;e<r;e++)i[e]=this._predict(t[e]);let n=0,s=0,o=0,a=0,h=0,l=0,u=0;for(let t=0;t<r;t++)n+=i[t],s+=e[t],h+=i[t]*i[t],l+=e[t]*e[t],u+=i[t]*e[t],0!==e[t]&&(o+=(e[t]-i[t])*(e[t]-i[t])/e[t]),a+=(e[t]-i[t])*(e[t]-i[t]);const c=(r*u-n*s)/Math.sqrt((r*h-n*n)*(r*l-s*s));return{r:c,r2:c*c,chi2:o,rmsd:Math.sqrt(a/r)}}}var Hs=__webpack_require__(1883),Ks=(__webpack_require__(5922),__webpack_require__(8345)),Js=__webpack_require__(6952),Qs=__webpack_require__.n(Js);const to={lambda:.1,kernelType:"gaussian",kernelOptions:{},computeCoefficient:!1};class eo extends Zs{constructor(t,e,r){if(super(),!0===t)this.alpha=e.alpha,this.inputs=e.inputs,this.kernelType=e.kernelType,this.kernelOptions=e.kernelOptions,this.kernel=new(Qs())(e.kernelType,e.kernelOptions);else{t=Hs.Z.checkMatrix(t),r=Object.assign({},to,r);const i=new(Qs())(r.kernelType,r.kernelOptions),n=i.compute(t),s=t.rows;n.add(Hs.Z.eye(s,s).mul(r.lambda)),this.alpha=(0,Ks.F)(n,e),this.inputs=t,this.kernelType=r.kernelType,this.kernelOptions=r.kernelOptions,this.kernel=i}}_predict(t){return this.kernel.compute([t],this.inputs).mmul(this.alpha).getRow(0)}toJSON(){return{name:"kernelRidgeRegression",alpha:this.alpha,inputs:this.inputs,kernelType:this.kernelType,kernelOptions:this.kernelOptions}}static load(t){if("kernelRidgeRegression"!==t.name)throw new TypeError("not a KRR model");return new eo(!0,t)}}function ro(t,e,r){const i=new eo(t,e,r),n=new Array(this.size);for(let t=0;t<this.width;t++)for(let e=0;e<this.height;e++)n[e*this.width+t]=[t,e];const s=i.predict(n),o=il.createFrom(this);for(let t=0;t<this.size;t++)o.data[t]=Math.min(this.maxValue,Math.max(0,s[t][0]));return o}function io(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("dilate",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("dilate: The number of rows and columns of the kernel must be odd");let i=!0;t:for(const t of e)for(const e of t)if(1!==e){i=!1;break t}let n=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(i){const t=n.clone();n=ao(n,t,e.length,e[0].length)}else n=oo(n,il.createFrom(n),e);else n=i?so(n,il.createFrom(n),e.length,e[0].length):no(n,il.createFrom(n),e);return n}function no(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(i<0||u<0||i>=t.width||u>=t.height)continue;const c=t.getValueXY(i,u,0);c>l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function so(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let i=0;for(let n=Math.max(0,r-s);n<Math.min(t.height,r+s+1);n++){const r=t.getValueXY(e,n,0);r>i&&(i=r)}o[e]=i}for(let i=0;i<t.width;i++){let s=0;for(let e=Math.max(0,i-n);e<Math.min(t.width,i+n+1);e++)o[e]>s&&(s=o[e]);e.setValueXY(i,r,0,s)}}return e}function oo(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=0;t:for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(!(u<0||i<0||i>=t.width||u>=t.height)&&1===t.getBitXY(i,u)){l=1;break t}}1===l&&e.setBitXY(h,a)}return e}function ao(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(1);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){o[e]=0;for(let i=Math.max(0,r-s);i<Math.min(t.height,r+s+1);i++)if(1===t.getBitXY(e,i)){o[e]=1;break}}for(let i=0;i<t.width;i++)if(1!==e.getBitXY(i,r))for(let s=Math.max(0,i-n);s<Math.min(t.width,i+n+1);s++)if(1===o[s]){e.setBitXY(i,r);break}}return e}function ho(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("erode",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("erode: The number of rows and columns of the kernel must be odd");let i=!0;t:for(const t of e)for(const e of t)if(1!==e){i=!1;break t}let n=this;for(let t=0;t<r;t++)if(1===this.bitDepth)if(i){const t=n.clone();n=fo(n,t,e.length,e[0].length)}else n=co(n,il.createFrom(n),e);else n=i?uo(n,il.createFrom(n),e.length,e[0].length):lo(n,il.createFrom(n),e);return n}function lo(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=t.maxValue;for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(i<0||u<0||i>=t.width||u>=t.height)continue;const c=t.getValueXY(i,u,0);c<l&&(l=c)}e.setValueXY(h,a,0,l)}return e}function uo(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){let i=t.maxValue;for(let n=Math.max(0,r-s);n<Math.min(t.height,r+s+1);n++){const r=t.getValueXY(e,n,0);r<i&&(i=r)}o[e]=i}for(let i=0;i<t.width;i++){let s=t.maxValue;for(let e=Math.max(0,i-n);e<Math.min(t.width,i+n+1);e++)o[e]<s&&(s=o[e]);e.setValueXY(i,r,0,s)}}return e}function co(t,e,r){const i=r.length,n=r[0].length;let s=(i-1)/2,o=(n-1)/2;for(let a=0;a<t.height;a++)for(let h=0;h<t.width;h++){let l=1;t:for(let e=0;e<n;e++)for(let n=0;n<i;n++){if(1!==r[n][e])continue;let i=n-s+h,u=e-o+a;if(!(u<0||i<0||i>=t.width||u>=t.height)&&0===t.getBitXY(i,u)){l=0;break t}}1===l&&e.setBitXY(h,a)}return e}function fo(t,e,r,i){const n=(r-1)/2,s=(i-1)/2,o=[];for(let e=0;e<t.width;e++)o.push(0);for(let r=0;r<t.height;r++){for(let e=0;e<t.width;e++){o[e]=1;for(let i=Math.max(0,r-s);i<Math.min(t.height,r+s+1);i++)if(0===t.getBitXY(e,i)){o[e]=0;break}}for(let i=0;i<t.width;i++)if(0!==e.getBitXY(i,r))for(let s=Math.max(0,i-n);s<Math.min(t.width,i+n+1);s++)if(0===o[s]){e.clearBitXY(i,r);break}}return e}function po(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("open",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("open: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++)i=i.erode({kernel:e}),i=i.dilate({kernel:e});return i}function mo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("close",{bitDepth:[1,8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("close: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++)i=i.dilate({kernel:e}).erode({kernel:e});return i}function go(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("topHat",{bitDepth:[8,16],components:1,alpha:0}),e.length%2==0||e[0].length%2==0)throw new TypeError("topHat: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){let t=i.open({kernel:e});i=t.subtractImage(i,{absolute:!0})}return i}function wo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("blackHat",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("blackHat: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){const t=i.close({kernel:e});i=t.subtractImage(i,{absolute:!0})}return i}function bo(t={}){let{kernel:e=[[1,1,1],[1,1,1],[1,1,1]],iterations:r=1}=t;if(this.checkProcessable("morphologicalGradient",{bitDepth:[8,16],components:1,alpha:0}),e.columns%2==0||e.rows%2==0)throw new TypeError("morphologicalGradient: The number of rows and columns of the kernel must be odd");let i=this;for(let t=0;t<r;t++){let t=i.dilate({kernel:e}),r=i.erode({kernel:e});i=t.subtractImage(r,{absolute:!0})}return i}function yo(t,e){return Math.sqrt(Math.pow(t[0]-e[0],2)+Math.pow(t[1]-e[1],2))}function _o(t,e){return[t[1]*e[2]-t[2]*e[1],t[2]*e[0]-t[0]*e[2],t[0]*e[1]-t[1]*e[0]]}function vo(t,e){return t[0]*e[0]+t[1]*e[1]+t[2]*e[2]}function xo(t,e,r,i,n,s,o,a,h,l,u,c){let[f,d]=[(r*t+i*e+n)/(h*t+l*e+1),(s*t+o*e+a)/(h*t+l*e+1)];return u.getValueXY(Math.floor(f),Math.floor(d),c)}function ko(t,e={}){let{calculateRatio:r=!0}=e;if(4!==t.length)throw new Error(`The array pts must have four elements, which are the four corners. Currently, pts have ${t.length} elements`);let i,n,[s,o,a,h]=t,l=[s,o,a,h],[u,c,f,d]=function(t){let e=0,r=0,i=0,n=0,s=t[0][0],o=0;for(let e=1;e<t.length;e++)t[e][0]<s&&(s=t[e][0],o=e);let a=t[(o+1)%t.length][0],h=(o+1)%t.length;for(let e=1;e<t.length;e++)t[e][0]<a&&e!==o&&(a=t[e][0],h=e);return t[h][1]<t[o][1]?(e=t[h],n=t[o],o!==(h+1)%4?(r=t[(h+1)%4],i=t[(h+2)%4]):(r=t[(h+2)%4],i=t[(h+3)%4])):(n=t[h],e=t[o],h!==(o+1)%4?(r=t[(o+1)%4],i=t[(o+2)%4]):(r=t[(o+2)%4],i=t[(o+3)%4])),[e,r,i,n]}(l);r?[i,n]=function(t,e,r,i,n,s){let o=Math.max(yo(t,e),yo(i,r)),a=Math.max(yo(t,i),yo(e,r)),h=0,l=0,u=Math.ceil(n/2),c=Math.ceil(s/2),f=o/a,d=[t[0],t[1],1],p=[e[0],e[1],1],m=[i[0],i[1],1],g=[r[0],r[1],1],w=vo(_o(d,g),m)/vo(_o(p,g),m),b=vo(_o(d,g),p)/vo(_o(m,g),p),y=[w*p[0]-d[0],w*p[1]-d[1],w*p[2]-d[2]],_=[b*m[0]-d[0],b*m[1]-d[1],b*m[2]-d[2]],v=y[0],x=y[1],k=y[2],A=_[0],M=_[1],E=_[2],S=1/(k*E)*(v*A-(v*E+k*A)*u+k*E*u*u+(x*M-(x*E+k*M)*c+k*E*c*c));S=S>=0?Math.sqrt(S):Math.sqrt(-S);let C=new Hs.Z([[S,0,u],[0,S,c],[0,0,1]]),I=C.transpose(),D=(0,Ks.S)(I),P=(0,Ks.S)(C),B=Hs.Z.rowVector(y),R=Hs.Z.rowVector(_),T=Math.sqrt(vo(B.mmul(D).mmul(P).to1DArray(),y)/vo(R.mmul(D).mmul(P).to1DArray(),_));return 0===T||0===f?(h=Math.ceil(o),l=Math.ceil(a)):T<f?(h=Math.ceil(o),l=Math.ceil(h/T)):(l=Math.ceil(a),h=Math.ceil(T*l)),[h,l]}(u,c,f,d,this.width,this.height):(i=Math.ceil(Math.max(yo(u,c),yo(d,f))),n=Math.ceil(Math.max(yo(u,d),yo(c,f))));let p=il.createFrom(this,{width:i,height:n}),[m,g]=u,[w,b]=c,[y,_]=f,[v,x]=d,[k,A]=[0,0],[M,E]=[0,i-1],[S,C]=[n-1,i-1],[I,D]=[n-1,0],P=new Hs.Z([[k,A,1,0,0,0,-k*m,-A*m],[M,E,1,0,0,0,-M*w,-E*w],[S,C,1,0,0,0,-S*y,-A*y],[I,D,1,0,0,0,-I*v,-D*v],[0,0,0,k,A,1,-k*g,-A*g],[0,0,0,M,E,1,-M*b,-E*b],[0,0,0,S,C,1,-S*_,-C*_],[0,0,0,I,D,1,-I*x,-D*x]]),B=Hs.Z.columnVector([m,w,y,v,g,b,_,x]),R=new Ps.Z(P).solve(B),[T,U,O,L,F,N,z,j]=R.to1DArray(),Y=new Hs.Z(n,i);for(let t=0;t<this.channels;t++){for(let e=0;e<n;e++)for(let r=0;r<i;r++)Y.set(e,r,xo(e,r,T,U,O,L,F,N,z,j,this,t));p.setMatrix(Y,{channel:t})}return p}function Ao(t={}){let{x:e=0,y:r=0,width:i=this.width-e,height:n=this.height-r}=t;if(this.checkProcessable("max",{bitDepth:[8,16]}),e=Math.round(e),r=Math.round(r),i=Math.round(i),n=Math.round(n),e>this.width-1||r>this.height-1)throw new RangeError(`crop: origin (x:${e}, y:${r}) out of range (${this.width-1}; ${this.height-1})`);if(i<=0||n<=0)throw new RangeError(`crop: width and height (width:${i}; height:${n}) must be positive numbers`);if(e<0||r<0)throw new RangeError(`crop: x and y (x:${e}, y:${r}) must be positive numbers`);if(i>this.width-e||n>this.height-r)throw new RangeError(`crop: (x: ${e}, y:${r}, width:${i}, height:${n}) size is out of range`);let s=il.createFrom(this,{width:i,height:n,position:[e,r]}),o=i*this.channels,a=r+n,h=0,l=e*this.channels;for(let t=r;t<a;t++){let e=t*this.width*this.channels+l,r=e+o;for(;e<r;e++)s.data[h++]=this.data[e]}return s}function Mo(t={}){this.checkProcessable("cropAlpha",{alpha:1});const{threshold:e=this.maxValue}=t;let r=function(t,e,r){for(let i=0;i<t.width;i++)for(let n=0;n<t.height;n++)if(t.getValueXY(i,n,r)>=e)return i;return-1}(this,e,this.components);if(-1===r)throw new Error("Could not find new dimensions. Threshold may be too high.");let i=function(t,e,r,i){for(let n=0;n<t.height;n++)for(let s=i;s<t.width;s++)if(t.getValueXY(s,n,r)>=e)return n;return-1}(this,e,this.components,r),n=function(t,e,r,i){for(let n=t.height-1;n>=0;n--)for(let s=i;s<t.width;s++)if(t.getValueXY(s,n,r)>=e)return n;return-1}(this,e,this.components,r),s=function(t,e,r,i,n,s){for(let o=t.width-1;o>=i;o--)for(let i=n;i<=s;i++)if(t.getValueXY(o,i,r)>=e)return o;return-1}(this,e,this.components,r,i,n);return this.crop({x:r,y:i,width:s-r+1,height:n-i+1})}function Eo(t,e){if(e<0||e>=t.channels)throw new RangeError(`channel must be included between 0 and ${t.channels-1}. Current value: ${e}`)}const So={nearestneighbor:"nearestNeighbor",nearestneighbour:"nearestNeighbor",bilinear:"bilinear"};function Co(t){if("string"!=typeof t)throw new TypeError("interpolation must be a string");if(t=t.toLowerCase(),!So[t])throw new RangeError(`invalid interpolation algorithm: ${t}`);return So[t]}function Io(t,e,r){const i=this.width/e,n=this.height/r;if(this.bitDepth>1)for(let s=0;s<e;s++){const e=Math.floor((s+.5)*i);for(let i=0;i<r;i++){const r=Math.floor((i+.5)*n);for(let n=0;n<this.channels;n++)t.setValueXY(s,i,n,this.getValueXY(e,r,n))}}else for(let s=0;s<e;s++){const e=Math.floor((s+.5)*i);for(let i=0;i<r;i++){const r=Math.floor((i+.5)*n);this.getBitXY(e,r)&&t.setBitXY(s,i)}}}function Do(t={}){const{factor:e=1,interpolation:r=So.nearestneighbor,preserveAspectRatio:i=!0}=t,n=Co(r);let s=t.width,o=t.height;if(s||(s=o&&i?Math.round(o*(this.width/this.height)):this.width),o||(o=i?Math.round(s*(this.height/this.width)):this.height),({width:s,height:o}=function(t,e,r){t=function(t){if("string"==typeof t){const e=t[t.length-1];t=parseFloat(t),"%"===e&&(t/=100)}return t}(t);let i=Math.round(t*e),n=Math.round(t*r);return i<=0&&(i=1),n<=0&&(n=1),{width:i,height:n}}(e,s,o)),s===this.width&&o===this.height){const t=this.clone();return t.position=[0,0],t}let a=Math.round((this.width-s)/2),h=Math.round((this.height-o)/2);const l=il.createFrom(this,{width:s,height:o,position:[a,h]});if(n!==So.nearestneighbor)throw new Error(`unsupported resize interpolation: ${n}`);return Io.call(this,l,s,o),l}function Po(){this.checkProcessable("hsv",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{colorModel:ln}),e=0,r=this.data;for(let i=0;i<r.length;i+=this.channels){let n=r[i],s=r[i+1],o=r[i+2],a=Math.min(n,s,o),h=Math.max(n,s,o),l=h-a,u=0,c=0===h?0:l/h,f=h;if(h!==a){switch(h){case n:u=(s-o)/l+(s<o?6:0);break;case s:u=(o-n)/l+2;break;case o:u=(n-s)/l+4;break;default:throw new Error("unreachable")}u/=6}t.data[e++]=u*this.maxValue,t.data[e++]=c*this.maxValue,t.data[e++]=f,this.alpha&&(t.data[e++]=r[i+3])}return t}function Bo(){this.checkProcessable("hsl",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{colorModel:hn}),e=Math.floor(this.maxValue/2),r=0,i=this.data;for(let n=0;n<i.length;n+=this.channels){let s=i[n],o=i[n+1],a=i[n+2],h=Math.max(s,o,a),l=Math.min(s,o,a),u=0,c=0,f=(h+l)/2;if(h!==l){let t=h-l;switch(c=f>e?t/(2-h-l):t/(h+l),h){case s:u=(o-a)/t+(o<a?6:0);break;case o:u=(a-s)/t+2;break;case a:u=(s-o)/t+4;break;default:throw new Error("unreachable")}u/=6}t.data[r++]=u*this.maxValue,t.data[r++]=c*this.maxValue,t.data[r++]=f,this.alpha&&(t.data[r++]=i[n+3])}return t}function Ro(){this.checkProcessable("cmyk",{bitDepth:[8,16],alpha:[0,1],colorModel:[an]});let t=il.createFrom(this,{components:4,colorModel:un}),e=0,r=this.data;for(let i=0;i<r.length;i+=this.channels){let n=r[i],s=r[i+1],o=r[i+2],a=Math.min(this.maxValue-n,this.maxValue-s,this.maxValue-o),h=(this.maxValue-n-a)/(1-a/this.maxValue),l=(this.maxValue-s-a)/(1-a/this.maxValue),u=(this.maxValue-o-a)/(1-a/this.maxValue);t.data[e++]=Math.round(h),t.data[e++]=Math.round(l),t.data[e++]=Math.round(u),t.data[e++]=Math.round(a),this.alpha&&(t.data[e++]=r[i+3])}return t}function To(){return new il(this.width,this.height,this.getRGBAData(),{kind:"RGBA",parent:this})}const Uo={luma709:(t,e,r)=>6966*t+23436*e+2366*r>>15,luma601:(t,e,r)=>9798*t+19235*e+3735*r>>15,maximum:(t,e,r)=>Math.max(t,e,r),minimum:(t,e,r)=>Math.min(t,e,r),average:(t,e,r)=>(t+e+r)/3>>0,minmax:(t,e,r)=>(Math.max(t,e,r)+Math.min(t,e,r))/2,red:t=>t,green:(t,e)=>e,blue:(t,e,r)=>r,cyan(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-t-n)/(1-n/i.maxValue)>>0},magenta(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-e-n)/(1-n/i.maxValue)>>0},yellow(t,e,r,i){let n=Uo.black(t,e,r,i);return(i.maxValue-r-n)/(1-n/i.maxValue)>>0},black:(t,e,r,i)=>Math.min(i.maxValue-t,i.maxValue-e,i.maxValue-r),hue(t,e,r,i){let n=Uo.min(t,e,r),s=Uo.max(t,e,r);if(s===n)return 0;let o=0,a=s-n;switch(s){case t:o=(e-r)/a+(e<r?6:0);break;case e:o=(r-t)/a+2;break;case r:o=(t-e)/a+4;break;default:throw new Error("unreachable")}return o/6*i.maxValue>>0},saturation(t,e,r,i){let n=Uo.min(t,e,r),s=Uo.max(t,e,r);return 0===s?0:(s-n)/s*i.maxValue},lightness(t,e,r){let i=Uo.min(t,e,r);return(Uo.max(t,e,r)+i)/2}};Object.defineProperty(Uo,"luminosity",{enumerable:!1,value:Uo.lightness}),Object.defineProperty(Uo,"luminance",{enumerable:!1,value:Uo.lightness}),Object.defineProperty(Uo,"min",{enumerable:!1,value:Uo.minimum}),Object.defineProperty(Uo,"max",{enumerable:!1,value:Uo.maximum}),Object.defineProperty(Uo,"brightness",{enumerable:!1,value:Uo.maximum});const Oo={};function Lo(t={}){let{algorithm:e="luma709",keepAlpha:r=!1,mergeAlpha:i=!0}=t;if("string"!=typeof e&&"function"!=typeof e)throw new TypeError("algorithm must be a string or a function");this.checkProcessable("grey",{bitDepth:[8,16],alpha:[0,1]}),1===this.components&&(e="red"),r&=this.alpha,i&=this.alpha,r&&(i=!1);let n,s=hs(this,t,{components:1,alpha:r,colorModel:on});if("function"==typeof e)n=e;else if(n=Uo[e.toLowerCase()],!n)throw new Error(`unsupported grey algorithm: ${e}`);let o=0;for(let t=0;t<this.data.length;t+=this.channels)i?s.data[o++]=Cs(n(this.data[t],this.data[t+1],this.data[t+2],this)*this.data[t+this.components]/this.maxValue,this):(s.data[o++]=Cs(n(this.data[t],this.data[t+1],this.data[t+2],this),this),s.alpha&&(s.data[o++]=this.data[t+this.components]));return s}function Fo(t){let e=!1,r=0;for(let e=1;e<t.length-1;e++)if(t[e-1]<t[e]&&t[e+1]<t[e]&&(r++,r>2))return!1;return 2===r&&(e=!0),e}function No(t,e){let r=0;for(let i=0;i<=e;i++)r+=t[i];return r}function zo(t,e){let r=0;for(let i=0;i<=e;i++)r+=i*t[i];return r}function jo(t,e){let r=0;for(let i=0;i<=e;i++)r+=i*i*t[i];return r}function Yo(t){let e=new Array(t.length);for(let r=1;r<t.length-1;r++)e[r]=(t[r-1]+t[r]+t[r+1])/3;return e[0]=(t[0]+t[1])/3,e[t.length-1]=(t[t.length-2]+t[t.length-1])/3,e}function Vo(t){let e=t.length,r=!1,i=0;for(let r=1;r<e-1;r++)if(t[r-1]<t[r]&&t[r+1]<t[r]&&(i++,i>2))return!1;return 2===i&&(r=!0),r}function qo(t,e){let r=0;for(let i=0;i<=e;i++)r+=t[i];return r}Object.keys(Uo).forEach((t=>{Oo[t]=t}));var Xo=__webpack_require__(6563);const Go={huang:function(t){let e=0;for(let r=0;r<t.length;r++)if(0!==t[r]){e=r;break}let r=t.length-1;for(let i=t.length-1;i>=e;i--)if(0!==t[i]){r=i;break}let i=1/(r-e),n=new Array(t.length),s=0,o=0;for(let r=e;r<t.length;r++)s+=r*t[r],o+=t[r],n[r]=s/o;let a=new Array(t.length);s=o=0;for(let e=r;e>0;e--)s+=e*t[e],o+=t[e],a[e-1]=s/o;let h=-1,l=Number.MAX_VALUE;for(let e=0;e<t.length;e++){let r,s=0;for(let o=0;o<=e;o++)r=1/(1+i*Math.abs(o-n[e])),r<1e-6||r>.999999||(s+=t[o]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));for(let n=e+1;n<t.length;n++)r=1/(1+i*Math.abs(n-a[e])),r<1e-6||r>.999999||(s+=t[n]*(-r*Math.log(r)-(1-r)*Math.log(1-r)));s<l&&(l=s,h=e)}return h},intermodes:function(t){let e=t.slice(),r=0;for(;!Fo(e);){let i=0,n=0,s=e[0];for(let r=0;r<t.length-1;r++)i=n,n=s,s=e[r+1],e[r]=(i+n+s)/3;if(e[t.length-1]=(n+s)/3,r++,r>1e4)throw new Error("Intermodes Threshold not found after 10000 iterations")}let i=0;for(let r=1;r<t.length-1;r++)e[r-1]<e[r]&&e[r+1]<e[r]&&(i+=r);return Math.floor(i/2)},isodata:function(t){let e,r,i,n,s=0;for(let e=1;e<t.length;e++)if(t[e]>0){s=e+1;break}for(;;){e=0,i=0;for(let r=0;r<s;r++)i+=t[r],e+=t[r]*r;n=0,r=0;for(let e=s+1;e<t.length;e++)r+=t[e],n+=t[e]*e;if(i>0&&r>0&&(e/=i,n/=r,s===Math.round((e+n)/2)))break;if(s++,s>t.length-2)throw new Error("Threshold not found")}return s},li:function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d;f=.5,c=0;for(let e=0;e<t.length;e++)c+=e*t[e];c/=e,h=c;do{a=h,r=a+.5|0,i=0,s=0;for(let e=0;e<=r;e++)i+=e*t[e],s+=t[e];l=0===s?0:i/s,n=0,o=0;for(let e=r+1;e<t.length;e++)n+=e*t[e],o+=t[e];u=0===o?0:n/o,d=(l-u)/(Math.log(l)-Math.log(u)),h=d<-Number.EPSILON?d-.5|0:d+.5|0}while(Math.abs(h-a)>.5);return r},maxentropy:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length),n=new Array(t.length);i[0]=r[0],n[0]=1-i[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e],n[e]=1-i[e];let s=0;for(let e=0;e<t.length;e++)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let o=t.length-1;for(let e=t.length-1;e>=s;e--)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let a,h,l,u=-1,c=Number.MIN_VALUE;for(let e=s;e<=o;e++){h=0;for(let n=0;n<=e;n++)0!==t[n]&&(h-=r[n]/i[e]*Math.log(r[n]/i[e]));l=0;for(let i=e+1;i<t.length;i++)0!==t[i]&&(l-=r[i]/n[e]*Math.log(r[i]/n[e]));a=h+l,c<a&&(c=a,u=e)}return u},mean:function(t,e){let r=0;for(let e=0;e<t.length;e++)r+=e*t[e];return Math.floor(r/e)},minerror:function(t,e){let r,i,n,s,o,a,h,l,u,c,f,d,p=-2,m=0;for(let e=0;e<t.length;e++)m+=e*t[e];for(m/=e,r=m;r!==p;){let e=No(t,r),m=No(t,t.length-1),g=zo(t,r),w=zo(t,t.length-1),b=jo(t,r);if(i=g/e,n=(w-g)/(m-e),s=e/m,o=(m-e)/m,a=b/e-i*i,h=(jo(t,t.length-1)-b)/(m-e)-n*n,l=1/a-1/h,u=i/a-n/h,c=i*i/a-n*n/h+Math.log10(a*(o*o)/(h*(s*s))),f=u*u-l*c,f<0)return r;p=r,d=(u+Math.sqrt(f))/l,r=isNaN(d)?p:Math.floor(d)}return r},minimum:function(t){if(t.length<2)return 0;let e=0,r=-1,i=-1,n=new Array(t.length);for(let e=0;e<t.length;e++)n[e]=t[e],t[e]>0&&(i=e);for(;!Vo(n);)if(n=Yo(n),e++,e>1e4)return r;return r=function(t,e){let r;for(let i=1;i<e;i++)if(t[i-1]>t[i]&&t[i+1]>=t[i]){r=i;break}return r}(n,i),r},moments:function(t,e){let r,i,n,s,o,a,h=0,l=0,u=0,c=0,f=-1,d=t.length,p=new Array(d);for(let r=0;r<d;r++)p[r]=t[r]/e;for(let t=0;t<d;t++)h+=t*p[t],l+=t*t*p[t],u+=t*t*t*p[t];i=1*l-h*h,n=(-l*l+h*u)/i,s=(1*-u+l*h)/i,o=.5*(-s-Math.sqrt(s*s-4*n)),a=.5*(-s+Math.sqrt(s*s-4*n)),r=(a-h)/(a-o);for(let t=0;t<d;t++)if(c+=p[t],c>r){f=t;break}return f},otsu:function(t,e){let r=0,i=0,n=0,s=0,o=0;for(let e=0;e<t.length;e++)o+=e*t[e];for(let a=0;a<t.length;a++){i+=t[a];const h=e-i;if(0===i||0===h)continue;r+=a*t[a];const l=(o-r)/h,u=i*h*(r/i-l)*(r/i-l);u>=n&&(s=a,n=u)}return s},percentile:function(t){let e=-1,r=new Array(t.length),i=qo(t,t.length-1),n=1;for(let s=0;s<t.length;s++)r[s]=Math.abs(qo(t,s)/i-.5),r[s]<n&&(n=r[s],e=s);return e},renyientropy:function(t,e){let r,i,n,s=new Array(t.length),o=new Array(t.length),a=new Array(t.length),h=0,l=0,u=0,c=0,f=0,d=0;for(let r=0;r<t.length;r++)s[r]=t[r]/e;o[0]=s[0],a[0]=1-o[0];for(let e=1;e<t.length;e++)o[e]=o[e-1]+s[e],a[e]=1-o[e];i=0;for(let e=0;e<t.length;e++)if(Math.abs(o[e])>=Number.EPSILON){i=e;break}n=t.length-1;for(let e=t.length-1;e>=i;e--)if(Math.abs(a[e])>=Number.EPSILON){n=e;break}for(let e=i;e<=n;e++){let r=0,i=0,n=0;for(let a=0;a<=e;a++)0!==t[a]&&(r-=s[a]/o[e]*Math.log(s[a]/o[e])),i+=Math.sqrt(s[a]/o[e]),n+=s[a]*s[a]/(o[e]*o[e]);let p=0,m=0,g=0;for(let r=e+1;r<t.length;r++)0!==t[r]&&(p-=s[r]/a[e]*Math.log(s[r]/a[e])),m+=Math.sqrt(s[r]/a[e]),g+=s[r]*s[r]/(a[e]*a[e]);let w=r+p,b=2*(i*m>0?Math.log(i*m):0),y=-1*(n*g>0?Math.log(n*g):0);w>c&&(c=w,h=e),b>f&&(f=b,l=e),y>d&&(d=y,u=e)}let p,m=[h,l,u];m.sort(Xo.j),p=Math.abs(m[0]-m[1])<=5?Math.abs(m[1]-m[2])<=5?[1,2,1]:[0,1,3]:Math.abs(m[1]-m[2])<=5?[3,1,0]:[1,2,1];let g=o[m[2]]-o[m[0]];return r=Math.round(m[0]*(o[m[0]]+.25*g*p[0])+.25*m[1]*g*p[1]+m[2]*(a[m[2]]+.25*g*p[2])),r},shanbhag:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length),n=new Array(t.length);i[0]=r[0],n[0]=1-i[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e],n[e]=1-i[e];let s=0;for(let e=0;e<t.length;e++)if(Math.abs(i[e])>=Number.EPSILON){s=e;break}let o=t.length-1;for(let e=t.length-1;e>=s;e--)if(Math.abs(n[e])>=Number.EPSILON){o=e;break}let a,h,l,u,c=-1,f=Number.MAX_VALUE;for(let e=s;e<=o;e++){l=0,a=.5/i[e];for(let t=1;t<=e;t++)l-=r[t]*Math.log(1-a*i[t-1]);l*=a,u=0,a=.5/n[e];for(let i=e+1;i<t.length;i++)u-=r[i]*Math.log(1-a*n[i]);u*=a,h=Math.abs(l-u),h<f&&(f=h,c=e)}return c},triangle:function(t){let e=0,r=0,i=0,n=0;for(let r=0;r<t.length;r++)if(t[r]>0){e=r;break}e>0&&e--;for(let e=t.length-1;e>0;e--)if(t[e]>0){n=e;break}n<t.length-1&&n++;for(let e=0;e<t.length;e++)t[e]>r&&(i=e,r=t[e]);let s,o,a,h=!1;if(i-e<n-i){h=!0;let r=0,s=t.length-1;for(;r<s;){let e=t[r];t[r]=t[s],t[s]=e,r++,s--}e=t.length-1-n,i=t.length-1-i}if(e===i)return e;s=t[i],o=e-i,a=Math.sqrt(s*s+o*o),s/=a,o/=a,a=s*e+o*t[e];let l=e,u=0;for(let r=e+1;r<=i;r++){let e=s*r+o*t[r]-a;e>u&&(l=r,u=e)}if(l--,h){let e=0,r=t.length-1;for(;e<r;){let i=t[e];t[e]=t[r],t[r]=i,e++,r--}return t.length-1-l}return l},yen:function(t,e){let r=new Array(t.length);for(let i=0;i<t.length;i++)r[i]=t[i]/e;let i=new Array(t.length);i[0]=r[0];for(let e=1;e<t.length;e++)i[e]=i[e-1]+r[e];let n=new Array(t.length);n[0]=r[0]*r[0];for(let e=1;e<t.length;e++)n[e]=n[e-1]+r[e]*r[e];let s=new Array(t.length);s[t.length-1]=0;for(let e=t.length-2;e>=0;e--)s[e]=s[e+1]+r[e+1]*r[e+1];let o,a=-1,h=Number.MIN_VALUE;for(let e=0;e<t.length;e++)o=-1*(n[e]*s[e]>0?Math.log(n[e]*s[e]):0)+2*(i[e]*(1-i[e])>0?Math.log(i[e]*(1-i[e])):0),o>h&&(h=o,a=e);return a}},$o={};function Wo(t={}){let{algorithm:e=$o.otsu}=t;this.checkProcessable("getThreshold",{components:1,bitDepth:[8,16]});let r=Go[e.toLowerCase()];if(r)return r(this.getHistogram(),this.size);throw new Error(`unknown thresholding algorithm: ${e}`)}Object.keys(Go).forEach((t=>{$o[t]=t}));const Zo="threshold";function Ho(t={}){let{algorithm:e=Zo,threshold:r=.5,useAlpha:i=!0,invert:n=!1}=t;this.checkProcessable("mask",{components:1,bitDepth:[8,16]}),r=e===Zo?function(t,e){if(!e)throw Error("getThreshold : the maxValue should be specified");if("string"==typeof t){if("%"!==t[t.length-1])throw Error("getThreshold : if the value is a string it must finish by %");return parseFloat(t)/100*e}if("number"==typeof t)return t<1?t*e:t;throw Error("getThreshold : the value is not valid")}(r,this.maxValue):Wo.call(this,t);let s=new il(this.width,this.height,{kind:"BINARY",parent:this}),o=0;if(this.alpha&&i)for(let t=0;t<this.data.length;t+=this.channels){let e=this.data[t]+(this.maxValue-this.data[t])*(this.maxValue-this.data[t+1])/this.maxValue;(n&&e<=r||!n&&e>=r)&&s.setBit(o),o++}else for(let t=0;t<this.data.length;t+=this.channels)(n&&this.data[t]<=r||!n&&this.data[t]>=r)&&s.setBit(o),o++;return s}function Ko(t={}){let{size:e=0,algorithm:r="copy",color:i}=t;if(this.checkProcessable("pad",{bitDepth:[8,16]}),"set"===r){if(i.length!==this.channels)throw new Error(`pad: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<i.length;t++)0===i[t]&&(i[t]=.001)}else i=Ls()(this.channels,null);Array.isArray(e)||(e=[e,e]);let n=this.width+2*e[0],s=this.height+2*e[1],o=this.channels,a=il.createFrom(this,{width:n,height:s});!function(t,e,r,i){let n=t.width,s=t.height,o=e.width,a=t.channels;for(let h=0;h<n;h++)for(let l=0;l<s;l++)for(let s=0;s<a;s++){let u=(l*n+h)*a+s,c=((i+l)*o+r+h)*a+s;e.data[c]=t.data[u]}}(this,a,e[0],e[1]);for(let t=e[0];t<n-e[0];t++)for(let r=0;r<o;r++){let h=i[r]||a.data[(e[1]*n+t)*o+r];for(let i=0;i<e[1];i++)a.data[(i*n+t)*o+r]=h;h=i[r]||a.data[((s-e[1]-1)*n+t)*o+r];for(let i=s-e[1];i<s;i++)a.data[(i*n+t)*o+r]=h}for(let t=0;t<s;t++)for(let r=0;r<o;r++){let s=i[r]||a.data[(t*n+e[0])*o+r];for(let i=0;i<e[0];i++)a.data[(t*n+i)*o+r]=s;s=i[r]||a.data[(t*n+n-e[0]-1)*o+r];for(let i=n-e[0];i<n;i++)a.data[(t*n+i)*o+r]=s}return a}function Jo(t=8){if(this.checkProcessable("colorDepth",{bitDepth:[1,8,16]}),![8,16].includes(t))throw Error("You need to specify the new colorDepth as 8 or 16");if(this.bitDepth===t)return this.clone();let e=il.createFrom(this,{bitDepth:t});switch(t){case 8:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=255);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]>>8;break;case 16:if(1===this.bitDepth)for(let t=0;t<this.size;t++)this.getBit(t)&&(e.data[t]=65535);else for(let t=0;t<this.data.length;t++)e.data[t]=this.data[t]<<8|this.data[t];break;default:throw new Error("colorDepth conversion unexpected case")}return e}function Qo(t,e={}){const{interpolation:r=So.nearestneighbor,width:i=this.width,height:n=this.height}=e;if("number"!=typeof t)throw new TypeError("degrees must be a number");const s=Co(r),o=t*Math.PI/180,a=Math.floor(Math.abs(i*Math.cos(o))+Math.abs(n*Math.sin(o))),h=Math.floor(Math.abs(n*Math.cos(o))+Math.abs(i*Math.sin(o))),l=il.createFrom(this,{width:a,height:h}),u=Math.cos(-o),c=Math.sin(-o);let f=a/2,d=h/2;a%2==0?(f-=.5,h%2==0?d-=.5:d=Math.floor(d)):(f=Math.floor(f),h%2==0?d-=.5:d=Math.floor(d));const p=Math.floor(i/2-f),m=Math.floor(n/2-d);switch(s){case So.nearestneighbor:return function(t,e,r,i,n,s,o,a){for(let h=0;h<e.width;h+=1)for(let l=0;l<e.height;l+=1)for(let u=0;u<t.channels;u++){let c=Math.round((h-n)*o-(l-s)*a+n)+r,f=Math.round((l-s)*o+(h-n)*a+s)+i;c<0||c>=t.width||f<0||f>=t.height?1===t.alpha&&u===t.channels-1?e.setValueXY(h,l,u,0):e.setValueXY(h,l,u,t.maxValue):e.setValueXY(h,l,u,t.getValueXY(c,f,u))}return e}(this,l,p,m,f,d,u,c);case So.bilinear:return function(t,e,r,i,n,s,o,a){let h=t.width*t.channels;for(let l=0;l<e.height;l++)for(let u=0;u<e.width;u++){let c=(u-n)*o-(l-s)*a+n+r,f=(l-s)*o+(u-n)*a+s+i,d=0|c,p=0|f,m=c-d,g=f-p;for(let r=0;r<t.channels;r++)if(c<0||c>=t.width||f<0||f>=t.height)1===t.alpha&&r===t.channels-1?e.setValueXY(u,l,r,0):e.setValueXY(u,l,r,t.maxValue);else{let i=(p*t.width+d)*t.channels+r,n=t.data[i],s=t.data[i+t.channels],o=t.data[i+h],a=n+m*(s-n)+g*(o-n)+m*g*(n-s-o+t.data[i+h+t.channels])|0;e.setValueXY(u,l,r,a)}}return e}(this,l,p,m,f,d,u,c);default:throw new Error(`unsupported rotate interpolation: ${s}`)}}function ta(t,e){if("number"!=typeof t)throw new TypeError("angle must be a number");switch(t<0&&(t=360*Math.ceil(-t/360)+t),t%360){case 0:return this.clone();case 90:return ra.call(this);case 180:return ia.call(this);case 270:return ea.call(this);default:return Qo.call(this,t,e)}}function ea(){const t=il.createFrom(this,{width:this.height,height:this.width}),e=t.height-1;for(let r=0;r<this.height;r++)for(let i=0;i<this.width;i++)for(let n=0;n<this.channels;n++)t.setValueXY(r,e-i,n,this.getValueXY(i,r,n));return t}function ra(){const t=il.createFrom(this,{width:this.height,height:this.width}),e=t.width-1;for(let r=0;r<this.height;r++)for(let i=0;i<this.width;i++)for(let n=0;n<this.channels;n++)t.setValueXY(e-r,i,n,this.getValueXY(i,r,n));return t}function ia(){const t=il.createFrom(this),e=t.width-1,r=t.height-1;for(let i=0;i<this.height;i++)for(let n=0;n<this.width;n++)for(let s=0;s<this.channels;s++)t.setValueXY(e-n,r-i,s,this.getValueXY(n,i,s));return t}function na(t,e={}){const r=as(t);this.checkProcessable("insert",r);let{x:i=0,y:n=0}=e;const s=ls(this,e,{copy:!0}),o=Math.min(s.height,n+t.height),a=Math.min(s.width,i+t.width);if(1===s.bitDepth)for(let e=n;e<o;e++)for(let r=i;r<a;r++)t.getBitXY(r-i,e-n)?s.setBitXY(r,e):s.clearBitXY(r,e);else for(let e=n;e<o;e++)for(let r=i;r<a;r++)s.setPixelXY(r,e,t.getPixelXY(r-i,e-n));return s}function sa(t={}){let{size:e=0,algorithm:r="copy",color:i}=t;if(this.checkProcessable("setBorder",{bitDepth:[8,16,32,64]}),"set"===r){if(i.length!==this.channels)throw new Error(`setBorder: the color array must have the same length as the number of channels. Here: ${this.channels}`);for(let t=0;t<i.length;t++)0===i[t]&&(i[t]=.001)}else i=Ls()(this.channels,null);Array.isArray(e)||(e=[e,e]);let n=e[0],s=e[1],o=this.channels;for(let t=n;t<this.width-n;t++)for(let e=0;e<o;e++){let r=i[e]||this.data[(t+this.width*s)*o+e];for(let i=0;i<s;i++)this.data[(i*this.width+t)*o+e]=r;r=i[e]||this.data[(t+this.width*(this.height-s-1))*o+e];for(let i=this.height-s;i<this.height;i++)this.data[(i*this.width+t)*o+e]=r}for(let t=0;t<this.height;t++)for(let e=0;e<o;e++){let r=i[e]||this.data[(t*this.width+n)*o+e];for(let i=0;i<n;i++)this.data[(t*this.width+i)*o+e]=r;r=i[e]||this.data[(t*this.width+this.width-n-1)*o+e];for(let i=this.width-n;i<this.width;i++)this.data[(t*this.width+i)*o+e]=r}return this}function oa(t={}){let{preserveAlpha:e=!0}=t;if(this.checkProcessable("split",{bitDepth:[8,16]}),1===this.components)return new ts([this.clone()]);let r=new ts,i=this.data;if(this.alpha&&e)for(let t=0;t<this.components;t++){let e=il.createFrom(this,{components:1,alpha:!0,colorModel:on}),n=0;for(let r=0;r<i.length;r+=this.channels)e.data[n++]=i[r+t],e.data[n++]=i[r+this.components];r.push(e)}else for(let t=0;t<this.channels;t++){let e=il.createFrom(this,{components:1,alpha:!1,colorModel:on}),n=0;for(let r=0;r<i.length;r+=this.channels)e.data[n++]=i[r+t];r.push(e)}return r}function aa(t,e={}){let{keepAlpha:r=!1,mergeAlpha:i=!1}=e;r&=this.alpha,i&=this.alpha,this.checkProcessable("getChannel",{bitDepth:[8,16]}),t=bs(this,t);let n=il.createFrom(this,{components:1,alpha:r,colorModel:on}),s=0;for(let e=0;e<this.data.length;e+=this.channels)i?n.data[s++]=this.data[e+t]*this.data[e+this.components]/this.maxValue:(n.data[s++]=this.data[e+t],r&&(n.data[s++]=this.data[e+this.components]));return n}function ha(t=la,e={}){let{mergeAlpha:r=!1,keepAlpha:i=!1}=e;r&=this.alpha,i&=this.alpha,this.checkProcessable("combineChannels",{bitDepth:[8,16]});let n=il.createFrom(this,{components:1,alpha:i,colorModel:on}),s=0;for(let e=0;e<this.size;e++){let o=t(this.getPixel(e));r?n.data[s++]=o*this.data[e*this.channels+this.components]/this.maxValue:(n.data[s++]=o,i&&(n.data[s++]=this.data[e*this.channels+this.components]))}return n}function la(t){return(t[0]+t[1]+t[2])/3}function ua(t,e){if(this.checkProcessable("setChannel",{bitDepth:[8,16]}),e.checkProcessable("setChannel (image parameter check)",{bitDepth:[this.bitDepth],alpha:[0],components:[1]}),e.width!==this.width||e.height!==this.height)throw new Error("Images must have exactly the same width and height");let r=t=bs(this,t);for(let t=0;t<e.data.length;t++)this.data[r]=e.data[t],r+=this.channels;return this}function ca(t,e={}){let{shift:r=[0,0],average:i,channels:n,defaultAlpha:s,normalize:o,border:a=[0,0]}=e;if(this.checkProcessable("getSimilarity",{bitDepth:[8,16]}),Array.isArray(a)||(a=[a,a]),n=ws(this,{channels:n,defaultAlpha:s}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");void 0===i&&(i=!0);let h=Math.max(a[0],-r[0]),l=Math.min(this.width-a[0],this.width-r[0]),u=Math.max(a[1],-r[1]),c=Math.min(this.height-a[1],this.height-r[1]),f=Ls()(n.length,0);for(let e=0;e<n.length;e++){let i=n[e],s=o?this.sum[i]:Math.max(this.sum[i],t.sum[i]),a=o?t.sum[i]:Math.max(this.sum[i],t.sum[i]);if(0!==s&&0!==a)for(let n=h;n<l;n++)for(let o=u;o<c;o++){let h=n*this.multiplierX+o*this.multiplierY+i,l=h+r[0]*this.multiplierX+r[1]*this.multiplierY;f[e]+=Math.min(this.data[h]/s,t.data[l]/a)}}return i?f.reduce(((t,e)=>t+e))/f.length:f}function fa(t={}){let{sampling:e=[10,10],painted:r=!1,mask:i}=t;this.checkProcessable("getPixelsGrid",{bitDepth:[8,16],channels:1}),Array.isArray(e)||(e=[e,e]);const n=e[0],s=e[1],o=[],a=[],h=this.width/n,l=this.height/s;let u=Math.floor(h/2);for(let t=0;t<n;t++){let t=Math.floor(l/2);for(let e=0;e<s;e++){let e=Math.round(u),r=Math.round(t);i&&!i.getBitXY(e,r)||(o.push([e,r]),a.push(this.getPixelXY(e,r))),t+=l}u+=h}const c={xyS:o,zS:a};return r&&(c.painted=this.rgba8().paintPoints(o)),c}function da(t,e,r){const i=new Array(t);for(let r=0;r<t;r++)i[r]=new Array(e);if(r)for(let n=0;n<t;n++)for(let t=0;t<e;t++)i[n][t]=r;return i.width=t,i.height=e,Object.setPrototypeOf(i,da.prototype),i}function pa(t,e={}){let{border:r}=e;if(this.checkProcessable("getChannel",{bitDepth:[8,16]}),this.bitDepth!==t.bitDepth)throw new Error("Both images must have the same bitDepth");if(this.channels!==t.channels)throw new Error("Both images must have the same number of channels");if(this.colorModel!==t.colorModel)throw new Error("Both images must have the same colorModel");let i=new da(t.width,t.height,-1/0),n=Math.floor(t.width/2),s=Math.floor(t.height/2),o=n,a=s,h=!1;for(;!h;){let e=i.localSearch(n,s,-1/0);for(let n=0;n<e.length;n++){let s=e[n],h=this.getSimilarity(t,{border:r,shift:[o-s[0],a-s[1]]});i[s[0]][s[1]]=h}let l=i.localMax(n,s);l.position[0]!==n||l.position[1]!==s?(n=l.position[0],s=l.position[1]):h=!0}return[n-o,s-a]}function ma(t,e=0){this.checkProcessable("getRow",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.height)throw new RangeError(`row must be included between 0 and ${t.height-1}. Current value: ${e}`)}(this,t),Eo(this,e);let r=new Array(this.width),i=0,n=t*this.width*this.channels+e,s=n+this.width*this.channels;for(let t=n;t<s;t+=this.channels)r[i++]=this.data[t];return r}function ga(t,e=0){this.checkProcessable("getColumn",{bitDepth:[8,16]}),function(t,e){if(e<0||e>=t.width)throw new RangeError(`column must be included between 0 and ${t.width-1}. Current value: ${e}`)}(this,t),Eo(this,e);let r=new Array(this.height),i=0,n=this.width*this.channels;for(let s=e+t*this.channels;s<this.data.length;s+=n)r[i++]=this.data[s];return r}function wa(t={}){let{channel:e}=t;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===e){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");e=0}let r=new Hs.Z(this.height,this.width);for(let t=0;t<this.height;t++)for(let i=0;i<this.width;i++)r.set(t,i,this.getValueXY(i,t,e));return r}function ba(t,e={}){t=new Hs.Z(t);let{channel:r}=e;if(this.checkProcessable("getMatrix",{bitDepth:[8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}if(this.width!==t.columns||this.height!==t.rows)throw new RangeError("The size of the matrix must be equal to the size of the image");for(let e=0;e<this.height;e++)for(let i=0;i<this.width;i++)this.setValueXY(i,e,r,t.get(e,i))}function ya(){this.checkProcessable("getPixelsArray",{bitDepth:[8,16,32]});let t=new Array(this.size),e=0;for(let r=0;r<this.data.length;r+=this.channels){let i=new Array(this.components);for(let t=0;t<this.components;t++)i[t]=this.data[r+t];t[e++]=i}return t}function _a(t){let e=this,r=e.getClosestCommonParent(t),i=e.getRelativePosition(r,{defaultFurther:!0}),n=va(e,i),s=t.getRelativePosition(r,{defaultFurther:!0}),o=va(t,s),a=function(t,e){let r=0,i=0,n=[];for(;r<t.length&&i<e.length;)t[r][0]===e[i][0]&&t[r][1]===e[i][1]?(n.push(t[r]),r++,i++):t[r][0]<e[i][0]||t[r][0]===e[i][0]&&t[r][1]<e[i][1]?r++:i++;return n}(n,o),h={whitePixelsMask1:[],whitePixelsMask2:[],commonWhitePixels:[]};for(let r=0;r<a.length;r++){let n=a[r],o=[n[0]-i[0],n[1]-i[1]],l=[n[0]-s[0],n[1]-s[1]],u=e.getBitXY(o[0],o[1]),c=t.getBitXY(l[0],l[1]);1===u&&1===c&&h.commonWhitePixels.push(n)}for(let t=0;t<n.length;t++){let r,i;0!==t&&(r=Math.floor(t/e.width),i=t%e.width),1===e.getBitXY(r,i)&&h.whitePixelsMask1.push(n[t])}for(let e=0;e<o.length;e++){let r=0,i=0;0!==e&&(r=Math.floor(e/t.width),i=e%t.width),1===t.getBitXY(r,i)&&h.whitePixelsMask2.push(o[e])}return h}function va(t,e){let r=[];for(let i=0;i<t.height;i++)for(let n=0;n<t.width;n++){let t=[i,n];r.push([t[0]+e[0],t[1]+e[1]])}return r}function xa(t){let e,r=ka(this),i=ka(t);if(e=r>=i?Aa(this,r):Aa(t,i),0===r||0===i)return e;let n=this,s=t;for(;r!==i;)if(r>i){if(n=n.parent,null===n)return e;r-=1}else{if(s=s.parent,null===s)return e;i-=1}for(;n!==s&&null!==n&&null!==s;)if(n=n.parent,s=s.parent,null===n||null===s)return e;return n!==s?e:n}function ka(t){let e=0,r=t;for(;null!=r.parent;)r=r.parent,e++;return e}function Aa(t,e){let r=t;for(;e>0;)r=r.parent,e-=1;return r}da.prototype.localMin=function(t,e){let r=this[t][e],i=[t,e];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]<r&&(r=this[n][t],i=[n,t]);return{position:i,value:r}},da.prototype.localMax=function(t,e){let r=this[t][e],i=[t,e];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]>r&&(r=this[n][t],i=[n,t]);return{position:i,value:r}},da.prototype.localSearch=function(t,e,r){let i=[];for(let n=Math.max(0,t-1);n<Math.min(this.length,t+2);n++)for(let t=Math.max(0,e-1);t<Math.min(this[0].length,e+2);t++)this[n][t]===r&&i.push([n,t]);return i};const Ma={lowThreshold:10,highThreshold:30,gaussianBlur:1.1},Ea=[[-1,0,1],[-2,0,2],[-1,0,1]],Sa=[[-1,-2,-1],[0,0,0],[1,2,1]],Ca={bitDepth:32,mode:"periodic"};function Ia(t){return function(t,e){t.checkProcessable("Canny edge detector",{bitDepth:8,channels:1,components:1}),e=Object.assign({},Ma,e);const r=t.width,i=t.height,n=t.maxValue,s={sigma:e.gaussianBlur,radius:3},o=t.gaussianFilter(s),a=o.convolution(Sa,Ca),h=o.convolution(Ea,Ca),l=h.hypotenuse(a),u=t.constructor,c=new u(r,i,{kind:"GREY",bitDepth:32}),f=new u(r,i,{kind:"GREY",bitDepth:32}),d=new u(r,i,{kind:"GREY"});for(var p=1;p<r-1;p++)for(var m=1;m<i-1;m++){var g=(Math.round(Math.atan2(h.getValueXY(p,m,0),a.getValueXY(p,m,0))*(5/Math.PI))+5)%5;0===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p,m+1,0))||1===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m+1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m-1,0))||2===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m,0))||3===g&&(l.getValueXY(p,m,0)<=l.getValueXY(p-1,m-1,0)||l.getValueXY(p,m,0)<=l.getValueXY(p+1,m+1,0))||c.setValueXY(p,m,0,l.getValueXY(p,m,0))}for(p=0;p<r*i;++p){var w=c.data[p],b=0;w>e.highThreshold&&(b++,d.data[p]=n),w>e.lowThreshold&&b++,f.data[p]=b}var y=[];for(p=1;p<r-1;++p)for(m=1;m<i-1;++m)if(1===f.getValueXY(p,m,0))t:for(var _=p-1;_<p+2;++_)for(var v=m-1;v<m+2;++v)if(2===f.getValueXY(_,v,0)){y.push([p,m]),d.setValueXY(p,m,0,n);break t}for(;y.length>0;){var x=[];for(p=0;p<y.length;++p)for(m=-1;m<2;++m)for(_=-1;_<2;++_)if(0!==m||0!==_){var k=y[p][0]+m,A=y[p][1]+_;1===f.getValueXY(k,A,0)&&0===d.getValueXY(k,A,0)&&(x.push([k,A]),d.setValueXY(k,A,0,n))}y=x}return d}(this,t)}function Da(t,e={}){let{position:r}=e;if(this.checkProcessable("extract",{bitDepth:[1,8,16]}),!r&&(r=t.getRelativePosition(this),!r))throw new Error("extract : can not extract an image because the relative position can not be determined, try to specify manually the position as an array of 2 elements [x,y].");if(this.bitDepth>1){let e=il.createFrom(this,{width:t.width,height:t.height,alpha:1,position:r,parent:this});for(let i=0;i<t.width;i++)for(let n=0;n<t.height;n++){for(let t=0;t<this.channels;t++){let s=this.getValueXY(i+r[0],n+r[1],t);e.setValueXY(i,n,t,s)}t.getBitXY(i,n)||e.setValueXY(i,n,this.components,0)}return e}{let e=il.createFrom(this,{width:t.width,height:t.height,position:r,parent:this});for(let i=0;i<t.height;i++)for(let n=0;n<t.width;n++)t.getBitXY(n,i)&&this.getBitXY(n+r[0],i+r[1])&&e.setBitXY(n,i);return e}}var Pa=__webpack_require__(8737),Ba=__webpack_require__.n(Pa);function Ra(t={}){const{x:e=0,y:r=0,inPlace:i=!0}=t,n=i?this:il.createFrom(this);if(this.checkProcessable("floodFill",{bitDepth:1}),this.getBitXY(e,r))return n;const s=new(Ba());for(s.push(new Ta(e,r));s.length>0;){const t=s.shift();n.setBitXY(t.x,t.y);for(let e=t.x+1;e<this.width&&!n.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)n.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&s.push(new Ta(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&s.push(new Ta(e,t.y-1));for(let e=t.x-1;e>=0&&!n.getBitXY(e,t.y)&&!this.getBitXY(e,t.y);e++)n.setBitXY(e,t.y),t.y+1<this.height&&!this.getBitXY(e,t.y+1)&&s.push(new Ta(e,t.y+1)),t.y-1>=0&&!this.getBitXY(e,t.y-1)&&s.push(new Ta(e,t.y-1))}return n}function Ta(t,e){this.x=t,this.y=e}function Ua(){return Ua=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var r=arguments[e];for(var i in r)Object.prototype.hasOwnProperty.call(r,i)&&(t[i]=r[i])}return t},Ua.apply(this,arguments)}function Oa(t,e,r){var i=function(t,e,r){return{h:t,s:2*(e*=(r<50?r:100-r)/100)/(r+e)*100,v:r+e}}(t,e,r);return function(t,e,r){var i,n=(r/=100)*(e/=100),s=t/60,o=n*(1-Math.abs(s%2-1)),a=r-n;return i=s>=0&&s<1?[n,o,0]:s>=1&&s<2?[o,n,0]:s>=2&&s<3?[0,n,o]:t>=3&&s<4?[0,o,n]:t>=4&&s<5?[o,0,n]:t>=5&&s<=6?[n,0,o]:[0,0,0],{r:Math.round(255*(i[0]+a)),g:Math.round(255*(i[1]+a)),b:Math.round(255*(i[2]+a))}}(i.h,i.s,i.v)}var La={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,132,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,255,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,203],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[119,128,144],slategrey:[119,128,144],snow:[255,255,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,5]};function Fa(t){let e=function(t){var e=La[t.toLowerCase()];if(e)return{r:e[0],g:e[1],b:e[2],a:100}}(r=t)||function(t){if("#"===t[0]&&4===t.length)return{r:parseInt(t[1]+t[1],16),g:parseInt(t[2]+t[2],16),b:parseInt(t[3]+t[3],16),a:100}}(r)||function(t){if("#"===t[0]&&7===t.length)return{r:parseInt(t.slice(1,3),16),g:parseInt(t.slice(3,5),16),b:parseInt(t.slice(5,7),16),a:100}}(r)||function(t){var e=t.match(/rgb\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100}}}(r)||function(t){var e=t.match(/rgba\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */).map(Number);return{r:r[0],g:r[1],b:r[2],a:100*r[3]}}}(r)||function(t){var e=t.match(/hsl\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */);return Ua({},Oa(parseInt(r[0],10),parseInt(r[1],10),parseInt(r[2],10)),{a:100})}}(r)||function(t){var e=t.match(/hsla\(([^)]+)\)/);if(e){var r=e[1].split(/ *, */),i=parseInt(r[0],10),n=parseInt(r[1],10),s=parseInt(r[2],10),o=parseInt(100*parseFloat(r[3]),10);return Ua({},Oa(i,n,s),{a:o})}}(r);var r;return[e.r,e.g,e.b,Math.round(255*e.a/100)]}function Na(t,e,r){return r<0&&(r+=1),r>1&&(r-=1),r<1/6?t+6*(e-t)*r:r<.5?e:r<2/3?t+(e-t)*(2/3-r)*6:t}function za(t,e,r){let i,n,s,o,a,h;return r/=100,0==(e/=100)?o=a=h=255*r:(n=r<=.5?r*(e+1):r+e-r*e,i=2*r-n,s=t/360,o=Na(i,n,s+1/3),a=Na(i,n,s),h=Na(i,n,s-1/3)),{r:o,g:a,b:h}}function ja(t){let{color:e,colors:r,randomColors:i,numberColors:n=50}=t;if(e&&!Array.isArray(e)&&(e=Fa(e)),e)return[e];if(r)return r=r.map((function(t){return Array.isArray(t)?t:Fa(t)})),r;if(i){r=new Array(n);for(let t=0;t<n;t++)r[t]=[Math.floor(256*Math.random()),Math.floor(256*Math.random()),Math.floor(256*Math.random())]}return function(t){let e=new Array(t),r=0;for(let i=0;i<360;i+=360/t){r++;let t=za(i,100,30+r%4*15);e[r-1]=[Math.round(255*t.r),Math.round(255*t.g),Math.round(255*t.b)]}return e}(n)}function Ya(t,e,r={}){let{color:i="blue",colors:n,font:s="12px Helvetica",rotate:o=0}=r;if(this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:an}),!Array.isArray(t))throw Error("paintLabels: labels must be an array");if(!Array.isArray(e))throw Error("paintLabels: positions must be an array");if(i&&!Array.isArray(i)&&(i=Fa(i)),n=n?n.map((function(t){return Array.isArray(t)?t:Fa(t)})):[i],t.length!==e.length)throw Error("paintLabels: positions and labels must be arrays from the same size");Array.isArray(s)||(s=[s]),Array.isArray(o)||(o=[o]);let a=this.getCanvas().getContext("2d");for(let r=0;r<t.length;r++){a.save();let i=n[r%n.length];a.fillStyle=`rgba(${i[0]},${i[1]},${i[2]},${i[3]/this.maxValue})`,a.font=s[r%s.length];let h=e[r];a.translate(h[0],h[1]),a.rotate(o[r%o.length]/180*Math.PI),a.fillText(t[r],0,0),a.restore()}return this.data=Uint8Array.from(a.getImageData(0,0,this.width,this.height).data),this}function Va(t,e={}){let{alpha:r=255,labels:i=[],labelsPosition:n=[],labelColor:s="blue",labelFont:o="12px Helvetica"}=e;this.checkProcessable("paintMasks",{channels:[3,4],bitDepth:[8,16],colorModel:an});let a=ja(Object.assign({},e,{numberColors:t.length}));Array.isArray(t)||(t=[t]);for(let e=0;e<t.length;e++){let i=t[e],n=a[e%a.length];for(let t=0;t<i.width;t++)for(let e=0;e<i.height;e++)if(i.getBitXY(t,e))for(let s=0;s<Math.min(this.components,n.length);s++)if(255===r)this.setValueXY(t+i.position[0],e+i.position[1],s,n[s]);else{let o=this.getValueXY(t+i.position[0],e+i.position[1],s);o=Math.round((o*(255-r)+n[s]*r)/255),this.setValueXY(t+i.position[0],e+i.position[1],s,o)}}if(Array.isArray(i)&&i.length>0){let e=this.getCanvas().getContext("2d");e.fillStyle=s,e.font=o;for(let r=0;r<Math.min(t.length,i.length);r++){let s=n[r]?n[r]:t[r].position;e.fillText(i[r],s[0],s[1])}this.data=Uint8Array.from(e.getImageData(0,0,this.width,this.height).data)}return this}function qa(t,e){let r=new Array(t);for(let i=0;i<t;i++)r[i]=new Array(e).fill(0);return r}const Xa=[[0,0,1,0,0],[0,0,1,0,0],[1,1,1,1,1],[0,0,1,0,0],[0,0,1,0,0]],Ga=[[0,1,0],[1,1,1],[0,1,0]];class $a{constructor(t={}){let{kind:e="cross",shape:r,size:i,width:n,height:s,filled:o=!0}=t;if(i&&(n=i,s=i),r)switch(r.toLowerCase()){case"square":case"rectangle":this.matrix=function(t,e,r){const i=qa(e,t);if(r.filled)for(let r=0;r<e;r++)for(let e=0;e<t;e++)i[r][e]=1;else{for(let r of[0,e-1])for(let e=0;e<t;e++)i[r][e]=1;for(let r=0;r<e;r++)for(let e of[0,t-1])i[r][e]=1}return i}(n,s,{filled:o});break;case"circle":case"ellipse":this.matrix=function(t,e,r){const i=qa(e,t);let n=1-e%2,s=1-t%2,o=Math.floor((t-1)/2),a=Math.floor((e-1)/2),h=o*o,l=a*a;if(r.filled)for(let e=0;e<=a;e++)for(let r=o-Math.floor(Math.sqrt(h-h*e*e/l));r<=o;r++)i[a-e][r]=1,i[a+e+n][r]=1,i[a-e][t-r-1]=1,i[a+e+n][t-r-1]=1;else{for(let e=0;e<=a;e++){let r=o-Math.floor(Math.sqrt(h-h*e*e/l));i[a-e][r]=1,i[a+e+n][r]=1,i[a-e][t-r-1]=1,i[a+e+n][t-r-1]=1}for(let t=0;t<=o;t++){let r=a-Math.floor(Math.sqrt(l-l*t*t/h));i[r][o-t]=1,i[r][o+t+s]=1,i[e-r-1][o-t]=1,i[e-r-1][o+t+s]=1}}return i}(n,s,{filled:o});break;case"triangle":this.matrix=function(t,e,r){if(!r.filled)throw new Error("Non filled triangle is not implemented");const i=qa(e,t);for(let r=0;r<e;r++){let n=Math.floor((1-r/e)*t/2);for(let e=n;e<t-n;e++)i[r][e]=1}return i}(n,s,{filled:o});break;default:throw new Error(`Shape: unexpected shape: ${r}`)}else{if(!e)throw new Error("Shape: expected a kind or a shape option");switch(e.toLowerCase()){case"cross":this.matrix=Xa;break;case"smallcross":this.matrix=Ga;break;default:throw new Error(`Shape: unexpected kind: ${e}`)}}this.height=this.matrix.length,this.width=this.matrix[0].length,this.halfHeight=this.height/2>>0,this.halfWidth=this.width/2>>0}getPoints(){let t=this.matrix,e=[];for(let r=0;r<t.length;r++)for(let i=0;i<t[0].length;i++)t[r][i]&&e.push([i-this.halfWidth,r-this.halfHeight]);return e}getMask(){let t=new il(this.width,this.height,{kind:cn});for(let e=0;e<this.matrix.length;e++)for(let r=0;r<this.matrix[0].length;r++)this.matrix[e][r]&&t.setBitXY(r,e);return t}}function Wa(t,e={}){let{shape:r}=e;this.checkProcessable("paintPoints",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length})),n=new $a(r).getPoints(),s=Math.min(this.channels,i[0].length);for(let e=0;e<t.length;e++){let r=i[e%i.length],o=t[e][0],a=t[e][1];for(let t=0;t<n.length;t++){let e=n[t][0],i=n[t][1];if(o+e>=0&&a+i>=0&&o+e<this.width&&a+i<this.height){let t=(o+e+(a+i)*this.width)*this.channels;for(let e=0;e<s;e++)this.data[t+e]=r[e]}}}return this}function Za(t,e={}){let{color:r=[this.maxValue,0,0],closed:i=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]});let n=Math.min(this.channels,r.length);for(let e=0;e<t.length-1+i;e++){let i=t[e],s=t[(e+1)%t.length],o=s[0]-i[0],a=s[1]-i[1],h=Math.max(Math.abs(o),Math.abs(a)),l=o/h,u=a/h,c=i[0],f=i[1];for(let t=0;t<=h;t++){let t=Math.round(c),e=Math.round(f);if(t>=0&&e>=0&&t<this.width&&e<this.height)if(1===this.bitDepth)this.setBitXY(t,e);else{let i=(t+e*this.width)*this.channels;for(let t=0;t<n;t++)this.data[i+t]=r[t]}c+=l,f+=u}}return this}function Ha(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolylines",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=i[e%i.length],this.paintPolyline(t[e],r);return this}function Ka(t,e={}){let{color:r=[this.maxValue,0,0],filled:i=!1}=e;this.checkProcessable("paintPoints",{bitDepth:[1,8,16]}),e.closed=!0;let n=function(t){let e=[];for(let r=0;r<t.length;r++)t[r][0]===t[(r+1)%t.length][0]&&t[r][1]===t[(r+1)%t.length][1]||t[r][0]===t[(r-1+t.length)%t.length][0]&&t[r][1]===t[(r-1+t.length)%t.length][1]||t[(r+1)%t.length][0]===t[(r-1+t.length)%t.length][0]&&t[(r-1+t.length)%t.length][1]===t[(r+1)%t.length][1]||e.push(t[r]);return e}(t);if(!1===i)return this.paintPolyline(t,e);{let i=Array(this.height);for(let t=0;t<this.height;t++){i[t]=[];for(let e=0;e<this.width;e++)i[t].push(0)}for(let t=0;t<n.length;t++){const e=Ja(n[t],n[(t+1)%n.length]);for(let t=0;t<this.height;t++)for(let r=0;r<this.width;r++)Qa(r,t,e,this.height)&&(i[t][r]=0===i[t][r]?1:0)}for(let t=0;t<this.height;t++)for(let e=0;e<this.width;e++)if(1===i[t][e])if(1===this.bitDepth)this.setBitXY(e,t);else{let i=Math.min(this.channels,r.length),n=(e+t*this.width)*this.channels;for(let t=0;t<i;t++)this.data[n+t]=r[t]}return this.paintPolyline(t,e)}}function Ja(t,e){if(t[0]===e[0])return{a:0,b:t[0],vertical:!0};{const r=(e[1]-t[1])/(e[0]-t[0]);return{a:r,b:t[1]-r*t[0],vertical:!1}}}function Qa(t,e,r,i){if(!0===r.vertical)return r.b<=t;if(0===r.a)return!1;{const n=(e-r.b)/r.a;return n<t&&n>=0&&n<=i}}function th(t,e={}){let r=Object.assign({},e);this.checkProcessable("paintPolygons",{bitDepth:[8,16]});let i=ja(Object.assign({},e,{numberColors:t.length}));for(let e=0;e<t.length;e++)r.color=i[e%i.length],this.paintPolygon(t[e],r);return this}function eh(t={}){let{maxSlots:e=256,channel:r,useAlpha:i=!0}=t;if(this.checkProcessable("getHistogram",{bitDepth:[1,8,16]}),void 0===r){if(this.components>1)throw new RangeError("You need to define the channel for an image that contains more than one channel");r=0}return ih.call(this,r,{useAlpha:i,maxSlots:e})}function rh(t={}){const{maxSlots:e=256,useAlpha:r=!0}=t;this.checkProcessable("getHistograms",{bitDepth:[8,16]});let i=new Array(r?this.components:this.channels);for(let t=0;t<i.length;t++)i[t]=ih.call(this,t,{useAlpha:r,maxSlots:e});return i}function ih(t,e){let{useAlpha:r,maxSlots:i}=e;if(1===this.bitDepth){let t=[0,0];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=this.getBitXY(e,r);0===i?t[0]+=1:1===i&&(t[1]+=1)}return t}let n=Math.log2(i);if(!Ss()(n))throw new RangeError("maxSlots must be a power of 2, for example: 64, 256, 1024");let s=0;this.bitDepth>n&&(s=this.bitDepth-n);let o=this.data,a=Ls()(Math.pow(2,Math.min(this.bitDepth,n)),0);if(r&&this.alpha){let e=this.channels-t-1;for(let r=t;r<o.length;r+=this.channels)a[o[r]>>s]+=o[r+e]/this.maxValue}else for(let e=t;e<o.length;e+=this.channels)a[o[e]>>s]++;return a}function nh(t={}){let{useAlpha:e=!0,nbSlots:r=512}=t;this.checkProcessable("getColorHistogram",{bitDepth:[8,16],components:[3]});let i=Math.log(r)/Math.log(8);if(i!==Math.floor(i))throw new RangeError("nbSlots must be a power of 8. Usually 8, 64, 512 or 4096");let n=this.bitDepth-i,s=this.data,o=Ls()(Math.pow(8,i),0),a=Math.pow(2,2*i),h=Math.pow(2,i);for(let t=0;t<s.length;t+=this.channels){let r=(s[t]>>n)*a+(s[t+1]>>n)*h+(s[t+2]>>n);e&&this.alpha?o[r]+=s[t+this.channels-1]/this.maxValue:o[r]++}return o}function sh(){this.checkProcessable("min",{bitDepth:[8,16,32]});let t=Ls()(this.channels,1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]<t[r]&&(t[r]=this.data[e+r]);return t}function oh(){this.checkProcessable("max",{bitDepth:[8,16,32]});let t=Ls()(this.channels,-1/0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)this.data[e+r]>t[r]&&(t[r]=this.data[e+r]);return t}function ah(){this.checkProcessable("sum",{bitDepth:[8,16]});let t=Ls()(this.channels,0);for(let e=0;e<this.data.length;e+=this.channels)for(let r=0;r<this.channels;r++)t[r]+=this.data[e+r];return t}function hh(t=0,e=0){this.checkProcessable("getMoment",{bitDepth:[1]});let r=0;for(let i=0;i<this.width;i++)for(let n=0;n<this.height;n++)1===this.getBitXY(i,n)&&(r+=i**t*n**e);return r}function lh(t={}){let{mask:e,region:r=3,removeClosePoints:i=0,invert:n=!1,maxEquals:s=2}=t,o=this;this.checkProcessable("localMaxima",{bitDepth:[8,16],components:1}),r*=4;let a=n?0:1,h=[1,0,-1,0,1,1,-1,-1,2,0,-2,0,2,2,-2,-2],l=[0,1,0,-1,1,-1,1,-1,0,2,0,-2,2,-2,2,-2],u=r<=8?1:2,c=[];for(let t=u;t<o.height-u;t++)for(let i=u;i<o.width-u;i++){if(e&&e.getBitXY(i,t)!==a)continue;let u=0,f=0,d=o.data[i+t*o.width];for(let e=0;e<r;e++)n?o.data[i+h[e]+(t+l[e])*o.width]>d&&u++:o.data[i+h[e]+(t+l[e])*o.width]<d&&u++,o.data[i+h[e]+(t+l[e])*o.width]===d&&f++;u+f===r&&f<=s&&c.push([i,t])}if(i>0)for(let t=0;t<c.length;t++)for(let e=t+1;e<c.length;e++)Math.sqrt(Math.pow(c[t][0]-c[e][0],2)+Math.pow(c[t][1]-c[e][1],2))<i&&(c[t][0]=c[t][0]+c[e][0]>>1,c[t][1]=c[t][1]+c[e][1]>>1,c.splice(e,1),e--);return c}function uh(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Gn(i)}return e}function ch(){let t=this.getHistograms({maxSlots:this.maxValue+1}),e=new Array(t.length);for(let r=0;r<t.length;r++){let i=t[r];e[r]=Xn(i)}return e}function fh(){this.checkProcessable("points",{bitDepth:[1]});const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)1===this.getBitXY(e,r)&&t.push([e,r]);return t}function dh(){this.checkProcessable("extendedPoints",{bitDepth:[1]});const t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++)1===this.getBitXY(r,e)&&(t.push([r,e]),1!==this.getBitXY(r+1,e)?(t.push([r+1,e]),t.push([r+1,e+1]),1!==this.getBitXY(r,e+1)&&t.push([r,e+1])):1!==this.getBitXY(r,e+1)&&(t.push([r,e+1]),t.push([r+1,e+1])));return t}function ph(t,e={}){if(this===t)return[0,0];let r=[0,0],i=this;for(;i;){if(i===t)return r;i.position&&(r[0]+=i.position[0],r[1]+=i.position[1]),i=i.parent}return!!e.defaultFurther&&r}function mh(t={}){let{alpha:e=1}=t;this.checkProcessable("countAlphaPixels",{bitDepth:[8,16],alpha:1});let r=0;if(void 0!==e){for(let t=this.components;t<this.data.length;t+=this.channels)this.data[t]===e&&r++;return r}return this.size}function gh(t,e={}){e.sorted||t.sort(bh);const r=t.length,i=new Array(2*r);for(var n=0,s=0;s<r;s++){const e=t[s];for(;n>=2&&wh(i[n-2],i[n-1],e)<=0;)n--;i[n++]=e}const o=n+1;for(s=r-2;s>=0;s--){const e=t[s];for(;n>=o&&wh(i[n-2],i[n-1],e)<=0;)n--;i[n++]=e}return i.slice(0,n-1)}function wh(t,e,r){return(e[1]-t[1])*(r[0]-t[0])-(e[0]-t[0])*(r[1]-t[1])}function bh(t,e){return t[0]===e[0]?t[1]-e[1]:t[0]-e[0]}function yh(){return gh(this.extendedPoints,{sorted:!1})}function _h(t,e){return[t[0]-e[0],t[1]-e[1]]}function vh(t){let e=Math.sqrt(t[0]**2+t[1]**2);return[t[0]/e,t[1]/e]}function xh(t,e,r){void 0===r&&(r=new Array(e.length));let i=Math.cos(t),n=Math.sin(t);for(let t=0;t<r.length;++t)r[t]=[i*e[t][0]-n*e[t][1],n*e[t][0]+i*e[t][1]];return r}function kh(t){let e=0;for(let r=0;r<t.length;r++){let i=t[r][0],n=t[r][1],s=t[r===t.length-1?0:r+1][0],o=t[r===t.length-1?0:r+1][1];e+=Math.sqrt((s-i)**2+(o-n)**2)}return e}function Ah(t){let e=0;for(let r=0;r<t.length;r++)e+=t[r][0]*t[r===t.length-1?0:r+1][1]*.5,e-=t[r===t.length-1?0:r+1][0]*t[r][1]*.5;return Math.abs(e)}function Mh(t){let e=1/0,r=1/0,i=-1/0,n=-1/0;for(let s=0;s<t.length;s++)t[s][0]<e&&(e=t[s][0]),t[s][0]>i&&(i=t[s][0]),t[s][1]<r&&(r=t[s][1]),t[s][1]>n&&(n=t[s][1]);return[[e,r],[i,n]]}function Eh(t={}){const{originalPoints:e=yh.call(this)}=t;if(0===e.length)return[];if(1===e.length)return[e[0],e[0],e[0],e[0]];const r=new Array(e.length);let i,n=1/0,s=0;for(let t=0;t<r.length;t++){let o=Sh(e[t],e[(t+1)%r.length]);xh(-o,e,r);let a=r[t][0],h=r[t][1],l=r[(t+1)%r.length][0],u=r[(t+1)%r.length][1],c=!0,f=0,d=0,p=0;for(let t=0;t<r.length;t++){let e=r[t][0],i=r[t][1],n=(e-a)/(l-a);!0===c?(c=!1,f=n,d=n):(n<f&&(f=n),n>d&&(d=n));let s=(-(l-a)*i+l*h-u*a)/(l-a);Math.abs(s)>Math.abs(p)&&(p=s)}let m=[a+f*(l-a),h],g=[a+d*(l-a),h],w=Math.abs(p*(f-d)*(l-a));w<n&&(s=o,n=w,i=[m,g,[g[0],g[1]-p],[m[0],m[1]-p]])}return xh(s,i,i),i}function Sh(t,e){let r=vh(_h(e,t)),i=Math.acos(r[0]);return r[1]<0?-i:i}var Ch=__webpack_require__(2229),Ih=__webpack_require__.n(Ch),Dh=__webpack_require__(4707),Ph=__webpack_require__.n(Dh);function Bh(t,e){let r=vh(_h(e,t)),i=Math.acos(r[0]);return r[1]<0?-i:i}class Rh{constructor(t,e){this.map=t,this.id=e,this.minX=Number.POSITIVE_INFINITY,this.maxX=Number.NEGATIVE_INFINITY,this.minY=Number.POSITIVE_INFINITY,this.maxY=Number.NEGATIVE_INFINITY,this.meanX=0,this.meanY=0,this.surface=0,this.computed={}}getMask(t={}){const{scale:e=1,kind:r=""}=t;let i;switch(r){case"contour":i=this.contourMask;break;case"box":i=this.boxMask;break;case"filled":i=this.filledMask;break;case"center":i=this.centerMask;break;case"mbr":i=this.mbrFilledMask;break;case"hull":i=this.convexHullFilledMask;break;case"hullContour":i=this.convexHullMask;break;case"mbrContour":i=this.mbrMask;break;case"feret":i=this.feretMask;break;default:i=this.mask}return e<1&&(i=i.resize({factor:e}),i.parent=this.mask.parent,i.position[0]+=this.minX,i.position[1]+=this.minY),i}get mean(){throw new Error("Roi mean not implemented yet")}get center(){return this.computed.center||(this.computed.center=[this.width/2>>0,this.height/2>>0]),this.computed.center}get ratio(){return this.width/this.height}get width(){return this.maxX-this.minX+1}get height(){return this.maxY-this.minY+1}_computExternalIDs(){let t=this.borderIDs,e=this.borderLengths;this.computed.externalIDs=[],this.computed.externalLengths=[];let r=this.internalIDs;for(let i=0;i<t.length;i++)r.includes(t[i])||(this.computed.externalIDs.push(t[i]),this.computed.externalLengths.push(e[i]))}get externalIDs(){return this.computed.externalIDs||this._computExternalIDs(),this.computed.externalIDs}get externalLengths(){return this.computed.externalLengths||this._computExternalIDs(),this.computed.externalLengths}_computeBorderIDs(){let t=function(t){let e=t.map,r=e.data,i=new Set,n=new Map,s=new Set,o=[1,0,-1,0],a=[0,1,0,-1];for(let h=t.minX;h<=t.maxX;h++)for(let l=t.minY;l<=t.maxY;l++)if(r[h+l*e.width]===t.id)for(let u=0;u<4;u++){let c=h+o[u],f=l+a[u];if(c>=0&&f>=0&&c<e.width&&f<e.height){let o=c+f*e.width;if(r[o]!==t.id&&!s.has(o)){s.add(o),i.add(r[o]);let t=n.get(r[o]);t?n.set(r[o],++t):n.set(r[o],1)}}}let h=Array.from(i),l=h.map((function(t){return n.get(t)}));return{ids:h,lengths:l}}(this);this.computed.borderIDs=t.ids,this.computed.borderLengths=t.lengths}get borderIDs(){return this.computed.borderIDs||this._computeBorderIDs(),this.computed.borderIDs}get borderLengths(){return this.computed.borderLengths||this._computeBorderIDs(),this.computed.borderLengths}get boxIDs(){return this.computed.boxIDs||(this.computed.boxIDs=function(t){let e=new Set,r=t.map,i=r.data;for(let n of[0,t.height-1])for(let s=0;s<t.width;s++){let o=(n+t.minY)*r.width+s+t.minX;if(s-t.minX>0&&i[o]===t.id&&i[o-1]!==t.id){let t=i[o-1];e.add(t)}if(r.width-s-t.minX>1&&i[o]===t.id&&i[o+1]!==t.id){let t=i[o+1];e.add(t)}}for(let n of[0,t.width-1])for(let s=0;s<t.height;s++){let o=(s+t.minY)*r.width+n+t.minX;if(s-t.minY>0&&i[o]===t.id&&i[o-r.width]!==t.id){let t=i[o-r.width];e.add(t)}if(r.height-s-t.minY>1&&i[o]===t.id&&i[o+r.width]!==t.id){let t=i[o+r.width];e.add(t)}}return Array.from(e)}(this)),this.computed.boxIDs}get internalIDs(){return this.computed.internalIDs||(this.computed.internalIDs=function(t){let e=[t.id],r=t.map,i=r.data;if(t.height>2)for(let n=0;n<t.width;n++){let s=t.minY*r.width+n+t.minX;if(e.includes(i[s])){let n=i[s+r.width];e.includes(n)||t.boxIDs.includes(n)||e.push(n)}}let n=new Array(4);for(let s=1;s<t.width-1;s++)for(let o=1;o<t.height-1;o++){let a=(o+t.minY)*r.width+s+t.minX;if(e.includes(i[a])){n[0]=i[a-1],n[1]=i[a+1],n[2]=i[a-r.width],n[3]=i[a+r.width];for(let r=0;r<4;r++){let i=n[r];e.includes(i)||t.boxIDs.includes(i)||e.push(i)}}}return e}(this)),this.computed.internalIDs}get box(){return this.computed.box||(this.computed.box=function(t){let e=0,r=t.map,i=r.data,n=[0];t.height>1&&(n[1]=t.height-1);for(let s of n)for(let n=1;n<t.width-1;n++)i[(s+t.minY)*r.width+n+t.minX]===t.id&&e++;let s=[0];t.width>1&&(s[1]=t.width-1);for(let n of s)for(let s=0;s<t.height;s++)i[(s+t.minY)*r.width+n+t.minX]===t.id&&e++;return e}(this)),this.computed.box}get external(){return this.computed.external||(this.computed.external=function(t){let e=0,r=t.map,i=r.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r.width+n+t.minX;i[o]===t.id&&(t.externalIDs.includes(i[o-1])||t.externalIDs.includes(i[o+1])||t.externalIDs.includes(i[o-r.width])||t.externalIDs.includes(i[o+r.width]))&&e++}return e+t.box}(this)),this.computed.external}get holesInfo(){return this.computed.holesInfo||(this.computed.holesInfo=function(t){let e=0,r=t.map.width,i=t.map.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r+n+t.minX;t.internalIDs.includes(i[o])&&i[o]!==t.id&&e++}return{number:t.internalIDs.length-1,surface:e}}(this)),this.computed.holesInfo}get border(){return this.computed.border||(this.computed.border=function(t){let e=0,r=t.map,i=r.data;for(let n=1;n<t.width-1;n++)for(let s=1;s<t.height-1;s++){let o=(s+t.minY)*r.width+n+t.minX;i[o]===t.id&&(i[o-1]===t.id&&i[o+1]===t.id&&i[o-r.width]===t.id&&i[o+r.width]===t.id||e++)}return e+t.box}(this)),this.computed.border}get contourMask(){if(!this.computed.contourMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||t.setBitXY(e,r));this.computed.contourMask=t}return this.computed.contourMask}get boxMask(){if(!this.computed.boxMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)t.setBitXY(e,0),t.setBitXY(e,this.height-1);for(let e=0;e<this.height;e++)t.setBitXY(0,e),t.setBitXY(this.width-1,e);this.computed.boxMask=t}return this.computed.boxMask}get mask(){if(!this.computed.mask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&t.setBitXY(e,r);this.computed.mask=t}return this.computed.mask}get filledMask(){if(!this.computed.filledMask){let t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++){let i=e+this.minX+(r+this.minY)*this.map.width;this.internalIDs.includes(this.map.data[i])&&t.setBitXY(e,r)}this.computed.filledMask=t}return this.computed.filledMask}get centerMask(){if(!this.computed.centerMask){let t=new $a({kind:"smallCross"}).getMask();t.parent=this.map.parent,t.position=[this.minX+this.center[0]-1,this.minY+this.center[1]-1],this.computed.centerMask=t}return this.computed.centerMask}get convexHull(){if(!this.computed.convexHull){const t=[];for(let e=0;e<this.width;e++)for(let r=0;r<this.height;r++)this.map.data[e+this.minX+(r+this.minY)*this.map.width]===this.id&&(e>0&&e<this.width-1&&r>0&&r<this.height-1&&this.map.data[e-1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+1+this.minX+(r+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r-1+this.minY)*this.map.width]===this.id&&this.map.data[e+this.minX+(r+1+this.minY)*this.map.width]===this.id||(t.push([e,r]),t.push([e+1,r]),t.push([e,r+1]),t.push([e+1,r+1])));const e=gh(t);this.computed.convexHull={polyline:e,surface:Ah(e),perimeter:kh(e)}}return this.computed.convexHull}get convexHullMask(){if(!this.computed.convexHullMask){const t=this.convexHull,e=new il(this.width+1,this.height+1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});e.paintPolyline(t.polyline,{closed:!0}),this.computed.convexHullMask=e}return this.computed.convexHullMask}get convexHullFilledMask(){if(!this.computed.convexHullFilledMask){const t=this.convexHull,e=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});for(let r=0;r<this.width;r++)for(let i=0;i<this.height;i++)1!==Ph()(t.polyline,[r,i])&&e.setBitXY(r,i);this.computed.convexHullFilledMask=e}return this.computed.convexHullFilledMask}get mbr(){if(!this.computed.mbr){let t=Eh({originalPoints:this.convexHull.polyline});if(0===t.length)this.computed.mbr={width:0,height:0,surface:0,perimeter:0,rectangle:t};else{let e=t[0],r=t[1],i=t[2],n=Math.sqrt((e[0]-r[0])**2+(e[1]-r[1])**2),s=Math.sqrt((i[0]-r[0])**2+(i[1]-r[1])**2);this.computed.mbr={width:n,height:s,elongation:1-n/s,aspectRatio:n/s,surface:n*s,perimeter:2*(n+s),rectangle:t}}}return this.computed.mbr}get fillRatio(){return this.surface/(this.surface+this.holesInfo.surface)}get feretDiameters(){return this.computed.feretDiameters||(this.computed.feretDiameters=function(t={}){const{originalPoints:e=yh.call(this)}=t;if(0===e.length)return{min:0,max:0,minLine:[],maxLine:[],aspectRatio:1};if(1===e.length)return{min:1,max:1,minLine:[e[0],e[0]],maxLine:[e[0],e[0]],aspectRatio:1};const r=new Array(e.length);let i=1/0,n=0,s=[];for(let t=0;t<e.length;t++){let o=Bh(e[t],e[(t+1)%e.length]);xh(-o,e,r);let a=0,h=[];for(let i=0;i<e.length;i++){let e=Math.abs(r[t][1]-r[i][1]);e>a&&(a=e,h=[],h.push([r[i][0],r[t][1]],[r[i][0],r[i][1]]))}a<i&&(i=a,n=o,s=h)}xh(n,s,s);let o=0,a=[],h=0;for(let t=0;t<e.length-1;t++)for(let r=t+1;r<e.length;r++){let i=(e[t][0]-e[r][0])**2+(e[t][1]-e[r][1])**2;i>h&&(h=i,o=Math.sqrt(i),a=[e[t],e[r]])}return{min:i,minLine:s,max:o,maxLine:a,aspectRatio:i/o}}({originalPoints:this.convexHull.polyline})),this.computed.feretDiameters}get eqpc(){return this.computed.eqpc||(this.computed.eqpc=2*Math.sqrt(this.surface/Math.PI)),this.computed.eqpc}get perimeterInfo(){return this.computed.perimeterInfo||(this.computed.perimeterInfo=function(t){let e=t.map,r=e.data,i=0,n=0,s=0,o=0;for(let a=0;a<t.width;a++)for(let h=0;h<t.height;h++){let l=(h+t.minY)*e.width+a+t.minX;if(r[l]===t.id){let u=0;switch((0===a||t.externalIDs.includes(r[l-1]))&&u++,(a===t.width-1||t.externalIDs.includes(r[l+1]))&&u++,(0===h||t.externalIDs.includes(r[l-e.width]))&&u++,(h===t.height-1||t.externalIDs.includes(r[l+e.width]))&&u++,u){case 1:i++;break;case 2:n++;break;case 3:s++;break;case 4:o++}}}return{one:i,two:n,three:s,four:o}}(this)),this.computed.perimeterInfo}get perimeter(){let t=this.perimeterInfo,e=2-Math.sqrt(2);return t.one+2*t.two+3*t.three+4*t.four-e*(t.two+2*t.three+t.four)}get ped(){return this.computed.ped||(this.computed.ped=this.perimeter/Math.PI),this.computed.ped}get feretMask(){if(!this.computed.feretMask){const t=new il(this.width+1,this.height+1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent});t.paintPolyline(this.feretDiameters.minLine),t.paintPolyline(this.feretDiameters.maxLine),this.computed.feretMask=t}return this.computed.feretMask}get mbrMask(){if(!this.computed.mbrMask){let t=function(t){for(let e=0;e<t.length;e++)t[e][0]=Math.round(t[e][0]),t[e][1]=Math.round(t[e][1]);return t}(this.mbr.rectangle);if(t.length>0){const e=Mh(t),r=new il(e[1][0]-e[0][0]+1,e[1][1]-e[0][1]+1,{kind:cn,position:[this.minX+e[0][0],this.minY+e[0][1]],parent:this.map.parent});t=function(t,e){void 0===e&&(e=new Array(t.length).fill(0).map((()=>[])));let r=Mh(t),i=r[0][0],n=r[0][1];for(let r=0;r<t.length;r++)e[r][0]=t[r][0]-i,e[r][1]=t[r][1]-n;return e}(t),r.paintPolyline(t,{closed:!0}),this.computed.mbrMask=r}else this.computed.mbrMask=new il(1,1,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent})}return this.computed.mbrMask}get mbrFilledMask(){if(!this.computed.mbrFilledMask){const t=new il(this.width,this.height,{kind:cn,position:[this.minX,this.minY],parent:this.map.parent}),e=this.mask.minimalBoundingRectangle();for(let r=0;r<this.width;r++)for(let i=0;i<this.height;i++)1!==Ph()(e,[r,i])&&t.setBitXY(r,i);this.computed.mbrFilledMask=t}return this.computed.mbrFilledMask}get points(){if(!this.computed.points){let t=[];for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=(e+this.minY)*this.map.width+r+this.minX;this.map.data[i]===this.id&&t.push([r,e])}this.computed.points=t}return this.computed.points}get maxLengthPoints(){if(!this.computed.maxLengthPoints){let t,e=0;const r=this.points;for(let i=0;i<r.length;i++)for(let n=i+1;n<r.length;n++){let s=Math.pow(r[i][0]-r[n][0],2)+Math.pow(r[i][1]-r[n][1],2);s>=e&&(e=s,t=[r[i],r[n]])}this.computed.maxLengthPoints=t}return this.computed.maxLengthPoints}get maxLength(){if(!this.computed.maxLength){let t=Math.sqrt(Math.pow(this.maxLengthPoints[0][0]-this.maxLengthPoints[1][0],2)+Math.pow(this.maxLengthPoints[0][1]-this.maxLengthPoints[1][1],2));this.computed.maxLength=t}return this.computed.maxLength}get roundness(){return 4*this.surface/(Math.PI*this.feretDiameters.max**2)}get sphericity(){return 2*Math.sqrt(this.surface*Math.PI)/this.perimeter}get solidity(){return this.surface/this.convexHull.surface}get angle(){if(!this.computed.angle){let t=this.maxLengthPoints,e=180*-Math.atan2(t[0][1]-t[1][1],t[0][0]-t[1][0])/Math.PI;this.computed.angle=e}return this.computed.angle}toJSON(){return{id:this.id,minX:this.minX,maxX:this.maxX,minY:this.minY,maxY:this.maxY,meanX:this.meanX,meanY:this.meanY,height:this.height,width:this.width,surface:this.surface,mbrWidth:this.mbr.width,mbrHeight:this.mbr.height,mbrSurface:this.mbr.surface,eqpc:this.eqpc,ped:this.ped,feretDiameterMin:this.feretDiameters.min,feretDiameterMax:this.feretDiameters.max,aspectRatio:this.feretDiameters.aspectRatio,fillRatio:this.fillRatio,sphericity:this.sphericity,roundness:this.roundness,solidity:this.solidity,perimeter:this.perimeter}}}class Th{constructor(t,e){this.roiMap=t,this.options=e,this.roi=this.createRoi()}createRoi(){let t=this.roiMap.data,e={};this.roiMap.positive=0,this.roiMap.negative=0;for(let r=0;r<t.length;r++)t[r]&&!e[t[r]]&&(e[t[r]]=!0,t[r]>0?this.roiMap.positive++:this.roiMap.negative++);let r={};for(let t in e)r[t]=new Rh(this.roiMap,1*t);let i=this.roiMap.width,n=this.roiMap.height;for(let e=0;e<n;e++)for(let n=0;n<i;n++){let s=e*i+n;if(0!==t[s]){const i=r[t[s]];n<i.minX&&(i.minX=n),n>i.maxX&&(i.maxX=n),e<i.minY&&(i.minY=e),e>i.maxY&&(i.maxY=e),i.meanX+=n,i.meanY+=e,i.surface++}}let s=[];for(let t in e)r[t].meanX/=r[t].surface,r[t].meanY/=r[t].surface,s.push(r[t]);return s}}function Uh(t={}){const{algorithm:e="commonBorderLength",minCommonBorderLength:r=5,maxCommonBorderLength:i=100,minCommonBorderRatio:n=.3,maxCommonBorderRatio:s=1}=t;let o=function(t,e,n){return t[n]>=r&&t[n]<=i};"function"==typeof e&&(o=e),"commonborderratio"===e.toLowerCase()&&(o=function(t,e,r){let i=Math.min(t[r]/t[e],1);return i>=n&&i<=s});const a=this,h=a.commonBorderLength;let l={},u={};for(let t of Object.keys(h)){let e=h[t],r=Object.keys(e);for(let i of r)if(i!==t&&o(e,t,i)){let e=i;u[i]&&(e=u[i]);let r=t;if(u[t]&&(r=u[t]),Number(e)!==r){let t=Math.min(e,r),i=Math.max(e,r);if(l[t]||(l[t]={}),l[t][i]=!0,u[i]=t,l[i]){for(let e of Object.keys(l[i]))l[t][e]=!0,u[e]=t;delete l[i]}}}}let c=a.minMax,f=-c.min,d=c.max+f,p=new Array(d+1).fill(0);for(let t of Object.keys(u))p[Number(t)+f]=u[t];let m=a.data;for(let t=0;t<m.length;t++){let e=m[t];if(0!==e){let r=p[e+f];0!==r&&(m[t]=r)}}return a.computed={},a}class Oh{constructor(t,e){this.parent=t,this.width=t.width,this.height=t.height,this.data=e,this.negative=0,this.positive=0}get total(){return this.negative+this.positive}get minMax(){let t=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;for(let r=0;r<this.data.length;r++)this.data[r]<t&&(t=this.data[r]),this.data[r]>e&&(e=this.data[r]);return{min:t,max:e}}get commonBorderLength(){return function(t){let e=t.data,r=[1,0,-1,0],i=[0,1,0,-1],n=t.minMax,s=-n.min,o=n.max+s,a=[];for(let t=0;t<=o;t++)a.push(Object.create(null));for(let n=0;n<t.width;n++)for(let o=0;o<t.height;o++){let h=e[n+o*t.width];if(0!==h){let l=Object.create(null),u=!1;for(let c=0;c<4;c++){let f=n+r[c],d=o+i[c];if(f>=0&&d>=0&&f<t.width&&d<t.height){let r=e[f+d*t.width];h!==r&&(u=!0,0!==r&&void 0===l[r]&&(l[r]=!0,a[r+s][h]?a[r+s][h]++:a[r+s][h]=1))}else u=!0}u&&(a[h+s][h]?a[h+s][h]++:a[h+s][h]=1)}}let h={};for(let t=0;t<a.length;t++)Object.keys(a[t]).length>0&&(h[t-s]=a[t]);return h}(this)}mergeRoi(t={}){return Uh.call(this,t)}mergeRois(t){const e=t[0],r=t.slice(1);for(let t=0;t<this.data.length;t++)r.includes(this.data[t])&&(this.data[t]=e)}rowsInfo(){let t=new Array(this.height),e=0;for(let r=0;r<this.data.length;r+=this.width){let i={row:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=i;let n={},s={},o=[],a=this.data[r],h=0;for(let t=r;t<r+this.width;t++){let e=this.data[t];a!==e&&(a=e,o.push(h),h=0),h++,e>0?(i.positivePixel++,n[e]||(n[e]=!0)):e<0?(i.negativePixel++,s[e]||(s[e]=!0)):i.zeroPixel++}o.push(h),i.medianChange=o.sort(((t,e)=>t-e))[Math.floor(o.length/2)],i.positiveRoiIDs=Object.keys(n),i.negativeRoiIDs=Object.keys(s),i.positiveRoi=i.positiveRoiIDs.length,i.negativeRoi=i.negativeRoiIDs.length}return t}colsInfo(){let t=new Array(this.width),e=0;for(let r=0;r<this.width;r++){let i={col:e,positivePixel:0,negativePixel:0,zeroPixel:0,positiveRoi:0,negativeRoi:0,medianChange:0};t[e++]=i;let n={},s={},o=[],a=this.data[r],h=0;for(let t=r;t<r+this.data.length;t+=this.width){let e=this.data[t];a!==e&&(a=e,o.push(h),h=0),h++,e>0?(i.positivePixel++,n[e]||(n[e]=!0)):e<0?(i.negativePixel++,s[e]||(s[e]=!0)):i.zeroPixel++}o.push(h),i.medianChange=o.sort(((t,e)=>t-e))[Math.floor(o.length/2)],i.positiveRoiIDs=Object.keys(n),i.negativeRoiIDs=Object.keys(s),i.positiveRoi=i.positiveRoiIDs.length,i.negativeRoi=i.negativeRoiIDs.length}return t}}function Lh(t,e={}){const{allowCorners:r=!1}=e,i=65535;let n=new Int16Array(t.size),s=0,o=0,a=new Uint16Array(65536),h=new Uint16Array(65536);for(let e=0;e<t.width;e++)for(let r=0;r<t.height;r++)0===n[r*t.width+e]&&l(e,r);function l(e,l){let u=0,c=0,f=t.getBitXY(e,l),d=f?++s:--o;if(s>32767||o<-32768)throw new Error("Too many regions of interest");for(a[0]=e,h[0]=l;u<=c;){let e=a[u&i],s=h[u&i];if(n[s*t.width+e]=d,e>0&&0===n[s*t.width+e-1]&&t.getBitXY(e-1,s)===f&&(c++,a[c&i]=e-1,h[c&i]=s,n[s*t.width+e-1]=-32768),s>0&&0===n[(s-1)*t.width+e]&&t.getBitXY(e,s-1)===f&&(c++,a[c&i]=e,h[c&i]=s-1,n[(s-1)*t.width+e]=-32768),e<t.width-1&&0===n[s*t.width+e+1]&&t.getBitXY(e+1,s)===f&&(c++,a[c&i]=e+1,h[c&i]=s,n[s*t.width+e+1]=-32768),s<t.height-1&&0===n[(s+1)*t.width+e]&&t.getBitXY(e,s+1)===f&&(c++,a[c&i]=e,h[c&i]=s+1,n[(s+1)*t.width+e]=-32768),r&&(e>0&&s>0&&0===n[(s-1)*t.width+e-1]&&t.getBitXY(e-1,s-1)===f&&(c++,a[c&i]=e-1,h[c&i]=s-1,n[(s-1)*t.width+e-1]=-32768),e<t.width-1&&s>0&&0===n[(s-1)*t.width+e+1]&&t.getBitXY(e+1,s-1)===f&&(c++,a[c&i]=e+1,h[c&i]=s-1,n[(s-1)*t.width+e+1]=-32768),e>0&&s<t.height-1&&0===n[(s+1)*t.width+e-1]&&t.getBitXY(e-1,s+1)===f&&(c++,a[c&i]=e-1,h[c&i]=s+1,n[(s+1)*t.width+e-1]=-32768),e<t.width-1&&s<t.height-1&&0===n[(s+1)*t.width+e+1]&&t.getBitXY(e+1,s+1)===f&&(c++,a[c&i]=e+1,h[c&i]=s+1,n[(s+1)*t.width+e+1]=-32768)),u++,c-u>i)throw new Error("analyseMask can not finish, the array to manage internal data is not big enough.You could improve mask by changing MAX_ARRAY")}}return new Oh(t,n)}var Fh=__webpack_require__(530),Nh=__webpack_require__.n(Fh);const zh=[-1,0],jh=[0,-1],Yh=[null,null],Vh=[-1,-1,0,1],qh=[0,-1,-1,-1],Xh=[null,null,null,null];function Gh(t,e={}){const{allowCorners:r=!1}=e;let i,n,s,o=4;if(r&&(o=8),8===o)i=Vh,n=qh,s=Xh;else{if(4!==o)throw new RangeError(`unsupported neighbours count: ${o}`);i=zh,n=jh,s=Yh}const a=t.size,h=t.width,l=t.height,u=new Array(a),c=new Uint32Array(a),f=new(Nh());let d=1;for(let e=0;e<l;e++)for(let r=0;r<h;r++){const o=r+e*h;if(t.getBit(o)){let t=null;for(let o=0;o<s.length;o++){const a=r+i[o],c=e+n[o];if(a>=0&&c>=0&&a<h&&c<l){let e=u[a+c*h];e?(s[o]=e,(!t||s[o].value<t.value)&&(t=s[o])):s[o]=null}}if(t){u[o]=t;for(let e=0;e<s.length;e++)s[e]&&s[e]!==t&&f.union(t,s[e])}else u[o]=f.add(d++)}}for(let e=0;e<l;e++)for(let r=0;r<h;r++){const i=r+e*h;t.getBit(i)&&(c[i]=f.find(u[i]).value)}return new Oh(t,c)}function $h(t={}){let{allowCorner:e=!0,onlyTop:r=!1,invert:i=!1}=t,n=this;n.checkProcessable("fromMaxima",{components:[1]});let s=0,o=0,a=new Int16Array(n.size),h=new Int8Array(n.size),l=new Float32Array(n.size),u=1048575,c=new Uint16Array(1048576),f=new Uint16Array(1048576),d=0,p=0,m=new Uint16Array(1048576),g=new Uint16Array(1048576),w=0,b=0;for(function({maxima:t=!0}){for(let r=1;r<n.height-1;r++)for(let i=1;i<n.width-1;i++){let l=i+r*n.width;if(0===h[l]){let h=t?n.data[l]:-n.data[i+r*n.width];if(n.data[r*n.width+i-1]>h)continue;if(n.data[r*n.width+i+1]>h)continue;if(n.data[(r-1)*n.width+i]>h)continue;if(n.data[(r+1)*n.width+i]>h)continue;if(e){if(n.data[(r-1)*n.width+i-1]>h)continue;if(n.data[(r-1)*n.width+i+1]>h)continue;if(n.data[(r+1)*n.width+i-1]>h)continue;if(n.data[(r+1)*n.width+i+1]>h)continue}a[l]=t?++s:--o,y(i,r)||(t?--s:++o)}}}(n);d<p;)_(c[d&u],f[d&u],2),d++;return new Oh(n,a);function y(t,e){let r=p;w=0,b=1,m[0]=t,g[0]=e;let i=!0;for(;w<b;)i&=_(m[w&u],g[w&u],1),w++;if(!i){for(let t=0;t<b;t++){let e=m[t&u],r=g[t&u]*n.width+e;a[r]=0}p=r}return i}function _(t,e,i){let s=a[e*n.width+t],o=n.data[e*n.width+t];for(let d=e-1;d<=e+1;d++)for(let e=t-1;e<=t+1;e++){let t=d*n.width+e;if(0===h[t])switch(h[t]=1,l[t]=n.data[t]-o,i){case 1:if(0===l[t]){if(0===e||0===d||e===n.width-1||d===n.height-1)return!1;a[t]=s,m[b&u]=e,g[b&u]=d,b++}else{if(l[t]>0)return!1;r||(a[t]=s,c[p&u]=e,f[p&u]=d,p++)}break;case 2:l[t]<=0&&(a[t]=s,c[p&u]=e,f[p&u]=d,p++);break;default:throw new Error("unreachable")}}return!0}}function Wh(t,e={}){let r=new $a(e),i=new Int16Array(this.size),n=0,s=r.getPoints();for(let e=0;e<t.length;e++){n++;let r=t[e][0],o=t[e][1];for(let t=0;t<s.length;t++){let e=s[t][0],a=s[t][1];r+e>=0&&o+a>=0&&r+e<this.width&&o+a<this.height&&(i[r+e+(o+a)*this.width]=n)}}return new Oh(this,i)}var Zh=__webpack_require__(5307),Hh=__webpack_require__.n(Zh);const Kh=[1,0,-1,0,1,1,-1,-1],Jh=[0,1,0,-1,1,-1,1,-1];function Qh(t={}){let{points:e,mask:r,image:i,fillMaxValue:n=this.maxValue,invert:s=!1}=t,o=i||this;o.checkProcessable("fromWaterShed",{bitDepth:[8,16],components:1}),s=!s,e||(e=o.getLocalMaxima({invert:s,mask:r}));let a=s?0:1,h=new Int16Array(o.size),l=o.width,u=o.height,c=new(Hh())({comparator:(t,e)=>t[2]-e[2],strategy:Hh().BinaryHeapStrategy});for(let t=0;t<e.length;t++){let r=e[t][0]+e[t][1]*l;h[r]=t+1;let i=o.data[r];(s&&i<=n||!s&&i>=n)&&c.queue([e[t][0],e[t][1],i])}for(;c.length>0;){let t=c.dequeue(),e=t[0]+t[1]*l;for(let i=0;i<4;i++){let f=t[0]+Kh[i],d=t[1]+Jh[i];if(f>=0&&d>=0&&f<l&&d<u){let u=f+d*l;if(!r||r.getBit(u)===a){let r=o.data[u];(s&&r<=n||!s&&r>=n)&&0===h[u]&&(h[u]=h[e],c.queue([t[0]+Kh[i],t[1]+Jh[i],r]))}}}}return new Oh(o,h)}class tl{constructor(t,e={}){this._image=t,this._options=e,this._options.label||(this._options.label="default"),this._layers={},this._painted=null}fromMaxima(t={}){let e=Object.assign({},this._options,t),r=$h.call(this._image,t);this._layers[e.label]=new Th(r,e)}fromPoints(t,e={}){let r=Object.assign({},this._options,e),i=Wh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}putMap(t,e={}){let r=new Oh(this._image,t),i=Object.assign({},this._options,e);return this._layers[i.label]=new Th(r,i),this}fromWaterShed(t={}){let e=Object.assign({},this._options,t),r=Qh.call(this._image,t);this._layers[e.label]=new Th(r,e)}fromMask(t,e={}){let r=Object.assign({},this._options,e),i=Lh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}fromMaskConnectedComponentLabelingAlgorithm(t,e={}){let r=Object.assign({},this._options,e),i=Gh.call(this._image,t,e);return this._layers[r.label]=new Th(i,r),this}getMap(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap}rowsInfo(t={}){return this.getMap(t).rowsInfo()}colsInfo(t={}){return this.getMap(t).rowsInfo()}getRoiIds(t={}){let e=this.getRois(t);if(e){let t=new Array(e.length);for(let r=0;r<e.length;r++)t[r]=e[r].id;return t}throw new Error("ROIs not found")}getRois(t={}){let{label:e=this._options.label,positive:r=!0,negative:i=!0,minSurface:n=0,maxSurface:s=Number.POSITIVE_INFINITY,minWidth:o=0,maxWidth:a=Number.POSITIVE_INFINITY,minHeight:h=0,maxHeight:l=Number.POSITIVE_INFINITY,minRatio:u=0,maxRatio:c=Number.POSITIVE_INFINITY}=t;if(!this._layers[e])throw new Error(`this Roi layer (${e}) does not exist`);const f=this._layers[e].roi,d=[];for(const t of f)(t.id<0&&i||t.id>0&&r)&&t.surface>=n&&t.surface<=s&&t.width>=o&&t.width<=a&&t.height>=h&&t.height<=l&&t.ratio>=u&&t.ratio<=c&&d.push(t);return d}getRoi(t,e={}){const{label:r=this._options.label}=e;if(!this._layers[r])throw new Error(`this Roi layer (${r}) does not exist`);const i=this._layers[r].roi.find((e=>e.id===t));if(!i)throw new Error(`found no Roi with id ${t}`);return i}getMasks(t={}){let e=this.getRois(t),r=new Array(e.length);for(let i=0;i<e.length;i++)r[i]=e[i].getMask(t);return r}getAnalysisMasks(t={}){const{analysisProperty:e}=t;let r=`${e}Mask`,i=this.getRois(t);return 0!==i.length&&i[0][r]?i.map((t=>t[r])):[]}getData(t={}){let e=Object.assign({},this._options,t);return this._assertLayerWithLabel(e.label),this._layers[e.label].roiMap.data}paint(t={}){let{labelProperty:e,analysisProperty:r}=t;this._painted||(this._painted=this._image.rgba8());let i=this.getMasks(t);if(e){const r=this.getRois(t);t.labels=r.map((t=>function(t,e=""){let r=e.split(".");for(let e of r){if(void 0===t[e])return;t=t[e]}return t}(t,e)));const i=Math.max(...t.labels);let n=!1,s=!1;if(e.includes("surface")?n=!0:/(?:perimeter|min|max|external|width|height|length)/.test(e)&&(s=!0),isFinite(i)){let e="";if("pixel"!==t.unit&&t.pixelSize&&(s||n)){e=n?`${t.unit}^2`:t.unit;let r=n?"m^2":"m",i=n?t.pixelSize**2:t.pixelSize;const s=Ih().swiftConverter(r,e);t.labels=t.labels.map((t=>s(i*t)))}t.labels=i>50?t.labels.map((t=>Math.round(t)+e)):i>10?t.labels.map((t=>t.toFixed(1)+e)):t.labels.map((t=>t.toFixed(2)+e))}t.labelsPosition=r.map((t=>[t.meanX,t.meanY]))}if(this._painted.paintMasks(i,t),r){let e=this.getAnalysisMasks(t);this._painted.paintMasks(e,{color:t.analysisColor,alpha:t.analysisAlpha})}return this._painted}getMask(t={}){let e=new il(this._image.width,this._image.height,{kind:"BINARY"}),r=this.getMasks(t);for(let t=0;t<r.length;t++){let i=r[t];for(let t=0;t<i.width;t++)for(let r=0;r<i.height;r++)i.getBitXY(t,r)&&e.setBitXY(t+i.position[0],r+i.position[1])}return e}resetPainted(t={}){const{image:e}=t;this._painted=e?this.image.rgba8():this._image.rgba8()}mergeRoi(t={}){const e=this.getMap(t);return e.mergeRoi(t),this.putMap(e.data,t),this}mergeRois(t,e={}){if(!Array.isArray(t)||t.some((t=>!Number.isInteger(t))))throw new Error("Roi ids must be an array of integers");if(t.length<2)throw new Error("Roi ids must have at least two elements");if(new Set(t).size!==t.length)throw new Error("Roi ids must be all different");t.forEach((t=>this.getRoi(t)));const r=this.getMap(e);return r.mergeRois(t),this.putMap(r.data,e),this}findCorrespondingRoi(t,e={}){let r=this.getRois(e),i=[];for(let e=0;e<r.length;e++){let n=r[e],s=el(n.minX,n.minY,n.points,t,Math.sign(n.id));i.push(s)}return i}_assertLayerWithLabel(t){if(!this._layers[t])throw new Error(`no layer with label ${t}`)}}function el(t,e,r,i,n){let s={id:[],surface:[],roiSurfaceCovered:[],same:0,opposite:0,total:0};for(let n=0;n<r.length;n++){let o=r[n],a=o[0]+t+(o[1]+e)*i.width,h=i.data[a];(h>0||h<0)&&(s.id.includes(h)?s.surface[s.id.indexOf(h)]+=1:(s.id.push(h),s.surface.push(1)))}for(let t=0;t<s.id.length;t++)Math.sign(s.id[t])===n?s.same+=s.surface[t]:s.opposite+=s.surface[t],s.roiSurfaceCovered[t]=s.surface[t]/r.length;return s.total=s.opposite+s.same,s}const rl=Object.prototype.toString;class il{constructor(e,r,i,n){if(1===arguments.length?(n=e,({width:e,height:r,data:i}=n)):i&&!i.length&&(n=i,({data:i}=n)),void 0===e&&(e=1),void 0===r&&(r=1),void 0===n&&(n={}),"object"!=typeof n||null===n)throw new TypeError("options must be an object");if(!Number.isInteger(e)||e<=0)throw new RangeError("width must be a positive integer");if(!Number.isInteger(r)||r<=0)throw new RangeError("height must be a positive integer");const{kind:s=fn}=n;if("string"!=typeof s)throw new TypeError("kind must be a string");const o=function(t){const e=dn[t];if(!e)throw new RangeError(`invalid image kind: ${t}`);return e}(s),a=Object.assign({},n);for(const t in o)void 0===a[t]&&(a[t]=o[t]);!function(e){const{components:r,alpha:i,bitDepth:n,colorModel:s}=e;if(!Number.isInteger(r)||r<=0)throw new RangeError(`invalid components: ${r}. Must be a positive integer`);if(0!==i&&1!==i&&"boolean"!=typeof i)throw new TypeError(`invalid alpha: ${i}: must be a boolean, 0 or 1`);if(!pn.includes(n))throw new RangeError(`invalid bitDepth: ${n}. Must be one of ${pn.join(", ")}`);if(!t[s])throw new RangeError(`invalid colorModel: ${s}. Must be one of ${Object.keys(t).join(", ")}`)}(a);const{components:h,bitDepth:l,colorModel:u}=a,c=a.alpha+0,f=e*r,d=h+c,p=32===l?Number.MAX_VALUE:2**l-1;if(void 0===i)i=function(t,e,r,i,n,s){const o=i*t;let a;switch(n){case 1:a=new Uint8Array(Math.ceil(o/8));break;case 8:a=new Uint8Array(o);break;case 16:a=new Uint16Array(o);break;case 32:a=new Float32Array(o);break;default:throw new Error(`Cannot create pixel array for bit depth ${n}`)}if(r)for(let t=e;t<a.length;t+=i)a[t]=s;return a}(f,h,c,d,l,p);else{const t=function(t,e,r){let i=e*t;return 1===r&&(i=Math.ceil(i/8)),i}(f,d,l);if(i.length!==t)throw new RangeError(`incorrect data size: ${i.length}. Should be ${t}`)}this.width=e,this.height=r,this.data=i,this.size=f,this.components=h,this.alpha=c,this.bitDepth=l,this.maxValue=p,this.colorModel=u,this.channels=d,this.meta=n.meta||{},Object.defineProperty(this,"parent",{enumerable:!1,writable:!0,configurable:!0,value:n.parent||null}),this.position=n.position||[0,0],this.computed=null,this.sizes=[this.width,this.height],this.multiplierX=this.channels,this.multiplierY=this.channels*this.width,this.isClamped=this.bitDepth<32,this.borderSizes=[0,0]}get[Symbol.toStringTag](){return"IJSImage"}static isImage(t){return"[object IJSImage]"===rl.call(t)}static fromCanvas(t){const e=t.getContext("2d").getImageData(0,0,t.width,t.height);return new il(e.width,e.height,e.data)}static createFrom(t,e){const r=as(t);return Object.assign(r,{parent:t,position:[0,0]},e),new il(r)}getRoiManager(t){return new tl(this,t)}clone(){const t=this.data.slice();return new il(this.width,this.height,t,this)}apply(t){for(let e=0;e<this.height;e++)for(let r=0;r<this.width;r++){let i=(e*this.width+r)*this.channels;t.call(this,i)}}}!function(t){for(const e in os)t.prototype[e]=os[e]}(il),function(t){for(const e in it)t.prototype[e]=it[e]}(il),function(t){for(const e in en)t.prototype[e]=en[e]}(il),il.prototype.checkProcessable=function(t,e={}){let{bitDepth:r,alpha:i,colorModel:n,components:s,channels:o}=e;if("string"!=typeof t||0===t.length)throw new TypeError("processName must be a string");if(r&&(Array.isArray(r)||(r=[r]),!r.includes(this.bitDepth)))throw new TypeError(`The process: ${t} can only be applied if bit depth is in: ${r}`);if(i&&(Array.isArray(i)||(i=[i]),!i.includes(this.alpha)))throw new TypeError(`The process: ${t} can only be applied if alpha is in: ${i}`);if(n&&(Array.isArray(n)||(n=[n]),!n.includes(this.colorModel)))throw new TypeError(`The process: ${t} can only be applied if color model is in: ${n}`);if(s&&(Array.isArray(s)||(s=[s]),!s.includes(this.components))){let e=`The process: ${t} can only be applied if the number of components is in: ${s}`;throw 1===s.length&&1===s[0]?new TypeError(`${e}.\rYou should transform your image using "image.grey()" before applying the algorithm.`):new TypeError(e)}if(o&&(Array.isArray(o)||(o=[o]),!o.includes(this.channels)))throw new TypeError(`The process: ${t} can only be applied if the number of channels is in: ${o}`)},il.prototype.getRGBAData=function(t={}){const{clamped:e}=t;this.checkProcessable("getRGBAData",{components:[1,3],bitDepth:[1,8,16,32]});const r=this.width*this.height*4;let i=e?new Uint8ClampedArray(r):new Uint8Array(r);return 1===this.bitDepth?function(t,e){for(let r=0;r<t.size;r++){const i=t.getBit(r);e[4*r]=255*i,e[4*r+1]=255*i,e[4*r+2]=255*i}}(this,i):32===this.bitDepth?(this.checkProcessable("getRGBAData",{alpha:0}),1===this.components?function(t,e){const r=t.min[0],i=t.max[0]-r;for(let n=0;n<t.size;n++){const s=Math.floor(255*(t.data[n]-r)/i);e[4*n]=s,e[4*n+1]=s,e[4*n+2]=s}}(this,i):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[an]}),function(t,e){const r=Math.min(...t.min),i=Math.max(...t.max)-r;for(let n=0;n<t.size;n++){const s=Math.floor(255*(t.data[3*n]-r)/i),o=Math.floor(255*(t.data[3*n+1]-r)/i),a=Math.floor(255*(t.data[3*n+2]-r)/i);e[4*n]=s,e[4*n+1]=o,e[4*n+2]=a}}(this,i))):1===this.components?function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels]>>>t.bitDepth-8}(this,i):3===this.components&&(this.checkProcessable("getRGBAData",{colorModel:[an]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r]=t.data[r*t.channels]>>>t.bitDepth-8,e[4*r+1]=t.data[r*t.channels+1]>>>t.bitDepth-8,e[4*r+2]=t.data[r*t.channels+2]>>>t.bitDepth-8}(this,i)),1===this.alpha?(this.checkProcessable("getRGBAData",{bitDepth:[8,16]}),function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=t.data[r*t.channels+t.components]>>t.bitDepth-8}(this,i)):function(t,e){for(let r=0;r<t.size;r++)e[4*r+3]=255}(this,i),i},il.load=function(t,e){if("string"==typeof t)return function(t,e){const r=t.slice(0,64).match(es);let i;return i=null!==r?Promise.resolve(function(t){let e,r,i,n,s=.75*t.length,o=t.length,a=0;"="===t[t.length-1]&&(s--,"="===t[t.length-2]&&s--);const h=new Uint8Array(s);for(let s=0;s<o;s+=4)e=Wi[t.charCodeAt(s)],r=Wi[t.charCodeAt(s+1)],i=Wi[t.charCodeAt(s+2)],n=Wi[t.charCodeAt(s+3)],h[a++]=e<<2|r>>4,h[a++]=(15&r)<<4|i>>2,h[a++]=(3&i)<<6|63&n;return h}(t.slice(r[0].length))):function(t,{withCredentials:e=!1}={}){return new Promise((function(r,i){let n=new self.XMLHttpRequest;n.open("GET",t,!0),n.responseType="arraybuffer",n.withCredentials=e,n.onload=function(t){200!==this.status?i(t):r(this.response)},n.onerror=i,n.send()}))}(t,e),i.then((e=>rs(new Uint8Array(e),r?t:void 0)))}(t,e);if(t instanceof ArrayBuffer)return Promise.resolve(rs(new Uint8Array(t)));if(t.buffer)return Promise.resolve(rs(t));throw new Error('argument to "load" must be a string or buffer.')},il.extendMethod=function(t,e,r={}){let{inPlace:i=!1,returnThis:n=!0,partialArgs:s=[]}=r;return il.prototype[t]=i?function(...t){this.computed=null;let r=e.apply(this,[...s,...t]);return n?this:r}:function(...t){return e.apply(this,[...s,...t])},il},il.extendProperty=function(t,e,r={}){let{partialArgs:i=[]}=r;return sn.get=function(){if(null===this.computed)this.computed={};else if(nn()(t,this.computed))return this.computed[t];let r=e.apply(this,i);return this.computed[t]=r,r},Object.defineProperty(il.prototype,t,sn),il},function(t){let e={inPlace:!0};t.extendMethod("invert",cs),t.extendMethod("abs",us),t.extendMethod("level",Fs,e),t.extendMethod("add",Ys,e),t.extendMethod("subtract",Vs,e),t.extendMethod("subtractImage",qs),t.extendMethod("multiply",Gs,e),t.extendMethod("divide",$s,e),t.extendMethod("hypotenuse",Xs),t.extendMethod("background",ro),t.extendMethod("flipX",fs),t.extendMethod("flipY",ds),t.extendMethod("blurFilter",ps),t.extendMethod("medianFilter",ys),t.extendMethod("gaussianFilter",_s),t.extendMethod("sobelFilter",Ts),t.extendMethod("gradientFilter",Rs),t.extendMethod("scharrFilter",Us),t.extendMethod("dilate",io),t.extendMethod("erode",ho),t.extendMethod("open",po),t.extendMethod("close",mo),t.extendMethod("topHat",go),t.extendMethod("blackHat",wo),t.extendMethod("morphologicalGradient",bo),t.extendMethod("warpingFourPoints",ko),t.extendMethod("crop",Ao),t.extendMethod("cropAlpha",Mo),t.extendMethod("resize",Do).extendMethod("scale",Do),t.extendMethod("hsv",Po),t.extendMethod("hsl",Bo),t.extendMethod("cmyk",Ro),t.extendMethod("rgba8",To),t.extendMethod("grey",Lo).extendMethod("gray",Lo),t.extendMethod("mask",Ho),t.extendMethod("pad",Ko),t.extendMethod("colorDepth",Jo),t.extendMethod("setBorder",sa,e),t.extendMethod("rotate",ta),t.extendMethod("rotateLeft",ea),t.extendMethod("rotateRight",ra),t.extendMethod("insert",na),t.extendMethod("getRow",ma),t.extendMethod("getColumn",ga),t.extendMethod("getMatrix",wa),t.extendMethod("setMatrix",ba),t.extendMethod("getPixelsArray",ya),t.extendMethod("getIntersection",_a),t.extendMethod("getClosestCommonParent",xa),t.extendMethod("getThreshold",Wo),t.extendMethod("split",oa),t.extendMethod("getChannel",aa),t.extendMethod("combineChannels",ha),t.extendMethod("setChannel",ua),t.extendMethod("getSimilarity",ca),t.extendMethod("getPixelsGrid",fa),t.extendMethod("getBestMatch",pa),t.extendMethod("cannyEdge",Ia),t.extendMethod("convolution",Bs),t.extendMethod("extract",Da),t.extendMethod("floodFill",Ra),t.extendMethod("paintLabels",Ya,e),t.extendMethod("paintMasks",Va,e),t.extendMethod("paintPoints",Wa,e),t.extendMethod("paintPolyline",Za,e),t.extendMethod("paintPolylines",Ha,e),t.extendMethod("paintPolygon",Ka,e),t.extendMethod("paintPolygons",th,e),t.extendMethod("countAlphaPixels",mh),t.extendMethod("monotoneChainConvexHull",yh),t.extendMethod("minimalBoundingRectangle",Eh),t.extendMethod("getHistogram",eh).extendProperty("histogram",eh),t.extendMethod("getHistograms",rh).extendProperty("histograms",rh),t.extendMethod("getColorHistogram",nh).extendProperty("colorHistogram",nh),t.extendMethod("getMin",sh).extendProperty("min",sh),t.extendMethod("getMax",oh).extendProperty("max",oh),t.extendMethod("getSum",ah).extendProperty("sum",ah),t.extendMethod("getMoment",hh).extendProperty("moment",hh),t.extendMethod("getLocalMaxima",lh),t.extendMethod("getMedian",ch).extendProperty("median",ch),t.extendMethod("getMean",uh).extendProperty("mean",uh),t.extendMethod("getPoints",fh).extendProperty("points",fh),t.extendMethod("getExtendedPoints",dh).extendProperty("extendedPoints",dh),t.extendMethod("getRelativePosition",ph)}(il);var nl=__webpack_require__(6732),sl=__webpack_require__.n(nl);const ol={regression:{kernelType:"polynomial",kernelOptions:{degree:2,constant:1}},threshold:.02,roi:{minSurface:100,positive:!1},sampling:20,include:[]};function al(t,e,r){return t.post("data",[e,r]).then((function(t){for(let e in t)t[e]=new il(t[e]);return t}))}const hl={run:function(t,e,r){e=Object.assign({},ol,e);const i=this.manager;return Array.isArray(t)?Promise.all(t.map((function(t){const n=al(i,t,e);return"function"==typeof r&&n.then(r),n}))):al(i,t,e)},work:function(){worker.on("data",(function(t,e,r){e=new IJS(e);const i={},n=[],s=e.grey(),o=s.sobelFilter();d("sobel",o);const a=o.level().mask({threshold:r.threshold});d("mask",a);const h=o.getRoiManager();h.fromMask(a);const l=h.getMask(r.roi);d("realMask",l);const u=s.getPixelsGrid({sampling:r.sampling,mask:l}),c=e.getBackground(u.xyS,u.zS,r.regression);d("background",c);const f=e.subtract(c);function d(t,e){r.include.includes(t)&&(i[t]=e,n.push(e.data.buffer))}i.result=f,n.push(f.data.buffer),t(i,n)}))}},ll=hl;class ul{constructor(){this._url=null,this._deps=[null]}checkUrl(){if(null===this._url)throw new Error("image worker must be initialized with an URL")}get url(){return this._url}set url(t){if("string"!=typeof t)throw new TypeError("worker URL must be a string");this._url=t,this._deps[0]=t}static extendMethod(t,e){let r,i,n={};function s(...t){return r||(this.checkUrl(),i=this.url,r=new(sl())(e.work,{deps:i}),n.manager=r),e.run.call(n,...t)}s.reset=function(){r&&(r.terminate(),r=new(sl())(e.work,{deps:i}),n.manager=r)},ul.prototype[t]=s}}!function(t){t.extendMethod("background",ll)}(ul),new ul;var cl=__webpack_require__(8764);class fl{constructor(t){this.imageSubject=new rt(1),this.depthSubject=new rt(1),this.dataSubject=new rt(1),this.onDataOpen=t=>{console.log("Data Websocket Opened",t),this.sendDataInitPacket()},this.onDataClosed=t=>{console.log("Data Websocket Closed",t),console.log("Trying to open the websocket again"),this.openDataWebsocket()},this.onDataError=t=>{console.log("Data Websocket Error",t)},this.onDataMessage=t=>{this.unpackData(t.data)},this.stateSubject=new rt(1),this.onStateClosed=t=>{console.log("State Websocket Closed",t),console.log("Trying to open the websocket again"),this.openStateWebsocket()},this.onStateOpen=t=>{console.log("State Websocket Opened",t),this.sendStateInitPacket()},this.onStateError=t=>{console.log("State Websocket Error",t)},this.onStateMessage=t=>{this.unpackState(t.data)},this.dataURL=t.dataWSUrl,this.robotName=t.robotName,this.accessToken=t.accessToken,this.openDataWebsocket(),this.openStateWebsocket()}openDataWebsocket(){this.dataWebsocket=new WebSocket(this.dataURL),this.dataWebsocket.onopen=this.onDataOpen,this.dataWebsocket.onclose=this.onDataClosed,this.dataWebsocket.onerror=this.onDataError,this.dataWebsocket.onmessage=this.onDataMessage}sendDataInitPacket(){let t={command:"pull",exchange:"camera0",robot_name:this.robotName,accessToken:this.accessToken};this.dataWebsocket.send(JSON.stringify(t))}async unpackData(t){if("string"==typeof t)return void console.error("Error unpacking video feed:",t);let e=new Uint8Array(await t.slice(0,1).arrayBuffer())[0];if(1===e){const e=13;let r=new Uint32Array(await t.slice(1,e).arrayBuffer()),i=t.slice(e,e+r[0]),n=t.slice(e+r[0],e+r[0]+r[1]),s=t.slice(e+r[0]+r[1],e+r[0]+r[1]+r[2]);i.arrayBuffer().then((t=>{let e={data:cl.lW.from(t),type:"image/jpg"};this.imageSubject.next(e)}),(t=>console.log("Error while sending image:",t))),n.arrayBuffer().then((t=>il.load(t)),(t=>console.log("Error while loading depth map: ",t))).then((t=>{t&&this.depthSubject.next(t)})),s.text().then((t=>this.dataSubject.next(JSON.parse(t))),(t=>console.log("Error while getting status:",t)))}else if(2===e){let e=new Uint32Array(await t.slice(1,13).arrayBuffer());t.slice(9,9+e[0]).arrayBuffer().then((t=>{var e={data:cl.lW.from(t),type:"image/jpg"};this.imageSubject.next(e)}))}else console.log(`Data type ${e} isn't JPG+PNG(1)`)}openStateWebsocket(){this.stateWebsocket=new WebSocket(this.dataURL),this.stateWebsocket.onopen=this.onStateOpen,this.stateWebsocket.onclose=this.onStateClosed,this.stateWebsocket.onerror=this.onStateError,this.stateWebsocket.onmessage=this.onStateMessage}sendStateInitPacket(){let t={command:"pull",exchange:"state",robot_name:this.robotName,accessToken:this.accessToken};this.stateWebsocket.send(JSON.stringify(t))}unpackState(t){"string"!=typeof t?t.text().then((t=>this.stateSubject.next(JSON.parse(t)))):console.error("Error unpacking robot state:",t)}shutdown(){this.dataWebsocket.onclose=null,this.stateWebsocket.onclose=null,this.dataWebsocket.close(),this.stateWebsocket.close()}}class dl{constructor(t){this.messageQueue=[],this.onWSClosed=t=>{console.debug("Command Websocket Closed",t),console.debug("Trying to open the websocket again"),this.openWebsocket()},this.onWSOpen=t=>{console.debug("Command Websocket Opened",t),this.messageQueue.length&&(console.log("There are unsent messages in the queue, sending them"),this.sendQueuedCommands())},this.onWSError=t=>{console.log("Command Websocket Error",t)},this.onWSMessage=t=>{this.unpackData(t.data)},this.settings=t,this.openWebsocket()}enqueueCommand(t){let e={command:"push",exchange:"commands",robot_name:this.settings.robotName,message:t,accessToken:this.settings.accessToken};console.log({messageObj:e}),console.log("Enqueuing command:",t),this.messageQueue.push(e),this.sendQueuedCommands()}sendQueuedCommands(){if(0!=this.messageQueue.length)for(;this.messageQueue.length&&this.commandWebsocket.readyState===WebSocket.OPEN;){let t=this.messageQueue.shift();console.debug("Sending:",t),this.commandWebsocket.send(JSON.stringify(t))}}openWebsocket(){this.commandWebsocket=new WebSocket(this.settings.dataWSUrl),this.commandWebsocket.onopen=this.onWSOpen,this.commandWebsocket.onclose=this.onWSClosed,this.commandWebsocket.onerror=this.onWSError,this.commandWebsocket.onmessage=this.onWSMessage}unpackData(t){"string"!=typeof t?t.text().then((t=>console.log(JSON.parse(t)))):console.log("Command answer:",t)}shutdown(){this.commandWebsocket.onclose=null,this.commandWebsocket.close(),this.commandWebsocket=null}}var pl=function(t){function e(e){var r=t.call(this)||this;return r._value=e,r}return d(e,t),Object.defineProperty(e.prototype,"value",{get:function(){return this.getValue()},enumerable:!1,configurable:!0}),e.prototype._subscribe=function(e){var r=t.prototype._subscribe.call(this,e);return!r.closed&&e.next(this._value),r},e.prototype.getValue=function(){var t=this,e=t.hasError,r=t.thrownError,i=t._value;if(e)throw r;return this._throwIfClosed(),i},e.prototype.next=function(e){t.prototype.next.call(this,this._value=e)},e}(Q);class ml{constructor(){this.source="operator"}static getInstance(){return ml.instance||(ml.instance=new ml),ml.instance}}class gl{constructor(t,e){this.source=ml.getInstance().source,this.timestamp=Date.now(),this.op=t,this.frame_timestamp=e.frameindex,this.timestamp=e.time}}class wl extends gl{constructor(t,e,r,i){if(super("goto",t),this.pick_point=void 0,this.pos=void 0,this.object_rect=void 0,e&&(this.pick_point=[e.x,e.y]),r&&(this.object_rect=[[r.TopLeft.x,r.TopLeft.y],[r.BottomRight.x,r.BottomRight.y]]),i&&e){let r=i*t.depth_unit;if(r){let i=(e.x-t.ppx)*r/t.fx,n=(e.y-t.ppy)*r/t.fy;this.pos=[i,n,r]}}}}class bl extends gl{constructor(t){super("wait-for-idle",t)}}function yl(t){return function(e){if(function(t){return _(null==t?void 0:t.lift)}(e))return e.lift((function(e){try{return t(e,this)}catch(t){this.error(t)}}));throw new TypeError("Unable to lift unknown Observable type")}}var _l=function(t){function e(e,r,i,n,s){var o=t.call(this,e)||this;return o.onFinalize=s,o._next=r?function(t){try{r(t)}catch(t){e.error(t)}}:t.prototype._next,o._error=n?function(t){try{n(t)}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._error,o._complete=i?function(){try{i()}catch(t){e.error(t)}finally{this.unsubscribe()}}:t.prototype._complete,o}return d(e,t),e.prototype.unsubscribe=function(){var e,r=this.closed;t.prototype.unsubscribe.call(this),!r&&(null===(e=this.onFinalize)||void 0===e||e.call(this))},e}(j);function vl(t,e){return t===e}var xl=function(t){function e(e,r){return t.call(this)||this}return d(e,t),e.prototype.schedule=function(t,e){return void 0===e&&(e=0),this},e}(A),kl={setInterval:function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];var r=kl.delegate;return((null==r?void 0:r.setInterval)||setInterval).apply(void 0,w([],g(t)))},clearInterval:function(t){var e=kl.delegate;return((null==e?void 0:e.clearInterval)||clearInterval)(t)},delegate:void 0},Al=function(t){function e(e,r){var i=t.call(this,e,r)||this;return i.scheduler=e,i.work=r,i.pending=!1,i}return d(e,t),e.prototype.schedule=function(t,e){if(void 0===e&&(e=0),this.closed)return this;this.state=t;var r=this.id,i=this.scheduler;return null!=r&&(this.id=this.recycleAsyncId(i,r,e)),this.pending=!0,this.delay=e,this.id=this.id||this.requestAsyncId(i,this.id,e),this},e.prototype.requestAsyncId=function(t,e,r){return void 0===r&&(r=0),kl.setInterval(t.flush.bind(t,this),r)},e.prototype.recycleAsyncId=function(t,e,r){if(void 0===r&&(r=0),null!=r&&this.delay===r&&!1===this.pending)return e;kl.clearInterval(e)},e.prototype.execute=function(t,e){if(this.closed)return new Error("executing a cancelled action");this.pending=!1;var r=this._execute(t,e);if(r)return r;!1===this.pending&&null!=this.id&&(this.id=this.recycleAsyncId(this.scheduler,this.id,null))},e.prototype._execute=function(t,e){var r,i=!1;try{this.work(t)}catch(t){i=!0,r=t||new Error("Scheduled action threw falsy error")}if(i)return this.unsubscribe(),r},e.prototype.unsubscribe=function(){if(!this.closed){var e=this.id,r=this.scheduler,i=r.actions;this.work=this.state=this.scheduler=null,this.pending=!1,k(i,this),null!=e&&(this.id=this.recycleAsyncId(r,e,null)),this.delay=null,t.prototype.unsubscribe.call(this)}},e}(xl),Ml=function(){function t(e,r){void 0===r&&(r=t.now),this.schedulerActionCtor=e,this.now=r}return t.prototype.schedule=function(t,e,r){return void 0===e&&(e=0),new this.schedulerActionCtor(this,t).schedule(r,e)},t.now=et.now,t}(),El=new(function(t){function e(e,r){void 0===r&&(r=Ml.now);var i=t.call(this,e,r)||this;return i.actions=[],i._active=!1,i._scheduled=void 0,i}return d(e,t),e.prototype.flush=function(t){var e=this.actions;if(this._active)e.push(t);else{var r;this._active=!0;do{if(r=t.execute(t.state,t.delay))break}while(t=e.shift());if(this._active=!1,r){for(;t=e.shift();)t.unsubscribe();throw r}}},e}(Ml))(Al),Sl=El,Cl="function"==typeof Symbol&&Symbol.iterator?Symbol.iterator:"@@iterator";function Il(t){return new H((function(e){(function(t,e){var r,i,n,s,o,a,h,l;return o=this,a=void 0,l=function(){var o,a;return p(this,(function(h){switch(h.label){case 0:h.trys.push([0,5,6,11]),r=function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,r=t[Symbol.asyncIterator];return r?r.call(t):(t=m(t),e={},i("next"),i("throw"),i("return"),e[Symbol.asyncIterator]=function(){return this},e);function i(r){e[r]=t[r]&&function(e){return new Promise((function(i,n){!function(t,e,r,i){Promise.resolve(i).then((function(e){t({value:e,done:r})}),e)}(i,n,(e=t[r](e)).done,e.value)}))}}}(t),h.label=1;case 1:return[4,r.next()];case 2:if((i=h.sent()).done)return[3,4];if(o=i.value,e.next(o),e.closed)return[2];h.label=3;case 3:return[3,1];case 4:return[3,11];case 5:return a=h.sent(),n={error:a},[3,11];case 6:return h.trys.push([6,,9,10]),i&&!i.done&&(s=r.return)?[4,s.call(r)]:[3,8];case 7:h.sent(),h.label=8;case 8:return[3,10];case 9:if(n)throw n.error;return[7];case 10:return[7];case 11:return e.complete(),[2]}}))},new((h=void 0)||(h=Promise))((function(t,e){function r(t){try{n(l.next(t))}catch(t){e(t)}}function i(t){try{n(l.throw(t))}catch(t){e(t)}}function n(e){var n;e.done?t(e.value):(n=e.value,n instanceof h?n:new h((function(t){t(n)}))).then(r,i)}n((l=l.apply(o,a||[])).next())}))})(t,e).catch((function(t){return e.error(t)}))}))}var Dl,Pl,Bl={leading:!0,trailing:!1};function Rl(t,e,r){void 0===e&&(e=El),void 0===r&&(r=Bl);var i,n,s,o,a,h=function(t,e,r){void 0===t&&(t=0),void 0===r&&(r=Sl);var i,n=-1;return null!=e&&((i=e)&&_(i.schedule)?r=e:n=e),new H((function(e){var i=function(t){return t instanceof Date&&!isNaN(t)}(t)?+t-r.now():t;i<0&&(i=0);var s=0;return r.schedule((function(){e.closed||(e.next(s++),0<=n?this.schedule(void 0,n):e.complete())}),i)}))}(t,e);return i=function(){return h},o=(s=void 0===(n=r)?Bl:n).leading,a=s.trailing,yl((function(t,e){var r=!1,n=null,s=null,h=!1,l=function(){null==s||s.unsubscribe(),s=null,a&&(f(),h&&e.complete())},u=function(){s=null,h&&e.complete()},c=function(t){return s=function(t){if(t instanceof H)return t;if(null!=t){if(function(t){return _(t[$])}(t))return o=t,new H((function(t){var e=o[$]();if(_(e.subscribe))return e.subscribe(t);throw new TypeError("Provided object does not correctly implement Symbol.observable")}));if((s=t)&&"number"==typeof s.length&&"function"!=typeof s)return n=t,new H((function(t){for(var e=0;e<n.length&&!t.closed;e++)t.next(n[e]);t.complete()}));if(_(null==(i=t)?void 0:i.then))return r=t,new H((function(t){r.then((function(e){t.closed||(t.next(e),t.complete())}),(function(e){return t.error(e)})).then(null,T)}));if(function(t){return Symbol.asyncIterator&&_(null==t?void 0:t[Symbol.asyncIterator])}(t))return Il(t);if(function(t){return _(null==t?void 0:t[Cl])}(t))return e=t,new H((function(t){var r,i;try{for(var n=m(e),s=n.next();!s.done;s=n.next()){var o=s.value;if(t.next(o),t.closed)return}}catch(t){r={error:t}}finally{try{s&&!s.done&&(i=n.return)&&i.call(n)}finally{if(r)throw r.error}}t.complete()}));if(function(t){return _(null==t?void 0:t.getReader)}(t))return Il(function(t){return y(this,arguments,(function(){var e,r,i;return p(this,(function(n){switch(n.label){case 0:e=t.getReader(),n.label=1;case 1:n.trys.push([1,,9,10]),n.label=2;case 2:return[4,b(e.read())];case 3:return r=n.sent(),i=r.value,r.done?[4,b(void 0)]:[3,5];case 4:return[2,n.sent()];case 5:return[4,b(i)];case 6:return[4,n.sent()];case 7:return n.sent(),[3,2];case 8:return[3,10];case 9:return e.releaseLock(),[7];case 10:return[2]}}))}))}(t))}var e,r,i,n,s,o;throw function(t){return new TypeError("You provided "+(null!==t&&"object"==typeof t?"an invalid object":"'"+t+"'")+" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.")}(t)}(i()).subscribe(new _l(e,l,u))},f=function(){if(r){r=!1;var t=n;n=null,e.next(t),!h&&c()}};t.subscribe(new _l(e,(function(t){r=!0,n=t,(!s||s.closed)&&(o?f():c())}),(function(){h=!0,(!(a&&r&&s)||s.closed)&&e.complete()})))}))}class Tl extends n.Component{constructor(t){super(t),this.robotState=void 0,this.hasImage=!1,this.img=document.createElement("img"),this.subscriptions=[],this.selectionSubject=new pl(void 0),this.releaseEventHandler=t=>{2!=t.button&&(this.selectionStart=null,this.selection&&(this.selectionSubject.next(this.selection),this.medianPoint=this.selection.Center),this.redraw())},this.keyPressEventHandler=t=>{" "==t.key&&this.sendCommand()},this.pressEventHandler=t=>{let e=this.getXY(t);2==t.button?(this.medianPoint=e,this.redrawDepth(this.selection)):(this.selection=null,this.selectionStart=e),this.redraw()},this.dragEventHandler=t=>{let e=this.getXY(t);this.mousePos=e,this.selectionStart&&(this.selection=c.fromPoints(this.selectionStart,e)),this.redraw(),t.preventDefault()},this.settings={dataWSUrl:t.dataWSUrl,robotName:t.robotName,accessToken:t.accessToken},this.canvasRef=n.createRef()}render(){return n.createElement("canvas",{ref:this.canvasRef,width:"1280",height:"720",onContextMenu:t=>{t.preventDefault()},tabIndex:1,onMouseDown:this.pressEventHandler,onMouseMove:this.dragEventHandler,onMouseUp:this.releaseEventHandler,onKeyUp:this.keyPressEventHandler})}componentDidMount(){var t,e,r,i;this.depthCanvas=document.createElement("canvas"),this.depthCanvas.width=1280,this.depthCanvas.height=720,this._imageReceiver=new fl(this.settings),this._networkOperator=new dl(this.settings),this.img.onload=()=>this.redraw(),this.subscriptions.push(this.selectionSubject.subscribe((t=>this.redrawDepth(t))),this._imageReceiver.imageSubject.subscribe((t=>this.setVideoFeed(t))),this._imageReceiver.depthSubject.subscribe((t=>this.setDepthData(t))),this._imageReceiver.dataSubject.subscribe((t=>this.updateStatus(t))),this._imageReceiver.stateSubject.pipe((t="state_machine",void 0===i&&(i=W),r=null!=(r=function(r,i){return e?e(r[t],i[t]):r[t]===i[t]})?r:vl,yl((function(t,e){var n,s=!0;t.subscribe(new _l(e,(function(t){var o=i(t);!s&&r(n,o)||(s=!1,n=o,e.next(t))})))}))),Rl(1e3)).subscribe((t=>this.updateState(t))))}componentWillUnmount(){var t,e;null===(t=this._imageReceiver)||void 0===t||t.shutdown(),null===(e=this._networkOperator)||void 0===e||e.shutdown(),this.subscriptions.forEach((t=>t.unsubscribe())),this.subscriptions=[]}setVideoFeed(t){if(void 0===t)return void(this.hasImage=!1);this.hasImage=!0;let e=t.data.toString("base64");this.img.src=`data:${t.type};base64,`+e}setDepthData(t){this.depthData=t,this.redrawDepth(this.selection),this.redraw()}updateStatus(t){this.robotData=t}updateState(t){this.robotState=t,this.redraw()}redraw(){const t=this.canvasRef.current;if(t){const e=t.getContext("2d");if(this.hasImage){if(e.drawImage(this.img,0,0,1280,720),e.save(),e.globalCompositeOperation="screen",e.drawImage(this.depthCanvas,0,0),e.restore(),this.selection){this.SetCanvasStyle(e,Pl.SelectionRectangle);let t=this.selection;this.doCanvasRect(e,Dl.Stroke,t)}this.medianPoint&&(this.SetCanvasStyle(e,Pl.MedianPoint),e.beginPath(),e.arc(this.medianPoint.x,this.medianPoint.y,10,0,2*Math.PI),e.fill(),e.stroke(),e.closePath()),this.mousePos&&(this.SetCanvasStyle(e,Pl.Crosshair),e.beginPath(),e.moveTo(0,this.mousePos.y),e.lineTo(t.width,this.mousePos.y),e.stroke(),e.closePath(),e.beginPath(),e.moveTo(this.mousePos.x,0),e.lineTo(this.mousePos.x,t.height),e.stroke(),e.closePath())}else{this.SetCanvasStyle(e,Pl.NoImage_BG),e.fillRect(0,0,t.width,t.height);const r=new c(0,0,t.width,t.height);this.SetCanvasStyle(e,Pl.NoImage_Text),e.fillText("No Image",r.Center.x,r.Center.y)}this.SetCanvasStyle(e,Pl.PlaqueBackground);let r=500,i=60,n=new c((t.offsetWidth-r)/2,t.offsetHeight-i,r,i);if(this.doCanvasRect(e,Dl.Fill,n),this.robotState){const t=this.robotState.state_machine;this.SetCanvasStyle(e,Pl.PlaqueText),e.fillText(t,n.Center.x,n.Center.y)}this.SetCanvasStyle(e,Pl.Border),e.strokeRect(0,0,t.width,t.height)}}redrawDepth(t){if(this.selectionStart||!this.medianPoint)return;let e=this.depthCanvas,r=e.getContext("2d");r.clearRect(0,0,e.width,e.height);let i=this.canvasRef.current;if(!t||!this.depthData)return;if(t.x+t.w>i.width&&(t.w=i.width-t.x),t.y+t.h>i.height&&(t.h=i.height-t.y),this.selection.w*this.selection.h==0)return;let n=this.depthData.crop({x:t.x,y:t.y,width:t.w,height:t.h}),s=this.getMedianForPoint(this.depthData,this.medianPoint);this.medianPointValue=s;let o=this.calculateDepthDevColors(s,30),a=new Uint8ClampedArray(4*n.size);const h=new ImageData(t.w,t.h);for(let t=0;t<n.size;t++){const e=n.getPixel(t)[0];if(!o.has(e))continue;const r=o.get(e);for(let e=0;e<4;e++)a[4*t+e]=r[e]}h.data.set(a),r.putImageData(h,t.x,t.y)}getMedianForPoint(t,e){let r=e.x-5;r<0&&(r=0);let i=e.y-5;i<0&&(i=0);let n=r+10<t.width?10:t.width-r,s=i+10<t.height?10:t.height-i;return t.crop({x:r,y:i,width:n,height:s}).median[0]}calculateDepthDevColors(t,e=20){let r=new Map;const i=[255,0,0,255],n=[255,255,0,255],s=[0,255,0,255];for(let s=t-e;s<t;s++){let o=(s-(t-e))/e,a=[i[0]+o*(n[0]-i[0]),i[1]+o*(n[1]-i[1]),i[2]+o*(n[2]-i[2]),255];r.set(s,a)}for(let i=t;i<=t+e;i++){let o=(i-t)/e,a=[n[0]+o*(s[0]-n[0]),n[1]+o*(s[1]-n[1]),n[2]+o*(s[2]-n[2]),255];r.set(i,a)}return r}sendCommand(){var t=new wl(this.robotData,this.medianPoint,this.selection,this.medianPointValue);this._networkOperator.enqueueCommand(t);var e=new bl(this.robotData);this._networkOperator.enqueueCommand(e)}getXY(t){let e=t.pageX,r=t.pageY;return e-=this.canvasRef.current.offsetLeft,r-=this.canvasRef.current.offsetTop,{x:e,y:r}}doCanvasRect(t,e,r){let i=r.x,n=r.y,s=r.w,o=r.h;switch(e){case Dl.Fill:t.fillRect(i,n,s,o);break;case Dl.Stroke:t.strokeRect(i,n,s,o)}}SetCanvasStyle(t,e){switch(e){case Pl.Border:t.strokeStyle="green",t.lineWidth=20;break;case Pl.SelectionRectangle:t.strokeStyle="red",t.lineWidth=7;break;case Pl.PlaqueBackground:t.fillStyle="black";break;case Pl.PlaqueText:t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",t.font="bold 48px sans-serif";break;case Pl.Crosshair:t.strokeStyle="white",t.lineWidth=2;break;case Pl.MedianPoint:t.fillStyle="#aaaaaa99",t.strokeStyle="#000000bb",t.lineWidth=1;break;case Pl.NoImage_BG:t.fillStyle="#aaaaaa";break;case Pl.NoImage_Text:t.fillStyle="#eeeeee",t.font="bold 200px sans-serif",t.textAlign="center",t.textBaseline="middle"}}}!function(t){t[t.Stroke=0]="Stroke",t[t.Fill=1]="Fill"}(Dl||(Dl={})),function(t){t[t.Border=0]="Border",t[t.Crosshair=1]="Crosshair",t[t.SelectionRectangle=2]="SelectionRectangle",t[t.PlaqueBackground=3]="PlaqueBackground",t[t.PlaqueText=4]="PlaqueText",t[t.MedianPoint=5]="MedianPoint",t[t.NoImage_BG=6]="NoImage_BG",t[t.NoImage_Text=7]="NoImage_Text"}(Pl||(Pl={}));class Ul extends gl{constructor(t,e){super("setJ",e),this.joints=t}}class Ol extends gl{constructor(t,e){super("calibration/set-tag",e),this.tag_id=t}}var Ll=__webpack_require__(3379),Fl=__webpack_require__.n(Ll),Nl=__webpack_require__(7795),zl=__webpack_require__.n(Nl),jl=__webpack_require__(569),Yl=__webpack_require__.n(jl),Vl=__webpack_require__(3565),ql=__webpack_require__.n(Vl),Xl=__webpack_require__(9216),Gl=__webpack_require__.n(Xl),$l=__webpack_require__(4589),Wl=__webpack_require__.n($l),Zl=__webpack_require__(4645),Hl={};Hl.styleTagTransform=Wl(),Hl.setAttributes=ql(),Hl.insert=Yl().bind(null,"head"),Hl.domAPI=zl(),Hl.insertStyleElement=Gl(),Fl()(Zl.Z,Hl),Zl.Z&&Zl.Z.locals&&Zl.Z.locals;class Kl extends n.Component{constructor(t){super(t),this.subscriptions=[],this.lastFrameDate=Date.now(),this.radianToDegrees=t=>180*t/Math.PI,this.degreesToRadian=t=>t*Math.PI/180,this.sendOp=t=>this._networkOperator.enqueueCommand(new gl(t,this.robotData)),this.sendOpClosure=t=>()=>this.sendOp(t);let e={};[6,8,10].map((t=>e[t]=!1)),this.state={wsUrl:this.props.dataWSUrl,robotName:this.props.robotName,accessToken:this.props.accessToken,fps:0,depthData:void 0,imageData:void 0,connected:!1,isCalibrating:!1,tagsCalibrated:e,joints:[],commandList:[],commandNameInput:"",commandOpInput:"",state_machine:""}}connectionSettingChanged(t){this.setState(Object.assign(Object.assign({},this.state),{[t.target.name]:t.target.value}))}componentWillUnmount(){this.disconnect()}componentDidMount(){this.connect();const t=JSON.parse(localStorage.getItem("rembrain_debug_operator_commands"));t&&this.setState({commandList:t})}addCommand(){const{commandNameInput:t,commandOpInput:e}=this.state;if(t&&e){const r=[...this.state.commandList,{name:t,op:e}];this.setState({commandList:r}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(r)),this.setState({commandNameInput:"",commandOpInput:""})}}removeCommand(t){const e=this.state.commandList.findIndex((e=>e.name===t)),{commandList:r}=this.state,i=[...r.slice(0,e),...r.slice(e+1)];this.setState({commandList:i}),localStorage.setItem("rembrain_debug_operator_commands",JSON.stringify(i))}connect(){let t={accessToken:this.state.accessToken,dataWSUrl:this.state.wsUrl,robotName:this.state.robotName},e=new dl(t),r=new fl(t);this.subscriptions.push(r.imageSubject.subscribe((t=>this.gotCameraData(t)))),this.subscriptions.push(r.depthSubject.subscribe((t=>this.gotDepthData(t)))),this.subscriptions.push(r.stateSubject.subscribe((t=>this.gotRobotState(t)))),this.subscriptions.push(r.dataSubject.subscribe((t=>this.gotRobotData(t)))),this._imageReceiver=r,this._networkOperator=e,this.setState({connected:!0})}disconnect(){var t,e;null===(t=this._networkOperator)||void 0===t||t.shutdown(),null===(e=this._imageReceiver)||void 0===e||e.shutdown(),this.subscriptions.forEach((t=>t.unsubscribe())),this.subscriptions=[],this.setState({connected:!1,isCalibrating:!1,joints:[]})}gotCameraData(t){if(void 0===t)return;let e=t.data.toString("base64");this.setState({imageData:`data:${t.type};base64,`+e}),this.recalculateFPS()}recalculateFPS(){const t=Date.now(),e=1e3/(t-this.lastFrameDate);this.lastFrameDate=t,this.setState({fps:e})}gotDepthData(t){t.multiply(64);let e=t.toBase64();this.setState({depthData:"data:image/png;base64,"+e})}gotRobotState(t){void 0!==t&&(this.robotState=t,this.robotState.joints&&this.setState({joints:t.joints,state_machine:t.state_machine}))}gotRobotData(t){void 0!==t&&(this.robotData=t)}calibrationStart(){this.sendOp("ask_for_manual"),this.sendOp("calibration/tag_detection"),this.resetTagState(),this.setState({isCalibrating:!0})}canFinishCalibration(){if(!this.state.isCalibrating)return!1;const t=this.state.tagsCalibrated;return 0==Object.keys(t).filter((e=>!t[e])).length}finishCalibration(){this.sendOp("calibartion/tag_calibration"),this.sendOp("ask_for_idle"),this.resetTagState(),this.setState({isCalibrating:!1})}resetTagState(){let t=this.state.tagsCalibrated;Object.keys(t).forEach((e=>t[e]=!1)),this.setState({tagsCalibrated:t})}detectCalibrationTags(){this.sendOp("calibration/tag_detection")}tagClicked(t){let e=new Ol(Number(t),this.robotData);this._networkOperator.enqueueCommand(e);let r=this.state.tagsCalibrated;r[t]=!0,this.setState({tagsCalibrated:r})}renderTagButtons(){const t=Object.keys(this.state.tagsCalibrated);let e=t.map((t=>n.createElement("button",{onClick:()=>this.tagClicked(t),key:t,disabled:!this.state.isCalibrating},this.state.tagsCalibrated[t]?"Reset":"Tag"," #",t)));return n.createElement("div",{className:"tags",style:{gridTemplateColumns:"repeat("+t.length+", 1fr)"}},e)}renderJoints(){if(0==this.state.joints.length)return;let t=this.state.joints.map(((t,e)=>n.createElement("div",{key:e,className:"joint-controls "},n.createElement("div",{className:"joint-num"},e,":"),n.createElement("button",{onClick:()=>this.moveJoint(e,-15)},"-15°"),n.createElement("button",{onClick:()=>this.moveJoint(e,-5)},"-5°"),n.createElement("div",{className:"joint-degrees"},this.radianToDegrees(t).toFixed(2),"°"),n.createElement("button",{onClick:()=>this.moveJoint(e,5)},"+5°"),n.createElement("button",{onClick:()=>this.moveJoint(e,15)},"+15°"))));return n.createElement("div",null,n.createElement("span",null,"Joints"),n.createElement("div",{className:"input-container"},t))}moveJoint(t,e){let r=this.state.joints.map((t=>this.radianToDegrees(t)));r[t]+=e;let i=new Ul(r,this.robotData);this._networkOperator.enqueueCommand(i)}render(){return n.createElement("div",{className:"debug-operator-container"},n.createElement("div",{className:"camera-view"},n.createElement("img",{width:"854",height:"480",src:this.state.imageData}),n.createElement("div",{className:"debug-command-container",onContextMenu:t=>(t.stopPropagation(),t.preventDefault(),!1)},n.createElement("div",{className:"command-input"},n.createElement("div",{className:"command-input-item"},n.createElement("span",null,"Command name"),n.createElement("input",{onChange:t=>{this.setState({commandNameInput:t.target.value})},value:this.state.commandNameInput})),n.createElement("div",{className:"command-input-item"},n.createElement("span",null,"Command OP"),n.createElement("input",{value:this.state.commandOpInput,onChange:t=>{this.setState({commandOpInput:t.target.value})}})),n.createElement("button",{style:{marginTop:10},onClick:()=>this.addCommand()},"Add command")),n.createElement("div",{className:"command-item-container"},this.state.commandList.map((t=>n.createElement("div",{id:t.name,className:"command-item",onClick:()=>{this._networkOperator.enqueueCommand({op:t.op,source:ml.getInstance().source+" "+this.state.accessToken})}},n.createElement("span",null,t.name),n.createElement("div",{className:"command-item-icon",onClick:e=>{e.stopPropagation(),this.removeCommand(t.name)}},n.createElement("svg",{width:10,"aria-hidden":"true",focusable:"false","data-prefix":"fas","data-icon":"xmark",role:"img",xmlns:"http://www.w3.org/2000/svg",viewBox:"0 0 320 512"},n.createElement("path",{fill:"currentColor",d:"M310.6 361.4c12.5 12.5 12.5 32.75 0 45.25C304.4 412.9 296.2 416 288 416s-16.38-3.125-22.62-9.375L160 301.3L54.63 406.6C48.38 412.9 40.19 416 32 416S15.63 412.9 9.375 406.6c-12.5-12.5-12.5-32.75 0-45.25l105.4-105.4L9.375 150.6c-12.5-12.5-12.5-32.75 0-45.25s32.75-12.5 45.25 0L160 210.8l105.4-105.4c12.5-12.5 32.75-12.5 45.25 0s12.5 32.75 0 45.25l-105.4 105.4L310.6 361.4z"}))))))))),n.createElement("div",{className:"controls"},n.createElement("div",{className:"operator-buttons"},this.renderJoints(),n.createElement("span",null,"Vacuum"),n.createElement("div",{className:"input-container vacuum"},n.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_on"),disabled:!this.state.connected},"On"),n.createElement("button",{onClick:this.sendOpClosure("manual_vacuum_off"),disabled:!this.state.connected},"Off")),n.createElement("span",null,"Calibration"),n.createElement("div",{className:"input-container calibration"},n.createElement("div",null,n.createElement("button",{onClick:()=>this.calibrationStart(),disabled:!this.state.connected},"Start calibration"),n.createElement("button",{onClick:this.sendOpClosure("calibration/tag_detection"),disabled:!this.state.connected},"Detect tags")),this.renderTagButtons(),n.createElement("div",null,n.createElement("button",{onClick:()=>this.finishCalibration(),disabled:!this.canFinishCalibration()},"Finish calibration"))),n.createElement("div",{className:"debug-operator-info-container"},n.createElement("span",null,`FPS: ${this.state.fps.toFixed(2)}`),n.createElement("span",null,`State: ${this.state.state_machine}`))),n.createElement("div",null,n.createElement("button",{className:"btn-send-home",onClick:this.sendOpClosure("go_home_safely"),disabled:!this.state.connected},"Send home")),n.createElement("div",{className:"depth-view"},n.createElement("img",{width:"320",height:"180",src:this.state.depthData}))))}}})(),__webpack_exports__})()}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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R0FBSyxHQUFLLEdBQUssSUFBSyxJQUFLLEVBQUssR0FBSyxHQUNuQyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQ25DLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FDbkMsR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUNuQyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQ25DLEdBQUssR0FBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLEtBR0hDLEVBQTZCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUM5REMsRUFBNEIsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEdBQUcsSUFDcERDLEVBQTZCLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxLQUM5REMsRUFBNEIsQ0FDOUIsRUFBSyxFQUFLLEVBQUssRUFBSyxHQUFLLEVBQUssRUFBSyxHQUNuQyxHQUFLLEVBQUssR0FBSyxHQUFLLEdBQUssRUFBSyxHQUFLLElBQ25DLEdBQUssR0FBSyxHQUFLLElBQUssRUFBSyxHQUFLLEdBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssRUFBSyxHQUFLLEdBQUssR0FBSyxJQUNuQyxHQUFLLEdBQUssSUFBSyxJQUFLLEdBQUssR0FBSyxHQUFLLEdBQ25DLElBQUssR0FBSyxJQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FDbkMsR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUNuQyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQ25DLEdBQUssR0FBSyxHQUFLLEdBQUssR0FBSyxHQUFLLEdBQUssR0FDbkMsR0FBSyxHQUFLLEdBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFDbkMsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUNuQyxJQUFLLElBQUssSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLElBQ25DLElBQUssS0EyRE4sU0FBU0MsRUFBa0JDLEVBQVNDLEdB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S2dnRixNQUFNcXRELElBQUlqVSxRQUFRLE1BQ3RDLDRCQUFPLFVBQVVwNUgsS0FBS2dnRixNQUFNMnFELG1CQUdwQywyQkFDSSwwQkFBUTNnRSxVQUFVLGdCQUNWdWxFLFFBQVN2dkksS0FBS2t0SSxjQUFjLGtCQUM1QnNDLFVBQVd4dkksS0FBS2dnRixNQUFNenlDLFdBQVMsY0FJM0MsdUJBQUt5OEIsVUFBVSxjQUNYLHVCQUFLaDdELE1BQU0sTUFBTUMsT0FBTyxNQUNuQnhCLElBQUt6TixLQUFLZ2dGLE1BQU1ncEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zL3dlYnBhY2svdW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbiIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Jhc2U2NC1qcy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2J1ZmZlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2NhbnZhcy1maXQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL29wZXJhdG9yLWRlYnVnLnNjc3MiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZWxlbWVudC1zaXplL2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1ibXAvbm9kZV9tb2R1bGVzL2lvYnVmZmVyL0lPQnVmZmVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1ibXAvc3JjL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtYm1wL3NyYy9lbmNvZGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWJtcC9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWpwZWcvbm9kZV9tb2R1bGVzL3RpZmYvc3JjL2RlY29kZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtanBlZy9ub2RlX21vZHVsZXMvdGlmZi9zcmMvaWZkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1qcGVnL25vZGVfbW9kdWxlcy90aWZmL3NyYy9pZmRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtanBlZy9ub2RlX21vZHVsZXMvdGlmZi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWpwZWcvbm9kZV9tb2R1bGVzL3RpZmYvc3JjL3RhZ3MvZXhpZi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtanBlZy9ub2RlX21vZHVsZXMvdGlmZi9zcmMvdGFncy9ncHMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWpwZWcvbm9kZV9tb2R1bGVzL3RpZmYvc3JjL3RhZ3Mvc3RhbmRhcmQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWpwZWcvbm9kZV9tb2R1bGVzL3RpZmYvc3JjL3RpZmZEZWNvZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1qcGVnL25vZGVfbW9kdWxlcy90aWZmL3NyYy90aWZmSWZkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1qcGVnL3NyYy9kZWNvZGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mYXN0LWpwZWcvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1saXN0L2Zhc3QtbGlzdC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL25vZGVfbW9kdWxlcy9pb2J1ZmZlci9saWItZXNtL3RleHQtZW5jb2RpbmctcG9seWZpbGwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9mZnQuanMvbGliL2ZmdC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ZpbGUtdHlwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2hhcy1vd24vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pZWVlNzU0L2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtdHlwZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2lvYnVmZmVyL0lPQnVmZmVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaXMtYW55LWFycmF5L3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2lzLWFycmF5LXR5cGUvaXMtYXJyYXktdHlwZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2lzLWZpbml0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2lzLWludGVnZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9qcGVnLWpzL2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvanBlZy1qcy9saWIvZGVjb2Rlci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2pwZWctanMvbGliL2VuY29kZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9qcy1wcmlvcml0eS1xdWV1ZS9wcmlvcml0eS1xdWV1ZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2pzLXF1YW50aXRpZXMvYnVpbGQvcXVhbnRpdGllcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21lZGlhbi1xdWlja3NlbGVjdC9saWIvbWVkaWFuLXF1aWNrc2VsZWN0Lm1pbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWRpc2pvaW50LXNldC9zcmMvRGlzam9pbnRTZXQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1kaXN0YW5jZS1ldWNsaWRlYW4vbGliLWVzNi9ldWNsaWRlYW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1mZnQvc3JjL0ZGVFV0aWxzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtZmZ0L3NyYy9mZnRsaWIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1mZnQvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwta2VybmVsLWdhdXNzaWFuL2dhdXNzaWFuLWtlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWtlcm5lbC1wb2x5bm9taWFsL3BvbHlub21pYWwta2VybmVsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwta2VybmVsLXNpZ21vaWQvc2lnbW9pZC1rZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1rZXJuZWwvc3JjL2tlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWtlcm5lbC9zcmMva2VybmVscy9hbm92YS1rZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1rZXJuZWwvc3JjL2tlcm5lbHMvY2F1Y2h5LWtlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWtlcm5lbC9zcmMva2VybmVscy9leHBvbmVudGlhbC1rZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1rZXJuZWwvc3JjL2tlcm5lbHMvaGlzdG9ncmFtLWludGVyc2VjdGlvbi1rZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1rZXJuZWwvc3JjL2tlcm5lbHMvbGFwbGFjaWFuLWtlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWtlcm5lbC9zcmMva2VybmVscy9tdWx0aXF1YWRyYXRpYy1rZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1rZXJuZWwvc3JjL2tlcm5lbHMvcmF0aW9uYWwtcXVhZHJhdGljLWtlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC1jb252b2x1dGlvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2RjL2x1LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kYy9xci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvZGMvc3ZkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kYy91dGlsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy9kZWNvbXBvc2l0aW9ucy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvdmlld3MvY29sdW1uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy92aWV3cy9jb2x1bW5TZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL2ZsaXBDb2x1bW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL2ZsaXBSb3cuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL3Jvdy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvdmlld3Mvcm93U2VsZWN0aW9uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtbWF0cml4L3NyYy92aWV3cy9zZWxlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL3N1Yi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvd3JhcC9XcmFwcGVyTWF0cml4MUQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3dyYXAvd3JhcC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvZGV0ZXJtaW5hbnQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2xpbmVhckRlcGVuZGVuY2llcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvcHNldWRvSW52ZXJzZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvY292YXJpYW5jZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvY29ycmVsYXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2RjL2V2ZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvZGMvY2hvbGVza3kuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2RjL25pcGFscy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWFycmF5LW1heC9saWItZXM2L2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtYXJyYXktbWluL2xpYi1lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1hcnJheS1yZXNjYWxlL2xpYi1lczYvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL2luc3BlY3QuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL21hdHJpeC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvc3RhdC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvbWF0aE9wZXJhdGlvbnMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3V0aWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL2Jhc2UuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9tbC1tYXRyaXgvc3JjL3ZpZXdzL3RyYW5zcG9zZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLW1hdHJpeC9zcmMvd3JhcC9XcmFwcGVyTWF0cml4MkQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9uZXctYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9uZXh0LXBvd2VyLW9mLXR3by9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL251bS1zb3J0L2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvb2JqZWN0LWFzc2lnbi9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcm9idXN0LW9yaWVudGF0aW9uL29yaWVudGF0aW9uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcm9idXN0LXBvaW50LWluLXBvbHlnb24vcm9idXN0LXBucC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3JvYnVzdC1zY2FsZS9yb2J1c3Qtc2NhbGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtc3VidHJhY3Qvcm9idXN0LWRpZmYuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yb2J1c3Qtc3VtL3JvYnVzdC1zdW0uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbm9kZV9tb2R1bGVzL2lvYnVmZmVyL2xpYi1lc20vdGV4dC1lbmNvZGluZy1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3R3by1wcm9kdWN0L3R3by1wcm9kdWN0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdHdvLXN1bS90d28tc3VtLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdXRmOC91dGY4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvd2ViLXdvcmtlci1tYW5hZ2VyL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3dlYi13b3JrZXItbWFuYWdlci9zcmMvd29ya2VyVGVtcGxhdGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zL3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvd2VicGFjay9ydW50aW1lL2RlZmluZSBwcm9wZXJ0eSBnZXR0ZXJzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvd2VicGFjay9ydW50aW1lL2dldCBqYXZhc2NyaXB0IGNodW5rIGZpbGVuYW1lIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zL3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy93ZWJwYWNrL3J1bnRpbWUvbWFrZSBuYW1lc3BhY2Ugb2JqZWN0Iiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvd2VicGFjay9ydW50aW1lL25vZGUgbW9kdWxlIGRlY29yYXRvciIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zL3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvd2VicGFjay9ydW50aW1lL2pzb25wIGNodW5rIGxvYWRpbmciLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy9zdHJlYW1zL1dzSE9DLnRzeCIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vc3JjL3N0cmVhbXMvUmVhY3RSZ2JTdHJlYW0udHN4Iiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9zcmMvc3RyZWFtcy9SZWFjdFJlc3BvbnNpdmVSZ2JTdHJlYW0udHN4Iiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9zcmMvaW1hZ2UvUmVtYnJhaW5JbWFnZS50c3giLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL2VudGl0aWVzLnRzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9jcmVhdGVFcnJvckNsYXNzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9hcnJSZW1vdmUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9jb25maWcuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvbm9vcC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL05vdGlmaWNhdGlvbkZhY3Rvcmllcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvZXJyb3JDb250ZXh0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3Vic2NyaWJlci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3N5bWJvbC9vYnNlcnZhYmxlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pZGVudGl0eS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvcGlwZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL09ic2VydmFibGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL09iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU3ViamVjdC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9SZXBsYXlTdWJqZWN0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvcmUvYml0TWV0aG9kcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Jsb2ItdXRpbC9kaXN0L2Jsb2ItdXRpbC5lcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL25vZGVfbW9kdWxlcy9pb2J1ZmZlci9saWItZXNtL3V0ZjguYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL25vZGVfbW9kdWxlcy9pb2J1ZmZlci9saWItZXNtL0lPQnVmZmVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcGFrby9kaXN0L3Bha28uZXNtLm1qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2Zhc3QtcG5nL2xpYi1lc20vY29tbW9uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9pbnRlcm5hbFR5cGVzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9QTkdEZWNvZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9QTkdFbmNvZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS90eXBlcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy91dGlsL2Jhc2U2NC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9icm93c2VyL2Vudmlyb25tZW50LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvcmUvZXhwb3J0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvZmFzdC1wbmcvbGliLWVzbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9jb3JlL21lZGlhVHlwZXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29yZS9leHRlbmQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvbW9kZWwvbW9kZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29yZS9raW5kTmFtZXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29yZS9raW5kLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdGlmZi9ub2RlX21vZHVsZXMvaW9idWZmZXIvbGliLWVzbS91dGY4LmJyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy90aWZmL25vZGVfbW9kdWxlcy9pb2J1ZmZlci9saWItZXNtL0lPQnVmZmVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdGlmZi9saWItZXNtL3RhZ3MvZXhpZi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbGliLWVzbS90YWdzL2dwcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbGliLWVzbS90YWdzL3N0YW5kYXJkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdGlmZi9saWItZXNtL2lmZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbGliLWVzbS9pZmRWYWx1ZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbGliLWVzbS9sencuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy90aWZmL2xpYi1lc20vdGlmZklmZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3RpZmYvbGliLWVzbS96bGliLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdGlmZi9saWItZXNtL3RpZmZEZWNvZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvdGlmZi9saWItZXNtL2hvcml6b250YWxEaWZmZXJlbmNpbmcuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvc3RhY2svdHJhbnNmb3JtL21hdGNoQW5kQ3JvcC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay9jb21wdXRlL21pbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay9jb21wdXRlL21heC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy91dGlsL2hpc3RvZ3JhbS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay9jb21wdXRlL21lZGlhbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay9jb21wdXRlL2hpc3RvZ3JhbS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay9jb21wdXRlL2hpc3RvZ3JhbXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvc3RhY2svdXRpbGl0eS9hdmVyYWdlSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvc3RhY2svdXRpbGl0eS9tYXhJbWFnZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9zdGFjay91dGlsaXR5L21pbkltYWdlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3N0YWNrL1N0YWNrLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3N0YWNrL2V4dGVuZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9jb3JlL2xvYWQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy90aWZmL2xpYi1lc20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29yZS92YWx1ZU1ldGhvZHMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvaW50ZXJuYWwvZ2V0SW1hZ2VQYXJhbWV0ZXJzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ludGVybmFsL2dldE91dHB1dEltYWdlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9hYnMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL2ludmVydC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9pbnRlcm5hbC9jb3B5QWxwaGFDaGFubmVsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9mbGlwWC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9maWx0ZXIvZmxpcFkuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL2JsdXJGaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvdXRpbC9jaGFubmVsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9tZWRpYW5GaWx0ZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL2dhdXNzaWFuRmlsdGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwva2VybmVscy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9pbnRlcm5hbC9jbGFtcC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLWNvbnZvbHV0aW9uL3NyYy9kaXJlY3RDb252b2x1dGlvbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9jb252b2x1dGlvblNlcGFyYWJsZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9jb252b2x1dGlvbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy91dGlsL2tlcm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9nZXRTZXBhcmF0ZWRLZXJuZWwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL2dyYWRpZW50RmlsdGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9zb2JlbEZpbHRlci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9maWx0ZXIvc2NoYXJyRmlsdGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9sZXZlbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy91dGlsL3ZhbHVlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9hZGQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL3N1YnRyYWN0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9zdWJ0cmFjdEltYWdlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9oeXBvdGVudXNlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ZpbHRlci9tdWx0aXBseS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9maWx0ZXIvZGl2aWRlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbWwtcmVncmVzc2lvbi1iYXNlL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL21sLXJlZ3Jlc3Npb24vc3JjL3JlZ3Jlc3Npb24va2VybmVsLXJpZGdlLXJlZ3Jlc3Npb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvZmlsdGVyL2JhY2tncm91bmQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvbW9ycGhvbG9neS9kaWxhdGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvbW9ycGhvbG9neS9lcm9kZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9tb3JwaG9sb2d5L29wZW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvbW9ycGhvbG9neS9jbG9zZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9tb3JwaG9sb2d5L3RvcEhhdC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9tb3JwaG9sb2d5L2JsYWNrSGF0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL21vcnBob2xvZ3kvbW9ycGhvbG9naWNhbEdyYWRpZW50LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS93YXJwaW5nLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9jcm9wLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9jcm9wQWxwaGEuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvaW50ZXJuYWwvY2hlY2tzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9yZXNpemUvbmVhcmVzdE5laWdoYm9yLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9yZXNpemUvcmVzaXplLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwvY29udmVydGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9oc3YuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL2hzbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vY215ay5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vcmdiYTguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL2dyZXlBbGdvcml0aG1zLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9ncmV5LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9tYXNrL2ludGVybW9kZXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svbWluRXJyb3IuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svbWluaW11bS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay9wZXJjZW50aWxlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9tYXNrL3RocmVzaG9sZEFsZ29yaXRobXMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svaHVhbmcuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svaXNvZGF0YS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay9saS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay9tYXhFbnRyb3B5LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9tYXNrL21lYW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svbW9tZW50cy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay9vdHN1LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3RyYW5zZm9ybS9tYXNrL3JlbnlpRW50cm9weS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay9zaGFuYmhhZy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay90cmlhbmdsZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vbWFzay95ZW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdXRpbGl0eS9nZXRUaHJlc2hvbGQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL21hc2svbWFzay5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vcGFkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2ludGVybmFsL2NvcHkuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL2NvbG9yRGVwdGguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL3JvdGF0ZUZyZWUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdHJhbnNmb3JtL3JvdGF0ZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS90cmFuc2Zvcm0vaW5zZXJ0LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvc2V0Qm9yZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvc3BsaXQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdXRpbGl0eS9nZXRDaGFubmVsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvY29tYmluZUNoYW5uZWxzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvc2V0Q2hhbm5lbC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS91dGlsaXR5L2dldFNpbWlsYXJpdHkuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdXRpbGl0eS9nZXRQaXhlbHNHcmlkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwvbWF0cml4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvZ2V0QmVzdE1hdGNoLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvZ2V0Um93LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvZ2V0Q29sdW1uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvZ2V0TWF0cml4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvc2V0TWF0cml4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3V0aWxpdHkvZ2V0UGl4ZWxzQXJyYXkuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdXRpbGl0eS9nZXRJbnRlcnNlY3Rpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvdXRpbGl0eS9nZXRDbG9zZXN0Q29tbW9uUGFyZW50LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvY2FubnktZWRnZS1kZXRlY3Rvci9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvb3BlcmF0b3IvY2FubnlFZGdlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL29wZXJhdG9yL2V4dHJhY3QuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvb3BlcmF0b3IvZmxvb2RGaWxsLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL0Bzd2lmdGNhcnJvdC9jb2xvci1mbnMvZGlzdC9pbmRleC5lc20uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvdXRpbC9jb2xvci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9wYWludExhYmVscy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9wYWludE1hc2tzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwvemVyb3NNYXRyaXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvdXRpbC9TaGFwZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9wYWludFBvaW50cy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9wYWludFBvbHlsaW5lLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL29wZXJhdG9yL3BhaW50UG9seWxpbmVzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL29wZXJhdG9yL3BhaW50UG9seWdvbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9vcGVyYXRvci9wYWludFBvbHlnb25zLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvbXB1dGUvaGlzdG9ncmFtLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvbXB1dGUvY29sb3JIaXN0b2dyYW0uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9taW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9tYXguanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9zdW0uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9tb21lbnQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9sb2NhbE1heGltYS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9jb21wdXRlL21lYW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9tZWRpYW4uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9wb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9leHRlbmRlZFBvaW50cy5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9jb21wdXRlL3JlbGF0aXZlUG9zaXRpb24uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9jb3VudEFscGhhUGl4ZWxzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvbW9ub3RvbmUtY2hhaW4tY29udmV4LWh1bGwvc3JjL2luZGV4LmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvbXB1dGUvbW9ub3RvbmVDaGFpbkNvbnZleEh1bGwuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvdXRpbC9wb2ludHMuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2UvY29tcHV0ZS9taW5pbWFsQm91bmRpbmdSZWN0YW5nbGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvcm9pL2ZlcmV0RGlhbWV0ZXJzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS9Sb2kuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvcm9pL1JvaUxheWVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS91dGlsL21lcmdlUm9pLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS9Sb2lNYXAuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvcm9pL3V0aWwvY29tbW9uQm9yZGVyTGVuZ3RoLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS9jcmVhdG9yL2Zyb21NYXNrLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS9jcmVhdG9yL2Zyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvaW1hZ2Uvcm9pL2NyZWF0b3IvZnJvbU1heGltYS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9yb2kvY3JlYXRvci9mcm9tUG9pbnRzLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwvZHhkeS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9yb2kvY3JlYXRvci9mcm9tV2F0ZXJTaGVkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL3JvaS9tYW5hZ2VyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL3V0aWwvZGVlcFZhbHVlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL0ltYWdlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2NvcmUvY2hlY2tQcm9jZXNzYWJsZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9pbWFnZS9jb3JlL2dldFJHQkFEYXRhLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2ltYWdlL2V4dGVuZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL2ltYWdlLWpzL3NyYy9icm93c2VyL3dvcmtlci9wcm9jZXNzL2JhY2tncm91bmQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9pbWFnZS1qcy9zcmMvYnJvd3Nlci93b3JrZXIvd29ya2VyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvaW1hZ2UtanMvc3JjL2Jyb3dzZXIvd29ya2VyL2V4dGVuZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vc3JjL3dlYi1vcGVyYXRvcnMvaW1hZ2UtcmVjZWl2ZXIudHMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL25ldHdvcmstb3BlcmF0b3IudHMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9CZWhhdmlvclN1YmplY3QuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL2NvbW1hbmRzL2NvbW1hbmQtYmFzZS50cyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vc3JjL3dlYi1vcGVyYXRvcnMvY29tbWFuZHMvY29tbWFuZC1nb3RvLnRzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9zcmMvd2ViLW9wZXJhdG9ycy9jb21tYW5kcy9jb21tYW5kLXdhaXQtZm9yLWlkbGUudHMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2xpZnQuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvT3BlcmF0b3JTdWJzY3JpYmVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FjdGlvbi5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3NjaGVkdWxlci9pbnRlcnZhbFByb3ZpZGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jQWN0aW9uLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL2FzeW5jLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc2NoZWR1bGVyL0FzeW5jU2NoZWR1bGVyLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvc3ltYm9sL2l0ZXJhdG9yLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS9pbm5lckZyb20uanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGUuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL29wZXJhdG9yLWNhbnZhcy50c3giLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC9vcGVyYXRvcnMvdGhyb3R0bGVUaW1lLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvb2JzZXJ2YWJsZS90aW1lci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNTY2hlZHVsZXIuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzRGF0ZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL25vZGVfbW9kdWxlcy9yeGpzL2Rpc3QvZXNtNS9pbnRlcm5hbC91dGlsL2lzUHJvbWlzZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvaXNBc3luY0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc0l0ZXJhYmxlLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvcnhqcy9kaXN0L2VzbTUvaW50ZXJuYWwvdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZS5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvci5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vbm9kZV9tb2R1bGVzL3J4anMvZGlzdC9lc201L2ludGVybmFsL29wZXJhdG9ycy9kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcyIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vc3JjL3dlYi1vcGVyYXRvcnMvY29tbWFuZHMvY29tbWFuZC1zZXQtam9pbnRzLnRzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9zcmMvd2ViLW9wZXJhdG9ycy9jb21tYW5kcy9jb21tYW5kLXNldC10YWcudHMiLCJ3ZWJwYWNrOi8vcmVtYnJhaW5fc3RyZWFtcy8uL3NyYy93ZWItb3BlcmF0b3JzL29wZXJhdG9yLWRlYnVnLnNjc3M/YzJjMCIsIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zLy4vc3JjL3dlYi1vcGVyYXRvcnMvb3BlcmF0b3ItZGVidWcudHN4Il0sInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiB3ZWJwYWNrVW5pdmVyc2FsTW9kdWxlRGVmaW5pdGlvbihyb290LCBmYWN0b3J5KSB7XG5cdGlmKHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0Jylcblx0XHRtb2R1bGUuZXhwb3J0cyA9IGZhY3RvcnkoKTtcblx0ZWxzZSBpZih0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQpXG5cdFx0ZGVmaW5lKFtdLCBmYWN0b3J5KTtcblx0ZWxzZSBpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpXG5cdFx0ZXhwb3J0c1tcInJlbWJyYWluX3N0cmVhbXNcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wicmVtYnJhaW5fc3RyZWFtc1wiXSA9IGZhY3RvcnkoKTtcbn0pKHNlbGYsIGZ1bmN0aW9uKCkge1xucmV0dXJuICIsIid1c2Ugc3RyaWN0J1xuXG5leHBvcnRzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5leHBvcnRzLnRvQnl0ZUFycmF5ID0gdG9CeXRlQXJyYXlcbmV4cG9ydHMuZnJvbUJ5dGVBcnJheSA9IGZyb21CeXRlQXJyYXlcblxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcblxudmFyIGNvZGUgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLydcbmZvciAodmFyIGkgPSAwLCBsZW4gPSBjb2RlLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG4gIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgcmV2TG9va3VwW2NvZGUuY2hhckNvZGVBdChpKV0gPSBpXG59XG5cbi8vIFN1cHBvcnQgZGVjb2RpbmcgVVJMLXNhZmUgYmFzZTY0IHN0cmluZ3MsIGFzIE5vZGUuanMgZG9lcy5cbi8vIFNlZTogaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQmFzZTY0I1VSTF9hcHBsaWNhdGlvbnNcbnJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxucmV2TG9va3VwWydfJy5jaGFyQ29kZUF0KDApXSA9IDYzXG5cbmZ1bmN0aW9uIGdldExlbnMgKGI2NCkge1xuICB2YXIgbGVuID0gYjY0Lmxlbmd0aFxuXG4gIGlmIChsZW4gJSA0ID4gMCkge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBzdHJpbmcuIExlbmd0aCBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNCcpXG4gIH1cblxuICAvLyBUcmltIG9mZiBleHRyYSBieXRlcyBhZnRlciBwbGFjZWhvbGRlciBieXRlcyBhcmUgZm91bmRcbiAgLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vYmVhdGdhbW1pdC9iYXNlNjQtanMvaXNzdWVzLzQyXG4gIHZhciB2YWxpZExlbiA9IGI2NC5pbmRleE9mKCc9JylcbiAgaWYgKHZhbGlkTGVuID09PSAtMSkgdmFsaWRMZW4gPSBsZW5cblxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gdmFsaWRMZW4gPT09IGxlblxuICAgID8gMFxuICAgIDogNCAtICh2YWxpZExlbiAlIDQpXG5cbiAgcmV0dXJuIFt2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuXVxufVxuXG4vLyBiYXNlNjQgaXMgNC8zICsgdXAgdG8gdHdvIGNoYXJhY3RlcnMgb2YgdGhlIG9yaWdpbmFsIGRhdGFcbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKGI2NCkge1xuICB2YXIgbGVucyA9IGdldExlbnMoYjY0KVxuICB2YXIgdmFsaWRMZW4gPSBsZW5zWzBdXG4gIHZhciBwbGFjZUhvbGRlcnNMZW4gPSBsZW5zWzFdXG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiBfYnl0ZUxlbmd0aCAoYjY0LCB2YWxpZExlbiwgcGxhY2VIb2xkZXJzTGVuKSB7XG4gIHJldHVybiAoKHZhbGlkTGVuICsgcGxhY2VIb2xkZXJzTGVuKSAqIDMgLyA0KSAtIHBsYWNlSG9sZGVyc0xlblxufVxuXG5mdW5jdGlvbiB0b0J5dGVBcnJheSAoYjY0KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbnMgPSBnZXRMZW5zKGI2NClcbiAgdmFyIHZhbGlkTGVuID0gbGVuc1swXVxuICB2YXIgcGxhY2VIb2xkZXJzTGVuID0gbGVuc1sxXVxuXG4gIHZhciBhcnIgPSBuZXcgQXJyKF9ieXRlTGVuZ3RoKGI2NCwgdmFsaWRMZW4sIHBsYWNlSG9sZGVyc0xlbikpXG5cbiAgdmFyIGN1ckJ5dGUgPSAwXG5cbiAgLy8gaWYgdGhlcmUgYXJlIHBsYWNlaG9sZGVycywgb25seSBnZXQgdXAgdG8gdGhlIGxhc3QgY29tcGxldGUgNCBjaGFyc1xuICB2YXIgbGVuID0gcGxhY2VIb2xkZXJzTGVuID4gMFxuICAgID8gdmFsaWRMZW4gLSA0XG4gICAgOiB2YWxpZExlblxuXG4gIHZhciBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHRtcCA9XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkpXSA8PCAxOCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDEyKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfFxuICAgICAgcmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAzKV1cbiAgICBhcnJbY3VyQnl0ZSsrXSA9ICh0bXAgPj4gMTYpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gKHRtcCA+PiA4KSAmIDB4RkZcbiAgICBhcnJbY3VyQnl0ZSsrXSA9IHRtcCAmIDB4RkZcbiAgfVxuXG4gIGlmIChwbGFjZUhvbGRlcnNMZW4gPT09IDIpIHtcbiAgICB0bXAgPVxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMikgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSB0bXAgJiAweEZGXG4gIH1cblxuICBpZiAocGxhY2VIb2xkZXJzTGVuID09PSAxKSB7XG4gICAgdG1wID1cbiAgICAgIChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDEwKSB8XG4gICAgICAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAxKV0gPDwgNCkgfFxuICAgICAgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW2N1ckJ5dGUrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltjdXJCeXRlKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtID4+IDEyICYgMHgzRl0gK1xuICAgIGxvb2t1cFtudW0gPj4gNiAmIDB4M0ZdICtcbiAgICBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID1cbiAgICAgICgodWludDhbaV0gPDwgMTYpICYgMHhGRjAwMDApICtcbiAgICAgICgodWludDhbaSArIDFdIDw8IDgpICYgMHhGRjAwKSArXG4gICAgICAodWludDhbaSArIDJdICYgMHhGRilcbiAgICBvdXRwdXQucHVzaCh0cmlwbGV0VG9CYXNlNjQodG1wKSlcbiAgfVxuICByZXR1cm4gb3V0cHV0LmpvaW4oJycpXG59XG5cbmZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIHBhcnRzID0gW11cbiAgdmFyIG1heENodW5rTGVuZ3RoID0gMTYzODMgLy8gbXVzdCBiZSBtdWx0aXBsZSBvZiAzXG5cbiAgLy8gZ28gdGhyb3VnaCB0aGUgYXJyYXkgZXZlcnkgdGhyZWUgYnl0ZXMsIHdlJ2xsIGRlYWwgd2l0aCB0cmFpbGluZyBzdHVmZiBsYXRlclxuICBmb3IgKHZhciBpID0gMCwgbGVuMiA9IGxlbiAtIGV4dHJhQnl0ZXM7IGkgPCBsZW4yOyBpICs9IG1heENodW5rTGVuZ3RoKSB7XG4gICAgcGFydHMucHVzaChlbmNvZGVDaHVuayh1aW50OCwgaSwgKGkgKyBtYXhDaHVua0xlbmd0aCkgPiBsZW4yID8gbGVuMiA6IChpICsgbWF4Q2h1bmtMZW5ndGgpKSlcbiAgfVxuXG4gIC8vIHBhZCB0aGUgZW5kIHdpdGggemVyb3MsIGJ1dCBtYWtlIHN1cmUgdG8gbm90IGZvcmdldCB0aGUgZXh0cmEgYnl0ZXNcbiAgaWYgKGV4dHJhQnl0ZXMgPT09IDEpIHtcbiAgICB0bXAgPSB1aW50OFtsZW4gLSAxXVxuICAgIHBhcnRzLnB1c2goXG4gICAgICBsb29rdXBbdG1wID4+IDJdICtcbiAgICAgIGxvb2t1cFsodG1wIDw8IDQpICYgMHgzRl0gK1xuICAgICAgJz09J1xuICAgIClcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgdWludDhbbGVuIC0gMV1cbiAgICBwYXJ0cy5wdXNoKFxuICAgICAgbG9va3VwW3RtcCA+PiAxMF0gK1xuICAgICAgbG9va3VwWyh0bXAgPj4gNCkgJiAweDNGXSArXG4gICAgICBsb29rdXBbKHRtcCA8PCAyKSAmIDB4M0ZdICtcbiAgICAgICc9J1xuICAgIClcbiAgfVxuXG4gIHJldHVybiBwYXJ0cy5qb2luKCcnKVxufVxuIiwiLyohXG4gKiBUaGUgYnVmZmVyIG1vZHVsZSBmcm9tIG5vZGUuanMsIGZvciB0aGUgYnJvd3Nlci5cbiAqXG4gKiBAYXV0aG9yICAgRmVyb3NzIEFib3VraGFkaWplaCA8aHR0cHM6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG4ndXNlIHN0cmljdCdcblxuY29uc3QgYmFzZTY0ID0gcmVxdWlyZSgnYmFzZTY0LWpzJylcbmNvbnN0IGllZWU3NTQgPSByZXF1aXJlKCdpZWVlNzU0JylcbmNvbnN0IGN1c3RvbUluc3BlY3RTeW1ib2wgPVxuICAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgU3ltYm9sWydmb3InXSA9PT0gJ2Z1bmN0aW9uJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA/IFN5bWJvbFsnZm9yJ10oJ25vZGVqcy51dGlsLmluc3BlY3QuY3VzdG9tJykgLy8gZXNsaW50LWRpc2FibGUtbGluZSBkb3Qtbm90YXRpb25cbiAgICA6IG51bGxcblxuZXhwb3J0cy5CdWZmZXIgPSBCdWZmZXJcbmV4cG9ydHMuU2xvd0J1ZmZlciA9IFNsb3dCdWZmZXJcbmV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVMgPSA1MFxuXG5jb25zdCBLX01BWF9MRU5HVEggPSAweDdmZmZmZmZmXG5leHBvcnRzLmtNYXhMZW5ndGggPSBLX01BWF9MRU5HVEhcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgUHJpbnQgd2FybmluZyBhbmQgcmVjb21tZW5kIHVzaW5nIGBidWZmZXJgIHY0Lnggd2hpY2ggaGFzIGFuIE9iamVjdFxuICogICAgICAgICAgICAgICBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogV2UgcmVwb3J0IHRoYXQgdGhlIGJyb3dzZXIgZG9lcyBub3Qgc3VwcG9ydCB0eXBlZCBhcnJheXMgaWYgdGhlIGFyZSBub3Qgc3ViY2xhc3NhYmxlXG4gKiB1c2luZyBfX3Byb3RvX18uIEZpcmVmb3ggNC0yOSBsYWNrcyBzdXBwb3J0IGZvciBhZGRpbmcgbmV3IHByb3BlcnRpZXMgdG8gYFVpbnQ4QXJyYXlgXG4gKiAoU2VlOiBodHRwczovL2J1Z3ppbGxhLm1vemlsbGEub3JnL3Nob3dfYnVnLmNnaT9pZD02OTU0MzgpLiBJRSAxMCBsYWNrcyBzdXBwb3J0XG4gKiBmb3IgX19wcm90b19fIGFuZCBoYXMgYSBidWdneSB0eXBlZCBhcnJheSBpbXBsZW1lbnRhdGlvbi5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSB0eXBlZEFycmF5U3VwcG9ydCgpXG5cbmlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgdHlwZW9mIGNvbnNvbGUuZXJyb3IgPT09ICdmdW5jdGlvbicpIHtcbiAgY29uc29sZS5lcnJvcihcbiAgICAnVGhpcyBicm93c2VyIGxhY2tzIHR5cGVkIGFycmF5IChVaW50OEFycmF5KSBzdXBwb3J0IHdoaWNoIGlzIHJlcXVpcmVkIGJ5ICcgK1xuICAgICdgYnVmZmVyYCB2NS54LiBVc2UgYGJ1ZmZlcmAgdjQueCBpZiB5b3UgcmVxdWlyZSBvbGQgYnJvd3NlciBzdXBwb3J0LidcbiAgKVxufVxuXG5mdW5jdGlvbiB0eXBlZEFycmF5U3VwcG9ydCAoKSB7XG4gIC8vIENhbiB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZD9cbiAgdHJ5IHtcbiAgICBjb25zdCBhcnIgPSBuZXcgVWludDhBcnJheSgxKVxuICAgIGNvbnN0IHByb3RvID0geyBmb286IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDQyIH0gfVxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZihwcm90bywgVWludDhBcnJheS5wcm90b3R5cGUpXG4gICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGFyciwgcHJvdG8pXG4gICAgcmV0dXJuIGFyci5mb28oKSA9PT0gNDJcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShCdWZmZXIucHJvdG90eXBlLCAncGFyZW50Jywge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcih0aGlzKSkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHJldHVybiB0aGlzLmJ1ZmZlclxuICB9XG59KVxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoQnVmZmVyLnByb3RvdHlwZSwgJ29mZnNldCcsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIodGhpcykpIHJldHVybiB1bmRlZmluZWRcbiAgICByZXR1cm4gdGhpcy5ieXRlT2Zmc2V0XG4gIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUJ1ZmZlciAobGVuZ3RoKSB7XG4gIGlmIChsZW5ndGggPiBLX01BWF9MRU5HVEgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVGhlIHZhbHVlIFwiJyArIGxlbmd0aCArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIGNvbnN0IGJ1ZiA9IG5ldyBVaW50OEFycmF5KGxlbmd0aClcbiAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGJ1ZiwgQnVmZmVyLnByb3RvdHlwZSlcbiAgcmV0dXJuIGJ1ZlxufVxuXG4vKipcbiAqIFRoZSBCdWZmZXIgY29uc3RydWN0b3IgcmV0dXJucyBpbnN0YW5jZXMgb2YgYFVpbnQ4QXJyYXlgIHRoYXQgaGF2ZSB0aGVpclxuICogcHJvdG90eXBlIGNoYW5nZWQgdG8gYEJ1ZmZlci5wcm90b3R5cGVgLiBGdXJ0aGVybW9yZSwgYEJ1ZmZlcmAgaXMgYSBzdWJjbGFzcyBvZlxuICogYFVpbnQ4QXJyYXlgLCBzbyB0aGUgcmV0dXJuZWQgaW5zdGFuY2VzIHdpbGwgaGF2ZSBhbGwgdGhlIG5vZGUgYEJ1ZmZlcmAgbWV0aG9kc1xuICogYW5kIHRoZSBgVWludDhBcnJheWAgbWV0aG9kcy4gU3F1YXJlIGJyYWNrZXQgbm90YXRpb24gd29ya3MgYXMgZXhwZWN0ZWQgLS0gaXRcbiAqIHJldHVybnMgYSBzaW5nbGUgb2N0ZXQuXG4gKlxuICogVGhlIGBVaW50OEFycmF5YCBwcm90b3R5cGUgcmVtYWlucyB1bm1vZGlmaWVkLlxuICovXG5cbmZ1bmN0aW9uIEJ1ZmZlciAoYXJnLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgLy8gQ29tbW9uIGNhc2UuXG4gIGlmICh0eXBlb2YgYXJnID09PSAnbnVtYmVyJykge1xuICAgIGlmICh0eXBlb2YgZW5jb2RpbmdPck9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgc3RyaW5nLiBSZWNlaXZlZCB0eXBlIG51bWJlcidcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKGFyZylcbiAgfVxuICByZXR1cm4gZnJvbShhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbmZ1bmN0aW9uIGZyb20gKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZnJvbVN0cmluZyh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldClcbiAgfVxuXG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheVZpZXcodmFsdWUpXG4gIH1cblxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIGZpcnN0IGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgJyArXG4gICAgICAnb3IgQXJyYXktbGlrZSBPYmplY3QuIFJlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdmFsdWUpXG4gICAgKVxuICB9XG5cbiAgaWYgKGlzSW5zdGFuY2UodmFsdWUsIEFycmF5QnVmZmVyKSB8fFxuICAgICAgKHZhbHVlICYmIGlzSW5zdGFuY2UodmFsdWUuYnVmZmVyLCBBcnJheUJ1ZmZlcikpKSB7XG4gICAgcmV0dXJuIGZyb21BcnJheUJ1ZmZlcih2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgIChpc0luc3RhbmNlKHZhbHVlLCBTaGFyZWRBcnJheUJ1ZmZlcikgfHxcbiAgICAgICh2YWx1ZSAmJiBpc0luc3RhbmNlKHZhbHVlLmJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIpKSkpIHtcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnVGhlIFwidmFsdWVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSBudW1iZXInXG4gICAgKVxuICB9XG5cbiAgY29uc3QgdmFsdWVPZiA9IHZhbHVlLnZhbHVlT2YgJiYgdmFsdWUudmFsdWVPZigpXG4gIGlmICh2YWx1ZU9mICE9IG51bGwgJiYgdmFsdWVPZiAhPT0gdmFsdWUpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVPZiwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgY29uc3QgYiA9IGZyb21PYmplY3QodmFsdWUpXG4gIGlmIChiKSByZXR1cm4gYlxuXG4gIGlmICh0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9QcmltaXRpdmUgIT0gbnVsbCAmJlxuICAgICAgdHlwZW9mIHZhbHVlW1N5bWJvbC50b1ByaW1pdGl2ZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gQnVmZmVyLmZyb20odmFsdWVbU3ltYm9sLnRvUHJpbWl0aXZlXSgnc3RyaW5nJyksIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgJ1RoZSBmaXJzdCBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBBcnJheUJ1ZmZlciwgQXJyYXksICcgK1xuICAgICdvciBBcnJheS1saWtlIE9iamVjdC4gUmVjZWl2ZWQgdHlwZSAnICsgKHR5cGVvZiB2YWx1ZSlcbiAgKVxufVxuXG4vKipcbiAqIEZ1bmN0aW9uYWxseSBlcXVpdmFsZW50IHRvIEJ1ZmZlcihhcmcsIGVuY29kaW5nKSBidXQgdGhyb3dzIGEgVHlwZUVycm9yXG4gKiBpZiB2YWx1ZSBpcyBhIG51bWJlci5cbiAqIEJ1ZmZlci5mcm9tKHN0clssIGVuY29kaW5nXSlcbiAqIEJ1ZmZlci5mcm9tKGFycmF5KVxuICogQnVmZmVyLmZyb20oYnVmZmVyKVxuICogQnVmZmVyLmZyb20oYXJyYXlCdWZmZXJbLCBieXRlT2Zmc2V0WywgbGVuZ3RoXV0pXG4gKiovXG5CdWZmZXIuZnJvbSA9IGZ1bmN0aW9uICh2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBmcm9tKHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpXG59XG5cbi8vIE5vdGU6IENoYW5nZSBwcm90b3R5cGUgKmFmdGVyKiBCdWZmZXIuZnJvbSBpcyBkZWZpbmVkIHRvIHdvcmthcm91bmQgQ2hyb21lIGJ1Zzpcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL3B1bGwvMTQ4XG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLnByb3RvdHlwZSwgVWludDhBcnJheS5wcm90b3R5cGUpXG5PYmplY3Quc2V0UHJvdG90eXBlT2YoQnVmZmVyLCBVaW50OEFycmF5KVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIG9mIHR5cGUgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdUaGUgdmFsdWUgXCInICsgc2l6ZSArICdcIiBpcyBpbnZhbGlkIGZvciBvcHRpb24gXCJzaXplXCInKVxuICB9XG59XG5cbmZ1bmN0aW9uIGFsbG9jIChzaXplLCBmaWxsLCBlbmNvZGluZykge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIGlmIChzaXplIDw9IDApIHtcbiAgICByZXR1cm4gY3JlYXRlQnVmZmVyKHNpemUpXG4gIH1cbiAgaWYgKGZpbGwgIT09IHVuZGVmaW5lZCkge1xuICAgIC8vIE9ubHkgcGF5IGF0dGVudGlvbiB0byBlbmNvZGluZyBpZiBpdCdzIGEgc3RyaW5nLiBUaGlzXG4gICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbGx5IHNlbmRpbmcgaW4gYSBudW1iZXIgdGhhdCB3b3VsZFxuICAgIC8vIGJlIGludGVycHJldGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcihzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIoc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAoc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHJldHVybiBjcmVhdGVCdWZmZXIoc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG59XG5cbi8qKlxuICogRXF1aXZhbGVudCB0byBCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqICovXG5CdWZmZXIuYWxsb2NVbnNhZmUgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cbi8qKlxuICogRXF1aXZhbGVudCB0byBTbG93QnVmZmVyKG51bSksIGJ5IGRlZmF1bHQgY3JlYXRlcyBhIG5vbi16ZXJvLWZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZVNsb3cgPSBmdW5jdGlvbiAoc2l6ZSkge1xuICByZXR1cm4gYWxsb2NVbnNhZmUoc2l6ZSlcbn1cblxuZnVuY3Rpb24gZnJvbVN0cmluZyAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAodHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJyB8fCBlbmNvZGluZyA9PT0gJycpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICB9XG5cbiAgaWYgKCFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gIH1cblxuICBjb25zdCBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICBsZXQgYnVmID0gY3JlYXRlQnVmZmVyKGxlbmd0aClcblxuICBjb25zdCBhY3R1YWwgPSBidWYud3JpdGUoc3RyaW5nLCBlbmNvZGluZylcblxuICBpZiAoYWN0dWFsICE9PSBsZW5ndGgpIHtcbiAgICAvLyBXcml0aW5nIGEgaGV4IHN0cmluZywgZm9yIGV4YW1wbGUsIHRoYXQgY29udGFpbnMgaW52YWxpZCBjaGFyYWN0ZXJzIHdpbGxcbiAgICAvLyBjYXVzZSBldmVyeXRoaW5nIGFmdGVyIHRoZSBmaXJzdCBpbnZhbGlkIGNoYXJhY3RlciB0byBiZSBpZ25vcmVkLiAoZS5nLlxuICAgIC8vICdhYnh4Y2QnIHdpbGwgYmUgdHJlYXRlZCBhcyAnYWInKVxuICAgIGJ1ZiA9IGJ1Zi5zbGljZSgwLCBhY3R1YWwpXG4gIH1cblxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUxpa2UgKGFycmF5KSB7XG4gIGNvbnN0IGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICBjb25zdCBidWYgPSBjcmVhdGVCdWZmZXIobGVuZ3RoKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSArPSAxKSB7XG4gICAgYnVmW2ldID0gYXJyYXlbaV0gJiAyNTVcbiAgfVxuICByZXR1cm4gYnVmXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheVZpZXcgKGFycmF5Vmlldykge1xuICBpZiAoaXNJbnN0YW5jZShhcnJheVZpZXcsIFVpbnQ4QXJyYXkpKSB7XG4gICAgY29uc3QgY29weSA9IG5ldyBVaW50OEFycmF5KGFycmF5VmlldylcbiAgICByZXR1cm4gZnJvbUFycmF5QnVmZmVyKGNvcHkuYnVmZmVyLCBjb3B5LmJ5dGVPZmZzZXQsIGNvcHkuYnl0ZUxlbmd0aClcbiAgfVxuICByZXR1cm4gZnJvbUFycmF5TGlrZShhcnJheVZpZXcpXG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAoYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXCJvZmZzZXRcIiBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcImxlbmd0aFwiIGlzIG91dHNpZGUgb2YgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBsZXQgYnVmXG4gIGlmIChieXRlT2Zmc2V0ID09PSB1bmRlZmluZWQgJiYgbGVuZ3RoID09PSB1bmRlZmluZWQpIHtcbiAgICBidWYgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0KVxuICB9IGVsc2Uge1xuICAgIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGFycmF5LCBieXRlT2Zmc2V0LCBsZW5ndGgpXG4gIH1cblxuICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZVxuICBPYmplY3Quc2V0UHJvdG90eXBlT2YoYnVmLCBCdWZmZXIucHJvdG90eXBlKVxuXG4gIHJldHVybiBidWZcbn1cblxuZnVuY3Rpb24gZnJvbU9iamVjdCAob2JqKSB7XG4gIGlmIChCdWZmZXIuaXNCdWZmZXIob2JqKSkge1xuICAgIGNvbnN0IGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgY29uc3QgYnVmID0gY3JlYXRlQnVmZmVyKGxlbilcblxuICAgIGlmIChidWYubGVuZ3RoID09PSAwKSB7XG4gICAgICByZXR1cm4gYnVmXG4gICAgfVxuXG4gICAgb2JqLmNvcHkoYnVmLCAwLCAwLCBsZW4pXG4gICAgcmV0dXJuIGJ1ZlxuICB9XG5cbiAgaWYgKG9iai5sZW5ndGggIT09IHVuZGVmaW5lZCkge1xuICAgIGlmICh0eXBlb2Ygb2JqLmxlbmd0aCAhPT0gJ251bWJlcicgfHwgbnVtYmVySXNOYU4ob2JqLmxlbmd0aCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIoMClcbiAgICB9XG4gICAgcmV0dXJuIGZyb21BcnJheUxpa2Uob2JqKVxuICB9XG5cbiAgaWYgKG9iai50eXBlID09PSAnQnVmZmVyJyAmJiBBcnJheS5pc0FycmF5KG9iai5kYXRhKSkge1xuICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKG9iai5kYXRhKVxuICB9XG59XG5cbmZ1bmN0aW9uIGNoZWNrZWQgKGxlbmd0aCkge1xuICAvLyBOb3RlOiBjYW5ub3QgdXNlIGBsZW5ndGggPCBLX01BWF9MRU5HVEhgIGhlcmUgYmVjYXVzZSB0aGF0IGZhaWxzIHdoZW5cbiAgLy8gbGVuZ3RoIGlzIE5hTiAod2hpY2ggaXMgb3RoZXJ3aXNlIGNvZXJjZWQgdG8gemVyby4pXG4gIGlmIChsZW5ndGggPj0gS19NQVhfTEVOR1RIKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0F0dGVtcHQgdG8gYWxsb2NhdGUgQnVmZmVyIGxhcmdlciB0aGFuIG1heGltdW0gJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgJ3NpemU6IDB4JyArIEtfTUFYX0xFTkdUSC50b1N0cmluZygxNikgKyAnIGJ5dGVzJylcbiAgfVxuICByZXR1cm4gbGVuZ3RoIHwgMFxufVxuXG5mdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cblxuQnVmZmVyLmlzQnVmZmVyID0gZnVuY3Rpb24gaXNCdWZmZXIgKGIpIHtcbiAgcmV0dXJuIGIgIT0gbnVsbCAmJiBiLl9pc0J1ZmZlciA9PT0gdHJ1ZSAmJlxuICAgIGIgIT09IEJ1ZmZlci5wcm90b3R5cGUgLy8gc28gQnVmZmVyLmlzQnVmZmVyKEJ1ZmZlci5wcm90b3R5cGUpIHdpbGwgYmUgZmFsc2Vcbn1cblxuQnVmZmVyLmNvbXBhcmUgPSBmdW5jdGlvbiBjb21wYXJlIChhLCBiKSB7XG4gIGlmIChpc0luc3RhbmNlKGEsIFVpbnQ4QXJyYXkpKSBhID0gQnVmZmVyLmZyb20oYSwgYS5vZmZzZXQsIGEuYnl0ZUxlbmd0aClcbiAgaWYgKGlzSW5zdGFuY2UoYiwgVWludDhBcnJheSkpIGIgPSBCdWZmZXIuZnJvbShiLCBiLm9mZnNldCwgYi5ieXRlTGVuZ3RoKVxuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihhKSB8fCAhQnVmZmVyLmlzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJidWYxXCIsIFwiYnVmMlwiIGFyZ3VtZW50cyBtdXN0IGJlIG9uZSBvZiB0eXBlIEJ1ZmZlciBvciBVaW50OEFycmF5J1xuICAgIClcbiAgfVxuXG4gIGlmIChhID09PSBiKSByZXR1cm4gMFxuXG4gIGxldCB4ID0gYS5sZW5ndGhcbiAgbGV0IHkgPSBiLmxlbmd0aFxuXG4gIGZvciAobGV0IGkgPSAwLCBsZW4gPSBNYXRoLm1pbih4LCB5KTsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKGFbaV0gIT09IGJbaV0pIHtcbiAgICAgIHggPSBhW2ldXG4gICAgICB5ID0gYltpXVxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAoeCA8IHkpIHJldHVybiAtMVxuICBpZiAoeSA8IHgpIHJldHVybiAxXG4gIHJldHVybiAwXG59XG5cbkJ1ZmZlci5pc0VuY29kaW5nID0gZnVuY3Rpb24gaXNFbmNvZGluZyAoZW5jb2RpbmcpIHtcbiAgc3dpdGNoIChTdHJpbmcoZW5jb2RpbmcpLnRvTG93ZXJDYXNlKCkpIHtcbiAgICBjYXNlICdoZXgnOlxuICAgIGNhc2UgJ3V0ZjgnOlxuICAgIGNhc2UgJ3V0Zi04JzpcbiAgICBjYXNlICdhc2NpaSc6XG4gICAgY2FzZSAnbGF0aW4xJzpcbiAgICBjYXNlICdiaW5hcnknOlxuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndWNzLTInOlxuICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgIHJldHVybiB0cnVlXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmYWxzZVxuICB9XG59XG5cbkJ1ZmZlci5jb25jYXQgPSBmdW5jdGlvbiBjb25jYXQgKGxpc3QsIGxlbmd0aCkge1xuICBpZiAoIUFycmF5LmlzQXJyYXkobGlzdCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RcIiBhcmd1bWVudCBtdXN0IGJlIGFuIEFycmF5IG9mIEJ1ZmZlcnMnKVxuICB9XG5cbiAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKVxuICB9XG5cbiAgbGV0IGlcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgbGVuZ3RoID0gMFxuICAgIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgICBsZW5ndGggKz0gbGlzdFtpXS5sZW5ndGhcbiAgICB9XG4gIH1cblxuICBjb25zdCBidWZmZXIgPSBCdWZmZXIuYWxsb2NVbnNhZmUobGVuZ3RoKVxuICBsZXQgcG9zID0gMFxuICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgIGxldCBidWYgPSBsaXN0W2ldXG4gICAgaWYgKGlzSW5zdGFuY2UoYnVmLCBVaW50OEFycmF5KSkge1xuICAgICAgaWYgKHBvcyArIGJ1Zi5sZW5ndGggPiBidWZmZXIubGVuZ3RoKSB7XG4gICAgICAgIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIGJ1ZiA9IEJ1ZmZlci5mcm9tKGJ1ZilcbiAgICAgICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBVaW50OEFycmF5LnByb3RvdHlwZS5zZXQuY2FsbChcbiAgICAgICAgICBidWZmZXIsXG4gICAgICAgICAgYnVmLFxuICAgICAgICAgIHBvc1xuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGJ1ZikpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdFwiIGFyZ3VtZW50IG11c3QgYmUgYW4gQXJyYXkgb2YgQnVmZmVycycpXG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1Zi5jb3B5KGJ1ZmZlciwgcG9zKVxuICAgIH1cbiAgICBwb3MgKz0gYnVmLmxlbmd0aFxuICB9XG4gIHJldHVybiBidWZmZXJcbn1cblxuZnVuY3Rpb24gYnl0ZUxlbmd0aCAoc3RyaW5nLCBlbmNvZGluZykge1xuICBpZiAoQnVmZmVyLmlzQnVmZmVyKHN0cmluZykpIHtcbiAgICByZXR1cm4gc3RyaW5nLmxlbmd0aFxuICB9XG4gIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcoc3RyaW5nKSB8fCBpc0luc3RhbmNlKHN0cmluZywgQXJyYXlCdWZmZXIpKSB7XG4gICAgcmV0dXJuIHN0cmluZy5ieXRlTGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBzdHJpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdUaGUgXCJzdHJpbmdcIiBhcmd1bWVudCBtdXN0IGJlIG9uZSBvZiB0eXBlIHN0cmluZywgQnVmZmVyLCBvciBBcnJheUJ1ZmZlci4gJyArXG4gICAgICAnUmVjZWl2ZWQgdHlwZSAnICsgdHlwZW9mIHN0cmluZ1xuICAgIClcbiAgfVxuXG4gIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGhcbiAgY29uc3QgbXVzdE1hdGNoID0gKGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSA9PT0gdHJ1ZSlcbiAgaWYgKCFtdXN0TWF0Y2ggJiYgbGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICBsZXQgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGhcbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiBsZW4gKiAyXG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gbGVuID4+PiAxXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICByZXR1cm4gYmFzZTY0VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB7XG4gICAgICAgICAgcmV0dXJuIG11c3RNYXRjaCA/IC0xIDogdXRmOFRvQnl0ZXMoc3RyaW5nKS5sZW5ndGggLy8gYXNzdW1lIHV0ZjhcbiAgICAgICAgfVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJjaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgcHJvcGVydHkgaXMgdXNlZCBieSBgQnVmZmVyLmlzQnVmZmVyYCAoYW5kIHRoZSBgaXMtYnVmZmVyYCBucG0gcGFja2FnZSlcbi8vIHRvIGRldGVjdCBhIEJ1ZmZlciBpbnN0YW5jZS4gSXQncyBub3QgcG9zc2libGUgdG8gdXNlIGBpbnN0YW5jZW9mIEJ1ZmZlcmBcbi8vIHJlbGlhYmx5IGluIGEgYnJvd3NlcmlmeSBjb250ZXh0IGJlY2F1c2UgdGhlcmUgY291bGQgYmUgbXVsdGlwbGUgZGlmZmVyZW50XG4vLyBjb3BpZXMgb2YgdGhlICdidWZmZXInIHBhY2thZ2UgaW4gdXNlLiBUaGlzIG1ldGhvZCB3b3JrcyBldmVuIGZvciBCdWZmZXJcbi8vIGluc3RhbmNlcyB0aGF0IHdlcmUgY3JlYXRlZCBmcm9tIGFub3RoZXIgY29weSBvZiB0aGUgYGJ1ZmZlcmAgcGFja2FnZS5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2Zlcm9zcy9idWZmZXIvaXNzdWVzLzE1NFxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgY29uc3QgaSA9IGJbbl1cbiAgYltuXSA9IGJbbV1cbiAgYlttXSA9IGlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMTYgPSBmdW5jdGlvbiBzd2FwMTYgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgMiAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMTYtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gMikge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDEpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwMzIgPSBmdW5jdGlvbiBzd2FwMzIgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICBjb25zdCBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgOCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgNjQtYml0cycpXG4gIH1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkgKz0gOCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDcpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDYpXG4gICAgc3dhcCh0aGlzLCBpICsgMiwgaSArIDUpXG4gICAgc3dhcCh0aGlzLCBpICsgMywgaSArIDQpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nICgpIHtcbiAgY29uc3QgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9Mb2NhbGVTdHJpbmcgPSBCdWZmZXIucHJvdG90eXBlLnRvU3RyaW5nXG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBcmd1bWVudCBtdXN0IGJlIGEgQnVmZmVyJylcbiAgaWYgKHRoaXMgPT09IGIpIHJldHVybiB0cnVlXG4gIHJldHVybiBCdWZmZXIuY29tcGFyZSh0aGlzLCBiKSA9PT0gMFxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluc3BlY3QgPSBmdW5jdGlvbiBpbnNwZWN0ICgpIHtcbiAgbGV0IHN0ciA9ICcnXG4gIGNvbnN0IG1heCA9IGV4cG9ydHMuSU5TUEVDVF9NQVhfQllURVNcbiAgc3RyID0gdGhpcy50b1N0cmluZygnaGV4JywgMCwgbWF4KS5yZXBsYWNlKC8oLnsyfSkvZywgJyQxICcpLnRyaW0oKVxuICBpZiAodGhpcy5sZW5ndGggPiBtYXgpIHN0ciArPSAnIC4uLiAnXG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5pZiAoY3VzdG9tSW5zcGVjdFN5bWJvbCkge1xuICBCdWZmZXIucHJvdG90eXBlW2N1c3RvbUluc3BlY3RTeW1ib2xdID0gQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmIChpc0luc3RhbmNlKHRhcmdldCwgVWludDhBcnJheSkpIHtcbiAgICB0YXJnZXQgPSBCdWZmZXIuZnJvbSh0YXJnZXQsIHRhcmdldC5vZmZzZXQsIHRhcmdldC5ieXRlTGVuZ3RoKVxuICB9XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ1RoZSBcInRhcmdldFwiIGFyZ3VtZW50IG11c3QgYmUgb25lIG9mIHR5cGUgQnVmZmVyIG9yIFVpbnQ4QXJyYXkuICcgK1xuICAgICAgJ1JlY2VpdmVkIHR5cGUgJyArICh0eXBlb2YgdGFyZ2V0KVxuICAgIClcbiAgfVxuXG4gIGlmIChzdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgaWYgKGVuZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZW5kID0gdGFyZ2V0ID8gdGFyZ2V0Lmxlbmd0aCA6IDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzU3RhcnQgPSAwXG4gIH1cbiAgaWYgKHRoaXNFbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIHRoaXNFbmQgPSB0aGlzLmxlbmd0aFxuICB9XG5cbiAgaWYgKHN0YXJ0IDwgMCB8fCBlbmQgPiB0YXJnZXQubGVuZ3RoIHx8IHRoaXNTdGFydCA8IDAgfHwgdGhpc0VuZCA+IHRoaXMubGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ291dCBvZiByYW5nZSBpbmRleCcpXG4gIH1cblxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQgJiYgc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDBcbiAgfVxuICBpZiAodGhpc1N0YXJ0ID49IHRoaXNFbmQpIHtcbiAgICByZXR1cm4gLTFcbiAgfVxuICBpZiAoc3RhcnQgPj0gZW5kKSB7XG4gICAgcmV0dXJuIDFcbiAgfVxuXG4gIHN0YXJ0ID4+Pj0gMFxuICBlbmQgPj4+PSAwXG4gIHRoaXNTdGFydCA+Pj49IDBcbiAgdGhpc0VuZCA+Pj49IDBcblxuICBpZiAodGhpcyA9PT0gdGFyZ2V0KSByZXR1cm4gMFxuXG4gIGxldCB4ID0gdGhpc0VuZCAtIHRoaXNTdGFydFxuICBsZXQgeSA9IGVuZCAtIHN0YXJ0XG4gIGNvbnN0IGxlbiA9IE1hdGgubWluKHgsIHkpXG5cbiAgY29uc3QgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgY29uc3QgdGFyZ2V0Q29weSA9IHRhcmdldC5zbGljZShzdGFydCwgZW5kKVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICBpZiAodGhpc0NvcHlbaV0gIT09IHRhcmdldENvcHlbaV0pIHtcbiAgICAgIHggPSB0aGlzQ29weVtpXVxuICAgICAgeSA9IHRhcmdldENvcHlbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG4vLyBGaW5kcyBlaXRoZXIgdGhlIGZpcnN0IGluZGV4IG9mIGB2YWxgIGluIGBidWZmZXJgIGF0IG9mZnNldCA+PSBgYnl0ZU9mZnNldGAsXG4vLyBPUiB0aGUgbGFzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPD0gYGJ5dGVPZmZzZXRgLlxuLy9cbi8vIEFyZ3VtZW50czpcbi8vIC0gYnVmZmVyIC0gYSBCdWZmZXIgdG8gc2VhcmNoXG4vLyAtIHZhbCAtIGEgc3RyaW5nLCBCdWZmZXIsIG9yIG51bWJlclxuLy8gLSBieXRlT2Zmc2V0IC0gYW4gaW5kZXggaW50byBgYnVmZmVyYDsgd2lsbCBiZSBjbGFtcGVkIHRvIGFuIGludDMyXG4vLyAtIGVuY29kaW5nIC0gYW4gb3B0aW9uYWwgZW5jb2RpbmcsIHJlbGV2YW50IGlzIHZhbCBpcyBhIHN0cmluZ1xuLy8gLSBkaXIgLSB0cnVlIGZvciBpbmRleE9mLCBmYWxzZSBmb3IgbGFzdEluZGV4T2ZcbmZ1bmN0aW9uIGJpZGlyZWN0aW9uYWxJbmRleE9mIChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcikge1xuICAvLyBFbXB0eSBidWZmZXIgbWVhbnMgbm8gbWF0Y2hcbiAgaWYgKGJ1ZmZlci5sZW5ndGggPT09IDApIHJldHVybiAtMVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0XG4gIGlmICh0eXBlb2YgYnl0ZU9mZnNldCA9PT0gJ3N0cmluZycpIHtcbiAgICBlbmNvZGluZyA9IGJ5dGVPZmZzZXRcbiAgICBieXRlT2Zmc2V0ID0gMFxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPiAweDdmZmZmZmZmKSB7XG4gICAgYnl0ZU9mZnNldCA9IDB4N2ZmZmZmZmZcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgLTB4ODAwMDAwMDApIHtcbiAgICBieXRlT2Zmc2V0ID0gLTB4ODAwMDAwMDBcbiAgfVxuICBieXRlT2Zmc2V0ID0gK2J5dGVPZmZzZXQgLy8gQ29lcmNlIHRvIE51bWJlci5cbiAgaWYgKG51bWJlcklzTmFOKGJ5dGVPZmZzZXQpKSB7XG4gICAgLy8gYnl0ZU9mZnNldDogaXQgaXQncyB1bmRlZmluZWQsIG51bGwsIE5hTiwgXCJmb29cIiwgZXRjLCBzZWFyY2ggd2hvbGUgYnVmZmVyXG4gICAgYnl0ZU9mZnNldCA9IGRpciA/IDAgOiAoYnVmZmVyLmxlbmd0aCAtIDEpXG4gIH1cblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldDogbmVnYXRpdmUgb2Zmc2V0cyBzdGFydCBmcm9tIHRoZSBlbmQgb2YgdGhlIGJ1ZmZlclxuICBpZiAoYnl0ZU9mZnNldCA8IDApIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoICsgYnl0ZU9mZnNldFxuICBpZiAoYnl0ZU9mZnNldCA+PSBidWZmZXIubGVuZ3RoKSB7XG4gICAgaWYgKGRpcikgcmV0dXJuIC0xXG4gICAgZWxzZSBieXRlT2Zmc2V0ID0gYnVmZmVyLmxlbmd0aCAtIDFcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0IDwgMCkge1xuICAgIGlmIChkaXIpIGJ5dGVPZmZzZXQgPSAwXG4gICAgZWxzZSByZXR1cm4gLTFcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSB2YWxcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsID0gQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgfVxuXG4gIC8vIEZpbmFsbHksIHNlYXJjaCBlaXRoZXIgaW5kZXhPZiAoaWYgZGlyIGlzIHRydWUpIG9yIGxhc3RJbmRleE9mXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAodHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgW3ZhbF0sIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCd2YWwgbXVzdCBiZSBzdHJpbmcsIG51bWJlciBvciBCdWZmZXInKVxufVxuXG5mdW5jdGlvbiBhcnJheUluZGV4T2YgKGFyciwgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgZGlyKSB7XG4gIGxldCBpbmRleFNpemUgPSAxXG4gIGxldCBhcnJMZW5ndGggPSBhcnIubGVuZ3RoXG4gIGxldCB2YWxMZW5ndGggPSB2YWwubGVuZ3RoXG5cbiAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9IFN0cmluZyhlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgIGlmIChlbmNvZGluZyA9PT0gJ3VjczInIHx8IGVuY29kaW5nID09PSAndWNzLTInIHx8XG4gICAgICAgIGVuY29kaW5nID09PSAndXRmMTZsZScgfHwgZW5jb2RpbmcgPT09ICd1dGYtMTZsZScpIHtcbiAgICAgIGlmIChhcnIubGVuZ3RoIDwgMiB8fCB2YWwubGVuZ3RoIDwgMikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH1cbiAgICAgIGluZGV4U2l6ZSA9IDJcbiAgICAgIGFyckxlbmd0aCAvPSAyXG4gICAgICB2YWxMZW5ndGggLz0gMlxuICAgICAgYnl0ZU9mZnNldCAvPSAyXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVhZCAoYnVmLCBpKSB7XG4gICAgaWYgKGluZGV4U2l6ZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGJ1ZltpXVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gYnVmLnJlYWRVSW50MTZCRShpICogaW5kZXhTaXplKVxuICAgIH1cbiAgfVxuXG4gIGxldCBpXG4gIGlmIChkaXIpIHtcbiAgICBsZXQgZm91bmRJbmRleCA9IC0xXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA8IGFyckxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVhZChhcnIsIGkpID09PSByZWFkKHZhbCwgZm91bmRJbmRleCA9PT0gLTEgPyAwIDogaSAtIGZvdW5kSW5kZXgpKSB7XG4gICAgICAgIGlmIChmb3VuZEluZGV4ID09PSAtMSkgZm91bmRJbmRleCA9IGlcbiAgICAgICAgaWYgKGkgLSBmb3VuZEluZGV4ICsgMSA9PT0gdmFsTGVuZ3RoKSByZXR1cm4gZm91bmRJbmRleCAqIGluZGV4U2l6ZVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggIT09IC0xKSBpIC09IGkgLSBmb3VuZEluZGV4XG4gICAgICAgIGZvdW5kSW5kZXggPSAtMVxuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBpZiAoYnl0ZU9mZnNldCArIHZhbExlbmd0aCA+IGFyckxlbmd0aCkgYnl0ZU9mZnNldCA9IGFyckxlbmd0aCAtIHZhbExlbmd0aFxuICAgIGZvciAoaSA9IGJ5dGVPZmZzZXQ7IGkgPj0gMDsgaS0tKSB7XG4gICAgICBsZXQgZm91bmQgPSB0cnVlXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZhbExlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChyZWFkKGFyciwgaSArIGopICE9PSByZWFkKHZhbCwgaikpIHtcbiAgICAgICAgICBmb3VuZCA9IGZhbHNlXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGZvdW5kKSByZXR1cm4gaVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluY2x1ZGVzID0gZnVuY3Rpb24gaW5jbHVkZXMgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIHRoaXMuaW5kZXhPZih2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSAhPT0gLTFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbmRleE9mID0gZnVuY3Rpb24gaW5kZXhPZiAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gYmlkaXJlY3Rpb25hbEluZGV4T2YodGhpcywgdmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZywgdHJ1ZSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5sYXN0SW5kZXhPZiA9IGZ1bmN0aW9uIGxhc3RJbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBmYWxzZSlcbn1cblxuZnVuY3Rpb24gaGV4V3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICBvZmZzZXQgPSBOdW1iZXIob2Zmc2V0KSB8fCAwXG4gIGNvbnN0IHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IHN0ckxlbiA9IHN0cmluZy5sZW5ndGhcblxuICBpZiAobGVuZ3RoID4gc3RyTGVuIC8gMikge1xuICAgIGxlbmd0aCA9IHN0ckxlbiAvIDJcbiAgfVxuICBsZXQgaVxuICBmb3IgKGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBjb25zdCBwYXJzZWQgPSBwYXJzZUludChzdHJpbmcuc3Vic3RyKGkgKiAyLCAyKSwgMTYpXG4gICAgaWYgKG51bWJlcklzTmFOKHBhcnNlZCkpIHJldHVybiBpXG4gICAgYnVmW29mZnNldCArIGldID0gcGFyc2VkXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gdXRmOFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmOFRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gYXNjaWlXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGFzY2lpVG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiBiYXNlNjRXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKGJhc2U2NFRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gdWNzMldyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIodXRmMTZsZVRvQnl0ZXMoc3RyaW5nLCBidWYubGVuZ3RoIC0gb2Zmc2V0KSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uIHdyaXRlIChzdHJpbmcsIG9mZnNldCwgbGVuZ3RoLCBlbmNvZGluZykge1xuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nKVxuICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBlbmNvZGluZyA9ICd1dGY4J1xuICAgIGxlbmd0aCA9IHRoaXMubGVuZ3RoXG4gICAgb2Zmc2V0ID0gMFxuICAvLyBCdWZmZXIjd3JpdGUoc3RyaW5nLCBlbmNvZGluZylcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb2Zmc2V0ID09PSAnc3RyaW5nJykge1xuICAgIGVuY29kaW5nID0gb2Zmc2V0XG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIG9mZnNldFssIGxlbmd0aF1bLCBlbmNvZGluZ10pXG4gIH0gZWxzZSBpZiAoaXNGaW5pdGUob2Zmc2V0KSkge1xuICAgIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggPj4+IDBcbiAgICAgIGlmIChlbmNvZGluZyA9PT0gdW5kZWZpbmVkKSBlbmNvZGluZyA9ICd1dGY4J1xuICAgIH0gZWxzZSB7XG4gICAgICBlbmNvZGluZyA9IGxlbmd0aFxuICAgICAgbGVuZ3RoID0gdW5kZWZpbmVkXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICBjb25zdCByZW1haW5pbmcgPSB0aGlzLmxlbmd0aCAtIG9mZnNldFxuICBpZiAobGVuZ3RoID09PSB1bmRlZmluZWQgfHwgbGVuZ3RoID4gcmVtYWluaW5nKSBsZW5ndGggPSByZW1haW5pbmdcblxuICBpZiAoKHN0cmluZy5sZW5ndGggPiAwICYmIChsZW5ndGggPCAwIHx8IG9mZnNldCA8IDApKSB8fCBvZmZzZXQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBdHRlbXB0IHRvIHdyaXRlIG91dHNpZGUgYnVmZmVyIGJvdW5kcycpXG4gIH1cblxuICBpZiAoIWVuY29kaW5nKSBlbmNvZGluZyA9ICd1dGY4J1xuXG4gIGxldCBsb3dlcmVkQ2FzZSA9IGZhbHNlXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKGVuY29kaW5nKSB7XG4gICAgICBjYXNlICdoZXgnOlxuICAgICAgICByZXR1cm4gaGV4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndXRmOCc6XG4gICAgICBjYXNlICd1dGYtOCc6XG4gICAgICAgIHJldHVybiB1dGY4V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBhc2NpaVdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIC8vIFdhcm5pbmc6IG1heExlbmd0aCBub3QgdGFrZW4gaW50byBhY2NvdW50IGluIGJhc2U2NFdyaXRlXG4gICAgICAgIHJldHVybiBiYXNlNjRXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICd1Y3MyJzpcbiAgICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICAgIGNhc2UgJ3V0ZjE2bGUnOlxuICAgICAgY2FzZSAndXRmLTE2bGUnOlxuICAgICAgICByZXR1cm4gdWNzMldyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIGlmIChsb3dlcmVkQ2FzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnRvSlNPTiA9IGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogJ0J1ZmZlcicsXG4gICAgZGF0YTogQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwodGhpcy5fYXJyIHx8IHRoaXMsIDApXG4gIH1cbn1cblxuZnVuY3Rpb24gYmFzZTY0U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBpZiAoc3RhcnQgPT09IDAgJiYgZW5kID09PSBidWYubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1ZilcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYmFzZTY0LmZyb21CeXRlQXJyYXkoYnVmLnNsaWNlKHN0YXJ0LCBlbmQpKVxuICB9XG59XG5cbmZ1bmN0aW9uIHV0ZjhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcbiAgY29uc3QgcmVzID0gW11cblxuICBsZXQgaSA9IHN0YXJ0XG4gIHdoaWxlIChpIDwgZW5kKSB7XG4gICAgY29uc3QgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgbGV0IGNvZGVQb2ludCA9IG51bGxcbiAgICBsZXQgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKVxuICAgICAgPyA0XG4gICAgICA6IChmaXJzdEJ5dGUgPiAweERGKVxuICAgICAgICAgID8gM1xuICAgICAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4QkYpXG4gICAgICAgICAgICAgID8gMlxuICAgICAgICAgICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIGxldCBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbmNvbnN0IE1BWF9BUkdVTUVOVFNfTEVOR1RIID0gMHgxMDAwXG5cbmZ1bmN0aW9uIGRlY29kZUNvZGVQb2ludHNBcnJheSAoY29kZVBvaW50cykge1xuICBjb25zdCBsZW4gPSBjb2RlUG9pbnRzLmxlbmd0aFxuICBpZiAobGVuIDw9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKSB7XG4gICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkoU3RyaW5nLCBjb2RlUG9pbnRzKSAvLyBhdm9pZCBleHRyYSBzbGljZSgpXG4gIH1cblxuICAvLyBEZWNvZGUgaW4gY2h1bmtzIHRvIGF2b2lkIFwiY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCIuXG4gIGxldCByZXMgPSAnJ1xuICBsZXQgaSA9IDBcbiAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICByZXMgKz0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShcbiAgICAgIFN0cmluZyxcbiAgICAgIGNvZGVQb2ludHMuc2xpY2UoaSwgaSArPSBNQVhfQVJHVU1FTlRTX0xFTkdUSClcbiAgICApXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBhc2NpaVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgbGV0IHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSAmIDB4N0YpXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBsYXRpbjFTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGxldCByZXQgPSAnJ1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG5cbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICByZXQgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShidWZbaV0pXG4gIH1cbiAgcmV0dXJuIHJldFxufVxuXG5mdW5jdGlvbiBoZXhTbGljZSAoYnVmLCBzdGFydCwgZW5kKSB7XG4gIGNvbnN0IGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICBsZXQgb3V0ID0gJydcbiAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gaGV4U2xpY2VMb29rdXBUYWJsZVtidWZbaV1dXG4gIH1cbiAgcmV0dXJuIG91dFxufVxuXG5mdW5jdGlvbiB1dGYxNmxlU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBjb25zdCBieXRlcyA9IGJ1Zi5zbGljZShzdGFydCwgZW5kKVxuICBsZXQgcmVzID0gJydcbiAgLy8gSWYgYnl0ZXMubGVuZ3RoIGlzIG9kZCwgdGhlIGxhc3QgOCBiaXRzIG11c3QgYmUgaWdub3JlZCAoc2FtZSBhcyBub2RlLmpzKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aCAtIDE7IGkgKz0gMikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ5dGVzW2ldICsgKGJ5dGVzW2kgKyAxXSAqIDI1NikpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgY29uc3QgbGVuID0gdGhpcy5sZW5ndGhcbiAgc3RhcnQgPSB+fnN0YXJ0XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuIDogfn5lbmRcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgKz0gbGVuXG4gICAgaWYgKHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIH0gZWxzZSBpZiAoc3RhcnQgPiBsZW4pIHtcbiAgICBzdGFydCA9IGxlblxuICB9XG5cbiAgaWYgKGVuZCA8IDApIHtcbiAgICBlbmQgKz0gbGVuXG4gICAgaWYgKGVuZCA8IDApIGVuZCA9IDBcbiAgfSBlbHNlIGlmIChlbmQgPiBsZW4pIHtcbiAgICBlbmQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICBjb25zdCBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gIC8vIFJldHVybiBhbiBhdWdtZW50ZWQgYFVpbnQ4QXJyYXlgIGluc3RhbmNlXG4gIE9iamVjdC5zZXRQcm90b3R5cGVPZihuZXdCdWYsIEJ1ZmZlci5wcm90b3R5cGUpXG5cbiAgcmV0dXJuIG5ld0J1ZlxufVxuXG4vKlxuICogTmVlZCB0byBtYWtlIHN1cmUgdGhhdCBidWZmZXIgaXNuJ3QgdHJ5aW5nIHRvIHdyaXRlIG91dCBvZiBib3VuZHMuXG4gKi9cbmZ1bmN0aW9uIGNoZWNrT2Zmc2V0IChvZmZzZXQsIGV4dCwgbGVuZ3RoKSB7XG4gIGlmICgob2Zmc2V0ICUgMSkgIT09IDAgfHwgb2Zmc2V0IDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ29mZnNldCBpcyBub3QgdWludCcpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBsZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdUcnlpbmcgdG8gYWNjZXNzIGJleW9uZCBidWZmZXIgbGVuZ3RoJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludExFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0XVxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50QkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludEJFID0gZnVuY3Rpb24gcmVhZFVJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICBsZXQgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIGxldCBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDggPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMSwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDE2TEUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2TEUgPSBmdW5jdGlvbiByZWFkVUludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiB0aGlzW29mZnNldF0gfCAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVpbnQzMkxFID1cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAoKHRoaXNbb2Zmc2V0XSkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgMTYpKSArXG4gICAgICAodGhpc1tvZmZzZXQgKyAzXSAqIDB4MTAwMDAwMClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVWludDMyQkUgPVxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDMyQkUgPSBmdW5jdGlvbiByZWFkVUludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gKiAweDEwMDAwMDApICtcbiAgICAoKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgdGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnVUludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ1VJbnQ2NExFIChvZmZzZXQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGNvbnN0IGZpcnN0ID0gdGhpc1tvZmZzZXRdXG4gIGNvbnN0IGxhc3QgPSB0aGlzW29mZnNldCArIDddXG4gIGlmIChmaXJzdCA9PT0gdW5kZWZpbmVkIHx8IGxhc3QgPT09IHVuZGVmaW5lZCkge1xuICAgIGJvdW5kc0Vycm9yKG9mZnNldCwgdGhpcy5sZW5ndGggLSA4KVxuICB9XG5cbiAgY29uc3QgbG8gPSBmaXJzdCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDI0XG5cbiAgY29uc3QgaGkgPSB0aGlzWysrb2Zmc2V0XSArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgbGFzdCAqIDIgKiogMjRcblxuICByZXR1cm4gQmlnSW50KGxvKSArIChCaWdJbnQoaGkpIDw8IEJpZ0ludCgzMikpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRCaWdVSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnVUludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCBoaSA9IGZpcnN0ICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgdGhpc1srK29mZnNldF1cblxuICBjb25zdCBsbyA9IHRoaXNbKytvZmZzZXRdICogMiAqKiAyNCArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDE2ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogOCArXG4gICAgbGFzdFxuXG4gIHJldHVybiAoQmlnSW50KGhpKSA8PCBCaWdJbnQoMzIpKSArIEJpZ0ludChsbylcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIGJ5dGVMZW5ndGgsIHRoaXMubGVuZ3RoKVxuXG4gIGxldCB2YWwgPSB0aGlzW29mZnNldF1cbiAgbGV0IG11bCA9IDFcbiAgbGV0IGkgPSAwXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgaV0gKiBtdWxcbiAgfVxuICBtdWwgKj0gMHg4MFxuXG4gIGlmICh2YWwgPj0gbXVsKSB2YWwgLT0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGgpXG5cbiAgcmV0dXJuIHZhbFxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnRCRSA9IGZ1bmN0aW9uIHJlYWRJbnRCRSAob2Zmc2V0LCBieXRlTGVuZ3RoLCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICBsZXQgaSA9IGJ5dGVMZW5ndGhcbiAgbGV0IG11bCA9IDFcbiAgbGV0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgLS1pXVxuICB3aGlsZSAoaSA+IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyAtLWldICogbXVsXG4gIH1cbiAgbXVsICo9IDB4ODBcblxuICBpZiAodmFsID49IG11bCkgdmFsIC09IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50OCA9IGZ1bmN0aW9uIHJlYWRJbnQ4IChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICBjb25zdCB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA0LCB0aGlzLmxlbmd0aClcblxuICByZXR1cm4gKHRoaXNbb2Zmc2V0XSkgfFxuICAgICh0aGlzW29mZnNldCArIDFdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDNdIDw8IDI0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQzMkJFID0gZnVuY3Rpb24gcmVhZEludDMyQkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgMjQpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCAxNikgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDgpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAzXSlcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkQmlnSW50NjRMRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiByZWFkQmlnSW50NjRMRSAob2Zmc2V0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICB2YWxpZGF0ZU51bWJlcihvZmZzZXQsICdvZmZzZXQnKVxuICBjb25zdCBmaXJzdCA9IHRoaXNbb2Zmc2V0XVxuICBjb25zdCBsYXN0ID0gdGhpc1tvZmZzZXQgKyA3XVxuICBpZiAoZmlyc3QgPT09IHVuZGVmaW5lZCB8fCBsYXN0ID09PSB1bmRlZmluZWQpIHtcbiAgICBib3VuZHNFcnJvcihvZmZzZXQsIHRoaXMubGVuZ3RoIC0gOClcbiAgfVxuXG4gIGNvbnN0IHZhbCA9IHRoaXNbb2Zmc2V0ICsgNF0gK1xuICAgIHRoaXNbb2Zmc2V0ICsgNV0gKiAyICoqIDggK1xuICAgIHRoaXNbb2Zmc2V0ICsgNl0gKiAyICoqIDE2ICtcbiAgICAobGFzdCA8PCAyNCkgLy8gT3ZlcmZsb3dcblxuICByZXR1cm4gKEJpZ0ludCh2YWwpIDw8IEJpZ0ludCgzMikpICtcbiAgICBCaWdJbnQoZmlyc3QgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAyNClcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEJpZ0ludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gcmVhZEJpZ0ludDY0QkUgKG9mZnNldCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgdmFsaWRhdGVOdW1iZXIob2Zmc2V0LCAnb2Zmc2V0JylcbiAgY29uc3QgZmlyc3QgPSB0aGlzW29mZnNldF1cbiAgY29uc3QgbGFzdCA9IHRoaXNbb2Zmc2V0ICsgN11cbiAgaWYgKGZpcnN0ID09PSB1bmRlZmluZWQgfHwgbGFzdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCB0aGlzLmxlbmd0aCAtIDgpXG4gIH1cblxuICBjb25zdCB2YWwgPSAoZmlyc3QgPDwgMjQpICsgLy8gT3ZlcmZsb3dcbiAgICB0aGlzWysrb2Zmc2V0XSAqIDIgKiogMTYgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiA4ICtcbiAgICB0aGlzWysrb2Zmc2V0XVxuXG4gIHJldHVybiAoQmlnSW50KHZhbCkgPDwgQmlnSW50KDMyKSkgK1xuICAgIEJpZ0ludCh0aGlzWysrb2Zmc2V0XSAqIDIgKiogMjQgK1xuICAgIHRoaXNbKytvZmZzZXRdICogMiAqKiAxNiArXG4gICAgdGhpc1srK29mZnNldF0gKiAyICoqIDggK1xuICAgIGxhc3QpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRGbG9hdExFID0gZnVuY3Rpb24gcmVhZEZsb2F0TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCB0cnVlLCAyMywgNClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkRmxvYXRCRSA9IGZ1bmN0aW9uIHJlYWRGbG9hdEJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIHRydWUsIDUyLCA4KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVCRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCA4LCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIGllZWU3NTQucmVhZCh0aGlzLCBvZmZzZXQsIGZhbHNlLCA1MiwgOClcbn1cblxuZnVuY3Rpb24gY2hlY2tJbnQgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgZXh0LCBtYXgsIG1pbikge1xuICBpZiAoIUJ1ZmZlci5pc0J1ZmZlcihidWYpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImJ1ZmZlclwiIGFyZ3VtZW50IG11c3QgYmUgYSBCdWZmZXIgaW5zdGFuY2UnKVxuICBpZiAodmFsdWUgPiBtYXggfHwgdmFsdWUgPCBtaW4pIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgaXMgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnRMRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICBsZXQgbXVsID0gMVxuICBsZXQgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludEJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjb25zdCBtYXhCeXRlcyA9IE1hdGgucG93KDIsIDggKiBieXRlTGVuZ3RoKSAtIDFcbiAgICBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBieXRlTGVuZ3RoLCBtYXhCeXRlcywgMClcbiAgfVxuXG4gIGxldCBpID0gYnl0ZUxlbmd0aCAtIDFcbiAgbGV0IG11bCA9IDFcbiAgdGhpc1tvZmZzZXQgKyBpXSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoLS1pID49IDAgJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB0aGlzW29mZnNldCArIGldID0gKHZhbHVlIC8gbXVsKSAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50OCA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHhmZiwgMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQxNkxFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVaW50MTZCRSA9XG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZVVJbnQxNkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMlxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVWludDMyTEUgPVxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4ZmZmZmZmZmYsIDApXG4gIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVpbnQzMkJFID1cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIHdydEJpZ1VJbnQ2NExFIChidWYsIHZhbHVlLCBvZmZzZXQsIG1pbiwgbWF4KSB7XG4gIGNoZWNrSW50QkkodmFsdWUsIG1pbiwgbWF4LCBidWYsIG9mZnNldCwgNylcblxuICBsZXQgbG8gPSBOdW1iZXIodmFsdWUgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0KytdID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBsb1xuICBsZXQgaGkgPSBOdW1iZXIodmFsdWUgPj4gQmlnSW50KDMyKSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0KytdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXQrK10gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCsrXSA9IGhpXG4gIHJldHVybiBvZmZzZXRcbn1cblxuZnVuY3Rpb24gd3J0QmlnVUludDY0QkUgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbWluLCBtYXgpIHtcbiAgY2hlY2tJbnRCSSh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCA3KVxuXG4gIGxldCBsbyA9IE51bWJlcih2YWx1ZSAmIEJpZ0ludCgweGZmZmZmZmZmKSlcbiAgYnVmW29mZnNldCArIDddID0gbG9cbiAgbG8gPSBsbyA+PiA4XG4gIGJ1ZltvZmZzZXQgKyA2XSA9IGxvXG4gIGxvID0gbG8gPj4gOFxuICBidWZbb2Zmc2V0ICsgNV0gPSBsb1xuICBsbyA9IGxvID4+IDhcbiAgYnVmW29mZnNldCArIDRdID0gbG9cbiAgbGV0IGhpID0gTnVtYmVyKHZhbHVlID4+IEJpZ0ludCgzMikgJiBCaWdJbnQoMHhmZmZmZmZmZikpXG4gIGJ1ZltvZmZzZXQgKyAzXSA9IGhpXG4gIGhpID0gaGkgPj4gOFxuICBidWZbb2Zmc2V0ICsgMl0gPSBoaVxuICBoaSA9IGhpID4+IDhcbiAgYnVmW29mZnNldCArIDFdID0gaGlcbiAgaGkgPSBoaSA+PiA4XG4gIGJ1ZltvZmZzZXRdID0gaGlcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ1VJbnQ2NExFID0gZGVmaW5lQmlnSW50TWV0aG9kKGZ1bmN0aW9uIHdyaXRlQmlnVUludDY0TEUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRMRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBCaWdJbnQoMCksIEJpZ0ludCgnMHhmZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnVUludDY0QkUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdVSW50NjRCRSAodmFsdWUsIG9mZnNldCA9IDApIHtcbiAgcmV0dXJuIHdydEJpZ1VJbnQ2NEJFKHRoaXMsIHZhbHVlLCBvZmZzZXQsIEJpZ0ludCgwKSwgQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRMRSA9IGZ1bmN0aW9uIHdyaXRlSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSAwXG4gIGxldCBtdWwgPSAxXG4gIGxldCBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0XSA9IHZhbHVlICYgMHhGRlxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSAtIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnRCRSA9IGZ1bmN0aW9uIHdyaXRlSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY29uc3QgbGltaXQgPSBNYXRoLnBvdygyLCAoOCAqIGJ5dGVMZW5ndGgpIC0gMSlcblxuICAgIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIGxpbWl0IC0gMSwgLWxpbWl0KVxuICB9XG5cbiAgbGV0IGkgPSBieXRlTGVuZ3RoIC0gMVxuICBsZXQgbXVsID0gMVxuICBsZXQgc3ViID0gMFxuICB0aGlzW29mZnNldCArIGldID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgtLWkgPj0gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIGlmICh2YWx1ZSA8IDAgJiYgc3ViID09PSAwICYmIHRoaXNbb2Zmc2V0ICsgaSArIDFdICE9PSAwKSB7XG4gICAgICBzdWIgPSAxXG4gICAgfVxuICAgIHRoaXNbb2Zmc2V0ICsgaV0gPSAoKHZhbHVlIC8gbXVsKSA+PiAwKSAtIHN1YiAmIDB4RkZcbiAgfVxuXG4gIHJldHVybiBvZmZzZXQgKyBieXRlTGVuZ3RoXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQ4ID0gZnVuY3Rpb24gd3JpdGVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZiArIHZhbHVlICsgMVxuICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICByZXR1cm4gb2Zmc2V0ICsgMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlSW50MTZMRSA9IGZ1bmN0aW9uIHdyaXRlSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweDdmZmYsIC0weDgwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gOClcbiAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkxFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgPj4+IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDgpXG4gIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyQkUgPSBmdW5jdGlvbiB3cml0ZUludDMyQkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweDdmZmZmZmZmLCAtMHg4MDAwMDAwMClcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmZmZmZmZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSA+Pj4gMjQpXG4gIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUJpZ0ludDY0TEUgPSBkZWZpbmVCaWdJbnRNZXRob2QoZnVuY3Rpb24gd3JpdGVCaWdJbnQ2NExFICh2YWx1ZSwgb2Zmc2V0ID0gMCkge1xuICByZXR1cm4gd3J0QmlnVUludDY0TEUodGhpcywgdmFsdWUsIG9mZnNldCwgLUJpZ0ludCgnMHg4MDAwMDAwMDAwMDAwMDAwJyksIEJpZ0ludCgnMHg3ZmZmZmZmZmZmZmZmZmZmJykpXG59KVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlQmlnSW50NjRCRSA9IGRlZmluZUJpZ0ludE1ldGhvZChmdW5jdGlvbiB3cml0ZUJpZ0ludDY0QkUgKHZhbHVlLCBvZmZzZXQgPSAwKSB7XG4gIHJldHVybiB3cnRCaWdVSW50NjRCRSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAtQmlnSW50KCcweDgwMDAwMDAwMDAwMDAwMDAnKSwgQmlnSW50KCcweDdmZmZmZmZmZmZmZmZmZmYnKSlcbn0pXG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0ID4+PiAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICBjaGVja0lFRUU3NTQoYnVmLCB2YWx1ZSwgb2Zmc2V0LCA0LCAzLjQwMjgyMzQ2NjM4NTI4ODZlKzM4LCAtMy40MDI4MjM0NjYzODUyODg2ZSszOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCAyMywgNClcbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUZsb2F0TEUgPSBmdW5jdGlvbiB3cml0ZUZsb2F0TEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZUZsb2F0KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRCRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG5mdW5jdGlvbiB3cml0ZURvdWJsZSAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCA+Pj4gMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgY2hlY2tJRUVFNzU0KGJ1ZiwgdmFsdWUsIG9mZnNldCwgOCwgMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgsIC0xLjc5NzY5MzEzNDg2MjMxNTdFKzMwOClcbiAgfVxuICBpZWVlNzU0LndyaXRlKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuLCA1MiwgOClcbiAgcmV0dXJuIG9mZnNldCArIDhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUxFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUsIG5vQXNzZXJ0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRG91YmxlQkUgPSBmdW5jdGlvbiB3cml0ZURvdWJsZUJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVEb3VibGUodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UsIG5vQXNzZXJ0KVxufVxuXG4vLyBjb3B5KHRhcmdldEJ1ZmZlciwgdGFyZ2V0U3RhcnQ9MCwgc291cmNlU3RhcnQ9MCwgc291cmNlRW5kPWJ1ZmZlci5sZW5ndGgpXG5CdWZmZXIucHJvdG90eXBlLmNvcHkgPSBmdW5jdGlvbiBjb3B5ICh0YXJnZXQsIHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKSB7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKHRhcmdldCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2FyZ3VtZW50IHNob3VsZCBiZSBhIEJ1ZmZlcicpXG4gIGlmICghc3RhcnQpIHN0YXJ0ID0gMFxuICBpZiAoIWVuZCAmJiBlbmQgIT09IDApIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXRTdGFydCA+PSB0YXJnZXQubGVuZ3RoKSB0YXJnZXRTdGFydCA9IHRhcmdldC5sZW5ndGhcbiAgaWYgKCF0YXJnZXRTdGFydCkgdGFyZ2V0U3RhcnQgPSAwXG4gIGlmIChlbmQgPiAwICYmIGVuZCA8IHN0YXJ0KSBlbmQgPSBzdGFydFxuXG4gIC8vIENvcHkgMCBieXRlczsgd2UncmUgZG9uZVxuICBpZiAoZW5kID09PSBzdGFydCkgcmV0dXJuIDBcbiAgaWYgKHRhcmdldC5sZW5ndGggPT09IDAgfHwgdGhpcy5sZW5ndGggPT09IDApIHJldHVybiAwXG5cbiAgLy8gRmF0YWwgZXJyb3IgY29uZGl0aW9uc1xuICBpZiAodGFyZ2V0U3RhcnQgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3RhcmdldFN0YXJ0IG91dCBvZiBib3VuZHMnKVxuICB9XG4gIGlmIChzdGFydCA8IDAgfHwgc3RhcnQgPj0gdGhpcy5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxuICBpZiAoZW5kIDwgMCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3NvdXJjZUVuZCBvdXQgb2YgYm91bmRzJylcblxuICAvLyBBcmUgd2Ugb29iP1xuICBpZiAoZW5kID4gdGhpcy5sZW5ndGgpIGVuZCA9IHRoaXMubGVuZ3RoXG4gIGlmICh0YXJnZXQubGVuZ3RoIC0gdGFyZ2V0U3RhcnQgPCBlbmQgLSBzdGFydCkge1xuICAgIGVuZCA9IHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCArIHN0YXJ0XG4gIH1cblxuICBjb25zdCBsZW4gPSBlbmQgLSBzdGFydFxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmNvcHlXaXRoaW4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAvLyBVc2UgYnVpbHQtaW4gd2hlbiBhdmFpbGFibGUsIG1pc3NpbmcgZnJvbSBJRTExXG4gICAgdGhpcy5jb3B5V2l0aGluKHRhcmdldFN0YXJ0LCBzdGFydCwgZW5kKVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgZW5kKSxcbiAgICAgIHRhcmdldFN0YXJ0XG4gICAgKVxuICB9XG5cbiAgcmV0dXJuIGxlblxufVxuXG4vLyBVc2FnZTpcbi8vICAgIGJ1ZmZlci5maWxsKG51bWJlclssIG9mZnNldFssIGVuZF1dKVxuLy8gICAgYnVmZmVyLmZpbGwoYnVmZmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChzdHJpbmdbLCBvZmZzZXRbLCBlbmRdXVssIGVuY29kaW5nXSlcbkJ1ZmZlci5wcm90b3R5cGUuZmlsbCA9IGZ1bmN0aW9uIGZpbGwgKHZhbCwgc3RhcnQsIGVuZCwgZW5jb2RpbmcpIHtcbiAgLy8gSGFuZGxlIHN0cmluZyBjYXNlczpcbiAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgaWYgKHR5cGVvZiBzdGFydCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gc3RhcnRcbiAgICAgIHN0YXJ0ID0gMFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBlbmQgPT09ICdzdHJpbmcnKSB7XG4gICAgICBlbmNvZGluZyA9IGVuZFxuICAgICAgZW5kID0gdGhpcy5sZW5ndGhcbiAgICB9XG4gICAgaWYgKGVuY29kaW5nICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIGVuY29kaW5nICE9PSAnc3RyaW5nJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZW5jb2RpbmcgbXVzdCBiZSBhIHN0cmluZycpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnICYmICFCdWZmZXIuaXNFbmNvZGluZyhlbmNvZGluZykpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICB9XG4gICAgaWYgKHZhbC5sZW5ndGggPT09IDEpIHtcbiAgICAgIGNvbnN0IGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKChlbmNvZGluZyA9PT0gJ3V0ZjgnICYmIGNvZGUgPCAxMjgpIHx8XG4gICAgICAgICAgZW5jb2RpbmcgPT09ICdsYXRpbjEnKSB7XG4gICAgICAgIC8vIEZhc3QgcGF0aDogSWYgYHZhbGAgZml0cyBpbnRvIGEgc2luZ2xlIGJ5dGUsIHVzZSB0aGF0IG51bWVyaWMgdmFsdWUuXG4gICAgICAgIHZhbCA9IGNvZGVcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAyNTVcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnYm9vbGVhbicpIHtcbiAgICB2YWwgPSBOdW1iZXIodmFsKVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIGxldCBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29uc3QgYnl0ZXMgPSBCdWZmZXIuaXNCdWZmZXIodmFsKVxuICAgICAgPyB2YWxcbiAgICAgIDogQnVmZmVyLmZyb20odmFsLCBlbmNvZGluZylcbiAgICBjb25zdCBsZW4gPSBieXRlcy5sZW5ndGhcbiAgICBpZiAobGVuID09PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdUaGUgdmFsdWUgXCInICsgdmFsICtcbiAgICAgICAgJ1wiIGlzIGludmFsaWQgZm9yIGFyZ3VtZW50IFwidmFsdWVcIicpXG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIENVU1RPTSBFUlJPUlNcbi8vID09PT09PT09PT09PT1cblxuLy8gU2ltcGxpZmllZCB2ZXJzaW9ucyBmcm9tIE5vZGUsIGNoYW5nZWQgZm9yIEJ1ZmZlci1vbmx5IHVzYWdlXG5jb25zdCBlcnJvcnMgPSB7fVxuZnVuY3Rpb24gRSAoc3ltLCBnZXRNZXNzYWdlLCBCYXNlKSB7XG4gIGVycm9yc1tzeW1dID0gY2xhc3MgTm9kZUVycm9yIGV4dGVuZHMgQmFzZSB7XG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgc3VwZXIoKVxuXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ21lc3NhZ2UnLCB7XG4gICAgICAgIHZhbHVlOiBnZXRNZXNzYWdlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyksXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH0pXG5cbiAgICAgIC8vIEFkZCB0aGUgZXJyb3IgY29kZSB0byB0aGUgbmFtZSB0byBpbmNsdWRlIGl0IGluIHRoZSBzdGFjayB0cmFjZS5cbiAgICAgIHRoaXMubmFtZSA9IGAke3RoaXMubmFtZX0gWyR7c3ltfV1gXG4gICAgICAvLyBBY2Nlc3MgdGhlIHN0YWNrIHRvIGdlbmVyYXRlIHRoZSBlcnJvciBtZXNzYWdlIGluY2x1ZGluZyB0aGUgZXJyb3IgY29kZVxuICAgICAgLy8gZnJvbSB0aGUgbmFtZS5cbiAgICAgIHRoaXMuc3RhY2sgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnNcbiAgICAgIC8vIFJlc2V0IHRoZSBuYW1lIHRvIHRoZSBhY3R1YWwgbmFtZS5cbiAgICAgIGRlbGV0ZSB0aGlzLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgY29kZSAoKSB7XG4gICAgICByZXR1cm4gc3ltXG4gICAgfVxuXG4gICAgc2V0IGNvZGUgKHZhbHVlKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2NvZGUnLCB7XG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlXG4gICAgICB9KVxuICAgIH1cblxuICAgIHRvU3RyaW5nICgpIHtcbiAgICAgIHJldHVybiBgJHt0aGlzLm5hbWV9IFske3N5bX1dOiAke3RoaXMubWVzc2FnZX1gXG4gICAgfVxuICB9XG59XG5cbkUoJ0VSUl9CVUZGRVJfT1VUX09GX0JPVU5EUycsXG4gIGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgaWYgKG5hbWUpIHtcbiAgICAgIHJldHVybiBgJHtuYW1lfSBpcyBvdXRzaWRlIG9mIGJ1ZmZlciBib3VuZHNgXG4gICAgfVxuXG4gICAgcmV0dXJuICdBdHRlbXB0IHRvIGFjY2VzcyBtZW1vcnkgb3V0c2lkZSBidWZmZXIgYm91bmRzJ1xuICB9LCBSYW5nZUVycm9yKVxuRSgnRVJSX0lOVkFMSURfQVJHX1RZUEUnLFxuICBmdW5jdGlvbiAobmFtZSwgYWN0dWFsKSB7XG4gICAgcmV0dXJuIGBUaGUgXCIke25hbWV9XCIgYXJndW1lbnQgbXVzdCBiZSBvZiB0eXBlIG51bWJlci4gUmVjZWl2ZWQgdHlwZSAke3R5cGVvZiBhY3R1YWx9YFxuICB9LCBUeXBlRXJyb3IpXG5FKCdFUlJfT1VUX09GX1JBTkdFJyxcbiAgZnVuY3Rpb24gKHN0ciwgcmFuZ2UsIGlucHV0KSB7XG4gICAgbGV0IG1zZyA9IGBUaGUgdmFsdWUgb2YgXCIke3N0cn1cIiBpcyBvdXQgb2YgcmFuZ2UuYFxuICAgIGxldCByZWNlaXZlZCA9IGlucHV0XG4gICAgaWYgKE51bWJlci5pc0ludGVnZXIoaW5wdXQpICYmIE1hdGguYWJzKGlucHV0KSA+IDIgKiogMzIpIHtcbiAgICAgIHJlY2VpdmVkID0gYWRkTnVtZXJpY2FsU2VwYXJhdG9yKFN0cmluZyhpbnB1dCkpXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgaW5wdXQgPT09ICdiaWdpbnQnKSB7XG4gICAgICByZWNlaXZlZCA9IFN0cmluZyhpbnB1dClcbiAgICAgIGlmIChpbnB1dCA+IEJpZ0ludCgyKSAqKiBCaWdJbnQoMzIpIHx8IGlucHV0IDwgLShCaWdJbnQoMikgKiogQmlnSW50KDMyKSkpIHtcbiAgICAgICAgcmVjZWl2ZWQgPSBhZGROdW1lcmljYWxTZXBhcmF0b3IocmVjZWl2ZWQpXG4gICAgICB9XG4gICAgICByZWNlaXZlZCArPSAnbidcbiAgICB9XG4gICAgbXNnICs9IGAgSXQgbXVzdCBiZSAke3JhbmdlfS4gUmVjZWl2ZWQgJHtyZWNlaXZlZH1gXG4gICAgcmV0dXJuIG1zZ1xuICB9LCBSYW5nZUVycm9yKVxuXG5mdW5jdGlvbiBhZGROdW1lcmljYWxTZXBhcmF0b3IgKHZhbCkge1xuICBsZXQgcmVzID0gJydcbiAgbGV0IGkgPSB2YWwubGVuZ3RoXG4gIGNvbnN0IHN0YXJ0ID0gdmFsWzBdID09PSAnLScgPyAxIDogMFxuICBmb3IgKDsgaSA+PSBzdGFydCArIDQ7IGkgLT0gMykge1xuICAgIHJlcyA9IGBfJHt2YWwuc2xpY2UoaSAtIDMsIGkpfSR7cmVzfWBcbiAgfVxuICByZXR1cm4gYCR7dmFsLnNsaWNlKDAsIGkpfSR7cmVzfWBcbn1cblxuLy8gQ0hFQ0sgRlVOQ1RJT05TXG4vLyA9PT09PT09PT09PT09PT1cblxuZnVuY3Rpb24gY2hlY2tCb3VuZHMgKGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIHZhbGlkYXRlTnVtYmVyKG9mZnNldCwgJ29mZnNldCcpXG4gIGlmIChidWZbb2Zmc2V0XSA9PT0gdW5kZWZpbmVkIHx8IGJ1ZltvZmZzZXQgKyBieXRlTGVuZ3RoXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYm91bmRzRXJyb3Iob2Zmc2V0LCBidWYubGVuZ3RoIC0gKGJ5dGVMZW5ndGggKyAxKSlcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja0ludEJJICh2YWx1ZSwgbWluLCBtYXgsIGJ1Ziwgb2Zmc2V0LCBieXRlTGVuZ3RoKSB7XG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikge1xuICAgIGNvbnN0IG4gPSB0eXBlb2YgbWluID09PSAnYmlnaW50JyA/ICduJyA6ICcnXG4gICAgbGV0IHJhbmdlXG4gICAgaWYgKGJ5dGVMZW5ndGggPiAzKSB7XG4gICAgICBpZiAobWluID09PSAwIHx8IG1pbiA9PT0gQmlnSW50KDApKSB7XG4gICAgICAgIHJhbmdlID0gYD49IDAke259IGFuZCA8IDIke259ICoqICR7KGJ5dGVMZW5ndGggKyAxKSAqIDh9JHtufWBcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJhbmdlID0gYD49IC0oMiR7bn0gKiogJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufSkgYW5kIDwgMiAqKiBgICtcbiAgICAgICAgICAgICAgICBgJHsoYnl0ZUxlbmd0aCArIDEpICogOCAtIDF9JHtufWBcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmFuZ2UgPSBgPj0gJHttaW59JHtufSBhbmQgPD0gJHttYXh9JHtufWBcbiAgICB9XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfT1VUX09GX1JBTkdFKCd2YWx1ZScsIHJhbmdlLCB2YWx1ZSlcbiAgfVxuICBjaGVja0JvdW5kcyhidWYsIG9mZnNldCwgYnl0ZUxlbmd0aClcbn1cblxuZnVuY3Rpb24gdmFsaWRhdGVOdW1iZXIgKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5FUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnbnVtYmVyJywgdmFsdWUpXG4gIH1cbn1cblxuZnVuY3Rpb24gYm91bmRzRXJyb3IgKHZhbHVlLCBsZW5ndGgsIHR5cGUpIHtcbiAgaWYgKE1hdGguZmxvb3IodmFsdWUpICE9PSB2YWx1ZSkge1xuICAgIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCB0eXBlKVxuICAgIHRocm93IG5ldyBlcnJvcnMuRVJSX09VVF9PRl9SQU5HRSh0eXBlIHx8ICdvZmZzZXQnLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG5cbiAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9CVUZGRVJfT1VUX09GX0JPVU5EUygpXG4gIH1cblxuICB0aHJvdyBuZXcgZXJyb3JzLkVSUl9PVVRfT0ZfUkFOR0UodHlwZSB8fCAnb2Zmc2V0JyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGA+PSAke3R5cGUgPyAxIDogMH0gYW5kIDw9ICR7bGVuZ3RofWAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSlcbn1cblxuLy8gSEVMUEVSIEZVTkNUSU9OU1xuLy8gPT09PT09PT09PT09PT09PVxuXG5jb25zdCBJTlZBTElEX0JBU0U2NF9SRSA9IC9bXisvMC05QS1aYS16LV9dL2dcblxuZnVuY3Rpb24gYmFzZTY0Y2xlYW4gKHN0cikge1xuICAvLyBOb2RlIHRha2VzIGVxdWFsIHNpZ25zIGFzIGVuZCBvZiB0aGUgQmFzZTY0IGVuY29kaW5nXG4gIHN0ciA9IHN0ci5zcGxpdCgnPScpWzBdXG4gIC8vIE5vZGUgc3RyaXBzIG91dCBpbnZhbGlkIGNoYXJhY3RlcnMgbGlrZSBcXG4gYW5kIFxcdCBmcm9tIHRoZSBzdHJpbmcsIGJhc2U2NC1qcyBkb2VzIG5vdFxuICBzdHIgPSBzdHIudHJpbSgpLnJlcGxhY2UoSU5WQUxJRF9CQVNFNjRfUkUsICcnKVxuICAvLyBOb2RlIGNvbnZlcnRzIHN0cmluZ3Mgd2l0aCBsZW5ndGggPCAyIHRvICcnXG4gIGlmIChzdHIubGVuZ3RoIDwgMikgcmV0dXJuICcnXG4gIC8vIE5vZGUgYWxsb3dzIGZvciBub24tcGFkZGVkIGJhc2U2NCBzdHJpbmdzIChtaXNzaW5nIHRyYWlsaW5nID09PSksIGJhc2U2NC1qcyBkb2VzIG5vdFxuICB3aGlsZSAoc3RyLmxlbmd0aCAlIDQgIT09IDApIHtcbiAgICBzdHIgPSBzdHIgKyAnPSdcbiAgfVxuICByZXR1cm4gc3RyXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgbGV0IGNvZGVQb2ludFxuICBjb25zdCBsZW5ndGggPSBzdHJpbmcubGVuZ3RoXG4gIGxldCBsZWFkU3Vycm9nYXRlID0gbnVsbFxuICBjb25zdCBieXRlcyA9IFtdXG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGNvZGVQb2ludCA9IHN0cmluZy5jaGFyQ29kZUF0KGkpXG5cbiAgICAvLyBpcyBzdXJyb2dhdGUgY29tcG9uZW50XG4gICAgaWYgKGNvZGVQb2ludCA+IDB4RDdGRiAmJiBjb2RlUG9pbnQgPCAweEUwMDApIHtcbiAgICAgIC8vIGxhc3QgY2hhciB3YXMgYSBsZWFkXG4gICAgICBpZiAoIWxlYWRTdXJyb2dhdGUpIHtcbiAgICAgICAgLy8gbm8gbGVhZCB5ZXRcbiAgICAgICAgaWYgKGNvZGVQb2ludCA+IDB4REJGRikge1xuICAgICAgICAgIC8vIHVuZXhwZWN0ZWQgdHJhaWxcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2UgaWYgKGkgKyAxID09PSBsZW5ndGgpIHtcbiAgICAgICAgICAvLyB1bnBhaXJlZCBsZWFkXG4gICAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHZhbGlkIGxlYWRcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuXG4gICAgICAgIGNvbnRpbnVlXG4gICAgICB9XG5cbiAgICAgIC8vIDIgbGVhZHMgaW4gYSByb3dcbiAgICAgIGlmIChjb2RlUG9pbnQgPCAweERDMDApIHtcbiAgICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgICAgIGxlYWRTdXJyb2dhdGUgPSBjb2RlUG9pbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gdmFsaWQgc3Vycm9nYXRlIHBhaXJcbiAgICAgIGNvZGVQb2ludCA9IChsZWFkU3Vycm9nYXRlIC0gMHhEODAwIDw8IDEwIHwgY29kZVBvaW50IC0gMHhEQzAwKSArIDB4MTAwMDBcbiAgICB9IGVsc2UgaWYgKGxlYWRTdXJyb2dhdGUpIHtcbiAgICAgIC8vIHZhbGlkIGJtcCBjaGFyLCBidXQgbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgIH1cblxuICAgIGxlYWRTdXJyb2dhdGUgPSBudWxsXG5cbiAgICAvLyBlbmNvZGUgdXRmOFxuICAgIGlmIChjb2RlUG9pbnQgPCAweDgwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDEpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goY29kZVBvaW50KVxuICAgIH0gZWxzZSBpZiAoY29kZVBvaW50IDwgMHg4MDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiB8IDB4QzAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDMpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgfCAweEUwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSA0KSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHgxMiB8IDB4RjAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweEMgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4NiAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgJiAweDNGIHwgMHg4MFxuICAgICAgKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgY29kZSBwb2ludCcpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ5dGVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpVG9CeXRlcyAoc3RyKSB7XG4gIGNvbnN0IGJ5dGVBcnJheSA9IFtdXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgbGV0IGMsIGhpLCBsb1xuICBjb25zdCBieXRlQXJyYXkgPSBbXVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7ICsraSkge1xuICAgIGlmICgodW5pdHMgLT0gMikgPCAwKSBicmVha1xuXG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KGkpXG4gICAgaGkgPSBjID4+IDhcbiAgICBsbyA9IGMgJSAyNTZcbiAgICBieXRlQXJyYXkucHVzaChsbylcbiAgICBieXRlQXJyYXkucHVzaChoaSlcbiAgfVxuXG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGxldCBpXG4gIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7ICsraSkge1xuICAgIGlmICgoaSArIG9mZnNldCA+PSBkc3QubGVuZ3RoKSB8fCAoaSA+PSBzcmMubGVuZ3RoKSkgYnJlYWtcbiAgICBkc3RbaSArIG9mZnNldF0gPSBzcmNbaV1cbiAgfVxuICByZXR1cm4gaVxufVxuXG4vLyBBcnJheUJ1ZmZlciBvciBVaW50OEFycmF5IG9iamVjdHMgZnJvbSBvdGhlciBjb250ZXh0cyAoaS5lLiBpZnJhbWVzKSBkbyBub3QgcGFzc1xuLy8gdGhlIGBpbnN0YW5jZW9mYCBjaGVjayBidXQgdGhleSBzaG91bGQgYmUgdHJlYXRlZCBhcyBvZiB0aGF0IHR5cGUuXG4vLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9mZXJvc3MvYnVmZmVyL2lzc3Vlcy8xNjZcbmZ1bmN0aW9uIGlzSW5zdGFuY2UgKG9iaiwgdHlwZSkge1xuICByZXR1cm4gb2JqIGluc3RhbmNlb2YgdHlwZSB8fFxuICAgIChvYmogIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IgIT0gbnVsbCAmJiBvYmouY29uc3RydWN0b3IubmFtZSAhPSBudWxsICYmXG4gICAgICBvYmouY29uc3RydWN0b3IubmFtZSA9PT0gdHlwZS5uYW1lKVxufVxuZnVuY3Rpb24gbnVtYmVySXNOYU4gKG9iaikge1xuICAvLyBGb3IgSUUxMSBzdXBwb3J0XG4gIHJldHVybiBvYmogIT09IG9iaiAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxufVxuXG4vLyBDcmVhdGUgbG9va3VwIHRhYmxlIGZvciBgdG9TdHJpbmcoJ2hleCcpYFxuLy8gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9pc3N1ZXMvMjE5XG5jb25zdCBoZXhTbGljZUxvb2t1cFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgY29uc3QgYWxwaGFiZXQgPSAnMDEyMzQ1Njc4OWFiY2RlZidcbiAgY29uc3QgdGFibGUgPSBuZXcgQXJyYXkoMjU2KVxuICBmb3IgKGxldCBpID0gMDsgaSA8IDE2OyArK2kpIHtcbiAgICBjb25zdCBpMTYgPSBpICogMTZcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IDE2OyArK2opIHtcbiAgICAgIHRhYmxlW2kxNiArIGpdID0gYWxwaGFiZXRbaV0gKyBhbHBoYWJldFtqXVxuICAgIH1cbiAgfVxuICByZXR1cm4gdGFibGVcbn0pKClcblxuLy8gUmV0dXJuIG5vdCBmdW5jdGlvbiB3aXRoIEVycm9yIGlmIEJpZ0ludCBub3Qgc3VwcG9ydGVkXG5mdW5jdGlvbiBkZWZpbmVCaWdJbnRNZXRob2QgKGZuKSB7XG4gIHJldHVybiB0eXBlb2YgQmlnSW50ID09PSAndW5kZWZpbmVkJyA/IEJ1ZmZlckJpZ0ludE5vdERlZmluZWQgOiBmblxufVxuXG5mdW5jdGlvbiBCdWZmZXJCaWdJbnROb3REZWZpbmVkICgpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdCaWdJbnQgbm90IHN1cHBvcnRlZCcpXG59XG4iLCJ2YXIgc2l6ZSA9IHJlcXVpcmUoJ2VsZW1lbnQtc2l6ZScpXG5cbm1vZHVsZS5leHBvcnRzID0gZml0XG5cbnZhciBzY3JhdGNoID0gbmV3IEZsb2F0MzJBcnJheSgyKVxuXG5mdW5jdGlvbiBmaXQoY2FudmFzLCBwYXJlbnQsIHNjYWxlKSB7XG4gIHZhciBpc1NWRyA9IGNhbnZhcy5ub2RlTmFtZS50b1VwcGVyQ2FzZSgpID09PSAnU1ZHJ1xuXG4gIGNhbnZhcy5zdHlsZS5wb3NpdGlvbiA9IGNhbnZhcy5zdHlsZS5wb3NpdGlvbiB8fCAnYWJzb2x1dGUnXG4gIGNhbnZhcy5zdHlsZS50b3AgPSAwXG4gIGNhbnZhcy5zdHlsZS5sZWZ0ID0gMFxuXG4gIHJlc2l6ZS5zY2FsZSAgPSBwYXJzZUZsb2F0KHNjYWxlIHx8IDEpXG4gIHJlc2l6ZS5wYXJlbnQgPSBwYXJlbnRcblxuICByZXR1cm4gcmVzaXplKClcblxuICBmdW5jdGlvbiByZXNpemUoKSB7XG4gICAgdmFyIHAgPSByZXNpemUucGFyZW50IHx8IGNhbnZhcy5wYXJlbnROb2RlXG4gICAgaWYgKHR5cGVvZiBwID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB2YXIgZGltcyAgID0gcChzY3JhdGNoKSB8fCBzY3JhdGNoXG4gICAgICB2YXIgd2lkdGggID0gZGltc1swXVxuICAgICAgdmFyIGhlaWdodCA9IGRpbXNbMV1cbiAgICB9IGVsc2VcbiAgICBpZiAocCAmJiBwICE9PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgICB2YXIgcHNpemUgID0gc2l6ZShwKVxuICAgICAgdmFyIHdpZHRoICA9IHBzaXplWzBdfDBcbiAgICAgIHZhciBoZWlnaHQgPSBwc2l6ZVsxXXwwXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB3aWR0aCAgPSB3aW5kb3cuaW5uZXJXaWR0aFxuICAgICAgdmFyIGhlaWdodCA9IHdpbmRvdy5pbm5lckhlaWdodFxuICAgIH1cblxuICAgIGlmIChpc1NWRykge1xuICAgICAgY2FudmFzLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCB3aWR0aCAqIHJlc2l6ZS5zY2FsZSArICdweCcpXG4gICAgICBjYW52YXMuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBoZWlnaHQgKiByZXNpemUuc2NhbGUgKyAncHgnKVxuICAgIH0gZWxzZSB7XG4gICAgICBjYW52YXMud2lkdGggPSB3aWR0aCAqIHJlc2l6ZS5zY2FsZVxuICAgICAgY2FudmFzLmhlaWdodCA9IGhlaWdodCAqIHJlc2l6ZS5zY2FsZVxuICAgIH1cblxuICAgIGNhbnZhcy5zdHlsZS53aWR0aCA9IHdpZHRoICsgJ3B4J1xuICAgIGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnXG5cbiAgICByZXR1cm4gcmVzaXplXG4gIH1cbn1cbiIsIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiLmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNvbnRyb2xze2Rpc3BsYXk6aW5saW5lLWZsZXg7dmVydGljYWwtYWxpZ246dG9wO2ZsZXgtZGlyZWN0aW9uOmNvbHVtbi1yZXZlcnNlO21hcmdpbi1yaWdodDoxMHB4O21hcmdpbi1sZWZ0OjEwcHh9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAub3BlcmF0b3ItYnV0dG9uc3tmbGV4LWdyb3c6MX0uZGVidWctb3BlcmF0b3ItY29udGFpbmVyIC5pbnB1dC1jb250YWluZXJ7cGFkZGluZzo1cHg7bWFyZ2luLWJvdHRvbTo1cHg7YWxpZ24taXRlbXM6Y2VudGVyO2dyaWQtYXV0by1yb3dzOjI1cHg7Z3JpZC1yb3ctZ2FwOjVweDtncmlkLWNvbHVtbi1nYXA6NXB4fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNvbm5lY3Rpb257ZGlzcGxheTpncmlkO2dyaWQtdGVtcGxhdGUtY29sdW1uczouN2ZyIDJmcn0uZGVidWctb3BlcmF0b3ItY29udGFpbmVyIC5jb25uZWN0aW9uPnNwYW57dGV4dC1hbGlnbjpyaWdodH0uZGVidWctb3BlcmF0b3ItY29udGFpbmVyIC5qb2ludC1jb250cm9sc3tkaXNwbGF5OmdyaWQ7Z3JpZC10ZW1wbGF0ZS1jb2x1bW5zOjIwcHggcmVwZWF0KDIsIDFmcikgMTAwcHggcmVwZWF0KDIsIDFmcik7Z3JpZC1jb2x1bW4tZ2FwOjVweDthbGlnbi1pdGVtczpjZW50ZXJ9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuam9pbnQtY29udHJvbHMgLmpvaW50LW51bXt0ZXh0LWFsaWduOnJpZ2h0fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmpvaW50LWNvbnRyb2xzIC5qb2ludC1kZWdyZWVze3RleHQtYWxpZ246Y2VudGVyfS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmpvaW50LWNvbnRyb2xzKy5qb2ludC1jb250cm9sc3ttYXJnaW4tdG9wOjEwcHh9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAudmFjdXVte2Rpc3BsYXk6Z3JpZDtncmlkLXRlbXBsYXRlLWNvbHVtbnM6cmVwZWF0KDIsIDFmcil9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY2FsaWJyYXRpb257Ym9yZGVyLXJhZGl1czo1cHg7cGFkZGluZzo1cHg7bWFyZ2luLWJvdHRvbTo1cHg7YWxpZ24taXRlbXM6Y2VudGVyfS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNhbGlicmF0aW9uPmRpditkaXZ7bWFyZ2luLXRvcDoxMHB4fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNhbGlicmF0aW9uPi50YWdze2Rpc3BsYXk6Z3JpZDtncmlkLWF1dG8tcm93czoyNXB4O2dyaWQtY29sdW1uLWdhcDo1cHh9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuYnRuLXNlbmQtaG9tZXt3aWR0aDoxMDAlO21hcmdpbi10b3A6N3B4O21hcmdpbi1ib3R0b206N3B4fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmRlcHRoLXZpZXd7d2lkdGg6MzIwcHg7aGVpZ2h0OjE4MHB4fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNhbWVyYS12aWV3e3dpZHRoOjg1NHB4O2hlaWdodDo0ODBweH0uZGVidWctb3BlcmF0b3ItY29udGFpbmVyIC5kZWJ1Zy1jb21tYW5kLWNvbnRhaW5lcnt3aWR0aDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3d9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY29tbWFuZC1pdGVtLWNvbnRhaW5lcntkaXNwbGF5OmZsZXg7ZmxleC1kaXJlY3Rpb246cm93O2ZsZXgtd3JhcDp3cmFwO2hlaWdodDptYXgtY29udGVudCAhaW1wb3J0YW50fS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNvbW1hbmQtaXRlbXttYXJnaW46NXB4O2ZvbnQtc2l6ZToxLjFlbTttaW4td2lkdGg6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjojZDNkM2QzO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3c7anVzdGlmeS1jb250ZW50OnNwYWNlLWJldHdlZW47YWxpZ24tY29udGVudDpjZW50ZXI7YWxpZ24taXRlbXM6Y2VudGVyO2ZsZXgtZ3JvdzoxO2JvcmRlci1yYWRpdXM6NXB4O2hlaWdodDptYXgtY29udGVudCAhaW1wb3J0YW50Oy13ZWJraXQtdXNlci1zZWxlY3Q6bm9uZTsta2h0bWwtdXNlci1zZWxlY3Q6bm9uZTstbW96LXVzZXItc2VsZWN0Om5vbmU7LW8tdXNlci1zZWxlY3Q6bm9uZTt1c2VyLXNlbGVjdDpub25lO2N1cnNvcjpwb2ludGVyfS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNvbW1hbmQtaXRlbT5zcGFue21hcmdpbi1sZWZ0OjEwcHh9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY29tbWFuZC1pdGVtLWljb257ZmlsdGVyOmJyaWdodG5lc3MoMC45KTtwYWRkaW5nOjdweCAxMnB4O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7YWxpZ24tY29udGVudDpjZW50ZXI7YmFja2dyb3VuZC1jb2xvcjojZDNkM2QzfS5kZWJ1Zy1vcGVyYXRvci1jb250YWluZXIgLmNvbW1hbmQtaW5wdXR7d2lkdGg6bWF4LWNvbnRlbnQ7cGFkZGluZzo2cHg7Ym9yZGVyLXJhZGl1czo1cHg7aGVpZ2h0Om1heC1jb250ZW50ICFpbXBvcnRhbnR9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY29tbWFuZC1pbnB1dC1pdGVte2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW59LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY29tbWFuZC1pbnB1dC1pdGVtPnNwYW57bWFyZ2luLXRvcDo1cHg7bWFyZ2luLWJvdHRvbTo1cHh9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuY29tbWFuZC1pdGVtOmhvdmVye2ZpbHRlcjpicmlnaHRuZXNzKDAuOSl9LmRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lciAuZGVidWctb3BlcmF0b3ItaW5mby1jb250YWluZXJ7ZGlzcGxheTpmbGV4O2ZsZXgtZGlyZWN0aW9uOnJvdztqdXN0aWZ5LWNvbnRlbnQ6c3BhY2UtYXJvdW5kfVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy93ZWItb3BlcmF0b3JzL29wZXJhdG9yLWRlYnVnLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUEsMEJBQ0UsWUFBQSxDQUNBLGtCQUFBLENBQ0Esb0NBQ0UsbUJBQUEsQ0FFQSxrQkFBQSxDQUNBLDZCQUFBLENBQ0EsaUJBQUEsQ0FDQSxnQkFBQSxDQUVGLDRDQUNFLFdBQUEsQ0FFRiwyQ0FDRSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUNBLG1CQUFBLENBQ0EsZ0JBQUEsQ0FDQSxtQkFBQSxDQUdGLHNDQUNFLFlBQUEsQ0FDQSw4QkFBQSxDQUVGLDJDQUNFLGdCQUFBLENBR0YsMENBQ0UsWUFBQSxDQUNBLDhEQUFBLENBQ0EsbUJBQUEsQ0FDQSxrQkFBQSxDQUVBLHFEQUNFLGdCQUFBLENBR0YseURBQ0UsaUJBQUEsQ0FJSiwwREFDRSxlQUFBLENBR0Ysa0NBQ0UsWUFBQSxDQUNBLG9DQUFBLENBRUYsdUNBQ0UsaUJBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxrQkFBQSxDQUVGLCtDQUNFLGVBQUEsQ0FFRiw2Q0FDRSxZQUFBLENBQ0EsbUJBQUEsQ0FDQSxtQkFBQSxDQUdGLHlDQUNFLFVBQUEsQ0FDQSxjQUFBLENBQ0EsaUJBQUEsQ0FHRixzQ0FDRSxXQUFBLENBQ0EsWUFBQSxDQUdGLHVDQUNFLFdBQUEsQ0FDQSxZQUFBLENBRUYsbURBQ0UsVUFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUVGLGtEQUNFLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLGNBQUEsQ0FDQSw2QkFBQSxDQUVGLHdDQUNFLFVBQUEsQ0FDQSxlQUFBLENBQ0EsZUFBQSxDQUNBLHdCQUFBLENBQ0EsWUFBQSxDQUNBLGtCQUFBLENBQ0EsNkJBQUEsQ0FDQSxvQkFBQSxDQUNBLGtCQUFBLENBQ0EsV0FBQSxDQUNBLGlCQUFBLENBQ0EsNkJBQUEsQ0FDQSx3QkFBQSxDQUNBLHVCQUFBLENBQ0EscUJBQUEsQ0FDQSxtQkFBQSxDQUNBLGdCQUFBLENBQ0EsY0FBQSxDQUVGLDZDQUNFLGdCQUFBLENBRUYsNkNBQ0Usc0JBQUEsQ0FDQSxnQkFBQSxDQUNBLFlBQUEsQ0FDQSxrQkFBQSxDQUNBLG9CQUFBLENBQ0Esd0JBQUEsQ0FFRix5Q0FDRSxpQkFBQSxDQUNBLFdBQUEsQ0FDQSxpQkFBQSxDQUVBLDZCQUFBLENBRUYsOENBQ0UsWUFBQSxDQUNBLHFCQUFBLENBRUYsbURBQ0UsY0FBQSxDQUNBLGlCQUFBLENBRUYsOENBQ0Usc0JBQUEsQ0FFRix5REFDRSxZQUFBLENBQ0Esa0JBQUEsQ0FDQSw0QkFBQVwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIuZGVidWctb3BlcmF0b3ItY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogcm93O1xcbiAgLmNvbnRyb2xzIHtcXG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XFxuXFxuICAgIHZlcnRpY2FsLWFsaWduOiB0b3A7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW4tcmV2ZXJzZTtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxMHB4O1xcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcXG4gIH1cXG4gIC5vcGVyYXRvci1idXR0b25zIHtcXG4gICAgZmxleC1ncm93OiAxO1xcbiAgfVxcbiAgLmlucHV0LWNvbnRhaW5lciB7XFxuICAgIHBhZGRpbmc6IDVweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBncmlkLWF1dG8tcm93czogMjVweDtcXG4gICAgZ3JpZC1yb3ctZ2FwOiA1cHg7XFxuICAgIGdyaWQtY29sdW1uLWdhcDogNXB4O1xcbiAgfVxcblxcbiAgLmNvbm5lY3Rpb24ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDAuN2ZyIDJmcjtcXG4gIH1cXG4gIC5jb25uZWN0aW9uID4gc3BhbiB7XFxuICAgIHRleHQtYWxpZ246IHJpZ2h0O1xcbiAgfVxcblxcbiAgLmpvaW50LWNvbnRyb2xzIHtcXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAyMHB4IHJlcGVhdCgyLCAxZnIpIDEwMHB4IHJlcGVhdCgyLCAxZnIpO1xcbiAgICBncmlkLWNvbHVtbi1nYXA6IDVweDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG5cXG4gICAgLmpvaW50LW51bSB7XFxuICAgICAgdGV4dC1hbGlnbjogcmlnaHQ7XFxuICAgIH1cXG5cXG4gICAgLmpvaW50LWRlZ3JlZXMge1xcbiAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgfVxcbiAgfVxcblxcbiAgLmpvaW50LWNvbnRyb2xzICsgLmpvaW50LWNvbnRyb2xzIHtcXG4gICAgbWFyZ2luLXRvcDogMTBweDtcXG4gIH1cXG5cXG4gIC52YWN1dW0ge1xcbiAgICBkaXNwbGF5OiBncmlkO1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IHJlcGVhdCgyLCAxZnIpO1xcbiAgfVxcbiAgLmNhbGlicmF0aW9uIHtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBwYWRkaW5nOiA1cHg7XFxuICAgIG1hcmdpbi1ib3R0b206IDVweDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIH1cXG4gIC5jYWxpYnJhdGlvbiA+IGRpdiArIGRpdiB7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICB9XFxuICAuY2FsaWJyYXRpb24gPiAudGFncyB7XFxuICAgIGRpc3BsYXk6IGdyaWQ7XFxuICAgIGdyaWQtYXV0by1yb3dzOiAyNXB4O1xcbiAgICBncmlkLWNvbHVtbi1nYXA6IDVweDtcXG4gIH1cXG5cXG4gIC5idG4tc2VuZC1ob21lIHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbi10b3A6IDdweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogN3B4O1xcbiAgfVxcblxcbiAgLmRlcHRoLXZpZXcge1xcbiAgICB3aWR0aDogMzIwcHg7XFxuICAgIGhlaWdodDogMTgwcHg7XFxuICB9XFxuXFxuICAuY2FtZXJhLXZpZXcge1xcbiAgICB3aWR0aDogODU0cHg7XFxuICAgIGhlaWdodDogNDgwcHg7XFxuICB9XFxuICAuZGVidWctY29tbWFuZC1jb250YWluZXIge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gIH1cXG4gIC5jb21tYW5kLWl0ZW0tY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAgZmxleC13cmFwOiB3cmFwO1xcbiAgICBoZWlnaHQ6IG1heC1jb250ZW50ICFpbXBvcnRhbnQ7XFxuICB9XFxuICAuY29tbWFuZC1pdGVtIHtcXG4gICAgbWFyZ2luOiA1cHg7XFxuICAgIGZvbnQtc2l6ZTogMS4xZW07XFxuICAgIG1pbi13aWR0aDogMTAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1iZXR3ZWVuO1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGZsZXgtZ3JvdzogMTtcXG4gICAgYm9yZGVyLXJhZGl1czogNXB4O1xcbiAgICBoZWlnaHQ6IG1heC1jb250ZW50ICFpbXBvcnRhbnQ7XFxuICAgIC13ZWJraXQtdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIC1raHRtbC11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgLW1vei11c2VyLXNlbGVjdDogbm9uZTtcXG4gICAgLW8tdXNlci1zZWxlY3Q6IG5vbmU7XFxuICAgIHVzZXItc2VsZWN0OiBub25lO1xcbiAgICBjdXJzb3I6IHBvaW50ZXI7XFxuICB9XFxuICAuY29tbWFuZC1pdGVtID4gc3BhbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxMHB4O1xcbiAgfVxcbiAgLmNvbW1hbmQtaXRlbS1pY29uIHtcXG4gICAgZmlsdGVyOiBicmlnaHRuZXNzKDAuOSk7XFxuICAgIHBhZGRpbmc6IDdweCAxMnB4O1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBhbGlnbi1jb250ZW50OiBjZW50ZXI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IGxpZ2h0Z3JheTtcXG4gIH1cXG4gIC5jb21tYW5kLWlucHV0IHtcXG4gICAgd2lkdGg6IG1heC1jb250ZW50O1xcbiAgICBwYWRkaW5nOiA2cHg7XFxuICAgIGJvcmRlci1yYWRpdXM6IDVweDtcXG5cXG4gICAgaGVpZ2h0OiBtYXgtY29udGVudCAhaW1wb3J0YW50O1xcbiAgfVxcbiAgLmNvbW1hbmQtaW5wdXQtaXRlbSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICB9XFxuICAuY29tbWFuZC1pbnB1dC1pdGVtID4gc3BhbiB7XFxuICAgIG1hcmdpbi10b3A6IDVweDtcXG4gICAgbWFyZ2luLWJvdHRvbTogNXB4O1xcbiAgfVxcbiAgLmNvbW1hbmQtaXRlbTpob3ZlciB7XFxuICAgIGZpbHRlcjogYnJpZ2h0bmVzcygwLjkpO1xcbiAgfVxcbiAgLmRlYnVnLW9wZXJhdG9yLWluZm8tY29udGFpbmVyIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IHJvdztcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICB9XFxufVxcblwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgdmFyIGNvbnRlbnQgPSBpdGVtWzFdO1xuICB2YXIgY3NzTWFwcGluZyA9IGl0ZW1bM107XG5cbiAgaWYgKCFjc3NNYXBwaW5nKSB7XG4gICAgcmV0dXJuIGNvbnRlbnQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3NNYXBwaW5nKSkpKTtcbiAgICB2YXIgZGF0YSA9IFwic291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsXCIuY29uY2F0KGJhc2U2NCk7XG4gICAgdmFyIHNvdXJjZU1hcHBpbmcgPSBcIi8qIyBcIi5jb25jYXQoZGF0YSwgXCIgKi9cIik7XG4gICAgdmFyIHNvdXJjZVVSTHMgPSBjc3NNYXBwaW5nLnNvdXJjZXMubWFwKGZ1bmN0aW9uIChzb3VyY2UpIHtcbiAgICAgIHJldHVybiBcIi8qIyBzb3VyY2VVUkw9XCIuY29uY2F0KGNzc01hcHBpbmcuc291cmNlUm9vdCB8fCBcIlwiKS5jb25jYXQoc291cmNlLCBcIiAqL1wiKTtcbiAgICB9KTtcbiAgICByZXR1cm4gW2NvbnRlbnRdLmNvbmNhdChzb3VyY2VVUkxzKS5jb25jYXQoW3NvdXJjZU1hcHBpbmddKS5qb2luKFwiXFxuXCIpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKFwiXFxuXCIpO1xufTsiLCJtb2R1bGUuZXhwb3J0cyA9IGdldFNpemVcblxuZnVuY3Rpb24gZ2V0U2l6ZShlbGVtZW50KSB7XG4gIC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB0aGUgZWxlbWVudCBpcyBub3QgYWxyZWFkeVxuICAvLyBhdHRhY2hlZCB0byB0aGUgRE9NIGJ5IGJyaWVmbHkgYXBwZW5kaW5nIGl0XG4gIC8vIHRvIGRvY3VtZW50LmJvZHksIGFuZCByZW1vdmluZyBpdCBhZ2FpbiBsYXRlci5cbiAgaWYgKGVsZW1lbnQgPT09IHdpbmRvdyB8fCBlbGVtZW50ID09PSBkb2N1bWVudC5ib2R5KSB7XG4gICAgcmV0dXJuIFt3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0XVxuICB9XG5cbiAgaWYgKCFlbGVtZW50LnBhcmVudE5vZGUpIHtcbiAgICB2YXIgdGVtcG9yYXJ5ID0gdHJ1ZVxuICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZWxlbWVudClcbiAgfVxuXG4gIHZhciBib3VuZHMgPSBlbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG4gIHZhciBzdHlsZXMgPSBnZXRDb21wdXRlZFN0eWxlKGVsZW1lbnQpXG4gIHZhciBoZWlnaHQgPSAoYm91bmRzLmhlaWdodHwwKVxuICAgICsgcGFyc2Uoc3R5bGVzLmdldFByb3BlcnR5VmFsdWUoJ21hcmdpbi10b3AnKSlcbiAgICArIHBhcnNlKHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tYm90dG9tJykpXG4gIHZhciB3aWR0aCAgPSAoYm91bmRzLndpZHRofDApXG4gICAgKyBwYXJzZShzdHlsZXMuZ2V0UHJvcGVydHlWYWx1ZSgnbWFyZ2luLWxlZnQnKSlcbiAgICArIHBhcnNlKHN0eWxlcy5nZXRQcm9wZXJ0eVZhbHVlKCdtYXJnaW4tcmlnaHQnKSlcblxuICBpZiAodGVtcG9yYXJ5KSB7XG4gICAgZG9jdW1lbnQuYm9keS5yZW1vdmVDaGlsZChlbGVtZW50KVxuICB9XG5cbiAgcmV0dXJuIFt3aWR0aCwgaGVpZ2h0XVxufVxuXG5mdW5jdGlvbiBwYXJzZShwcm9wKSB7XG4gIHJldHVybiBwYXJzZUZsb2F0KHByb3ApIHx8IDBcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdXRmOCA9IHJlcXVpcmUoJ3V0ZjgnKTtcblxuY29uc3QgZGVmYXVsdEJ5dGVMZW5ndGggPSAxMDI0ICogODtcbmNvbnN0IGNoYXJBcnJheSA9IFtdO1xuXG4vKipcbiAqIElPQnVmZmVyXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7dW5kZWZpbmVkfG51bWJlcnxBcnJheUJ1ZmZlcnxUeXBlZEFycmF5fElPQnVmZmVyfEJ1ZmZlcn0gZGF0YSAtIFRoZSBkYXRhIHRvIGNvbnN0cnVjdCB0aGUgSU9CdWZmZXIgd2l0aC5cbiAqXG4gKiBJZiBpdCdzIGEgbnVtYmVyLCBpdCB3aWxsIGluaXRpYWxpemUgdGhlIGJ1ZmZlciB3aXRoIHRoZSBudW1iZXIgYXMgdGhlIGJ1ZmZlcidzIGxlbmd0aDxicj5cbiAqIElmIGl0J3MgdW5kZWZpbmVkLCBpdCB3aWxsIGluaXRpYWxpemUgdGhlIGJ1ZmZlciB3aXRoIGEgZGVmYXVsdCBsZW5ndGggb2YgOCBLYjxicj5cbiAqIElmIGl0cyBhbiBBcnJheUJ1ZmZlciwgYSBUeXBlZEFycmF5LCBhbiBJT0J1ZmZlciBpbnN0YW5jZSxcbiAqIG9yIGEgTm9kZS5qcyBCdWZmZXIsIGl0IHdpbGwgY3JlYXRlIGEgdmlldyBvdmVyIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm9mZnNldD0wXSAtIElnbm9yZSB0aGUgZmlyc3QgbiBieXRlcyBvZiB0aGUgQXJyYXlCdWZmZXJcbiAqIEBwcm9wZXJ0eSB7QXJyYXlCdWZmZXJ9IGJ1ZmZlciAtIFJlZmVyZW5jZSB0byB0aGUgaW50ZXJuYWwgQXJyYXlCdWZmZXIgb2JqZWN0XG4gKiBAcHJvcGVydHkge251bWJlcn0gbGVuZ3RoIC0gQnl0ZSBsZW5ndGggb2YgdGhlIGludGVybmFsIEFycmF5QnVmZmVyXG4gKiBAcHJvcGVydHkge251bWJlcn0gb2Zmc2V0IC0gVGhlIGN1cnJlbnQgb2Zmc2V0IG9mIHRoZSBidWZmZXIncyBwb2ludGVyXG4gKiBAcHJvcGVydHkge251bWJlcn0gYnl0ZUxlbmd0aCAtIEJ5dGUgbGVuZ3RoIG9mIHRoZSBpbnRlcm5hbCBBcnJheUJ1ZmZlclxuICogQHByb3BlcnR5IHtudW1iZXJ9IGJ5dGVPZmZzZXQgLSBCeXRlIG9mZnNldCBvZiB0aGUgaW50ZXJuYWwgQXJyYXlCdWZmZXJcbiAqL1xuY2xhc3MgSU9CdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIHZhciBkYXRhSXNHaXZlbiA9IGZhbHNlO1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBkYXRhID0gZGVmYXVsdEJ5dGVMZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgZGF0YSA9IG5ldyBBcnJheUJ1ZmZlcihkYXRhKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGFJc0dpdmVuID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RXcml0dGVuQnl0ZSA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IG9wdGlvbnMub2Zmc2V0ID8gb3B0aW9ucy5vZmZzZXQgPj4+IDAgOiAwO1xuICAgICAgICBsZXQgYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCAtIG9mZnNldDtcbiAgICAgICAgbGV0IGR2T2Zmc2V0ID0gb2Zmc2V0O1xuICAgICAgICBpZiAoZGF0YS5idWZmZXIpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggIT09IGRhdGEuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBkdk9mZnNldCA9IGRhdGEuYnl0ZU9mZnNldCArIG9mZnNldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRhdGEgPSBkYXRhLmJ1ZmZlcjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGF0YUlzR2l2ZW4pIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RXcml0dGVuQnl0ZSA9IGJ5dGVMZW5ndGg7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9sYXN0V3JpdHRlbkJ5dGUgPSAwO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYnVmZmVyID0gZGF0YTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBkdk9mZnNldDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIsIGR2T2Zmc2V0LCBieXRlTGVuZ3RoKTtcbiAgICAgICAgdGhpcy5fbWFyayA9IDA7XG4gICAgICAgIHRoaXMuX21hcmtzID0gW107XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIHRoZSBtZW1vcnkgYWxsb2NhdGVkIHRvIHRoZSBidWZmZXIgaXMgc3VmZmljaWVudCB0byBzdG9yZSBtb3JlIGJ5dGVzIGFmdGVyIHRoZSBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gW2J5dGVMZW5ndGg9MV0gVGhlIG5lZWRlZCBtZW1vcnkgaW4gYnl0ZXNcbiAgICAgKiBAcmV0dXJuIHtib29sZWFufSBSZXR1cm5zIHRydWUgaWYgdGhlcmUgaXMgc3VmZmljaWVudCBzcGFjZSBhbmQgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgYXZhaWxhYmxlKGJ5dGVMZW5ndGgpIHtcbiAgICAgICAgaWYgKGJ5dGVMZW5ndGggPT09IHVuZGVmaW5lZCkgYnl0ZUxlbmd0aCA9IDE7XG4gICAgICAgIHJldHVybiAodGhpcy5vZmZzZXQgKyBieXRlTGVuZ3RoKSA8PSB0aGlzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBsaXR0bGUtZW5kaWFuIG1vZGUgaXMgdXNlZCBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBtdWx0aS1ieXRlIHZhbHVlc1xuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59IFJldHVybnMgdHJ1ZSBpZiBsaXR0bGUtZW5kaWFuIG1vZGUgaXMgdXNlZCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAgICovXG4gICAgaXNMaXR0bGVFbmRpYW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxpdHRsZUVuZGlhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTZXQgbGl0dGxlLWVuZGlhbiBtb2RlIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIG11bHRpLWJ5dGUgdmFsdWVzXG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgc2V0TGl0dGxlRW5kaWFuKCkge1xuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGJpZy1lbmRpYW4gbW9kZSBpcyB1c2VkIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIG11bHRpLWJ5dGUgdmFsdWVzXG4gICAgICogQHJldHVybiB7Ym9vbGVhbn0gUmV0dXJucyB0cnVlIGlmIGJpZy1lbmRpYW4gbW9kZSBpcyB1c2VkLCBmYWxzZSBvdGhlcndpc2VcbiAgICAgKi9cbiAgICBpc0JpZ0VuZGlhbigpIHtcbiAgICAgICAgcmV0dXJuICF0aGlzLmxpdHRsZUVuZGlhbjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTd2l0Y2hlcyB0byBiaWctZW5kaWFuIG1vZGUgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgbXVsdGktYnl0ZSB2YWx1ZXNcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICBzZXRCaWdFbmRpYW4oKSB7XG4gICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgbiBieXRlcyBmb3J3YXJkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5cbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICBza2lwKG4pIHtcbiAgICAgICAgaWYgKG4gPT09IHVuZGVmaW5lZCkgbiA9IDE7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IG47XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgdG8gdGhlIGdpdmVuIG9mZnNldFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBvZmZzZXRcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICBzZWVrKG9mZnNldCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3RvcmUgdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXQuXG4gICAgICogQHNlZSB7QGxpbmsgSU9CdWZmZXIjcmVzZXR9XG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgbWFyaygpIHtcbiAgICAgICAgdGhpcy5fbWFyayA9IHRoaXMub2Zmc2V0O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNb3ZlIHRoZSBwb2ludGVyIGJhY2sgdG8gdGhlIGxhc3QgcG9pbnRlciBvZmZzZXQgc2V0IGJ5IG1hcmtcbiAgICAgKiBAc2VlIHtAbGluayBJT0J1ZmZlciNtYXJrfVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHJlc2V0KCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IHRoaXMuX21hcms7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFB1c2ggdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXQgdG8gdGhlIG1hcmsgc3RhY2tcbiAgICAgKiBAc2VlIHtAbGluayBJT0J1ZmZlciNwb3BNYXJrfVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHB1c2hNYXJrKCkge1xuICAgICAgICB0aGlzLl9tYXJrcy5wdXNoKHRoaXMub2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUG9wIHRoZSBsYXN0IHBvaW50ZXIgb2Zmc2V0IGZyb20gdGhlIG1hcmsgc3RhY2ssIGFuZCBzZXQgdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXQgdG8gdGhlIHBvcHBlZCB2YWx1ZVxuICAgICAqIEBzZWUge0BsaW5rIElPQnVmZmVyI3B1c2hNYXJrfVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHBvcE1hcmsoKSB7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX21hcmtzLnBvcCgpO1xuICAgICAgICBpZiAob2Zmc2V0ID09PSB1bmRlZmluZWQpIHRocm93IG5ldyBFcnJvcignTWFyayBzdGFjayBlbXB0eScpO1xuICAgICAgICB0aGlzLnNlZWsob2Zmc2V0KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogTW92ZSB0aGUgcG9pbnRlciBvZmZzZXQgYmFjayB0byAwXG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgcmV3aW5kKCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1ha2Ugc3VyZSB0aGUgYnVmZmVyIGhhcyBzdWZmaWNpZW50IG1lbW9yeSB0byB3cml0ZSBhIGdpdmVuIGJ5dGVMZW5ndGggYXQgdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXRcbiAgICAgKiBJZiB0aGUgYnVmZmVyJ3MgbWVtb3J5IGlzIGluc3VmZmljaWVudCwgdGhpcyBtZXRob2Qgd2lsbCBjcmVhdGUgYSBuZXcgYnVmZmVyIChhIGNvcHkpIHdpdGggYSBsZW5ndGhcbiAgICAgKiB0aGF0IGlzIHR3aWNlIChieXRlTGVuZ3RoICsgY3VycmVudCBvZmZzZXQpXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IFtieXRlTGVuZ3RoID0gMV1cbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICBlbnN1cmVBdmFpbGFibGUoYnl0ZUxlbmd0aCkge1xuICAgICAgICBpZiAoYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkKSBieXRlTGVuZ3RoID0gMTtcbiAgICAgICAgaWYgKCF0aGlzLmF2YWlsYWJsZShieXRlTGVuZ3RoKSkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoTmVlZGVkID0gdGhpcy5vZmZzZXQgKyBieXRlTGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gbGVuZ3RoTmVlZGVkICogMjtcbiAgICAgICAgICAgIGNvbnN0IG5ld0FycmF5ID0gbmV3IFVpbnQ4QXJyYXkobmV3TGVuZ3RoKTtcbiAgICAgICAgICAgIG5ld0FycmF5LnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikpO1xuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXdBcnJheS5idWZmZXI7XG4gICAgICAgICAgICB0aGlzLmxlbmd0aCA9IHRoaXMuYnl0ZUxlbmd0aCA9IG5ld0xlbmd0aDtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBieXRlIGFuZCByZXR1cm4gZmFsc2UgaWYgdGhlIGJ5dGUncyB2YWx1ZSBpcyAwLCBvciB0cnVlIG90aGVyd2lzZVxuICAgICAqIE1vdmVzIHBvaW50ZXIgZm9yd2FyZFxuICAgICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAgICovXG4gICAgcmVhZEJvb2xlYW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRVaW50OCgpICE9PSAwO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgYSBzaWduZWQgOC1iaXQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgcmVhZEludDgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldEludDgodGhpcy5vZmZzZXQrKyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBhbiB1bnNpZ25lZCA4LWJpdCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZFxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICByZWFkVWludDgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldFVpbnQ4KHRoaXMub2Zmc2V0KyspO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgSU9CdWZmZXIjcmVhZFVpbnQ4fVxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICByZWFkQnl0ZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVpbnQ4KCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBuIGJ5dGVzIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZC5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gblxuICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgcmVhZEJ5dGVzKG4pIHtcbiAgICAgICAgaWYgKG4gPT09IHVuZGVmaW5lZCkgbiA9IDE7XG4gICAgICAgIHZhciBieXRlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgYnl0ZXNbaV0gPSB0aGlzLnJlYWRCeXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgYSAxNi1iaXQgc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJlYWRJbnQxNigpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gdGhpcy5fZGF0YS5nZXRJbnQxNih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBhIDE2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZFxuICAgICAqIEByZXR1cm4ge251bWJlcn1cbiAgICAgKi9cbiAgICByZWFkVWludDE2KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldFVpbnQxNih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBhIDMyLWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgcmVhZEludDMyKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgMzItYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJlYWRVaW50MzIoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0VWludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZWFkIGEgMzItYml0IGZsb2F0aW5nIG51bWJlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmRcbiAgICAgKiBAcmV0dXJuIHtudW1iZXJ9XG4gICAgICovXG4gICAgcmVhZEZsb2F0MzIoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0RmxvYXQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBhIDY0LWJpdCBmbG9hdGluZyBudW1iZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkXG4gICAgICogQHJldHVybiB7bnVtYmVyfVxuICAgICAqL1xuICAgIHJlYWRGbG9hdDY0KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEZsb2F0NjQodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgMS1ieXRlIGFzY2lpIGNoYXJhY3RlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmRcbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVhZENoYXIoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucmVhZEludDgoKSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVhZCBuIDEtYnl0ZSBhc2NpaSBjaGFyYWN0ZXJzIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZFxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSBuXG4gICAgICogQHJldHVybiB7c3RyaW5nfVxuICAgICAqL1xuICAgIHJlYWRDaGFycyhuKSB7XG4gICAgICAgIGlmIChuID09PSB1bmRlZmluZWQpIG4gPSAxO1xuICAgICAgICBjaGFyQXJyYXkubGVuZ3RoID0gbjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIGNoYXJBcnJheVtpXSA9IHRoaXMucmVhZENoYXIoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY2hhckFycmF5LmpvaW4oJycpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlYWQgdGhlIG5leHQgbiBieXRlcywgcmV0dXJuIGEgVVRGLTggZGVjb2RlZCBzdHJpbmcgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkXG4gICAgICogQHBhcmFtIHtudW1iZXJ9IG5cbiAgICAgKiBAcmV0dXJuIHtzdHJpbmd9XG4gICAgICovXG4gICAgcmVhZFV0Zjgobikge1xuICAgICAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSBuID0gMTtcbiAgICAgICAgY29uc3QgYlN0cmluZyA9IHRoaXMucmVhZENoYXJzKG4pO1xuICAgICAgICByZXR1cm4gdXRmOC5kZWNvZGUoYlN0cmluZyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgMHhmZiBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIHRydXRoeSwgMHgwMCBvdGhlcndpc2VcbiAgICAgKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICB3cml0ZUJvb2xlYW4odmFsdWUpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQ4KHZhbHVlID8gMHhmZiA6IDB4MDApO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSB2YWx1ZSBhcyBhbiA4LWJpdCBzaWduZWQgaW50ZWdlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlSW50OCh2YWx1ZSkge1xuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSgxKTtcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRJbnQ4KHRoaXMub2Zmc2V0KyssIHZhbHVlKTtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIHZhbHVlIGFzIGEgOC1iaXQgdW5zaWduZWQgaW50ZWdlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlVWludDgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMSk7XG4gICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDgodGhpcy5vZmZzZXQrKywgdmFsdWUpO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQW4gYWxpYXMgZm9yIHtAbGluayBJT0J1ZmZlciN3cml0ZVVpbnQ4fVxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlQnl0ZSh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVVpbnQ4KHZhbHVlKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSBieXRlc1xuICAgICAqIEBwYXJhbSB7QXJyYXl8VWludDhBcnJheX0gYnl0ZXNcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICB3cml0ZUJ5dGVzKGJ5dGVzKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKGJ5dGVzLmxlbmd0aCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYnl0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDgodGhpcy5vZmZzZXQrKywgYnl0ZXNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSB2YWx1ZSBhcyBhbiAxNi1iaXQgc2lnbmVkIGludGVnZXJcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICB3cml0ZUludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldEludDE2KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgdmFsdWUgYXMgYSAxNi1iaXQgdW5zaWduZWQgaW50ZWdlclxuICAgICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZVxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlVWludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldFVpbnQxNih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgMzItYml0IHNpZ25lZCBpbnRlZ2VyIGF0IHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgd3JpdGVJbnQzMih2YWx1ZSkge1xuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSg0KTtcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRJbnQzMih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIGEgMzItYml0IHVuc2lnbmVkIGludGVnZXIgYXQgdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gc2V0XG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgd3JpdGVVaW50MzIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoNCk7XG4gICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgYSAzMi1iaXQgZmxvYXRpbmcgbnVtYmVyIGF0IHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHNldFxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlRmxvYXQzMih2YWx1ZSkge1xuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSg0KTtcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRGbG9hdDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogV3JpdGUgYSA2NC1iaXQgZmxvYXRpbmcgbnVtYmVyIGF0IHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0XG4gICAgICogQHBhcmFtIHtudW1iZXJ9IHZhbHVlXG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgd3JpdGVGbG9hdDY0KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDgpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldEZsb2F0NjQodGhpcy5vZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDg7XG4gICAgICAgIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBXcml0ZSB0aGUgY2hhckNvZGUgb2YgdGhlIHBhc3NlZCBzdHJpbmcncyBmaXJzdCBjaGFyYWN0ZXIgdG8gdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIGNoYXJhY3RlciB0byBzZXRcbiAgICAgKiBAcmV0dXJuIHtJT0J1ZmZlcn1cbiAgICAgKi9cbiAgICB3cml0ZUNoYXIoc3RyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVWludDgoc3RyLmNoYXJDb2RlQXQoMCkpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdyaXRlIHRoZSBjaGFyQ29kZXMgb2YgdGhlIHBhc3NlZCBzdHJpbmcncyBjaGFyYWN0ZXJzIHRvIHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0XG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0clxuICAgICAqIEByZXR1cm4ge0lPQnVmZmVyfVxuICAgICAqL1xuICAgIHdyaXRlQ2hhcnMoc3RyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLndyaXRlVWludDgoc3RyLmNoYXJDb2RlQXQoaSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVURi04IGVuY29kZSBhbmQgd3JpdGUgdGhlIHBhc3NlZCBzdHJpbmcgdG8gdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXRcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gICAgICogQHJldHVybiB7SU9CdWZmZXJ9XG4gICAgICovXG4gICAgd3JpdGVVdGY4KHN0cikge1xuICAgICAgICBjb25zdCBiU3RyaW5nID0gdXRmOC5lbmNvZGUoc3RyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVDaGFycyhiU3RyaW5nKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFeHBvcnQgYSBVaW50OEFycmF5IHZpZXcgb2YgdGhlIGludGVybmFsIGJ1ZmZlci5cbiAgICAgKiBUaGUgdmlldyBzdGFydHMgYXQgdGhlIGJ5dGUgb2Zmc2V0IGFuZCBpdHMgbGVuZ3RoXG4gICAgICogaXMgY2FsY3VsYXRlZCB0byBzdG9wIGF0IHRoZSBsYXN0IHdyaXR0ZW4gYnl0ZSBvciB0aGUgb3JpZ2luYWwgbGVuZ3RoLlxuICAgICAqIEByZXR1cm4ge1VpbnQ4QXJyYXl9XG4gICAgICovXG4gICAgdG9BcnJheSgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHRoaXMuX2xhc3RXcml0dGVuQnl0ZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2FtZSBhcyB7QGxpbmsgSU9CdWZmZXIjdG9BcnJheX0gYnV0IHJldHVybnMgYSBCdWZmZXIgaWYgcG9zc2libGUuIE90aGVyd2lzZSByZXR1cm5zIGEgVWludDhBcnJheS5cbiAgICAgKiBAcmV0dXJuIHtCdWZmZXJ8VWludDhBcnJheX1cbiAgICAgKi9cbiAgICBnZXRCdWZmZXIoKSB7XG4gICAgICAgIGlmICh0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKHRoaXMudG9BcnJheSgpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnRvQXJyYXkoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFVwZGF0ZSB0aGUgbGFzdCB3cml0dGVuIGJ5dGUgb2Zmc2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCkge1xuICAgICAgICBpZiAodGhpcy5vZmZzZXQgPiB0aGlzLl9sYXN0V3JpdHRlbkJ5dGUpIHtcbiAgICAgICAgICAgIHRoaXMuX2xhc3RXcml0dGVuQnl0ZSA9IHRoaXMub2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElPQnVmZmVyO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBCSVRNQVBWNUhFQURFUjoge1xuICAgICAgICBMb2dpY2FsQ29sb3JTcGFjZTogeyAvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2NjMjUwMzk2LmFzcHhcbiAgICAgICAgICAgIExDU19DQUxJQlJBVEVEX1JHQjogMHgwMDAwMDAwMCxcbiAgICAgICAgICAgIExDU19zUkdCOiAweDczNTI0NzQyLCAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjYW1lbGNhc2VcbiAgICAgICAgICAgIExDU19XSU5ET1dTX0NPTE9SX1NQQUNFOiAweDU3Njk2RTIwXG4gICAgICAgIH0sXG4gICAgICAgIENvbXByZXNzaW9uOiB7IC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyNTA0MTUuYXNweFxuICAgICAgICAgICAgQklfUkdCOiAweDAwMDAsIC8vIE5vIGNvbXByZXNzaW9uXG4gICAgICAgICAgICBCSV9STEU4OiAweDAwMDEsXG4gICAgICAgICAgICBCSV9STEU0OiAweDAwMDIsXG4gICAgICAgICAgICBCSV9CSVRGSUVMRFM6IDB4MDAwMyxcbiAgICAgICAgICAgIEJJX0pQRUc6IDB4MDAwNCxcbiAgICAgICAgICAgIEJJX1BORzogMHgwMDA1LFxuICAgICAgICAgICAgQklfQ01ZSzogMHgwMDBCLFxuICAgICAgICAgICAgQklfQ01ZS1JMRTg6IDB4MDAwQyxcbiAgICAgICAgICAgIEJJX0NNWUtSTEU0OiAweDAwMERcbiAgICAgICAgfSxcbiAgICAgICAgR2FtdXRNYXBwaW5nSW50ZW50OiB7IC8vIGh0dHBzOi8vbXNkbi5taWNyb3NvZnQuY29tL2VuLXVzL2xpYnJhcnkvY2MyNTAzOTIuYXNweFxuICAgICAgICAgICAgTENTX0dNX0FCU19DT0xPUklNRVRSSUM6IDB4MDAwMDAwMDgsXG4gICAgICAgICAgICBMQ1NfR01fQlVTSU5FU1M6IDB4MDAwMDAwMDEsXG4gICAgICAgICAgICBMQ1NfR01fR1JBUEhJQ1M6IDB4MDAwMDAwMDIsXG4gICAgICAgICAgICBMQ1NfR01fSU1BR0VTOiAweDAwMDAwMDA0XG4gICAgICAgIH1cbiAgICB9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBJT0J1ZmZlciA9IHJlcXVpcmUoJ2lvYnVmZmVyJyk7XG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCcuL2NvbnN0YW50cycpO1xuY29uc3QgdGFibGVMZWZ0ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8PSA4OyBpKyspIHtcbiAgICB0YWJsZUxlZnQucHVzaCgwYjExMTExMTExIDw8IGkpO1xufVxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW1hZ2VEYXRhKSB7XG4gICAgaWYgKGltYWdlRGF0YS5iaXREZXB0aCAhPT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ09ubHkgYml0RGVwdGggb2YgMSBpcyBzdXBwb3J0ZWQnKTtcbiAgICB9XG4gICAgaWYgKCFpbWFnZURhdGEuaGVpZ2h0IHx8ICFpbWFnZURhdGEud2lkdGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZURhdGEgd2lkdGggYW5kIGhlaWdodCBhcmUgcmVxdWlyZWQnKTtcbiAgICB9XG5cbiAgICBpZiAoaW1hZ2VEYXRhLmNvbXBvbmVudHMgIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IDEgY29tcG9uZW50IGlzIHN1cHBvcnRlZCcpO1xuICAgIH1cblxuICAgIGlmIChpbWFnZURhdGEuY2hhbm5lbHMgIT09IDEpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdPbmx5IDEgY2hhbm5lbCBpcyBzdXBwb3J0ZWQnKTtcbiAgICB9XG5cbiAgICB2YXIgaW8gPSBuZXcgSU9CdWZmZXIoKTtcbiAgICAvLyBza2lwIGhlYWRlclxuICAgIGlvLnNraXAoMTQpO1xuICAgIHdyaXRlQml0bWFwVjVIZWFkZXIoaW8sIGltYWdlRGF0YSk7XG4gICAgd3JpdGVDb2xvclRhYmxlKGlvLCBpbWFnZURhdGEpO1xuICAgIGNvbnN0IGltYWdlT2Zmc2V0ID0gaW8ub2Zmc2V0O1xuICAgIHdyaXRlUGl4ZWxBcnJheShpbywgaW1hZ2VEYXRhKTtcblxuICAgIC8vIHdyaXRlIGhlYWRlciBhdCB0aGUgZW5kXG4gICAgaW8ucmV3aW5kKCk7XG4gICAgd3JpdGVCaXRtYXBGaWxlSGVhZGVyKGlvLCBpbWFnZU9mZnNldCk7XG4gICAgcmV0dXJuIGlvLmdldEJ1ZmZlcigpO1xufTtcblxuZnVuY3Rpb24gd3JpdGVQaXhlbEFycmF5KGlvLCBpbWdEYXRhKSB7XG4gICAgY29uc3Qgcm93U2l6ZSA9IE1hdGguZmxvb3IoKGltZ0RhdGEuYml0RGVwdGggKiBpbWdEYXRhLndpZHRoICsgMzEpIC8gMzIpICogNDtcbiAgICBjb25zdCBkYXRhUm93U2l6ZSA9IE1hdGguY2VpbChpbWdEYXRhLmJpdERlcHRoICogaW1nRGF0YS53aWR0aCAvIDgpO1xuICAgIGNvbnN0IHNraXBTaXplID0gcm93U2l6ZSAtIGRhdGFSb3dTaXplO1xuICAgIGNvbnN0IGJpdE92ZXJmbG93ID0gKGltZ0RhdGEuYml0RGVwdGggKiBpbWdEYXRhLndpZHRoKSAlIDg7XG4gICAgY29uc3QgYml0U2tpcCA9IGJpdE92ZXJmbG93ID09PSAwID8gMCA6IDggLSBiaXRPdmVyZmxvdztcbiAgICBjb25zdCB0b3RhbEJ5dGVzID0gcm93U2l6ZSAqIGltZ0RhdGEuaGVpZ2h0O1xuXG4gICAgdmFyIGJ5dGVBLCBieXRlQjtcbiAgICBjb25zdCBpb0RhdGEgPSBuZXcgSU9CdWZmZXIoaW1nRGF0YS5kYXRhKTtcbiAgICBsZXQgb2Zmc2V0ID0gMDsgLy8gQ3VycmVudCBvZmYgc2V0IGluIHRoZSBpb0RhdGFcbiAgICBsZXQgcmVsT2Zmc2V0ID0gMCwgaU9mZnNldCA9IDg7XG4gICAgaW8ubWFyaygpO1xuICAgIGJ5dGVCID0gaW9EYXRhLnJlYWRVaW50OCgpO1xuICAgIGZvciAodmFyIGkgPSBpbWdEYXRhLmhlaWdodCAtIDE7IGkgPj0gMDsgaS0tKSB7XG4gICAgICAgIGNvbnN0IGxhc3RSb3cgPSAoaSA9PT0gMCk7XG4gICAgICAgIGlvLnJlc2V0KCk7XG4gICAgICAgIGlvLnNraXAoaSAqIHJvd1NpemUpO1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRhdGFSb3dTaXplOyBqKyspIHtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RDb2wgPSAoaiA9PT0gZGF0YVJvd1NpemUgLSAxKTtcbiAgICAgICAgICAgIGlmIChyZWxPZmZzZXQgPD0gYml0U2tpcCAmJiBsYXN0Q29sKSB7XG4gICAgICAgICAgICAgICAgLy8gbm8gbmVlZCB0byByZWFkIG5ldyBkYXRhXG4gICAgICAgICAgICAgICAgaW8ud3JpdGVCeXRlKChieXRlQiA8PCByZWxPZmZzZXQpKTtcbiAgICAgICAgICAgICAgICBpZiAoKGJpdFNraXAgPT09IDAgfHwgYml0U2tpcCA9PT0gcmVsT2Zmc2V0KSAmJiAhbGFzdFJvdykge1xuICAgICAgICAgICAgICAgICAgICBieXRlQSA9IGJ5dGVCO1xuICAgICAgICAgICAgICAgICAgICBieXRlQiA9IGlvRGF0YS5yZWFkQnl0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAocmVsT2Zmc2V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgYnl0ZUEgPSBieXRlQjtcbiAgICAgICAgICAgICAgICBieXRlQiA9IGlvRGF0YS5yZWFkVWludDgoKTtcbiAgICAgICAgICAgICAgICBpby53cml0ZUJ5dGUoYnl0ZUEpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBieXRlQSA9IGJ5dGVCO1xuICAgICAgICAgICAgICAgIGJ5dGVCID0gaW9EYXRhLnJlYWRVaW50OCgpO1xuICAgICAgICAgICAgICAgIGlvLndyaXRlQnl0ZSgoKGJ5dGVBIDw8IHJlbE9mZnNldCkgJiB0YWJsZUxlZnRbcmVsT2Zmc2V0XSkgfCAoYnl0ZUIgPj4gaU9mZnNldCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGxhc3RDb2wpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gKGJpdE92ZXJmbG93IHx8IDgpO1xuICAgICAgICAgICAgICAgIGlvLnNraXAoc2tpcFNpemUpO1xuICAgICAgICAgICAgICAgIHJlbE9mZnNldCA9IG9mZnNldCAlIDg7XG4gICAgICAgICAgICAgICAgaU9mZnNldCA9IDggLSByZWxPZmZzZXQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIG9mZnNldCArPSA4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChyb3dTaXplID4gZGF0YVJvd1NpemUpIHtcbiAgICAgICAgLy8gbWFrZSBzdXJlIGxhc3Qgd3JpdHRlbiBieXRlIGlzIGNvcnJlY3RcbiAgICAgICAgaW8ucmVzZXQoKTtcbiAgICAgICAgaW8uc2tpcCh0b3RhbEJ5dGVzIC0gMSk7XG4gICAgICAgIGlvLndyaXRlVWludDgoMCk7XG4gICAgfVxuXG59XG5cbmZ1bmN0aW9uIHdyaXRlQ29sb3JUYWJsZShpbywgaW1nRGF0YSkge1xuICAgIC8vIENvbG9yIHRhYmxlIGlzIG9wdGlvbmFsIGZvciBiaXREZXB0aCA+PSA4XG4gICAgaWYgKGltZ0RhdGEuYml0RGVwdGggPiA4KSByZXR1cm47XG4gICAgLy8gV2Ugb25seSBoYW5kbGUgMS1iaXQgaW1hZ2VzXG4gICAgaW9cbiAgICAgICAgLndyaXRlVWludDMyKDB4MDAwMDAwMDApIC8vIGJsYWNrXG4gICAgICAgIC53cml0ZVVpbnQzMigweDAwZmZmZmZmKTsgLy93aGl0ZVxufVxuXG5mdW5jdGlvbiB3cml0ZUJpdG1hcEZpbGVIZWFkZXIoaW8sIGltYWdlT2Zmc2V0KSB7XG4gICAgLy8gMTQgYnl0ZXMgYml0bWFwIGZpbGUgaGVhZGVyXG4gICAgaW8ud3JpdGVDaGFycygnQk0nKTtcbiAgICAvLyBTaXplIG9mIEJNUCBmaWxlIGluIGJ5dGVzXG4gICAgaW8ud3JpdGVJbnQzMihpby5fbGFzdFdyaXR0ZW5CeXRlKTtcbiAgICBpby53cml0ZVVpbnQxNigwKTtcbiAgICBpby53cml0ZVVpbnQxNigwKTtcbiAgICBpby53cml0ZVVpbnQzMihpbWFnZU9mZnNldCk7XG59XG5cbmZ1bmN0aW9uIHdyaXRlQml0bWFwVjVIZWFkZXIoaW8sIGltZ0RhdGEpIHtcbiAgICAvLyBTaXplIG9mIHRoZSBoZWFkZXJcbiAgICBpb1xuICAgICAgICAud3JpdGVVaW50MzIoMTI0KSAgIC8vIEhlYWRlciBzaXplXG4gICAgICAgIC53cml0ZUludDMyKGltZ0RhdGEud2lkdGgpIC8vIGJWNVdpZHRoXG4gICAgICAgIC53cml0ZUludDMyKGltZ0RhdGEuaGVpZ2h0KSAvLyBiVjVIZWlnaHRcbiAgICAgICAgLndyaXRlVWludDE2KDEpICAgICAgICAgICAgICAgLy8gYnY1UGxhbmVzIC0gbXVzdCBiZSBzZXQgdG8gMVxuICAgICAgICAud3JpdGVVaW50MTYoaW1nRGF0YS5iaXREZXB0aCkgLy8gYlY1Qml0Q291bnRcbiAgICAgICAgLndyaXRlVWludDMyKGNvbnN0YW50cy5CSVRNQVBWNUhFQURFUi5Db21wcmVzc2lvbi5CSV9SR0IpICAvLyBiVjVDb21wcmVzc2lvbiAtIE5vIGNvbXByZXNzaW9uXG4gICAgICAgIC53cml0ZVVpbnQzMihpbWdEYXRhLndpZHRoICogaW1nRGF0YS5oZWlnaHQgKiBpbWdEYXRhLmJpdERlcHRoKSAvLyBidjVTaXplSW1hZ2UgLSBidWZmZXIgc2l6ZSAob3B0aW9uYWwgaWYgdW5jb21wcmVzc2VkKVxuICAgICAgICAud3JpdGVJbnQzMigwKSAgLy8gYlY1WFBlbHNQZXJNZXRlciAtIHJlc29sdXRpb25cbiAgICAgICAgLndyaXRlSW50MzIoMCkgIC8vIGJWNVlQZWxzUGVyTWV0ZXIgLSByZXNvbHV0aW9uXG4gICAgICAgIC53cml0ZVVpbnQzMihNYXRoLnBvdygyLCBpbWdEYXRhLmJpdERlcHRoKSlcbiAgICAgICAgLndyaXRlVWludDMyKE1hdGgucG93KDIsIGltZ0RhdGEuYml0RGVwdGgpKVxuICAgICAgICAud3JpdGVVaW50MzIoMHhmZjAwMDAwMCkgLy8gYlY1UmVkTWFza1xuICAgICAgICAud3JpdGVVaW50MzIoMHgwMGZmMDAwMCkgLy8gYlY1R3JlZW5NYXNrXG4gICAgICAgIC53cml0ZVVpbnQzMigweDAwMDBmZjAwKSAvLyBiVjVCbHVlTWFza1xuICAgICAgICAud3JpdGVVaW50MzIoMHgwMDAwMDBmZikgLy8gYlY1QWxwaGFNYXNrXG4gICAgICAgIC53cml0ZVVpbnQzMihjb25zdGFudHMuQklUTUFQVjVIRUFERVIuTG9naWNhbENvbG9yU3BhY2UuTENTX3NSR0IpXG4gICAgICAgIC5za2lwKDM2KSAgICAgICAgICAgICAgICAvLyBiVjVFbmRwb2ludHNcbiAgICAgICAgLnNraXAoMTIpICAgICAgICAgICAgICAgIC8vIGJWNUdhbW1hUmVkLCBHcmVlbiwgQmx1ZVxuICAgICAgICAud3JpdGVVaW50MzIoY29uc3RhbnRzLkJJVE1BUFY1SEVBREVSLkdhbXV0TWFwcGluZ0ludGVudC5MQ1NfR01fSU1BR0VTKVxuICAgICAgICAuc2tpcCgxMik7ICAgICAgICAgICAgICAgLy8gUHJvZmlsZURhdGEsIFByb2ZpbGVTaXplLCBSZXNlcnZlZFxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLmVuY29kZSA9IHJlcXVpcmUoJy4vZW5jb2RlJyk7XG5cbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgVElGRkRlY29kZXIgPSByZXF1aXJlKCcuL3RpZmZEZWNvZGVyJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZGVjb2RlVElGRihkYXRhLCBvcHRpb25zKSB7XG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUSUZGRGVjb2RlcihkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUob3B0aW9ucyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0YWdzID0ge1xuICAgIHN0YW5kYXJkOiByZXF1aXJlKCcuL3RhZ3Mvc3RhbmRhcmQnKSxcbiAgICBleGlmOiByZXF1aXJlKCcuL3RhZ3MvZXhpZicpLFxuICAgIGdwczogcmVxdWlyZSgnLi90YWdzL2dwcycpXG59O1xuXG5jbGFzcyBJRkQge1xuICAgIGNvbnN0cnVjdG9yKGtpbmQpIHtcbiAgICAgICAgaWYgKCFraW5kKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3Npbmcga2luZCcpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YSA9IG51bGw7XG4gICAgICAgIHRoaXMuZmllbGRzID0gbmV3IE1hcCgpO1xuICAgICAgICB0aGlzLmtpbmQgPSBraW5kO1xuICAgICAgICB0aGlzLl9tYXAgPSBudWxsO1xuICAgIH1cblxuICAgIGdldCh0YWcpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5maWVsZHMuZ2V0KHRhZyk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkcy5nZXQodGFnc1t0aGlzLmtpbmRdLnRhZ3NCeU5hbWVbdGFnXSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ2V4cGVjdGVkIGEgbnVtYmVyIG9yIHN0cmluZycpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG1hcCgpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9tYXApIHtcbiAgICAgICAgICAgIHRoaXMuX21hcCA9IHt9O1xuICAgICAgICAgICAgY29uc3QgdGFnbGlzdCA9IHRhZ3NbdGhpcy5raW5kXS50YWdzQnlJZDtcbiAgICAgICAgICAgIGZvciAodmFyIGtleSBvZiB0aGlzLmZpZWxkcy5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgICBpZiAodGFnbGlzdFtrZXldKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX21hcFt0YWdsaXN0W2tleV1dID0gdGhpcy5maWVsZHMuZ2V0KGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLl9tYXA7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElGRDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHR5cGVzID0gbmV3IE1hcChbXG4gICAgWzEsIFsxLCByZWFkQnl0ZV1dLCAgICAgICAvLyBCWVRFXG4gICAgWzIsIFsxLCByZWFkQVNDSUldXSwgICAgICAvLyBBU0NJSVxuICAgIFszLCBbMiwgcmVhZFNob3J0XV0sICAgICAgLy8gU0hPUlRcbiAgICBbNCwgWzQsIHJlYWRMb25nXV0sICAgICAgIC8vIExPTkdcbiAgICBbNSwgWzgsIHJlYWRSYXRpb25hbF1dLCAgIC8vIFJBVElPTkFMXG4gICAgWzYsIFsxLCByZWFkU0J5dGVdXSwgICAgICAvLyBTQllURVxuICAgIFs3LCBbMSwgcmVhZEJ5dGVdXSwgICAgICAgLy8gVU5ERUZJTkVEXG4gICAgWzgsIFsyLCByZWFkU1Nob3J0XV0sICAgICAvLyBTU0hPUlRcbiAgICBbOSwgWzQsIHJlYWRTTG9uZ11dLCAgICAgIC8vIFNMT05HXG4gICAgWzEwLCBbOCwgcmVhZFNSYXRpb25hbF1dLCAvLyBTUkFUSU9OQUxcbiAgICBbMTEsIFs0LCByZWFkRmxvYXRdXSwgICAgIC8vIEZMT0FUXG4gICAgWzEyLCBbOCwgcmVhZERvdWJsZV1dICAgICAvLyBET1VCTEVcbl0pO1xuXG5leHBvcnRzLmdldEJ5dGVMZW5ndGggPSBmdW5jdGlvbiAodHlwZSwgY291bnQpIHtcbiAgICByZXR1cm4gdHlwZXMuZ2V0KHR5cGUpWzBdICogY291bnQ7XG59O1xuXG5leHBvcnRzLnJlYWREYXRhID0gZnVuY3Rpb24gKGRlY29kZXIsIHR5cGUsIGNvdW50KSB7XG4gICAgcmV0dXJuIHR5cGVzLmdldCh0eXBlKVsxXShkZWNvZGVyLCBjb3VudCk7XG59O1xuXG5mdW5jdGlvbiByZWFkQnl0ZShkZWNvZGVyLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gMSkgcmV0dXJuIGRlY29kZXIucmVhZFVpbnQ4KCk7XG4gICAgdmFyIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZFVpbnQ4KCk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gcmVhZEFTQ0lJKGRlY29kZXIsIGNvdW50KSB7XG4gICAgdmFyIHN0cmluZ3MgPSBbXTtcbiAgICB2YXIgY3VycmVudFN0cmluZyA9ICcnO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICB2YXIgY2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjb2Rlci5yZWFkVWludDgoKSk7XG4gICAgICAgIGlmIChjaGFyID09PSAnXFwwJykge1xuICAgICAgICAgICAgc3RyaW5ncy5wdXNoKGN1cnJlbnRTdHJpbmcpO1xuICAgICAgICAgICAgY3VycmVudFN0cmluZyA9ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFN0cmluZyArPSBjaGFyO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChzdHJpbmdzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gc3RyaW5nc1swXTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICB9XG59XG5cbmZ1bmN0aW9uIHJlYWRTaG9ydChkZWNvZGVyLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gMSkgcmV0dXJuIGRlY29kZXIucmVhZFVpbnQxNigpO1xuICAgIHZhciBhcnJheSA9IG5ldyBVaW50MTZBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkVWludDE2KCk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gcmVhZExvbmcoZGVjb2RlciwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IDEpIHJldHVybiBkZWNvZGVyLnJlYWRVaW50MzIoKTtcbiAgICB2YXIgYXJyYXkgPSBuZXcgVWludDMyQXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZFVpbnQzMigpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlYWRSYXRpb25hbChkZWNvZGVyLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZGVjb2Rlci5yZWFkVWludDMyKCkgLyBkZWNvZGVyLnJlYWRVaW50MzIoKTtcbiAgICB9XG4gICAgdmFyIHJhdGlvbmFscyA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHJhdGlvbmFsc1tpXSA9IGRlY29kZXIucmVhZFVpbnQzMigpIC8gZGVjb2Rlci5yZWFkVWludDMyKCk7XG4gICAgfVxuICAgIHJldHVybiByYXRpb25hbHM7XG59XG5cbmZ1bmN0aW9uIHJlYWRTQnl0ZShkZWNvZGVyLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gMSkgcmV0dXJuIGRlY29kZXIucmVhZEludDgoKTtcbiAgICB2YXIgYXJyYXkgPSBuZXcgSW50OEFycmF5KGNvdW50KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcbiAgICAgICAgYXJyYXlbaV0gPSBkZWNvZGVyLnJlYWRJbnQ4KCk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gcmVhZFNTaG9ydChkZWNvZGVyLCBjb3VudCkge1xuICAgIGlmIChjb3VudCA9PT0gMSkgcmV0dXJuIGRlY29kZXIucmVhZEludDE2KCk7XG4gICAgdmFyIGFycmF5ID0gbmV3IEludDE2QXJyYXkoY291bnQpO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZEludDE2KCk7XG4gICAgfVxuICAgIHJldHVybiBhcnJheTtcbn1cblxuZnVuY3Rpb24gcmVhZFNMb25nKGRlY29kZXIsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSAxKSByZXR1cm4gZGVjb2Rlci5yZWFkSW50MzIoKTtcbiAgICB2YXIgYXJyYXkgPSBuZXcgSW50MzJBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkSW50MzIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiByZWFkU1JhdGlvbmFsKGRlY29kZXIsIGNvdW50KSB7XG4gICAgaWYgKGNvdW50ID09PSAxKSB7XG4gICAgICAgIHJldHVybiBkZWNvZGVyLnJlYWRJbnQzMigpIC8gZGVjb2Rlci5yZWFkSW50MzIoKTtcbiAgICB9XG4gICAgdmFyIHJhdGlvbmFscyA9IG5ldyBBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIHJhdGlvbmFsc1tpXSA9IGRlY29kZXIucmVhZEludDMyKCkgLyBkZWNvZGVyLnJlYWRJbnQzMigpO1xuICAgIH1cbiAgICByZXR1cm4gcmF0aW9uYWxzO1xufVxuXG5mdW5jdGlvbiByZWFkRmxvYXQoZGVjb2RlciwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IDEpIHJldHVybiBkZWNvZGVyLnJlYWRGbG9hdDMyKCk7XG4gICAgdmFyIGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkRmxvYXQzMigpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHJlYWREb3VibGUoZGVjb2RlciwgY291bnQpIHtcbiAgICBpZiAoY291bnQgPT09IDEpIHJldHVybiBkZWNvZGVyLnJlYWRGbG9hdDY0KCk7XG4gICAgdmFyIGFycmF5ID0gbmV3IEZsb2F0NjRBcnJheShjb3VudCk7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkRmxvYXQ2NCgpO1xuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgdGFnc0J5SWQgPSB7XG4gICAgMHg4MjlBOiAnRXhwb3N1cmVUaW1lJyxcbiAgICAweDgyOUQ6ICdGTnVtYmVyJyxcbiAgICAweDg4MjI6ICdFeHBvc3VyZVByb2dyYW0nLFxuICAgIDB4ODgyNDogJ1NwZWN0cmFsU2Vuc2l0aXZpdHknLFxuICAgIDB4ODgyNzogJ0lTT1NwZWVkUmF0aW5ncycsXG4gICAgMHg4ODI4OiAnT0VDRicsXG4gICAgMHg4ODMwOiAnU2Vuc2l0aXZpdHlUeXBlJyxcbiAgICAweDg4MzE6ICdTdGFuZGFyZE91dHB1dFNlbnNpdGl2aXR5JyxcbiAgICAweDg4MzI6ICdSZWNvbW1lbmRlZEV4cG9zdXJlSW5kZXgnLFxuICAgIDB4ODgzMzogJ0lTT1NwZWVkJyxcbiAgICAweDg4MzQ6ICdJU09TcGVlZExhdGl0dWRleXl5JyxcbiAgICAweDg4MzU6ICdJU09TcGVlZExhdGl0dWRlenp6JyxcbiAgICAweDkwMDA6ICdFeGlmVmVyc2lvbicsXG4gICAgMHg5MDAzOiAnRGF0ZVRpbWVPcmlnaW5hbCcsXG4gICAgMHg5MDA0OiAnRGF0ZVRpbWVEaWdpdGl6ZWQnLFxuICAgIDB4OTEwMTogJ0NvbXBvbmVudHNDb25maWd1cmF0aW9uJyxcbiAgICAweDkxMDI6ICdDb21wcmVzc2VkQml0c1BlclBpeGVsJyxcbiAgICAweDkyMDE6ICdTaHV0dGVyU3BlZWRWYWx1ZScsXG4gICAgMHg5MjAyOiAnQXBlcnR1cmVWYWx1ZScsXG4gICAgMHg5MjAzOiAnQnJpZ2h0bmVzc1ZhbHVlJyxcbiAgICAweDkyMDQ6ICdFeHBvc3VyZUJpYXNWYWx1ZScsXG4gICAgMHg5MjA1OiAnTWF4QXBlcnR1cmVWYWx1ZScsXG4gICAgMHg5MjA2OiAnU3ViamVjdERpc3RhbmNlJyxcbiAgICAweDkyMDc6ICdNZXRlcmluZ01vZGUnLFxuICAgIDB4OTIwODogJ0xpZ2h0U291cmNlJyxcbiAgICAweDkyMDk6ICdGbGFzaCcsXG4gICAgMHg5MjBBOiAnRm9jYWxMZW5ndGgnLFxuICAgIDB4OTIxNDogJ1N1YmplY3RBcmVhJyxcbiAgICAweDkyN0M6ICdNYWtlck5vdGUnLFxuICAgIDB4OTI4NjogJ1VzZXJDb21tZW50JyxcbiAgICAweDkyOTA6ICdTdWJzZWNUaW1lJyxcbiAgICAweDkyOTE6ICdTdWJzZWNUaW1lT3JpZ2luYWwnLFxuICAgIDB4OTI5MjogJ1N1YnNlY1RpbWVEaWdpdGl6ZWQnLFxuICAgIDB4QTAwMDogJ0ZsYXNocGl4VmVyc2lvbicsXG4gICAgMHhBMDAxOiAnQ29sb3JTcGFjZScsXG4gICAgMHhBMDAyOiAnUGl4ZWxYRGltZW5zaW9uJyxcbiAgICAweEEwMDM6ICdQaXhlbFlEaW1lbnNpb24nLFxuICAgIDB4QTAwNDogJ1JlbGF0ZWRTb3VuZEZpbGUnLFxuICAgIDB4QTIwQjogJ0ZsYXNoRW5lcmd5JyxcbiAgICAweEEyMEM6ICdTcGF0aWFsRnJlcXVlbmN5UmVzcG9uc2UnLFxuICAgIDB4QTIwRTogJ0ZvY2FsUGxhbmVYUmVzb2x1dGlvbicsXG4gICAgMHhBMjBGOiAnRm9jYWxQbGFuZVlSZXNvbHV0aW9uJyxcbiAgICAweEEyMTA6ICdGb2NhbFBsYW5lUmVzb2x1dGlvblVuaXQnLFxuICAgIDB4QTIxNDogJ1N1YmplY3RMb2NhdGlvbicsXG4gICAgMHhBMjE1OiAnRXhwb3N1cmVJbmRleCcsXG4gICAgMHhBMjE3OiAnU2Vuc2luZ01ldGhvZCcsXG4gICAgMHhBMzAwOiAnRmlsZVNvdXJjZScsXG4gICAgMHhBMzAxOiAnU2NlbmVUeXBlJyxcbiAgICAweEEzMDI6ICdDRkFQYXR0ZXJuJyxcbiAgICAweEE0MDE6ICdDdXN0b21SZW5kZXJlZCcsXG4gICAgMHhBNDAyOiAnRXhwb3N1cmVNb2RlJyxcbiAgICAweEE0MDM6XHQnV2hpdGVCYWxhbmNlJyxcbiAgICAweEE0MDQ6XHQnRGlnaXRhbFpvb21SYXRpbycsXG4gICAgMHhBNDA1Olx0J0ZvY2FsTGVuZ3RoSW4zNW1tRmlsbScsXG4gICAgMHhBNDA2Olx0J1NjZW5lQ2FwdHVyZVR5cGUnLFxuICAgIDB4QTQwNzpcdCdHYWluQ29udHJvbCcsXG4gICAgMHhBNDA4Olx0J0NvbnRyYXN0JyxcbiAgICAweEE0MDk6XHQnU2F0dXJhdGlvbicsXG4gICAgMHhBNDBBOlx0J1NoYXJwbmVzcycsXG4gICAgMHhBNDBCOlx0J0RldmljZVNldHRpbmdEZXNjcmlwdGlvbicsXG4gICAgMHhBNDBDOlx0J1N1YmplY3REaXN0YW5jZVJhbmdlJyxcbiAgICAweEE0MjA6XHQnSW1hZ2VVbmlxdWVJRCcsXG4gICAgMHhBNDMwOiAnQ2FtZXJhT3duZXJOYW1lJyxcbiAgICAweEE0MzE6ICdCb2R5U2VyaWFsTnVtYmVyJyxcbiAgICAweEE0MzI6ICdMZW5zU3BlY2lmaWNhdGlvbicsXG4gICAgMHhBNDMzOiAnTGVuc01ha2UnLFxuICAgIDB4QTQzNDogJ0xlbnNNb2RlbCcsXG4gICAgMHhBNDM1OiAnTGVuc1NlcmlhbE51bWJlcicsXG4gICAgMHhBNTAwOiAnR2FtbWEnXG59O1xuXG5jb25zdCB0YWdzQnlOYW1lID0ge307XG5mb3IgKHZhciBpIGluIHRhZ3NCeUlkKSB7XG4gICAgdGFnc0J5TmFtZVt0YWdzQnlJZFtpXV0gPSBpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0YWdzQnlJZCxcbiAgICB0YWdzQnlOYW1lXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB0YWdzQnlJZCA9IHtcbiAgICAweDAwMDA6ICdHUFNWZXJzaW9uSUQnLFxuICAgIDB4MDAwMTogJ0dQU0xhdGl0dWRlUmVmJyxcbiAgICAweDAwMDI6ICdHUFNMYXRpdHVkZScsXG4gICAgMHgwMDAzOiAnR1BTTG9uZ2l0dWRlUmVmJyxcbiAgICAweDAwMDQ6ICdHUFNMb25naXR1ZGUnLFxuICAgIDB4MDAwNTogJ0dQU0FsdGl0dWRlUmVmJyxcbiAgICAweDAwMDY6ICdHUFNBbHRpdHVkZScsXG4gICAgMHgwMDA3OiAnR1BTVGltZVN0YW1wJyxcbiAgICAweDAwMDg6ICdHUFNTYXRlbGxpdGVzJyxcbiAgICAweDAwMDk6ICdHUFNTdGF0dXMnLFxuICAgIDB4MDAwQTogJ0dQU01lYXN1cmVNb2RlJyxcbiAgICAweDAwMEI6ICdHUFNET1AnLFxuICAgIDB4MDAwQzogJ0dQU1NwZWVkUmVmJyxcbiAgICAweDAwMEQ6ICdHUFNTcGVlZCcsXG4gICAgMHgwMDBFOiAnR1BTVHJhY2tSZWYnLFxuICAgIDB4MDAwRjogJ0dQU1RyYWNrJyxcbiAgICAweDAwMTA6ICdHUFNJbWdEaXJlY3Rpb25SZWYnLFxuICAgIDB4MDAxMTogJ0dQU0ltZ0RpcmVjdGlvbicsXG4gICAgMHgwMDEyOiAnR1BTTWFwRGF0dW0nLFxuICAgIDB4MDAxMzogJ0dQU0Rlc3RMYXRpdHVkZVJlZicsXG4gICAgMHgwMDE0OiAnR1BTRGVzdExhdGl0dWRlJyxcbiAgICAweDAwMTU6ICdHUFNEZXN0TG9uZ2l0dWRlUmVmJyxcbiAgICAweDAwMTY6ICdHUFNEZXN0TG9uZ2l0dWRlJyxcbiAgICAweDAwMTc6ICdHUFNEZXN0QmVhcmluZ1JlZicsXG4gICAgMHgwMDE4OiAnR1BTRGVzdEJlYXJpbmcnLFxuICAgIDB4MDAxOTogJ0dQU0Rlc3REaXN0YW5jZVJlZicsXG4gICAgMHgwMDFBOiAnR1BTRGVzdERpc3RhbmNlJyxcbiAgICAweDAwMUI6ICdHUFNQcm9jZXNzaW5nTWV0aG9kJyxcbiAgICAweDAwMUM6ICdHUFNBcmVhSW5mb3JtYXRpb24nLFxuICAgIDB4MDAxRDogJ0dQU0RhdGVTdGFtcCcsXG4gICAgMHgwMDFFOiAnR1BTRGlmZmVyZW50aWFsJyxcbiAgICAweDAwMUY6ICdHUFNIUG9zaXRpb25pbmdFcnJvcidcbn07XG5cbmNvbnN0IHRhZ3NCeU5hbWUgPSB7fTtcbmZvciAodmFyIGkgaW4gdGFnc0J5SWQpIHtcbiAgICB0YWdzQnlOYW1lW3RhZ3NCeUlkW2ldXSA9IGk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIHRhZ3NCeUlkLFxuICAgIHRhZ3NCeU5hbWVcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHRhZ3NCeUlkID0ge1xuICAgIC8vIEJhc2VsaW5lIHRhZ3NcbiAgICAweDAwRkU6ICdOZXdTdWJmaWxlVHlwZScsXG4gICAgMHgwMEZGOiAnU3ViZmlsZVR5cGUnLFxuICAgIDB4MDEwMDogJ0ltYWdlV2lkdGgnLFxuICAgIDB4MDEwMTogJ0ltYWdlTGVuZ3RoJyxcbiAgICAweDAxMDI6ICdCaXRzUGVyU2FtcGxlJyxcbiAgICAweDAxMDM6ICdDb21wcmVzc2lvbicsXG4gICAgMHgwMTA2OiAnUGhvdG9tZXRyaWNJbnRlcnByZXRhdGlvbicsXG4gICAgMHgwMTA3OiAnVGhyZXNoaG9sZGluZycsXG4gICAgMHgwMTA4OiAnQ2VsbFdpZHRoJyxcbiAgICAweDAxMDk6ICdDZWxsTGVuZ3RoJyxcbiAgICAweDAxMEE6ICdGaWxsT3JkZXInLFxuICAgIDB4MDEwRTogJ0ltYWdlRGVzY3JpcHRpb24nLFxuICAgIDB4MDEwRjogJ01ha2UnLFxuICAgIDB4MDExMDogJ01vZGVsJyxcbiAgICAweDAxMTE6ICdTdHJpcE9mZnNldHMnLFxuICAgIDB4MDExMjogJ09yaWVudGF0aW9uJyxcbiAgICAweDAxMTU6ICdTYW1wbGVzUGVyUGl4ZWwnLFxuICAgIDB4MDExNjogJ1Jvd3NQZXJTdHJpcCcsXG4gICAgMHgwMTE3OiAnU3RyaXBCeXRlQ291bnRzJyxcbiAgICAweDAxMTg6ICdNaW5TYW1wbGVWYWx1ZScsXG4gICAgMHgwMTE5OiAnTWF4U2FtcGxlVmFsdWUnLFxuICAgIDB4MDExQTogJ1hSZXNvbHV0aW9uJyxcbiAgICAweDAxMUI6ICdZUmVzb2x1dGlvbicsXG4gICAgMHgwMTFDOiAnUGxhbmFyQ29uZmlndXJhdGlvbicsXG4gICAgMHgwMTIwOiAnRnJlZU9mZnNldHMnLFxuICAgIDB4MDEyMTogJ0ZyZWVCeXRlQ291bnRzJyxcbiAgICAweDAxMjI6ICdHcmF5UmVzcG9uc2VVbml0JyxcbiAgICAweDAxMjM6ICdHcmF5UmVzcG9uc2VDdXJ2ZScsXG4gICAgMHgwMTI4OiAnUmVzb2x1dGlvblVuaXQnLFxuICAgIDB4MDEzMTogJ1NvZnR3YXJlJyxcbiAgICAweDAxMzI6ICdEYXRlVGltZScsXG4gICAgMHgwMTNCOiAnQXJ0aXN0JyxcbiAgICAweDAxM0M6ICdIb3N0Q29tcHV0ZXInLFxuICAgIDB4MDE0MDogJ0NvbG9yTWFwJyxcbiAgICAweDAxNTI6ICdFeHRyYVNhbXBsZXMnLFxuICAgIDB4ODI5ODogJ0NvcHlyaWdodCcsXG5cbiAgICAvLyBFeHRlbnNpb24gdGFnc1xuICAgIDB4MDEwRDogJ0RvY3VtZW50TmFtZScsXG4gICAgMHgwMTFEOiAnUGFnZU5hbWUnLFxuICAgIDB4MDExRTogJ1hQb3NpdGlvbicsXG4gICAgMHgwMTFGOiAnWVBvc2l0aW9uJyxcbiAgICAweDAxMjQ6ICdUNE9wdGlvbnMnLFxuICAgIDB4MDEyNTogJ1Q2T3B0aW9ucycsXG4gICAgMHgwMTI5OiAnUGFnZU51bWJlcicsXG4gICAgMHgwMTJEOiAnVHJhbnNmZXJGdW5jdGlvbicsXG4gICAgMHgwMTNEOiAnUHJlZGljdG9yJyxcbiAgICAweDAxM0U6ICdXaGl0ZVBvaW50JyxcbiAgICAweDAxM0Y6ICdQcmltYXJ5Q2hyb21hdGljaXRpZXMnLFxuICAgIDB4MDE0MTogJ0hhbGZ0b25lSGludHMnLFxuICAgIDB4MDE0MjogJ1RpbGVXaWR0aCcsXG4gICAgMHgwMTQzOiAnVGlsZUxlbmd0aCcsXG4gICAgMHgwMTQ0OiAnVGlsZU9mZnNldHMnLFxuICAgIDB4MDE0NTogJ1RpbGVCeXRlQ291bnRzJyxcbiAgICAweDAxNDY6ICdCYWRGYXhMaW5lcycsXG4gICAgMHgwMTQ3OiAnQ2xlYW5GYXhEYXRhJyxcbiAgICAweDAxNDg6ICdDb25zZWN1dGl2ZUJhZEZheExpbmVzJyxcbiAgICAweDAxNEE6ICdTdWJJRkRzJyxcbiAgICAweDAxNEM6ICdJbmtTZXQnLFxuICAgIDB4MDE0RDogJ0lua05hbWVzJyxcbiAgICAweDAxNEU6ICdOdW1iZXJPZklua3MnLFxuICAgIDB4MDE1MDogJ0RvdFJhbmdlJyxcbiAgICAweDAxNTE6ICdUYXJnZXRQcmludGVyJyxcbiAgICAweDAxNTM6ICdTYW1wbGVGb3JtYXQnLFxuICAgIDB4MDE1NDogJ1NNaW5TYW1wbGVWYWx1ZScsXG4gICAgMHgwMTU1OiAnU01heFNhbXBsZVZhbHVlJyxcbiAgICAweDAxNTY6ICdUcmFuc2ZlclJhbmdlJyxcbiAgICAweDAxNTc6ICdDbGlwUGF0aCcsXG4gICAgMHgwMTU4OiAnWENsaXBQYXRoVW5pdHMnLFxuICAgIDB4MDE1OTogJ1lDbGlwUGF0aFVuaXRzJyxcbiAgICAweDAxNUE6ICdJbmRleGVkJyxcbiAgICAweDAxNUI6ICdKUEVHVGFibGVzJyxcbiAgICAweDAxNUY6ICdPUElQcm94eScsXG4gICAgMHgwMTkwOiAnR2xvYmFsUGFyYW1ldGVyc0lGRCcsXG4gICAgMHgwMTkxOiAnUHJvZmlsZVR5cGUnLFxuICAgIDB4MDE5MjogJ0ZheFByb2ZpbGUnLFxuICAgIDB4MDE5MzogJ0NvZGluZ01ldGhvZHMnLFxuICAgIDB4MDE5NDogJ1ZlcnNpb25ZZWFyJyxcbiAgICAweDAxOTU6ICdNb2RlTnVtYmVyJyxcbiAgICAweDAxQjE6ICdEZWNvZGUnLFxuICAgIDB4MDFCMjogJ0RlZmF1bHRJbWFnZUNvbG9yJyxcbiAgICAweDAyMDA6ICdKUEVHUHJvYycsXG4gICAgMHgwMjAxOiAnSlBFR0ludGVyY2hhbmdlRm9ybWF0JyxcbiAgICAweDAyMDI6ICdKUEVHSW50ZXJjaGFuZ2VGb3JtYXRMZW5ndGgnLFxuICAgIDB4MDIwMzogJ0pQRUdSZXN0YXJ0SW50ZXJ2YWwnLFxuICAgIDB4MDIwNTogJ0pQRUdMb3NzbGVzc1ByZWRpY3RvcnMnLFxuICAgIDB4MDIwNjogJ0pQRUdQb2ludFRyYW5zZm9ybXMnLFxuICAgIDB4MDIwNzogJ0pQRUdRVGFibGVzJyxcbiAgICAweDAyMDg6ICdKUEVHRENUYWJsZXMnLFxuICAgIDB4MDIwOTogJ0pQRUdBQ1RhYmxlcycsXG4gICAgMHgwMjExOiAnWUNiQ3JDb2VmZmljaWVudHMnLFxuICAgIDB4MDIxMjogJ1lDYkNyU3ViU2FtcGxpbmcnLFxuICAgIDB4MDIxMzogJ1lDYkNyUG9zaXRpb25pbmcnLFxuICAgIDB4MDIxNDogJ1JlZmVyZW5jZUJsYWNrV2hpdGUnLFxuICAgIDB4MDIyRjogJ1N0cmlwUm93Q291bnRzJyxcbiAgICAweDAyQkM6ICdYTVAnLFxuICAgIDB4ODAwRDogJ0ltYWdlSUQnLFxuICAgIDB4ODdBQzogJ0ltYWdlTGF5ZXInLFxuXG4gICAgLy8gUHJpdmF0ZSB0YWdzXG4gICAgMHg4MEE0OiAnV2FuZ0Fubm90YXRpbycsXG4gICAgMHg4MkE1OiAnTURGaWxlVGFnJyxcbiAgICAweDgyQTY6ICdNRFNjYWxlUGl4ZWwnLFxuICAgIDB4ODJBNzogJ01EQ29sb3JUYWJsZScsXG4gICAgMHg4MkE4OiAnTURMYWJOYW1lJyxcbiAgICAweDgyQTk6ICdNRFNhbXBsZUluZm8nLFxuICAgIDB4ODJBQTogJ01EUHJlcERhdGUnLFxuICAgIDB4ODJBQjogJ01EUHJlcFRpbWUnLFxuICAgIDB4ODJBQzogJ01ERmlsZVVuaXRzJyxcbiAgICAweDgzMEU6ICdNb2RlbFBpeGVsU2NhbGVUYWcnLFxuICAgIDB4ODNCQjogJ0lQVEMnLFxuICAgIDB4ODQ3RTogJ0lOR1JQYWNrZXREYXRhVGFnJyxcbiAgICAweDg0N0Y6ICdJTkdSRmxhZ1JlZ2lzdGVycycsXG4gICAgMHg4NDgwOiAnSXJhc0JUcmFuc2Zvcm1hdGlvbk1hdHJpeCcsXG4gICAgMHg4NDgyOiAnTW9kZWxUaWVwb2ludFRhZycsXG4gICAgMHg4NUQ4OiAnTW9kZWxUcmFuc2Zvcm1hdGlvblRhZycsXG4gICAgMHg4NjQ5OiAnUGhvdG9zaG9wJyxcbiAgICAweDg3Njk6ICdFeGlmSUZEJyxcbiAgICAweDg3NzM6ICdJQ0NQcm9maWxlJyxcbiAgICAweDg3QUY6ICdHZW9LZXlEaXJlY3RvcnlUYWcnLFxuICAgIDB4ODdCMDogJ0dlb0RvdWJsZVBhcmFtc1RhZycsXG4gICAgMHg4N0IxOiAnR2VvQXNjaWlQYXJhbXNUYWcnLFxuICAgIDB4ODgyNTogJ0dQU0lGRCcsXG4gICAgMHg4ODVDOiAnSHlsYUZBWEZheFJlY3ZQYXJhbXMnLFxuICAgIDB4ODg1RDogJ0h5bGFGQVhGYXhTdWJBZGRyZXNzJyxcbiAgICAweDg4NUU6ICdIeWxhRkFYRmF4UmVjdlRpbWUnLFxuICAgIDB4OTM1QzogJ0ltYWdlU291cmNlRGF0YScsXG4gICAgMHhBMDA1OiAnSW50ZXJvcGVyYWJpbGl0eUlGRCcsXG4gICAgMHhBNDgwOiAnR0RBTF9NRVRBREFUQScsXG4gICAgMHhBNDgxOiAnR0RBTF9OT0RBVEEnLFxuICAgIDB4QzQyNzogJ09jZVNjYW5qb2JEZXNjcmlwdGlvbicsXG4gICAgMHhDNDI4OiAnT2NlQXBwbGljYXRpb25TZWxlY3RvcicsXG4gICAgMHhDNDI5OiAnT2NlSWRlbnRpZmljYXRpb25OdW1iZXInLFxuICAgIDB4QzQyQTogJ09jZUltYWdlTG9naWNDaGFyYWN0ZXJpc3RpY3MnLFxuICAgIDB4QzYxMjogJ0ROR1ZlcnNpb24nLFxuICAgIDB4QzYxMzogJ0ROR0JhY2t3YXJkVmVyc2lvbicsXG4gICAgMHhDNjE0OiAnVW5pcXVlQ2FtZXJhTW9kZWwnLFxuICAgIDB4QzYxNTogJ0xvY2FsaXplZENhbWVyYU1vZGVsJyxcbiAgICAweEM2MTY6ICdDRkFQbGFuZUNvbG9yJyxcbiAgICAweEM2MTc6ICdDRkFMYXlvdXQnLFxuICAgIDB4QzYxODogJ0xpbmVhcml6YXRpb25UYWJsZScsXG4gICAgMHhDNjE5OiAnQmxhY2tMZXZlbFJlcGVhdERpbScsXG4gICAgMHhDNjFBOiAnQmxhY2tMZXZlbCcsXG4gICAgMHhDNjFCOiAnQmxhY2tMZXZlbERlbHRhSCcsXG4gICAgMHhDNjFDOiAnQmxhY2tMZXZlbERlbHRhVicsXG4gICAgMHhDNjFEOiAnV2hpdGVMZXZlbCcsXG4gICAgMHhDNjFFOiAnRGVmYXVsdFNjYWxlJyxcbiAgICAweEM2MUY6ICdEZWZhdWx0Q3JvcE9yaWdpbicsXG4gICAgMHhDNjIwOiAnRGVmYXVsdENyb3BTaXplJyxcbiAgICAweEM2MjE6ICdDb2xvck1hdHJpeDEnLFxuICAgIDB4QzYyMjogJ0NvbG9yTWF0cml4MicsXG4gICAgMHhDNjIzOiAnQ2FtZXJhQ2FsaWJyYXRpb24xJyxcbiAgICAweEM2MjQ6ICdDYW1lcmFDYWxpYnJhdGlvbjInLFxuICAgIDB4QzYyNTogJ1JlZHVjdGlvbk1hdHJpeDEnLFxuICAgIDB4QzYyNjogJ1JlZHVjdGlvbk1hdHJpeDInLFxuICAgIDB4QzYyNzogJ0FuYWxvZ0JhbGFuY2UnLFxuICAgIDB4QzYyODogJ0FzU2hvdE5ldXRyYWwnLFxuICAgIDB4QzYyOTogJ0FzU2hvdFdoaXRlWFknLFxuICAgIDB4QzYyQTogJ0Jhc2VsaW5lRXhwb3N1cmUnLFxuICAgIDB4QzYyQjogJ0Jhc2VsaW5lTm9pc2UnLFxuICAgIDB4QzYyQzogJ0Jhc2VsaW5lU2hhcnBuZXNzJyxcbiAgICAweEM2MkQ6ICdCYXllckdyZWVuU3BsaXQnLFxuICAgIDB4QzYyRTogJ0xpbmVhclJlc3BvbnNlTGltaXQnLFxuICAgIDB4QzYyRjogJ0NhbWVyYVNlcmlhbE51bWJlcicsXG4gICAgMHhDNjMwOiAnTGVuc0luZm8nLFxuICAgIDB4QzYzMTogJ0Nocm9tYUJsdXJSYWRpdXMnLFxuICAgIDB4QzYzMjogJ0FudGlBbGlhc1N0cmVuZ3RoJyxcbiAgICAweEM2MzQ6ICdETkdQcml2YXRlRGF0YScsXG4gICAgMHhDNjM1OiAnTWFrZXJOb3RlU2FmZXR5JyxcbiAgICAweEM2NUE6ICdDYWxpYnJhdGlvbklsbHVtaW5hbnQxJyxcbiAgICAweEM2NUI6ICdDYWxpYnJhdGlvbklsbHVtaW5hbnQyJyxcbiAgICAweEM2NUM6ICdCZXN0UXVhbGl0eVNjYWxlJyxcbiAgICAweEM2NjA6ICdBbGlhc0xheWVyTWV0YWRhdGEnXG59O1xuXG5jb25zdCB0YWdzQnlOYW1lID0ge307XG5mb3IgKHZhciBpIGluIHRhZ3NCeUlkKSB7XG4gICAgdGFnc0J5TmFtZVt0YWdzQnlJZFtpXV0gPSBpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICB0YWdzQnlJZCxcbiAgICB0YWdzQnlOYW1lXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBJT0J1ZmZlciA9IHJlcXVpcmUoJ2lvYnVmZmVyJyk7XG5jb25zdCBJRkQgPSByZXF1aXJlKCcuL2lmZCcpO1xuY29uc3QgVGlmZklGRCA9IHJlcXVpcmUoJy4vdGlmZklmZCcpO1xuY29uc3QgSUZEVmFsdWUgPSByZXF1aXJlKCcuL2lmZFZhbHVlJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICAgIGlnbm9yZUltYWdlRGF0YTogZmFsc2UsXG4gICAgb25seUZpcnN0OiBmYWxzZVxufTtcblxuY2xhc3MgVElGRkRlY29kZXIgZXh0ZW5kcyBJT0J1ZmZlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihkYXRhLCBvcHRpb25zKTtcbiAgICAgICAgdGhpcy5fbmV4dElGRCA9IDA7XG4gICAgfVxuXG4gICAgZGVjb2RlKG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgICAgIHRoaXMuZGVjb2RlSGVhZGVyKCk7XG4gICAgICAgIHdoaWxlICh0aGlzLl9uZXh0SUZEKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaCh0aGlzLmRlY29kZUlGRChvcHRpb25zKSk7XG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vbmx5Rmlyc3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0WzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgZGVjb2RlSGVhZGVyKCkge1xuICAgICAgICAvLyBCeXRlIG9mZnNldFxuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLnJlYWRVaW50MTYoKTtcbiAgICAgICAgaWYgKHZhbHVlID09PSAweDQ5NDkpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0TGl0dGxlRW5kaWFuKCk7XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09IDB4NEQ0RCkge1xuICAgICAgICAgICAgdGhpcy5zZXRCaWdFbmRpYW4oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaW52YWxpZCBieXRlIG9yZGVyOiAweCcgKyB2YWx1ZS50b1N0cmluZygxNikpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gTWFnaWMgbnVtYmVyXG4gICAgICAgIHZhbHVlID0gdGhpcy5yZWFkVWludDE2KCk7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gNDIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignbm90IGEgVElGRiBmaWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBPZmZzZXQgb2YgdGhlIGZpcnN0IElGRFxuICAgICAgICB0aGlzLl9uZXh0SUZEID0gdGhpcy5yZWFkVWludDMyKCk7XG4gICAgfVxuXG4gICAgZGVjb2RlSUZEKG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5zZWVrKHRoaXMuX25leHRJRkQpO1xuXG4gICAgICAgIHZhciBpZmQ7XG4gICAgICAgIGlmICghb3B0aW9ucy5raW5kKSB7XG4gICAgICAgICAgICBpZmQgPSBuZXcgVGlmZklGRCgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWZkID0gbmV3IElGRChvcHRpb25zLmtpbmQpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbnVtRW50cmllcyA9IHRoaXMucmVhZFVpbnQxNigpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG51bUVudHJpZXM7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5kZWNvZGVJRkRFbnRyeShpZmQpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghb3B0aW9ucy5pZ25vcmVJbWFnZURhdGEpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSW1hZ2VEYXRhKGlmZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmV4dElGRCA9IHRoaXMucmVhZFVpbnQzMigpO1xuICAgICAgICByZXR1cm4gaWZkO1xuICAgIH1cblxuICAgIGRlY29kZUlGREVudHJ5KGlmZCkge1xuICAgICAgICBjb25zdCBvZmZzZXQgPSB0aGlzLm9mZnNldDtcbiAgICAgICAgY29uc3QgdGFnID0gdGhpcy5yZWFkVWludDE2KCk7XG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnJlYWRVaW50MTYoKTtcbiAgICAgICAgY29uc3QgbnVtVmFsdWVzID0gdGhpcy5yZWFkVWludDMyKCk7XG5cbiAgICAgICAgaWYgKHR5cGUgPCAxIHx8IHR5cGUgPiAxMikge1xuICAgICAgICAgICAgdGhpcy5za2lwKDQpOyAvLyB1bmtub3duIHR5cGUsIHNraXAgdGhpcyB2YWx1ZVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgdmFsdWVCeXRlTGVuZ3RoID0gSUZEVmFsdWUuZ2V0Qnl0ZUxlbmd0aCh0eXBlLCBudW1WYWx1ZXMpO1xuICAgICAgICBpZiAodmFsdWVCeXRlTGVuZ3RoID4gNCkge1xuICAgICAgICAgICAgdGhpcy5zZWVrKHRoaXMucmVhZFVpbnQzMigpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZhbHVlID0gSUZEVmFsdWUucmVhZERhdGEodGhpcywgdHlwZSwgbnVtVmFsdWVzKTtcbiAgICAgICAgaWZkLmZpZWxkcy5zZXQodGFnLCB2YWx1ZSk7XG5cbiAgICAgICAgLy8gUmVhZCBzdWItSUZEc1xuICAgICAgICBpZiAodGFnID09PSAweDg3NjkgfHwgdGFnID09PSAweDg4MjUpIHtcbiAgICAgICAgICAgIGxldCBjdXJyZW50T2Zmc2V0ID0gdGhpcy5vZmZzZXQ7XG4gICAgICAgICAgICBsZXQga2luZDtcbiAgICAgICAgICAgIGlmICh0YWcgPT09IDB4ODc2OSkge1xuICAgICAgICAgICAgICAgIGtpbmQgPSAnZXhpZic7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHRhZyA9PT0gMHg4ODI1KSB7XG4gICAgICAgICAgICAgICAga2luZCA9ICdncHMnO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fbmV4dElGRCA9IHZhbHVlO1xuICAgICAgICAgICAgaWZkW2tpbmRdID0gdGhpcy5kZWNvZGVJRkQoe1xuICAgICAgICAgICAgICAgIGtpbmQsXG4gICAgICAgICAgICAgICAgaWdub3JlSW1hZ2VEYXRhOiB0cnVlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMub2Zmc2V0ID0gY3VycmVudE9mZnNldDtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGdvIHRvIHRoZSBuZXh0IGVudHJ5XG4gICAgICAgIHRoaXMuc2VlayhvZmZzZXQpO1xuICAgICAgICB0aGlzLnNraXAoMTIpO1xuICAgIH1cblxuICAgIGRlY29kZUltYWdlRGF0YShpZmQpIHtcbiAgICAgICAgY29uc3Qgb3JpZW50YXRpb24gPSBpZmQub3JpZW50YXRpb247XG4gICAgICAgIGlmIChvcmllbnRhdGlvbiAmJiBvcmllbnRhdGlvbiAhPT0gMSkge1xuICAgICAgICAgICAgdW5zdXBwb3J0ZWQoJ29yaWVudGF0aW9uJywgb3JpZW50YXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAoaWZkLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgMTogLy8gQmxhY2tJc1plcm9cbiAgICAgICAgICAgIGNhc2UgMjogLy8gUkdCXG4gICAgICAgICAgICAgICAgdGhpcy5yZWFkU3RyaXBEYXRhKGlmZCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHVuc3VwcG9ydGVkKCdpbWFnZSB0eXBlJywgaWZkLnR5cGUpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmVhZFN0cmlwRGF0YShpZmQpIHtcbiAgICAgICAgY29uc3Qgd2lkdGggPSBpZmQud2lkdGg7XG4gICAgICAgIGNvbnN0IGhlaWdodCA9IGlmZC5oZWlnaHQ7XG5cbiAgICAgICAgY29uc3QgYml0RGVwdGggPSB2YWxpZGF0ZUJpdERlcHRoKGlmZC5iaXRzUGVyU2FtcGxlKTtcbiAgICAgICAgY29uc3Qgc2FtcGxlRm9ybWF0ID0gaWZkLnNhbXBsZUZvcm1hdDtcbiAgICAgICAgbGV0IHNpemUgPSB3aWR0aCAqIGhlaWdodDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGdldERhdGFBcnJheShzaXplLCAxLCBiaXREZXB0aCwgc2FtcGxlRm9ybWF0KTtcblxuICAgICAgICBjb25zdCBjb21wcmVzc2lvbiA9IGlmZC5jb21wcmVzc2lvbjtcbiAgICAgICAgY29uc3Qgcm93c1BlclN0cmlwID0gaWZkLnJvd3NQZXJTdHJpcDtcbiAgICAgICAgY29uc3QgbWF4UGl4ZWxzID0gcm93c1BlclN0cmlwICogd2lkdGg7XG4gICAgICAgIGNvbnN0IHN0cmlwT2Zmc2V0cyA9IGlmZC5zdHJpcE9mZnNldHM7XG4gICAgICAgIGNvbnN0IHN0cmlwQnl0ZUNvdW50cyA9IGlmZC5zdHJpcEJ5dGVDb3VudHM7XG5cbiAgICAgICAgdmFyIHBpeGVsID0gMDtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpcE9mZnNldHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBzdHJpcERhdGEgPSB0aGlzLmdldFN0cmlwRGF0YShjb21wcmVzc2lvbiwgc3RyaXBPZmZzZXRzW2ldLCBzdHJpcEJ5dGVDb3VudHNbaV0pO1xuICAgICAgICAgICAgLy8gTGFzdCBzdHJpcCBjYW4gYmUgc21hbGxlclxuICAgICAgICAgICAgdmFyIGxlbmd0aCA9IHNpemUgPiBtYXhQaXhlbHMgPyBtYXhQaXhlbHMgOiBzaXplO1xuICAgICAgICAgICAgc2l6ZSAtPSBsZW5ndGg7XG4gICAgICAgICAgICBpZiAoYml0RGVwdGggPT09IDgpIHtcbiAgICAgICAgICAgICAgICBwaXhlbCA9IGZpbGw4Yml0KGRhdGEsIHN0cmlwRGF0YSwgcGl4ZWwsIGxlbmd0aCk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGJpdERlcHRoID09PSAxNikge1xuICAgICAgICAgICAgICAgIHBpeGVsID0gZmlsbDE2Yml0KGRhdGEsIHN0cmlwRGF0YSwgcGl4ZWwsIGxlbmd0aCwgdGhpcy5pc0xpdHRsZUVuZGlhbigpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoYml0RGVwdGggPT09IDMyICYmIHNhbXBsZUZvcm1hdCA9PT0gMykge1xuICAgICAgICAgICAgICAgIHBpeGVsID0gZmlsbEZsb2F0MzIoZGF0YSwgc3RyaXBEYXRhLCBwaXhlbCwgbGVuZ3RoLCB0aGlzLmlzTGl0dGxlRW5kaWFuKCkpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZCgnYml0RGVwdGgnLCBiaXREZXB0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZmQuZGF0YSA9IGRhdGE7XG4gICAgfVxuXG4gICAgZ2V0U3RyaXBEYXRhKGNvbXByZXNzaW9uLCBvZmZzZXQsIGJ5dGVDb3VudHMpIHtcbiAgICAgICAgc3dpdGNoIChjb21wcmVzc2lvbikge1xuICAgICAgICAgICAgY2FzZSAxOiAvLyBObyBjb21wcmVzc2lvblxuICAgICAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIsIG9mZnNldCwgYnl0ZUNvdW50cyk7XG4gICAgICAgICAgICBjYXNlIDI6IC8vIENDSVRUIEdyb3VwIDMgMS1EaW1lbnNpb25hbCBNb2RpZmllZCBIdWZmbWFuIHJ1biBsZW5ndGggZW5jb2RpbmdcbiAgICAgICAgICAgIGNhc2UgMzI3NzM6IC8vIFBhY2tCaXRzIGNvbXByZXNzaW9uXG4gICAgICAgICAgICAgICAgcmV0dXJuIHVuc3VwcG9ydGVkKCdDb21wcmVzc2lvbicsIGNvbXByZXNzaW9uKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdpbnZhbGlkIGNvbXByZXNzaW9uOiAnICsgY29tcHJlc3Npb24pO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRJRkZEZWNvZGVyO1xuXG5mdW5jdGlvbiBnZXREYXRhQXJyYXkoc2l6ZSwgY2hhbm5lbHMsIGJpdERlcHRoLCBzYW1wbGVGb3JtYXQpIHtcbiAgICBpZiAoYml0RGVwdGggPT09IDgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNpemUgKiBjaGFubmVscyk7XG4gICAgfSBlbHNlIGlmIChiaXREZXB0aCA9PT0gMTYpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShzaXplICogY2hhbm5lbHMpO1xuICAgIH0gZWxzZSBpZiAoYml0RGVwdGggPT09IDMyICYmIHNhbXBsZUZvcm1hdCA9PT0gMykge1xuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShzaXplICogY2hhbm5lbHMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiB1bnN1cHBvcnRlZCgnYml0IGRlcHRoIC8gc2FtcGxlIGZvcm1hdCcsIGJpdERlcHRoICsgJyAvICcgKyBzYW1wbGVGb3JtYXQpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gZmlsbDhiaXQoZGF0YVRvLCBkYXRhRnJvbSwgaW5kZXgsIGxlbmd0aCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcbiAgICAgICAgZGF0YVRvW2luZGV4KytdID0gZGF0YUZyb20uZ2V0VWludDgoaSk7XG4gICAgfVxuICAgIHJldHVybiBpbmRleDtcbn1cblxuZnVuY3Rpb24gZmlsbDE2Yml0KGRhdGFUbywgZGF0YUZyb20sIGluZGV4LCBsZW5ndGgsIGxpdHRsZUVuZGlhbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICogMjsgaSArPSAyKSB7XG4gICAgICAgIGRhdGFUb1tpbmRleCsrXSA9IGRhdGFGcm9tLmdldFVpbnQxNihpLCBsaXR0bGVFbmRpYW4pO1xuICAgIH1cbiAgICByZXR1cm4gaW5kZXg7XG59XG5cbmZ1bmN0aW9uIGZpbGxGbG9hdDMyKGRhdGFUbywgZGF0YUZyb20sIGluZGV4LCBsZW5ndGgsIGxpdHRsZUVuZGlhbikge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoICogNDsgaSArPSA0KSB7XG4gICAgICAgIGRhdGFUb1tpbmRleCsrXSA9IGRhdGFGcm9tLmdldEZsb2F0MzIoaSwgbGl0dGxlRW5kaWFuKTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuXG5mdW5jdGlvbiB1bnN1cHBvcnRlZCh0eXBlLCB2YWx1ZSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgJyArIHR5cGUgKyAnOiAnICsgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUJpdERlcHRoKGJpdERlcHRoKSB7XG4gICAgaWYgKGJpdERlcHRoLmxlbmd0aCkge1xuICAgICAgICBjb25zdCBiaXREZXB0aEFycmF5ID0gYml0RGVwdGg7XG4gICAgICAgIGJpdERlcHRoID0gYml0RGVwdGhBcnJheVswXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBiaXREZXB0aEFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoYml0RGVwdGhBcnJheVtpXSAhPT0gYml0RGVwdGgpIHtcbiAgICAgICAgICAgICAgICB1bnN1cHBvcnRlZCgnYml0IGRlcHRoJywgYml0RGVwdGhBcnJheSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJpdERlcHRoO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBJZmQgPSByZXF1aXJlKCcuL2lmZCcpO1xuXG5jb25zdCBkYXRlVGltZVJlZ2V4ID0gL14oXFxkezR9KTooXFxkezJ9KTooXFxkezJ9KSAoXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSQvO1xuXG5jbGFzcyBUaWZmSWZkIGV4dGVuZHMgSWZkIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoJ3N0YW5kYXJkJyk7XG4gICAgfVxuXG4gICAgLy8gQ3VzdG9tIGZpZWxkc1xuICAgIGdldCBzaXplKCkge1xuICAgICAgICByZXR1cm4gdGhpcy53aWR0aCAqIHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgICBnZXQgd2lkdGgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlV2lkdGg7XG4gICAgfVxuICAgIGdldCBoZWlnaHQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmltYWdlTGVuZ3RoO1xuICAgIH1cbiAgICBnZXQgY29tcG9uZW50cygpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2FtcGxlc1BlclBpeGVsO1xuICAgIH1cbiAgICBnZXQgZGF0ZSgpIHtcbiAgICAgICAgdmFyIGRhdGUgPSBuZXcgRGF0ZSgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gZGF0ZVRpbWVSZWdleC5leGVjKHRoaXMuZGF0ZVRpbWUpO1xuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKHJlc3VsdFsxXSwgcmVzdWx0WzJdIC0gMSwgcmVzdWx0WzNdKTtcbiAgICAgICAgZGF0ZS5zZXRIb3VycyhyZXN1bHRbNF0sIHJlc3VsdFs1XSwgcmVzdWx0WzZdKTtcbiAgICAgICAgcmV0dXJuIGRhdGU7XG4gICAgfVxuXG4gICAgLy8gSUZEIGZpZWxkc1xuICAgIGdldCBuZXdTdWJmaWxlVHlwZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDI1NCk7XG4gICAgfVxuICAgIGdldCBpbWFnZVdpZHRoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjU2KTtcbiAgICB9XG4gICAgZ2V0IGltYWdlTGVuZ3RoKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjU3KTtcbiAgICB9XG4gICAgZ2V0IGJpdHNQZXJTYW1wbGUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyNTgpO1xuICAgIH1cbiAgICBnZXQgY29tcHJlc3Npb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyNTkpIHx8IDE7XG4gICAgfVxuICAgIGdldCB0eXBlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjYyKTtcbiAgICB9XG4gICAgZ2V0IGZpbGxPcmRlcigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDI2NikgfHwgMTtcbiAgICB9XG4gICAgZ2V0IGRvY3VtZW50TmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDI2OSk7XG4gICAgfVxuICAgIGdldCBpbWFnZURlc2NyaXB0aW9uKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjcwKTtcbiAgICB9XG4gICAgZ2V0IHN0cmlwT2Zmc2V0cygpIHtcbiAgICAgICAgcmV0dXJuIGFsd2F5c0FycmF5KHRoaXMuZ2V0KDI3MykpO1xuICAgIH1cbiAgICBnZXQgb3JpZW50YXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyNzQpO1xuICAgIH1cbiAgICBnZXQgc2FtcGxlc1BlclBpeGVsKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjc3KTtcbiAgICB9XG4gICAgZ2V0IHJvd3NQZXJTdHJpcCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDI3OCk7XG4gICAgfVxuICAgIGdldCBzdHJpcEJ5dGVDb3VudHMoKSB7XG4gICAgICAgIHJldHVybiBhbHdheXNBcnJheSh0aGlzLmdldCgyNzkpKTtcbiAgICB9XG4gICAgZ2V0IG1pblNhbXBsZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjgwKSB8fCAwO1xuICAgIH1cbiAgICBnZXQgbWF4U2FtcGxlVmFsdWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyODEpIHx8IE1hdGgucG93KDIsIHRoaXMuYml0c1BlclNhbXBsZSkgLSAxO1xuICAgIH1cbiAgICBnZXQgeFJlc29sdXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyODIpO1xuICAgIH1cbiAgICBnZXQgeVJlc29sdXRpb24oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgyODMpO1xuICAgIH1cbiAgICBnZXQgcGxhbmFyQ29uZmlndXJhdGlvbigpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KDI4NCkgfHwgMTtcbiAgICB9XG4gICAgZ2V0IHJlc29sdXRpb25Vbml0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMjk2KSB8fCAyO1xuICAgIH1cbiAgICBnZXQgZGF0ZVRpbWUoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldCgzMDYpO1xuICAgIH1cbiAgICBnZXQgcHJlZGljdG9yKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMzE3KSB8fCAxO1xuICAgIH1cbiAgICBnZXQgc2FtcGxlRm9ybWF0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMzM5KSB8fCAxO1xuICAgIH1cbiAgICBnZXQgc01pblNhbXBsZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMzQwKSB8fCB0aGlzLm1pblNhbXBsZVZhbHVlO1xuICAgIH1cbiAgICBnZXQgc01heFNhbXBsZVZhbHVlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoMzQxKSB8fCB0aGlzLm1heFNhbXBsZVZhbHVlO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWx3YXlzQXJyYXkodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIFt2YWx1ZV07XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRpZmZJZmQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IElPQnVmZmVyID0gcmVxdWlyZSgnaW9idWZmZXInKTtcbmNvbnN0IHRpZmYgPSByZXF1aXJlKCd0aWZmJyk7XG5cbmZ1bmN0aW9uIGRlY29kZShkYXRhKSB7XG4gICAgY29uc3QgYnVmZmVyID0gbmV3IElPQnVmZmVyKGRhdGEpO1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGJ1ZmZlci5zZXRCaWdFbmRpYW4oKTtcbiAgICBjb25zdCB2YWwgPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgIGlmICh2YWwgIT09IDB4ZmZkOCkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1NPSSBtYXJrZXIgbm90IGZvdW5kLiBOb3QgYSB2YWxpZCBKUEVHIGZpbGUnKTtcbiAgICB9XG4gICAgY29uc3QgbmV4dCA9IGJ1ZmZlci5yZWFkVWludDE2KCk7XG4gICAgaWYgKG5leHQgPT09IDB4ZmZlMSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBidWZmZXIucmVhZFVpbnQxNigpO1xuICAgICAgICBjb25zdCBoZWFkZXIgPSBidWZmZXIucmVhZEJ5dGVzKDYpO1xuICAgICAgICBpZiAoaGVhZGVyWzBdID09PSA2OSAmJiAvLyBFXG4gICAgICAgICAgICBoZWFkZXJbMV0gPT09IDEyMCAmJiAvLyB4XG4gICAgICAgICAgICBoZWFkZXJbMl0gPT09IDEwNSAmJiAvLyBpXG4gICAgICAgICAgICBoZWFkZXJbM10gPT09IDEwMiAmJiAvLyBmXG4gICAgICAgICAgICBoZWFkZXJbNF0gPT09IDAgJiZcbiAgICAgICAgICAgIGhlYWRlcls1XSA9PT0gMCkge1xuICAgICAgIC8vICAgICBidWZmZXIuc2tpcCgyKTtcbiAgICAgICAgICAgIGNvbnN0IGV4aWYgPSB0aWZmLmRlY29kZShidWZmZXIsIHtcbiAgICAgICAgICAgICAgICBvbmx5Rmlyc3Q6IHRydWUsXG4gICAgICAgICAgICAgICAgaWdub3JlSW1hZ2VEYXRhOiB0cnVlLFxuICAgICAgICAgICAgICAgIG9mZnNldDogYnVmZmVyLm9mZnNldFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICByZXN1bHQuZXhpZiA9IGV4aWY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkZWNvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydHMuZGVjb2RlID0gcmVxdWlyZSgnLi9kZWNvZGUnKTtcbiIsIjsoZnVuY3Rpb24oKSB7IC8vIGNsb3N1cmUgZm9yIHdlYiBicm93c2Vyc1xuXG5mdW5jdGlvbiBJdGVtIChkYXRhLCBwcmV2LCBuZXh0KSB7XG4gIHRoaXMubmV4dCA9IG5leHRcbiAgaWYgKG5leHQpIG5leHQucHJldiA9IHRoaXNcbiAgdGhpcy5wcmV2ID0gcHJldlxuICBpZiAocHJldikgcHJldi5uZXh0ID0gdGhpc1xuICB0aGlzLmRhdGEgPSBkYXRhXG59XG5cbmZ1bmN0aW9uIEZhc3RMaXN0ICgpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEZhc3RMaXN0KSkgcmV0dXJuIG5ldyBGYXN0TGlzdFxuICB0aGlzLl9oZWFkID0gbnVsbFxuICB0aGlzLl90YWlsID0gbnVsbFxuICB0aGlzLmxlbmd0aCA9IDBcbn1cblxuRmFzdExpc3QucHJvdG90eXBlID1cbnsgcHVzaDogZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB0aGlzLl90YWlsID0gbmV3IEl0ZW0oZGF0YSwgdGhpcy5fdGFpbCwgbnVsbClcbiAgICBpZiAoIXRoaXMuX2hlYWQpIHRoaXMuX2hlYWQgPSB0aGlzLl90YWlsXG4gICAgdGhpcy5sZW5ndGggKytcbiAgfVxuXG4sIHBvcDogZnVuY3Rpb24gKCkge1xuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHVuZGVmaW5lZFxuICAgIHZhciB0ID0gdGhpcy5fdGFpbFxuICAgIHRoaXMuX3RhaWwgPSB0LnByZXZcbiAgICBpZiAodC5wcmV2KSB7XG4gICAgICB0LnByZXYgPSB0aGlzLl90YWlsLm5leHQgPSBudWxsXG4gICAgfVxuICAgIHRoaXMubGVuZ3RoIC0tXG4gICAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbFxuICAgIGVsc2UgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLl9oZWFkID0gdGhpcy5fdGFpbCA9IG51bGxcbiAgICByZXR1cm4gdC5kYXRhXG4gIH1cblxuLCB1bnNoaWZ0OiBmdW5jdGlvbiAoZGF0YSkge1xuICAgIHRoaXMuX2hlYWQgPSBuZXcgSXRlbShkYXRhLCBudWxsLCB0aGlzLl9oZWFkKVxuICAgIGlmICghdGhpcy5fdGFpbCkgdGhpcy5fdGFpbCA9IHRoaXMuX2hlYWRcbiAgICB0aGlzLmxlbmd0aCArK1xuICB9XG5cbiwgc2hpZnQ6IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5sZW5ndGggPT09IDApIHJldHVybiB1bmRlZmluZWRcbiAgICB2YXIgaCA9IHRoaXMuX2hlYWRcbiAgICB0aGlzLl9oZWFkID0gaC5uZXh0XG4gICAgaWYgKGgubmV4dCkge1xuICAgICAgaC5uZXh0ID0gdGhpcy5faGVhZC5wcmV2ID0gbnVsbFxuICAgIH1cbiAgICB0aGlzLmxlbmd0aCAtLVxuICAgIGlmICh0aGlzLmxlbmd0aCA9PT0gMSkgdGhpcy5fdGFpbCA9IHRoaXMuX2hlYWRcbiAgICBlbHNlIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgdGhpcy5faGVhZCA9IHRoaXMuX3RhaWwgPSBudWxsXG4gICAgcmV0dXJuIGguZGF0YVxuICB9XG5cbiwgaXRlbTogZnVuY3Rpb24gKG4pIHtcbiAgICBpZiAobiA8IDApIG4gPSB0aGlzLmxlbmd0aCArIG5cbiAgICB2YXIgaCA9IHRoaXMuX2hlYWRcbiAgICB3aGlsZSAobi0tID4gMCAmJiBoKSBoID0gaC5uZXh0XG4gICAgcmV0dXJuIGggPyBoLmRhdGEgOiB1bmRlZmluZWRcbiAgfVxuXG4sIHNsaWNlOiBmdW5jdGlvbiAobiwgbSkge1xuICAgIGlmICghbikgbiA9IDBcbiAgICBpZiAoIW0pIG0gPSB0aGlzLmxlbmd0aFxuICAgIGlmIChtIDwgMCkgbSA9IHRoaXMubGVuZ3RoICsgbVxuICAgIGlmIChuIDwgMCkgbiA9IHRoaXMubGVuZ3RoICsgblxuXG4gICAgaWYgKG0gPT09IG4pIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIGlmIChtIDwgbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBvZmZzZXQ6IFwiK24rXCIsXCIrbStcIiAobGVuZ3RoPVwiK3RoaXMubGVuZ3RoK1wiKVwiKVxuICAgIH1cblxuICAgIHZhciBsZW4gPSBtIC0gblxuICAgICAgLCByZXQgPSBuZXcgQXJyYXkobGVuKVxuICAgICAgLCBpID0gMFxuICAgICAgLCBoID0gdGhpcy5faGVhZFxuICAgIHdoaWxlIChuLS0gPiAwICYmIGgpIGggPSBoLm5leHRcbiAgICB3aGlsZSAoaSA8IGxlbiAmJiBoKSB7XG4gICAgICByZXRbaSsrXSA9IGguZGF0YVxuICAgICAgaCA9IGgubmV4dFxuICAgIH1cbiAgICByZXR1cm4gcmV0XG4gIH1cblxuLCBkcm9wOiBmdW5jdGlvbiAoKSB7XG4gICAgRmFzdExpc3QuY2FsbCh0aGlzKVxuICB9XG5cbiwgZm9yRWFjaDogZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICAgIHZhciBwID0gdGhpcy5faGVhZFxuICAgICAgLCBpID0gMFxuICAgICAgLCBsZW4gPSB0aGlzLmxlbmd0aFxuICAgIHdoaWxlIChpIDwgbGVuICYmIHApIHtcbiAgICAgIGZuLmNhbGwodGhpc3AgfHwgdGhpcywgcC5kYXRhLCBpLCB0aGlzKVxuICAgICAgcCA9IHAubmV4dFxuICAgICAgaSArK1xuICAgIH1cbiAgfVxuXG4sIG1hcDogZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICAgIHZhciBuID0gbmV3IEZhc3RMaXN0KClcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIG1lKSB7XG4gICAgICBuLnB1c2goZm4uY2FsbCh0aGlzcCB8fCBtZSwgdiwgaSwgbWUpKVxuICAgIH0pXG4gICAgcmV0dXJuIG5cbiAgfVxuXG4sIGZpbHRlcjogZnVuY3Rpb24gKGZuLCB0aGlzcCkge1xuICAgIHZhciBuID0gbmV3IEZhc3RMaXN0KClcbiAgICB0aGlzLmZvckVhY2goZnVuY3Rpb24gKHYsIGksIG1lKSB7XG4gICAgICBpZiAoZm4uY2FsbCh0aGlzcCB8fCBtZSwgdiwgaSwgbWUpKSBuLnB1c2godilcbiAgICB9KVxuICAgIHJldHVybiBuXG4gIH1cblxuLCByZWR1Y2U6IGZ1bmN0aW9uIChmbiwgdmFsLCB0aGlzcCkge1xuICAgIHZhciBpID0gMFxuICAgICAgLCBwID0gdGhpcy5faGVhZFxuICAgICAgLCBsZW4gPSB0aGlzLmxlbmd0aFxuICAgIGlmICghdmFsKSB7XG4gICAgICBpID0gMVxuICAgICAgdmFsID0gcCAmJiBwLmRhdGFcbiAgICAgIHAgPSBwICYmIHAubmV4dFxuICAgIH1cbiAgICB3aGlsZSAoaSA8IGxlbiAmJiBwKSB7XG4gICAgICB2YWwgPSBmbi5jYWxsKHRoaXNwIHx8IHRoaXMsIHZhbCwgcC5kYXRhLCB0aGlzKVxuICAgICAgaSArK1xuICAgICAgcCA9IHAubmV4dFxuICAgIH1cbiAgICByZXR1cm4gdmFsXG4gIH1cbn1cblxuaWYgKFwidW5kZWZpbmVkXCIgIT09IHR5cGVvZihleHBvcnRzKSkgbW9kdWxlLmV4cG9ydHMgPSBGYXN0TGlzdFxuZWxzZSBpZiAoXCJmdW5jdGlvblwiID09PSB0eXBlb2YoZGVmaW5lKSAmJiBkZWZpbmUuYW1kKSB7XG4gIGRlZmluZShcIkZhc3RMaXN0XCIsIGZ1bmN0aW9uKCkgeyByZXR1cm4gRmFzdExpc3QgfSlcbn0gZWxzZSAoZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcyB9KSgpLkZhc3RMaXN0ID0gRmFzdExpc3RcblxufSkoKVxuIiwiXCJ1c2Ugc3RyaWN0XCI7XHJcbi8qXHJcbiAqIENvcHlyaWdodCAyMDE3IFNhbSBUaG9yb2dvb2QuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90XHJcbiAqIHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mXHJcbiAqIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcclxuICpcclxuICogVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxyXG4gKiBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVRcclxuICogV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlXHJcbiAqIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyXHJcbiAqIHRoZSBMaWNlbnNlLlxyXG4gKi9cclxuKGZ1bmN0aW9uIChzY29wZSkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgLy8gZmFpbCBlYXJseVxyXG4gICAgaWYgKHNjb3BlWydUZXh0RW5jb2RlciddICYmIHNjb3BlWydUZXh0RGVjb2RlciddKSB7XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdXRmTGFiZWxcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmFzdFRleHRFbmNvZGVyKHV0ZkxhYmVsID0gJ3V0Zi04Jykge1xyXG4gICAgICAgIGlmICh1dGZMYWJlbCAhPT0gJ3V0Zi04Jykge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgRmFpbGVkIHRvIGNvbnN0cnVjdCAnVGV4dEVuY29kZXInOiBUaGUgZW5jb2RpbmcgbGFiZWwgcHJvdmlkZWQgKCcke3V0ZkxhYmVsfScpIGlzIGludmFsaWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KEZhc3RUZXh0RW5jb2Rlci5wcm90b3R5cGUsICdlbmNvZGluZycsIHtcclxuICAgICAgICB2YWx1ZTogJ3V0Zi04JyxcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nXHJcbiAgICAgKiBAcGFyYW0ge3tzdHJlYW06IGJvb2xlYW59PX0gb3B0aW9uc1xyXG4gICAgICogQHJldHVybiB7IVVpbnQ4QXJyYXl9XHJcbiAgICAgKi9cclxuICAgIEZhc3RUZXh0RW5jb2Rlci5wcm90b3R5cGUuZW5jb2RlID0gZnVuY3Rpb24gKHN0cmluZywgb3B0aW9ucyA9IHsgc3RyZWFtOiBmYWxzZSB9KSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RyZWFtKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGVuY29kZTogdGhlICdzdHJlYW0nIG9wdGlvbiBpcyB1bnN1cHBvcnRlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgbGV0IHBvcyA9IDA7XHJcbiAgICAgICAgY29uc3QgbGVuID0gc3RyaW5nLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBvdXQgPSBbXTtcclxuICAgICAgICBsZXQgYXQgPSAwOyAvLyBvdXRwdXQgcG9zaXRpb25cclxuICAgICAgICBsZXQgdGxlbiA9IE1hdGgubWF4KDMyLCBsZW4gKyAobGVuID4+IDEpICsgNyk7IC8vIDEuNXggc2l6ZVxyXG4gICAgICAgIGxldCB0YXJnZXQgPSBuZXcgVWludDhBcnJheSgodGxlbiA+PiAzKSA8PCAzKTsgLy8gLi4uIGJ1dCBhdCA4IGJ5dGUgb2Zmc2V0XHJcbiAgICAgICAgd2hpbGUgKHBvcyA8IGxlbikge1xyXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBzdHJpbmcuY2hhckNvZGVBdChwb3MrKyk7XHJcbiAgICAgICAgICAgIGlmICh2YWx1ZSA+PSAweGQ4MDAgJiYgdmFsdWUgPD0gMHhkYmZmKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBoaWdoIHN1cnJvZ2F0ZVxyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA8IGxlbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKGV4dHJhICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICsrcG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9ICgodmFsdWUgJiAweDNmZikgPDwgMTApICsgKGV4dHJhICYgMHgzZmYpICsgMHgxMDAwMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsdWUgPj0gMHhkODAwICYmIHZhbHVlIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOyAvLyBkcm9wIGxvbmUgc3Vycm9nYXRlXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy8gZXhwYW5kIHRoZSBidWZmZXIgaWYgd2UgY291bGRuJ3Qgd3JpdGUgNCBieXRlc1xyXG4gICAgICAgICAgICBpZiAoYXQgKyA0ID4gdGFyZ2V0Lmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgdGxlbiArPSA4OyAvLyBtaW5pbXVtIGV4dHJhXHJcbiAgICAgICAgICAgICAgICB0bGVuICo9IDEuMCArIChwb3MgLyBzdHJpbmcubGVuZ3RoKSAqIDI7IC8vIHRha2UgMnggdGhlIHJlbWFpbmluZ1xyXG4gICAgICAgICAgICAgICAgdGxlbiA9ICh0bGVuID4+IDMpIDw8IDM7IC8vIDggYnl0ZSBvZmZzZXRcclxuICAgICAgICAgICAgICAgIGNvbnN0IHVwZGF0ZSA9IG5ldyBVaW50OEFycmF5KHRsZW4pO1xyXG4gICAgICAgICAgICAgICAgdXBkYXRlLnNldCh0YXJnZXQpO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ID0gdXBkYXRlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICgodmFsdWUgJiAweGZmZmZmZjgwKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gMS1ieXRlXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbYXQrK10gPSB2YWx1ZTsgLy8gQVNDSUlcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCh2YWx1ZSAmIDB4ZmZmZmY4MDApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAyLWJ5dGVcclxuICAgICAgICAgICAgICAgIHRhcmdldFthdCsrXSA9ICgodmFsdWUgPj4gNikgJiAweDFmKSB8IDB4YzA7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKHZhbHVlICYgMHhmZmZmMDAwMCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIDMtYnl0ZVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2F0KytdID0gKCh2YWx1ZSA+PiAxMikgJiAweDBmKSB8IDB4ZTA7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbYXQrK10gPSAoKHZhbHVlID4+IDYpICYgMHgzZikgfCAweDgwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCh2YWx1ZSAmIDB4ZmZlMDAwMDApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyA0LWJ5dGVcclxuICAgICAgICAgICAgICAgIHRhcmdldFthdCsrXSA9ICgodmFsdWUgPj4gMTgpICYgMHgwNykgfCAweGYwO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2F0KytdID0gKCh2YWx1ZSA+PiAxMikgJiAweDNmKSB8IDB4ODA7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbYXQrK10gPSAoKHZhbHVlID4+IDYpICYgMHgzZikgfCAweDgwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IGRvIHdlIGNhcmVcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRhcmdldFthdCsrXSA9ICh2YWx1ZSAmIDB4M2YpIHwgMHg4MDtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldC5zbGljZSgwLCBhdCk7XHJcbiAgICB9O1xyXG4gICAgLyoqXHJcbiAgICAgKiBAY29uc3RydWN0b3JcclxuICAgICAqIEBwYXJhbSB7c3RyaW5nPX0gdXRmTGFiZWxcclxuICAgICAqIEBwYXJhbSB7e2ZhdGFsOiBib29sZWFufT19IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgZnVuY3Rpb24gRmFzdFRleHREZWNvZGVyKHV0ZkxhYmVsID0gJ3V0Zi04Jywgb3B0aW9ucyA9IHsgZmF0YWw6IGZhbHNlIH0pIHtcclxuICAgICAgICBpZiAodXRmTGFiZWwgIT09ICd1dGYtOCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYEZhaWxlZCB0byBjb25zdHJ1Y3QgJ1RleHREZWNvZGVyJzogVGhlIGVuY29kaW5nIGxhYmVsIHByb3ZpZGVkICgnJHt1dGZMYWJlbH0nKSBpcyBpbnZhbGlkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAob3B0aW9ucy5mYXRhbCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBjb25zdHJ1Y3QgJ1RleHREZWNvZGVyJzogdGhlICdmYXRhbCcgb3B0aW9uIGlzIHVuc3VwcG9ydGVkLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYXN0VGV4dERlY29kZXIucHJvdG90eXBlLCAnZW5jb2RpbmcnLCB7XHJcbiAgICAgICAgdmFsdWU6ICd1dGYtOCcsXHJcbiAgICB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYXN0VGV4dERlY29kZXIucHJvdG90eXBlLCAnZmF0YWwnLCB7IHZhbHVlOiBmYWxzZSB9KTtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYXN0VGV4dERlY29kZXIucHJvdG90eXBlLCAnaWdub3JlQk9NJywge1xyXG4gICAgICAgIHZhbHVlOiBmYWxzZSxcclxuICAgIH0pO1xyXG4gICAgLyoqXHJcbiAgICAgKiBAcGFyYW0geyghQXJyYXlCdWZmZXJ8IUFycmF5QnVmZmVyVmlldyl9IGJ1ZmZlclxyXG4gICAgICogQHBhcmFtIHt7c3RyZWFtOiBib29sZWFufT19IG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgRmFzdFRleHREZWNvZGVyLnByb3RvdHlwZS5kZWNvZGUgPSBmdW5jdGlvbiAoYnVmZmVyLCBvcHRpb25zID0geyBzdHJlYW06IGZhbHNlIH0pIHtcclxuICAgICAgICBpZiAob3B0aW9uc1snc3RyZWFtJ10pIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gZGVjb2RlOiB0aGUgJ3N0cmVhbScgb3B0aW9uIGlzIHVuc3VwcG9ydGVkLmApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KGJ1ZmZlcik7XHJcbiAgICAgICAgbGV0IHBvcyA9IDA7XHJcbiAgICAgICAgY29uc3QgbGVuID0gYnl0ZXMubGVuZ3RoO1xyXG4gICAgICAgIGNvbnN0IG91dCA9IFtdO1xyXG4gICAgICAgIHdoaWxlIChwb3MgPCBsZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgYnl0ZTEgPSBieXRlc1twb3MrK107XHJcbiAgICAgICAgICAgIGlmIChieXRlMSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7IC8vIE5VTExcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKGJ5dGUxICYgMHg4MCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIDEtYnl0ZVxyXG4gICAgICAgICAgICAgICAgb3V0LnB1c2goYnl0ZTEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKChieXRlMSAmIDB4ZTApID09PSAweGMwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAyLWJ5dGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKCgoYnl0ZTEgJiAweDFmKSA8PCA2KSB8IGJ5dGUyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgoYnl0ZTEgJiAweGYwKSA9PT0gMHhlMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZTIgPSBieXRlc1twb3MrK10gJiAweDNmO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZTMgPSBieXRlc1twb3MrK10gJiAweDNmO1xyXG4gICAgICAgICAgICAgICAgb3V0LnB1c2goKChieXRlMSAmIDB4MWYpIDw8IDEyKSB8IChieXRlMiA8PCA2KSB8IGJ5dGUzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgoYnl0ZTEgJiAweGY4KSA9PT0gMHhmMCkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZTIgPSBieXRlc1twb3MrK10gJiAweDNmO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZTMgPSBieXRlc1twb3MrK10gJiAweDNmO1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYnl0ZTQgPSBieXRlc1twb3MrK10gJiAweDNmO1xyXG4gICAgICAgICAgICAgICAgLy8gdGhpcyBjYW4gYmUgPiAweGZmZmYsIHNvIHBvc3NpYmx5IGdlbmVyYXRlIHN1cnJvZ2F0ZXNcclxuICAgICAgICAgICAgICAgIGxldCBjb2RlcG9pbnQgPSAoKGJ5dGUxICYgMHgwNykgPDwgMHgxMikgfCAoYnl0ZTIgPDwgMHgwYykgfCAoYnl0ZTMgPDwgMHgwNikgfCBieXRlNDtcclxuICAgICAgICAgICAgICAgIGlmIChjb2RlcG9pbnQgPiAweGZmZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjb2RlcG9pbnQgJj0gfjB4MTAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZXBvaW50IC09IDB4MTAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgb3V0LnB1c2goKChjb2RlcG9pbnQgPj4+IDEwKSAmIDB4M2ZmKSB8IDB4ZDgwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29kZXBvaW50ID0gMHhkYzAwIHwgKGNvZGVwb2ludCAmIDB4M2ZmKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKGNvZGVwb2ludCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBGSVhNRTogd2UncmUgaWdub3JpbmcgdGhpc1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIG91dCk7XHJcbiAgICB9O1xyXG4gICAgc2NvcGVbJ1RleHRFbmNvZGVyJ10gPSBGYXN0VGV4dEVuY29kZXI7XHJcbiAgICBzY29wZVsnVGV4dERlY29kZXInXSA9IEZhc3RUZXh0RGVjb2RlcjtcclxufSkodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCdcclxuICAgID8gd2luZG93XHJcbiAgICA6IHR5cGVvZiBzZWxmICE9PSAndW5kZWZpbmVkJ1xyXG4gICAgICAgID8gc2VsZlxyXG4gICAgICAgIDogdGhpcyk7XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRleHQtZW5jb2RpbmctcG9seWZpbGwuanMubWFwIiwiJ3VzZSBzdHJpY3QnO1xuXG5mdW5jdGlvbiBGRlQoc2l6ZSkge1xuICB0aGlzLnNpemUgPSBzaXplIHwgMDtcbiAgaWYgKHRoaXMuc2l6ZSA8PSAxIHx8ICh0aGlzLnNpemUgJiAodGhpcy5zaXplIC0gMSkpICE9PSAwKVxuICAgIHRocm93IG5ldyBFcnJvcignRkZUIHNpemUgbXVzdCBiZSBhIHBvd2VyIG9mIHR3byBhbmQgYmlnZ2VyIHRoYW4gMScpO1xuXG4gIHRoaXMuX2NzaXplID0gc2l6ZSA8PCAxO1xuXG4gIC8vIE5PVEU6IFVzZSBvZiBgdmFyYCBpcyBpbnRlbnRpb25hbCBmb3Igb2xkIFY4IHZlcnNpb25zXG4gIHZhciB0YWJsZSA9IG5ldyBBcnJheSh0aGlzLnNpemUgKiAyKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0YWJsZS5sZW5ndGg7IGkgKz0gMikge1xuICAgIGNvbnN0IGFuZ2xlID0gTWF0aC5QSSAqIGkgLyB0aGlzLnNpemU7XG4gICAgdGFibGVbaV0gPSBNYXRoLmNvcyhhbmdsZSk7XG4gICAgdGFibGVbaSArIDFdID0gLU1hdGguc2luKGFuZ2xlKTtcbiAgfVxuICB0aGlzLnRhYmxlID0gdGFibGU7XG5cbiAgLy8gRmluZCBzaXplJ3MgcG93ZXIgb2YgdHdvXG4gIHZhciBwb3dlciA9IDA7XG4gIGZvciAodmFyIHQgPSAxOyB0aGlzLnNpemUgPiB0OyB0IDw8PSAxKVxuICAgIHBvd2VyKys7XG5cbiAgLy8gQ2FsY3VsYXRlIGluaXRpYWwgc3RlcCdzIHdpZHRoOlxuICAvLyAgICogSWYgd2UgYXJlIGZ1bGwgcmFkaXgtNCAtIGl0IGlzIDJ4IHNtYWxsZXIgdG8gZ2l2ZSBpbml0YWwgbGVuPThcbiAgLy8gICAqIE90aGVyd2lzZSBpdCBpcyB0aGUgc2FtZSBhcyBgcG93ZXJgIHRvIGdpdmUgbGVuPTRcbiAgdGhpcy5fd2lkdGggPSBwb3dlciAlIDIgPT09IDAgPyBwb3dlciAtIDEgOiBwb3dlcjtcblxuICAvLyBQcmUtY29tcHV0ZSBiaXQtcmV2ZXJzYWwgcGF0dGVybnNcbiAgdGhpcy5fYml0cmV2ID0gbmV3IEFycmF5KDEgPDwgdGhpcy5fd2lkdGgpO1xuICBmb3IgKHZhciBqID0gMDsgaiA8IHRoaXMuX2JpdHJldi5sZW5ndGg7IGorKykge1xuICAgIHRoaXMuX2JpdHJldltqXSA9IDA7XG4gICAgZm9yICh2YXIgc2hpZnQgPSAwOyBzaGlmdCA8IHRoaXMuX3dpZHRoOyBzaGlmdCArPSAyKSB7XG4gICAgICB2YXIgcmV2U2hpZnQgPSB0aGlzLl93aWR0aCAtIHNoaWZ0IC0gMjtcbiAgICAgIHRoaXMuX2JpdHJldltqXSB8PSAoKGogPj4+IHNoaWZ0KSAmIDMpIDw8IHJldlNoaWZ0O1xuICAgIH1cbiAgfVxuXG4gIHRoaXMuX291dCA9IG51bGw7XG4gIHRoaXMuX2RhdGEgPSBudWxsO1xuICB0aGlzLl9pbnYgPSAwO1xufVxubW9kdWxlLmV4cG9ydHMgPSBGRlQ7XG5cbkZGVC5wcm90b3R5cGUuZnJvbUNvbXBsZXhBcnJheSA9IGZ1bmN0aW9uIGZyb21Db21wbGV4QXJyYXkoY29tcGxleCwgc3RvcmFnZSkge1xuICB2YXIgcmVzID0gc3RvcmFnZSB8fCBuZXcgQXJyYXkoY29tcGxleC5sZW5ndGggPj4+IDEpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNvbXBsZXgubGVuZ3RoOyBpICs9IDIpXG4gICAgcmVzW2kgPj4+IDFdID0gY29tcGxleFtpXTtcbiAgcmV0dXJuIHJlcztcbn07XG5cbkZGVC5wcm90b3R5cGUuY3JlYXRlQ29tcGxleEFycmF5ID0gZnVuY3Rpb24gY3JlYXRlQ29tcGxleEFycmF5KCkge1xuICBjb25zdCByZXMgPSBuZXcgQXJyYXkodGhpcy5fY3NpemUpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcy5sZW5ndGg7IGkrKylcbiAgICByZXNbaV0gPSAwO1xuICByZXR1cm4gcmVzO1xufTtcblxuRkZULnByb3RvdHlwZS50b0NvbXBsZXhBcnJheSA9IGZ1bmN0aW9uIHRvQ29tcGxleEFycmF5KGlucHV0LCBzdG9yYWdlKSB7XG4gIHZhciByZXMgPSBzdG9yYWdlIHx8IHRoaXMuY3JlYXRlQ29tcGxleEFycmF5KCk7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgcmVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzW2ldID0gaW5wdXRbaSA+Pj4gMV07XG4gICAgcmVzW2kgKyAxXSA9IDA7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn07XG5cbkZGVC5wcm90b3R5cGUuY29tcGxldGVTcGVjdHJ1bSA9IGZ1bmN0aW9uIGNvbXBsZXRlU3BlY3RydW0oc3BlY3RydW0pIHtcbiAgdmFyIHNpemUgPSB0aGlzLl9jc2l6ZTtcbiAgdmFyIGhhbGYgPSBzaXplID4+PiAxO1xuICBmb3IgKHZhciBpID0gMjsgaSA8IGhhbGY7IGkgKz0gMikge1xuICAgIHNwZWN0cnVtW3NpemUgLSBpXSA9IHNwZWN0cnVtW2ldO1xuICAgIHNwZWN0cnVtW3NpemUgLSBpICsgMV0gPSAtc3BlY3RydW1baSArIDFdO1xuICB9XG59O1xuXG5GRlQucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uIHRyYW5zZm9ybShvdXQsIGRhdGEpIHtcbiAgaWYgKG91dCA9PT0gZGF0YSlcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0lucHV0IGFuZCBvdXRwdXQgYnVmZmVycyBtdXN0IGJlIGRpZmZlcmVudCcpO1xuXG4gIHRoaXMuX291dCA9IG91dDtcbiAgdGhpcy5fZGF0YSA9IGRhdGE7XG4gIHRoaXMuX2ludiA9IDA7XG4gIHRoaXMuX3RyYW5zZm9ybTQoKTtcbiAgdGhpcy5fb3V0ID0gbnVsbDtcbiAgdGhpcy5fZGF0YSA9IG51bGw7XG59O1xuXG5GRlQucHJvdG90eXBlLnJlYWxUcmFuc2Zvcm0gPSBmdW5jdGlvbiByZWFsVHJhbnNmb3JtKG91dCwgZGF0YSkge1xuICBpZiAob3V0ID09PSBkYXRhKVxuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIG11c3QgYmUgZGlmZmVyZW50Jyk7XG5cbiAgdGhpcy5fb3V0ID0gb3V0O1xuICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgdGhpcy5faW52ID0gMDtcbiAgdGhpcy5fcmVhbFRyYW5zZm9ybTQoKTtcbiAgdGhpcy5fb3V0ID0gbnVsbDtcbiAgdGhpcy5fZGF0YSA9IG51bGw7XG59O1xuXG5GRlQucHJvdG90eXBlLmludmVyc2VUcmFuc2Zvcm0gPSBmdW5jdGlvbiBpbnZlcnNlVHJhbnNmb3JtKG91dCwgZGF0YSkge1xuICBpZiAob3V0ID09PSBkYXRhKVxuICAgIHRocm93IG5ldyBFcnJvcignSW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIG11c3QgYmUgZGlmZmVyZW50Jyk7XG5cbiAgdGhpcy5fb3V0ID0gb3V0O1xuICB0aGlzLl9kYXRhID0gZGF0YTtcbiAgdGhpcy5faW52ID0gMTtcbiAgdGhpcy5fdHJhbnNmb3JtNCgpO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IG91dC5sZW5ndGg7IGkrKylcbiAgICBvdXRbaV0gLz0gdGhpcy5zaXplO1xuICB0aGlzLl9vdXQgPSBudWxsO1xuICB0aGlzLl9kYXRhID0gbnVsbDtcbn07XG5cbi8vIHJhZGl4LTQgaW1wbGVtZW50YXRpb25cbi8vXG4vLyBOT1RFOiBVc2VzIG9mIGB2YXJgIGFyZSBpbnRlbnRpb25hbCBmb3Igb2xkZXIgVjggdmVyc2lvbiB0aGF0IGRvIG5vdFxuLy8gc3VwcG9ydCBib3RoIGBsZXQgY29tcG91bmQgYXNzaWdubWVudHNgIGFuZCBgY29uc3QgcGhpYFxuRkZULnByb3RvdHlwZS5fdHJhbnNmb3JtNCA9IGZ1bmN0aW9uIF90cmFuc2Zvcm00KCkge1xuICB2YXIgb3V0ID0gdGhpcy5fb3V0O1xuICB2YXIgc2l6ZSA9IHRoaXMuX2NzaXplO1xuXG4gIC8vIEluaXRpYWwgc3RlcCAocGVybXV0ZSBhbmQgdHJhbnNmb3JtKVxuICB2YXIgd2lkdGggPSB0aGlzLl93aWR0aDtcbiAgdmFyIHN0ZXAgPSAxIDw8IHdpZHRoO1xuICB2YXIgbGVuID0gKHNpemUgLyBzdGVwKSA8PCAxO1xuXG4gIHZhciBvdXRPZmY7XG4gIHZhciB0O1xuICB2YXIgYml0cmV2ID0gdGhpcy5fYml0cmV2O1xuICBpZiAobGVuID09PSA0KSB7XG4gICAgZm9yIChvdXRPZmYgPSAwLCB0ID0gMDsgb3V0T2ZmIDwgc2l6ZTsgb3V0T2ZmICs9IGxlbiwgdCsrKSB7XG4gICAgICBjb25zdCBvZmYgPSBiaXRyZXZbdF07XG4gICAgICB0aGlzLl9zaW5nbGVUcmFuc2Zvcm0yKG91dE9mZiwgb2ZmLCBzdGVwKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbGVuID09PSA4XG4gICAgZm9yIChvdXRPZmYgPSAwLCB0ID0gMDsgb3V0T2ZmIDwgc2l6ZTsgb3V0T2ZmICs9IGxlbiwgdCsrKSB7XG4gICAgICBjb25zdCBvZmYgPSBiaXRyZXZbdF07XG4gICAgICB0aGlzLl9zaW5nbGVUcmFuc2Zvcm00KG91dE9mZiwgb2ZmLCBzdGVwKTtcbiAgICB9XG4gIH1cblxuICAvLyBMb29wIHRocm91Z2ggc3RlcHMgaW4gZGVjcmVhc2luZyBvcmRlclxuICB2YXIgaW52ID0gdGhpcy5faW52ID8gLTEgOiAxO1xuICB2YXIgdGFibGUgPSB0aGlzLnRhYmxlO1xuICBmb3IgKHN0ZXAgPj49IDI7IHN0ZXAgPj0gMjsgc3RlcCA+Pj0gMikge1xuICAgIGxlbiA9IChzaXplIC8gc3RlcCkgPDwgMTtcbiAgICB2YXIgcXVhcnRlckxlbiA9IGxlbiA+Pj4gMjtcblxuICAgIC8vIExvb3AgdGhyb3VnaCBvZmZzZXRzIGluIHRoZSBkYXRhXG4gICAgZm9yIChvdXRPZmYgPSAwOyBvdXRPZmYgPCBzaXplOyBvdXRPZmYgKz0gbGVuKSB7XG4gICAgICAvLyBGdWxsIGNhc2VcbiAgICAgIHZhciBsaW1pdCA9IG91dE9mZiArIHF1YXJ0ZXJMZW47XG4gICAgICBmb3IgKHZhciBpID0gb3V0T2ZmLCBrID0gMDsgaSA8IGxpbWl0OyBpICs9IDIsIGsgKz0gc3RlcCkge1xuICAgICAgICBjb25zdCBBID0gaTtcbiAgICAgICAgY29uc3QgQiA9IEEgKyBxdWFydGVyTGVuO1xuICAgICAgICBjb25zdCBDID0gQiArIHF1YXJ0ZXJMZW47XG4gICAgICAgIGNvbnN0IEQgPSBDICsgcXVhcnRlckxlbjtcblxuICAgICAgICAvLyBPcmlnaW5hbCB2YWx1ZXNcbiAgICAgICAgY29uc3QgQXIgPSBvdXRbQV07XG4gICAgICAgIGNvbnN0IEFpID0gb3V0W0EgKyAxXTtcbiAgICAgICAgY29uc3QgQnIgPSBvdXRbQl07XG4gICAgICAgIGNvbnN0IEJpID0gb3V0W0IgKyAxXTtcbiAgICAgICAgY29uc3QgQ3IgPSBvdXRbQ107XG4gICAgICAgIGNvbnN0IENpID0gb3V0W0MgKyAxXTtcbiAgICAgICAgY29uc3QgRHIgPSBvdXRbRF07XG4gICAgICAgIGNvbnN0IERpID0gb3V0W0QgKyAxXTtcblxuICAgICAgICAvLyBNaWRkbGUgdmFsdWVzXG4gICAgICAgIGNvbnN0IE1BciA9IEFyO1xuICAgICAgICBjb25zdCBNQWkgPSBBaTtcblxuICAgICAgICBjb25zdCB0YWJsZUJyID0gdGFibGVba107XG4gICAgICAgIGNvbnN0IHRhYmxlQmkgPSBpbnYgKiB0YWJsZVtrICsgMV07XG4gICAgICAgIGNvbnN0IE1CciA9IEJyICogdGFibGVCciAtIEJpICogdGFibGVCaTtcbiAgICAgICAgY29uc3QgTUJpID0gQnIgKiB0YWJsZUJpICsgQmkgKiB0YWJsZUJyO1xuXG4gICAgICAgIGNvbnN0IHRhYmxlQ3IgPSB0YWJsZVsyICoga107XG4gICAgICAgIGNvbnN0IHRhYmxlQ2kgPSBpbnYgKiB0YWJsZVsyICogayArIDFdO1xuICAgICAgICBjb25zdCBNQ3IgPSBDciAqIHRhYmxlQ3IgLSBDaSAqIHRhYmxlQ2k7XG4gICAgICAgIGNvbnN0IE1DaSA9IENyICogdGFibGVDaSArIENpICogdGFibGVDcjtcblxuICAgICAgICBjb25zdCB0YWJsZURyID0gdGFibGVbMyAqIGtdO1xuICAgICAgICBjb25zdCB0YWJsZURpID0gaW52ICogdGFibGVbMyAqIGsgKyAxXTtcbiAgICAgICAgY29uc3QgTURyID0gRHIgKiB0YWJsZURyIC0gRGkgKiB0YWJsZURpO1xuICAgICAgICBjb25zdCBNRGkgPSBEciAqIHRhYmxlRGkgKyBEaSAqIHRhYmxlRHI7XG5cbiAgICAgICAgLy8gUHJlLUZpbmFsIHZhbHVlc1xuICAgICAgICBjb25zdCBUMHIgPSBNQXIgKyBNQ3I7XG4gICAgICAgIGNvbnN0IFQwaSA9IE1BaSArIE1DaTtcbiAgICAgICAgY29uc3QgVDFyID0gTUFyIC0gTUNyO1xuICAgICAgICBjb25zdCBUMWkgPSBNQWkgLSBNQ2k7XG4gICAgICAgIGNvbnN0IFQyciA9IE1CciArIE1EcjtcbiAgICAgICAgY29uc3QgVDJpID0gTUJpICsgTURpO1xuICAgICAgICBjb25zdCBUM3IgPSBpbnYgKiAoTUJyIC0gTURyKTtcbiAgICAgICAgY29uc3QgVDNpID0gaW52ICogKE1CaSAtIE1EaSk7XG5cbiAgICAgICAgLy8gRmluYWwgdmFsdWVzXG4gICAgICAgIGNvbnN0IEZBciA9IFQwciArIFQycjtcbiAgICAgICAgY29uc3QgRkFpID0gVDBpICsgVDJpO1xuXG4gICAgICAgIGNvbnN0IEZDciA9IFQwciAtIFQycjtcbiAgICAgICAgY29uc3QgRkNpID0gVDBpIC0gVDJpO1xuXG4gICAgICAgIGNvbnN0IEZCciA9IFQxciArIFQzaTtcbiAgICAgICAgY29uc3QgRkJpID0gVDFpIC0gVDNyO1xuXG4gICAgICAgIGNvbnN0IEZEciA9IFQxciAtIFQzaTtcbiAgICAgICAgY29uc3QgRkRpID0gVDFpICsgVDNyO1xuXG4gICAgICAgIG91dFtBXSA9IEZBcjtcbiAgICAgICAgb3V0W0EgKyAxXSA9IEZBaTtcbiAgICAgICAgb3V0W0JdID0gRkJyO1xuICAgICAgICBvdXRbQiArIDFdID0gRkJpO1xuICAgICAgICBvdXRbQ10gPSBGQ3I7XG4gICAgICAgIG91dFtDICsgMV0gPSBGQ2k7XG4gICAgICAgIG91dFtEXSA9IEZEcjtcbiAgICAgICAgb3V0W0QgKyAxXSA9IEZEaTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIHJhZGl4LTIgaW1wbGVtZW50YXRpb25cbi8vXG4vLyBOT1RFOiBPbmx5IGNhbGxlZCBmb3IgbGVuPTRcbkZGVC5wcm90b3R5cGUuX3NpbmdsZVRyYW5zZm9ybTIgPSBmdW5jdGlvbiBfc2luZ2xlVHJhbnNmb3JtMihvdXRPZmYsIG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwKSB7XG4gIGNvbnN0IG91dCA9IHRoaXMuX291dDtcbiAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgY29uc3QgZXZlblIgPSBkYXRhW29mZl07XG4gIGNvbnN0IGV2ZW5JID0gZGF0YVtvZmYgKyAxXTtcbiAgY29uc3Qgb2RkUiA9IGRhdGFbb2ZmICsgc3RlcF07XG4gIGNvbnN0IG9kZEkgPSBkYXRhW29mZiArIHN0ZXAgKyAxXTtcblxuICBjb25zdCBsZWZ0UiA9IGV2ZW5SICsgb2RkUjtcbiAgY29uc3QgbGVmdEkgPSBldmVuSSArIG9kZEk7XG4gIGNvbnN0IHJpZ2h0UiA9IGV2ZW5SIC0gb2RkUjtcbiAgY29uc3QgcmlnaHRJID0gZXZlbkkgLSBvZGRJO1xuXG4gIG91dFtvdXRPZmZdID0gbGVmdFI7XG4gIG91dFtvdXRPZmYgKyAxXSA9IGxlZnRJO1xuICBvdXRbb3V0T2ZmICsgMl0gPSByaWdodFI7XG4gIG91dFtvdXRPZmYgKyAzXSA9IHJpZ2h0STtcbn07XG5cbi8vIHJhZGl4LTRcbi8vXG4vLyBOT1RFOiBPbmx5IGNhbGxlZCBmb3IgbGVuPThcbkZGVC5wcm90b3R5cGUuX3NpbmdsZVRyYW5zZm9ybTQgPSBmdW5jdGlvbiBfc2luZ2xlVHJhbnNmb3JtNChvdXRPZmYsIG9mZixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwKSB7XG4gIGNvbnN0IG91dCA9IHRoaXMuX291dDtcbiAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG4gIGNvbnN0IGludiA9IHRoaXMuX2ludiA/IC0xIDogMTtcbiAgY29uc3Qgc3RlcDIgPSBzdGVwICogMjtcbiAgY29uc3Qgc3RlcDMgPSBzdGVwICogMztcblxuICAvLyBPcmlnaW5hbCB2YWx1ZXNcbiAgY29uc3QgQXIgPSBkYXRhW29mZl07XG4gIGNvbnN0IEFpID0gZGF0YVtvZmYgKyAxXTtcbiAgY29uc3QgQnIgPSBkYXRhW29mZiArIHN0ZXBdO1xuICBjb25zdCBCaSA9IGRhdGFbb2ZmICsgc3RlcCArIDFdO1xuICBjb25zdCBDciA9IGRhdGFbb2ZmICsgc3RlcDJdO1xuICBjb25zdCBDaSA9IGRhdGFbb2ZmICsgc3RlcDIgKyAxXTtcbiAgY29uc3QgRHIgPSBkYXRhW29mZiArIHN0ZXAzXTtcbiAgY29uc3QgRGkgPSBkYXRhW29mZiArIHN0ZXAzICsgMV07XG5cbiAgLy8gUHJlLUZpbmFsIHZhbHVlc1xuICBjb25zdCBUMHIgPSBBciArIENyO1xuICBjb25zdCBUMGkgPSBBaSArIENpO1xuICBjb25zdCBUMXIgPSBBciAtIENyO1xuICBjb25zdCBUMWkgPSBBaSAtIENpO1xuICBjb25zdCBUMnIgPSBCciArIERyO1xuICBjb25zdCBUMmkgPSBCaSArIERpO1xuICBjb25zdCBUM3IgPSBpbnYgKiAoQnIgLSBEcik7XG4gIGNvbnN0IFQzaSA9IGludiAqIChCaSAtIERpKTtcblxuICAvLyBGaW5hbCB2YWx1ZXNcbiAgY29uc3QgRkFyID0gVDByICsgVDJyO1xuICBjb25zdCBGQWkgPSBUMGkgKyBUMmk7XG5cbiAgY29uc3QgRkJyID0gVDFyICsgVDNpO1xuICBjb25zdCBGQmkgPSBUMWkgLSBUM3I7XG5cbiAgY29uc3QgRkNyID0gVDByIC0gVDJyO1xuICBjb25zdCBGQ2kgPSBUMGkgLSBUMmk7XG5cbiAgY29uc3QgRkRyID0gVDFyIC0gVDNpO1xuICBjb25zdCBGRGkgPSBUMWkgKyBUM3I7XG5cbiAgb3V0W291dE9mZl0gPSBGQXI7XG4gIG91dFtvdXRPZmYgKyAxXSA9IEZBaTtcbiAgb3V0W291dE9mZiArIDJdID0gRkJyO1xuICBvdXRbb3V0T2ZmICsgM10gPSBGQmk7XG4gIG91dFtvdXRPZmYgKyA0XSA9IEZDcjtcbiAgb3V0W291dE9mZiArIDVdID0gRkNpO1xuICBvdXRbb3V0T2ZmICsgNl0gPSBGRHI7XG4gIG91dFtvdXRPZmYgKyA3XSA9IEZEaTtcbn07XG5cbi8vIFJlYWwgaW5wdXQgcmFkaXgtNCBpbXBsZW1lbnRhdGlvblxuRkZULnByb3RvdHlwZS5fcmVhbFRyYW5zZm9ybTQgPSBmdW5jdGlvbiBfcmVhbFRyYW5zZm9ybTQoKSB7XG4gIHZhciBvdXQgPSB0aGlzLl9vdXQ7XG4gIHZhciBzaXplID0gdGhpcy5fY3NpemU7XG5cbiAgLy8gSW5pdGlhbCBzdGVwIChwZXJtdXRlIGFuZCB0cmFuc2Zvcm0pXG4gIHZhciB3aWR0aCA9IHRoaXMuX3dpZHRoO1xuICB2YXIgc3RlcCA9IDEgPDwgd2lkdGg7XG4gIHZhciBsZW4gPSAoc2l6ZSAvIHN0ZXApIDw8IDE7XG5cbiAgdmFyIG91dE9mZjtcbiAgdmFyIHQ7XG4gIHZhciBiaXRyZXYgPSB0aGlzLl9iaXRyZXY7XG4gIGlmIChsZW4gPT09IDQpIHtcbiAgICBmb3IgKG91dE9mZiA9IDAsIHQgPSAwOyBvdXRPZmYgPCBzaXplOyBvdXRPZmYgKz0gbGVuLCB0KyspIHtcbiAgICAgIGNvbnN0IG9mZiA9IGJpdHJldlt0XTtcbiAgICAgIHRoaXMuX3NpbmdsZVJlYWxUcmFuc2Zvcm0yKG91dE9mZiwgb2ZmID4+PiAxLCBzdGVwID4+PiAxKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gbGVuID09PSA4XG4gICAgZm9yIChvdXRPZmYgPSAwLCB0ID0gMDsgb3V0T2ZmIDwgc2l6ZTsgb3V0T2ZmICs9IGxlbiwgdCsrKSB7XG4gICAgICBjb25zdCBvZmYgPSBiaXRyZXZbdF07XG4gICAgICB0aGlzLl9zaW5nbGVSZWFsVHJhbnNmb3JtNChvdXRPZmYsIG9mZiA+Pj4gMSwgc3RlcCA+Pj4gMSk7XG4gICAgfVxuICB9XG5cbiAgLy8gTG9vcCB0aHJvdWdoIHN0ZXBzIGluIGRlY3JlYXNpbmcgb3JkZXJcbiAgdmFyIGludiA9IHRoaXMuX2ludiA/IC0xIDogMTtcbiAgdmFyIHRhYmxlID0gdGhpcy50YWJsZTtcbiAgZm9yIChzdGVwID4+PSAyOyBzdGVwID49IDI7IHN0ZXAgPj49IDIpIHtcbiAgICBsZW4gPSAoc2l6ZSAvIHN0ZXApIDw8IDE7XG4gICAgdmFyIGhhbGZMZW4gPSBsZW4gPj4+IDE7XG4gICAgdmFyIHF1YXJ0ZXJMZW4gPSBoYWxmTGVuID4+PiAxO1xuICAgIHZhciBocXVhcnRlckxlbiA9IHF1YXJ0ZXJMZW4gPj4+IDE7XG5cbiAgICAvLyBMb29wIHRocm91Z2ggb2Zmc2V0cyBpbiB0aGUgZGF0YVxuICAgIGZvciAob3V0T2ZmID0gMDsgb3V0T2ZmIDwgc2l6ZTsgb3V0T2ZmICs9IGxlbikge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGsgPSAwOyBpIDw9IGhxdWFydGVyTGVuOyBpICs9IDIsIGsgKz0gc3RlcCkge1xuICAgICAgICB2YXIgQSA9IG91dE9mZiArIGk7XG4gICAgICAgIHZhciBCID0gQSArIHF1YXJ0ZXJMZW47XG4gICAgICAgIHZhciBDID0gQiArIHF1YXJ0ZXJMZW47XG4gICAgICAgIHZhciBEID0gQyArIHF1YXJ0ZXJMZW47XG5cbiAgICAgICAgLy8gT3JpZ2luYWwgdmFsdWVzXG4gICAgICAgIHZhciBBciA9IG91dFtBXTtcbiAgICAgICAgdmFyIEFpID0gb3V0W0EgKyAxXTtcbiAgICAgICAgdmFyIEJyID0gb3V0W0JdO1xuICAgICAgICB2YXIgQmkgPSBvdXRbQiArIDFdO1xuICAgICAgICB2YXIgQ3IgPSBvdXRbQ107XG4gICAgICAgIHZhciBDaSA9IG91dFtDICsgMV07XG4gICAgICAgIHZhciBEciA9IG91dFtEXTtcbiAgICAgICAgdmFyIERpID0gb3V0W0QgKyAxXTtcblxuICAgICAgICAvLyBNaWRkbGUgdmFsdWVzXG4gICAgICAgIHZhciBNQXIgPSBBcjtcbiAgICAgICAgdmFyIE1BaSA9IEFpO1xuXG4gICAgICAgIHZhciB0YWJsZUJyID0gdGFibGVba107XG4gICAgICAgIHZhciB0YWJsZUJpID0gaW52ICogdGFibGVbayArIDFdO1xuICAgICAgICB2YXIgTUJyID0gQnIgKiB0YWJsZUJyIC0gQmkgKiB0YWJsZUJpO1xuICAgICAgICB2YXIgTUJpID0gQnIgKiB0YWJsZUJpICsgQmkgKiB0YWJsZUJyO1xuXG4gICAgICAgIHZhciB0YWJsZUNyID0gdGFibGVbMiAqIGtdO1xuICAgICAgICB2YXIgdGFibGVDaSA9IGludiAqIHRhYmxlWzIgKiBrICsgMV07XG4gICAgICAgIHZhciBNQ3IgPSBDciAqIHRhYmxlQ3IgLSBDaSAqIHRhYmxlQ2k7XG4gICAgICAgIHZhciBNQ2kgPSBDciAqIHRhYmxlQ2kgKyBDaSAqIHRhYmxlQ3I7XG5cbiAgICAgICAgdmFyIHRhYmxlRHIgPSB0YWJsZVszICoga107XG4gICAgICAgIHZhciB0YWJsZURpID0gaW52ICogdGFibGVbMyAqIGsgKyAxXTtcbiAgICAgICAgdmFyIE1EciA9IERyICogdGFibGVEciAtIERpICogdGFibGVEaTtcbiAgICAgICAgdmFyIE1EaSA9IERyICogdGFibGVEaSArIERpICogdGFibGVEcjtcblxuICAgICAgICAvLyBQcmUtRmluYWwgdmFsdWVzXG4gICAgICAgIHZhciBUMHIgPSBNQXIgKyBNQ3I7XG4gICAgICAgIHZhciBUMGkgPSBNQWkgKyBNQ2k7XG4gICAgICAgIHZhciBUMXIgPSBNQXIgLSBNQ3I7XG4gICAgICAgIHZhciBUMWkgPSBNQWkgLSBNQ2k7XG4gICAgICAgIHZhciBUMnIgPSBNQnIgKyBNRHI7XG4gICAgICAgIHZhciBUMmkgPSBNQmkgKyBNRGk7XG4gICAgICAgIHZhciBUM3IgPSBpbnYgKiAoTUJyIC0gTURyKTtcbiAgICAgICAgdmFyIFQzaSA9IGludiAqIChNQmkgLSBNRGkpO1xuXG4gICAgICAgIC8vIEZpbmFsIHZhbHVlc1xuICAgICAgICB2YXIgRkFyID0gVDByICsgVDJyO1xuICAgICAgICB2YXIgRkFpID0gVDBpICsgVDJpO1xuXG4gICAgICAgIHZhciBGQnIgPSBUMXIgKyBUM2k7XG4gICAgICAgIHZhciBGQmkgPSBUMWkgLSBUM3I7XG5cbiAgICAgICAgb3V0W0FdID0gRkFyO1xuICAgICAgICBvdXRbQSArIDFdID0gRkFpO1xuICAgICAgICBvdXRbQl0gPSBGQnI7XG4gICAgICAgIG91dFtCICsgMV0gPSBGQmk7XG5cbiAgICAgICAgLy8gT3V0cHV0IGZpbmFsIG1pZGRsZSBwb2ludFxuICAgICAgICBpZiAoaSA9PT0gMCkge1xuICAgICAgICAgIHZhciBGQ3IgPSBUMHIgLSBUMnI7XG4gICAgICAgICAgdmFyIEZDaSA9IFQwaSAtIFQyaTtcbiAgICAgICAgICBvdXRbQ10gPSBGQ3I7XG4gICAgICAgICAgb3V0W0MgKyAxXSA9IEZDaTtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERvIG5vdCBvdmVyd3JpdGUgb3Vyc2VsdmVzXG4gICAgICAgIGlmIChpID09PSBocXVhcnRlckxlbilcbiAgICAgICAgICBjb250aW51ZTtcblxuICAgICAgICAvLyBJbiB0aGUgZmxpcHBlZCBjYXNlOlxuICAgICAgICAvLyBNQWkgPSAtTUFpXG4gICAgICAgIC8vIE1Ccj0tTUJpLCBNQmk9LU1CclxuICAgICAgICAvLyBNQ3I9LU1DclxuICAgICAgICAvLyBNRHI9TURpLCBNRGk9TURyXG4gICAgICAgIHZhciBTVDByID0gVDFyO1xuICAgICAgICB2YXIgU1QwaSA9IC1UMWk7XG4gICAgICAgIHZhciBTVDFyID0gVDByO1xuICAgICAgICB2YXIgU1QxaSA9IC1UMGk7XG4gICAgICAgIHZhciBTVDJyID0gLWludiAqIFQzaTtcbiAgICAgICAgdmFyIFNUMmkgPSAtaW52ICogVDNyO1xuICAgICAgICB2YXIgU1QzciA9IC1pbnYgKiBUMmk7XG4gICAgICAgIHZhciBTVDNpID0gLWludiAqIFQycjtcblxuICAgICAgICB2YXIgU0ZBciA9IFNUMHIgKyBTVDJyO1xuICAgICAgICB2YXIgU0ZBaSA9IFNUMGkgKyBTVDJpO1xuXG4gICAgICAgIHZhciBTRkJyID0gU1QxciArIFNUM2k7XG4gICAgICAgIHZhciBTRkJpID0gU1QxaSAtIFNUM3I7XG5cbiAgICAgICAgdmFyIFNBID0gb3V0T2ZmICsgcXVhcnRlckxlbiAtIGk7XG4gICAgICAgIHZhciBTQiA9IG91dE9mZiArIGhhbGZMZW4gLSBpO1xuXG4gICAgICAgIG91dFtTQV0gPSBTRkFyO1xuICAgICAgICBvdXRbU0EgKyAxXSA9IFNGQWk7XG4gICAgICAgIG91dFtTQl0gPSBTRkJyO1xuICAgICAgICBvdXRbU0IgKyAxXSA9IFNGQmk7XG4gICAgICB9XG4gICAgfVxuICB9XG59O1xuXG4vLyByYWRpeC0yIGltcGxlbWVudGF0aW9uXG4vL1xuLy8gTk9URTogT25seSBjYWxsZWQgZm9yIGxlbj00XG5GRlQucHJvdG90eXBlLl9zaW5nbGVSZWFsVHJhbnNmb3JtMiA9IGZ1bmN0aW9uIF9zaW5nbGVSZWFsVHJhbnNmb3JtMihvdXRPZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZmYsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGVwKSB7XG4gIGNvbnN0IG91dCA9IHRoaXMuX291dDtcbiAgY29uc3QgZGF0YSA9IHRoaXMuX2RhdGE7XG5cbiAgY29uc3QgZXZlblIgPSBkYXRhW29mZl07XG4gIGNvbnN0IG9kZFIgPSBkYXRhW29mZiArIHN0ZXBdO1xuXG4gIGNvbnN0IGxlZnRSID0gZXZlblIgKyBvZGRSO1xuICBjb25zdCByaWdodFIgPSBldmVuUiAtIG9kZFI7XG5cbiAgb3V0W291dE9mZl0gPSBsZWZ0UjtcbiAgb3V0W291dE9mZiArIDFdID0gMDtcbiAgb3V0W291dE9mZiArIDJdID0gcmlnaHRSO1xuICBvdXRbb3V0T2ZmICsgM10gPSAwO1xufTtcblxuLy8gcmFkaXgtNFxuLy9cbi8vIE5PVEU6IE9ubHkgY2FsbGVkIGZvciBsZW49OFxuRkZULnByb3RvdHlwZS5fc2luZ2xlUmVhbFRyYW5zZm9ybTQgPSBmdW5jdGlvbiBfc2luZ2xlUmVhbFRyYW5zZm9ybTQob3V0T2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2ZmLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RlcCkge1xuICBjb25zdCBvdXQgPSB0aGlzLl9vdXQ7XG4gIGNvbnN0IGRhdGEgPSB0aGlzLl9kYXRhO1xuICBjb25zdCBpbnYgPSB0aGlzLl9pbnYgPyAtMSA6IDE7XG4gIGNvbnN0IHN0ZXAyID0gc3RlcCAqIDI7XG4gIGNvbnN0IHN0ZXAzID0gc3RlcCAqIDM7XG5cbiAgLy8gT3JpZ2luYWwgdmFsdWVzXG4gIGNvbnN0IEFyID0gZGF0YVtvZmZdO1xuICBjb25zdCBCciA9IGRhdGFbb2ZmICsgc3RlcF07XG4gIGNvbnN0IENyID0gZGF0YVtvZmYgKyBzdGVwMl07XG4gIGNvbnN0IERyID0gZGF0YVtvZmYgKyBzdGVwM107XG5cbiAgLy8gUHJlLUZpbmFsIHZhbHVlc1xuICBjb25zdCBUMHIgPSBBciArIENyO1xuICBjb25zdCBUMXIgPSBBciAtIENyO1xuICBjb25zdCBUMnIgPSBCciArIERyO1xuICBjb25zdCBUM3IgPSBpbnYgKiAoQnIgLSBEcik7XG5cbiAgLy8gRmluYWwgdmFsdWVzXG4gIGNvbnN0IEZBciA9IFQwciArIFQycjtcblxuICBjb25zdCBGQnIgPSBUMXI7XG4gIGNvbnN0IEZCaSA9IC1UM3I7XG5cbiAgY29uc3QgRkNyID0gVDByIC0gVDJyO1xuXG4gIGNvbnN0IEZEciA9IFQxcjtcbiAgY29uc3QgRkRpID0gVDNyO1xuXG4gIG91dFtvdXRPZmZdID0gRkFyO1xuICBvdXRbb3V0T2ZmICsgMV0gPSAwO1xuICBvdXRbb3V0T2ZmICsgMl0gPSBGQnI7XG4gIG91dFtvdXRPZmYgKyAzXSA9IEZCaTtcbiAgb3V0W291dE9mZiArIDRdID0gRkNyO1xuICBvdXRbb3V0T2ZmICsgNV0gPSAwO1xuICBvdXRbb3V0T2ZmICsgNl0gPSBGRHI7XG4gIG91dFtvdXRPZmYgKyA3XSA9IEZEaTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5jb25zdCB0b0J5dGVzID0gcyA9PiBbLi4uc10ubWFwKGMgPT4gYy5jaGFyQ29kZUF0KDApKTtcbmNvbnN0IHhwaVppcEZpbGVuYW1lID0gdG9CeXRlcygnTUVUQS1JTkYvbW96aWxsYS5yc2EnKTtcbmNvbnN0IG94bWxDb250ZW50VHlwZXMgPSB0b0J5dGVzKCdbQ29udGVudF9UeXBlc10ueG1sJyk7XG5jb25zdCBveG1sUmVscyA9IHRvQnl0ZXMoJ19yZWxzLy5yZWxzJyk7XG5cbmZ1bmN0aW9uIHJlYWRVSW50NjRMRShidWYsIG9mZnNldCA9IDApIHtcblx0bGV0IG4gPSBidWZbb2Zmc2V0XTtcblx0bGV0IG11bCA9IDE7XG5cdGxldCBpID0gMDtcblx0d2hpbGUgKCsraSA8IDgpIHtcblx0XHRtdWwgKj0gMHgxMDA7XG5cdFx0biArPSBidWZbb2Zmc2V0ICsgaV0gKiBtdWw7XG5cdH1cblxuXHRyZXR1cm4gbjtcbn1cblxuY29uc3QgZmlsZVR5cGUgPSBpbnB1dCA9PiB7XG5cdGlmICghKGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSB8fCBpbnB1dCBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IEJ1ZmZlci5pc0J1ZmZlcihpbnB1dCkpKSB7XG5cdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgRXhwZWN0ZWQgdGhlIFxcYGlucHV0XFxgIGFyZ3VtZW50IHRvIGJlIG9mIHR5cGUgXFxgVWludDhBcnJheVxcYCBvciBcXGBCdWZmZXJcXGAgb3IgXFxgQXJyYXlCdWZmZXJcXGAsIGdvdCBcXGAke3R5cGVvZiBpbnB1dH1cXGBgKTtcblx0fVxuXG5cdGNvbnN0IGJ1ZiA9IGlucHV0IGluc3RhbmNlb2YgVWludDhBcnJheSA/IGlucHV0IDogbmV3IFVpbnQ4QXJyYXkoaW5wdXQpO1xuXG5cdGlmICghKGJ1ZiAmJiBidWYubGVuZ3RoID4gMSkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGNvbnN0IGNoZWNrID0gKGhlYWRlciwgb3B0aW9ucykgPT4ge1xuXHRcdG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHtcblx0XHRcdG9mZnNldDogMFxuXHRcdH0sIG9wdGlvbnMpO1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBoZWFkZXIubGVuZ3RoOyBpKyspIHtcblx0XHRcdC8vIElmIGEgYml0bWFzayBpcyBzZXRcblx0XHRcdGlmIChvcHRpb25zLm1hc2spIHtcblx0XHRcdFx0Ly8gSWYgaGVhZGVyIGRvZXNuJ3QgZXF1YWwgYGJ1ZmAgd2l0aCBiaXRzIG1hc2tlZCBvZmZcblx0XHRcdFx0aWYgKGhlYWRlcltpXSAhPT0gKG9wdGlvbnMubWFza1tpXSAmIGJ1ZltpICsgb3B0aW9ucy5vZmZzZXRdKSkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChoZWFkZXJbaV0gIT09IGJ1ZltpICsgb3B0aW9ucy5vZmZzZXRdKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fTtcblxuXHRjb25zdCBjaGVja1N0cmluZyA9IChoZWFkZXIsIG9wdGlvbnMpID0+IGNoZWNrKHRvQnl0ZXMoaGVhZGVyKSwgb3B0aW9ucyk7XG5cblx0aWYgKGNoZWNrKFsweEZGLCAweEQ4LCAweEZGXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnanBnJyxcblx0XHRcdG1pbWU6ICdpbWFnZS9qcGVnJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4ODksIDB4NTAsIDB4NEUsIDB4NDcsIDB4MEQsIDB4MEEsIDB4MUEsIDB4MEFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdwbmcnLFxuXHRcdFx0bWltZTogJ2ltYWdlL3BuZydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDQ3LCAweDQ5LCAweDQ2XSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnZ2lmJyxcblx0XHRcdG1pbWU6ICdpbWFnZS9naWYnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg1NywgMHg0NSwgMHg0MiwgMHg1MF0sIHtvZmZzZXQ6IDh9KSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd3ZWJwJyxcblx0XHRcdG1pbWU6ICdpbWFnZS93ZWJwJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NDYsIDB4NEMsIDB4NDksIDB4NDZdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdmbGlmJyxcblx0XHRcdG1pbWU6ICdpbWFnZS9mbGlmJ1xuXHRcdH07XG5cdH1cblxuXHQvLyBOZWVkcyB0byBiZSBiZWZvcmUgYHRpZmAgY2hlY2tcblx0aWYgKFxuXHRcdChjaGVjayhbMHg0OSwgMHg0OSwgMHgyQSwgMHgwXSkgfHwgY2hlY2soWzB4NEQsIDB4NEQsIDB4MCwgMHgyQV0pKSAmJlxuXHRcdGNoZWNrKFsweDQzLCAweDUyXSwge29mZnNldDogOH0pXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdjcjInLFxuXHRcdFx0bWltZTogJ2ltYWdlL3gtY2Fub24tY3IyJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoXG5cdFx0Y2hlY2soWzB4NDksIDB4NDksIDB4MkEsIDB4MF0pIHx8XG5cdFx0Y2hlY2soWzB4NEQsIDB4NEQsIDB4MCwgMHgyQV0pXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd0aWYnLFxuXHRcdFx0bWltZTogJ2ltYWdlL3RpZmYnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg0MiwgMHg0RF0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2JtcCcsXG5cdFx0XHRtaW1lOiAnaW1hZ2UvYm1wJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NDksIDB4NDksIDB4QkNdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdqeHInLFxuXHRcdFx0bWltZTogJ2ltYWdlL3ZuZC5tcy1waG90bydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDM4LCAweDQyLCAweDUwLCAweDUzXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAncHNkJyxcblx0XHRcdG1pbWU6ICdpbWFnZS92bmQuYWRvYmUucGhvdG9zaG9wJ1xuXHRcdH07XG5cdH1cblxuXHQvLyBaaXAtYmFzZWQgZmlsZSBmb3JtYXRzXG5cdC8vIE5lZWQgdG8gYmUgYmVmb3JlIHRoZSBgemlwYCBjaGVja1xuXHRpZiAoY2hlY2soWzB4NTAsIDB4NEIsIDB4MywgMHg0XSkpIHtcblx0XHRpZiAoXG5cdFx0XHRjaGVjayhbMHg2RCwgMHg2OSwgMHg2RCwgMHg2NSwgMHg3NCwgMHg3OSwgMHg3MCwgMHg2NSwgMHg2MSwgMHg3MCwgMHg3MCwgMHg2QywgMHg2OSwgMHg2MywgMHg2MSwgMHg3NCwgMHg2OSwgMHg2RiwgMHg2RSwgMHgyRiwgMHg2NSwgMHg3MCwgMHg3NSwgMHg2MiwgMHgyQiwgMHg3QSwgMHg2OSwgMHg3MF0sIHtvZmZzZXQ6IDMwfSlcblx0XHQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2VwdWInLFxuXHRcdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vZXB1Yit6aXAnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIEFzc3VtZXMgc2lnbmVkIGAueHBpYCBmcm9tIGFkZG9ucy5tb3ppbGxhLm9yZ1xuXHRcdGlmIChjaGVjayh4cGlaaXBGaWxlbmFtZSwge29mZnNldDogMzB9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAneHBpJyxcblx0XHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gteHBpbnN0YWxsJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoY2hlY2tTdHJpbmcoJ21pbWV0eXBlYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC50ZXh0Jywge29mZnNldDogMzB9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnb2R0Jyxcblx0XHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQudGV4dCdcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKGNoZWNrU3RyaW5nKCdtaW1ldHlwZWFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQuc3ByZWFkc2hlZXQnLCB7b2Zmc2V0OiAzMH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdvZHMnLFxuXHRcdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vdm5kLm9hc2lzLm9wZW5kb2N1bWVudC5zcHJlYWRzaGVldCdcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKGNoZWNrU3RyaW5nKCdtaW1ldHlwZWFwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uJywge29mZnNldDogMzB9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnb2RwJyxcblx0XHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3ZuZC5vYXNpcy5vcGVuZG9jdW1lbnQucHJlc2VudGF0aW9uJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBUaGUgZG9jeCwgeGxzeCBhbmQgcHB0eCBmaWxlIHR5cGVzIGV4dGVuZCB0aGUgT2ZmaWNlIE9wZW4gWE1MIGZpbGUgZm9ybWF0OlxuXHRcdC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL09mZmljZV9PcGVuX1hNTF9maWxlX2Zvcm1hdHNcblx0XHQvLyBXZSBsb29rIGZvcjpcblx0XHQvLyAtIG9uZSBlbnRyeSBuYW1lZCAnW0NvbnRlbnRfVHlwZXNdLnhtbCcgb3IgJ19yZWxzLy5yZWxzJyxcblx0XHQvLyAtIG9uZSBlbnRyeSBpbmRpY2F0aW5nIHNwZWNpZmljIHR5cGUgb2YgZmlsZS5cblx0XHQvLyBNUyBPZmZpY2UsIE9wZW5PZmZpY2UgYW5kIExpYnJlT2ZmaWNlIG1heSBwdXQgdGhlIHBhcnRzIGluIGRpZmZlcmVudCBvcmRlciwgc28gdGhlIGNoZWNrIHNob3VsZCBub3QgcmVseSBvbiBpdC5cblx0XHRjb25zdCBmaW5kTmV4dFppcEhlYWRlckluZGV4ID0gKGFyciwgc3RhcnRBdCA9IDApID0+IGFyci5maW5kSW5kZXgoKGVsLCBpLCBhcnIpID0+IGkgPj0gc3RhcnRBdCAmJiBhcnJbaV0gPT09IDB4NTAgJiYgYXJyW2kgKyAxXSA9PT0gMHg0QiAmJiBhcnJbaSArIDJdID09PSAweDMgJiYgYXJyW2kgKyAzXSA9PT0gMHg0KTtcblxuXHRcdGxldCB6aXBIZWFkZXJJbmRleCA9IDA7IC8vIFRoZSBmaXJzdCB6aXAgaGVhZGVyIHdhcyBhbHJlYWR5IGZvdW5kIGF0IGluZGV4IDBcblx0XHRsZXQgb3htbEZvdW5kID0gZmFsc2U7XG5cdFx0bGV0IHR5cGUgPSBudWxsO1xuXG5cdFx0ZG8ge1xuXHRcdFx0Y29uc3Qgb2Zmc2V0ID0gemlwSGVhZGVySW5kZXggKyAzMDtcblxuXHRcdFx0aWYgKCFveG1sRm91bmQpIHtcblx0XHRcdFx0b3htbEZvdW5kID0gKGNoZWNrKG94bWxDb250ZW50VHlwZXMsIHtvZmZzZXR9KSB8fCBjaGVjayhveG1sUmVscywge29mZnNldH0pKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKCF0eXBlKSB7XG5cdFx0XHRcdGlmIChjaGVja1N0cmluZygnd29yZC8nLCB7b2Zmc2V0fSkpIHtcblx0XHRcdFx0XHR0eXBlID0ge1xuXHRcdFx0XHRcdFx0ZXh0OiAnZG9jeCcsXG5cdFx0XHRcdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vdm5kLm9wZW54bWxmb3JtYXRzLW9mZmljZWRvY3VtZW50LndvcmRwcm9jZXNzaW5nbWwuZG9jdW1lbnQnXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSBlbHNlIGlmIChjaGVja1N0cmluZygncHB0LycsIHtvZmZzZXR9KSkge1xuXHRcdFx0XHRcdHR5cGUgPSB7XG5cdFx0XHRcdFx0XHRleHQ6ICdwcHR4Jyxcblx0XHRcdFx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQucHJlc2VudGF0aW9ubWwucHJlc2VudGF0aW9uJ1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0gZWxzZSBpZiAoY2hlY2tTdHJpbmcoJ3hsLycsIHtvZmZzZXR9KSkge1xuXHRcdFx0XHRcdHR5cGUgPSB7XG5cdFx0XHRcdFx0XHRleHQ6ICd4bHN4Jyxcblx0XHRcdFx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi92bmQub3BlbnhtbGZvcm1hdHMtb2ZmaWNlZG9jdW1lbnQuc3ByZWFkc2hlZXRtbC5zaGVldCdcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmIChveG1sRm91bmQgJiYgdHlwZSkge1xuXHRcdFx0XHRyZXR1cm4gdHlwZTtcblx0XHRcdH1cblxuXHRcdFx0emlwSGVhZGVySW5kZXggPSBmaW5kTmV4dFppcEhlYWRlckluZGV4KGJ1Ziwgb2Zmc2V0KTtcblx0XHR9IHdoaWxlICh6aXBIZWFkZXJJbmRleCA+PSAwKTtcblxuXHRcdC8vIE5vIG1vcmUgemlwIHBhcnRzIGF2YWlsYWJsZSBpbiB0aGUgYnVmZmVyLCBidXQgbWF5YmUgd2UgYXJlIGFsbW9zdCBjZXJ0YWluIGFib3V0IHRoZSB0eXBlP1xuXHRcdGlmICh0eXBlKSB7XG5cdFx0XHRyZXR1cm4gdHlwZTtcblx0XHR9XG5cdH1cblxuXHRpZiAoXG5cdFx0Y2hlY2soWzB4NTAsIDB4NEJdKSAmJlxuXHRcdChidWZbMl0gPT09IDB4MyB8fCBidWZbMl0gPT09IDB4NSB8fCBidWZbMl0gPT09IDB4NykgJiZcblx0XHQoYnVmWzNdID09PSAweDQgfHwgYnVmWzNdID09PSAweDYgfHwgYnVmWzNdID09PSAweDgpXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd6aXAnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3ppcCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDc1LCAweDczLCAweDc0LCAweDYxLCAweDcyXSwge29mZnNldDogMjU3fSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAndGFyJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LXRhcidcblx0XHR9O1xuXHR9XG5cblx0aWYgKFxuXHRcdGNoZWNrKFsweDUyLCAweDYxLCAweDcyLCAweDIxLCAweDFBLCAweDddKSAmJlxuXHRcdChidWZbNl0gPT09IDB4MCB8fCBidWZbNl0gPT09IDB4MSlcblx0KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ3JhcicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC1yYXItY29tcHJlc3NlZCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDFGLCAweDhCLCAweDhdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdneicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vZ3ppcCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDQyLCAweDVBLCAweDY4XSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnYnoyJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LWJ6aXAyJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4MzcsIDB4N0EsIDB4QkMsIDB4QUYsIDB4MjcsIDB4MUNdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICc3eicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC03ei1jb21wcmVzc2VkJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NzgsIDB4MDFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdkbWcnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtYXBwbGUtZGlza2ltYWdlJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4MzMsIDB4NjcsIDB4NzAsIDB4MzVdKSB8fCAvLyAzZ3A1XG5cdFx0KFxuXHRcdFx0Y2hlY2soWzB4MCwgMHgwLCAweDBdKSAmJiBjaGVjayhbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MF0sIHtvZmZzZXQ6IDR9KSAmJlxuXHRcdFx0XHQoXG5cdFx0XHRcdFx0Y2hlY2soWzB4NkQsIDB4NzAsIDB4MzQsIDB4MzFdLCB7b2Zmc2V0OiA4fSkgfHwgLy8gTVA0MVxuXHRcdFx0XHRcdGNoZWNrKFsweDZELCAweDcwLCAweDM0LCAweDMyXSwge29mZnNldDogOH0pIHx8IC8vIE1QNDJcblx0XHRcdFx0XHRjaGVjayhbMHg2OSwgMHg3MywgMHg2RiwgMHg2RF0sIHtvZmZzZXQ6IDh9KSB8fCAvLyBJU09NXG5cdFx0XHRcdFx0Y2hlY2soWzB4NjksIDB4NzMsIDB4NkYsIDB4MzJdLCB7b2Zmc2V0OiA4fSkgfHwgLy8gSVNPMlxuXHRcdFx0XHRcdGNoZWNrKFsweDZELCAweDZELCAweDcwLCAweDM0XSwge29mZnNldDogOH0pIHx8IC8vIE1NUDRcblx0XHRcdFx0XHRjaGVjayhbMHg0RCwgMHgzNCwgMHg1Nl0sIHtvZmZzZXQ6IDh9KSB8fCAvLyBNNFZcblx0XHRcdFx0XHRjaGVjayhbMHg2NCwgMHg2MSwgMHg3MywgMHg2OF0sIHtvZmZzZXQ6IDh9KSAvLyBEQVNIXG5cdFx0XHRcdClcblx0XHQpKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ21wNCcsXG5cdFx0XHRtaW1lOiAndmlkZW8vbXA0J1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NEQsIDB4NTQsIDB4NjgsIDB4NjRdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdtaWQnLFxuXHRcdFx0bWltZTogJ2F1ZGlvL21pZGknXG5cdFx0fTtcblx0fVxuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS90aHJlYXRzdGFjay9saWJtYWdpYy9ibG9iL21hc3Rlci9tYWdpYy9NYWdkaXIvbWF0cm9za2Fcblx0aWYgKGNoZWNrKFsweDFBLCAweDQ1LCAweERGLCAweEEzXSkpIHtcblx0XHRjb25zdCBzbGljZWQgPSBidWYuc3ViYXJyYXkoNCwgNCArIDQwOTYpO1xuXHRcdGNvbnN0IGlkUG9zID0gc2xpY2VkLmZpbmRJbmRleCgoZWwsIGksIGFycikgPT4gYXJyW2ldID09PSAweDQyICYmIGFycltpICsgMV0gPT09IDB4ODIpO1xuXG5cdFx0aWYgKGlkUG9zICE9PSAtMSkge1xuXHRcdFx0Y29uc3QgZG9jVHlwZVBvcyA9IGlkUG9zICsgMztcblx0XHRcdGNvbnN0IGZpbmREb2NUeXBlID0gdHlwZSA9PiBbLi4udHlwZV0uZXZlcnkoKGMsIGkpID0+IHNsaWNlZFtkb2NUeXBlUG9zICsgaV0gPT09IGMuY2hhckNvZGVBdCgwKSk7XG5cblx0XHRcdGlmIChmaW5kRG9jVHlwZSgnbWF0cm9za2EnKSkge1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGV4dDogJ21rdicsXG5cdFx0XHRcdFx0bWltZTogJ3ZpZGVvL3gtbWF0cm9za2EnXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChmaW5kRG9jVHlwZSgnd2VibScpKSB7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0ZXh0OiAnd2VibScsXG5cdFx0XHRcdFx0bWltZTogJ3ZpZGVvL3dlYm0nXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNoZWNrKFsweDAsIDB4MCwgMHgwLCAweDE0LCAweDY2LCAweDc0LCAweDc5LCAweDcwLCAweDcxLCAweDc0LCAweDIwLCAweDIwXSkgfHxcblx0XHRjaGVjayhbMHg2NiwgMHg3MiwgMHg2NSwgMHg2NV0sIHtvZmZzZXQ6IDR9KSB8fCAvLyBUeXBlOiBgZnJlZWBcblx0XHRjaGVjayhbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MCwgMHg3MSwgMHg3NCwgMHgyMCwgMHgyMF0sIHtvZmZzZXQ6IDR9KSB8fFxuXHRcdGNoZWNrKFsweDZELCAweDY0LCAweDYxLCAweDc0XSwge29mZnNldDogNH0pIHx8IC8vIE1KUEVHXG5cdFx0Y2hlY2soWzB4NkQsIDB4NkYsIDB4NkYsIDB4NzZdLCB7b2Zmc2V0OiA0fSkgfHwgLy8gVHlwZTogYG1vb3ZgXG5cdFx0Y2hlY2soWzB4NzcsIDB4NjksIDB4NjQsIDB4NjVdLCB7b2Zmc2V0OiA0fSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnbW92Jyxcblx0XHRcdG1pbWU6ICd2aWRlby9xdWlja3RpbWUnXG5cdFx0fTtcblx0fVxuXG5cdC8vIFJJRkYgZmlsZSBmb3JtYXQgd2hpY2ggbWlnaHQgYmUgQVZJLCBXQVYsIFFDUCwgZXRjXG5cdGlmIChjaGVjayhbMHg1MiwgMHg0OSwgMHg0NiwgMHg0Nl0pKSB7XG5cdFx0aWYgKGNoZWNrKFsweDQxLCAweDU2LCAweDQ5XSwge29mZnNldDogOH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdhdmknLFxuXHRcdFx0XHRtaW1lOiAndmlkZW8vdm5kLmF2aSdcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKGNoZWNrKFsweDU3LCAweDQxLCAweDU2LCAweDQ1XSwge29mZnNldDogOH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICd3YXYnLFxuXHRcdFx0XHRtaW1lOiAnYXVkaW8vdm5kLndhdmUnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIFFMQ00sIFFDUCBmaWxlXG5cdFx0aWYgKGNoZWNrKFsweDUxLCAweDRDLCAweDQzLCAweDREXSwge29mZnNldDogOH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdxY3AnLFxuXHRcdFx0XHRtaW1lOiAnYXVkaW8vcWNlbHAnXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdC8vIEFTRl9IZWFkZXJfT2JqZWN0IGZpcnN0IDgwIGJ5dGVzXG5cdGlmIChjaGVjayhbMHgzMCwgMHgyNiwgMHhCMiwgMHg3NSwgMHg4RSwgMHg2NiwgMHhDRiwgMHgxMSwgMHhBNiwgMHhEOV0pKSB7XG5cdFx0Ly8gU2VhcmNoIGZvciBoZWFkZXIgc2hvdWxkIGJlIGluIGZpcnN0IDFLQiBvZiBmaWxlLlxuXG5cdFx0bGV0IG9mZnNldCA9IDMwO1xuXHRcdGRvIHtcblx0XHRcdGNvbnN0IG9iamVjdFNpemUgPSByZWFkVUludDY0TEUoYnVmLCBvZmZzZXQgKyAxNik7XG5cdFx0XHRpZiAoY2hlY2soWzB4OTEsIDB4MDcsIDB4REMsIDB4QjcsIDB4QjcsIDB4QTksIDB4Q0YsIDB4MTEsIDB4OEUsIDB4RTYsIDB4MDAsIDB4QzAsIDB4MEMsIDB4MjAsIDB4NTMsIDB4NjVdLCB7b2Zmc2V0fSkpIHtcblx0XHRcdFx0Ly8gU3luYyBvbiBTdHJlYW0tUHJvcGVydGllcy1PYmplY3QgKEI3REMwNzkxLUE5QjctMTFDRi04RUU2LTAwQzAwQzIwNTM2NSlcblx0XHRcdFx0aWYgKGNoZWNrKFsweDQwLCAweDlFLCAweDY5LCAweEY4LCAweDRELCAweDVCLCAweENGLCAweDExLCAweEE4LCAweEZELCAweDAwLCAweDgwLCAweDVGLCAweDVDLCAweDQ0LCAweDJCXSwge29mZnNldDogb2Zmc2V0ICsgMjR9KSkge1xuXHRcdFx0XHRcdC8vIEZvdW5kIGF1ZGlvOlxuXHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRleHQ6ICd3bWEnLFxuXHRcdFx0XHRcdFx0bWltZTogJ2F1ZGlvL3gtbXMtd21hJ1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoY2hlY2soWzB4QzAsIDB4RUYsIDB4MTksIDB4QkMsIDB4NEQsIDB4NUIsIDB4Q0YsIDB4MTEsIDB4QTgsIDB4RkQsIDB4MDAsIDB4ODAsIDB4NUYsIDB4NUMsIDB4NDQsIDB4MkJdLCB7b2Zmc2V0OiBvZmZzZXQgKyAyNH0pKSB7XG5cdFx0XHRcdFx0Ly8gRm91bmQgdmlkZW86XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdGV4dDogJ3dtdicsXG5cdFx0XHRcdFx0XHRtaW1lOiAndmlkZW8veC1tcy1hc2YnXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGJyZWFrO1xuXHRcdFx0fVxuXG5cdFx0XHRvZmZzZXQgKz0gb2JqZWN0U2l6ZTtcblx0XHR9IHdoaWxlIChvZmZzZXQgKyAyNCA8PSBidWYubGVuZ3RoKTtcblxuXHRcdC8vIERlZmF1bHQgdG8gQVNGIGdlbmVyaWMgZXh0ZW5zaW9uXG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2FzZicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vdm5kLm1zLWFzZidcblx0XHR9O1xuXHR9XG5cblx0aWYgKFxuXHRcdGNoZWNrKFsweDAsIDB4MCwgMHgxLCAweEJBXSkgfHxcblx0XHRjaGVjayhbMHgwLCAweDAsIDB4MSwgMHhCM10pXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdtcGcnLFxuXHRcdFx0bWltZTogJ3ZpZGVvL21wZWcnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MCwgMHgzMywgMHg2N10sIHtvZmZzZXQ6IDR9KSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICczZ3AnLFxuXHRcdFx0bWltZTogJ3ZpZGVvLzNncHAnXG5cdFx0fTtcblx0fVxuXG5cdC8vIENoZWNrIGZvciBNUEVHIGhlYWRlciBhdCBkaWZmZXJlbnQgc3RhcnRpbmcgb2Zmc2V0c1xuXHRmb3IgKGxldCBzdGFydCA9IDA7IHN0YXJ0IDwgMiAmJiBzdGFydCA8IChidWYubGVuZ3RoIC0gMTYpOyBzdGFydCsrKSB7XG5cdFx0aWYgKFxuXHRcdFx0Y2hlY2soWzB4NDksIDB4NDQsIDB4MzNdLCB7b2Zmc2V0OiBzdGFydH0pIHx8IC8vIElEMyBoZWFkZXJcblx0XHRcdGNoZWNrKFsweEZGLCAweEUyXSwge29mZnNldDogc3RhcnQsIG1hc2s6IFsweEZGLCAweEUyXX0pIC8vIE1QRUcgMSBvciAyIExheWVyIDMgaGVhZGVyXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdtcDMnLFxuXHRcdFx0XHRtaW1lOiAnYXVkaW8vbXBlZydcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0Y2hlY2soWzB4RkYsIDB4RTRdLCB7b2Zmc2V0OiBzdGFydCwgbWFzazogWzB4RkYsIDB4RTRdfSkgLy8gTVBFRyAxIG9yIDIgTGF5ZXIgMiBoZWFkZXJcblx0XHQpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ21wMicsXG5cdFx0XHRcdG1pbWU6ICdhdWRpby9tcGVnJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoXG5cdFx0XHRjaGVjayhbMHhGRiwgMHhGOF0sIHtvZmZzZXQ6IHN0YXJ0LCBtYXNrOiBbMHhGRiwgMHhGQ119KSAvLyBNUEVHIDIgbGF5ZXIgMCB1c2luZyBBRFRTXG5cdFx0KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdtcDInLFxuXHRcdFx0XHRtaW1lOiAnYXVkaW8vbXBlZydcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKFxuXHRcdFx0Y2hlY2soWzB4RkYsIDB4RjBdLCB7b2Zmc2V0OiBzdGFydCwgbWFzazogWzB4RkYsIDB4RkNdfSkgLy8gTVBFRyA0IGxheWVyIDAgdXNpbmcgQURUU1xuXHRcdCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnbXA0Jyxcblx0XHRcdFx0bWltZTogJ2F1ZGlvL21wZWcnXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGlmIChcblx0XHRjaGVjayhbMHg2NiwgMHg3NCwgMHg3OSwgMHg3MCwgMHg0RCwgMHgzNCwgMHg0MV0sIHtvZmZzZXQ6IDR9KVxuXHQpIHtcblx0XHRyZXR1cm4geyAvLyBNUEVHLTQgbGF5ZXIgMyAoYXVkaW8pXG5cdFx0XHRleHQ6ICdtNGEnLFxuXHRcdFx0bWltZTogJ2F1ZGlvL21wNCcgLy8gUkZDIDQzMzdcblx0XHR9O1xuXHR9XG5cblx0Ly8gTmVlZHMgdG8gYmUgYmVmb3JlIGBvZ2dgIGNoZWNrXG5cdGlmIChjaGVjayhbMHg0RiwgMHg3MCwgMHg3NSwgMHg3MywgMHg0OCwgMHg2NSwgMHg2MSwgMHg2NF0sIHtvZmZzZXQ6IDI4fSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnb3B1cycsXG5cdFx0XHRtaW1lOiAnYXVkaW8vb3B1cydcblx0XHR9O1xuXHR9XG5cblx0Ly8gSWYgJ09nZ1MnIGluIGZpcnN0ICBieXRlcywgdGhlbiBPR0cgY29udGFpbmVyXG5cdGlmIChjaGVjayhbMHg0RiwgMHg2NywgMHg2NywgMHg1M10pKSB7XG5cdFx0Ly8gVGhpcyBpcyBhIE9HRyBjb250YWluZXJcblxuXHRcdC8vIElmICcgdGhlb3JhJyBpbiBoZWFkZXIuXG5cdFx0aWYgKGNoZWNrKFsweDgwLCAweDc0LCAweDY4LCAweDY1LCAweDZGLCAweDcyLCAweDYxXSwge29mZnNldDogMjh9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnb2d2Jyxcblx0XHRcdFx0bWltZTogJ3ZpZGVvL29nZydcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSWYgJ1xceDAxdmlkZW8nIGluIGhlYWRlci5cblx0XHRpZiAoY2hlY2soWzB4MDEsIDB4NzYsIDB4NjksIDB4NjQsIDB4NjUsIDB4NkYsIDB4MDBdLCB7b2Zmc2V0OiAyOH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdvZ20nLFxuXHRcdFx0XHRtaW1lOiAndmlkZW8vb2dnJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHQvLyBJZiAnIEZMQUMnIGluIGhlYWRlciAgaHR0cHM6Ly94aXBoLm9yZy9mbGFjL2ZhcS5odG1sXG5cdFx0aWYgKGNoZWNrKFsweDdGLCAweDQ2LCAweDRDLCAweDQxLCAweDQzXSwge29mZnNldDogMjh9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnb2dhJyxcblx0XHRcdFx0bWltZTogJ2F1ZGlvL29nZydcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gJ1NwZWV4ICAnIGluIGhlYWRlciBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TcGVleFxuXHRcdGlmIChjaGVjayhbMHg1MywgMHg3MCwgMHg2NSwgMHg2NSwgMHg3OCwgMHgyMCwgMHgyMF0sIHtvZmZzZXQ6IDI4fSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ3NweCcsXG5cdFx0XHRcdG1pbWU6ICdhdWRpby9vZ2cnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdC8vIElmICdcXHgwMXZvcmJpcycgaW4gaGVhZGVyXG5cdFx0aWYgKGNoZWNrKFsweDAxLCAweDc2LCAweDZGLCAweDcyLCAweDYyLCAweDY5LCAweDczXSwge29mZnNldDogMjh9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnb2dnJyxcblx0XHRcdFx0bWltZTogJ2F1ZGlvL29nZydcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gRGVmYXVsdCBPR0cgY29udGFpbmVyIGh0dHBzOi8vd3d3LmlhbmEub3JnL2Fzc2lnbm1lbnRzL21lZGlhLXR5cGVzL2FwcGxpY2F0aW9uL29nZ1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdvZ3gnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL29nZydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDY2LCAweDRDLCAweDYxLCAweDQzXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnZmxhYycsXG5cdFx0XHRtaW1lOiAnYXVkaW8veC1mbGFjJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NEQsIDB4NDEsIDB4NDMsIDB4MjBdKSkgeyAvLyAnTUFDICdcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnYXBlJyxcblx0XHRcdG1pbWU6ICdhdWRpby9hcGUnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg3NywgMHg3NiwgMHg3MCwgMHg2Ql0pKSB7IC8vICd3dnBrJ1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd3dicsXG5cdFx0XHRtaW1lOiAnYXVkaW8vd2F2cGFjaydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDIzLCAweDIxLCAweDQxLCAweDRELCAweDUyLCAweDBBXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnYW1yJyxcblx0XHRcdG1pbWU6ICdhdWRpby9hbXInXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHgyNSwgMHg1MCwgMHg0NCwgMHg0Nl0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ3BkZicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vcGRmJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NEQsIDB4NUFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdleGUnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtbXNkb3dubG9hZCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKFxuXHRcdChidWZbMF0gPT09IDB4NDMgfHwgYnVmWzBdID09PSAweDQ2KSAmJlxuXHRcdGNoZWNrKFsweDU3LCAweDUzXSwge29mZnNldDogMX0pXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdzd2YnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtc2hvY2t3YXZlLWZsYXNoJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4N0IsIDB4NUMsIDB4NzIsIDB4NzQsIDB4NjZdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdydGYnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3J0Zidcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDAwLCAweDYxLCAweDczLCAweDZEXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnd2FzbScsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vd2FzbSdcblx0XHR9O1xuXHR9XG5cblx0aWYgKFxuXHRcdGNoZWNrKFsweDc3LCAweDRGLCAweDQ2LCAweDQ2XSkgJiZcblx0XHQoXG5cdFx0XHRjaGVjayhbMHgwMCwgMHgwMSwgMHgwMCwgMHgwMF0sIHtvZmZzZXQ6IDR9KSB8fFxuXHRcdFx0Y2hlY2soWzB4NEYsIDB4NTQsIDB4NTQsIDB4NEZdLCB7b2Zmc2V0OiA0fSlcblx0XHQpXG5cdCkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd3b2ZmJyxcblx0XHRcdG1pbWU6ICdmb250L3dvZmYnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChcblx0XHRjaGVjayhbMHg3NywgMHg0RiwgMHg0NiwgMHgzMl0pICYmXG5cdFx0KFxuXHRcdFx0Y2hlY2soWzB4MDAsIDB4MDEsIDB4MDAsIDB4MDBdLCB7b2Zmc2V0OiA0fSkgfHxcblx0XHRcdGNoZWNrKFsweDRGLCAweDU0LCAweDU0LCAweDRGXSwge29mZnNldDogNH0pXG5cdFx0KVxuXHQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnd29mZjInLFxuXHRcdFx0bWltZTogJ2ZvbnQvd29mZjInXG5cdFx0fTtcblx0fVxuXG5cdGlmIChcblx0XHRjaGVjayhbMHg0QywgMHg1MF0sIHtvZmZzZXQ6IDM0fSkgJiZcblx0XHQoXG5cdFx0XHRjaGVjayhbMHgwMCwgMHgwMCwgMHgwMV0sIHtvZmZzZXQ6IDh9KSB8fFxuXHRcdFx0Y2hlY2soWzB4MDEsIDB4MDAsIDB4MDJdLCB7b2Zmc2V0OiA4fSkgfHxcblx0XHRcdGNoZWNrKFsweDAyLCAweDAwLCAweDAyXSwge29mZnNldDogOH0pXG5cdFx0KVxuXHQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnZW90Jyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi92bmQubXMtZm9udG9iamVjdCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDAwLCAweDAxLCAweDAwLCAweDAwLCAweDAwXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAndHRmJyxcblx0XHRcdG1pbWU6ICdmb250L3R0Zidcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDRGLCAweDU0LCAweDU0LCAweDRGLCAweDAwXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnb3RmJyxcblx0XHRcdG1pbWU6ICdmb250L290Zidcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDAwLCAweDAwLCAweDAxLCAweDAwXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnaWNvJyxcblx0XHRcdG1pbWU6ICdpbWFnZS94LWljb24nXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHgwMCwgMHgwMCwgMHgwMiwgMHgwMF0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2N1cicsXG5cdFx0XHRtaW1lOiAnaW1hZ2UveC1pY29uJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NDYsIDB4NEMsIDB4NTYsIDB4MDFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdmbHYnLFxuXHRcdFx0bWltZTogJ3ZpZGVvL3gtZmx2J1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4MjUsIDB4MjFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdwcycsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vcG9zdHNjcmlwdCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweEZELCAweDM3LCAweDdBLCAweDU4LCAweDVBLCAweDAwXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAneHonLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gteHonXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg1MywgMHg1MSwgMHg0QywgMHg2OV0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ3NxbGl0ZScsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC1zcWxpdGUzJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NEUsIDB4NDUsIDB4NTMsIDB4MUFdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICduZXMnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtbmludGVuZG8tbmVzLXJvbSdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDQzLCAweDcyLCAweDMyLCAweDM0XSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnY3J4Jyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LWdvb2dsZS1jaHJvbWUtZXh0ZW5zaW9uJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoXG5cdFx0Y2hlY2soWzB4NEQsIDB4NTMsIDB4NDMsIDB4NDZdKSB8fFxuXHRcdGNoZWNrKFsweDQ5LCAweDUzLCAweDYzLCAweDI4XSlcblx0KSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2NhYicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vdm5kLm1zLWNhYi1jb21wcmVzc2VkJ1xuXHRcdH07XG5cdH1cblxuXHQvLyBOZWVkcyB0byBiZSBiZWZvcmUgYGFyYCBjaGVja1xuXHRpZiAoY2hlY2soWzB4MjEsIDB4M0MsIDB4NjEsIDB4NzIsIDB4NjMsIDB4NjgsIDB4M0UsIDB4MEEsIDB4NjQsIDB4NjUsIDB4NjIsIDB4NjksIDB4NjEsIDB4NkUsIDB4MkQsIDB4NjIsIDB4NjksIDB4NkUsIDB4NjEsIDB4NzIsIDB4NzldKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdkZWInLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtZGViJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4MjEsIDB4M0MsIDB4NjEsIDB4NzIsIDB4NjMsIDB4NjgsIDB4M0VdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdhcicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC11bml4LWFyY2hpdmUnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHhFRCwgMHhBQiwgMHhFRSwgMHhEQl0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ3JwbScsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC1ycG0nXG5cdFx0fTtcblx0fVxuXG5cdGlmIChcblx0XHRjaGVjayhbMHgxRiwgMHhBMF0pIHx8XG5cdFx0Y2hlY2soWzB4MUYsIDB4OURdKVxuXHQpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnWicsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24veC1jb21wcmVzcydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDRDLCAweDVBLCAweDQ5LCAweDUwXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnbHonLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3gtbHppcCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweEQwLCAweENGLCAweDExLCAweEUwLCAweEExLCAweEIxLCAweDFBLCAweEUxXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnbXNpJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LW1zaSdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDA2LCAweDBFLCAweDJCLCAweDM0LCAweDAyLCAweDA1LCAweDAxLCAweDAxLCAweDBELCAweDAxLCAweDAyLCAweDAxLCAweDAxLCAweDAyXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnbXhmJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi9teGYnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg0N10sIHtvZmZzZXQ6IDR9KSAmJiAoY2hlY2soWzB4NDddLCB7b2Zmc2V0OiAxOTJ9KSB8fCBjaGVjayhbMHg0N10sIHtvZmZzZXQ6IDE5Nn0pKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdtdHMnLFxuXHRcdFx0bWltZTogJ3ZpZGVvL21wMnQnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg0MiwgMHg0QywgMHg0NSwgMHg0RSwgMHg0NCwgMHg0NSwgMHg1Ml0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2JsZW5kJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LWJsZW5kZXInXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg0MiwgMHg1MCwgMHg0NywgMHhGQl0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2JwZycsXG5cdFx0XHRtaW1lOiAnaW1hZ2UvYnBnJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4MDAsIDB4MDAsIDB4MDAsIDB4MEMsIDB4NkEsIDB4NTAsIDB4MjAsIDB4MjAsIDB4MEQsIDB4MEEsIDB4ODcsIDB4MEFdKSkge1xuXHRcdC8vIEpQRUctMjAwMCBmYW1pbHlcblxuXHRcdGlmIChjaGVjayhbMHg2QSwgMHg3MCwgMHgzMiwgMHgyMF0sIHtvZmZzZXQ6IDIwfSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2pwMicsXG5cdFx0XHRcdG1pbWU6ICdpbWFnZS9qcDInXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChjaGVjayhbMHg2QSwgMHg3MCwgMHg3OCwgMHgyMF0sIHtvZmZzZXQ6IDIwfSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2pweCcsXG5cdFx0XHRcdG1pbWU6ICdpbWFnZS9qcHgnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChjaGVjayhbMHg2QSwgMHg3MCwgMHg2RCwgMHgyMF0sIHtvZmZzZXQ6IDIwfSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2pwbScsXG5cdFx0XHRcdG1pbWU6ICdpbWFnZS9qcG0nXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChjaGVjayhbMHg2RCwgMHg2QSwgMHg3MCwgMHgzMl0sIHtvZmZzZXQ6IDIwfSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ21qMicsXG5cdFx0XHRcdG1pbWU6ICdpbWFnZS9tajInXG5cdFx0XHR9O1xuXHRcdH1cblx0fVxuXG5cdGlmIChjaGVjayhbMHg0NiwgMHg0RiwgMHg1MiwgMHg0RF0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2FpZicsXG5cdFx0XHRtaW1lOiAnYXVkaW8vYWlmZidcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrU3RyaW5nKCc8P3htbCAnKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICd4bWwnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3htbCdcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDQyLCAweDRGLCAweDRGLCAweDRCLCAweDRELCAweDRGLCAweDQyLCAweDQ5XSwge29mZnNldDogNjB9KSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdtb2JpJyxcblx0XHRcdG1pbWU6ICdhcHBsaWNhdGlvbi94LW1vYmlwb2NrZXQtZWJvb2snXG5cdFx0fTtcblx0fVxuXG5cdC8vIEZpbGUgVHlwZSBCb3ggKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0lTT19iYXNlX21lZGlhX2ZpbGVfZm9ybWF0KVxuXHRpZiAoY2hlY2soWzB4NjYsIDB4NzQsIDB4NzksIDB4NzBdLCB7b2Zmc2V0OiA0fSkpIHtcblx0XHRpZiAoY2hlY2soWzB4NkQsIDB4NjksIDB4NjYsIDB4MzFdLCB7b2Zmc2V0OiA4fSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2hlaWMnLFxuXHRcdFx0XHRtaW1lOiAnaW1hZ2UvaGVpZidcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0aWYgKGNoZWNrKFsweDZELCAweDczLCAweDY2LCAweDMxXSwge29mZnNldDogOH0pKSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRleHQ6ICdoZWljJyxcblx0XHRcdFx0bWltZTogJ2ltYWdlL2hlaWYtc2VxdWVuY2UnXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmIChjaGVjayhbMHg2OCwgMHg2NSwgMHg2OSwgMHg2M10sIHtvZmZzZXQ6IDh9KSB8fCBjaGVjayhbMHg2OCwgMHg2NSwgMHg2OSwgMHg3OF0sIHtvZmZzZXQ6IDh9KSkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0ZXh0OiAnaGVpYycsXG5cdFx0XHRcdG1pbWU6ICdpbWFnZS9oZWljJ1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRpZiAoY2hlY2soWzB4NjgsIDB4NjUsIDB4NzYsIDB4NjNdLCB7b2Zmc2V0OiA4fSkgfHwgY2hlY2soWzB4NjgsIDB4NjUsIDB4NzYsIDB4NzhdLCB7b2Zmc2V0OiA4fSkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdGV4dDogJ2hlaWMnLFxuXHRcdFx0XHRtaW1lOiAnaW1hZ2UvaGVpYy1zZXF1ZW5jZSdcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0aWYgKGNoZWNrKFsweEFCLCAweDRCLCAweDU0LCAweDU4LCAweDIwLCAweDMxLCAweDMxLCAweEJCLCAweDBELCAweDBBLCAweDFBLCAweDBBXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAna3R4Jyxcblx0XHRcdG1pbWU6ICdpbWFnZS9rdHgnXG5cdFx0fTtcblx0fVxuXG5cdGlmIChjaGVjayhbMHg0NCwgMHg0OSwgMHg0MywgMHg0RF0sIHtvZmZzZXQ6IDEyOH0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ2RjbScsXG5cdFx0XHRtaW1lOiAnYXBwbGljYXRpb24vZGljb20nXG5cdFx0fTtcblx0fVxuXG5cdC8vIE11c2VwYWNrLCBTVjdcblx0aWYgKGNoZWNrKFsweDRELCAweDUwLCAweDJCXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnbXBjJyxcblx0XHRcdG1pbWU6ICdhdWRpby94LW11c2VwYWNrJ1xuXHRcdH07XG5cdH1cblxuXHQvLyBNdXNlcGFjaywgU1Y4XG5cdGlmIChjaGVjayhbMHg0RCwgMHg1MCwgMHg0MywgMHg0Ql0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ21wYycsXG5cdFx0XHRtaW1lOiAnYXVkaW8veC1tdXNlcGFjaydcblx0XHR9O1xuXHR9XG5cblx0aWYgKGNoZWNrKFsweDQyLCAweDQ1LCAweDQ3LCAweDQ5LCAweDRFLCAweDNBXSkpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0ZXh0OiAnaWNzJyxcblx0XHRcdG1pbWU6ICd0ZXh0L2NhbGVuZGFyJ1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4NjcsIDB4NkMsIDB4NTQsIDB4NDYsIDB4MDIsIDB4MDAsIDB4MDAsIDB4MDBdKSkge1xuXHRcdHJldHVybiB7XG5cdFx0XHRleHQ6ICdnbGInLFxuXHRcdFx0bWltZTogJ21vZGVsL2dsdGYtYmluYXJ5J1xuXHRcdH07XG5cdH1cblxuXHRpZiAoY2hlY2soWzB4RDQsIDB4QzMsIDB4QjIsIDB4QTFdKSB8fCBjaGVjayhbMHhBMSwgMHhCMiwgMHhDMywgMHhENF0pKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGV4dDogJ3BjYXAnLFxuXHRcdFx0bWltZTogJ2FwcGxpY2F0aW9uL3ZuZC50Y3BkdW1wLnBjYXAnXG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBudWxsO1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmaWxlVHlwZTtcbi8vIFRPRE86IFJlbW92ZSB0aGlzIGZvciB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gZmlsZVR5cGU7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShmaWxlVHlwZSwgJ21pbmltdW1CeXRlcycsIHt2YWx1ZTogNDEwMH0pO1xuXG5tb2R1bGUuZXhwb3J0cy5zdHJlYW0gPSByZWFkYWJsZVN0cmVhbSA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG5cdC8vIFVzaW5nIGBldmFsYCB0byB3b3JrIGFyb3VuZCBpc3N1ZXMgd2hlbiBidW5kbGluZyB3aXRoIFdlYnBhY2tcblx0Y29uc3Qgc3RyZWFtID0gZXZhbCgncmVxdWlyZScpKCdzdHJlYW0nKTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1ldmFsXG5cblx0cmVhZGFibGVTdHJlYW0ub25jZSgncmVhZGFibGUnLCAoKSA9PiB7XG5cdFx0Y29uc3QgcGFzcyA9IG5ldyBzdHJlYW0uUGFzc1Rocm91Z2goKTtcblx0XHRjb25zdCBjaHVuayA9IHJlYWRhYmxlU3RyZWFtLnJlYWQobW9kdWxlLmV4cG9ydHMubWluaW11bUJ5dGVzKSB8fCByZWFkYWJsZVN0cmVhbS5yZWFkKCk7XG5cdFx0dHJ5IHtcblx0XHRcdHBhc3MuZmlsZVR5cGUgPSBmaWxlVHlwZShjaHVuayk7XG5cdFx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHRcdHJlamVjdChlcnJvcik7XG5cdFx0fVxuXG5cdFx0cmVhZGFibGVTdHJlYW0udW5zaGlmdChjaHVuayk7XG5cblx0XHRpZiAoc3RyZWFtLnBpcGVsaW5lKSB7XG5cdFx0XHRyZXNvbHZlKHN0cmVhbS5waXBlbGluZShyZWFkYWJsZVN0cmVhbSwgcGFzcywgKCkgPT4ge30pKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzb2x2ZShyZWFkYWJsZVN0cmVhbS5waXBlKHBhc3MpKTtcblx0XHR9XG5cdH0pO1xufSk7XG4iLCJcbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGZ1bmN0aW9uIGhhc093bihwcm9wLCBvYmopIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKTtcbn1cblxuZXhwb3J0cy52ZXJzaW9uID0gcmVxdWlyZSgnLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uO1xuIiwiLyohIGllZWU3NTQuIEJTRC0zLUNsYXVzZSBMaWNlbnNlLiBGZXJvc3MgQWJvdWtoYWRpamVoIDxodHRwczovL2Zlcm9zcy5vcmcvb3BlbnNvdXJjZT4gKi9cbmV4cG9ydHMucmVhZCA9IGZ1bmN0aW9uIChidWZmZXIsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtXG4gIHZhciBlTGVuID0gKG5CeXRlcyAqIDgpIC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gKGUgKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgbSA9IGUgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgZSA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gbUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBtID0gKG0gKiAyNTYpICsgYnVmZmVyW29mZnNldCArIGldLCBpICs9IGQsIG5CaXRzIC09IDgpIHt9XG5cbiAgaWYgKGUgPT09IDApIHtcbiAgICBlID0gMSAtIGVCaWFzXG4gIH0gZWxzZSBpZiAoZSA9PT0gZU1heCkge1xuICAgIHJldHVybiBtID8gTmFOIDogKChzID8gLTEgOiAxKSAqIEluZmluaXR5KVxuICB9IGVsc2Uge1xuICAgIG0gPSBtICsgTWF0aC5wb3coMiwgbUxlbilcbiAgICBlID0gZSAtIGVCaWFzXG4gIH1cbiAgcmV0dXJuIChzID8gLTEgOiAxKSAqIG0gKiBNYXRoLnBvdygyLCBlIC0gbUxlbilcbn1cblxuZXhwb3J0cy53cml0ZSA9IGZ1bmN0aW9uIChidWZmZXIsIHZhbHVlLCBvZmZzZXQsIGlzTEUsIG1MZW4sIG5CeXRlcykge1xuICB2YXIgZSwgbSwgY1xuICB2YXIgZUxlbiA9IChuQnl0ZXMgKiA4KSAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAoKHZhbHVlICogYykgLSAxKSAqIE1hdGgucG93KDIsIG1MZW4pXG4gICAgICBlID0gZSArIGVCaWFzXG4gICAgfSBlbHNlIHtcbiAgICAgIG0gPSB2YWx1ZSAqIE1hdGgucG93KDIsIGVCaWFzIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IDBcbiAgICB9XG4gIH1cblxuICBmb3IgKDsgbUxlbiA+PSA4OyBidWZmZXJbb2Zmc2V0ICsgaV0gPSBtICYgMHhmZiwgaSArPSBkLCBtIC89IDI1NiwgbUxlbiAtPSA4KSB7fVxuXG4gIGUgPSAoZSA8PCBtTGVuKSB8IG1cbiAgZUxlbiArPSBtTGVuXG4gIGZvciAoOyBlTGVuID4gMDsgYnVmZmVyW29mZnNldCArIGldID0gZSAmIDB4ZmYsIGkgKz0gZCwgZSAvPSAyNTYsIGVMZW4gLT0gOCkge31cblxuICBidWZmZXJbb2Zmc2V0ICsgaSAtIGRdIHw9IHMgKiAxMjhcbn1cbiIsIid1c2Ugc3RyaWN0JztcbmNvbnN0IGZpbGVUeXBlID0gcmVxdWlyZSgnZmlsZS10eXBlJyk7XG5cbmNvbnN0IGltYWdlRXh0cyA9IG5ldyBTZXQoW1xuXHQnanBnJyxcblx0J3BuZycsXG5cdCdnaWYnLFxuXHQnd2VicCcsXG5cdCdmbGlmJyxcblx0J2NyMicsXG5cdCd0aWYnLFxuXHQnYm1wJyxcblx0J2p4cicsXG5cdCdwc2QnLFxuXHQnaWNvJyxcblx0J2JwZycsXG5cdCdqcDInLFxuXHQnanBtJyxcblx0J2pweCcsXG5cdCdoZWljJyxcblx0J2N1cicsXG5cdCdkY20nXG5dKTtcblxuY29uc3QgaW1hZ2VUeXBlID0gaW5wdXQgPT4ge1xuXHRjb25zdCByZXQgPSBmaWxlVHlwZShpbnB1dCk7XG5cdHJldHVybiBpbWFnZUV4dHMuaGFzKHJldCAmJiByZXQuZXh0KSA/IHJldCA6IG51bGw7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGltYWdlVHlwZTtcbi8vIFRPRE86IFJlbW92ZSB0aGlzIGZvciB0aGUgbmV4dCBtYWpvciByZWxlYXNlXG5tb2R1bGUuZXhwb3J0cy5kZWZhdWx0ID0gaW1hZ2VUeXBlO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoaW1hZ2VUeXBlLCAnbWluaW11bUJ5dGVzJywge3ZhbHVlOiBmaWxlVHlwZS5taW5pbXVtQnl0ZXN9KTtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdEJ5dGVMZW5ndGggPSAxMDI0ICogODtcbmNvbnN0IGNoYXJBcnJheSA9IFtdO1xuXG5jbGFzcyBJT0J1ZmZlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICAgICAgaWYgKGRhdGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZGF0YSA9IGRlZmF1bHRCeXRlTGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQXJyYXlCdWZmZXIoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgbGV0IGxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQgPyBvcHRpb25zLm9mZnNldD4+PjAgOiAwO1xuICAgICAgICBpZiAoZGF0YS5idWZmZXIpIHtcbiAgICAgICAgICAgIGxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCAtIG9mZnNldDtcbiAgICAgICAgICAgIGlmIChkYXRhLmJ5dGVMZW5ndGggIT09IGRhdGEuYnVmZmVyLmJ5dGVMZW5ndGgpIHsgLy8gTm9kZS5qcyBidWZmZXIgZnJvbSBwb29sXG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuYnVmZmVyLnNsaWNlKGRhdGEuYnl0ZU9mZnNldCArIG9mZnNldCwgZGF0YS5ieXRlT2Zmc2V0ICsgZGF0YS5ieXRlTGVuZ3RoKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob2Zmc2V0KSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRhdGEuYnVmZmVyLnNsaWNlKG9mZnNldCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRhdGEgPSBkYXRhLmJ1ZmZlcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGRhdGE7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gbGVuZ3RoO1xuICAgICAgICB0aGlzLmJ5dGVMZW5ndGggPSBsZW5ndGg7XG4gICAgICAgIHRoaXMuYnl0ZU9mZnNldCA9IDA7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0cnVlO1xuICAgICAgICB0aGlzLl9kYXRhID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICAgICAgdGhpcy5faW5jcmVtZW50ID0gbGVuZ3RoIHx8IGRlZmF1bHRCeXRlTGVuZ3RoO1xuICAgICAgICB0aGlzLl9tYXJrID0gMDtcbiAgICB9XG5cbiAgICBhdmFpbGFibGUoYnl0ZUxlbmd0aCkge1xuICAgICAgICBpZiAoYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkKSBieXRlTGVuZ3RoID0gMTtcbiAgICAgICAgcmV0dXJuICh0aGlzLm9mZnNldCArIGJ5dGVMZW5ndGgpIDw9IHRoaXMubGVuZ3RoO1xuICAgIH1cblxuICAgIGlzTGl0dGxlRW5kaWFuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5saXR0bGVFbmRpYW47XG4gICAgfVxuXG4gICAgc2V0TGl0dGxlRW5kaWFuKCkge1xuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHRydWU7XG4gICAgfVxuXG4gICAgaXNCaWdFbmRpYW4oKSB7XG4gICAgICAgIHJldHVybiAhdGhpcy5saXR0bGVFbmRpYW47XG4gICAgfVxuXG4gICAgc2V0QmlnRW5kaWFuKCkge1xuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IGZhbHNlO1xuICAgIH1cblxuICAgIHNraXAobikge1xuICAgICAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSBuID0gMTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbjtcbiAgICB9XG5cbiAgICBzZWVrKG9mZnNldCkge1xuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcbiAgICB9XG5cbiAgICBtYXJrKCkge1xuICAgICAgICB0aGlzLl9tYXJrID0gdGhpcy5vZmZzZXQ7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5fbWFyaztcbiAgICB9XG5cbiAgICByZXdpbmQoKSB7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcbiAgICB9XG5cbiAgICBlbnN1cmVBdmFpbGFibGUoYnl0ZUxlbmd0aCkge1xuICAgICAgICBpZiAoYnl0ZUxlbmd0aCA9PT0gdW5kZWZpbmVkKSBieXRlTGVuZ3RoID0gMTtcbiAgICAgICAgaWYgKCF0aGlzLmF2YWlsYWJsZShieXRlTGVuZ3RoKSkge1xuICAgICAgICAgICAgY29uc3QgbmV3SW5jcmVtZW50ID0gdGhpcy5faW5jcmVtZW50ICsgdGhpcy5faW5jcmVtZW50O1xuICAgICAgICAgICAgdGhpcy5faW5jcmVtZW50ID0gbmV3SW5jcmVtZW50O1xuICAgICAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gdGhpcy5sZW5ndGggKyBuZXdJbmNyZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XG4gICAgICAgICAgICBuZXdBcnJheS5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpKTtcbiAgICAgICAgICAgIHRoaXMuYnVmZmVyID0gbmV3QXJyYXkuYnVmZmVyO1xuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSBuZXdMZW5ndGg7XG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJlYWRCb29sZWFuKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVWludDgoKSAhPT0gMDtcbiAgICB9XG5cbiAgICByZWFkSW50OCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0SW50OCh0aGlzLm9mZnNldCsrKTtcbiAgICB9XG5cbiAgICByZWFkVWludDgoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldFVpbnQ4KHRoaXMub2Zmc2V0KyspO1xuICAgIH1cblxuICAgIHJlYWRCeXRlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVWludDgoKTtcbiAgICB9XG5cbiAgICByZWFkQnl0ZXMobikge1xuICAgICAgICBpZiAobiA9PT0gdW5kZWZpbmVkKSBuID0gMTtcbiAgICAgICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobik7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICBieXRlc1tpXSA9IHRoaXMucmVhZEJ5dGUoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYnl0ZXM7XG4gICAgfVxuXG4gICAgcmVhZEludDE2KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEludDE2KHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZWFkVWludDE2KCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldFVpbnQxNih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVhZEludDMyKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICByZWFkVWludDMyKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSB0aGlzLl9kYXRhLmdldFVpbnQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVhZEZsb2F0MzIoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0RmxvYXQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVhZEZsb2F0NjQoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0RmxvYXQ2NCh0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA4O1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgcmVhZENoYXIoKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucmVhZEludDgoKSk7XG4gICAgfVxuXG4gICAgcmVhZENoYXJzKG4pIHtcbiAgICAgICAgaWYgKG4gPT09IHVuZGVmaW5lZCkgbiA9IDE7XG4gICAgICAgIGNoYXJBcnJheS5sZW5ndGggPSBuO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgY2hhckFycmF5W2ldID0gdGhpcy5yZWFkQ2hhcigpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFyQXJyYXkuam9pbignJyk7XG4gICAgfVxuXG4gICAgd3JpdGVCb29sZWFuKGJvb2wpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQ4KGJvb2wgPyAweGZmIDogMHgwMCk7XG4gICAgfVxuXG4gICAgd3JpdGVJbnQ4KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDEpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldEludDgodGhpcy5vZmZzZXQrKywgdmFsdWUpO1xuICAgIH1cblxuICAgIHdyaXRlVWludDgodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMSk7XG4gICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDgodGhpcy5vZmZzZXQrKywgdmFsdWUpO1xuICAgIH1cblxuICAgIHdyaXRlQnl0ZSh2YWx1ZSkge1xuICAgICAgICB0aGlzLndyaXRlVWludDgodmFsdWUpO1xuICAgIH1cblxuICAgIHdyaXRlQnl0ZXMoYnl0ZXMpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoYnl0ZXMubGVuZ3RoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdGhpcy5fZGF0YS5zZXRVaW50OCh0aGlzLm9mZnNldCsrLCBieXRlc1tpXSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB3cml0ZUludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldEludDE2KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xuICAgIH1cblxuICAgIHdyaXRlVWludDE2KHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldFVpbnQxNih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcbiAgICB9XG5cbiAgICB3cml0ZUludDMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDQpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldEludDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xuICAgIH1cblxuICAgIHdyaXRlVWludDMyKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDQpO1xuICAgICAgICB0aGlzLl9kYXRhLnNldFVpbnQzMih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0MzIodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoNCk7XG4gICAgICAgIHRoaXMuX2RhdGEuc2V0RmxvYXQzMih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcbiAgICB9XG5cbiAgICB3cml0ZUZsb2F0NjQodmFsdWUpIHtcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoOCk7XG4gICAgICAgIHRoaXMuX2RhdGEuc2V0RmxvYXQ2NCh0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gODtcbiAgICB9XG5cbiAgICB3cml0ZUNoYXIoc3RyKSB7XG4gICAgICAgIHRoaXMud3JpdGVVaW50OChzdHIuY2hhckNvZGVBdCgwKSk7XG4gICAgfVxuXG4gICAgd3JpdGVDaGFycyhzdHIpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50OChzdHIuY2hhckNvZGVBdChpKSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0b0FycmF5KCkge1xuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIDAsIHRoaXMub2Zmc2V0KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSU9CdWZmZXI7XG4iLCJjb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzQW55QXJyYXkob2JqZWN0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKG9iamVjdCkuZW5kc1dpdGgoJ0FycmF5XScpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGlzQXJyYXlUeXBlKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRvU3RyaW5nLmNhbGwodmFsdWUpLnN1YnN0cigtNiwgNSkgPT09ICdBcnJheSc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0Zpbml0ZSB8fCBmdW5jdGlvbiAodmFsdWUpIHtcblx0cmV0dXJuICEodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJyB8fCB2YWx1ZSAhPT0gdmFsdWUgfHwgdmFsdWUgPT09IEluZmluaXR5IHx8IHZhbHVlID09PSAtSW5maW5pdHkpO1xufTtcbiIsIi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9wYXVsbWlsbHIvZXM2LXNoaW1cbi8vIGh0dHA6Ly9wZW9wbGUubW96aWxsYS5vcmcvfmpvcmVuZG9yZmYvZXM2LWRyYWZ0Lmh0bWwjc2VjLW51bWJlci5pc2ludGVnZXJcbnZhciBpc0Zpbml0ZSA9IHJlcXVpcmUoXCJpcy1maW5pdGVcIik7XG5tb2R1bGUuZXhwb3J0cyA9IE51bWJlci5pc0ludGVnZXIgfHwgZnVuY3Rpb24odmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSBcIm51bWJlclwiICYmXG4gICAgaXNGaW5pdGUodmFsKSAmJlxuICAgIE1hdGguZmxvb3IodmFsKSA9PT0gdmFsO1xufTtcbiIsInZhciBlbmNvZGUgPSByZXF1aXJlKCcuL2xpYi9lbmNvZGVyJyksXG4gICAgZGVjb2RlID0gcmVxdWlyZSgnLi9saWIvZGVjb2RlcicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGRlY29kZTogZGVjb2RlXG59O1xuIiwiLyogLSotIHRhYi13aWR0aDogMjsgaW5kZW50LXRhYnMtbW9kZTogbmlsOyBjLWJhc2ljLW9mZnNldDogMiAtKi0gL1xuLyogdmltOiBzZXQgc2hpZnR3aWR0aD0yIHRhYnN0b3A9MiBhdXRvaW5kZW50IGNpbmRlbnQgZXhwYW5kdGFiOiAqL1xuLypcbiAgIENvcHlyaWdodCAyMDExIG5vdG1hc3RlcnlldFxuXG4gICBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xuICAgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLlxuICAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG5cbiAgICAgICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuICAgVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZVxuICAgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxuICAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuXG4gICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kXG4gICBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8vIC0gVGhlIEpQRUcgc3BlY2lmaWNhdGlvbiBjYW4gYmUgZm91bmQgaW4gdGhlIElUVSBDQ0lUVCBSZWNvbW1lbmRhdGlvbiBULjgxXG4vLyAgICh3d3cudzMub3JnL0dyYXBoaWNzL0pQRUcvaXR1LXQ4MS5wZGYpXG4vLyAtIFRoZSBKRklGIHNwZWNpZmljYXRpb24gY2FuIGJlIGZvdW5kIGluIHRoZSBKUEVHIEZpbGUgSW50ZXJjaGFuZ2UgRm9ybWF0XG4vLyAgICh3d3cudzMub3JnL0dyYXBoaWNzL0pQRUcvamZpZjMucGRmKVxuLy8gLSBUaGUgQWRvYmUgQXBwbGljYXRpb24tU3BlY2lmaWMgSlBFRyBtYXJrZXJzIGluIHRoZSBTdXBwb3J0aW5nIHRoZSBEQ1QgRmlsdGVyc1xuLy8gICBpbiBQb3N0U2NyaXB0IExldmVsIDIsIFRlY2huaWNhbCBOb3RlICM1MTE2XG4vLyAgIChwYXJ0bmVycy5hZG9iZS5jb20vcHVibGljL2RldmVsb3Blci9lbi9wcy9zZGsvNTExNi5EQ1RfRmlsdGVyLnBkZilcblxudmFyIEpwZWdJbWFnZSA9IChmdW5jdGlvbiBqcGVnSW1hZ2UoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICB2YXIgZGN0WmlnWmFnID0gbmV3IEludDMyQXJyYXkoW1xuICAgICAwLFxuICAgICAxLCAgOCxcbiAgICAxNiwgIDksICAyLFxuICAgICAzLCAxMCwgMTcsIDI0LFxuICAgIDMyLCAyNSwgMTgsIDExLCA0LFxuICAgICA1LCAxMiwgMTksIDI2LCAzMywgNDAsXG4gICAgNDgsIDQxLCAzNCwgMjcsIDIwLCAxMywgIDYsXG4gICAgIDcsIDE0LCAyMSwgMjgsIDM1LCA0MiwgNDksIDU2LFxuICAgIDU3LCA1MCwgNDMsIDM2LCAyOSwgMjIsIDE1LFxuICAgIDIzLCAzMCwgMzcsIDQ0LCA1MSwgNTgsXG4gICAgNTksIDUyLCA0NSwgMzgsIDMxLFxuICAgIDM5LCA0NiwgNTMsIDYwLFxuICAgIDYxLCA1NCwgNDcsXG4gICAgNTUsIDYyLFxuICAgIDYzXG4gIF0pO1xuXG4gIHZhciBkY3RDb3MxICA9ICA0MDE3ICAgLy8gY29zKHBpLzE2KVxuICB2YXIgZGN0U2luMSAgPSAgIDc5OSAgIC8vIHNpbihwaS8xNilcbiAgdmFyIGRjdENvczMgID0gIDM0MDYgICAvLyBjb3MoMypwaS8xNilcbiAgdmFyIGRjdFNpbjMgID0gIDIyNzYgICAvLyBzaW4oMypwaS8xNilcbiAgdmFyIGRjdENvczYgID0gIDE1NjcgICAvLyBjb3MoNipwaS8xNilcbiAgdmFyIGRjdFNpbjYgID0gIDM3ODQgICAvLyBzaW4oNipwaS8xNilcbiAgdmFyIGRjdFNxcnQyID0gIDU3OTMgICAvLyBzcXJ0KDIpXG4gIHZhciBkY3RTcXJ0MWQyID0gMjg5NiAgLy8gc3FydCgyKSAvIDJcblxuICBmdW5jdGlvbiBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkSHVmZm1hblRhYmxlKGNvZGVMZW5ndGhzLCB2YWx1ZXMpIHtcbiAgICB2YXIgayA9IDAsIGNvZGUgPSBbXSwgaSwgaiwgbGVuZ3RoID0gMTY7XG4gICAgd2hpbGUgKGxlbmd0aCA+IDAgJiYgIWNvZGVMZW5ndGhzW2xlbmd0aCAtIDFdKVxuICAgICAgbGVuZ3RoLS07XG4gICAgY29kZS5wdXNoKHtjaGlsZHJlbjogW10sIGluZGV4OiAwfSk7XG4gICAgdmFyIHAgPSBjb2RlWzBdLCBxO1xuICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGNvZGVMZW5ndGhzW2ldOyBqKyspIHtcbiAgICAgICAgcCA9IGNvZGUucG9wKCk7XG4gICAgICAgIHAuY2hpbGRyZW5bcC5pbmRleF0gPSB2YWx1ZXNba107XG4gICAgICAgIHdoaWxlIChwLmluZGV4ID4gMCkge1xuICAgICAgICAgIGlmIChjb2RlLmxlbmd0aCA9PT0gMClcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignQ291bGQgbm90IHJlY3JlYXRlIEh1ZmZtYW4gVGFibGUnKTtcbiAgICAgICAgICBwID0gY29kZS5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICBwLmluZGV4Kys7XG4gICAgICAgIGNvZGUucHVzaChwKTtcbiAgICAgICAgd2hpbGUgKGNvZGUubGVuZ3RoIDw9IGkpIHtcbiAgICAgICAgICBjb2RlLnB1c2gocSA9IHtjaGlsZHJlbjogW10sIGluZGV4OiAwfSk7XG4gICAgICAgICAgcC5jaGlsZHJlbltwLmluZGV4XSA9IHEuY2hpbGRyZW47XG4gICAgICAgICAgcCA9IHE7XG4gICAgICAgIH1cbiAgICAgICAgaysrO1xuICAgICAgfVxuICAgICAgaWYgKGkgKyAxIDwgbGVuZ3RoKSB7XG4gICAgICAgIC8vIHAgaGVyZSBwb2ludHMgdG8gbGFzdCBjb2RlXG4gICAgICAgIGNvZGUucHVzaChxID0ge2NoaWxkcmVuOiBbXSwgaW5kZXg6IDB9KTtcbiAgICAgICAgcC5jaGlsZHJlbltwLmluZGV4XSA9IHEuY2hpbGRyZW47XG4gICAgICAgIHAgPSBxO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29kZVswXS5jaGlsZHJlbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlY29kZVNjYW4oZGF0YSwgb2Zmc2V0LFxuICAgICAgICAgICAgICAgICAgICAgIGZyYW1lLCBjb21wb25lbnRzLCByZXNldEludGVydmFsLFxuICAgICAgICAgICAgICAgICAgICAgIHNwZWN0cmFsU3RhcnQsIHNwZWN0cmFsRW5kLFxuICAgICAgICAgICAgICAgICAgICAgIHN1Y2Nlc3NpdmVQcmV2LCBzdWNjZXNzaXZlLCBvcHRzKSB7XG4gICAgdmFyIHByZWNpc2lvbiA9IGZyYW1lLnByZWNpc2lvbjtcbiAgICB2YXIgc2FtcGxlc1BlckxpbmUgPSBmcmFtZS5zYW1wbGVzUGVyTGluZTtcbiAgICB2YXIgc2NhbkxpbmVzID0gZnJhbWUuc2NhbkxpbmVzO1xuICAgIHZhciBtY3VzUGVyTGluZSA9IGZyYW1lLm1jdXNQZXJMaW5lO1xuICAgIHZhciBwcm9ncmVzc2l2ZSA9IGZyYW1lLnByb2dyZXNzaXZlO1xuICAgIHZhciBtYXhIID0gZnJhbWUubWF4SCwgbWF4ViA9IGZyYW1lLm1heFY7XG5cbiAgICB2YXIgc3RhcnRPZmZzZXQgPSBvZmZzZXQsIGJpdHNEYXRhID0gMCwgYml0c0NvdW50ID0gMDtcbiAgICBmdW5jdGlvbiByZWFkQml0KCkge1xuICAgICAgaWYgKGJpdHNDb3VudCA+IDApIHtcbiAgICAgICAgYml0c0NvdW50LS07XG4gICAgICAgIHJldHVybiAoYml0c0RhdGEgPj4gYml0c0NvdW50KSAmIDE7XG4gICAgICB9XG4gICAgICBiaXRzRGF0YSA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgaWYgKGJpdHNEYXRhID09IDB4RkYpIHtcbiAgICAgICAgdmFyIG5leHRCeXRlID0gZGF0YVtvZmZzZXQrK107XG4gICAgICAgIGlmIChuZXh0Qnl0ZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVuZXhwZWN0ZWQgbWFya2VyOiBcIiArICgoYml0c0RhdGEgPDwgOCkgfCBuZXh0Qnl0ZSkudG9TdHJpbmcoMTYpKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB1bnN0dWZmIDBcbiAgICAgIH1cbiAgICAgIGJpdHNDb3VudCA9IDc7XG4gICAgICByZXR1cm4gYml0c0RhdGEgPj4+IDc7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZUh1ZmZtYW4odHJlZSkge1xuICAgICAgdmFyIG5vZGUgPSB0cmVlLCBiaXQ7XG4gICAgICB3aGlsZSAoKGJpdCA9IHJlYWRCaXQoKSkgIT09IG51bGwpIHtcbiAgICAgICAgbm9kZSA9IG5vZGVbYml0XTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlID09PSAnbnVtYmVyJylcbiAgICAgICAgICByZXR1cm4gbm9kZTtcbiAgICAgICAgaWYgKHR5cGVvZiBub2RlICE9PSAnb2JqZWN0JylcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIGh1ZmZtYW4gc2VxdWVuY2VcIik7XG4gICAgICB9XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgZnVuY3Rpb24gcmVjZWl2ZShsZW5ndGgpIHtcbiAgICAgIHZhciBuID0gMDtcbiAgICAgIHdoaWxlIChsZW5ndGggPiAwKSB7XG4gICAgICAgIHZhciBiaXQgPSByZWFkQml0KCk7XG4gICAgICAgIGlmIChiaXQgPT09IG51bGwpIHJldHVybjtcbiAgICAgICAgbiA9IChuIDw8IDEpIHwgYml0O1xuICAgICAgICBsZW5ndGgtLTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBuO1xuICAgIH1cbiAgICBmdW5jdGlvbiByZWNlaXZlQW5kRXh0ZW5kKGxlbmd0aCkge1xuICAgICAgdmFyIG4gPSByZWNlaXZlKGxlbmd0aCk7XG4gICAgICBpZiAobiA+PSAxIDw8IChsZW5ndGggLSAxKSlcbiAgICAgICAgcmV0dXJuIG47XG4gICAgICByZXR1cm4gbiArICgtMSA8PCBsZW5ndGgpICsgMTtcbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlQmFzZWxpbmUoY29tcG9uZW50LCB6eikge1xuICAgICAgdmFyIHQgPSBkZWNvZGVIdWZmbWFuKGNvbXBvbmVudC5odWZmbWFuVGFibGVEQyk7XG4gICAgICB2YXIgZGlmZiA9IHQgPT09IDAgPyAwIDogcmVjZWl2ZUFuZEV4dGVuZCh0KTtcbiAgICAgIHp6WzBdPSAoY29tcG9uZW50LnByZWQgKz0gZGlmZik7XG4gICAgICB2YXIgayA9IDE7XG4gICAgICB3aGlsZSAoayA8IDY0KSB7XG4gICAgICAgIHZhciBycyA9IGRlY29kZUh1ZmZtYW4oY29tcG9uZW50Lmh1ZmZtYW5UYWJsZUFDKTtcbiAgICAgICAgdmFyIHMgPSBycyAmIDE1LCByID0gcnMgPj4gNDtcbiAgICAgICAgaWYgKHMgPT09IDApIHtcbiAgICAgICAgICBpZiAociA8IDE1KVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgayArPSAxNjtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBrICs9IHI7XG4gICAgICAgIHZhciB6ID0gZGN0WmlnWmFnW2tdO1xuICAgICAgICB6elt6XSA9IHJlY2VpdmVBbmRFeHRlbmQocyk7XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICB9XG4gICAgZnVuY3Rpb24gZGVjb2RlRENGaXJzdChjb21wb25lbnQsIHp6KSB7XG4gICAgICB2YXIgdCA9IGRlY29kZUh1ZmZtYW4oY29tcG9uZW50Lmh1ZmZtYW5UYWJsZURDKTtcbiAgICAgIHZhciBkaWZmID0gdCA9PT0gMCA/IDAgOiAocmVjZWl2ZUFuZEV4dGVuZCh0KSA8PCBzdWNjZXNzaXZlKTtcbiAgICAgIHp6WzBdID0gKGNvbXBvbmVudC5wcmVkICs9IGRpZmYpO1xuICAgIH1cbiAgICBmdW5jdGlvbiBkZWNvZGVEQ1N1Y2Nlc3NpdmUoY29tcG9uZW50LCB6eikge1xuICAgICAgenpbMF0gfD0gcmVhZEJpdCgpIDw8IHN1Y2Nlc3NpdmU7XG4gICAgfVxuICAgIHZhciBlb2JydW4gPSAwO1xuICAgIGZ1bmN0aW9uIGRlY29kZUFDRmlyc3QoY29tcG9uZW50LCB6eikge1xuICAgICAgaWYgKGVvYnJ1biA+IDApIHtcbiAgICAgICAgZW9icnVuLS07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHZhciBrID0gc3BlY3RyYWxTdGFydCwgZSA9IHNwZWN0cmFsRW5kO1xuICAgICAgd2hpbGUgKGsgPD0gZSkge1xuICAgICAgICB2YXIgcnMgPSBkZWNvZGVIdWZmbWFuKGNvbXBvbmVudC5odWZmbWFuVGFibGVBQyk7XG4gICAgICAgIHZhciBzID0gcnMgJiAxNSwgciA9IHJzID4+IDQ7XG4gICAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgICAgaWYgKHIgPCAxNSkge1xuICAgICAgICAgICAgZW9icnVuID0gcmVjZWl2ZShyKSArICgxIDw8IHIpIC0gMTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBrICs9IDE2O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGsgKz0gcjtcbiAgICAgICAgdmFyIHogPSBkY3RaaWdaYWdba107XG4gICAgICAgIHp6W3pdID0gcmVjZWl2ZUFuZEV4dGVuZChzKSAqICgxIDw8IHN1Y2Nlc3NpdmUpO1xuICAgICAgICBrKys7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciBzdWNjZXNzaXZlQUNTdGF0ZSA9IDAsIHN1Y2Nlc3NpdmVBQ05leHRWYWx1ZTtcbiAgICBmdW5jdGlvbiBkZWNvZGVBQ1N1Y2Nlc3NpdmUoY29tcG9uZW50LCB6eikge1xuICAgICAgdmFyIGsgPSBzcGVjdHJhbFN0YXJ0LCBlID0gc3BlY3RyYWxFbmQsIHIgPSAwO1xuICAgICAgd2hpbGUgKGsgPD0gZSkge1xuICAgICAgICB2YXIgeiA9IGRjdFppZ1phZ1trXTtcbiAgICAgICAgdmFyIGRpcmVjdGlvbiA9IHp6W3pdIDwgMCA/IC0xIDogMTtcbiAgICAgICAgc3dpdGNoIChzdWNjZXNzaXZlQUNTdGF0ZSkge1xuICAgICAgICBjYXNlIDA6IC8vIGluaXRpYWwgc3RhdGVcbiAgICAgICAgICB2YXIgcnMgPSBkZWNvZGVIdWZmbWFuKGNvbXBvbmVudC5odWZmbWFuVGFibGVBQyk7XG4gICAgICAgICAgdmFyIHMgPSBycyAmIDE1LCByID0gcnMgPj4gNDtcbiAgICAgICAgICBpZiAocyA9PT0gMCkge1xuICAgICAgICAgICAgaWYgKHIgPCAxNSkge1xuICAgICAgICAgICAgICBlb2JydW4gPSByZWNlaXZlKHIpICsgKDEgPDwgcik7XG4gICAgICAgICAgICAgIHN1Y2Nlc3NpdmVBQ1N0YXRlID0gNDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHIgPSAxNjtcbiAgICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDU3RhdGUgPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAocyAhPT0gMSlcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiaW52YWxpZCBBQ24gZW5jb2RpbmdcIik7XG4gICAgICAgICAgICBzdWNjZXNzaXZlQUNOZXh0VmFsdWUgPSByZWNlaXZlQW5kRXh0ZW5kKHMpO1xuICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDU3RhdGUgPSByID8gMiA6IDM7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICBjYXNlIDE6IC8vIHNraXBwaW5nIHIgemVybyBpdGVtc1xuICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgaWYgKHp6W3pdKVxuICAgICAgICAgICAgenpbel0gKz0gKHJlYWRCaXQoKSA8PCBzdWNjZXNzaXZlKSAqIGRpcmVjdGlvbjtcbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHItLTtcbiAgICAgICAgICAgIGlmIChyID09PSAwKVxuICAgICAgICAgICAgICBzdWNjZXNzaXZlQUNTdGF0ZSA9IHN1Y2Nlc3NpdmVBQ1N0YXRlID09IDIgPyAzIDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzogLy8gc2V0IHZhbHVlIGZvciBhIHplcm8gaXRlbVxuICAgICAgICAgIGlmICh6elt6XSlcbiAgICAgICAgICAgIHp6W3pdICs9IChyZWFkQml0KCkgPDwgc3VjY2Vzc2l2ZSkgKiBkaXJlY3Rpb247XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB6elt6XSA9IHN1Y2Nlc3NpdmVBQ05leHRWYWx1ZSA8PCBzdWNjZXNzaXZlO1xuICAgICAgICAgICAgc3VjY2Vzc2l2ZUFDU3RhdGUgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSA0OiAvLyBlb2JcbiAgICAgICAgICBpZiAoenpbel0pXG4gICAgICAgICAgICB6elt6XSArPSAocmVhZEJpdCgpIDw8IHN1Y2Nlc3NpdmUpICogZGlyZWN0aW9uO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICAgIGlmIChzdWNjZXNzaXZlQUNTdGF0ZSA9PT0gNCkge1xuICAgICAgICBlb2JydW4tLTtcbiAgICAgICAgaWYgKGVvYnJ1biA9PT0gMClcbiAgICAgICAgICBzdWNjZXNzaXZlQUNTdGF0ZSA9IDA7XG4gICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZU1jdShjb21wb25lbnQsIGRlY29kZSwgbWN1LCByb3csIGNvbCkge1xuICAgICAgdmFyIG1jdVJvdyA9IChtY3UgLyBtY3VzUGVyTGluZSkgfCAwO1xuICAgICAgdmFyIG1jdUNvbCA9IG1jdSAlIG1jdXNQZXJMaW5lO1xuICAgICAgdmFyIGJsb2NrUm93ID0gbWN1Um93ICogY29tcG9uZW50LnYgKyByb3c7XG4gICAgICB2YXIgYmxvY2tDb2wgPSBtY3VDb2wgKiBjb21wb25lbnQuaCArIGNvbDtcbiAgICAgIC8vIElmIHRoZSBibG9jayBpcyBtaXNzaW5nIGFuZCB3ZSdyZSBpbiB0b2xlcmFudCBtb2RlLCBqdXN0IHNraXAgaXQuXG4gICAgICBpZiAoY29tcG9uZW50LmJsb2Nrc1tibG9ja1Jvd10gPT09IHVuZGVmaW5lZCAmJiBvcHRzLnRvbGVyYW50RGVjb2RpbmcpXG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlY29kZShjb21wb25lbnQsIGNvbXBvbmVudC5ibG9ja3NbYmxvY2tSb3ddW2Jsb2NrQ29sXSk7XG4gICAgfVxuICAgIGZ1bmN0aW9uIGRlY29kZUJsb2NrKGNvbXBvbmVudCwgZGVjb2RlLCBtY3UpIHtcbiAgICAgIHZhciBibG9ja1JvdyA9IChtY3UgLyBjb21wb25lbnQuYmxvY2tzUGVyTGluZSkgfCAwO1xuICAgICAgdmFyIGJsb2NrQ29sID0gbWN1ICUgY29tcG9uZW50LmJsb2Nrc1BlckxpbmU7XG4gICAgICAvLyBJZiB0aGUgYmxvY2sgaXMgbWlzc2luZyBhbmQgd2UncmUgaW4gdG9sZXJhbnQgbW9kZSwganVzdCBza2lwIGl0LlxuICAgICAgaWYgKGNvbXBvbmVudC5ibG9ja3NbYmxvY2tSb3ddID09PSB1bmRlZmluZWQgJiYgb3B0cy50b2xlcmFudERlY29kaW5nKVxuICAgICAgICByZXR1cm47XG4gICAgICBkZWNvZGUoY29tcG9uZW50LCBjb21wb25lbnQuYmxvY2tzW2Jsb2NrUm93XVtibG9ja0NvbF0pO1xuICAgIH1cblxuICAgIHZhciBjb21wb25lbnRzTGVuZ3RoID0gY29tcG9uZW50cy5sZW5ndGg7XG4gICAgdmFyIGNvbXBvbmVudCwgaSwgaiwgaywgbjtcbiAgICB2YXIgZGVjb2RlRm47XG4gICAgaWYgKHByb2dyZXNzaXZlKSB7XG4gICAgICBpZiAoc3BlY3RyYWxTdGFydCA9PT0gMClcbiAgICAgICAgZGVjb2RlRm4gPSBzdWNjZXNzaXZlUHJldiA9PT0gMCA/IGRlY29kZURDRmlyc3QgOiBkZWNvZGVEQ1N1Y2Nlc3NpdmU7XG4gICAgICBlbHNlXG4gICAgICAgIGRlY29kZUZuID0gc3VjY2Vzc2l2ZVByZXYgPT09IDAgPyBkZWNvZGVBQ0ZpcnN0IDogZGVjb2RlQUNTdWNjZXNzaXZlO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWNvZGVGbiA9IGRlY29kZUJhc2VsaW5lO1xuICAgIH1cblxuICAgIHZhciBtY3UgPSAwLCBtYXJrZXI7XG4gICAgdmFyIG1jdUV4cGVjdGVkO1xuICAgIGlmIChjb21wb25lbnRzTGVuZ3RoID09IDEpIHtcbiAgICAgIG1jdUV4cGVjdGVkID0gY29tcG9uZW50c1swXS5ibG9ja3NQZXJMaW5lICogY29tcG9uZW50c1swXS5ibG9ja3NQZXJDb2x1bW47XG4gICAgfSBlbHNlIHtcbiAgICAgIG1jdUV4cGVjdGVkID0gbWN1c1BlckxpbmUgKiBmcmFtZS5tY3VzUGVyQ29sdW1uO1xuICAgIH1cbiAgICBpZiAoIXJlc2V0SW50ZXJ2YWwpIHJlc2V0SW50ZXJ2YWwgPSBtY3VFeHBlY3RlZDtcblxuICAgIHZhciBoLCB2O1xuICAgIHdoaWxlIChtY3UgPCBtY3VFeHBlY3RlZCkge1xuICAgICAgLy8gcmVzZXQgaW50ZXJ2YWwgc3R1ZmZcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21wb25lbnRzTGVuZ3RoOyBpKyspXG4gICAgICAgIGNvbXBvbmVudHNbaV0ucHJlZCA9IDA7XG4gICAgICBlb2JydW4gPSAwO1xuXG4gICAgICBpZiAoY29tcG9uZW50c0xlbmd0aCA9PSAxKSB7XG4gICAgICAgIGNvbXBvbmVudCA9IGNvbXBvbmVudHNbMF07XG4gICAgICAgIGZvciAobiA9IDA7IG4gPCByZXNldEludGVydmFsOyBuKyspIHtcbiAgICAgICAgICBkZWNvZGVCbG9jayhjb21wb25lbnQsIGRlY29kZUZuLCBtY3UpO1xuICAgICAgICAgIG1jdSsrO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKG4gPSAwOyBuIDwgcmVzZXRJbnRlcnZhbDsgbisrKSB7XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IGNvbXBvbmVudHNMZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gY29tcG9uZW50c1tpXTtcbiAgICAgICAgICAgIGggPSBjb21wb25lbnQuaDtcbiAgICAgICAgICAgIHYgPSBjb21wb25lbnQudjtcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCB2OyBqKyspIHtcbiAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IGg7IGsrKykge1xuICAgICAgICAgICAgICAgIGRlY29kZU1jdShjb21wb25lbnQsIGRlY29kZUZuLCBtY3UsIGosIGspO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIG1jdSsrO1xuXG4gICAgICAgICAgLy8gSWYgd2UndmUgcmVhY2hlZCBvdXIgZXhwZWN0ZWQgTUNVJ3MsIHN0b3AgZGVjb2RpbmdcbiAgICAgICAgICBpZiAobWN1ID09PSBtY3VFeHBlY3RlZCkgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1jdSA9PT0gbWN1RXhwZWN0ZWQpIHtcbiAgICAgICAgLy8gU2tpcCB0cmFpbGluZyBieXRlcyBhdCB0aGUgZW5kIG9mIHRoZSBzY2FuIC0gdW50aWwgd2UgcmVhY2ggdGhlIG5leHQgbWFya2VyXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBpZiAoZGF0YVtvZmZzZXRdID09PSAweEZGKSB7XG4gICAgICAgICAgICBpZiAoZGF0YVtvZmZzZXQgKyAxXSAhPT0gMHgwMCkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgb2Zmc2V0ICs9IDE7XG4gICAgICAgIH0gd2hpbGUgKG9mZnNldCA8IGRhdGEubGVuZ3RoIC0gMik7XG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmQgbWFya2VyXG4gICAgICBiaXRzQ291bnQgPSAwO1xuICAgICAgbWFya2VyID0gKGRhdGFbb2Zmc2V0XSA8PCA4KSB8IGRhdGFbb2Zmc2V0ICsgMV07XG4gICAgICBpZiAobWFya2VyIDwgMHhGRjAwKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm1hcmtlciB3YXMgbm90IGZvdW5kXCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobWFya2VyID49IDB4RkZEMCAmJiBtYXJrZXIgPD0gMHhGRkQ3KSB7IC8vIFJTVHhcbiAgICAgICAgb2Zmc2V0ICs9IDI7XG4gICAgICB9XG4gICAgICBlbHNlXG4gICAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIHJldHVybiBvZmZzZXQgLSBzdGFydE9mZnNldDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJ1aWxkQ29tcG9uZW50RGF0YShmcmFtZSwgY29tcG9uZW50KSB7XG4gICAgdmFyIGxpbmVzID0gW107XG4gICAgdmFyIGJsb2Nrc1BlckxpbmUgPSBjb21wb25lbnQuYmxvY2tzUGVyTGluZTtcbiAgICB2YXIgYmxvY2tzUGVyQ29sdW1uID0gY29tcG9uZW50LmJsb2Nrc1BlckNvbHVtbjtcbiAgICB2YXIgc2FtcGxlc1BlckxpbmUgPSBibG9ja3NQZXJMaW5lIDw8IDM7XG4gICAgLy8gT25seSAxIHVzZWQgcGVyIGludm9jYXRpb24gb2YgdGhpcyBmdW5jdGlvbiBhbmQgZ2FyYmFnZSBjb2xsZWN0ZWQgYWZ0ZXIgaW52b2NhdGlvbiwgc28gbm8gbmVlZCB0byBhY2NvdW50IGZvciBpdHMgbWVtb3J5IGZvb3RwcmludC5cbiAgICB2YXIgUiA9IG5ldyBJbnQzMkFycmF5KDY0KSwgciA9IG5ldyBVaW50OEFycmF5KDY0KTtcblxuICAgIC8vIEEgcG9ydCBvZiBwb3BwbGVyJ3MgSURDVCBtZXRob2Qgd2hpY2ggaW4gdHVybiBpcyB0YWtlbiBmcm9tOlxuICAgIC8vICAgQ2hyaXN0b3BoIExvZWZmbGVyLCBBZHJpYWFuIExpZ3RlbmJlcmcsIEdlb3JnZSBTLiBNb3NjaHl0eixcbiAgICAvLyAgIFwiUHJhY3RpY2FsIEZhc3QgMS1EIERDVCBBbGdvcml0aG1zIHdpdGggMTEgTXVsdGlwbGljYXRpb25zXCIsXG4gICAgLy8gICBJRUVFIEludGwuIENvbmYuIG9uIEFjb3VzdGljcywgU3BlZWNoICYgU2lnbmFsIFByb2Nlc3NpbmcsIDE5ODksXG4gICAgLy8gICA5ODgtOTkxLlxuICAgIGZ1bmN0aW9uIHF1YW50aXplQW5kSW52ZXJzZSh6eiwgZGF0YU91dCwgZGF0YUluKSB7XG4gICAgICB2YXIgcXQgPSBjb21wb25lbnQucXVhbnRpemF0aW9uVGFibGU7XG4gICAgICB2YXIgdjAsIHYxLCB2MiwgdjMsIHY0LCB2NSwgdjYsIHY3LCB0O1xuICAgICAgdmFyIHAgPSBkYXRhSW47XG4gICAgICB2YXIgaTtcblxuICAgICAgLy8gZGVxdWFudFxuICAgICAgZm9yIChpID0gMDsgaSA8IDY0OyBpKyspXG4gICAgICAgIHBbaV0gPSB6eltpXSAqIHF0W2ldO1xuXG4gICAgICAvLyBpbnZlcnNlIERDVCBvbiByb3dzXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgIHZhciByb3cgPSA4ICogaTtcblxuICAgICAgICAvLyBjaGVjayBmb3IgYWxsLXplcm8gQUMgY29lZmZpY2llbnRzXG4gICAgICAgIGlmIChwWzEgKyByb3ddID09IDAgJiYgcFsyICsgcm93XSA9PSAwICYmIHBbMyArIHJvd10gPT0gMCAmJlxuICAgICAgICAgICAgcFs0ICsgcm93XSA9PSAwICYmIHBbNSArIHJvd10gPT0gMCAmJiBwWzYgKyByb3ddID09IDAgJiZcbiAgICAgICAgICAgIHBbNyArIHJvd10gPT0gMCkge1xuICAgICAgICAgIHQgPSAoZGN0U3FydDIgKiBwWzAgKyByb3ddICsgNTEyKSA+PiAxMDtcbiAgICAgICAgICBwWzAgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzEgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzIgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzMgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzQgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzUgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzYgKyByb3ddID0gdDtcbiAgICAgICAgICBwWzcgKyByb3ddID0gdDtcbiAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHN0YWdlIDRcbiAgICAgICAgdjAgPSAoZGN0U3FydDIgKiBwWzAgKyByb3ddICsgMTI4KSA+PiA4O1xuICAgICAgICB2MSA9IChkY3RTcXJ0MiAqIHBbNCArIHJvd10gKyAxMjgpID4+IDg7XG4gICAgICAgIHYyID0gcFsyICsgcm93XTtcbiAgICAgICAgdjMgPSBwWzYgKyByb3ddO1xuICAgICAgICB2NCA9IChkY3RTcXJ0MWQyICogKHBbMSArIHJvd10gLSBwWzcgKyByb3ddKSArIDEyOCkgPj4gODtcbiAgICAgICAgdjcgPSAoZGN0U3FydDFkMiAqIChwWzEgKyByb3ddICsgcFs3ICsgcm93XSkgKyAxMjgpID4+IDg7XG4gICAgICAgIHY1ID0gcFszICsgcm93XSA8PCA0O1xuICAgICAgICB2NiA9IHBbNSArIHJvd10gPDwgNDtcblxuICAgICAgICAvLyBzdGFnZSAzXG4gICAgICAgIHQgPSAodjAgLSB2MSsgMSkgPj4gMTtcbiAgICAgICAgdjAgPSAodjAgKyB2MSArIDEpID4+IDE7XG4gICAgICAgIHYxID0gdDtcbiAgICAgICAgdCA9ICh2MiAqIGRjdFNpbjYgKyB2MyAqIGRjdENvczYgKyAxMjgpID4+IDg7XG4gICAgICAgIHYyID0gKHYyICogZGN0Q29zNiAtIHYzICogZGN0U2luNiArIDEyOCkgPj4gODtcbiAgICAgICAgdjMgPSB0O1xuICAgICAgICB0ID0gKHY0IC0gdjYgKyAxKSA+PiAxO1xuICAgICAgICB2NCA9ICh2NCArIHY2ICsgMSkgPj4gMTtcbiAgICAgICAgdjYgPSB0O1xuICAgICAgICB0ID0gKHY3ICsgdjUgKyAxKSA+PiAxO1xuICAgICAgICB2NSA9ICh2NyAtIHY1ICsgMSkgPj4gMTtcbiAgICAgICAgdjcgPSB0O1xuXG4gICAgICAgIC8vIHN0YWdlIDJcbiAgICAgICAgdCA9ICh2MCAtIHYzICsgMSkgPj4gMTtcbiAgICAgICAgdjAgPSAodjAgKyB2MyArIDEpID4+IDE7XG4gICAgICAgIHYzID0gdDtcbiAgICAgICAgdCA9ICh2MSAtIHYyICsgMSkgPj4gMTtcbiAgICAgICAgdjEgPSAodjEgKyB2MiArIDEpID4+IDE7XG4gICAgICAgIHYyID0gdDtcbiAgICAgICAgdCA9ICh2NCAqIGRjdFNpbjMgKyB2NyAqIGRjdENvczMgKyAyMDQ4KSA+PiAxMjtcbiAgICAgICAgdjQgPSAodjQgKiBkY3RDb3MzIC0gdjcgKiBkY3RTaW4zICsgMjA0OCkgPj4gMTI7XG4gICAgICAgIHY3ID0gdDtcbiAgICAgICAgdCA9ICh2NSAqIGRjdFNpbjEgKyB2NiAqIGRjdENvczEgKyAyMDQ4KSA+PiAxMjtcbiAgICAgICAgdjUgPSAodjUgKiBkY3RDb3MxIC0gdjYgKiBkY3RTaW4xICsgMjA0OCkgPj4gMTI7XG4gICAgICAgIHY2ID0gdDtcblxuICAgICAgICAvLyBzdGFnZSAxXG4gICAgICAgIHBbMCArIHJvd10gPSB2MCArIHY3O1xuICAgICAgICBwWzcgKyByb3ddID0gdjAgLSB2NztcbiAgICAgICAgcFsxICsgcm93XSA9IHYxICsgdjY7XG4gICAgICAgIHBbNiArIHJvd10gPSB2MSAtIHY2O1xuICAgICAgICBwWzIgKyByb3ddID0gdjIgKyB2NTtcbiAgICAgICAgcFs1ICsgcm93XSA9IHYyIC0gdjU7XG4gICAgICAgIHBbMyArIHJvd10gPSB2MyArIHY0O1xuICAgICAgICBwWzQgKyByb3ddID0gdjMgLSB2NDtcbiAgICAgIH1cblxuICAgICAgLy8gaW52ZXJzZSBEQ1Qgb24gY29sdW1uc1xuICAgICAgZm9yIChpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgICB2YXIgY29sID0gaTtcblxuICAgICAgICAvLyBjaGVjayBmb3IgYWxsLXplcm8gQUMgY29lZmZpY2llbnRzXG4gICAgICAgIGlmIChwWzEqOCArIGNvbF0gPT0gMCAmJiBwWzIqOCArIGNvbF0gPT0gMCAmJiBwWzMqOCArIGNvbF0gPT0gMCAmJlxuICAgICAgICAgICAgcFs0KjggKyBjb2xdID09IDAgJiYgcFs1KjggKyBjb2xdID09IDAgJiYgcFs2KjggKyBjb2xdID09IDAgJiZcbiAgICAgICAgICAgIHBbNyo4ICsgY29sXSA9PSAwKSB7XG4gICAgICAgICAgdCA9IChkY3RTcXJ0MiAqIGRhdGFJbltpKzBdICsgODE5MikgPj4gMTQ7XG4gICAgICAgICAgcFswKjggKyBjb2xdID0gdDtcbiAgICAgICAgICBwWzEqOCArIGNvbF0gPSB0O1xuICAgICAgICAgIHBbMio4ICsgY29sXSA9IHQ7XG4gICAgICAgICAgcFszKjggKyBjb2xdID0gdDtcbiAgICAgICAgICBwWzQqOCArIGNvbF0gPSB0O1xuICAgICAgICAgIHBbNSo4ICsgY29sXSA9IHQ7XG4gICAgICAgICAgcFs2KjggKyBjb2xdID0gdDtcbiAgICAgICAgICBwWzcqOCArIGNvbF0gPSB0O1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gc3RhZ2UgNFxuICAgICAgICB2MCA9IChkY3RTcXJ0MiAqIHBbMCo4ICsgY29sXSArIDIwNDgpID4+IDEyO1xuICAgICAgICB2MSA9IChkY3RTcXJ0MiAqIHBbNCo4ICsgY29sXSArIDIwNDgpID4+IDEyO1xuICAgICAgICB2MiA9IHBbMio4ICsgY29sXTtcbiAgICAgICAgdjMgPSBwWzYqOCArIGNvbF07XG4gICAgICAgIHY0ID0gKGRjdFNxcnQxZDIgKiAocFsxKjggKyBjb2xdIC0gcFs3KjggKyBjb2xdKSArIDIwNDgpID4+IDEyO1xuICAgICAgICB2NyA9IChkY3RTcXJ0MWQyICogKHBbMSo4ICsgY29sXSArIHBbNyo4ICsgY29sXSkgKyAyMDQ4KSA+PiAxMjtcbiAgICAgICAgdjUgPSBwWzMqOCArIGNvbF07XG4gICAgICAgIHY2ID0gcFs1KjggKyBjb2xdO1xuXG4gICAgICAgIC8vIHN0YWdlIDNcbiAgICAgICAgdCA9ICh2MCAtIHYxICsgMSkgPj4gMTtcbiAgICAgICAgdjAgPSAodjAgKyB2MSArIDEpID4+IDE7XG4gICAgICAgIHYxID0gdDtcbiAgICAgICAgdCA9ICh2MiAqIGRjdFNpbjYgKyB2MyAqIGRjdENvczYgKyAyMDQ4KSA+PiAxMjtcbiAgICAgICAgdjIgPSAodjIgKiBkY3RDb3M2IC0gdjMgKiBkY3RTaW42ICsgMjA0OCkgPj4gMTI7XG4gICAgICAgIHYzID0gdDtcbiAgICAgICAgdCA9ICh2NCAtIHY2ICsgMSkgPj4gMTtcbiAgICAgICAgdjQgPSAodjQgKyB2NiArIDEpID4+IDE7XG4gICAgICAgIHY2ID0gdDtcbiAgICAgICAgdCA9ICh2NyArIHY1ICsgMSkgPj4gMTtcbiAgICAgICAgdjUgPSAodjcgLSB2NSArIDEpID4+IDE7XG4gICAgICAgIHY3ID0gdDtcblxuICAgICAgICAvLyBzdGFnZSAyXG4gICAgICAgIHQgPSAodjAgLSB2MyArIDEpID4+IDE7XG4gICAgICAgIHYwID0gKHYwICsgdjMgKyAxKSA+PiAxO1xuICAgICAgICB2MyA9IHQ7XG4gICAgICAgIHQgPSAodjEgLSB2MiArIDEpID4+IDE7XG4gICAgICAgIHYxID0gKHYxICsgdjIgKyAxKSA+PiAxO1xuICAgICAgICB2MiA9IHQ7XG4gICAgICAgIHQgPSAodjQgKiBkY3RTaW4zICsgdjcgKiBkY3RDb3MzICsgMjA0OCkgPj4gMTI7XG4gICAgICAgIHY0ID0gKHY0ICogZGN0Q29zMyAtIHY3ICogZGN0U2luMyArIDIwNDgpID4+IDEyO1xuICAgICAgICB2NyA9IHQ7XG4gICAgICAgIHQgPSAodjUgKiBkY3RTaW4xICsgdjYgKiBkY3RDb3MxICsgMjA0OCkgPj4gMTI7XG4gICAgICAgIHY1ID0gKHY1ICogZGN0Q29zMSAtIHY2ICogZGN0U2luMSArIDIwNDgpID4+IDEyO1xuICAgICAgICB2NiA9IHQ7XG5cbiAgICAgICAgLy8gc3RhZ2UgMVxuICAgICAgICBwWzAqOCArIGNvbF0gPSB2MCArIHY3O1xuICAgICAgICBwWzcqOCArIGNvbF0gPSB2MCAtIHY3O1xuICAgICAgICBwWzEqOCArIGNvbF0gPSB2MSArIHY2O1xuICAgICAgICBwWzYqOCArIGNvbF0gPSB2MSAtIHY2O1xuICAgICAgICBwWzIqOCArIGNvbF0gPSB2MiArIHY1O1xuICAgICAgICBwWzUqOCArIGNvbF0gPSB2MiAtIHY1O1xuICAgICAgICBwWzMqOCArIGNvbF0gPSB2MyArIHY0O1xuICAgICAgICBwWzQqOCArIGNvbF0gPSB2MyAtIHY0O1xuICAgICAgfVxuXG4gICAgICAvLyBjb252ZXJ0IHRvIDgtYml0IGludGVnZXJzXG4gICAgICBmb3IgKGkgPSAwOyBpIDwgNjQ7ICsraSkge1xuICAgICAgICB2YXIgc2FtcGxlID0gMTI4ICsgKChwW2ldICsgOCkgPj4gNCk7XG4gICAgICAgIGRhdGFPdXRbaV0gPSBzYW1wbGUgPCAwID8gMCA6IHNhbXBsZSA+IDB4RkYgPyAweEZGIDogc2FtcGxlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJlcXVlc3RNZW1vcnlBbGxvY2F0aW9uKHNhbXBsZXNQZXJMaW5lICogYmxvY2tzUGVyQ29sdW1uICogOCk7XG5cbiAgICB2YXIgaSwgajtcbiAgICBmb3IgKHZhciBibG9ja1JvdyA9IDA7IGJsb2NrUm93IDwgYmxvY2tzUGVyQ29sdW1uOyBibG9ja1JvdysrKSB7XG4gICAgICB2YXIgc2NhbkxpbmUgPSBibG9ja1JvdyA8PCAzO1xuICAgICAgZm9yIChpID0gMDsgaSA8IDg7IGkrKylcbiAgICAgICAgbGluZXMucHVzaChuZXcgVWludDhBcnJheShzYW1wbGVzUGVyTGluZSkpO1xuICAgICAgZm9yICh2YXIgYmxvY2tDb2wgPSAwOyBibG9ja0NvbCA8IGJsb2Nrc1BlckxpbmU7IGJsb2NrQ29sKyspIHtcbiAgICAgICAgcXVhbnRpemVBbmRJbnZlcnNlKGNvbXBvbmVudC5ibG9ja3NbYmxvY2tSb3ddW2Jsb2NrQ29sXSwgciwgUik7XG5cbiAgICAgICAgdmFyIG9mZnNldCA9IDAsIHNhbXBsZSA9IGJsb2NrQ29sIDw8IDM7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCA4OyBqKyspIHtcbiAgICAgICAgICB2YXIgbGluZSA9IGxpbmVzW3NjYW5MaW5lICsgal07XG4gICAgICAgICAgZm9yIChpID0gMDsgaSA8IDg7IGkrKylcbiAgICAgICAgICAgIGxpbmVbc2FtcGxlICsgaV0gPSByW29mZnNldCsrXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbGluZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjbGFtcFRvOGJpdChhKSB7XG4gICAgcmV0dXJuIGEgPCAwID8gMCA6IGEgPiAyNTUgPyAyNTUgOiBhO1xuICB9XG5cbiAgY29uc3RydWN0b3IucHJvdG90eXBlID0ge1xuICAgIGxvYWQ6IGZ1bmN0aW9uIGxvYWQocGF0aCkge1xuICAgICAgdmFyIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9wZW4oXCJHRVRcIiwgcGF0aCwgdHJ1ZSk7XG4gICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJhcnJheWJ1ZmZlclwiO1xuICAgICAgeGhyLm9ubG9hZCA9IChmdW5jdGlvbigpIHtcbiAgICAgICAgLy8gVE9ETyBjYXRjaCBwYXJzZSBlcnJvclxuICAgICAgICB2YXIgZGF0YSA9IG5ldyBVaW50OEFycmF5KHhoci5yZXNwb25zZSB8fCB4aHIubW96UmVzcG9uc2VBcnJheUJ1ZmZlcik7XG4gICAgICAgIHRoaXMucGFyc2UoZGF0YSk7XG4gICAgICAgIGlmICh0aGlzLm9ubG9hZClcbiAgICAgICAgICB0aGlzLm9ubG9hZCgpO1xuICAgICAgfSkuYmluZCh0aGlzKTtcbiAgICAgIHhoci5zZW5kKG51bGwpO1xuICAgIH0sXG4gICAgcGFyc2U6IGZ1bmN0aW9uIHBhcnNlKGRhdGEpIHtcbiAgICAgIHZhciBtYXhSZXNvbHV0aW9uSW5QaXhlbHMgPSB0aGlzLm9wdHMubWF4UmVzb2x1dGlvbkluTVAgKiAxMDAwICogMTAwMDtcbiAgICAgIHZhciBvZmZzZXQgPSAwLCBsZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgIGZ1bmN0aW9uIHJlYWRVaW50MTYoKSB7XG4gICAgICAgIHZhciB2YWx1ZSA9IChkYXRhW29mZnNldF0gPDwgOCkgfCBkYXRhW29mZnNldCArIDFdO1xuICAgICAgICBvZmZzZXQgKz0gMjtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgZnVuY3Rpb24gcmVhZERhdGFCbG9jaygpIHtcbiAgICAgICAgdmFyIGxlbmd0aCA9IHJlYWRVaW50MTYoKTtcbiAgICAgICAgdmFyIGFycmF5ID0gZGF0YS5zdWJhcnJheShvZmZzZXQsIG9mZnNldCArIGxlbmd0aCAtIDIpO1xuICAgICAgICBvZmZzZXQgKz0gYXJyYXkubGVuZ3RoO1xuICAgICAgICByZXR1cm4gYXJyYXk7XG4gICAgICB9XG4gICAgICBmdW5jdGlvbiBwcmVwYXJlQ29tcG9uZW50cyhmcmFtZSkge1xuICAgICAgICB2YXIgbWF4SCA9IDAsIG1heFYgPSAwO1xuICAgICAgICB2YXIgY29tcG9uZW50LCBjb21wb25lbnRJZDtcbiAgICAgICAgZm9yIChjb21wb25lbnRJZCBpbiBmcmFtZS5jb21wb25lbnRzKSB7XG4gICAgICAgICAgaWYgKGZyYW1lLmNvbXBvbmVudHMuaGFzT3duUHJvcGVydHkoY29tcG9uZW50SWQpKSB7XG4gICAgICAgICAgICBjb21wb25lbnQgPSBmcmFtZS5jb21wb25lbnRzW2NvbXBvbmVudElkXTtcbiAgICAgICAgICAgIGlmIChtYXhIIDwgY29tcG9uZW50LmgpIG1heEggPSBjb21wb25lbnQuaDtcbiAgICAgICAgICAgIGlmIChtYXhWIDwgY29tcG9uZW50LnYpIG1heFYgPSBjb21wb25lbnQudjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG1jdXNQZXJMaW5lID0gTWF0aC5jZWlsKGZyYW1lLnNhbXBsZXNQZXJMaW5lIC8gOCAvIG1heEgpO1xuICAgICAgICB2YXIgbWN1c1BlckNvbHVtbiA9IE1hdGguY2VpbChmcmFtZS5zY2FuTGluZXMgLyA4IC8gbWF4Vik7XG4gICAgICAgIGZvciAoY29tcG9uZW50SWQgaW4gZnJhbWUuY29tcG9uZW50cykge1xuICAgICAgICAgIGlmIChmcmFtZS5jb21wb25lbnRzLmhhc093blByb3BlcnR5KGNvbXBvbmVudElkKSkge1xuICAgICAgICAgICAgY29tcG9uZW50ID0gZnJhbWUuY29tcG9uZW50c1tjb21wb25lbnRJZF07XG4gICAgICAgICAgICB2YXIgYmxvY2tzUGVyTGluZSA9IE1hdGguY2VpbChNYXRoLmNlaWwoZnJhbWUuc2FtcGxlc1BlckxpbmUgLyA4KSAqIGNvbXBvbmVudC5oIC8gbWF4SCk7XG4gICAgICAgICAgICB2YXIgYmxvY2tzUGVyQ29sdW1uID0gTWF0aC5jZWlsKE1hdGguY2VpbChmcmFtZS5zY2FuTGluZXMgIC8gOCkgKiBjb21wb25lbnQudiAvIG1heFYpO1xuICAgICAgICAgICAgdmFyIGJsb2Nrc1BlckxpbmVGb3JNY3UgPSBtY3VzUGVyTGluZSAqIGNvbXBvbmVudC5oO1xuICAgICAgICAgICAgdmFyIGJsb2Nrc1BlckNvbHVtbkZvck1jdSA9IG1jdXNQZXJDb2x1bW4gKiBjb21wb25lbnQudjtcbiAgICAgICAgICAgIHZhciBibG9ja3NUb0FsbG9jYXRlID0gYmxvY2tzUGVyQ29sdW1uRm9yTWN1ICogYmxvY2tzUGVyTGluZUZvck1jdTtcbiAgICAgICAgICAgIHZhciBibG9ja3MgPSBbXTtcblxuICAgICAgICAgICAgLy8gRWFjaCBibG9jayBpcyBhIEludDMyQXJyYXkgb2YgbGVuZ3RoIDY0ICg0IHggNjQgPSAyNTYgYnl0ZXMpXG4gICAgICAgICAgICByZXF1ZXN0TWVtb3J5QWxsb2NhdGlvbihibG9ja3NUb0FsbG9jYXRlICogMjU2KTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBibG9ja3NQZXJDb2x1bW5Gb3JNY3U7IGkrKykge1xuICAgICAgICAgICAgICB2YXIgcm93ID0gW107XG4gICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgYmxvY2tzUGVyTGluZUZvck1jdTsgaisrKVxuICAgICAgICAgICAgICAgIHJvdy5wdXNoKG5ldyBJbnQzMkFycmF5KDY0KSk7XG4gICAgICAgICAgICAgIGJsb2Nrcy5wdXNoKHJvdyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb21wb25lbnQuYmxvY2tzUGVyTGluZSA9IGJsb2Nrc1BlckxpbmU7XG4gICAgICAgICAgICBjb21wb25lbnQuYmxvY2tzUGVyQ29sdW1uID0gYmxvY2tzUGVyQ29sdW1uO1xuICAgICAgICAgICAgY29tcG9uZW50LmJsb2NrcyA9IGJsb2NrcztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZnJhbWUubWF4SCA9IG1heEg7XG4gICAgICAgIGZyYW1lLm1heFYgPSBtYXhWO1xuICAgICAgICBmcmFtZS5tY3VzUGVyTGluZSA9IG1jdXNQZXJMaW5lO1xuICAgICAgICBmcmFtZS5tY3VzUGVyQ29sdW1uID0gbWN1c1BlckNvbHVtbjtcbiAgICAgIH1cbiAgICAgIHZhciBqZmlmID0gbnVsbDtcbiAgICAgIHZhciBhZG9iZSA9IG51bGw7XG4gICAgICB2YXIgcGl4ZWxzID0gbnVsbDtcbiAgICAgIHZhciBmcmFtZSwgcmVzZXRJbnRlcnZhbDtcbiAgICAgIHZhciBxdWFudGl6YXRpb25UYWJsZXMgPSBbXSwgZnJhbWVzID0gW107XG4gICAgICB2YXIgaHVmZm1hblRhYmxlc0FDID0gW10sIGh1ZmZtYW5UYWJsZXNEQyA9IFtdO1xuICAgICAgdmFyIGZpbGVNYXJrZXIgPSByZWFkVWludDE2KCk7XG4gICAgICB2YXIgbWFsZm9ybWVkRGF0YU9mZnNldCA9IC0xO1xuICAgICAgdGhpcy5jb21tZW50cyA9IFtdO1xuICAgICAgaWYgKGZpbGVNYXJrZXIgIT0gMHhGRkQ4KSB7IC8vIFNPSSAoU3RhcnQgb2YgSW1hZ2UpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIlNPSSBub3QgZm91bmRcIik7XG4gICAgICB9XG5cbiAgICAgIGZpbGVNYXJrZXIgPSByZWFkVWludDE2KCk7XG4gICAgICB3aGlsZSAoZmlsZU1hcmtlciAhPSAweEZGRDkpIHsgLy8gRU9JIChFbmQgb2YgaW1hZ2UpXG4gICAgICAgIHZhciBpLCBqLCBsO1xuICAgICAgICBzd2l0Y2goZmlsZU1hcmtlcikge1xuICAgICAgICAgIGNhc2UgMHhGRjAwOiBicmVhaztcbiAgICAgICAgICBjYXNlIDB4RkZFMDogLy8gQVBQMCAoQXBwbGljYXRpb24gU3BlY2lmaWMpXG4gICAgICAgICAgY2FzZSAweEZGRTE6IC8vIEFQUDFcbiAgICAgICAgICBjYXNlIDB4RkZFMjogLy8gQVBQMlxuICAgICAgICAgIGNhc2UgMHhGRkUzOiAvLyBBUFAzXG4gICAgICAgICAgY2FzZSAweEZGRTQ6IC8vIEFQUDRcbiAgICAgICAgICBjYXNlIDB4RkZFNTogLy8gQVBQNVxuICAgICAgICAgIGNhc2UgMHhGRkU2OiAvLyBBUFA2XG4gICAgICAgICAgY2FzZSAweEZGRTc6IC8vIEFQUDdcbiAgICAgICAgICBjYXNlIDB4RkZFODogLy8gQVBQOFxuICAgICAgICAgIGNhc2UgMHhGRkU5OiAvLyBBUFA5XG4gICAgICAgICAgY2FzZSAweEZGRUE6IC8vIEFQUDEwXG4gICAgICAgICAgY2FzZSAweEZGRUI6IC8vIEFQUDExXG4gICAgICAgICAgY2FzZSAweEZGRUM6IC8vIEFQUDEyXG4gICAgICAgICAgY2FzZSAweEZGRUQ6IC8vIEFQUDEzXG4gICAgICAgICAgY2FzZSAweEZGRUU6IC8vIEFQUDE0XG4gICAgICAgICAgY2FzZSAweEZGRUY6IC8vIEFQUDE1XG4gICAgICAgICAgY2FzZSAweEZGRkU6IC8vIENPTSAoQ29tbWVudClcbiAgICAgICAgICAgIHZhciBhcHBEYXRhID0gcmVhZERhdGFCbG9jaygpO1xuXG4gICAgICAgICAgICBpZiAoZmlsZU1hcmtlciA9PT0gMHhGRkZFKSB7XG4gICAgICAgICAgICAgIHZhciBjb21tZW50ID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBhcHBEYXRhKTtcbiAgICAgICAgICAgICAgdGhpcy5jb21tZW50cy5wdXNoKGNvbW1lbnQpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZmlsZU1hcmtlciA9PT0gMHhGRkUwKSB7XG4gICAgICAgICAgICAgIGlmIChhcHBEYXRhWzBdID09PSAweDRBICYmIGFwcERhdGFbMV0gPT09IDB4NDYgJiYgYXBwRGF0YVsyXSA9PT0gMHg0OSAmJlxuICAgICAgICAgICAgICAgIGFwcERhdGFbM10gPT09IDB4NDYgJiYgYXBwRGF0YVs0XSA9PT0gMCkgeyAvLyAnSkZJRlxceDAwJ1xuICAgICAgICAgICAgICAgIGpmaWYgPSB7XG4gICAgICAgICAgICAgICAgICB2ZXJzaW9uOiB7IG1ham9yOiBhcHBEYXRhWzVdLCBtaW5vcjogYXBwRGF0YVs2XSB9LFxuICAgICAgICAgICAgICAgICAgZGVuc2l0eVVuaXRzOiBhcHBEYXRhWzddLFxuICAgICAgICAgICAgICAgICAgeERlbnNpdHk6IChhcHBEYXRhWzhdIDw8IDgpIHwgYXBwRGF0YVs5XSxcbiAgICAgICAgICAgICAgICAgIHlEZW5zaXR5OiAoYXBwRGF0YVsxMF0gPDwgOCkgfCBhcHBEYXRhWzExXSxcbiAgICAgICAgICAgICAgICAgIHRodW1iV2lkdGg6IGFwcERhdGFbMTJdLFxuICAgICAgICAgICAgICAgICAgdGh1bWJIZWlnaHQ6IGFwcERhdGFbMTNdLFxuICAgICAgICAgICAgICAgICAgdGh1bWJEYXRhOiBhcHBEYXRhLnN1YmFycmF5KDE0LCAxNCArIDMgKiBhcHBEYXRhWzEyXSAqIGFwcERhdGFbMTNdKVxuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFRPRE8gQVBQMSAtIEV4aWZcbiAgICAgICAgICAgIGlmIChmaWxlTWFya2VyID09PSAweEZGRTEpIHtcbiAgICAgICAgICAgICAgaWYgKGFwcERhdGFbMF0gPT09IDB4NDUgJiZcbiAgICAgICAgICAgICAgICBhcHBEYXRhWzFdID09PSAweDc4ICYmXG4gICAgICAgICAgICAgICAgYXBwRGF0YVsyXSA9PT0gMHg2OSAmJlxuICAgICAgICAgICAgICAgIGFwcERhdGFbM10gPT09IDB4NjYgJiZcbiAgICAgICAgICAgICAgICBhcHBEYXRhWzRdID09PSAwKSB7IC8vICdFWElGXFx4MDAnXG4gICAgICAgICAgICAgICAgdGhpcy5leGlmQnVmZmVyID0gYXBwRGF0YS5zdWJhcnJheSg1LCBhcHBEYXRhLmxlbmd0aCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGZpbGVNYXJrZXIgPT09IDB4RkZFRSkge1xuICAgICAgICAgICAgICBpZiAoYXBwRGF0YVswXSA9PT0gMHg0MSAmJiBhcHBEYXRhWzFdID09PSAweDY0ICYmIGFwcERhdGFbMl0gPT09IDB4NkYgJiZcbiAgICAgICAgICAgICAgICBhcHBEYXRhWzNdID09PSAweDYyICYmIGFwcERhdGFbNF0gPT09IDB4NjUgJiYgYXBwRGF0YVs1XSA9PT0gMCkgeyAvLyAnQWRvYmVcXHgwMCdcbiAgICAgICAgICAgICAgICBhZG9iZSA9IHtcbiAgICAgICAgICAgICAgICAgIHZlcnNpb246IGFwcERhdGFbNl0sXG4gICAgICAgICAgICAgICAgICBmbGFnczA6IChhcHBEYXRhWzddIDw8IDgpIHwgYXBwRGF0YVs4XSxcbiAgICAgICAgICAgICAgICAgIGZsYWdzMTogKGFwcERhdGFbOV0gPDwgOCkgfCBhcHBEYXRhWzEwXSxcbiAgICAgICAgICAgICAgICAgIHRyYW5zZm9ybUNvZGU6IGFwcERhdGFbMTFdXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDB4RkZEQjogLy8gRFFUIChEZWZpbmUgUXVhbnRpemF0aW9uIFRhYmxlcylcbiAgICAgICAgICAgIHZhciBxdWFudGl6YXRpb25UYWJsZXNMZW5ndGggPSByZWFkVWludDE2KCk7XG4gICAgICAgICAgICB2YXIgcXVhbnRpemF0aW9uVGFibGVzRW5kID0gcXVhbnRpemF0aW9uVGFibGVzTGVuZ3RoICsgb2Zmc2V0IC0gMjtcbiAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBxdWFudGl6YXRpb25UYWJsZXNFbmQpIHtcbiAgICAgICAgICAgICAgdmFyIHF1YW50aXphdGlvblRhYmxlU3BlYyA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgICByZXF1ZXN0TWVtb3J5QWxsb2NhdGlvbig2NCAqIDQpO1xuICAgICAgICAgICAgICB2YXIgdGFibGVEYXRhID0gbmV3IEludDMyQXJyYXkoNjQpO1xuICAgICAgICAgICAgICBpZiAoKHF1YW50aXphdGlvblRhYmxlU3BlYyA+PiA0KSA9PT0gMCkgeyAvLyA4IGJpdCB2YWx1ZXNcbiAgICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgNjQ7IGorKykge1xuICAgICAgICAgICAgICAgICAgdmFyIHogPSBkY3RaaWdaYWdbal07XG4gICAgICAgICAgICAgICAgICB0YWJsZURhdGFbel0gPSBkYXRhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAoKHF1YW50aXphdGlvblRhYmxlU3BlYyA+PiA0KSA9PT0gMSkgeyAvLzE2IGJpdFxuICAgICAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCA2NDsgaisrKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgeiA9IGRjdFppZ1phZ1tqXTtcbiAgICAgICAgICAgICAgICAgIHRhYmxlRGF0YVt6XSA9IHJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRRVDogaW52YWxpZCB0YWJsZSBzcGVjXCIpO1xuICAgICAgICAgICAgICBxdWFudGl6YXRpb25UYWJsZXNbcXVhbnRpemF0aW9uVGFibGVTcGVjICYgMTVdID0gdGFibGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICBjYXNlIDB4RkZDMDogLy8gU09GMCAoU3RhcnQgb2YgRnJhbWUsIEJhc2VsaW5lIERDVClcbiAgICAgICAgICBjYXNlIDB4RkZDMTogLy8gU09GMSAoU3RhcnQgb2YgRnJhbWUsIEV4dGVuZGVkIERDVClcbiAgICAgICAgICBjYXNlIDB4RkZDMjogLy8gU09GMiAoU3RhcnQgb2YgRnJhbWUsIFByb2dyZXNzaXZlIERDVClcbiAgICAgICAgICAgIHJlYWRVaW50MTYoKTsgLy8gc2tpcCBkYXRhIGxlbmd0aFxuICAgICAgICAgICAgZnJhbWUgPSB7fTtcbiAgICAgICAgICAgIGZyYW1lLmV4dGVuZGVkID0gKGZpbGVNYXJrZXIgPT09IDB4RkZDMSk7XG4gICAgICAgICAgICBmcmFtZS5wcm9ncmVzc2l2ZSA9IChmaWxlTWFya2VyID09PSAweEZGQzIpO1xuICAgICAgICAgICAgZnJhbWUucHJlY2lzaW9uID0gZGF0YVtvZmZzZXQrK107XG4gICAgICAgICAgICBmcmFtZS5zY2FuTGluZXMgPSByZWFkVWludDE2KCk7XG4gICAgICAgICAgICBmcmFtZS5zYW1wbGVzUGVyTGluZSA9IHJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIGZyYW1lLmNvbXBvbmVudHMgPSB7fTtcbiAgICAgICAgICAgIGZyYW1lLmNvbXBvbmVudHNPcmRlciA9IFtdO1xuXG4gICAgICAgICAgICB2YXIgcGl4ZWxzSW5GcmFtZSA9IGZyYW1lLnNjYW5MaW5lcyAqIGZyYW1lLnNhbXBsZXNQZXJMaW5lO1xuICAgICAgICAgICAgaWYgKHBpeGVsc0luRnJhbWUgPiBtYXhSZXNvbHV0aW9uSW5QaXhlbHMpIHtcbiAgICAgICAgICAgICAgdmFyIGV4Y2VlZGVkQW1vdW50ID0gTWF0aC5jZWlsKChwaXhlbHNJbkZyYW1lIC0gbWF4UmVzb2x1dGlvbkluUGl4ZWxzKSAvIDFlNik7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgbWF4UmVzb2x1dGlvbkluTVAgbGltaXQgZXhjZWVkZWQgYnkgJHtleGNlZWRlZEFtb3VudH1NUGApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50c0NvdW50ID0gZGF0YVtvZmZzZXQrK10sIGNvbXBvbmVudElkO1xuICAgICAgICAgICAgdmFyIG1heEggPSAwLCBtYXhWID0gMDtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjb21wb25lbnRzQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgICBjb21wb25lbnRJZCA9IGRhdGFbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgdmFyIGggPSBkYXRhW29mZnNldCArIDFdID4+IDQ7XG4gICAgICAgICAgICAgIHZhciB2ID0gZGF0YVtvZmZzZXQgKyAxXSAmIDE1O1xuICAgICAgICAgICAgICB2YXIgcUlkID0gZGF0YVtvZmZzZXQgKyAyXTtcbiAgICAgICAgICAgICAgZnJhbWUuY29tcG9uZW50c09yZGVyLnB1c2goY29tcG9uZW50SWQpO1xuICAgICAgICAgICAgICBmcmFtZS5jb21wb25lbnRzW2NvbXBvbmVudElkXSA9IHtcbiAgICAgICAgICAgICAgICBoOiBoLFxuICAgICAgICAgICAgICAgIHY6IHYsXG4gICAgICAgICAgICAgICAgcXVhbnRpemF0aW9uSWR4OiBxSWRcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgb2Zmc2V0ICs9IDM7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmVwYXJlQ29tcG9uZW50cyhmcmFtZSk7XG4gICAgICAgICAgICBmcmFtZXMucHVzaChmcmFtZSk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMHhGRkM0OiAvLyBESFQgKERlZmluZSBIdWZmbWFuIFRhYmxlcylcbiAgICAgICAgICAgIHZhciBodWZmbWFuTGVuZ3RoID0gcmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgZm9yIChpID0gMjsgaSA8IGh1ZmZtYW5MZW5ndGg7KSB7XG4gICAgICAgICAgICAgIHZhciBodWZmbWFuVGFibGVTcGVjID0gZGF0YVtvZmZzZXQrK107XG4gICAgICAgICAgICAgIHZhciBjb2RlTGVuZ3RocyA9IG5ldyBVaW50OEFycmF5KDE2KTtcbiAgICAgICAgICAgICAgdmFyIGNvZGVMZW5ndGhTdW0gPSAwO1xuICAgICAgICAgICAgICBmb3IgKGogPSAwOyBqIDwgMTY7IGorKywgb2Zmc2V0KyspIHtcbiAgICAgICAgICAgICAgICBjb2RlTGVuZ3RoU3VtICs9IChjb2RlTGVuZ3Roc1tqXSA9IGRhdGFbb2Zmc2V0XSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmVxdWVzdE1lbW9yeUFsbG9jYXRpb24oMTYgKyBjb2RlTGVuZ3RoU3VtKTtcbiAgICAgICAgICAgICAgdmFyIGh1ZmZtYW5WYWx1ZXMgPSBuZXcgVWludDhBcnJheShjb2RlTGVuZ3RoU3VtKTtcbiAgICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvZGVMZW5ndGhTdW07IGorKywgb2Zmc2V0KyspXG4gICAgICAgICAgICAgICAgaHVmZm1hblZhbHVlc1tqXSA9IGRhdGFbb2Zmc2V0XTtcbiAgICAgICAgICAgICAgaSArPSAxNyArIGNvZGVMZW5ndGhTdW07XG5cbiAgICAgICAgICAgICAgKChodWZmbWFuVGFibGVTcGVjID4+IDQpID09PSAwID9cbiAgICAgICAgICAgICAgICBodWZmbWFuVGFibGVzREMgOiBodWZmbWFuVGFibGVzQUMpW2h1ZmZtYW5UYWJsZVNwZWMgJiAxNV0gPVxuICAgICAgICAgICAgICAgIGJ1aWxkSHVmZm1hblRhYmxlKGNvZGVMZW5ndGhzLCBodWZmbWFuVmFsdWVzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAweEZGREQ6IC8vIERSSSAoRGVmaW5lIFJlc3RhcnQgSW50ZXJ2YWwpXG4gICAgICAgICAgICByZWFkVWludDE2KCk7IC8vIHNraXAgZGF0YSBsZW5ndGhcbiAgICAgICAgICAgIHJlc2V0SW50ZXJ2YWwgPSByZWFkVWludDE2KCk7XG4gICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgIGNhc2UgMHhGRkRDOiAvLyBOdW1iZXIgb2YgTGluZXMgbWFya2VyXG4gICAgICAgICAgICByZWFkVWludDE2KCkgLy8gc2tpcCBkYXRhIGxlbmd0aFxuICAgICAgICAgICAgcmVhZFVpbnQxNigpIC8vIElnbm9yZSB0aGlzIGRhdGEgc2luY2UgaXQgcmVwcmVzZW50cyB0aGUgaW1hZ2UgaGVpZ2h0XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIFxuICAgICAgICAgIGNhc2UgMHhGRkRBOiAvLyBTT1MgKFN0YXJ0IG9mIFNjYW4pXG4gICAgICAgICAgICB2YXIgc2Nhbkxlbmd0aCA9IHJlYWRVaW50MTYoKTtcbiAgICAgICAgICAgIHZhciBzZWxlY3RvcnNDb3VudCA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgdmFyIGNvbXBvbmVudHMgPSBbXSwgY29tcG9uZW50O1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHNlbGVjdG9yc0NvdW50OyBpKyspIHtcbiAgICAgICAgICAgICAgY29tcG9uZW50ID0gZnJhbWUuY29tcG9uZW50c1tkYXRhW29mZnNldCsrXV07XG4gICAgICAgICAgICAgIHZhciB0YWJsZVNwZWMgPSBkYXRhW29mZnNldCsrXTtcbiAgICAgICAgICAgICAgY29tcG9uZW50Lmh1ZmZtYW5UYWJsZURDID0gaHVmZm1hblRhYmxlc0RDW3RhYmxlU3BlYyA+PiA0XTtcbiAgICAgICAgICAgICAgY29tcG9uZW50Lmh1ZmZtYW5UYWJsZUFDID0gaHVmZm1hblRhYmxlc0FDW3RhYmxlU3BlYyAmIDE1XTtcbiAgICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKGNvbXBvbmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YXIgc3BlY3RyYWxTdGFydCA9IGRhdGFbb2Zmc2V0KytdO1xuICAgICAgICAgICAgdmFyIHNwZWN0cmFsRW5kID0gZGF0YVtvZmZzZXQrK107XG4gICAgICAgICAgICB2YXIgc3VjY2Vzc2l2ZUFwcHJveGltYXRpb24gPSBkYXRhW29mZnNldCsrXTtcbiAgICAgICAgICAgIHZhciBwcm9jZXNzZWQgPSBkZWNvZGVTY2FuKGRhdGEsIG9mZnNldCxcbiAgICAgICAgICAgICAgZnJhbWUsIGNvbXBvbmVudHMsIHJlc2V0SW50ZXJ2YWwsXG4gICAgICAgICAgICAgIHNwZWN0cmFsU3RhcnQsIHNwZWN0cmFsRW5kLFxuICAgICAgICAgICAgICBzdWNjZXNzaXZlQXBwcm94aW1hdGlvbiA+PiA0LCBzdWNjZXNzaXZlQXBwcm94aW1hdGlvbiAmIDE1LCB0aGlzLm9wdHMpO1xuICAgICAgICAgICAgb2Zmc2V0ICs9IHByb2Nlc3NlZDtcbiAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgY2FzZSAweEZGRkY6IC8vIEZpbGwgYnl0ZXNcbiAgICAgICAgICAgIGlmIChkYXRhW29mZnNldF0gIT09IDB4RkYpIHsgLy8gQXZvaWQgc2tpcHBpbmcgYSB2YWxpZCBtYXJrZXIuXG4gICAgICAgICAgICAgIG9mZnNldC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIGlmIChkYXRhW29mZnNldCAtIDNdID09IDB4RkYgJiZcbiAgICAgICAgICAgICAgICBkYXRhW29mZnNldCAtIDJdID49IDB4QzAgJiYgZGF0YVtvZmZzZXQgLSAyXSA8PSAweEZFKSB7XG4gICAgICAgICAgICAgIC8vIGNvdWxkIGJlIGluY29ycmVjdCBlbmNvZGluZyAtLSBsYXN0IDB4RkYgYnl0ZSBvZiB0aGUgcHJldmlvdXNcbiAgICAgICAgICAgICAgLy8gYmxvY2sgd2FzIGVhdGVuIGJ5IHRoZSBlbmNvZGVyXG4gICAgICAgICAgICAgIG9mZnNldCAtPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGZpbGVNYXJrZXIgPT09IDB4RTAgfHwgZmlsZU1hcmtlciA9PSAweEUxKSB7XG4gICAgICAgICAgICAgIC8vIFJlY292ZXIgZnJvbSBtYWxmb3JtZWQgQVBQMSBtYXJrZXJzIHBvcHVsYXIgaW4gc29tZSBwaG9uZSBtb2RlbHMuXG4gICAgICAgICAgICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZXVnZW5ld2FyZS9qcGVnLWpzL2lzc3Vlcy84MlxuICAgICAgICAgICAgICBpZiAobWFsZm9ybWVkRGF0YU9mZnNldCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGZpcnN0IHVua25vd24gSlBFRyBtYXJrZXIgYXQgb2Zmc2V0ICR7bWFsZm9ybWVkRGF0YU9mZnNldC50b1N0cmluZygxNil9LCBzZWNvbmQgdW5rbm93biBKUEVHIG1hcmtlciAke2ZpbGVNYXJrZXIudG9TdHJpbmcoMTYpfSBhdCBvZmZzZXQgJHsob2Zmc2V0IC0gMSkudG9TdHJpbmcoMTYpfWApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIG1hbGZvcm1lZERhdGFPZmZzZXQgPSBvZmZzZXQgLSAxO1xuICAgICAgICAgICAgICBjb25zdCBuZXh0T2Zmc2V0ID0gcmVhZFVpbnQxNigpO1xuICAgICAgICAgICAgICBpZiAoZGF0YVtvZmZzZXQgKyBuZXh0T2Zmc2V0IC0gMl0gPT09IDB4RkYpIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gbmV4dE9mZnNldCAtIDI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcInVua25vd24gSlBFRyBtYXJrZXIgXCIgKyBmaWxlTWFya2VyLnRvU3RyaW5nKDE2KSk7XG4gICAgICAgIH1cbiAgICAgICAgZmlsZU1hcmtlciA9IHJlYWRVaW50MTYoKTtcbiAgICAgIH1cbiAgICAgIGlmIChmcmFtZXMubGVuZ3RoICE9IDEpXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIm9ubHkgc2luZ2xlIGZyYW1lIEpQRUdzIHN1cHBvcnRlZFwiKTtcblxuICAgICAgLy8gc2V0IGVhY2ggZnJhbWUncyBjb21wb25lbnRzIHF1YW50aXphdGlvbiB0YWJsZVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmcmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdmFyIGNwID0gZnJhbWVzW2ldLmNvbXBvbmVudHM7XG4gICAgICAgIGZvciAodmFyIGogaW4gY3ApIHtcbiAgICAgICAgICBjcFtqXS5xdWFudGl6YXRpb25UYWJsZSA9IHF1YW50aXphdGlvblRhYmxlc1tjcFtqXS5xdWFudGl6YXRpb25JZHhdO1xuICAgICAgICAgIGRlbGV0ZSBjcFtqXS5xdWFudGl6YXRpb25JZHg7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy53aWR0aCA9IGZyYW1lLnNhbXBsZXNQZXJMaW5lO1xuICAgICAgdGhpcy5oZWlnaHQgPSBmcmFtZS5zY2FuTGluZXM7XG4gICAgICB0aGlzLmpmaWYgPSBqZmlmO1xuICAgICAgdGhpcy5hZG9iZSA9IGFkb2JlO1xuICAgICAgdGhpcy5jb21wb25lbnRzID0gW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZyYW1lLmNvbXBvbmVudHNPcmRlci5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgY29tcG9uZW50ID0gZnJhbWUuY29tcG9uZW50c1tmcmFtZS5jb21wb25lbnRzT3JkZXJbaV1dO1xuICAgICAgICB0aGlzLmNvbXBvbmVudHMucHVzaCh7XG4gICAgICAgICAgbGluZXM6IGJ1aWxkQ29tcG9uZW50RGF0YShmcmFtZSwgY29tcG9uZW50KSxcbiAgICAgICAgICBzY2FsZVg6IGNvbXBvbmVudC5oIC8gZnJhbWUubWF4SCxcbiAgICAgICAgICBzY2FsZVk6IGNvbXBvbmVudC52IC8gZnJhbWUubWF4VlxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEod2lkdGgsIGhlaWdodCkge1xuICAgICAgdmFyIHNjYWxlWCA9IHRoaXMud2lkdGggLyB3aWR0aCwgc2NhbGVZID0gdGhpcy5oZWlnaHQgLyBoZWlnaHQ7XG5cbiAgICAgIHZhciBjb21wb25lbnQxLCBjb21wb25lbnQyLCBjb21wb25lbnQzLCBjb21wb25lbnQ0O1xuICAgICAgdmFyIGNvbXBvbmVudDFMaW5lLCBjb21wb25lbnQyTGluZSwgY29tcG9uZW50M0xpbmUsIGNvbXBvbmVudDRMaW5lO1xuICAgICAgdmFyIHgsIHk7XG4gICAgICB2YXIgb2Zmc2V0ID0gMDtcbiAgICAgIHZhciBZLCBDYiwgQ3IsIEssIEMsIE0sIFllLCBSLCBHLCBCO1xuICAgICAgdmFyIGNvbG9yVHJhbnNmb3JtO1xuICAgICAgdmFyIGRhdGFMZW5ndGggPSB3aWR0aCAqIGhlaWdodCAqIHRoaXMuY29tcG9uZW50cy5sZW5ndGg7XG4gICAgICByZXF1ZXN0TWVtb3J5QWxsb2NhdGlvbihkYXRhTGVuZ3RoKTtcbiAgICAgIHZhciBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoZGF0YUxlbmd0aCk7XG4gICAgICBzd2l0Y2ggKHRoaXMuY29tcG9uZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgIGNvbXBvbmVudDEgPSB0aGlzLmNvbXBvbmVudHNbMF07XG4gICAgICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBjb21wb25lbnQxTGluZSA9IGNvbXBvbmVudDEubGluZXNbMCB8ICh5ICogY29tcG9uZW50MS5zY2FsZVkgKiBzY2FsZVkpXTtcbiAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgIFkgPSBjb21wb25lbnQxTGluZVswIHwgKHggKiBjb21wb25lbnQxLnNjYWxlWCAqIHNjYWxlWCldO1xuXG4gICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KytdID0gWTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAvLyBQREYgbWlnaHQgY29tcHJlc3MgdHdvIGNvbXBvbmVudCBkYXRhIGluIGN1c3RvbSBjb2xvcnNwYWNlXG4gICAgICAgICAgY29tcG9uZW50MSA9IHRoaXMuY29tcG9uZW50c1swXTtcbiAgICAgICAgICBjb21wb25lbnQyID0gdGhpcy5jb21wb25lbnRzWzFdO1xuICAgICAgICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50MUxpbmUgPSBjb21wb25lbnQxLmxpbmVzWzAgfCAoeSAqIGNvbXBvbmVudDEuc2NhbGVZICogc2NhbGVZKV07XG4gICAgICAgICAgICBjb21wb25lbnQyTGluZSA9IGNvbXBvbmVudDIubGluZXNbMCB8ICh5ICogY29tcG9uZW50Mi5zY2FsZVkgKiBzY2FsZVkpXTtcbiAgICAgICAgICAgIGZvciAoeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgICAgICAgIFkgPSBjb21wb25lbnQxTGluZVswIHwgKHggKiBjb21wb25lbnQxLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICBkYXRhW29mZnNldCsrXSA9IFk7XG4gICAgICAgICAgICAgIFkgPSBjb21wb25lbnQyTGluZVswIHwgKHggKiBjb21wb25lbnQyLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICBkYXRhW29mZnNldCsrXSA9IFk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgLy8gVGhlIGRlZmF1bHQgdHJhbnNmb3JtIGZvciB0aHJlZSBjb21wb25lbnRzIGlzIHRydWVcbiAgICAgICAgICBjb2xvclRyYW5zZm9ybSA9IHRydWU7XG4gICAgICAgICAgLy8gVGhlIGFkb2JlIHRyYW5zZm9ybSBtYXJrZXIgb3ZlcnJpZGVzIGFueSBwcmV2aW91cyBzZXR0aW5nXG4gICAgICAgICAgaWYgKHRoaXMuYWRvYmUgJiYgdGhpcy5hZG9iZS50cmFuc2Zvcm1Db2RlKVxuICAgICAgICAgICAgY29sb3JUcmFuc2Zvcm0gPSB0cnVlO1xuICAgICAgICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLm9wdHMuY29sb3JUcmFuc2Zvcm0gIT09ICd1bmRlZmluZWQnKVxuICAgICAgICAgICAgY29sb3JUcmFuc2Zvcm0gPSAhIXRoaXMub3B0cy5jb2xvclRyYW5zZm9ybTtcblxuICAgICAgICAgIGNvbXBvbmVudDEgPSB0aGlzLmNvbXBvbmVudHNbMF07XG4gICAgICAgICAgY29tcG9uZW50MiA9IHRoaXMuY29tcG9uZW50c1sxXTtcbiAgICAgICAgICBjb21wb25lbnQzID0gdGhpcy5jb21wb25lbnRzWzJdO1xuICAgICAgICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50MUxpbmUgPSBjb21wb25lbnQxLmxpbmVzWzAgfCAoeSAqIGNvbXBvbmVudDEuc2NhbGVZICogc2NhbGVZKV07XG4gICAgICAgICAgICBjb21wb25lbnQyTGluZSA9IGNvbXBvbmVudDIubGluZXNbMCB8ICh5ICogY29tcG9uZW50Mi5zY2FsZVkgKiBzY2FsZVkpXTtcbiAgICAgICAgICAgIGNvbXBvbmVudDNMaW5lID0gY29tcG9uZW50My5saW5lc1swIHwgKHkgKiBjb21wb25lbnQzLnNjYWxlWSAqIHNjYWxlWSldO1xuICAgICAgICAgICAgZm9yICh4ID0gMDsgeCA8IHdpZHRoOyB4KyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjb2xvclRyYW5zZm9ybSkge1xuICAgICAgICAgICAgICAgIFIgPSBjb21wb25lbnQxTGluZVswIHwgKHggKiBjb21wb25lbnQxLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICAgIEcgPSBjb21wb25lbnQyTGluZVswIHwgKHggKiBjb21wb25lbnQyLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICAgIEIgPSBjb21wb25lbnQzTGluZVswIHwgKHggKiBjb21wb25lbnQzLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFkgPSBjb21wb25lbnQxTGluZVswIHwgKHggKiBjb21wb25lbnQxLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICAgIENiID0gY29tcG9uZW50MkxpbmVbMCB8ICh4ICogY29tcG9uZW50Mi5zY2FsZVggKiBzY2FsZVgpXTtcbiAgICAgICAgICAgICAgICBDciA9IGNvbXBvbmVudDNMaW5lWzAgfCAoeCAqIGNvbXBvbmVudDMuc2NhbGVYICogc2NhbGVYKV07XG5cbiAgICAgICAgICAgICAgICBSID0gY2xhbXBUbzhiaXQoWSArIDEuNDAyICogKENyIC0gMTI4KSk7XG4gICAgICAgICAgICAgICAgRyA9IGNsYW1wVG84Yml0KFkgLSAwLjM0NDEzNjMgKiAoQ2IgLSAxMjgpIC0gMC43MTQxMzYzNiAqIChDciAtIDEyOCkpO1xuICAgICAgICAgICAgICAgIEIgPSBjbGFtcFRvOGJpdChZICsgMS43NzIgKiAoQ2IgLSAxMjgpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KytdID0gUjtcbiAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrK10gPSBHO1xuICAgICAgICAgICAgICBkYXRhW29mZnNldCsrXSA9IEI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgaWYgKCF0aGlzLmFkb2JlKVxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjb2xvciBtb2RlICg0IGNvbXBvbmVudHMpJyk7XG4gICAgICAgICAgLy8gVGhlIGRlZmF1bHQgdHJhbnNmb3JtIGZvciBmb3VyIGNvbXBvbmVudHMgaXMgZmFsc2VcbiAgICAgICAgICBjb2xvclRyYW5zZm9ybSA9IGZhbHNlO1xuICAgICAgICAgIC8vIFRoZSBhZG9iZSB0cmFuc2Zvcm0gbWFya2VyIG92ZXJyaWRlcyBhbnkgcHJldmlvdXMgc2V0dGluZ1xuICAgICAgICAgIGlmICh0aGlzLmFkb2JlICYmIHRoaXMuYWRvYmUudHJhbnNmb3JtQ29kZSlcbiAgICAgICAgICAgIGNvbG9yVHJhbnNmb3JtID0gdHJ1ZTtcbiAgICAgICAgICBlbHNlIGlmICh0eXBlb2YgdGhpcy5vcHRzLmNvbG9yVHJhbnNmb3JtICE9PSAndW5kZWZpbmVkJylcbiAgICAgICAgICAgIGNvbG9yVHJhbnNmb3JtID0gISF0aGlzLm9wdHMuY29sb3JUcmFuc2Zvcm07XG5cbiAgICAgICAgICBjb21wb25lbnQxID0gdGhpcy5jb21wb25lbnRzWzBdO1xuICAgICAgICAgIGNvbXBvbmVudDIgPSB0aGlzLmNvbXBvbmVudHNbMV07XG4gICAgICAgICAgY29tcG9uZW50MyA9IHRoaXMuY29tcG9uZW50c1syXTtcbiAgICAgICAgICBjb21wb25lbnQ0ID0gdGhpcy5jb21wb25lbnRzWzNdO1xuICAgICAgICAgIGZvciAoeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICAgICAgY29tcG9uZW50MUxpbmUgPSBjb21wb25lbnQxLmxpbmVzWzAgfCAoeSAqIGNvbXBvbmVudDEuc2NhbGVZICogc2NhbGVZKV07XG4gICAgICAgICAgICBjb21wb25lbnQyTGluZSA9IGNvbXBvbmVudDIubGluZXNbMCB8ICh5ICogY29tcG9uZW50Mi5zY2FsZVkgKiBzY2FsZVkpXTtcbiAgICAgICAgICAgIGNvbXBvbmVudDNMaW5lID0gY29tcG9uZW50My5saW5lc1swIHwgKHkgKiBjb21wb25lbnQzLnNjYWxlWSAqIHNjYWxlWSldO1xuICAgICAgICAgICAgY29tcG9uZW50NExpbmUgPSBjb21wb25lbnQ0LmxpbmVzWzAgfCAoeSAqIGNvbXBvbmVudDQuc2NhbGVZICogc2NhbGVZKV07XG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICBpZiAoIWNvbG9yVHJhbnNmb3JtKSB7XG4gICAgICAgICAgICAgICAgQyA9IGNvbXBvbmVudDFMaW5lWzAgfCAoeCAqIGNvbXBvbmVudDEuc2NhbGVYICogc2NhbGVYKV07XG4gICAgICAgICAgICAgICAgTSA9IGNvbXBvbmVudDJMaW5lWzAgfCAoeCAqIGNvbXBvbmVudDIuc2NhbGVYICogc2NhbGVYKV07XG4gICAgICAgICAgICAgICAgWWUgPSBjb21wb25lbnQzTGluZVswIHwgKHggKiBjb21wb25lbnQzLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICAgIEsgPSBjb21wb25lbnQ0TGluZVswIHwgKHggKiBjb21wb25lbnQ0LnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFkgPSBjb21wb25lbnQxTGluZVswIHwgKHggKiBjb21wb25lbnQxLnNjYWxlWCAqIHNjYWxlWCldO1xuICAgICAgICAgICAgICAgIENiID0gY29tcG9uZW50MkxpbmVbMCB8ICh4ICogY29tcG9uZW50Mi5zY2FsZVggKiBzY2FsZVgpXTtcbiAgICAgICAgICAgICAgICBDciA9IGNvbXBvbmVudDNMaW5lWzAgfCAoeCAqIGNvbXBvbmVudDMuc2NhbGVYICogc2NhbGVYKV07XG4gICAgICAgICAgICAgICAgSyA9IGNvbXBvbmVudDRMaW5lWzAgfCAoeCAqIGNvbXBvbmVudDQuc2NhbGVYICogc2NhbGVYKV07XG5cbiAgICAgICAgICAgICAgICBDID0gMjU1IC0gY2xhbXBUbzhiaXQoWSArIDEuNDAyICogKENyIC0gMTI4KSk7XG4gICAgICAgICAgICAgICAgTSA9IDI1NSAtIGNsYW1wVG84Yml0KFkgLSAwLjM0NDEzNjMgKiAoQ2IgLSAxMjgpIC0gMC43MTQxMzYzNiAqIChDciAtIDEyOCkpO1xuICAgICAgICAgICAgICAgIFllID0gMjU1IC0gY2xhbXBUbzhiaXQoWSArIDEuNzcyICogKENiIC0gMTI4KSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrK10gPSAyNTUtQztcbiAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrK10gPSAyNTUtTTtcbiAgICAgICAgICAgICAgZGF0YVtvZmZzZXQrK10gPSAyNTUtWWU7XG4gICAgICAgICAgICAgIGRhdGFbb2Zmc2V0KytdID0gMjU1LUs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVW5zdXBwb3J0ZWQgY29sb3IgbW9kZScpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfSxcbiAgICBjb3B5VG9JbWFnZURhdGE6IGZ1bmN0aW9uIGNvcHlUb0ltYWdlRGF0YShpbWFnZURhdGEsIGZvcm1hdEFzUkdCQSkge1xuICAgICAgdmFyIHdpZHRoID0gaW1hZ2VEYXRhLndpZHRoLCBoZWlnaHQgPSBpbWFnZURhdGEuaGVpZ2h0O1xuICAgICAgdmFyIGltYWdlRGF0YUFycmF5ID0gaW1hZ2VEYXRhLmRhdGE7XG4gICAgICB2YXIgZGF0YSA9IHRoaXMuZ2V0RGF0YSh3aWR0aCwgaGVpZ2h0KTtcbiAgICAgIHZhciBpID0gMCwgaiA9IDAsIHgsIHk7XG4gICAgICB2YXIgWSwgSywgQywgTSwgUiwgRywgQjtcbiAgICAgIHN3aXRjaCAodGhpcy5jb21wb25lbnRzLmxlbmd0aCkge1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICBZID0gZGF0YVtpKytdO1xuXG4gICAgICAgICAgICAgIGltYWdlRGF0YUFycmF5W2orK10gPSBZO1xuICAgICAgICAgICAgICBpbWFnZURhdGFBcnJheVtqKytdID0gWTtcbiAgICAgICAgICAgICAgaW1hZ2VEYXRhQXJyYXlbaisrXSA9IFk7XG4gICAgICAgICAgICAgIGlmIChmb3JtYXRBc1JHQkEpIHtcbiAgICAgICAgICAgICAgICBpbWFnZURhdGFBcnJheVtqKytdID0gMjU1O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICBSID0gZGF0YVtpKytdO1xuICAgICAgICAgICAgICBHID0gZGF0YVtpKytdO1xuICAgICAgICAgICAgICBCID0gZGF0YVtpKytdO1xuXG4gICAgICAgICAgICAgIGltYWdlRGF0YUFycmF5W2orK10gPSBSO1xuICAgICAgICAgICAgICBpbWFnZURhdGFBcnJheVtqKytdID0gRztcbiAgICAgICAgICAgICAgaW1hZ2VEYXRhQXJyYXlbaisrXSA9IEI7XG4gICAgICAgICAgICAgIGlmIChmb3JtYXRBc1JHQkEpIHtcbiAgICAgICAgICAgICAgICBpbWFnZURhdGFBcnJheVtqKytdID0gMjU1O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgZm9yICh5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgICBmb3IgKHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICAgICAgICBDID0gZGF0YVtpKytdO1xuICAgICAgICAgICAgICBNID0gZGF0YVtpKytdO1xuICAgICAgICAgICAgICBZID0gZGF0YVtpKytdO1xuICAgICAgICAgICAgICBLID0gZGF0YVtpKytdO1xuXG4gICAgICAgICAgICAgIFIgPSAyNTUgLSBjbGFtcFRvOGJpdChDICogKDEgLSBLIC8gMjU1KSArIEspO1xuICAgICAgICAgICAgICBHID0gMjU1IC0gY2xhbXBUbzhiaXQoTSAqICgxIC0gSyAvIDI1NSkgKyBLKTtcbiAgICAgICAgICAgICAgQiA9IDI1NSAtIGNsYW1wVG84Yml0KFkgKiAoMSAtIEsgLyAyNTUpICsgSyk7XG5cbiAgICAgICAgICAgICAgaW1hZ2VEYXRhQXJyYXlbaisrXSA9IFI7XG4gICAgICAgICAgICAgIGltYWdlRGF0YUFycmF5W2orK10gPSBHO1xuICAgICAgICAgICAgICBpbWFnZURhdGFBcnJheVtqKytdID0gQjtcbiAgICAgICAgICAgICAgaWYgKGZvcm1hdEFzUkdCQSkge1xuICAgICAgICAgICAgICAgIGltYWdlRGF0YUFycmF5W2orK10gPSAyNTU7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbnN1cHBvcnRlZCBjb2xvciBtb2RlJyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG5cbiAgLy8gV2UgY2FwIHRoZSBhbW91bnQgb2YgbWVtb3J5IHVzZWQgYnkganBlZy1qcyB0byBhdm9pZCB1bmV4cGVjdGVkIE9PTXMgZnJvbSB1bnRydXN0ZWQgY29udGVudC5cbiAgdmFyIHRvdGFsQnl0ZXNBbGxvY2F0ZWQgPSAwO1xuICB2YXIgbWF4TWVtb3J5VXNhZ2VCeXRlcyA9IDA7XG4gIGZ1bmN0aW9uIHJlcXVlc3RNZW1vcnlBbGxvY2F0aW9uKGluY3JlYXNlQW1vdW50ID0gMCkge1xuICAgIHZhciB0b3RhbE1lbW9yeUltcGFjdEJ5dGVzID0gdG90YWxCeXRlc0FsbG9jYXRlZCArIGluY3JlYXNlQW1vdW50O1xuICAgIGlmICh0b3RhbE1lbW9yeUltcGFjdEJ5dGVzID4gbWF4TWVtb3J5VXNhZ2VCeXRlcykge1xuICAgICAgdmFyIGV4Y2VlZGVkQW1vdW50ID0gTWF0aC5jZWlsKCh0b3RhbE1lbW9yeUltcGFjdEJ5dGVzIC0gbWF4TWVtb3J5VXNhZ2VCeXRlcykgLyAxMDI0IC8gMTAyNCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYG1heE1lbW9yeVVzYWdlSW5NQiBsaW1pdCBleGNlZWRlZCBieSBhdCBsZWFzdCAke2V4Y2VlZGVkQW1vdW50fU1CYCk7XG4gICAgfVxuXG4gICAgdG90YWxCeXRlc0FsbG9jYXRlZCA9IHRvdGFsTWVtb3J5SW1wYWN0Qnl0ZXM7XG4gIH1cblxuICBjb25zdHJ1Y3Rvci5yZXNldE1heE1lbW9yeVVzYWdlID0gZnVuY3Rpb24gKG1heE1lbW9yeVVzYWdlQnl0ZXNfKSB7XG4gICAgdG90YWxCeXRlc0FsbG9jYXRlZCA9IDA7XG4gICAgbWF4TWVtb3J5VXNhZ2VCeXRlcyA9IG1heE1lbW9yeVVzYWdlQnl0ZXNfO1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yLmdldEJ5dGVzQWxsb2NhdGVkID0gZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB0b3RhbEJ5dGVzQWxsb2NhdGVkO1xuICB9O1xuXG4gIGNvbnN0cnVjdG9yLnJlcXVlc3RNZW1vcnlBbGxvY2F0aW9uID0gcmVxdWVzdE1lbW9yeUFsbG9jYXRpb247XG5cbiAgcmV0dXJuIGNvbnN0cnVjdG9yO1xufSkoKTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZGVjb2RlO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHR3aW5kb3dbJ2pwZWctanMnXSA9IHdpbmRvd1snanBlZy1qcyddIHx8IHt9O1xuXHR3aW5kb3dbJ2pwZWctanMnXS5kZWNvZGUgPSBkZWNvZGU7XG59XG5cbmZ1bmN0aW9uIGRlY29kZShqcGVnRGF0YSwgdXNlck9wdHMgPSB7fSkge1xuICB2YXIgZGVmYXVsdE9wdHMgPSB7XG4gICAgLy8gXCJ1bmRlZmluZWRcIiBtZWFucyBcIkNob29zZSB3aGV0aGVyIHRvIHRyYW5zZm9ybSBjb2xvcnMgYmFzZWQgb24gdGhlIGltYWdl4oCZcyBjb2xvciBtb2RlbC5cIlxuICAgIGNvbG9yVHJhbnNmb3JtOiB1bmRlZmluZWQsXG4gICAgdXNlVEFycmF5OiBmYWxzZSxcbiAgICBmb3JtYXRBc1JHQkE6IHRydWUsXG4gICAgdG9sZXJhbnREZWNvZGluZzogdHJ1ZSxcbiAgICBtYXhSZXNvbHV0aW9uSW5NUDogMTAwLCAvLyBEb24ndCBkZWNvZGUgbW9yZSB0aGFuIDEwMCBtZWdhcGl4ZWxzXG4gICAgbWF4TWVtb3J5VXNhZ2VJbk1COiA1MTIsIC8vIERvbid0IGRlY29kZSBpZiBtZW1vcnkgZm9vdHByaW50IGlzIG1vcmUgdGhhbiA1MTJNQlxuICB9O1xuXG4gIHZhciBvcHRzID0gey4uLmRlZmF1bHRPcHRzLCAuLi51c2VyT3B0c307XG4gIHZhciBhcnIgPSBuZXcgVWludDhBcnJheShqcGVnRGF0YSk7XG4gIHZhciBkZWNvZGVyID0gbmV3IEpwZWdJbWFnZSgpO1xuICBkZWNvZGVyLm9wdHMgPSBvcHRzO1xuICAvLyBJZiB0aGlzIGNvbnN0cnVjdG9yIGV2ZXIgc3VwcG9ydHMgYXN5bmMgZGVjb2RpbmcgdGhpcyB3aWxsIG5lZWQgdG8gYmUgZG9uZSBkaWZmZXJlbnRseS5cbiAgLy8gVW50aWwgdGhlbiwgdHJlYXRpbmcgYXMgc2luZ2xldG9uIGxpbWl0IGlzIGZpbmUuXG4gIEpwZWdJbWFnZS5yZXNldE1heE1lbW9yeVVzYWdlKG9wdHMubWF4TWVtb3J5VXNhZ2VJbk1CICogMTAyNCAqIDEwMjQpO1xuICBkZWNvZGVyLnBhcnNlKGFycik7XG5cbiAgdmFyIGNoYW5uZWxzID0gKG9wdHMuZm9ybWF0QXNSR0JBKSA/IDQgOiAzO1xuICB2YXIgYnl0ZXNOZWVkZWQgPSBkZWNvZGVyLndpZHRoICogZGVjb2Rlci5oZWlnaHQgKiBjaGFubmVscztcbiAgdHJ5IHtcbiAgICBKcGVnSW1hZ2UucmVxdWVzdE1lbW9yeUFsbG9jYXRpb24oYnl0ZXNOZWVkZWQpO1xuICAgIHZhciBpbWFnZSA9IHtcbiAgICAgIHdpZHRoOiBkZWNvZGVyLndpZHRoLFxuICAgICAgaGVpZ2h0OiBkZWNvZGVyLmhlaWdodCxcbiAgICAgIGV4aWZCdWZmZXI6IGRlY29kZXIuZXhpZkJ1ZmZlcixcbiAgICAgIGRhdGE6IG9wdHMudXNlVEFycmF5ID9cbiAgICAgICAgbmV3IFVpbnQ4QXJyYXkoYnl0ZXNOZWVkZWQpIDpcbiAgICAgICAgQnVmZmVyLmFsbG9jKGJ5dGVzTmVlZGVkKVxuICAgIH07XG4gICAgaWYoZGVjb2Rlci5jb21tZW50cy5sZW5ndGggPiAwKSB7XG4gICAgICBpbWFnZVtcImNvbW1lbnRzXCJdID0gZGVjb2Rlci5jb21tZW50cztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycil7XG4gICAgaWYgKGVyciBpbnN0YW5jZW9mIFJhbmdlRXJyb3Ipe1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGQgbm90IGFsbG9jYXRlIGVub3VnaCBtZW1vcnkgZm9yIHRoZSBpbWFnZS4gXCIgK1xuICAgICAgICAgICAgICAgICAgICAgIFwiUmVxdWlyZWQ6IFwiICsgYnl0ZXNOZWVkZWQpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9XG5cbiAgZGVjb2Rlci5jb3B5VG9JbWFnZURhdGEoaW1hZ2UsIG9wdHMuZm9ybWF0QXNSR0JBKTtcblxuICByZXR1cm4gaW1hZ2U7XG59XG4iLCIvKlxuICBDb3B5cmlnaHQgKGMpIDIwMDgsIEFkb2JlIFN5c3RlbXMgSW5jb3Jwb3JhdGVkXG4gIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5cbiAgUmVkaXN0cmlidXRpb24gYW5kIHVzZSBpbiBzb3VyY2UgYW5kIGJpbmFyeSBmb3Jtcywgd2l0aCBvciB3aXRob3V0IFxuICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlXG4gIG1ldDpcblxuICAqIFJlZGlzdHJpYnV0aW9ucyBvZiBzb3VyY2UgY29kZSBtdXN0IHJldGFpbiB0aGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSwgXG4gICAgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci5cbiAgXG4gICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZSBjb3B5cmlnaHRcbiAgICBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nIGRpc2NsYWltZXIgaW4gdGhlIFxuICAgIGRvY3VtZW50YXRpb24gYW5kL29yIG90aGVyIG1hdGVyaWFscyBwcm92aWRlZCB3aXRoIHRoZSBkaXN0cmlidXRpb24uXG4gIFxuICAqIE5laXRoZXIgdGhlIG5hbWUgb2YgQWRvYmUgU3lzdGVtcyBJbmNvcnBvcmF0ZWQgbm9yIHRoZSBuYW1lcyBvZiBpdHMgXG4gICAgY29udHJpYnV0b3JzIG1heSBiZSB1c2VkIHRvIGVuZG9yc2Ugb3IgcHJvbW90ZSBwcm9kdWN0cyBkZXJpdmVkIGZyb20gXG4gICAgdGhpcyBzb2Z0d2FyZSB3aXRob3V0IHNwZWNpZmljIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi5cblxuICBUSElTIFNPRlRXQVJFIElTIFBST1ZJREVEIEJZIFRIRSBDT1BZUklHSFQgSE9MREVSUyBBTkQgQ09OVFJJQlVUT1JTIFwiQVNcbiAgSVNcIiBBTkQgQU5ZIEVYUFJFU1MgT1IgSU1QTElFRCBXQVJSQU5USUVTLCBJTkNMVURJTkcsIEJVVCBOT1QgTElNSVRFRCBUTyxcbiAgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUlxuICBQVVJQT1NFIEFSRSBESVNDTEFJTUVELiBJTiBOTyBFVkVOVCBTSEFMTCBUSEUgQ09QWVJJR0hUIE9XTkVSIE9SIFxuICBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwgU1BFQ0lBTCxcbiAgRVhFTVBMQVJZLCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgKElOQ0xVRElORywgQlVUIE5PVCBMSU1JVEVEIFRPLFxuICBQUk9DVVJFTUVOVCBPRiBTVUJTVElUVVRFIEdPT0RTIE9SIFNFUlZJQ0VTOyBMT1NTIE9GIFVTRSwgREFUQSwgT1JcbiAgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZIFRIRU9SWSBPRlxuICBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQ09OVFJBQ1QsIFNUUklDVCBMSUFCSUxJVFksIE9SIFRPUlQgKElOQ0xVRElOR1xuICBORUdMSUdFTkNFIE9SIE9USEVSV0lTRSkgQVJJU0lORyBJTiBBTlkgV0FZIE9VVCBPRiBUSEUgVVNFIE9GIFRISVNcbiAgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuXG4qL1xuLypcbkpQRUcgZW5jb2RlciBwb3J0ZWQgdG8gSmF2YVNjcmlwdCBhbmQgb3B0aW1pemVkIGJ5IEFuZHJlYXMgUml0dGVyLCB3d3cuYnl0ZXN0cm9tLmV1LCAxMS8yMDA5XG5cbkJhc2ljIEdVSSBibG9ja2luZyBqcGVnIGVuY29kZXJcbiovXG5cbnZhciBidG9hID0gYnRvYSB8fCBmdW5jdGlvbihidWYpIHtcbiAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ1ZikudG9TdHJpbmcoJ2Jhc2U2NCcpO1xufTtcblxuZnVuY3Rpb24gSlBFR0VuY29kZXIocXVhbGl0eSkge1xuICB2YXIgc2VsZiA9IHRoaXM7XG5cdHZhciBmcm91bmQgPSBNYXRoLnJvdW5kO1xuXHR2YXIgZmZsb29yID0gTWF0aC5mbG9vcjtcblx0dmFyIFlUYWJsZSA9IG5ldyBBcnJheSg2NCk7XG5cdHZhciBVVlRhYmxlID0gbmV3IEFycmF5KDY0KTtcblx0dmFyIGZkdGJsX1kgPSBuZXcgQXJyYXkoNjQpO1xuXHR2YXIgZmR0YmxfVVYgPSBuZXcgQXJyYXkoNjQpO1xuXHR2YXIgWURDX0hUO1xuXHR2YXIgVVZEQ19IVDtcblx0dmFyIFlBQ19IVDtcblx0dmFyIFVWQUNfSFQ7XG5cdFxuXHR2YXIgYml0Y29kZSA9IG5ldyBBcnJheSg2NTUzNSk7XG5cdHZhciBjYXRlZ29yeSA9IG5ldyBBcnJheSg2NTUzNSk7XG5cdHZhciBvdXRwdXRmRENUUXVhbnQgPSBuZXcgQXJyYXkoNjQpO1xuXHR2YXIgRFUgPSBuZXcgQXJyYXkoNjQpO1xuXHR2YXIgYnl0ZW91dCA9IFtdO1xuXHR2YXIgYnl0ZW5ldyA9IDA7XG5cdHZhciBieXRlcG9zID0gNztcblx0XG5cdHZhciBZRFUgPSBuZXcgQXJyYXkoNjQpO1xuXHR2YXIgVURVID0gbmV3IEFycmF5KDY0KTtcblx0dmFyIFZEVSA9IG5ldyBBcnJheSg2NCk7XG5cdHZhciBjbHQgPSBuZXcgQXJyYXkoMjU2KTtcblx0dmFyIFJHQl9ZVVZfVEFCTEUgPSBuZXcgQXJyYXkoMjA0OCk7XG5cdHZhciBjdXJyZW50UXVhbGl0eTtcblx0XG5cdHZhciBaaWdaYWcgPSBbXG5cdFx0XHQgMCwgMSwgNSwgNiwxNCwxNSwyNywyOCxcblx0XHRcdCAyLCA0LCA3LDEzLDE2LDI2LDI5LDQyLFxuXHRcdFx0IDMsIDgsMTIsMTcsMjUsMzAsNDEsNDMsXG5cdFx0XHQgOSwxMSwxOCwyNCwzMSw0MCw0NCw1Myxcblx0XHRcdDEwLDE5LDIzLDMyLDM5LDQ1LDUyLDU0LFxuXHRcdFx0MjAsMjIsMzMsMzgsNDYsNTEsNTUsNjAsXG5cdFx0XHQyMSwzNCwzNyw0Nyw1MCw1Niw1OSw2MSxcblx0XHRcdDM1LDM2LDQ4LDQ5LDU3LDU4LDYyLDYzXG5cdFx0XTtcblx0XG5cdHZhciBzdGRfZGNfbHVtaW5hbmNlX25yY29kZXMgPSBbMCwwLDEsNSwxLDEsMSwxLDEsMSwwLDAsMCwwLDAsMCwwXTtcblx0dmFyIHN0ZF9kY19sdW1pbmFuY2VfdmFsdWVzID0gWzAsMSwyLDMsNCw1LDYsNyw4LDksMTAsMTFdO1xuXHR2YXIgc3RkX2FjX2x1bWluYW5jZV9ucmNvZGVzID0gWzAsMCwyLDEsMywzLDIsNCwzLDUsNSw0LDQsMCwwLDEsMHg3ZF07XG5cdHZhciBzdGRfYWNfbHVtaW5hbmNlX3ZhbHVlcyA9IFtcblx0XHRcdDB4MDEsMHgwMiwweDAzLDB4MDAsMHgwNCwweDExLDB4MDUsMHgxMixcblx0XHRcdDB4MjEsMHgzMSwweDQxLDB4MDYsMHgxMywweDUxLDB4NjEsMHgwNyxcblx0XHRcdDB4MjIsMHg3MSwweDE0LDB4MzIsMHg4MSwweDkxLDB4YTEsMHgwOCxcblx0XHRcdDB4MjMsMHg0MiwweGIxLDB4YzEsMHgxNSwweDUyLDB4ZDEsMHhmMCxcblx0XHRcdDB4MjQsMHgzMywweDYyLDB4NzIsMHg4MiwweDA5LDB4MGEsMHgxNixcblx0XHRcdDB4MTcsMHgxOCwweDE5LDB4MWEsMHgyNSwweDI2LDB4MjcsMHgyOCxcblx0XHRcdDB4MjksMHgyYSwweDM0LDB4MzUsMHgzNiwweDM3LDB4MzgsMHgzOSxcblx0XHRcdDB4M2EsMHg0MywweDQ0LDB4NDUsMHg0NiwweDQ3LDB4NDgsMHg0OSxcblx0XHRcdDB4NGEsMHg1MywweDU0LDB4NTUsMHg1NiwweDU3LDB4NTgsMHg1OSxcblx0XHRcdDB4NWEsMHg2MywweDY0LDB4NjUsMHg2NiwweDY3LDB4NjgsMHg2OSxcblx0XHRcdDB4NmEsMHg3MywweDc0LDB4NzUsMHg3NiwweDc3LDB4NzgsMHg3OSxcblx0XHRcdDB4N2EsMHg4MywweDg0LDB4ODUsMHg4NiwweDg3LDB4ODgsMHg4OSxcblx0XHRcdDB4OGEsMHg5MiwweDkzLDB4OTQsMHg5NSwweDk2LDB4OTcsMHg5OCxcblx0XHRcdDB4OTksMHg5YSwweGEyLDB4YTMsMHhhNCwweGE1LDB4YTYsMHhhNyxcblx0XHRcdDB4YTgsMHhhOSwweGFhLDB4YjIsMHhiMywweGI0LDB4YjUsMHhiNixcblx0XHRcdDB4YjcsMHhiOCwweGI5LDB4YmEsMHhjMiwweGMzLDB4YzQsMHhjNSxcblx0XHRcdDB4YzYsMHhjNywweGM4LDB4YzksMHhjYSwweGQyLDB4ZDMsMHhkNCxcblx0XHRcdDB4ZDUsMHhkNiwweGQ3LDB4ZDgsMHhkOSwweGRhLDB4ZTEsMHhlMixcblx0XHRcdDB4ZTMsMHhlNCwweGU1LDB4ZTYsMHhlNywweGU4LDB4ZTksMHhlYSxcblx0XHRcdDB4ZjEsMHhmMiwweGYzLDB4ZjQsMHhmNSwweGY2LDB4ZjcsMHhmOCxcblx0XHRcdDB4ZjksMHhmYVxuXHRcdF07XG5cdFxuXHR2YXIgc3RkX2RjX2Nocm9taW5hbmNlX25yY29kZXMgPSBbMCwwLDMsMSwxLDEsMSwxLDEsMSwxLDEsMCwwLDAsMCwwXTtcblx0dmFyIHN0ZF9kY19jaHJvbWluYW5jZV92YWx1ZXMgPSBbMCwxLDIsMyw0LDUsNiw3LDgsOSwxMCwxMV07XG5cdHZhciBzdGRfYWNfY2hyb21pbmFuY2VfbnJjb2RlcyA9IFswLDAsMiwxLDIsNCw0LDMsNCw3LDUsNCw0LDAsMSwyLDB4NzddO1xuXHR2YXIgc3RkX2FjX2Nocm9taW5hbmNlX3ZhbHVlcyA9IFtcblx0XHRcdDB4MDAsMHgwMSwweDAyLDB4MDMsMHgxMSwweDA0LDB4MDUsMHgyMSxcblx0XHRcdDB4MzEsMHgwNiwweDEyLDB4NDEsMHg1MSwweDA3LDB4NjEsMHg3MSxcblx0XHRcdDB4MTMsMHgyMiwweDMyLDB4ODEsMHgwOCwweDE0LDB4NDIsMHg5MSxcblx0XHRcdDB4YTEsMHhiMSwweGMxLDB4MDksMHgyMywweDMzLDB4NTIsMHhmMCxcblx0XHRcdDB4MTUsMHg2MiwweDcyLDB4ZDEsMHgwYSwweDE2LDB4MjQsMHgzNCxcblx0XHRcdDB4ZTEsMHgyNSwweGYxLDB4MTcsMHgxOCwweDE5LDB4MWEsMHgyNixcblx0XHRcdDB4MjcsMHgyOCwweDI5LDB4MmEsMHgzNSwweDM2LDB4MzcsMHgzOCxcblx0XHRcdDB4MzksMHgzYSwweDQzLDB4NDQsMHg0NSwweDQ2LDB4NDcsMHg0OCxcblx0XHRcdDB4NDksMHg0YSwweDUzLDB4NTQsMHg1NSwweDU2LDB4NTcsMHg1OCxcblx0XHRcdDB4NTksMHg1YSwweDYzLDB4NjQsMHg2NSwweDY2LDB4NjcsMHg2OCxcblx0XHRcdDB4NjksMHg2YSwweDczLDB4NzQsMHg3NSwweDc2LDB4NzcsMHg3OCxcblx0XHRcdDB4NzksMHg3YSwweDgyLDB4ODMsMHg4NCwweDg1LDB4ODYsMHg4Nyxcblx0XHRcdDB4ODgsMHg4OSwweDhhLDB4OTIsMHg5MywweDk0LDB4OTUsMHg5Nixcblx0XHRcdDB4OTcsMHg5OCwweDk5LDB4OWEsMHhhMiwweGEzLDB4YTQsMHhhNSxcblx0XHRcdDB4YTYsMHhhNywweGE4LDB4YTksMHhhYSwweGIyLDB4YjMsMHhiNCxcblx0XHRcdDB4YjUsMHhiNiwweGI3LDB4YjgsMHhiOSwweGJhLDB4YzIsMHhjMyxcblx0XHRcdDB4YzQsMHhjNSwweGM2LDB4YzcsMHhjOCwweGM5LDB4Y2EsMHhkMixcblx0XHRcdDB4ZDMsMHhkNCwweGQ1LDB4ZDYsMHhkNywweGQ4LDB4ZDksMHhkYSxcblx0XHRcdDB4ZTIsMHhlMywweGU0LDB4ZTUsMHhlNiwweGU3LDB4ZTgsMHhlOSxcblx0XHRcdDB4ZWEsMHhmMiwweGYzLDB4ZjQsMHhmNSwweGY2LDB4ZjcsMHhmOCxcblx0XHRcdDB4ZjksMHhmYVxuXHRcdF07XG5cdFxuXHRmdW5jdGlvbiBpbml0UXVhbnRUYWJsZXMoc2Ype1xuXHRcdFx0dmFyIFlRVCA9IFtcblx0XHRcdFx0MTYsIDExLCAxMCwgMTYsIDI0LCA0MCwgNTEsIDYxLFxuXHRcdFx0XHQxMiwgMTIsIDE0LCAxOSwgMjYsIDU4LCA2MCwgNTUsXG5cdFx0XHRcdDE0LCAxMywgMTYsIDI0LCA0MCwgNTcsIDY5LCA1Nixcblx0XHRcdFx0MTQsIDE3LCAyMiwgMjksIDUxLCA4NywgODAsIDYyLFxuXHRcdFx0XHQxOCwgMjIsIDM3LCA1NiwgNjgsMTA5LDEwMywgNzcsXG5cdFx0XHRcdDI0LCAzNSwgNTUsIDY0LCA4MSwxMDQsMTEzLCA5Mixcblx0XHRcdFx0NDksIDY0LCA3OCwgODcsMTAzLDEyMSwxMjAsMTAxLFxuXHRcdFx0XHQ3MiwgOTIsIDk1LCA5OCwxMTIsMTAwLDEwMywgOTlcblx0XHRcdF07XG5cdFx0XHRcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgNjQ7IGkrKykge1xuXHRcdFx0XHR2YXIgdCA9IGZmbG9vcigoWVFUW2ldKnNmKzUwKS8xMDApO1xuXHRcdFx0XHRpZiAodCA8IDEpIHtcblx0XHRcdFx0XHR0ID0gMTtcblx0XHRcdFx0fSBlbHNlIGlmICh0ID4gMjU1KSB7XG5cdFx0XHRcdFx0dCA9IDI1NTtcblx0XHRcdFx0fVxuXHRcdFx0XHRZVGFibGVbWmlnWmFnW2ldXSA9IHQ7XG5cdFx0XHR9XG5cdFx0XHR2YXIgVVZRVCA9IFtcblx0XHRcdFx0MTcsIDE4LCAyNCwgNDcsIDk5LCA5OSwgOTksIDk5LFxuXHRcdFx0XHQxOCwgMjEsIDI2LCA2NiwgOTksIDk5LCA5OSwgOTksXG5cdFx0XHRcdDI0LCAyNiwgNTYsIDk5LCA5OSwgOTksIDk5LCA5OSxcblx0XHRcdFx0NDcsIDY2LCA5OSwgOTksIDk5LCA5OSwgOTksIDk5LFxuXHRcdFx0XHQ5OSwgOTksIDk5LCA5OSwgOTksIDk5LCA5OSwgOTksXG5cdFx0XHRcdDk5LCA5OSwgOTksIDk5LCA5OSwgOTksIDk5LCA5OSxcblx0XHRcdFx0OTksIDk5LCA5OSwgOTksIDk5LCA5OSwgOTksIDk5LFxuXHRcdFx0XHQ5OSwgOTksIDk5LCA5OSwgOTksIDk5LCA5OSwgOTlcblx0XHRcdF07XG5cdFx0XHRmb3IgKHZhciBqID0gMDsgaiA8IDY0OyBqKyspIHtcblx0XHRcdFx0dmFyIHUgPSBmZmxvb3IoKFVWUVRbal0qc2YrNTApLzEwMCk7XG5cdFx0XHRcdGlmICh1IDwgMSkge1xuXHRcdFx0XHRcdHUgPSAxO1xuXHRcdFx0XHR9IGVsc2UgaWYgKHUgPiAyNTUpIHtcblx0XHRcdFx0XHR1ID0gMjU1O1xuXHRcdFx0XHR9XG5cdFx0XHRcdFVWVGFibGVbWmlnWmFnW2pdXSA9IHU7XG5cdFx0XHR9XG5cdFx0XHR2YXIgYWFzZiA9IFtcblx0XHRcdFx0MS4wLCAxLjM4NzAzOTg0NSwgMS4zMDY1NjI5NjUsIDEuMTc1ODc1NjAyLFxuXHRcdFx0XHQxLjAsIDAuNzg1Njk0OTU4LCAwLjU0MTE5NjEwMCwgMC4yNzU4OTkzNzlcblx0XHRcdF07XG5cdFx0XHR2YXIgayA9IDA7XG5cdFx0XHRmb3IgKHZhciByb3cgPSAwOyByb3cgPCA4OyByb3crKylcblx0XHRcdHtcblx0XHRcdFx0Zm9yICh2YXIgY29sID0gMDsgY29sIDwgODsgY29sKyspXG5cdFx0XHRcdHtcblx0XHRcdFx0XHRmZHRibF9ZW2tdICA9ICgxLjAgLyAoWVRhYmxlIFtaaWdaYWdba11dICogYWFzZltyb3ddICogYWFzZltjb2xdICogOC4wKSk7XG5cdFx0XHRcdFx0ZmR0YmxfVVZba10gPSAoMS4wIC8gKFVWVGFibGVbWmlnWmFnW2tdXSAqIGFhc2Zbcm93XSAqIGFhc2ZbY29sXSAqIDguMCkpO1xuXHRcdFx0XHRcdGsrKztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiBjb21wdXRlSHVmZm1hblRibChucmNvZGVzLCBzdGRfdGFibGUpe1xuXHRcdFx0dmFyIGNvZGV2YWx1ZSA9IDA7XG5cdFx0XHR2YXIgcG9zX2luX3RhYmxlID0gMDtcblx0XHRcdHZhciBIVCA9IG5ldyBBcnJheSgpO1xuXHRcdFx0Zm9yICh2YXIgayA9IDE7IGsgPD0gMTY7IGsrKykge1xuXHRcdFx0XHRmb3IgKHZhciBqID0gMTsgaiA8PSBucmNvZGVzW2tdOyBqKyspIHtcblx0XHRcdFx0XHRIVFtzdGRfdGFibGVbcG9zX2luX3RhYmxlXV0gPSBbXTtcblx0XHRcdFx0XHRIVFtzdGRfdGFibGVbcG9zX2luX3RhYmxlXV1bMF0gPSBjb2RldmFsdWU7XG5cdFx0XHRcdFx0SFRbc3RkX3RhYmxlW3Bvc19pbl90YWJsZV1dWzFdID0gaztcblx0XHRcdFx0XHRwb3NfaW5fdGFibGUrKztcblx0XHRcdFx0XHRjb2RldmFsdWUrKztcblx0XHRcdFx0fVxuXHRcdFx0XHRjb2RldmFsdWUqPTI7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gSFQ7XG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIGluaXRIdWZmbWFuVGJsKClcblx0XHR7XG5cdFx0XHRZRENfSFQgPSBjb21wdXRlSHVmZm1hblRibChzdGRfZGNfbHVtaW5hbmNlX25yY29kZXMsc3RkX2RjX2x1bWluYW5jZV92YWx1ZXMpO1xuXHRcdFx0VVZEQ19IVCA9IGNvbXB1dGVIdWZmbWFuVGJsKHN0ZF9kY19jaHJvbWluYW5jZV9ucmNvZGVzLHN0ZF9kY19jaHJvbWluYW5jZV92YWx1ZXMpO1xuXHRcdFx0WUFDX0hUID0gY29tcHV0ZUh1ZmZtYW5UYmwoc3RkX2FjX2x1bWluYW5jZV9ucmNvZGVzLHN0ZF9hY19sdW1pbmFuY2VfdmFsdWVzKTtcblx0XHRcdFVWQUNfSFQgPSBjb21wdXRlSHVmZm1hblRibChzdGRfYWNfY2hyb21pbmFuY2VfbnJjb2RlcyxzdGRfYWNfY2hyb21pbmFuY2VfdmFsdWVzKTtcblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIGluaXRDYXRlZ29yeU51bWJlcigpXG5cdFx0e1xuXHRcdFx0dmFyIG5ybG93ZXIgPSAxO1xuXHRcdFx0dmFyIG5ydXBwZXIgPSAyO1xuXHRcdFx0Zm9yICh2YXIgY2F0ID0gMTsgY2F0IDw9IDE1OyBjYXQrKykge1xuXHRcdFx0XHQvL1Bvc2l0aXZlIG51bWJlcnNcblx0XHRcdFx0Zm9yICh2YXIgbnIgPSBucmxvd2VyOyBucjxucnVwcGVyOyBucisrKSB7XG5cdFx0XHRcdFx0Y2F0ZWdvcnlbMzI3NjcrbnJdID0gY2F0O1xuXHRcdFx0XHRcdGJpdGNvZGVbMzI3NjcrbnJdID0gW107XG5cdFx0XHRcdFx0Yml0Y29kZVszMjc2Nytucl1bMV0gPSBjYXQ7XG5cdFx0XHRcdFx0Yml0Y29kZVszMjc2Nytucl1bMF0gPSBucjtcblx0XHRcdFx0fVxuXHRcdFx0XHQvL05lZ2F0aXZlIG51bWJlcnNcblx0XHRcdFx0Zm9yICh2YXIgbnJuZWcgPS0obnJ1cHBlci0xKTsgbnJuZWc8PS1ucmxvd2VyOyBucm5lZysrKSB7XG5cdFx0XHRcdFx0Y2F0ZWdvcnlbMzI3NjcrbnJuZWddID0gY2F0O1xuXHRcdFx0XHRcdGJpdGNvZGVbMzI3NjcrbnJuZWddID0gW107XG5cdFx0XHRcdFx0Yml0Y29kZVszMjc2Nytucm5lZ11bMV0gPSBjYXQ7XG5cdFx0XHRcdFx0Yml0Y29kZVszMjc2Nytucm5lZ11bMF0gPSBucnVwcGVyLTErbnJuZWc7XG5cdFx0XHRcdH1cblx0XHRcdFx0bnJsb3dlciA8PD0gMTtcblx0XHRcdFx0bnJ1cHBlciA8PD0gMTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gaW5pdFJHQllVVlRhYmxlKCkge1xuXHRcdFx0Zm9yKHZhciBpID0gMDsgaSA8IDI1NjtpKyspIHtcblx0XHRcdFx0UkdCX1lVVl9UQUJMRVtpXSAgICAgIFx0XHQ9ICAxOTU5NSAqIGk7XG5cdFx0XHRcdFJHQl9ZVVZfVEFCTEVbKGkrIDI1Nik+PjBdIFx0PSAgMzg0NzAgKiBpO1xuXHRcdFx0XHRSR0JfWVVWX1RBQkxFWyhpKyA1MTIpPj4wXSBcdD0gICA3NDcxICogaSArIDB4ODAwMDtcblx0XHRcdFx0UkdCX1lVVl9UQUJMRVsoaSsgNzY4KT4+MF0gXHQ9IC0xMTA1OSAqIGk7XG5cdFx0XHRcdFJHQl9ZVVZfVEFCTEVbKGkrMTAyNCk+PjBdIFx0PSAtMjE3MDkgKiBpO1xuXHRcdFx0XHRSR0JfWVVWX1RBQkxFWyhpKzEyODApPj4wXSBcdD0gIDMyNzY4ICogaSArIDB4ODA3RkZGO1xuXHRcdFx0XHRSR0JfWVVWX1RBQkxFWyhpKzE1MzYpPj4wXSBcdD0gLTI3NDM5ICogaTtcblx0XHRcdFx0UkdCX1lVVl9UQUJMRVsoaSsxNzkyKT4+MF0gXHQ9IC0gNTMyOSAqIGk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcdFxuXHRcdC8vIElPIGZ1bmN0aW9uc1xuXHRcdGZ1bmN0aW9uIHdyaXRlQml0cyhicylcblx0XHR7XG5cdFx0XHR2YXIgdmFsdWUgPSBic1swXTtcblx0XHRcdHZhciBwb3N2YWwgPSBic1sxXS0xO1xuXHRcdFx0d2hpbGUgKCBwb3N2YWwgPj0gMCApIHtcblx0XHRcdFx0aWYgKHZhbHVlICYgKDEgPDwgcG9zdmFsKSApIHtcblx0XHRcdFx0XHRieXRlbmV3IHw9ICgxIDw8IGJ5dGVwb3MpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBvc3ZhbC0tO1xuXHRcdFx0XHRieXRlcG9zLS07XG5cdFx0XHRcdGlmIChieXRlcG9zIDwgMCkge1xuXHRcdFx0XHRcdGlmIChieXRlbmV3ID09IDB4RkYpIHtcblx0XHRcdFx0XHRcdHdyaXRlQnl0ZSgweEZGKTtcblx0XHRcdFx0XHRcdHdyaXRlQnl0ZSgwKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0XHR3cml0ZUJ5dGUoYnl0ZW5ldyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGJ5dGVwb3M9Nztcblx0XHRcdFx0XHRieXRlbmV3PTA7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHdyaXRlQnl0ZSh2YWx1ZSlcblx0XHR7XG5cdFx0XHQvL2J5dGVvdXQucHVzaChjbHRbdmFsdWVdKTsgLy8gd3JpdGUgY2hhciBkaXJlY3RseSBpbnN0ZWFkIG9mIGNvbnZlcnRpbmcgbGF0ZXJcbiAgICAgIGJ5dGVvdXQucHVzaCh2YWx1ZSk7XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiB3cml0ZVdvcmQodmFsdWUpXG5cdFx0e1xuXHRcdFx0d3JpdGVCeXRlKCh2YWx1ZT4+OCkmMHhGRik7XG5cdFx0XHR3cml0ZUJ5dGUoKHZhbHVlICAgKSYweEZGKTtcblx0XHR9XG5cdFx0XG5cdFx0Ly8gRENUICYgcXVhbnRpemF0aW9uIGNvcmVcblx0XHRmdW5jdGlvbiBmRENUUXVhbnQoZGF0YSwgZmR0YmwpXG5cdFx0e1xuXHRcdFx0dmFyIGQwLCBkMSwgZDIsIGQzLCBkNCwgZDUsIGQ2LCBkNztcblx0XHRcdC8qIFBhc3MgMTogcHJvY2VzcyByb3dzLiAqL1xuXHRcdFx0dmFyIGRhdGFPZmY9MDtcblx0XHRcdHZhciBpO1xuXHRcdFx0dmFyIEk4ID0gODtcblx0XHRcdHZhciBJNjQgPSA2NDtcblx0XHRcdGZvciAoaT0wOyBpPEk4OyArK2kpXG5cdFx0XHR7XG5cdFx0XHRcdGQwID0gZGF0YVtkYXRhT2ZmXTtcblx0XHRcdFx0ZDEgPSBkYXRhW2RhdGFPZmYrMV07XG5cdFx0XHRcdGQyID0gZGF0YVtkYXRhT2ZmKzJdO1xuXHRcdFx0XHRkMyA9IGRhdGFbZGF0YU9mZiszXTtcblx0XHRcdFx0ZDQgPSBkYXRhW2RhdGFPZmYrNF07XG5cdFx0XHRcdGQ1ID0gZGF0YVtkYXRhT2ZmKzVdO1xuXHRcdFx0XHRkNiA9IGRhdGFbZGF0YU9mZis2XTtcblx0XHRcdFx0ZDcgPSBkYXRhW2RhdGFPZmYrN107XG5cdFx0XHRcdFxuXHRcdFx0XHR2YXIgdG1wMCA9IGQwICsgZDc7XG5cdFx0XHRcdHZhciB0bXA3ID0gZDAgLSBkNztcblx0XHRcdFx0dmFyIHRtcDEgPSBkMSArIGQ2O1xuXHRcdFx0XHR2YXIgdG1wNiA9IGQxIC0gZDY7XG5cdFx0XHRcdHZhciB0bXAyID0gZDIgKyBkNTtcblx0XHRcdFx0dmFyIHRtcDUgPSBkMiAtIGQ1O1xuXHRcdFx0XHR2YXIgdG1wMyA9IGQzICsgZDQ7XG5cdFx0XHRcdHZhciB0bXA0ID0gZDMgLSBkNDtcblx0XG5cdFx0XHRcdC8qIEV2ZW4gcGFydCAqL1xuXHRcdFx0XHR2YXIgdG1wMTAgPSB0bXAwICsgdG1wMztcdC8qIHBoYXNlIDIgKi9cblx0XHRcdFx0dmFyIHRtcDEzID0gdG1wMCAtIHRtcDM7XG5cdFx0XHRcdHZhciB0bXAxMSA9IHRtcDEgKyB0bXAyO1xuXHRcdFx0XHR2YXIgdG1wMTIgPSB0bXAxIC0gdG1wMjtcblx0XG5cdFx0XHRcdGRhdGFbZGF0YU9mZl0gPSB0bXAxMCArIHRtcDExOyAvKiBwaGFzZSAzICovXG5cdFx0XHRcdGRhdGFbZGF0YU9mZis0XSA9IHRtcDEwIC0gdG1wMTE7XG5cdFxuXHRcdFx0XHR2YXIgejEgPSAodG1wMTIgKyB0bXAxMykgKiAwLjcwNzEwNjc4MTsgLyogYzQgKi9cblx0XHRcdFx0ZGF0YVtkYXRhT2ZmKzJdID0gdG1wMTMgKyB6MTsgLyogcGhhc2UgNSAqL1xuXHRcdFx0XHRkYXRhW2RhdGFPZmYrNl0gPSB0bXAxMyAtIHoxO1xuXHRcblx0XHRcdFx0LyogT2RkIHBhcnQgKi9cblx0XHRcdFx0dG1wMTAgPSB0bXA0ICsgdG1wNTsgLyogcGhhc2UgMiAqL1xuXHRcdFx0XHR0bXAxMSA9IHRtcDUgKyB0bXA2O1xuXHRcdFx0XHR0bXAxMiA9IHRtcDYgKyB0bXA3O1xuXHRcblx0XHRcdFx0LyogVGhlIHJvdGF0b3IgaXMgbW9kaWZpZWQgZnJvbSBmaWcgNC04IHRvIGF2b2lkIGV4dHJhIG5lZ2F0aW9ucy4gKi9cblx0XHRcdFx0dmFyIHo1ID0gKHRtcDEwIC0gdG1wMTIpICogMC4zODI2ODM0MzM7IC8qIGM2ICovXG5cdFx0XHRcdHZhciB6MiA9IDAuNTQxMTk2MTAwICogdG1wMTAgKyB6NTsgLyogYzItYzYgKi9cblx0XHRcdFx0dmFyIHo0ID0gMS4zMDY1NjI5NjUgKiB0bXAxMiArIHo1OyAvKiBjMitjNiAqL1xuXHRcdFx0XHR2YXIgejMgPSB0bXAxMSAqIDAuNzA3MTA2NzgxOyAvKiBjNCAqL1xuXHRcblx0XHRcdFx0dmFyIHoxMSA9IHRtcDcgKyB6MztcdC8qIHBoYXNlIDUgKi9cblx0XHRcdFx0dmFyIHoxMyA9IHRtcDcgLSB6Mztcblx0XG5cdFx0XHRcdGRhdGFbZGF0YU9mZis1XSA9IHoxMyArIHoyO1x0LyogcGhhc2UgNiAqL1xuXHRcdFx0XHRkYXRhW2RhdGFPZmYrM10gPSB6MTMgLSB6Mjtcblx0XHRcdFx0ZGF0YVtkYXRhT2ZmKzFdID0gejExICsgejQ7XG5cdFx0XHRcdGRhdGFbZGF0YU9mZis3XSA9IHoxMSAtIHo0O1xuXHRcblx0XHRcdFx0ZGF0YU9mZiArPSA4OyAvKiBhZHZhbmNlIHBvaW50ZXIgdG8gbmV4dCByb3cgKi9cblx0XHRcdH1cblx0XG5cdFx0XHQvKiBQYXNzIDI6IHByb2Nlc3MgY29sdW1ucy4gKi9cblx0XHRcdGRhdGFPZmYgPSAwO1xuXHRcdFx0Zm9yIChpPTA7IGk8STg7ICsraSlcblx0XHRcdHtcblx0XHRcdFx0ZDAgPSBkYXRhW2RhdGFPZmZdO1xuXHRcdFx0XHRkMSA9IGRhdGFbZGF0YU9mZiArIDhdO1xuXHRcdFx0XHRkMiA9IGRhdGFbZGF0YU9mZiArIDE2XTtcblx0XHRcdFx0ZDMgPSBkYXRhW2RhdGFPZmYgKyAyNF07XG5cdFx0XHRcdGQ0ID0gZGF0YVtkYXRhT2ZmICsgMzJdO1xuXHRcdFx0XHRkNSA9IGRhdGFbZGF0YU9mZiArIDQwXTtcblx0XHRcdFx0ZDYgPSBkYXRhW2RhdGFPZmYgKyA0OF07XG5cdFx0XHRcdGQ3ID0gZGF0YVtkYXRhT2ZmICsgNTZdO1xuXHRcdFx0XHRcblx0XHRcdFx0dmFyIHRtcDBwMiA9IGQwICsgZDc7XG5cdFx0XHRcdHZhciB0bXA3cDIgPSBkMCAtIGQ3O1xuXHRcdFx0XHR2YXIgdG1wMXAyID0gZDEgKyBkNjtcblx0XHRcdFx0dmFyIHRtcDZwMiA9IGQxIC0gZDY7XG5cdFx0XHRcdHZhciB0bXAycDIgPSBkMiArIGQ1O1xuXHRcdFx0XHR2YXIgdG1wNXAyID0gZDIgLSBkNTtcblx0XHRcdFx0dmFyIHRtcDNwMiA9IGQzICsgZDQ7XG5cdFx0XHRcdHZhciB0bXA0cDIgPSBkMyAtIGQ0O1xuXHRcblx0XHRcdFx0LyogRXZlbiBwYXJ0ICovXG5cdFx0XHRcdHZhciB0bXAxMHAyID0gdG1wMHAyICsgdG1wM3AyO1x0LyogcGhhc2UgMiAqL1xuXHRcdFx0XHR2YXIgdG1wMTNwMiA9IHRtcDBwMiAtIHRtcDNwMjtcblx0XHRcdFx0dmFyIHRtcDExcDIgPSB0bXAxcDIgKyB0bXAycDI7XG5cdFx0XHRcdHZhciB0bXAxMnAyID0gdG1wMXAyIC0gdG1wMnAyO1xuXHRcblx0XHRcdFx0ZGF0YVtkYXRhT2ZmXSA9IHRtcDEwcDIgKyB0bXAxMXAyOyAvKiBwaGFzZSAzICovXG5cdFx0XHRcdGRhdGFbZGF0YU9mZiszMl0gPSB0bXAxMHAyIC0gdG1wMTFwMjtcblx0XG5cdFx0XHRcdHZhciB6MXAyID0gKHRtcDEycDIgKyB0bXAxM3AyKSAqIDAuNzA3MTA2NzgxOyAvKiBjNCAqL1xuXHRcdFx0XHRkYXRhW2RhdGFPZmYrMTZdID0gdG1wMTNwMiArIHoxcDI7IC8qIHBoYXNlIDUgKi9cblx0XHRcdFx0ZGF0YVtkYXRhT2ZmKzQ4XSA9IHRtcDEzcDIgLSB6MXAyO1xuXHRcblx0XHRcdFx0LyogT2RkIHBhcnQgKi9cblx0XHRcdFx0dG1wMTBwMiA9IHRtcDRwMiArIHRtcDVwMjsgLyogcGhhc2UgMiAqL1xuXHRcdFx0XHR0bXAxMXAyID0gdG1wNXAyICsgdG1wNnAyO1xuXHRcdFx0XHR0bXAxMnAyID0gdG1wNnAyICsgdG1wN3AyO1xuXHRcblx0XHRcdFx0LyogVGhlIHJvdGF0b3IgaXMgbW9kaWZpZWQgZnJvbSBmaWcgNC04IHRvIGF2b2lkIGV4dHJhIG5lZ2F0aW9ucy4gKi9cblx0XHRcdFx0dmFyIHo1cDIgPSAodG1wMTBwMiAtIHRtcDEycDIpICogMC4zODI2ODM0MzM7IC8qIGM2ICovXG5cdFx0XHRcdHZhciB6MnAyID0gMC41NDExOTYxMDAgKiB0bXAxMHAyICsgejVwMjsgLyogYzItYzYgKi9cblx0XHRcdFx0dmFyIHo0cDIgPSAxLjMwNjU2Mjk2NSAqIHRtcDEycDIgKyB6NXAyOyAvKiBjMitjNiAqL1xuXHRcdFx0XHR2YXIgejNwMiA9IHRtcDExcDIgKiAwLjcwNzEwNjc4MTsgLyogYzQgKi9cblx0XG5cdFx0XHRcdHZhciB6MTFwMiA9IHRtcDdwMiArIHozcDI7XHQvKiBwaGFzZSA1ICovXG5cdFx0XHRcdHZhciB6MTNwMiA9IHRtcDdwMiAtIHozcDI7XG5cdFxuXHRcdFx0XHRkYXRhW2RhdGFPZmYrNDBdID0gejEzcDIgKyB6MnAyOyAvKiBwaGFzZSA2ICovXG5cdFx0XHRcdGRhdGFbZGF0YU9mZisyNF0gPSB6MTNwMiAtIHoycDI7XG5cdFx0XHRcdGRhdGFbZGF0YU9mZisgOF0gPSB6MTFwMiArIHo0cDI7XG5cdFx0XHRcdGRhdGFbZGF0YU9mZis1Nl0gPSB6MTFwMiAtIHo0cDI7XG5cdFxuXHRcdFx0XHRkYXRhT2ZmKys7IC8qIGFkdmFuY2UgcG9pbnRlciB0byBuZXh0IGNvbHVtbiAqL1xuXHRcdFx0fVxuXHRcblx0XHRcdC8vIFF1YW50aXplL2Rlc2NhbGUgdGhlIGNvZWZmaWNpZW50c1xuXHRcdFx0dmFyIGZEQ1RRdWFudDtcblx0XHRcdGZvciAoaT0wOyBpPEk2NDsgKytpKVxuXHRcdFx0e1xuXHRcdFx0XHQvLyBBcHBseSB0aGUgcXVhbnRpemF0aW9uIGFuZCBzY2FsaW5nIGZhY3RvciAmIFJvdW5kIHRvIG5lYXJlc3QgaW50ZWdlclxuXHRcdFx0XHRmRENUUXVhbnQgPSBkYXRhW2ldKmZkdGJsW2ldO1xuXHRcdFx0XHRvdXRwdXRmRENUUXVhbnRbaV0gPSAoZkRDVFF1YW50ID4gMC4wKSA/ICgoZkRDVFF1YW50ICsgMC41KXwwKSA6ICgoZkRDVFF1YW50IC0gMC41KXwwKTtcblx0XHRcdFx0Ly9vdXRwdXRmRENUUXVhbnRbaV0gPSBmcm91bmQoZkRDVFF1YW50KTtcblxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG91dHB1dGZEQ1RRdWFudDtcblx0XHR9XG5cdFx0XG5cdFx0ZnVuY3Rpb24gd3JpdGVBUFAwKClcblx0XHR7XG5cdFx0XHR3cml0ZVdvcmQoMHhGRkUwKTsgLy8gbWFya2VyXG5cdFx0XHR3cml0ZVdvcmQoMTYpOyAvLyBsZW5ndGhcblx0XHRcdHdyaXRlQnl0ZSgweDRBKTsgLy8gSlxuXHRcdFx0d3JpdGVCeXRlKDB4NDYpOyAvLyBGXG5cdFx0XHR3cml0ZUJ5dGUoMHg0OSk7IC8vIElcblx0XHRcdHdyaXRlQnl0ZSgweDQ2KTsgLy8gRlxuXHRcdFx0d3JpdGVCeXRlKDApOyAvLyA9IFwiSkZJRlwiLCdcXDAnXG5cdFx0XHR3cml0ZUJ5dGUoMSk7IC8vIHZlcnNpb25oaVxuXHRcdFx0d3JpdGVCeXRlKDEpOyAvLyB2ZXJzaW9ubG9cblx0XHRcdHdyaXRlQnl0ZSgwKTsgLy8geHl1bml0c1xuXHRcdFx0d3JpdGVXb3JkKDEpOyAvLyB4ZGVuc2l0eVxuXHRcdFx0d3JpdGVXb3JkKDEpOyAvLyB5ZGVuc2l0eVxuXHRcdFx0d3JpdGVCeXRlKDApOyAvLyB0aHVtYm53aWR0aFxuXHRcdFx0d3JpdGVCeXRlKDApOyAvLyB0aHVtYm5oZWlnaHRcblx0XHR9XG5cblx0XHRmdW5jdGlvbiB3cml0ZUFQUDEoZXhpZkJ1ZmZlcikge1xuXHRcdFx0aWYgKCFleGlmQnVmZmVyKSByZXR1cm47XG5cblx0XHRcdHdyaXRlV29yZCgweEZGRTEpOyAvLyBBUFAxIG1hcmtlclxuXG5cdFx0XHRpZiAoZXhpZkJ1ZmZlclswXSA9PT0gMHg0NSAmJlxuXHRcdFx0XHRcdGV4aWZCdWZmZXJbMV0gPT09IDB4NzggJiZcblx0XHRcdFx0XHRleGlmQnVmZmVyWzJdID09PSAweDY5ICYmXG5cdFx0XHRcdFx0ZXhpZkJ1ZmZlclszXSA9PT0gMHg2Nikge1xuXHRcdFx0XHQvLyBCdWZmZXIgYWxyZWFkeSBzdGFydHMgd2l0aCBFWElGLCBqdXN0IHVzZSBpdCBkaXJlY3RseVxuXHRcdFx0XHR3cml0ZVdvcmQoZXhpZkJ1ZmZlci5sZW5ndGggKyAyKTsgLy8gbGVuZ3RoIGlzIGJ1ZmZlciArIGxlbmd0aCBpdHNlbGYhXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQvLyBCdWZmZXIgZG9lc24ndCBzdGFydCB3aXRoIEVYSUYsIHdyaXRlIGl0IGZvciB0aGVtXG5cdFx0XHRcdHdyaXRlV29yZChleGlmQnVmZmVyLmxlbmd0aCArIDUgKyAyKTsgLy8gbGVuZ3RoIGlzIGJ1ZmZlciArIEVYSUZcXDAgKyBsZW5ndGggaXRzZWxmIVxuXHRcdFx0XHR3cml0ZUJ5dGUoMHg0NSk7IC8vIEVcblx0XHRcdFx0d3JpdGVCeXRlKDB4NzgpOyAvLyBYXG5cdFx0XHRcdHdyaXRlQnl0ZSgweDY5KTsgLy8gSVxuXHRcdFx0XHR3cml0ZUJ5dGUoMHg2Nik7IC8vIEZcblx0XHRcdFx0d3JpdGVCeXRlKDApOyAvLyA9IFwiRVhJRlwiLCdcXDAnXG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZXhpZkJ1ZmZlci5sZW5ndGg7IGkrKykge1xuXHRcdFx0XHR3cml0ZUJ5dGUoZXhpZkJ1ZmZlcltpXSk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0ZnVuY3Rpb24gd3JpdGVTT0YwKHdpZHRoLCBoZWlnaHQpXG5cdFx0e1xuXHRcdFx0d3JpdGVXb3JkKDB4RkZDMCk7IC8vIG1hcmtlclxuXHRcdFx0d3JpdGVXb3JkKDE3KTsgICAvLyBsZW5ndGgsIHRydWVjb2xvciBZVVYgSlBHXG5cdFx0XHR3cml0ZUJ5dGUoOCk7ICAgIC8vIHByZWNpc2lvblxuXHRcdFx0d3JpdGVXb3JkKGhlaWdodCk7XG5cdFx0XHR3cml0ZVdvcmQod2lkdGgpO1xuXHRcdFx0d3JpdGVCeXRlKDMpOyAgICAvLyBucm9mY29tcG9uZW50c1xuXHRcdFx0d3JpdGVCeXRlKDEpOyAgICAvLyBJZFlcblx0XHRcdHdyaXRlQnl0ZSgweDExKTsgLy8gSFZZXG5cdFx0XHR3cml0ZUJ5dGUoMCk7ICAgIC8vIFFUWVxuXHRcdFx0d3JpdGVCeXRlKDIpOyAgICAvLyBJZFVcblx0XHRcdHdyaXRlQnl0ZSgweDExKTsgLy8gSFZVXG5cdFx0XHR3cml0ZUJ5dGUoMSk7ICAgIC8vIFFUVVxuXHRcdFx0d3JpdGVCeXRlKDMpOyAgICAvLyBJZFZcblx0XHRcdHdyaXRlQnl0ZSgweDExKTsgLy8gSFZWXG5cdFx0XHR3cml0ZUJ5dGUoMSk7ICAgIC8vIFFUVlxuXHRcdH1cblx0XG5cdFx0ZnVuY3Rpb24gd3JpdGVEUVQoKVxuXHRcdHtcblx0XHRcdHdyaXRlV29yZCgweEZGREIpOyAvLyBtYXJrZXJcblx0XHRcdHdyaXRlV29yZCgxMzIpO1x0ICAgLy8gbGVuZ3RoXG5cdFx0XHR3cml0ZUJ5dGUoMCk7XG5cdFx0XHRmb3IgKHZhciBpPTA7IGk8NjQ7IGkrKykge1xuXHRcdFx0XHR3cml0ZUJ5dGUoWVRhYmxlW2ldKTtcblx0XHRcdH1cblx0XHRcdHdyaXRlQnl0ZSgxKTtcblx0XHRcdGZvciAodmFyIGo9MDsgajw2NDsgaisrKSB7XG5cdFx0XHRcdHdyaXRlQnl0ZShVVlRhYmxlW2pdKTtcblx0XHRcdH1cblx0XHR9XG5cdFxuXHRcdGZ1bmN0aW9uIHdyaXRlREhUKClcblx0XHR7XG5cdFx0XHR3cml0ZVdvcmQoMHhGRkM0KTsgLy8gbWFya2VyXG5cdFx0XHR3cml0ZVdvcmQoMHgwMUEyKTsgLy8gbGVuZ3RoXG5cdFxuXHRcdFx0d3JpdGVCeXRlKDApOyAvLyBIVFlEQ2luZm9cblx0XHRcdGZvciAodmFyIGk9MDsgaTwxNjsgaSsrKSB7XG5cdFx0XHRcdHdyaXRlQnl0ZShzdGRfZGNfbHVtaW5hbmNlX25yY29kZXNbaSsxXSk7XG5cdFx0XHR9XG5cdFx0XHRmb3IgKHZhciBqPTA7IGo8PTExOyBqKyspIHtcblx0XHRcdFx0d3JpdGVCeXRlKHN0ZF9kY19sdW1pbmFuY2VfdmFsdWVzW2pdKTtcblx0XHRcdH1cblx0XG5cdFx0XHR3cml0ZUJ5dGUoMHgxMCk7IC8vIEhUWUFDaW5mb1xuXHRcdFx0Zm9yICh2YXIgaz0wOyBrPDE2OyBrKyspIHtcblx0XHRcdFx0d3JpdGVCeXRlKHN0ZF9hY19sdW1pbmFuY2VfbnJjb2Rlc1trKzFdKTtcblx0XHRcdH1cblx0XHRcdGZvciAodmFyIGw9MDsgbDw9MTYxOyBsKyspIHtcblx0XHRcdFx0d3JpdGVCeXRlKHN0ZF9hY19sdW1pbmFuY2VfdmFsdWVzW2xdKTtcblx0XHRcdH1cblx0XG5cdFx0XHR3cml0ZUJ5dGUoMSk7IC8vIEhUVURDaW5mb1xuXHRcdFx0Zm9yICh2YXIgbT0wOyBtPDE2OyBtKyspIHtcblx0XHRcdFx0d3JpdGVCeXRlKHN0ZF9kY19jaHJvbWluYW5jZV9ucmNvZGVzW20rMV0pO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgbj0wOyBuPD0xMTsgbisrKSB7XG5cdFx0XHRcdHdyaXRlQnl0ZShzdGRfZGNfY2hyb21pbmFuY2VfdmFsdWVzW25dKTtcblx0XHRcdH1cblx0XG5cdFx0XHR3cml0ZUJ5dGUoMHgxMSk7IC8vIEhUVUFDaW5mb1xuXHRcdFx0Zm9yICh2YXIgbz0wOyBvPDE2OyBvKyspIHtcblx0XHRcdFx0d3JpdGVCeXRlKHN0ZF9hY19jaHJvbWluYW5jZV9ucmNvZGVzW28rMV0pO1xuXHRcdFx0fVxuXHRcdFx0Zm9yICh2YXIgcD0wOyBwPD0xNjE7IHArKykge1xuXHRcdFx0XHR3cml0ZUJ5dGUoc3RkX2FjX2Nocm9taW5hbmNlX3ZhbHVlc1twXSk7XG5cdFx0XHR9XG5cdFx0fVxuXHRcblx0XHRmdW5jdGlvbiB3cml0ZVNPUygpXG5cdFx0e1xuXHRcdFx0d3JpdGVXb3JkKDB4RkZEQSk7IC8vIG1hcmtlclxuXHRcdFx0d3JpdGVXb3JkKDEyKTsgLy8gbGVuZ3RoXG5cdFx0XHR3cml0ZUJ5dGUoMyk7IC8vIG5yb2Zjb21wb25lbnRzXG5cdFx0XHR3cml0ZUJ5dGUoMSk7IC8vIElkWVxuXHRcdFx0d3JpdGVCeXRlKDApOyAvLyBIVFlcblx0XHRcdHdyaXRlQnl0ZSgyKTsgLy8gSWRVXG5cdFx0XHR3cml0ZUJ5dGUoMHgxMSk7IC8vIEhUVVxuXHRcdFx0d3JpdGVCeXRlKDMpOyAvLyBJZFZcblx0XHRcdHdyaXRlQnl0ZSgweDExKTsgLy8gSFRWXG5cdFx0XHR3cml0ZUJ5dGUoMCk7IC8vIFNzXG5cdFx0XHR3cml0ZUJ5dGUoMHgzZik7IC8vIFNlXG5cdFx0XHR3cml0ZUJ5dGUoMCk7IC8vIEJmXG5cdFx0fVxuXHRcdFxuXHRcdGZ1bmN0aW9uIHByb2Nlc3NEVShDRFUsIGZkdGJsLCBEQywgSFREQywgSFRBQyl7XG5cdFx0XHR2YXIgRU9CID0gSFRBQ1sweDAwXTtcblx0XHRcdHZhciBNMTZ6ZXJvZXMgPSBIVEFDWzB4RjBdO1xuXHRcdFx0dmFyIHBvcztcblx0XHRcdHZhciBJMTYgPSAxNjtcblx0XHRcdHZhciBJNjMgPSA2Mztcblx0XHRcdHZhciBJNjQgPSA2NDtcblx0XHRcdHZhciBEVV9EQ1QgPSBmRENUUXVhbnQoQ0RVLCBmZHRibCk7XG5cdFx0XHQvL1ppZ1phZyByZW9yZGVyXG5cdFx0XHRmb3IgKHZhciBqPTA7ajxJNjQ7KytqKSB7XG5cdFx0XHRcdERVW1ppZ1phZ1tqXV09RFVfRENUW2pdO1xuXHRcdFx0fVxuXHRcdFx0dmFyIERpZmYgPSBEVVswXSAtIERDOyBEQyA9IERVWzBdO1xuXHRcdFx0Ly9FbmNvZGUgRENcblx0XHRcdGlmIChEaWZmPT0wKSB7XG5cdFx0XHRcdHdyaXRlQml0cyhIVERDWzBdKTsgLy8gRGlmZiBtaWdodCBiZSAwXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwb3MgPSAzMjc2NytEaWZmO1xuXHRcdFx0XHR3cml0ZUJpdHMoSFREQ1tjYXRlZ29yeVtwb3NdXSk7XG5cdFx0XHRcdHdyaXRlQml0cyhiaXRjb2RlW3Bvc10pO1xuXHRcdFx0fVxuXHRcdFx0Ly9FbmNvZGUgQUNzXG5cdFx0XHR2YXIgZW5kMHBvcyA9IDYzOyAvLyB3YXMgY29uc3QuLi4gd2hpY2ggaXMgY3Jhenlcblx0XHRcdGZvciAoOyAoZW5kMHBvcz4wKSYmKERVW2VuZDBwb3NdPT0wKTsgZW5kMHBvcy0tKSB7fTtcblx0XHRcdC8vZW5kMHBvcyA9IGZpcnN0IGVsZW1lbnQgaW4gcmV2ZXJzZSBvcmRlciAhPTBcblx0XHRcdGlmICggZW5kMHBvcyA9PSAwKSB7XG5cdFx0XHRcdHdyaXRlQml0cyhFT0IpO1xuXHRcdFx0XHRyZXR1cm4gREM7XG5cdFx0XHR9XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHR2YXIgbG5nO1xuXHRcdFx0d2hpbGUgKCBpIDw9IGVuZDBwb3MgKSB7XG5cdFx0XHRcdHZhciBzdGFydHBvcyA9IGk7XG5cdFx0XHRcdGZvciAoOyAoRFVbaV09PTApICYmIChpPD1lbmQwcG9zKTsgKytpKSB7fVxuXHRcdFx0XHR2YXIgbnJ6ZXJvZXMgPSBpLXN0YXJ0cG9zO1xuXHRcdFx0XHRpZiAoIG5yemVyb2VzID49IEkxNiApIHtcblx0XHRcdFx0XHRsbmcgPSBucnplcm9lcz4+NDtcblx0XHRcdFx0XHRmb3IgKHZhciBucm1hcmtlcj0xOyBucm1hcmtlciA8PSBsbmc7ICsrbnJtYXJrZXIpXG5cdFx0XHRcdFx0XHR3cml0ZUJpdHMoTTE2emVyb2VzKTtcblx0XHRcdFx0XHRucnplcm9lcyA9IG5yemVyb2VzJjB4Rjtcblx0XHRcdFx0fVxuXHRcdFx0XHRwb3MgPSAzMjc2NytEVVtpXTtcblx0XHRcdFx0d3JpdGVCaXRzKEhUQUNbKG5yemVyb2VzPDw0KStjYXRlZ29yeVtwb3NdXSk7XG5cdFx0XHRcdHdyaXRlQml0cyhiaXRjb2RlW3Bvc10pO1xuXHRcdFx0XHRpKys7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGVuZDBwb3MgIT0gSTYzICkge1xuXHRcdFx0XHR3cml0ZUJpdHMoRU9CKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBEQztcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBpbml0Q2hhckxvb2t1cFRhYmxlKCl7XG5cdFx0XHR2YXIgc2ZjYyA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cdFx0XHRmb3IodmFyIGk9MDsgaSA8IDI1NjsgaSsrKXsgLy8vLy8gQUNIVFVORyAvLyAyNTVcblx0XHRcdFx0Y2x0W2ldID0gc2ZjYyhpKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0XG5cdFx0dGhpcy5lbmNvZGUgPSBmdW5jdGlvbihpbWFnZSxxdWFsaXR5KSAvLyBpbWFnZSBkYXRhIG9iamVjdFxuXHRcdHtcblx0XHRcdHZhciB0aW1lX3N0YXJ0ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG5cdFx0XHRcblx0XHRcdGlmKHF1YWxpdHkpIHNldFF1YWxpdHkocXVhbGl0eSk7XG5cdFx0XHRcblx0XHRcdC8vIEluaXRpYWxpemUgYml0IHdyaXRlclxuXHRcdFx0Ynl0ZW91dCA9IG5ldyBBcnJheSgpO1xuXHRcdFx0Ynl0ZW5ldz0wO1xuXHRcdFx0Ynl0ZXBvcz03O1xuXHRcblx0XHRcdC8vIEFkZCBKUEVHIGhlYWRlcnNcblx0XHRcdHdyaXRlV29yZCgweEZGRDgpOyAvLyBTT0lcblx0XHRcdHdyaXRlQVBQMCgpO1xuXHRcdFx0d3JpdGVBUFAxKGltYWdlLmV4aWZCdWZmZXIpO1xuXHRcdFx0d3JpdGVEUVQoKTtcblx0XHRcdHdyaXRlU09GMChpbWFnZS53aWR0aCxpbWFnZS5oZWlnaHQpO1xuXHRcdFx0d3JpdGVESFQoKTtcblx0XHRcdHdyaXRlU09TKCk7XG5cblx0XG5cdFx0XHQvLyBFbmNvZGUgOHg4IG1hY3JvYmxvY2tzXG5cdFx0XHR2YXIgRENZPTA7XG5cdFx0XHR2YXIgRENVPTA7XG5cdFx0XHR2YXIgRENWPTA7XG5cdFx0XHRcblx0XHRcdGJ5dGVuZXc9MDtcblx0XHRcdGJ5dGVwb3M9Nztcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHR0aGlzLmVuY29kZS5kaXNwbGF5TmFtZSA9IFwiX2VuY29kZV9cIjtcblxuXHRcdFx0dmFyIGltYWdlRGF0YSA9IGltYWdlLmRhdGE7XG5cdFx0XHR2YXIgd2lkdGggPSBpbWFnZS53aWR0aDtcblx0XHRcdHZhciBoZWlnaHQgPSBpbWFnZS5oZWlnaHQ7XG5cblx0XHRcdHZhciBxdWFkV2lkdGggPSB3aWR0aCo0O1xuXHRcdFx0dmFyIHRyaXBsZVdpZHRoID0gd2lkdGgqMztcblx0XHRcdFxuXHRcdFx0dmFyIHgsIHkgPSAwO1xuXHRcdFx0dmFyIHIsIGcsIGI7XG5cdFx0XHR2YXIgc3RhcnQscCwgY29sLHJvdyxwb3M7XG5cdFx0XHR3aGlsZSh5IDwgaGVpZ2h0KXtcblx0XHRcdFx0eCA9IDA7XG5cdFx0XHRcdHdoaWxlKHggPCBxdWFkV2lkdGgpe1xuXHRcdFx0XHRzdGFydCA9IHF1YWRXaWR0aCAqIHkgKyB4O1xuXHRcdFx0XHRwID0gc3RhcnQ7XG5cdFx0XHRcdGNvbCA9IC0xO1xuXHRcdFx0XHRyb3cgPSAwO1xuXHRcdFx0XHRcblx0XHRcdFx0Zm9yKHBvcz0wOyBwb3MgPCA2NDsgcG9zKyspe1xuXHRcdFx0XHRcdHJvdyA9IHBvcyA+PiAzOy8vIC84XG5cdFx0XHRcdFx0Y29sID0gKCBwb3MgJiA3ICkgKiA0OyAvLyAlOFxuXHRcdFx0XHRcdHAgPSBzdGFydCArICggcm93ICogcXVhZFdpZHRoICkgKyBjb2w7XHRcdFxuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdGlmKHkrcm93ID49IGhlaWdodCl7IC8vIHBhZGRpbmcgYm90dG9tXG5cdFx0XHRcdFx0XHRwLT0gKHF1YWRXaWR0aCooeSsxK3Jvdy1oZWlnaHQpKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRpZih4K2NvbCA+PSBxdWFkV2lkdGgpeyAvLyBwYWRkaW5nIHJpZ2h0XHRcblx0XHRcdFx0XHRcdHAtPSAoKHgrY29sKSAtIHF1YWRXaWR0aCArNClcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0ciA9IGltYWdlRGF0YVsgcCsrIF07XG5cdFx0XHRcdFx0ZyA9IGltYWdlRGF0YVsgcCsrIF07XG5cdFx0XHRcdFx0YiA9IGltYWdlRGF0YVsgcCsrIF07XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0XG5cdFx0XHRcdFx0LyogLy8gY2FsY3VsYXRlIFlVViB2YWx1ZXMgZHluYW1pY2FsbHlcblx0XHRcdFx0XHRZRFVbcG9zXT0oKCggMC4yOTkwMCkqcisoIDAuNTg3MDApKmcrKCAwLjExNDAwKSpiKSktMTI4OyAvLy0weDgwXG5cdFx0XHRcdFx0VURVW3Bvc109KCgoLTAuMTY4NzQpKnIrKC0wLjMzMTI2KSpnKyggMC41MDAwMCkqYikpO1xuXHRcdFx0XHRcdFZEVVtwb3NdPSgoKCAwLjUwMDAwKSpyKygtMC40MTg2OSkqZysoLTAuMDgxMzEpKmIpKTtcblx0XHRcdFx0XHQqL1xuXHRcdFx0XHRcdFxuXHRcdFx0XHRcdC8vIHVzZSBsb29rdXAgdGFibGUgKHNsaWdodGx5IGZhc3Rlcilcblx0XHRcdFx0XHRZRFVbcG9zXSA9ICgoUkdCX1lVVl9UQUJMRVtyXSAgICAgICAgICAgICArIFJHQl9ZVVZfVEFCTEVbKGcgKyAgMjU2KT4+MF0gKyBSR0JfWVVWX1RBQkxFWyhiICsgIDUxMik+PjBdKSA+PiAxNiktMTI4O1xuXHRcdFx0XHRcdFVEVVtwb3NdID0gKChSR0JfWVVWX1RBQkxFWyhyICsgIDc2OCk+PjBdICsgUkdCX1lVVl9UQUJMRVsoZyArIDEwMjQpPj4wXSArIFJHQl9ZVVZfVEFCTEVbKGIgKyAxMjgwKT4+MF0pID4+IDE2KS0xMjg7XG5cdFx0XHRcdFx0VkRVW3Bvc10gPSAoKFJHQl9ZVVZfVEFCTEVbKHIgKyAxMjgwKT4+MF0gKyBSR0JfWVVWX1RBQkxFWyhnICsgMTUzNik+PjBdICsgUkdCX1lVVl9UQUJMRVsoYiArIDE3OTIpPj4wXSkgPj4gMTYpLTEyODtcblxuXHRcdFx0XHR9XG5cdFx0XHRcdFxuXHRcdFx0XHREQ1kgPSBwcm9jZXNzRFUoWURVLCBmZHRibF9ZLCBEQ1ksIFlEQ19IVCwgWUFDX0hUKTtcblx0XHRcdFx0RENVID0gcHJvY2Vzc0RVKFVEVSwgZmR0YmxfVVYsIERDVSwgVVZEQ19IVCwgVVZBQ19IVCk7XG5cdFx0XHRcdERDViA9IHByb2Nlc3NEVShWRFUsIGZkdGJsX1VWLCBEQ1YsIFVWRENfSFQsIFVWQUNfSFQpO1xuXHRcdFx0XHR4Kz0zMjtcblx0XHRcdFx0fVxuXHRcdFx0XHR5Kz04O1xuXHRcdFx0fVxuXHRcdFx0XG5cdFx0XHRcblx0XHRcdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0XG5cdFx0XHQvLyBEbyB0aGUgYml0IGFsaWdubWVudCBvZiB0aGUgRU9JIG1hcmtlclxuXHRcdFx0aWYgKCBieXRlcG9zID49IDAgKSB7XG5cdFx0XHRcdHZhciBmaWxsYml0cyA9IFtdO1xuXHRcdFx0XHRmaWxsYml0c1sxXSA9IGJ5dGVwb3MrMTtcblx0XHRcdFx0ZmlsbGJpdHNbMF0gPSAoMTw8KGJ5dGVwb3MrMSkpLTE7XG5cdFx0XHRcdHdyaXRlQml0cyhmaWxsYml0cyk7XG5cdFx0XHR9XG5cdFxuXHRcdFx0d3JpdGVXb3JkKDB4RkZEOSk7IC8vRU9JXG5cblx0XHRcdGlmICh0eXBlb2YgbW9kdWxlID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG5ldyBVaW50OEFycmF5KGJ5dGVvdXQpO1xuICAgICAgcmV0dXJuIEJ1ZmZlci5mcm9tKGJ5dGVvdXQpO1xuXG5cdFx0XHR2YXIganBlZ0RhdGFVcmkgPSAnZGF0YTppbWFnZS9qcGVnO2Jhc2U2NCwnICsgYnRvYShieXRlb3V0LmpvaW4oJycpKTtcblx0XHRcdFxuXHRcdFx0Ynl0ZW91dCA9IFtdO1xuXHRcdFx0XG5cdFx0XHQvLyBiZW5jaG1hcmtpbmdcblx0XHRcdHZhciBkdXJhdGlvbiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdGltZV9zdGFydDtcbiAgICBcdFx0Ly9jb25zb2xlLmxvZygnRW5jb2RpbmcgdGltZTogJysgZHVyYXRpb24gKyAnbXMnKTtcbiAgICBcdFx0Ly9cblx0XHRcdFxuXHRcdFx0cmV0dXJuIGpwZWdEYXRhVXJpXHRcdFx0XG5cdH1cblx0XG5cdGZ1bmN0aW9uIHNldFF1YWxpdHkocXVhbGl0eSl7XG5cdFx0aWYgKHF1YWxpdHkgPD0gMCkge1xuXHRcdFx0cXVhbGl0eSA9IDE7XG5cdFx0fVxuXHRcdGlmIChxdWFsaXR5ID4gMTAwKSB7XG5cdFx0XHRxdWFsaXR5ID0gMTAwO1xuXHRcdH1cblx0XHRcblx0XHRpZihjdXJyZW50UXVhbGl0eSA9PSBxdWFsaXR5KSByZXR1cm4gLy8gZG9uJ3QgcmVjYWxjIGlmIHVuY2hhbmdlZFxuXHRcdFxuXHRcdHZhciBzZiA9IDA7XG5cdFx0aWYgKHF1YWxpdHkgPCA1MCkge1xuXHRcdFx0c2YgPSBNYXRoLmZsb29yKDUwMDAgLyBxdWFsaXR5KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c2YgPSBNYXRoLmZsb29yKDIwMCAtIHF1YWxpdHkqMik7XG5cdFx0fVxuXHRcdFxuXHRcdGluaXRRdWFudFRhYmxlcyhzZik7XG5cdFx0Y3VycmVudFF1YWxpdHkgPSBxdWFsaXR5O1xuXHRcdC8vY29uc29sZS5sb2coJ1F1YWxpdHkgc2V0IHRvOiAnK3F1YWxpdHkgKyclJyk7XG5cdH1cblx0XG5cdGZ1bmN0aW9uIGluaXQoKXtcblx0XHR2YXIgdGltZV9zdGFydCA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdGlmKCFxdWFsaXR5KSBxdWFsaXR5ID0gNTA7XG5cdFx0Ly8gQ3JlYXRlIHRhYmxlc1xuXHRcdGluaXRDaGFyTG9va3VwVGFibGUoKVxuXHRcdGluaXRIdWZmbWFuVGJsKCk7XG5cdFx0aW5pdENhdGVnb3J5TnVtYmVyKCk7XG5cdFx0aW5pdFJHQllVVlRhYmxlKCk7XG5cdFx0XG5cdFx0c2V0UXVhbGl0eShxdWFsaXR5KTtcblx0XHR2YXIgZHVyYXRpb24gPSBuZXcgRGF0ZSgpLmdldFRpbWUoKSAtIHRpbWVfc3RhcnQ7XG4gICAgXHQvL2NvbnNvbGUubG9nKCdJbml0aWFsaXphdGlvbiAnKyBkdXJhdGlvbiArICdtcycpO1xuXHR9XG5cdFxuXHRpbml0KCk7XG5cdFxufTtcblxuaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG5cdG1vZHVsZS5leHBvcnRzID0gZW5jb2RlO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHR3aW5kb3dbJ2pwZWctanMnXSA9IHdpbmRvd1snanBlZy1qcyddIHx8IHt9O1xuXHR3aW5kb3dbJ2pwZWctanMnXS5lbmNvZGUgPSBlbmNvZGU7XG59XG5cbmZ1bmN0aW9uIGVuY29kZShpbWdEYXRhLCBxdSkge1xuICBpZiAodHlwZW9mIHF1ID09PSAndW5kZWZpbmVkJykgcXUgPSA1MDtcbiAgdmFyIGVuY29kZXIgPSBuZXcgSlBFR0VuY29kZXIocXUpO1xuXHR2YXIgZGF0YSA9IGVuY29kZXIuZW5jb2RlKGltZ0RhdGEsIHF1KTtcbiAgcmV0dXJuIHtcbiAgICBkYXRhOiBkYXRhLFxuICAgIHdpZHRoOiBpbWdEYXRhLndpZHRoLFxuICAgIGhlaWdodDogaW1nRGF0YS5oZWlnaHRcbiAgfTtcbn1cblxuLy8gaGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgaW1hZ2VEYXRhIG9mIGFuIGV4aXN0aW5nIGltYWdlIG9uIHRoZSBjdXJyZW50IHBhZ2UuXG5mdW5jdGlvbiBnZXRJbWFnZURhdGFGcm9tSW1hZ2UoaWRPckVsZW1lbnQpe1xuXHR2YXIgdGhlSW1nID0gKHR5cGVvZihpZE9yRWxlbWVudCk9PSdzdHJpbmcnKT8gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoaWRPckVsZW1lbnQpOmlkT3JFbGVtZW50O1xuXHR2YXIgY3ZzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG5cdGN2cy53aWR0aCA9IHRoZUltZy53aWR0aDtcblx0Y3ZzLmhlaWdodCA9IHRoZUltZy5oZWlnaHQ7XG5cdHZhciBjdHggPSBjdnMuZ2V0Q29udGV4dChcIjJkXCIpO1xuXHRjdHguZHJhd0ltYWdlKHRoZUltZywwLDApO1xuXHRcblx0cmV0dXJuIChjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIGN2cy53aWR0aCwgY3ZzLmhlaWdodCkpO1xufVxuIiwiKGZ1bmN0aW9uKGYpe2lmKHR5cGVvZiBleHBvcnRzPT09XCJvYmplY3RcIiYmdHlwZW9mIG1vZHVsZSE9PVwidW5kZWZpbmVkXCIpe21vZHVsZS5leHBvcnRzPWYoKX1lbHNlIGlmKHR5cGVvZiBkZWZpbmU9PT1cImZ1bmN0aW9uXCImJmRlZmluZS5hbWQpe2RlZmluZShbXSxmKX1lbHNle3ZhciBnO2lmKHR5cGVvZiB3aW5kb3chPT1cInVuZGVmaW5lZFwiKXtnPXdpbmRvd31lbHNlIGlmKHR5cGVvZiBnbG9iYWwhPT1cInVuZGVmaW5lZFwiKXtnPWdsb2JhbH1lbHNlIGlmKHR5cGVvZiBzZWxmIT09XCJ1bmRlZmluZWRcIil7Zz1zZWxmfWVsc2V7Zz10aGlzfWcuUHJpb3JpdHlRdWV1ZSA9IGYoKX19KShmdW5jdGlvbigpe3ZhciBkZWZpbmUsbW9kdWxlLGV4cG9ydHM7cmV0dXJuIChmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pKHsxOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBYnN0cmFjdFByaW9yaXR5UXVldWUsIEFycmF5U3RyYXRlZ3ksIEJIZWFwU3RyYXRlZ3ksIEJpbmFyeUhlYXBTdHJhdGVneSwgUHJpb3JpdHlRdWV1ZSxcbiAgZXh0ZW5kID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChoYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9LFxuICBoYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHk7XG5cbkFic3RyYWN0UHJpb3JpdHlRdWV1ZSA9IF9kZXJlcV8oJy4vUHJpb3JpdHlRdWV1ZS9BYnN0cmFjdFByaW9yaXR5UXVldWUnKTtcblxuQXJyYXlTdHJhdGVneSA9IF9kZXJlcV8oJy4vUHJpb3JpdHlRdWV1ZS9BcnJheVN0cmF0ZWd5Jyk7XG5cbkJpbmFyeUhlYXBTdHJhdGVneSA9IF9kZXJlcV8oJy4vUHJpb3JpdHlRdWV1ZS9CaW5hcnlIZWFwU3RyYXRlZ3knKTtcblxuQkhlYXBTdHJhdGVneSA9IF9kZXJlcV8oJy4vUHJpb3JpdHlRdWV1ZS9CSGVhcFN0cmF0ZWd5Jyk7XG5cblByaW9yaXR5UXVldWUgPSAoZnVuY3Rpb24oc3VwZXJDbGFzcykge1xuICBleHRlbmQoUHJpb3JpdHlRdWV1ZSwgc3VwZXJDbGFzcyk7XG5cbiAgZnVuY3Rpb24gUHJpb3JpdHlRdWV1ZShvcHRpb25zKSB7XG4gICAgb3B0aW9ucyB8fCAob3B0aW9ucyA9IHt9KTtcbiAgICBvcHRpb25zLnN0cmF0ZWd5IHx8IChvcHRpb25zLnN0cmF0ZWd5ID0gQmluYXJ5SGVhcFN0cmF0ZWd5KTtcbiAgICBvcHRpb25zLmNvbXBhcmF0b3IgfHwgKG9wdGlvbnMuY29tcGFyYXRvciA9IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiAoYSB8fCAwKSAtIChiIHx8IDApO1xuICAgIH0pO1xuICAgIFByaW9yaXR5UXVldWUuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICByZXR1cm4gUHJpb3JpdHlRdWV1ZTtcblxufSkoQWJzdHJhY3RQcmlvcml0eVF1ZXVlKTtcblxuUHJpb3JpdHlRdWV1ZS5BcnJheVN0cmF0ZWd5ID0gQXJyYXlTdHJhdGVneTtcblxuUHJpb3JpdHlRdWV1ZS5CaW5hcnlIZWFwU3RyYXRlZ3kgPSBCaW5hcnlIZWFwU3RyYXRlZ3k7XG5cblByaW9yaXR5UXVldWUuQkhlYXBTdHJhdGVneSA9IEJIZWFwU3RyYXRlZ3k7XG5cbm1vZHVsZS5leHBvcnRzID0gUHJpb3JpdHlRdWV1ZTtcblxuXG59LHtcIi4vUHJpb3JpdHlRdWV1ZS9BYnN0cmFjdFByaW9yaXR5UXVldWVcIjoyLFwiLi9Qcmlvcml0eVF1ZXVlL0FycmF5U3RyYXRlZ3lcIjozLFwiLi9Qcmlvcml0eVF1ZXVlL0JIZWFwU3RyYXRlZ3lcIjo0LFwiLi9Qcmlvcml0eVF1ZXVlL0JpbmFyeUhlYXBTdHJhdGVneVwiOjV9XSwyOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBYnN0cmFjdFByaW9yaXR5UXVldWU7XG5cbm1vZHVsZS5leHBvcnRzID0gQWJzdHJhY3RQcmlvcml0eVF1ZXVlID0gKGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBBYnN0cmFjdFByaW9yaXR5UXVldWUob3B0aW9ucykge1xuICAgIHZhciByZWY7XG4gICAgaWYgKChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnN0cmF0ZWd5IDogdm9pZCAwKSA9PSBudWxsKSB7XG4gICAgICB0aHJvdyAnTXVzdCBwYXNzIG9wdGlvbnMuc3RyYXRlZ3ksIGEgc3RyYXRlZ3knO1xuICAgIH1cbiAgICBpZiAoKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuY29tcGFyYXRvciA6IHZvaWQgMCkgPT0gbnVsbCkge1xuICAgICAgdGhyb3cgJ011c3QgcGFzcyBvcHRpb25zLmNvbXBhcmF0b3IsIGEgY29tcGFyYXRvcic7XG4gICAgfVxuICAgIHRoaXMucHJpdiA9IG5ldyBvcHRpb25zLnN0cmF0ZWd5KG9wdGlvbnMpO1xuICAgIHRoaXMubGVuZ3RoID0gKG9wdGlvbnMgIT0gbnVsbCA/IChyZWYgPSBvcHRpb25zLmluaXRpYWxWYWx1ZXMpICE9IG51bGwgPyByZWYubGVuZ3RoIDogdm9pZCAwIDogdm9pZCAwKSB8fCAwO1xuICB9XG5cbiAgQWJzdHJhY3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5xdWV1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5sZW5ndGgrKztcbiAgICB0aGlzLnByaXYucXVldWUodmFsdWUpO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG5cbiAgQWJzdHJhY3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5kZXF1ZXVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICBpZiAoIXRoaXMubGVuZ3RoKSB7XG4gICAgICB0aHJvdyAnRW1wdHkgcXVldWUnO1xuICAgIH1cbiAgICB0aGlzLmxlbmd0aC0tO1xuICAgIHJldHVybiB0aGlzLnByaXYuZGVxdWV1ZSgpO1xuICB9O1xuXG4gIEFic3RyYWN0UHJpb3JpdHlRdWV1ZS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgaWYgKCF0aGlzLmxlbmd0aCkge1xuICAgICAgdGhyb3cgJ0VtcHR5IHF1ZXVlJztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMucHJpdi5wZWVrKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RQcmlvcml0eVF1ZXVlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICByZXR1cm4gdGhpcy5wcml2LmNsZWFyKCk7XG4gIH07XG5cbiAgcmV0dXJuIEFic3RyYWN0UHJpb3JpdHlRdWV1ZTtcblxufSkoKTtcblxuXG59LHt9XSwzOltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBBcnJheVN0cmF0ZWd5LCBiaW5hcnlTZWFyY2hGb3JJbmRleFJldmVyc2VkO1xuXG5iaW5hcnlTZWFyY2hGb3JJbmRleFJldmVyc2VkID0gZnVuY3Rpb24oYXJyYXksIHZhbHVlLCBjb21wYXJhdG9yKSB7XG4gIHZhciBoaWdoLCBsb3csIG1pZDtcbiAgbG93ID0gMDtcbiAgaGlnaCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxvdyA8IGhpZ2gpIHtcbiAgICBtaWQgPSAobG93ICsgaGlnaCkgPj4+IDE7XG4gICAgaWYgKGNvbXBhcmF0b3IoYXJyYXlbbWlkXSwgdmFsdWUpID49IDApIHtcbiAgICAgIGxvdyA9IG1pZCArIDE7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhpZ2ggPSBtaWQ7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb3c7XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEFycmF5U3RyYXRlZ3kgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIEFycmF5U3RyYXRlZ3kob3B0aW9ucykge1xuICAgIHZhciByZWY7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICB0aGlzLmNvbXBhcmF0b3IgPSB0aGlzLm9wdGlvbnMuY29tcGFyYXRvcjtcbiAgICB0aGlzLmRhdGEgPSAoKHJlZiA9IHRoaXMub3B0aW9ucy5pbml0aWFsVmFsdWVzKSAhPSBudWxsID8gcmVmLnNsaWNlKDApIDogdm9pZCAwKSB8fCBbXTtcbiAgICB0aGlzLmRhdGEuc29ydCh0aGlzLmNvbXBhcmF0b3IpLnJldmVyc2UoKTtcbiAgfVxuXG4gIEFycmF5U3RyYXRlZ3kucHJvdG90eXBlLnF1ZXVlID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcG9zO1xuICAgIHBvcyA9IGJpbmFyeVNlYXJjaEZvckluZGV4UmV2ZXJzZWQodGhpcy5kYXRhLCB2YWx1ZSwgdGhpcy5jb21wYXJhdG9yKTtcbiAgICB0aGlzLmRhdGEuc3BsaWNlKHBvcywgMCwgdmFsdWUpO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG5cbiAgQXJyYXlTdHJhdGVneS5wcm90b3R5cGUuZGVxdWV1ZSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGEucG9wKCk7XG4gIH07XG5cbiAgQXJyYXlTdHJhdGVneS5wcm90b3R5cGUucGVlayA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiB0aGlzLmRhdGFbdGhpcy5kYXRhLmxlbmd0aCAtIDFdO1xuICB9O1xuXG4gIEFycmF5U3RyYXRlZ3kucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5kYXRhLmxlbmd0aCA9IDA7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICByZXR1cm4gQXJyYXlTdHJhdGVneTtcblxufSkoKTtcblxuXG59LHt9XSw0OltmdW5jdGlvbihfZGVyZXFfLG1vZHVsZSxleHBvcnRzKXtcbnZhciBCSGVhcFN0cmF0ZWd5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJIZWFwU3RyYXRlZ3kgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIEJIZWFwU3RyYXRlZ3kob3B0aW9ucykge1xuICAgIHZhciBhcnIsIGksIGosIGssIGxlbiwgcmVmLCByZWYxLCBzaGlmdCwgdmFsdWU7XG4gICAgdGhpcy5jb21wYXJhdG9yID0gKG9wdGlvbnMgIT0gbnVsbCA/IG9wdGlvbnMuY29tcGFyYXRvciA6IHZvaWQgMCkgfHwgZnVuY3Rpb24oYSwgYikge1xuICAgICAgcmV0dXJuIGEgLSBiO1xuICAgIH07XG4gICAgdGhpcy5wYWdlU2l6ZSA9IChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLnBhZ2VTaXplIDogdm9pZCAwKSB8fCA1MTI7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHNoaWZ0ID0gMDtcbiAgICB3aGlsZSAoKDEgPDwgc2hpZnQpIDwgdGhpcy5wYWdlU2l6ZSkge1xuICAgICAgc2hpZnQgKz0gMTtcbiAgICB9XG4gICAgaWYgKDEgPDwgc2hpZnQgIT09IHRoaXMucGFnZVNpemUpIHtcbiAgICAgIHRocm93ICdwYWdlU2l6ZSBtdXN0IGJlIGEgcG93ZXIgb2YgdHdvJztcbiAgICB9XG4gICAgdGhpcy5fc2hpZnQgPSBzaGlmdDtcbiAgICB0aGlzLl9lbXB0eU1lbW9yeVBhZ2VUZW1wbGF0ZSA9IGFyciA9IFtdO1xuICAgIGZvciAoaSA9IGogPSAwLCByZWYgPSB0aGlzLnBhZ2VTaXplOyAwIDw9IHJlZiA/IGogPCByZWYgOiBqID4gcmVmOyBpID0gMCA8PSByZWYgPyArK2ogOiAtLWopIHtcbiAgICAgIGFyci5wdXNoKG51bGwpO1xuICAgIH1cbiAgICB0aGlzLl9tZW1vcnkgPSBbXTtcbiAgICB0aGlzLl9tYXNrID0gdGhpcy5wYWdlU2l6ZSAtIDE7XG4gICAgaWYgKG9wdGlvbnMuaW5pdGlhbFZhbHVlcykge1xuICAgICAgcmVmMSA9IG9wdGlvbnMuaW5pdGlhbFZhbHVlcztcbiAgICAgIGZvciAoayA9IDAsIGxlbiA9IHJlZjEubGVuZ3RoOyBrIDwgbGVuOyBrKyspIHtcbiAgICAgICAgdmFsdWUgPSByZWYxW2tdO1xuICAgICAgICB0aGlzLnF1ZXVlKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBCSGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5xdWV1ZSA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdGhpcy5sZW5ndGggKz0gMTtcbiAgICB0aGlzLl93cml0ZSh0aGlzLmxlbmd0aCwgdmFsdWUpO1xuICAgIHRoaXMuX2J1YmJsZVVwKHRoaXMubGVuZ3RoLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICBCSGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5kZXF1ZXVlID0gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHJldCwgdmFsO1xuICAgIHJldCA9IHRoaXMuX3JlYWQoMSk7XG4gICAgdmFsID0gdGhpcy5fcmVhZCh0aGlzLmxlbmd0aCk7XG4gICAgdGhpcy5sZW5ndGggLT0gMTtcbiAgICBpZiAodGhpcy5sZW5ndGggPiAwKSB7XG4gICAgICB0aGlzLl93cml0ZSgxLCB2YWwpO1xuICAgICAgdGhpcy5fYnViYmxlRG93bigxLCB2YWwpO1xuICAgIH1cbiAgICByZXR1cm4gcmV0O1xuICB9O1xuXG4gIEJIZWFwU3RyYXRlZ3kucHJvdG90eXBlLnBlZWsgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZCgxKTtcbiAgfTtcblxuICBCSGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLl9tZW1vcnkubGVuZ3RoID0gMDtcbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuXG4gIEJIZWFwU3RyYXRlZ3kucHJvdG90eXBlLl93cml0ZSA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciBwYWdlO1xuICAgIHBhZ2UgPSBpbmRleCA+PiB0aGlzLl9zaGlmdDtcbiAgICB3aGlsZSAocGFnZSA+PSB0aGlzLl9tZW1vcnkubGVuZ3RoKSB7XG4gICAgICB0aGlzLl9tZW1vcnkucHVzaCh0aGlzLl9lbXB0eU1lbW9yeVBhZ2VUZW1wbGF0ZS5zbGljZSgwKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLl9tZW1vcnlbcGFnZV1baW5kZXggJiB0aGlzLl9tYXNrXSA9IHZhbHVlO1xuICB9O1xuXG4gIEJIZWFwU3RyYXRlZ3kucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24oaW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWVtb3J5W2luZGV4ID4+IHRoaXMuX3NoaWZ0XVtpbmRleCAmIHRoaXMuX21hc2tdO1xuICB9O1xuXG4gIEJIZWFwU3RyYXRlZ3kucHJvdG90eXBlLl9idWJibGVVcCA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciBjb21wYXJlLCBpbmRleEluUGFnZSwgcGFyZW50SW5kZXgsIHBhcmVudFZhbHVlO1xuICAgIGNvbXBhcmUgPSB0aGlzLmNvbXBhcmF0b3I7XG4gICAgd2hpbGUgKGluZGV4ID4gMSkge1xuICAgICAgaW5kZXhJblBhZ2UgPSBpbmRleCAmIHRoaXMuX21hc2s7XG4gICAgICBpZiAoaW5kZXggPCB0aGlzLnBhZ2VTaXplIHx8IGluZGV4SW5QYWdlID4gMykge1xuICAgICAgICBwYXJlbnRJbmRleCA9IChpbmRleCAmIH50aGlzLl9tYXNrKSB8IChpbmRleEluUGFnZSA+PiAxKTtcbiAgICAgIH0gZWxzZSBpZiAoaW5kZXhJblBhZ2UgPCAyKSB7XG4gICAgICAgIHBhcmVudEluZGV4ID0gKGluZGV4IC0gdGhpcy5wYWdlU2l6ZSkgPj4gdGhpcy5fc2hpZnQ7XG4gICAgICAgIHBhcmVudEluZGV4ICs9IHBhcmVudEluZGV4ICYgfih0aGlzLl9tYXNrID4+IDEpO1xuICAgICAgICBwYXJlbnRJbmRleCB8PSB0aGlzLnBhZ2VTaXplID4+IDE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJlbnRJbmRleCA9IGluZGV4IC0gMjtcbiAgICAgIH1cbiAgICAgIHBhcmVudFZhbHVlID0gdGhpcy5fcmVhZChwYXJlbnRJbmRleCk7XG4gICAgICBpZiAoY29tcGFyZShwYXJlbnRWYWx1ZSwgdmFsdWUpIDwgMCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHRoaXMuX3dyaXRlKHBhcmVudEluZGV4LCB2YWx1ZSk7XG4gICAgICB0aGlzLl93cml0ZShpbmRleCwgcGFyZW50VmFsdWUpO1xuICAgICAgaW5kZXggPSBwYXJlbnRJbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICBCSGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5fYnViYmxlRG93biA9IGZ1bmN0aW9uKGluZGV4LCB2YWx1ZSkge1xuICAgIHZhciBjaGlsZEluZGV4MSwgY2hpbGRJbmRleDIsIGNoaWxkVmFsdWUxLCBjaGlsZFZhbHVlMiwgY29tcGFyZTtcbiAgICBjb21wYXJlID0gdGhpcy5jb21wYXJhdG9yO1xuICAgIHdoaWxlIChpbmRleCA8IHRoaXMubGVuZ3RoKSB7XG4gICAgICBpZiAoaW5kZXggPiB0aGlzLl9tYXNrICYmICEoaW5kZXggJiAodGhpcy5fbWFzayAtIDEpKSkge1xuICAgICAgICBjaGlsZEluZGV4MSA9IGNoaWxkSW5kZXgyID0gaW5kZXggKyAyO1xuICAgICAgfSBlbHNlIGlmIChpbmRleCAmICh0aGlzLnBhZ2VTaXplID4+IDEpKSB7XG4gICAgICAgIGNoaWxkSW5kZXgxID0gKGluZGV4ICYgfnRoaXMuX21hc2spID4+IDE7XG4gICAgICAgIGNoaWxkSW5kZXgxIHw9IGluZGV4ICYgKHRoaXMuX21hc2sgPj4gMSk7XG4gICAgICAgIGNoaWxkSW5kZXgxID0gKGNoaWxkSW5kZXgxICsgMSkgPDwgdGhpcy5fc2hpZnQ7XG4gICAgICAgIGNoaWxkSW5kZXgyID0gY2hpbGRJbmRleDEgKyAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2hpbGRJbmRleDEgPSBpbmRleCArIChpbmRleCAmIHRoaXMuX21hc2spO1xuICAgICAgICBjaGlsZEluZGV4MiA9IGNoaWxkSW5kZXgxICsgMTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZEluZGV4MSAhPT0gY2hpbGRJbmRleDIgJiYgY2hpbGRJbmRleDIgPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgY2hpbGRWYWx1ZTEgPSB0aGlzLl9yZWFkKGNoaWxkSW5kZXgxKTtcbiAgICAgICAgY2hpbGRWYWx1ZTIgPSB0aGlzLl9yZWFkKGNoaWxkSW5kZXgyKTtcbiAgICAgICAgaWYgKGNvbXBhcmUoY2hpbGRWYWx1ZTEsIHZhbHVlKSA8IDAgJiYgY29tcGFyZShjaGlsZFZhbHVlMSwgY2hpbGRWYWx1ZTIpIDw9IDApIHtcbiAgICAgICAgICB0aGlzLl93cml0ZShjaGlsZEluZGV4MSwgdmFsdWUpO1xuICAgICAgICAgIHRoaXMuX3dyaXRlKGluZGV4LCBjaGlsZFZhbHVlMSk7XG4gICAgICAgICAgaW5kZXggPSBjaGlsZEluZGV4MTtcbiAgICAgICAgfSBlbHNlIGlmIChjb21wYXJlKGNoaWxkVmFsdWUyLCB2YWx1ZSkgPCAwKSB7XG4gICAgICAgICAgdGhpcy5fd3JpdGUoY2hpbGRJbmRleDIsIHZhbHVlKTtcbiAgICAgICAgICB0aGlzLl93cml0ZShpbmRleCwgY2hpbGRWYWx1ZTIpO1xuICAgICAgICAgIGluZGV4ID0gY2hpbGRJbmRleDI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoY2hpbGRJbmRleDEgPD0gdGhpcy5sZW5ndGgpIHtcbiAgICAgICAgY2hpbGRWYWx1ZTEgPSB0aGlzLl9yZWFkKGNoaWxkSW5kZXgxKTtcbiAgICAgICAgaWYgKGNvbXBhcmUoY2hpbGRWYWx1ZTEsIHZhbHVlKSA8IDApIHtcbiAgICAgICAgICB0aGlzLl93cml0ZShjaGlsZEluZGV4MSwgdmFsdWUpO1xuICAgICAgICAgIHRoaXMuX3dyaXRlKGluZGV4LCBjaGlsZFZhbHVlMSk7XG4gICAgICAgICAgaW5kZXggPSBjaGlsZEluZGV4MTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG5cbiAgcmV0dXJuIEJIZWFwU3RyYXRlZ3k7XG5cbn0pKCk7XG5cblxufSx7fV0sNTpbZnVuY3Rpb24oX2RlcmVxXyxtb2R1bGUsZXhwb3J0cyl7XG52YXIgQmluYXJ5SGVhcFN0cmF0ZWd5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IEJpbmFyeUhlYXBTdHJhdGVneSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gQmluYXJ5SGVhcFN0cmF0ZWd5KG9wdGlvbnMpIHtcbiAgICB2YXIgcmVmO1xuICAgIHRoaXMuY29tcGFyYXRvciA9IChvcHRpb25zICE9IG51bGwgPyBvcHRpb25zLmNvbXBhcmF0b3IgOiB2b2lkIDApIHx8IGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIHJldHVybiBhIC0gYjtcbiAgICB9O1xuICAgIHRoaXMubGVuZ3RoID0gMDtcbiAgICB0aGlzLmRhdGEgPSAoKHJlZiA9IG9wdGlvbnMuaW5pdGlhbFZhbHVlcykgIT0gbnVsbCA/IHJlZi5zbGljZSgwKSA6IHZvaWQgMCkgfHwgW107XG4gICAgdGhpcy5faGVhcGlmeSgpO1xuICB9XG5cbiAgQmluYXJ5SGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5faGVhcGlmeSA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBpLCBqLCByZWY7XG4gICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggPiAwKSB7XG4gICAgICBmb3IgKGkgPSBqID0gMSwgcmVmID0gdGhpcy5kYXRhLmxlbmd0aDsgMSA8PSByZWYgPyBqIDwgcmVmIDogaiA+IHJlZjsgaSA9IDEgPD0gcmVmID8gKytqIDogLS1qKSB7XG4gICAgICAgIHRoaXMuX2J1YmJsZVVwKGkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm9pZCAwO1xuICB9O1xuXG4gIEJpbmFyeUhlYXBTdHJhdGVneS5wcm90b3R5cGUucXVldWUgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuZGF0YS5wdXNoKHZhbHVlKTtcbiAgICB0aGlzLl9idWJibGVVcCh0aGlzLmRhdGEubGVuZ3RoIC0gMSk7XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICBCaW5hcnlIZWFwU3RyYXRlZ3kucHJvdG90eXBlLmRlcXVldWUgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgbGFzdCwgcmV0O1xuICAgIHJldCA9IHRoaXMuZGF0YVswXTtcbiAgICBsYXN0ID0gdGhpcy5kYXRhLnBvcCgpO1xuICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoID4gMCkge1xuICAgICAgdGhpcy5kYXRhWzBdID0gbGFzdDtcbiAgICAgIHRoaXMuX2J1YmJsZURvd24oMCk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgQmluYXJ5SGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5wZWVrID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVswXTtcbiAgfTtcblxuICBCaW5hcnlIZWFwU3RyYXRlZ3kucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7XG4gICAgdGhpcy5sZW5ndGggPSAwO1xuICAgIHRoaXMuZGF0YS5sZW5ndGggPSAwO1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH07XG5cbiAgQmluYXJ5SGVhcFN0cmF0ZWd5LnByb3RvdHlwZS5fYnViYmxlVXAgPSBmdW5jdGlvbihwb3MpIHtcbiAgICB2YXIgcGFyZW50LCB4O1xuICAgIHdoaWxlIChwb3MgPiAwKSB7XG4gICAgICBwYXJlbnQgPSAocG9zIC0gMSkgPj4+IDE7XG4gICAgICBpZiAodGhpcy5jb21wYXJhdG9yKHRoaXMuZGF0YVtwb3NdLCB0aGlzLmRhdGFbcGFyZW50XSkgPCAwKSB7XG4gICAgICAgIHggPSB0aGlzLmRhdGFbcGFyZW50XTtcbiAgICAgICAgdGhpcy5kYXRhW3BhcmVudF0gPSB0aGlzLmRhdGFbcG9zXTtcbiAgICAgICAgdGhpcy5kYXRhW3Bvc10gPSB4O1xuICAgICAgICBwb3MgPSBwYXJlbnQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICBCaW5hcnlIZWFwU3RyYXRlZ3kucHJvdG90eXBlLl9idWJibGVEb3duID0gZnVuY3Rpb24ocG9zKSB7XG4gICAgdmFyIGxhc3QsIGxlZnQsIG1pbkluZGV4LCByaWdodCwgeDtcbiAgICBsYXN0ID0gdGhpcy5kYXRhLmxlbmd0aCAtIDE7XG4gICAgd2hpbGUgKHRydWUpIHtcbiAgICAgIGxlZnQgPSAocG9zIDw8IDEpICsgMTtcbiAgICAgIHJpZ2h0ID0gbGVmdCArIDE7XG4gICAgICBtaW5JbmRleCA9IHBvcztcbiAgICAgIGlmIChsZWZ0IDw9IGxhc3QgJiYgdGhpcy5jb21wYXJhdG9yKHRoaXMuZGF0YVtsZWZ0XSwgdGhpcy5kYXRhW21pbkluZGV4XSkgPCAwKSB7XG4gICAgICAgIG1pbkluZGV4ID0gbGVmdDtcbiAgICAgIH1cbiAgICAgIGlmIChyaWdodCA8PSBsYXN0ICYmIHRoaXMuY29tcGFyYXRvcih0aGlzLmRhdGFbcmlnaHRdLCB0aGlzLmRhdGFbbWluSW5kZXhdKSA8IDApIHtcbiAgICAgICAgbWluSW5kZXggPSByaWdodDtcbiAgICAgIH1cbiAgICAgIGlmIChtaW5JbmRleCAhPT0gcG9zKSB7XG4gICAgICAgIHggPSB0aGlzLmRhdGFbbWluSW5kZXhdO1xuICAgICAgICB0aGlzLmRhdGFbbWluSW5kZXhdID0gdGhpcy5kYXRhW3Bvc107XG4gICAgICAgIHRoaXMuZGF0YVtwb3NdID0geDtcbiAgICAgICAgcG9zID0gbWluSW5kZXg7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZvaWQgMDtcbiAgfTtcblxuICByZXR1cm4gQmluYXJ5SGVhcFN0cmF0ZWd5O1xuXG59KSgpO1xuXG5cbn0se31dfSx7fSxbMV0pKDEpXG59KTsiLCIvKlxuVGhlIE1JVCBMaWNlbnNlIChNSVQpXG5Db3B5cmlnaHQgwqkgMjAwNi0yMDA3IEtldmluIEMuIE9sYnJpY2hcbkNvcHlyaWdodCDCqSAyMDEwLTIwMTYgTElNIFNBUyAoaHR0cDovL2xpbS5ldSkgLSBKdWxpZW4gU2FuY2hlelxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5IG9mXG50aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluXG50aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvXG51c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllc1xub2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvXG5zbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbFxuY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG5GSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbkFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbkxJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG5PVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRVxuU09GVFdBUkUuXG4qL1xuKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICB0eXBlb2YgZGVmaW5lID09PSAnZnVuY3Rpb24nICYmIGRlZmluZS5hbWQgPyBkZWZpbmUoZmFjdG9yeSkgOlxuICAoZ2xvYmFsID0gdHlwZW9mIGdsb2JhbFRoaXMgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsVGhpcyA6IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuUXR5ID0gZmFjdG9yeSgpKTtcbn0odGhpcywgKGZ1bmN0aW9uICgpIHsgJ3VzZSBzdHJpY3QnO1xuXG4gIC8qKlxuICAgKiBUZXN0cyBpZiBhIHZhbHVlIGlzIGEgc3RyaW5nXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byB0ZXN0XG4gICAqXG4gICAqIEByZXR1cm5zIHtib29sZWFufSB0cnVlIGlmIHZhbHVlIGlzIGEgc3RyaW5nLCBmYWxzZSBvdGhlcndpc2VcbiAgICovXG4gIGZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiB8fCB2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZztcbiAgfVxuXG4gIC8qXG4gICAqIFByZWZlciBzdHJpY3RlciBOdW1iZXIuaXNGaW5pdGUgaWYgY3VycmVudGx5IHN1cHBvcnRlZC5cbiAgICogVG8gYmUgZHJvcHBlZCB3aGVuIEVTNiBpcyBmaW5hbGl6ZWQuIE9ic29sZXRlIGJyb3dzZXJzIHdpbGxcbiAgICogaGF2ZSB0byB1c2UgRVM2IHBvbHlmaWxscy5cbiAgICovXG4gIHZhciBpc0Zpbml0ZUltcGwgPSBOdW1iZXIuaXNGaW5pdGUgfHwgd2luZG93LmlzRmluaXRlO1xuICAvKipcbiAgICogVGVzdHMgaWYgYSB2YWx1ZSBpcyBhIG51bWJlclxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gdGVzdFxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gdHJ1ZSBpZiB2YWx1ZSBpcyBhIG51bWJlciwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBmdW5jdGlvbiBpc051bWJlcih2YWx1ZSkge1xuICAgIC8vIE51bWJlci5pc0Zpbml0ZSBhbGxvd3Mgbm90IHRvIGNvbnNpZGVyIE5hTiBvciAnMScgYXMgbnVtYmVyc1xuICAgIHJldHVybiBpc0Zpbml0ZUltcGwodmFsdWUpO1xuICB9XG5cbiAgLypcbiAgICogSWRlbnRpdHkgZnVuY3Rpb25cbiAgICovXG4gIGZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgdW5pcXVlIHN0cmluZ3MgZnJvbSBsaXN0XG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nW119IHN0cmluZ3MgLSBhcnJheSBvZiBzdHJpbmdzXG4gICAqXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gYSBuZXcgYXJyYXkgb2Ygc3RyaW5ncyB3aXRob3V0IGR1cGxpY2F0ZXNcbiAgICovXG4gIGZ1bmN0aW9uIHVuaXEoc3RyaW5ncykge1xuICAgIHZhciBzZWVuID0ge307XG4gICAgcmV0dXJuIHN0cmluZ3MuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBzZWVuLmhhc093blByb3BlcnR5KGl0ZW0pID8gZmFsc2UgOiAoc2VlbltpdGVtXSA9IHRydWUpO1xuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gY29tcGFyZUFycmF5KGFycmF5MSwgYXJyYXkyKSB7XG4gICAgaWYgKGFycmF5Mi5sZW5ndGggIT09IGFycmF5MS5sZW5ndGgpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcnJheTEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhcnJheTJbaV0uY29tcGFyZUFycmF5KSB7XG4gICAgICAgIGlmICghYXJyYXkyW2ldLmNvbXBhcmVBcnJheShhcnJheTFbaV0pKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoYXJyYXkyW2ldICE9PSBhcnJheTFbaV0pIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFzc2lnbih0YXJnZXQsIHByb3BlcnRpZXMpIHtcbiAgICBPYmplY3Qua2V5cyhwcm9wZXJ0aWVzKS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuICAgICAgdGFyZ2V0W2tleV0gPSBwcm9wZXJ0aWVzW2tleV07XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU2FmZWx5IG11bHRpcGxpZXMgbnVtYmVycyB3aGlsZSBhdm9pZGluZyBmbG9hdGluZyBlcnJvcnNcbiAgICogbGlrZSAwLjEgKiAwLjEgPT4gMC4wMTAwMDAwMDAwMDAwMDAwMDJcbiAgICpcbiAgICogQHBhcmFtIHsuLi5udW1iZXJ9IG51bWJlcnMgLSBudW1iZXJzIHRvIG11bHRpcGx5XG4gICAqXG4gICAqIEByZXR1cm5zIHtudW1iZXJ9IHJlc3VsdFxuICAgKi9cbiAgZnVuY3Rpb24gbXVsU2FmZSgpIHtcbiAgICB2YXIgcmVzdWx0ID0gMSwgZGVjaW1hbHMgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgZGVjaW1hbHMgPSBkZWNpbWFscyArIGdldEZyYWN0aW9uYWwoYXJnKTtcbiAgICAgIHJlc3VsdCAqPSBhcmc7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlY2ltYWxzICE9PSAwID8gcm91bmQocmVzdWx0LCBkZWNpbWFscykgOiByZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogU2FmZWx5IGRpdmlkZXMgdHdvIG51bWJlcnMgd2hpbGUgYXZvaWRpbmcgZmxvYXRpbmcgZXJyb3JzXG4gICAqIGxpa2UgMC4zIC8gMC4wNSA9PiA1Ljk5OTk5OTk5OTk5OTk5OVxuICAgKlxuICAgKiBAcmV0dXJucyB7bnVtYmVyfSByZXN1bHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IG51bSBOdW1lcmF0b3JcbiAgICogQHBhcmFtIHtudW1iZXJ9IGRlbiBEZW5vbWluYXRvclxuICAgKi9cbiAgZnVuY3Rpb24gZGl2U2FmZShudW0sIGRlbikge1xuICAgIGlmIChkZW4gPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpdmlkZSBieSB6ZXJvXCIpO1xuICAgIH1cblxuICAgIHZhciBmYWN0b3IgPSBNYXRoLnBvdygxMCwgZ2V0RnJhY3Rpb25hbChkZW4pKTtcbiAgICB2YXIgaW52RGVuID0gZmFjdG9yIC8gKGZhY3RvciAqIGRlbik7XG5cbiAgICByZXR1cm4gbXVsU2FmZShudW0sIGludkRlbik7XG4gIH1cblxuICAvKipcbiAgICogUm91bmRzIHZhbHVlIGF0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIGRlY2ltYWxzXG4gICAqXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWwgLSB2YWx1ZSB0byByb3VuZFxuICAgKiBAcGFyYW0ge251bWJlcn0gZGVjaW1hbHMgLSBudW1iZXIgb2YgZGVjaW1hbHNcbiAgICpcbiAgICogQHJldHVybnMge251bWJlcn0gcm91bmRlZCBudW1iZXJcbiAgICovXG4gIGZ1bmN0aW9uIHJvdW5kKHZhbCwgZGVjaW1hbHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZCh2YWwgKiBNYXRoLnBvdygxMCwgZGVjaW1hbHMpKSAvIE1hdGgucG93KDEwLCBkZWNpbWFscyk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGcmFjdGlvbmFsKG51bSkge1xuICAgIC8vIENoZWNrIGZvciBOYU5zIG9yIEluZmluaXRpZXNcbiAgICBpZiAoIWlzRmluaXRlKG51bSkpIHtcbiAgICAgIHJldHVybiAwO1xuICAgIH1cblxuICAgIC8vIEZhc3RlciB0aGFuIHBhcnNpbmcgc3RyaW5nc1xuICAgIC8vIGh0dHA6Ly9qc3BlcmYuY29tL2NvdW50LWRlY2ltYWxzLzJcbiAgICB2YXIgY291bnQgPSAwO1xuICAgIHdoaWxlIChudW0gJSAxICE9PSAwKSB7XG4gICAgICBudW0gKj0gMTA7XG4gICAgICBjb3VudCsrO1xuICAgIH1cbiAgICByZXR1cm4gY291bnQ7XG4gIH1cblxuICAvKipcbiAgICogQ3VzdG9tIGVycm9yIHR5cGUgZGVmaW5pdGlvblxuICAgKiBAY29uc3RydWN0b3JcbiAgICovXG4gIGZ1bmN0aW9uIFF0eUVycm9yKCkge1xuICAgIHZhciBlcnI7XG4gICAgaWYgKCF0aGlzKSB7IC8vIEFsbG93cyB0byBpbnN0YW50aWF0ZSBRdHlFcnJvciB3aXRob3V0IG5ldygpXG4gICAgICBlcnIgPSBPYmplY3QuY3JlYXRlKFF0eUVycm9yLnByb3RvdHlwZSk7XG4gICAgICBRdHlFcnJvci5hcHBseShlcnIsIGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gZXJyO1xuICAgIH1cbiAgICBlcnIgPSBFcnJvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIHRoaXMubmFtZSA9IFwiUXR5RXJyb3JcIjtcbiAgICB0aGlzLm1lc3NhZ2UgPSBlcnIubWVzc2FnZTtcbiAgICB0aGlzLnN0YWNrID0gZXJyLnN0YWNrO1xuICB9XG4gIFF0eUVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlLCB7Y29uc3RydWN0b3I6IHsgdmFsdWU6IFF0eUVycm9yIH19KTtcblxuICAvKlxuICAgKiBUaHJvd3MgaW5jb21wYXRpYmxlIHVuaXRzIGVycm9yXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBsZWZ0IC0gdW5pdHNcbiAgICogQHBhcmFtIHtzdHJpbmd9IHJpZ2h0IC0gdW5pdHMgaW5jb21wYXRpYmxlIHdpdGggZmlyc3QgYXJndW1lbnRcbiAgICogQHRocm93cyBcIkluY29tcGF0aWJsZSB1bml0c1wiIGVycm9yXG4gICAqL1xuICBmdW5jdGlvbiB0aHJvd0luY29tcGF0aWJsZVVuaXRzKGxlZnQsIHJpZ2h0KSB7XG4gICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiSW5jb21wYXRpYmxlIHVuaXRzOiBcIiArIGxlZnQgKyBcIiBhbmQgXCIgKyByaWdodCk7XG4gIH1cblxuICB2YXIgVU5JVFMgPSB7XG4gICAgLyogcHJlZml4ZXMgKi9cbiAgICBcIjxnb29nb2w+XCIgOiBbW1wiZ29vZ29sXCJdLCAxZTEwMCwgXCJwcmVmaXhcIl0sXG4gICAgXCI8a2liaT5cIiAgOiAgW1tcIktpXCIsXCJLaWJpXCIsXCJraWJpXCJdLCBNYXRoLnBvdygyLDEwKSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8bWViaT5cIiAgOiAgW1tcIk1pXCIsXCJNZWJpXCIsXCJtZWJpXCJdLCBNYXRoLnBvdygyLDIwKSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8Z2liaT5cIiAgOiAgW1tcIkdpXCIsXCJHaWJpXCIsXCJnaWJpXCJdLCBNYXRoLnBvdygyLDMwKSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8dGViaT5cIiAgOiAgW1tcIlRpXCIsXCJUZWJpXCIsXCJ0ZWJpXCJdLCBNYXRoLnBvdygyLDQwKSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8cGViaT5cIiAgOiAgW1tcIlBpXCIsXCJQZWJpXCIsXCJwZWJpXCJdLCBNYXRoLnBvdygyLDUwKSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8ZXhpPlwiICAgOiAgW1tcIkVpXCIsXCJFeGlcIixcImV4aVwiXSwgTWF0aC5wb3coMiw2MCksIFwicHJlZml4XCJdLFxuICAgIFwiPHplYmk+XCIgIDogIFtbXCJaaVwiLFwiWmViaVwiLFwiemViaVwiXSwgTWF0aC5wb3coMiw3MCksIFwicHJlZml4XCJdLFxuICAgIFwiPHllYmk+XCIgIDogIFtbXCJZaVwiLFwiWWViaVwiLFwieWViaVwiXSwgTWF0aC5wb3coMiw4MCksIFwicHJlZml4XCJdLFxuICAgIFwiPHlvdHRhPlwiIDogIFtbXCJZXCIsXCJZb3R0YVwiLFwieW90dGFcIl0sIDFlMjQsIFwicHJlZml4XCJdLFxuICAgIFwiPHpldHRhPlwiIDogIFtbXCJaXCIsXCJaZXR0YVwiLFwiemV0dGFcIl0sIDFlMjEsIFwicHJlZml4XCJdLFxuICAgIFwiPGV4YT5cIiAgIDogIFtbXCJFXCIsXCJFeGFcIixcImV4YVwiXSwgMWUxOCwgXCJwcmVmaXhcIl0sXG4gICAgXCI8cGV0YT5cIiAgOiAgW1tcIlBcIixcIlBldGFcIixcInBldGFcIl0sIDFlMTUsIFwicHJlZml4XCJdLFxuICAgIFwiPHRlcmE+XCIgIDogIFtbXCJUXCIsXCJUZXJhXCIsXCJ0ZXJhXCJdLCAxZTEyLCBcInByZWZpeFwiXSxcbiAgICBcIjxnaWdhPlwiICA6ICBbW1wiR1wiLFwiR2lnYVwiLFwiZ2lnYVwiXSwgMWU5LCBcInByZWZpeFwiXSxcbiAgICBcIjxtZWdhPlwiICA6ICBbW1wiTVwiLFwiTWVnYVwiLFwibWVnYVwiXSwgMWU2LCBcInByZWZpeFwiXSxcbiAgICBcIjxraWxvPlwiICA6ICBbW1wia1wiLFwia2lsb1wiXSwgMWUzLCBcInByZWZpeFwiXSxcbiAgICBcIjxoZWN0bz5cIiA6ICBbW1wiaFwiLFwiSGVjdG9cIixcImhlY3RvXCJdLCAxZTIsIFwicHJlZml4XCJdLFxuICAgIFwiPGRlY2E+XCIgIDogIFtbXCJkYVwiLFwiRGVjYVwiLFwiZGVjYVwiLFwiZGVrYVwiXSwgMWUxLCBcInByZWZpeFwiXSxcbiAgICBcIjxkZWNpPlwiICA6ICBbW1wiZFwiLFwiRGVjaVwiLFwiZGVjaVwiXSwgMWUtMSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8Y2VudGk+XCIgIDogW1tcImNcIixcIkNlbnRpXCIsXCJjZW50aVwiXSwgMWUtMiwgXCJwcmVmaXhcIl0sXG4gICAgXCI8bWlsbGk+XCIgOiAgW1tcIm1cIixcIk1pbGxpXCIsXCJtaWxsaVwiXSwgMWUtMywgXCJwcmVmaXhcIl0sXG4gICAgXCI8bWljcm8+XCIgIDogW1xuICAgICAgW1widVwiLFwiXFx1MDNCQ1wiLyrCtSBhcyBncmVlayBsZXR0ZXIqLyxcIlxcdTAwQjVcIi8qwrUgYXMgbWljcm8gc2lnbiovLFwiTWljcm9cIixcIm1jXCIsXCJtaWNyb1wiXSxcbiAgICAgIDFlLTYsXG4gICAgICBcInByZWZpeFwiXG4gICAgXSxcbiAgICBcIjxuYW5vPlwiICA6ICBbW1wiblwiLFwiTmFub1wiLFwibmFub1wiXSwgMWUtOSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8cGljbz5cIiAgOiAgW1tcInBcIixcIlBpY29cIixcInBpY29cIl0sIDFlLTEyLCBcInByZWZpeFwiXSxcbiAgICBcIjxmZW10bz5cIiA6ICBbW1wiZlwiLFwiRmVtdG9cIixcImZlbXRvXCJdLCAxZS0xNSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8YXR0bz5cIiAgOiAgW1tcImFcIixcIkF0dG9cIixcImF0dG9cIl0sIDFlLTE4LCBcInByZWZpeFwiXSxcbiAgICBcIjx6ZXB0bz5cIiA6ICBbW1wielwiLFwiWmVwdG9cIixcInplcHRvXCJdLCAxZS0yMSwgXCJwcmVmaXhcIl0sXG4gICAgXCI8eW9jdG8+XCIgOiAgW1tcInlcIixcIllvY3RvXCIsXCJ5b2N0b1wiXSwgMWUtMjQsIFwicHJlZml4XCJdLFxuXG4gICAgXCI8MT5cIiAgICAgOiAgW1tcIjFcIiwgXCI8MT5cIl0sIDEsIFwiXCJdLFxuICAgIC8qIGxlbmd0aCB1bml0cyAqL1xuICAgIFwiPG1ldGVyPlwiIDogIFtbXCJtXCIsXCJtZXRlclwiLFwibWV0ZXJzXCIsXCJtZXRyZVwiLFwibWV0cmVzXCJdLCAxLjAsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl0gXSxcbiAgICBcIjxpbmNoPlwiICA6ICBbW1wiaW5cIixcImluY2hcIixcImluY2hlc1wiLFwiXFxcIlwiXSwgMC4wMjU0LCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxmb290PlwiICA6ICBbW1wiZnRcIixcImZvb3RcIixcImZlZXRcIixcIidcIl0sIDAuMzA0OCwgXCJsZW5ndGhcIiwgW1wiPG1ldGVyPlwiXV0sXG4gICAgXCI8eWFyZD5cIiAgOiAgW1tcInlkXCIsXCJ5YXJkXCIsXCJ5YXJkc1wiXSwgMC45MTQ0LCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxtaWxlPlwiICA6ICBbW1wibWlcIixcIm1pbGVcIixcIm1pbGVzXCJdLCAxNjA5LjM0NCwgXCJsZW5ndGhcIiwgW1wiPG1ldGVyPlwiXV0sXG4gICAgXCI8bmF1dC1taWxlPlwiIDogW1tcIm5taVwiLFwibmF1dC1taWxlXCJdLCAxODUyLCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxsZWFndWU+XCI6ICBbW1wibGVhZ3VlXCIsXCJsZWFndWVzXCJdLCA0ODI4LCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxmdXJsb25nPlwiOiBbW1wiZnVybG9uZ1wiLFwiZnVybG9uZ3NcIl0sIDIwMS4yLCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxyb2Q+XCIgICA6ICBbW1wicmRcIixcInJvZFwiLFwicm9kc1wiXSwgNS4wMjksIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPG1pbD5cIiAgIDogIFtbXCJtaWxcIixcIm1pbHNcIl0sIDAuMDAwMDI1NCwgXCJsZW5ndGhcIiwgW1wiPG1ldGVyPlwiXV0sXG4gICAgXCI8YW5nc3Ryb20+XCIgIDpbW1wiYW5nXCIsXCJhbmdzdHJvbVwiLFwiYW5nc3Ryb21zXCJdLCAxZS0xMCwgXCJsZW5ndGhcIiwgW1wiPG1ldGVyPlwiXV0sXG4gICAgXCI8ZmF0aG9tPlwiIDogW1tcImZhdGhvbVwiLFwiZmF0aG9tc1wiXSwgMS44MjksIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPHBpY2E+XCIgIDogW1tcInBpY2FcIixcInBpY2FzXCJdLCAwLjAwNDIzMzMzMzMzLCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxwb2ludD5cIiA6IFtbXCJwdFwiLFwicG9pbnRcIixcInBvaW50c1wiXSwgMC4wMDAzNTI3Nzc3NzgsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPHJlZHNoaWZ0PlwiIDogW1tcInpcIixcInJlZC1zaGlmdFwiLCBcInJlZHNoaWZ0XCJdLCAxLjMwMjc3M2UyNiwgXCJsZW5ndGhcIiwgW1wiPG1ldGVyPlwiXV0sXG4gICAgXCI8QVU+XCIgICAgOiBbW1wiQVVcIixcImFzdHJvbm9taWNhbC11bml0XCJdLCAxNDk1OTc5MDAwMDAsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGxpZ2h0LXNlY29uZD5cIjpbW1wibHNcIixcImxpZ2h0LXNlY29uZFwiXSwgMjk5NzkyNTAwLCBcImxlbmd0aFwiLCBbXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxsaWdodC1taW51dGU+XCI6W1tcImxtaW5cIixcImxpZ2h0LW1pbnV0ZVwiXSwgMTc5ODc1NTAwMDAsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGxpZ2h0LXllYXI+XCIgOiBbW1wibHlcIixcImxpZ2h0LXllYXJcIl0sIDk0NjA1MjgwMDAwMDAwMDAsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPHBhcnNlYz5cIiAgOiBbW1wicGNcIixcInBhcnNlY1wiLFwicGFyc2Vjc1wiXSwgMzA4NTY3ODAwMDAwMDAwMDAsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGRhdGFtaWxlPlwiICA6ICBbW1wiRE1cIixcImRhdGFtaWxlXCJdLCAxODI4LjgsIFwibGVuZ3RoXCIsIFtcIjxtZXRlcj5cIl1dLFxuXG4gICAgLyogbWFzcyAqL1xuICAgIFwiPGtpbG9ncmFtPlwiIDogW1tcImtnXCIsXCJraWxvZ3JhbVwiLFwia2lsb2dyYW1zXCJdLCAxLjAsIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxBTVU+XCIgOiBbW1widVwiLFwiQU1VXCIsXCJhbXVcIl0sIDEuNjYwNTM4OTIxZS0yNywgXCJtYXNzXCIsIFtcIjxraWxvZ3JhbT5cIl1dLFxuICAgIFwiPGRhbHRvbj5cIiA6IFtbXCJEYVwiLFwiRGFsdG9uXCIsXCJEYWx0b25zXCIsXCJkYWx0b25cIixcImRhbHRvbnNcIl0sIDEuNjYwNTM4OTIxZS0yNywgXCJtYXNzXCIsIFtcIjxraWxvZ3JhbT5cIl1dLFxuICAgIFwiPHNsdWc+XCIgOiBbW1wic2x1Z1wiLFwic2x1Z3NcIl0sIDE0LjU5MzkwMjksIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxzaG9ydC10b24+XCIgOiBbW1widG5cIixcInRvblwiLFwic2hvcnQtdG9uXCJdLCA5MDcuMTg0NzQsIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxtZXRyaWMtdG9uPlwiOltbXCJ0b25uZVwiLFwibWV0cmljLXRvblwiXSwgMTAwMCwgXCJtYXNzXCIsIFtcIjxraWxvZ3JhbT5cIl1dLFxuICAgIFwiPGNhcmF0PlwiIDogW1tcImN0XCIsXCJjYXJhdFwiLFwiY2FyYXRzXCJdLCAwLjAwMDIsIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxwb3VuZD5cIiA6IFtbXCJsYnNcIixcImxiXCIsXCJwb3VuZFwiLFwicG91bmRzXCIsXCIjXCJdLCAwLjQ1MzU5MjM3LCBcIm1hc3NcIiwgW1wiPGtpbG9ncmFtPlwiXV0sXG4gICAgXCI8b3VuY2U+XCIgOiBbW1wib3pcIixcIm91bmNlXCIsXCJvdW5jZXNcIl0sIDAuMDI4MzQ5NTIzMSwgXCJtYXNzXCIsIFtcIjxraWxvZ3JhbT5cIl1dLFxuICAgIFwiPGdyYW0+XCIgICAgOiAgW1tcImdcIixcImdyYW1cIixcImdyYW1zXCIsXCJncmFtbWVcIixcImdyYW1tZXNcIl0sIDFlLTMsIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxncmFpbj5cIiA6IFtbXCJncmFpblwiLFwiZ3JhaW5zXCIsXCJnclwiXSwgNi40Nzk4OTFlLTUsIFwibWFzc1wiLCBbXCI8a2lsb2dyYW0+XCJdXSxcbiAgICBcIjxkcmFtPlwiICA6IFtbXCJkcmFtXCIsXCJkcmFtc1wiLFwiZHJcIl0sIDAuMDAxNzcxODQ1MiwgXCJtYXNzXCIsW1wiPGtpbG9ncmFtPlwiXV0sXG4gICAgXCI8c3RvbmU+XCIgOiBbW1wic3RvbmVcIixcInN0b25lc1wiLFwic3RcIl0sNi4zNTAyOTMxOCwgXCJtYXNzXCIsW1wiPGtpbG9ncmFtPlwiXV0sXG5cbiAgICAvKiBhcmVhICovXG4gICAgXCI8aGVjdGFyZT5cIjpbW1wiaGVjdGFyZVwiXSwgMTAwMDAsIFwiYXJlYVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxhY3JlPlwiOltbXCJhY3JlXCIsXCJhY3Jlc1wiXSwgNDA0Ni44NTY0MiwgXCJhcmVhXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuICAgIFwiPHNxZnQ+XCI6W1tcInNxZnRcIl0sIDEsIFwiYXJlYVwiLCBbXCI8Zm9vdD5cIixcIjxmb290PlwiXV0sXG5cbiAgICAvKiB2b2x1bWUgKi9cbiAgICBcIjxsaXRlcj5cIiA6IFtbXCJsXCIsXCJMXCIsXCJsaXRlclwiLFwibGl0ZXJzXCIsXCJsaXRyZVwiLFwibGl0cmVzXCJdLCAwLjAwMSwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8Z2FsbG9uPlwiOiAgW1tcImdhbFwiLFwiZ2FsbG9uXCIsXCJnYWxsb25zXCJdLCAwLjAwMzc4NTQxMTgsIFwidm9sdW1lXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGdhbGxvbi1pbXA+XCI6ICBbW1wiZ2FsaW1wXCIsXCJnYWxsb24taW1wXCIsXCJnYWxsb25zLWltcFwiXSwgMC4wMDQ1NDYwOTAwLCBcInZvbHVtZVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxxdWFydD5cIjogIFtbXCJxdFwiLFwicXVhcnRcIixcInF1YXJ0c1wiXSwgMC4wMDA5NDYzNTI5NSwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8cGludD5cIjogIFtbXCJwdFwiLFwicGludFwiLFwicGludHNcIl0sIDAuMDAwNDczMTc2NDc1LCBcInZvbHVtZVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxwaW50LWltcD5cIjogIFtbXCJwdGltcFwiLFwicGludC1pbXBcIixcInBpbnRzLWltcFwiXSwgNS42ODI2MTI1ZS00LCBcInZvbHVtZVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxjdXA+XCI6ICBbW1wiY3VcIixcImN1cFwiLFwiY3Vwc1wiXSwgMC4wMDAyMzY1ODgyMzgsIFwidm9sdW1lXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGZsdWlkLW91bmNlPlwiOiAgW1tcImZsb3pcIixcImZsdWlkLW91bmNlXCIsXCJmbHVpZC1vdW5jZXNcIl0sIDIuOTU3MzUyOTdlLTUsIFwidm9sdW1lXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuICAgIFwiPGZsdWlkLW91bmNlLWltcD5cIjogIFtbXCJmbG96aW1wXCIsIFwiZmxvei1pbXBcIixcImZsdWlkLW91bmNlLWltcFwiLFwiZmx1aWQtb3VuY2VzLWltcFwiXSwgMi44NDEzMDYyNWUtNSwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8dGFibGVzcG9vbj5cIjogIFtbXCJ0YlwiLFwidGJzcFwiLFwidGJzXCIsXCJ0YWJsZXNwb29uXCIsXCJ0YWJsZXNwb29uc1wiXSwgMS40Nzg2NzY0OGUtNSwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8dGVhc3Bvb24+XCI6ICBbW1widHNwXCIsXCJ0ZWFzcG9vblwiLFwidGVhc3Bvb25zXCJdLCA0LjkyODkyMTYxZS02LCBcInZvbHVtZVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcbiAgICBcIjxidXNoZWw+XCI6ICBbW1wiYnVcIixcImJzaFwiLFwiYnVzaGVsXCIsXCJidXNoZWxzXCJdLCAwLjAzNTIzOTA3MiwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8b2lsYmFycmVsPlwiOiAgW1tcImJibFwiLFwib2lsYmFycmVsXCIsIFwib2lsYmFycmVsc1wiLCBcIm9pbC1iYXJyZWxcIixcIm9pbC1iYXJyZWxzXCJdLCAwLjE1ODk4NzI5NDkyOCwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8YmVlcmJhcnJlbD5cIjogIFtbXCJibFwiLFwiYmwtdXNcIixcImJlZXJiYXJyZWxcIiwgXCJiZWVyYmFycmVsc1wiLCBcImJlZXItYmFycmVsXCIsXCJiZWVyLWJhcnJlbHNcIl0sIDAuMTE3MzQ3NzY1OCwgXCJ2b2x1bWVcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8YmVlcmJhcnJlbC1pbXA+XCI6ICBbW1wiYmxpbXBcIixcImJsLWltcFwiLFwiYmVlcmJhcnJlbC1pbXBcIiwgXCJiZWVyYmFycmVscy1pbXBcIiwgXCJiZWVyLWJhcnJlbC1pbXBcIixcImJlZXItYmFycmVscy1pbXBcIl0sIDAuMTYzNjU5MjQsIFwidm9sdW1lXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuXG4gICAgLyogc3BlZWQgKi9cbiAgICBcIjxrcGg+XCIgOiBbW1wia3BoXCJdLCAwLjI3Nzc3Nzc3OCwgXCJzcGVlZFwiLCBbXCI8bWV0ZXI+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8bXBoPlwiIDogW1tcIm1waFwiXSwgMC40NDcwNCwgXCJzcGVlZFwiLCBbXCI8bWV0ZXI+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8a25vdD5cIiA6IFtbXCJrdFwiLFwia25cIixcImt0c1wiLFwia25vdFwiLFwia25vdHNcIl0sIDAuNTE0NDQ0NDQ0LCBcInNwZWVkXCIsIFtcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxmcHM+XCIgIDogW1tcImZwc1wiXSwgMC4zMDQ4LCBcInNwZWVkXCIsIFtcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIGFjY2VsZXJhdGlvbiAqL1xuICAgIFwiPGdlZT5cIiA6IFtbXCJnZWVcIl0sIDkuODA2NjUsIFwiYWNjZWxlcmF0aW9uXCIsIFtcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8R2FsPlwiIDogW1tcIkdhbFwiXSwgMWUtMiwgXCJhY2NlbGVyYXRpb25cIiwgW1wiPG1ldGVyPlwiXSwgW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIHRlbXBlcmF0dXJlX2RpZmZlcmVuY2UgKi9cbiAgICBcIjxrZWx2aW4+XCIgOiBbW1wiZGVnS1wiLFwia2VsdmluXCJdLCAxLjAsIFwidGVtcGVyYXR1cmVcIiwgW1wiPGtlbHZpbj5cIl1dLFxuICAgIFwiPGNlbHNpdXM+XCIgOiBbW1wiZGVnQ1wiLFwiY2Vsc2l1c1wiLFwiY2Vsc2l1c1wiLFwiY2VudGlncmFkZVwiXSwgMS4wLCBcInRlbXBlcmF0dXJlXCIsIFtcIjxrZWx2aW4+XCJdXSxcbiAgICBcIjxmYWhyZW5oZWl0PlwiIDogW1tcImRlZ0ZcIixcImZhaHJlbmhlaXRcIl0sIDUgLyA5LCBcInRlbXBlcmF0dXJlXCIsIFtcIjxrZWx2aW4+XCJdXSxcbiAgICBcIjxyYW5raW5lPlwiIDogW1tcImRlZ1JcIixcInJhbmtpbmVcIl0sIDUgLyA5LCBcInRlbXBlcmF0dXJlXCIsIFtcIjxrZWx2aW4+XCJdXSxcbiAgICBcIjx0ZW1wLUs+XCIgIDogW1tcInRlbXBLXCIsXCJ0ZW1wLUtcIl0sIDEuMCwgXCJ0ZW1wZXJhdHVyZVwiLCBbXCI8dGVtcC1LPlwiXV0sXG4gICAgXCI8dGVtcC1DPlwiICA6IFtbXCJ0ZW1wQ1wiLFwidGVtcC1DXCJdLCAxLjAsIFwidGVtcGVyYXR1cmVcIiwgW1wiPHRlbXAtSz5cIl1dLFxuICAgIFwiPHRlbXAtRj5cIiAgOiBbW1widGVtcEZcIixcInRlbXAtRlwiXSwgNSAvIDksIFwidGVtcGVyYXR1cmVcIiwgW1wiPHRlbXAtSz5cIl1dLFxuICAgIFwiPHRlbXAtUj5cIiAgOiBbW1widGVtcFJcIixcInRlbXAtUlwiXSwgNSAvIDksIFwidGVtcGVyYXR1cmVcIiwgW1wiPHRlbXAtSz5cIl1dLFxuXG4gICAgLyogdGltZSAqL1xuICAgIFwiPHNlY29uZD5cIjogIFtbXCJzXCIsXCJzZWNcIixcInNlY3NcIixcInNlY29uZFwiLFwic2Vjb25kc1wiXSwgMS4wLCBcInRpbWVcIiwgW1wiPHNlY29uZD5cIl1dLFxuICAgIFwiPG1pbnV0ZT5cIjogIFtbXCJtaW5cIixcIm1pbnNcIixcIm1pbnV0ZVwiLFwibWludXRlc1wiXSwgNjAuMCwgXCJ0aW1lXCIsIFtcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxob3VyPlwiOiAgW1tcImhcIixcImhyXCIsXCJocnNcIixcImhvdXJcIixcImhvdXJzXCJdLCAzNjAwLjAsIFwidGltZVwiLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8ZGF5PlwiOiAgW1tcImRcIixcImRheVwiLFwiZGF5c1wiXSwgMzYwMCAqIDI0LCBcInRpbWVcIiwgW1wiPHNlY29uZD5cIl1dLFxuICAgIFwiPHdlZWs+XCI6ICBbW1wid2tcIixcIndlZWtcIixcIndlZWtzXCJdLCA3ICogMzYwMCAqIDI0LCBcInRpbWVcIiwgW1wiPHNlY29uZD5cIl1dLFxuICAgIFwiPGZvcnRuaWdodD5cIjogW1tcImZvcnRuaWdodFwiLFwiZm9ydG5pZ2h0c1wiXSwgMTIwOTYwMCwgXCJ0aW1lXCIsIFtcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjx5ZWFyPlwiOiAgW1tcInlcIixcInlyXCIsXCJ5ZWFyXCIsXCJ5ZWFyc1wiLFwiYW5udW1cIl0sIDMxNTU2OTI2LCBcInRpbWVcIiwgW1wiPHNlY29uZD5cIl1dLFxuICAgIFwiPGRlY2FkZT5cIjpbW1wiZGVjYWRlXCIsXCJkZWNhZGVzXCJdLCAzMTU1NjkyNjAsIFwidGltZVwiLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8Y2VudHVyeT5cIjpbW1wiY2VudHVyeVwiLFwiY2VudHVyaWVzXCJdLCAzMTU1NjkyNjAwLCBcInRpbWVcIiwgW1wiPHNlY29uZD5cIl1dLFxuXG4gICAgLyogcHJlc3N1cmUgKi9cbiAgICBcIjxwYXNjYWw+XCIgOiBbW1wiUGFcIixcInBhc2NhbFwiLFwiUGFzY2FsXCJdLCAxLjAsIFwicHJlc3N1cmVcIiwgW1wiPGtpbG9ncmFtPlwiXSxbXCI8bWV0ZXI+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPGJhcj5cIiA6IFtbXCJiYXJcIixcImJhcnNcIl0sIDEwMDAwMCwgXCJwcmVzc3VyZVwiLCBbXCI8a2lsb2dyYW0+XCJdLFtcIjxtZXRlcj5cIixcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8bW1IZz5cIiA6IFtbXCJtbUhnXCJdLCAxMzMuMzIyMzY4LCBcInByZXNzdXJlXCIsIFtcIjxraWxvZ3JhbT5cIl0sW1wiPG1ldGVyPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxpbkhnPlwiIDogW1tcImluSGdcIl0sIDMzODYuMzg4MTQ3MiwgXCJwcmVzc3VyZVwiLCBbXCI8a2lsb2dyYW0+XCJdLFtcIjxtZXRlcj5cIixcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8dG9ycj5cIiA6IFtbXCJ0b3JyXCJdLCAxMzMuMzIyMzY4LCBcInByZXNzdXJlXCIsIFtcIjxraWxvZ3JhbT5cIl0sW1wiPG1ldGVyPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxhdG0+XCIgOiBbW1wiYXRtXCIsXCJBVE1cIixcImF0bW9zcGhlcmVcIixcImF0bW9zcGhlcmVzXCJdLCAxMDEzMjUsIFwicHJlc3N1cmVcIiwgW1wiPGtpbG9ncmFtPlwiXSxbXCI8bWV0ZXI+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPHBzaT5cIiA6IFtbXCJwc2lcIl0sIDY4OTQuNzYsIFwicHJlc3N1cmVcIiwgW1wiPGtpbG9ncmFtPlwiXSxbXCI8bWV0ZXI+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPGNtaDJvPlwiIDogW1tcImNtSDJPXCIsXCJjbWgyb1wiXSwgOTguMDYzOCwgXCJwcmVzc3VyZVwiLCBbXCI8a2lsb2dyYW0+XCJdLFtcIjxtZXRlcj5cIixcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8aW5oMm8+XCIgOiBbW1wiaW5IMk9cIixcImluaDJvXCJdLCAyNDkuMDgyMDUyLCBcInByZXNzdXJlXCIsIFtcIjxraWxvZ3JhbT5cIl0sW1wiPG1ldGVyPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIHZpc2Nvc2l0eSAqL1xuICAgIFwiPHBvaXNlPlwiICA6IFtbXCJQXCIsXCJwb2lzZVwiXSwgMC4xLCBcInZpc2Nvc2l0eVwiLCBbXCI8a2lsb2dyYW0+XCJdLFtcIjxtZXRlcj5cIixcIjxzZWNvbmQ+XCJdIF0sXG4gICAgXCI8c3Rva2VzPlwiIDogW1tcIlN0XCIsXCJzdG9rZXNcIl0sIDFlLTQsIFwidmlzY29zaXR5XCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIHN1YnN0YW5jZSAqL1xuICAgIFwiPG1vbGU+XCIgIDogIFtbXCJtb2xcIixcIm1vbGVcIl0sIDEuMCwgXCJzdWJzdGFuY2VcIiwgW1wiPG1vbGU+XCJdXSxcblxuICAgIC8qIGNvbmNlbnRyYXRpb24gKi9cbiAgICBcIjxtb2xhcj5cIiA6IFtbXCJNXCIsXCJtb2xhclwiXSwgMTAwMCwgXCJjb25jZW50cmF0aW9uXCIsIFtcIjxtb2xlPlwiXSwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG4gICAgXCI8d3RwZXJjZW50PlwiICA6IFtbXCJ3dCVcIixcInd0cGVyY2VudFwiXSwgMTAsIFwiY29uY2VudHJhdGlvblwiLCBbXCI8a2lsb2dyYW0+XCJdLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdXSxcblxuICAgIC8qIGFjdGl2aXR5ICovXG4gICAgXCI8a2F0YWw+XCIgOiAgW1tcImthdFwiLFwia2F0YWxcIixcIkthdGFsXCJdLCAxLjAsIFwiYWN0aXZpdHlcIiwgW1wiPG1vbGU+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8dW5pdD5cIiAgOiAgW1tcIlVcIixcImVuelVuaXRcIixcInVuaXRcIl0sIDE2LjY2N2UtMTYsIFwiYWN0aXZpdHlcIiwgW1wiPG1vbGU+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG5cbiAgICAvKiBjYXBhY2l0YW5jZSAqL1xuICAgIFwiPGZhcmFkPlwiIDogIFtbXCJGXCIsXCJmYXJhZFwiLFwiRmFyYWRcIl0sIDEuMCwgXCJjYXBhY2l0YW5jZVwiLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPGFtcGVyZT5cIixcIjxhbXBlcmU+XCJdLCBbXCI8bWV0ZXI+XCIsIFwiPG1ldGVyPlwiLCBcIjxraWxvZ3JhbT5cIl1dLFxuXG4gICAgLyogY2hhcmdlICovXG4gICAgXCI8Y291bG9tYj5cIiA6ICBbW1wiQ1wiLFwiY291bG9tYlwiLFwiQ291bG9tYlwiXSwgMS4wLCBcImNoYXJnZVwiLCBbXCI8YW1wZXJlPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPEFoPlwiIDogIFtbXCJBaFwiXSwgMzYwMCwgXCJjaGFyZ2VcIiwgW1wiPGFtcGVyZT5cIixcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIGN1cnJlbnQgKi9cbiAgICBcIjxhbXBlcmU+XCIgIDogIFtbXCJBXCIsXCJBbXBlcmVcIixcImFtcGVyZVwiLFwiYW1wXCIsXCJhbXBzXCJdLCAxLjAsIFwiY3VycmVudFwiLCBbXCI8YW1wZXJlPlwiXV0sXG5cbiAgICAvKiBjb25kdWN0YW5jZSAqL1xuICAgIFwiPHNpZW1lbnM+XCIgOiBbW1wiU1wiLFwiU2llbWVuc1wiLFwic2llbWVuc1wiXSwgMS4wLCBcImNvbmR1Y3RhbmNlXCIsIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxhbXBlcmU+XCIsXCI8YW1wZXJlPlwiXSwgW1wiPGtpbG9ncmFtPlwiLFwiPG1ldGVyPlwiLFwiPG1ldGVyPlwiXV0sXG5cbiAgICAvKiBpbmR1Y3RhbmNlICovXG4gICAgXCI8aGVucnk+XCIgOiAgW1tcIkhcIixcIkhlbnJ5XCIsXCJoZW5yeVwiXSwgMS4wLCBcImluZHVjdGFuY2VcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPGtpbG9ncmFtPlwiXSwgW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCIsXCI8YW1wZXJlPlwiLFwiPGFtcGVyZT5cIl1dLFxuXG4gICAgLyogcG90ZW50aWFsICovXG4gICAgXCI8dm9sdD5cIiAgOiAgW1tcIlZcIixcIlZvbHRcIixcInZvbHRcIixcInZvbHRzXCJdLCAxLjAsIFwicG90ZW50aWFsXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxhbXBlcmU+XCJdXSxcblxuICAgIC8qIHJlc2lzdGFuY2UgKi9cbiAgICBcIjxvaG0+XCIgOiAgW1xuICAgICAgW1wiT2htXCIsXCJvaG1cIixcIlxcdTAzQTlcIi8q4oSmIGFzIGdyZWVrIGxldHRlciovLFwiXFx1MjEyNlwiLyrihKYgYXMgb2htIHNpZ24qL10sXG4gICAgICAxLjAsXG4gICAgICBcInJlc2lzdGFuY2VcIixcbiAgICAgIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIl0sW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPGFtcGVyZT5cIixcIjxhbXBlcmU+XCJdXG4gICAgXSxcbiAgICAvKiBtYWduZXRpc20gKi9cbiAgICBcIjx3ZWJlcj5cIiA6IFtbXCJXYlwiLFwid2ViZXJcIixcIndlYmVyc1wiXSwgMS4wLCBcIm1hZ25ldGlzbVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8a2lsb2dyYW0+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxhbXBlcmU+XCJdXSxcbiAgICBcIjx0ZXNsYT5cIiAgOiBbW1wiVFwiLFwidGVzbGFcIixcInRlc2xhc1wiXSwgMS4wLCBcIm1hZ25ldGlzbVwiLCBbXCI8a2lsb2dyYW0+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxhbXBlcmU+XCJdXSxcbiAgICBcIjxnYXVzcz5cIiA6IFtbXCJHXCIsXCJnYXVzc1wiXSwgMWUtNCwgXCJtYWduZXRpc21cIiwgIFtcIjxraWxvZ3JhbT5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPGFtcGVyZT5cIl1dLFxuICAgIFwiPG1heHdlbGw+XCIgOiBbW1wiTXhcIixcIm1heHdlbGxcIixcIm1heHdlbGxzXCJdLCAxZS04LCBcIm1hZ25ldGlzbVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8a2lsb2dyYW0+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxhbXBlcmU+XCJdXSxcbiAgICBcIjxvZXJzdGVkPlwiICA6IFtbXCJPZVwiLFwib2Vyc3RlZFwiLFwib2Vyc3RlZHNcIl0sIDI1MC4wIC8gTWF0aC5QSSwgXCJtYWduZXRpc21cIiwgW1wiPGFtcGVyZT5cIl0sIFtcIjxtZXRlcj5cIl1dLFxuXG4gICAgLyogZW5lcmd5ICovXG4gICAgXCI8am91bGU+XCIgOiAgW1tcIkpcIixcImpvdWxlXCIsXCJKb3VsZVwiLFwiam91bGVzXCJdLCAxLjAsIFwiZW5lcmd5XCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8ZXJnPlwiICAgOiAgW1tcImVyZ1wiLFwiZXJnc1wiXSwgMWUtNywgXCJlbmVyZ3lcIiwgW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPGtpbG9ncmFtPlwiXSwgW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxidHU+XCIgICA6ICBbW1wiQlRVXCIsXCJidHVcIixcIkJUVXNcIl0sIDEwNTUuMDU2LCBcImVuZXJneVwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCIsXCI8a2lsb2dyYW0+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPGNhbG9yaWU+XCIgOiAgW1tcImNhbFwiLFwiY2Fsb3JpZVwiLFwiY2Fsb3JpZXNcIl0sIDQuMTg0MDAsIFwiZW5lcmd5XCIsW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPGtpbG9ncmFtPlwiXSwgW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxDYWxvcmllPlwiIDogIFtbXCJDYWxcIixcIkNhbG9yaWVcIixcIkNhbG9yaWVzXCJdLCA0MTg0LjAwLCBcImVuZXJneVwiLFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8dGhlcm0tVVM+XCIgOiBbW1widGhcIixcInRoZXJtXCIsXCJ0aGVybXNcIixcIlRoZXJtXCIsXCJ0aGVybS1VU1wiXSwgMTA1NDgwNDAwLCBcImVuZXJneVwiLFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8V2g+XCIgOiBbW1wiV2hcIl0sIDM2MDAsIFwiZW5lcmd5XCIsW1wiPG1ldGVyPlwiLFwiPG1ldGVyPlwiLFwiPGtpbG9ncmFtPlwiXSwgW1wiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIGZvcmNlICovXG4gICAgXCI8bmV3dG9uPlwiICA6IFtbXCJOXCIsXCJOZXd0b25cIixcIm5ld3RvblwiXSwgMS4wLCBcImZvcmNlXCIsIFtcIjxraWxvZ3JhbT5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8ZHluZT5cIiAgOiBbW1wiZHluXCIsXCJkeW5lXCJdLCAxZS01LCBcImZvcmNlXCIsIFtcIjxraWxvZ3JhbT5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8cG91bmQtZm9yY2U+XCIgIDogW1tcImxiZlwiLFwicG91bmQtZm9yY2VcIl0sIDQuNDQ4MjIyLCBcImZvcmNlXCIsIFtcIjxraWxvZ3JhbT5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG5cbiAgICAvKiBmcmVxdWVuY3kgKi9cbiAgICBcIjxoZXJ0ej5cIiA6IFtbXCJIelwiLFwiaGVydHpcIixcIkhlcnR6XCJdLCAxLjAsIFwiZnJlcXVlbmN5XCIsIFtcIjwxPlwiXSwgW1wiPHNlY29uZD5cIl1dLFxuXG4gICAgLyogYW5nbGUgKi9cbiAgICBcIjxyYWRpYW4+XCIgOltbXCJyYWRcIixcInJhZGlhblwiLFwicmFkaWFuc1wiXSwgMS4wLCBcImFuZ2xlXCIsIFtcIjxyYWRpYW4+XCJdXSxcbiAgICBcIjxkZWdyZWU+XCIgOltbXCJkZWdcIixcImRlZ3JlZVwiLFwiZGVncmVlc1wiXSwgTWF0aC5QSSAvIDE4MC4wLCBcImFuZ2xlXCIsIFtcIjxyYWRpYW4+XCJdXSxcbiAgICBcIjxncmFkaWFuPlwiICAgOltbXCJnb25cIixcImdyYWRcIixcImdyYWRpYW5cIixcImdyYWRzXCJdLCBNYXRoLlBJIC8gMjAwLjAsIFwiYW5nbGVcIiwgW1wiPHJhZGlhbj5cIl1dLFxuICAgIFwiPHN0ZXJhZGlhbj5cIiAgOiBbW1wic3JcIixcInN0ZXJhZGlhblwiLFwic3RlcmFkaWFuc1wiXSwgMS4wLCBcInNvbGlkX2FuZ2xlXCIsIFtcIjxzdGVyYWRpYW4+XCJdXSxcblxuICAgIC8qIHJvdGF0aW9uICovXG4gICAgXCI8cm90YXRpb24+XCIgOiBbW1wicm90YXRpb25cIl0sIDIuMCAqIE1hdGguUEksIFwiYW5nbGVcIiwgW1wiPHJhZGlhbj5cIl1dLFxuICAgIFwiPHJwbT5cIiAgIDpbW1wicnBtXCJdLCAyLjAgKiBNYXRoLlBJIC8gNjAuMCwgXCJhbmd1bGFyX3ZlbG9jaXR5XCIsIFtcIjxyYWRpYW4+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG5cbiAgICAvKiBpbmZvcm1hdGlvbiAqL1xuICAgIFwiPGJ5dGU+XCIgIDpbW1wiQlwiLFwiYnl0ZVwiLFwiYnl0ZXNcIl0sIDEuMCwgXCJpbmZvcm1hdGlvblwiLCBbXCI8Ynl0ZT5cIl1dLFxuICAgIFwiPGJpdD5cIiAgOltbXCJiXCIsXCJiaXRcIixcImJpdHNcIl0sIDAuMTI1LCBcImluZm9ybWF0aW9uXCIsIFtcIjxieXRlPlwiXV0sXG5cbiAgICAvKiBpbmZvcm1hdGlvbiByYXRlICovXG4gICAgXCI8QnBzPlwiIDogW1tcIkJwc1wiXSwgMS4wLCBcImluZm9ybWF0aW9uX3JhdGVcIiwgW1wiPGJ5dGU+XCJdLCBbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8YnBzPlwiIDogW1tcImJwc1wiXSwgMC4xMjUsIFwiaW5mb3JtYXRpb25fcmF0ZVwiLCBbXCI8Ynl0ZT5cIl0sIFtcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIGN1cnJlbmN5ICovXG4gICAgXCI8ZG9sbGFyPlwiOltbXCJVU0RcIixcImRvbGxhclwiXSwgMS4wLCBcImN1cnJlbmN5XCIsIFtcIjxkb2xsYXI+XCJdXSxcbiAgICBcIjxjZW50cz5cIiA6W1tcImNlbnRzXCJdLCAwLjAxLCBcImN1cnJlbmN5XCIsIFtcIjxkb2xsYXI+XCJdXSxcblxuICAgIC8qIGx1bWlub3NpdHkgKi9cbiAgICBcIjxjYW5kZWxhPlwiIDogW1tcImNkXCIsXCJjYW5kZWxhXCJdLCAxLjAsIFwibHVtaW5vc2l0eVwiLCBbXCI8Y2FuZGVsYT5cIl1dLFxuICAgIFwiPGx1bWVuPlwiIDogW1tcImxtXCIsXCJsdW1lblwiXSwgMS4wLCBcImx1bWlub3VzX3Bvd2VyXCIsIFtcIjxjYW5kZWxhPlwiLFwiPHN0ZXJhZGlhbj5cIl1dLFxuICAgIFwiPGx1eD5cIiA6W1tcImx1eFwiXSwgMS4wLCBcImlsbHVtaW5hbmNlXCIsIFtcIjxjYW5kZWxhPlwiLFwiPHN0ZXJhZGlhbj5cIl0sIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl1dLFxuXG4gICAgLyogcG93ZXIgKi9cbiAgICBcIjx3YXR0PlwiICA6IFtbXCJXXCIsXCJ3YXR0XCIsXCJ3YXR0c1wiXSwgMS4wLCBcInBvd2VyXCIsIFtcIjxraWxvZ3JhbT5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPHZvbHQtYW1wZXJlPlwiICA6IFtbXCJWQVwiLFwidm9sdC1hbXBlcmVcIl0sIDEuMCwgXCJwb3dlclwiLCBbXCI8a2lsb2dyYW0+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjx2b2x0LWFtcGVyZS1yZWFjdGl2ZT5cIiAgOiBbW1widmFyXCIsXCJWYXJcIixcIlZBclwiLFwiVkFSXCIsXCJ2b2x0LWFtcGVyZS1yZWFjdGl2ZVwiXSwgMS4wLCBcInBvd2VyXCIsIFtcIjxraWxvZ3JhbT5cIixcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPGhvcnNlcG93ZXI+XCIgIDogIFtbXCJocFwiLFwiaG9yc2Vwb3dlclwiXSwgNzQ1LjY5OTg3MiwgXCJwb3dlclwiLCBbXCI8a2lsb2dyYW0+XCIsXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIixcIjxzZWNvbmQ+XCJdXSxcblxuICAgIC8qIHJhZGlhdGlvbiAqL1xuICAgIFwiPGdyYXk+XCIgOiBbW1wiR3lcIixcImdyYXlcIixcImdyYXlzXCJdLCAxLjAsIFwicmFkaWF0aW9uXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8cm9lbnRnZW4+XCIgOiBbW1wiUlwiLFwicm9lbnRnZW5cIl0sIDAuMDA5MzMwLCBcInJhZGlhdGlvblwiLCBbXCI8bWV0ZXI+XCIsXCI8bWV0ZXI+XCJdLCBbXCI8c2Vjb25kPlwiLFwiPHNlY29uZD5cIl1dLFxuICAgIFwiPHNpZXZlcnQ+XCIgOiBbW1wiU3ZcIixcInNpZXZlcnRcIixcInNpZXZlcnRzXCJdLCAxLjAsIFwicmFkaWF0aW9uXCIsIFtcIjxtZXRlcj5cIixcIjxtZXRlcj5cIl0sIFtcIjxzZWNvbmQ+XCIsXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8YmVjcXVlcmVsPlwiIDogW1tcIkJxXCIsXCJiZWNxdWVyZWxcIixcImJlY3F1ZXJlbHNcIl0sIDEuMCwgXCJyYWRpYXRpb25cIiwgW1wiPDE+XCJdLFtcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxjdXJpZT5cIiA6IFtbXCJDaVwiLFwiY3VyaWVcIixcImN1cmllc1wiXSwgMy43ZTEwLCBcInJhZGlhdGlvblwiLCBbXCI8MT5cIl0sW1wiPHNlY29uZD5cIl1dLFxuXG4gICAgLyogcmF0ZSAqL1xuICAgIFwiPGNwbT5cIiA6IFtbXCJjcG1cIl0sIDEuMCAvIDYwLjAsIFwicmF0ZVwiLCBbXCI8Y291bnQ+XCJdLFtcIjxzZWNvbmQ+XCJdXSxcbiAgICBcIjxkcG0+XCIgOiBbW1wiZHBtXCJdLCAxLjAgLyA2MC4wLCBcInJhdGVcIiwgW1wiPGNvdW50PlwiXSxbXCI8c2Vjb25kPlwiXV0sXG4gICAgXCI8YnBtPlwiIDogW1tcImJwbVwiXSwgMS4wIC8gNjAuMCwgXCJyYXRlXCIsIFtcIjxjb3VudD5cIl0sW1wiPHNlY29uZD5cIl1dLFxuXG4gICAgLyogcmVzb2x1dGlvbiAvIHR5cG9ncmFwaHkgKi9cbiAgICBcIjxkb3Q+XCIgOiBbW1wiZG90XCIsXCJkb3RzXCJdLCAxLCBcInJlc29sdXRpb25cIiwgW1wiPGVhY2g+XCJdXSxcbiAgICBcIjxwaXhlbD5cIiA6IFtbXCJwaXhlbFwiLFwicHhcIl0sIDEsIFwicmVzb2x1dGlvblwiLCBbXCI8ZWFjaD5cIl1dLFxuICAgIFwiPHBwaT5cIiA6IFtbXCJwcGlcIl0sIDEsIFwicmVzb2x1dGlvblwiLCBbXCI8cGl4ZWw+XCJdLCBbXCI8aW5jaD5cIl1dLFxuICAgIFwiPGRwaT5cIiA6IFtbXCJkcGlcIl0sIDEsIFwidHlwb2dyYXBoeVwiLCBbXCI8ZG90PlwiXSwgW1wiPGluY2g+XCJdXSxcblxuICAgIC8qIG90aGVyICovXG4gICAgXCI8Y2VsbD5cIiA6IFtbXCJjZWxsc1wiLFwiY2VsbFwiXSwgMSwgXCJjb3VudGluZ1wiLCBbXCI8ZWFjaD5cIl1dLFxuICAgIFwiPGVhY2g+XCIgOiBbW1wiZWFjaFwiXSwgMS4wLCBcImNvdW50aW5nXCIsIFtcIjxlYWNoPlwiXV0sXG4gICAgXCI8Y291bnQ+XCIgOiBbW1wiY291bnRcIl0sIDEuMCwgXCJjb3VudGluZ1wiLCBbXCI8ZWFjaD5cIl1dLFxuICAgIFwiPGJhc2UtcGFpcj5cIiAgOiBbW1wiYnBcIixcImJhc2UtcGFpclwiXSwgMS4wLCBcImNvdW50aW5nXCIsIFtcIjxlYWNoPlwiXV0sXG4gICAgXCI8bnVjbGVvdGlkZT5cIiA6IFtbXCJudFwiLFwibnVjbGVvdGlkZVwiXSwgMS4wLCBcImNvdW50aW5nXCIsIFtcIjxlYWNoPlwiXV0sXG4gICAgXCI8bW9sZWN1bGU+XCIgOiBbW1wibW9sZWN1bGVcIixcIm1vbGVjdWxlc1wiXSwgMS4wLCBcImNvdW50aW5nXCIsIFtcIjwxPlwiXV0sXG4gICAgXCI8ZG96ZW4+XCIgOiAgW1tcImRvelwiLFwiZHpcIixcImRvemVuXCJdLDEyLjAsXCJwcmVmaXhfb25seVwiLCBbXCI8ZWFjaD5cIl1dLFxuICAgIFwiPHBlcmNlbnQ+XCI6IFtbXCIlXCIsXCJwZXJjZW50XCJdLCAwLjAxLCBcInByZWZpeF9vbmx5XCIsIFtcIjwxPlwiXV0sXG4gICAgXCI8cHBtPlwiIDogIFtbXCJwcG1cIl0sMWUtNiwgXCJwcmVmaXhfb25seVwiLCBbXCI8MT5cIl1dLFxuICAgIFwiPHBwdD5cIiA6ICBbW1wicHB0XCJdLDFlLTksIFwicHJlZml4X29ubHlcIiwgW1wiPDE+XCJdXSxcbiAgICBcIjxncm9zcz5cIiA6ICBbW1wiZ3JcIixcImdyb3NzXCJdLDE0NC4wLCBcInByZWZpeF9vbmx5XCIsIFtcIjxkb3plbj5cIixcIjxkb3plbj5cIl1dLFxuICAgIFwiPGRlY2liZWw+XCIgIDogW1tcImRCXCIsXCJkZWNpYmVsXCIsXCJkZWNpYmVsc1wiXSwgMS4wLCBcImxvZ2FyaXRobWljXCIsIFtcIjxkZWNpYmVsPlwiXV1cbiAgfTtcblxuICB2YXIgQkFTRV9VTklUUyA9IFtcIjxtZXRlcj5cIixcIjxraWxvZ3JhbT5cIixcIjxzZWNvbmQ+XCIsXCI8bW9sZT5cIiwgXCI8YW1wZXJlPlwiLFwiPHJhZGlhbj5cIixcIjxrZWx2aW4+XCIsXCI8dGVtcC1LPlwiLFwiPGJ5dGU+XCIsXCI8ZG9sbGFyPlwiLFwiPGNhbmRlbGE+XCIsXCI8ZWFjaD5cIixcIjxzdGVyYWRpYW4+XCIsXCI8ZGVjaWJlbD5cIl07XG5cbiAgdmFyIFVOSVRZID0gXCI8MT5cIjtcbiAgdmFyIFVOSVRZX0FSUkFZID0gW1VOSVRZXTtcblxuICAvLyBTZXR1cFxuXG4gIC8qKlxuICAgKiBBc3NlcnRzIHVuaXQgZGVmaW5pdGlvbiBpcyB2YWxpZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdERlZiAtIE5hbWUgb2YgdW5pdCB0byB0ZXN0XG4gICAqIEBwYXJhbSB7T2JqZWN0fSBkZWZpbml0aW9uIC0gRGVmaW5pdGlvbiBvZiB1bml0IHRvIHRlc3RcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqIEB0aHJvd3Mge1F0eUVycm9yfSBpZiB1bml0IGRlZmluaXRpb24gaXMgbm90IHZhbGlkXG4gICAqL1xuICBmdW5jdGlvbiB2YWxpZGF0ZVVuaXREZWZpbml0aW9uKHVuaXREZWYsIGRlZmluaXRpb24pIHtcbiAgICB2YXIgc2NhbGFyID0gZGVmaW5pdGlvblsxXTtcbiAgICB2YXIgbnVtZXJhdG9yID0gZGVmaW5pdGlvblszXSB8fCBbXTtcbiAgICB2YXIgZGVub21pbmF0b3IgPSBkZWZpbml0aW9uWzRdIHx8IFtdO1xuICAgIGlmICghaXNOdW1iZXIoc2NhbGFyKSkge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKHVuaXREZWYgKyBcIjogSW52YWxpZCB1bml0IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICBcIidzY2FsYXInIG11c3QgYmUgYSBudW1iZXJcIik7XG4gICAgfVxuXG4gICAgbnVtZXJhdG9yLmZvckVhY2goZnVuY3Rpb24odW5pdCkge1xuICAgICAgaWYgKFVOSVRTW3VuaXRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKHVuaXREZWYgKyBcIjogSW52YWxpZCB1bml0IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVW5pdCBcIiArIHVuaXQgKyBcIiBpbiAnbnVtZXJhdG9yJyBpcyBub3QgcmVjb2duaXplZFwiKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGRlbm9taW5hdG9yLmZvckVhY2goZnVuY3Rpb24odW5pdCkge1xuICAgICAgaWYgKFVOSVRTW3VuaXRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKHVuaXREZWYgKyBcIjogSW52YWxpZCB1bml0IGRlZmluaXRpb24uIFwiICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiVW5pdCBcIiArIHVuaXQgKyBcIiBpbiAnZGVub21pbmF0b3InIGlzIG5vdCByZWNvZ25pemVkXCIpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgdmFyIFBSRUZJWF9WQUxVRVMgPSB7fTtcbiAgdmFyIFBSRUZJWF9NQVAgPSB7fTtcbiAgdmFyIFVOSVRfVkFMVUVTID0ge307XG4gIHZhciBVTklUX01BUCA9IHt9O1xuICB2YXIgT1VUUFVUX01BUCA9IHt9O1xuICBmb3IgKHZhciB1bml0RGVmIGluIFVOSVRTKSB7XG4gICAgaWYgKFVOSVRTLmhhc093blByb3BlcnR5KHVuaXREZWYpKSB7XG4gICAgICB2YXIgZGVmaW5pdGlvbiA9IFVOSVRTW3VuaXREZWZdO1xuICAgICAgaWYgKGRlZmluaXRpb25bMl0gPT09IFwicHJlZml4XCIpIHtcbiAgICAgICAgUFJFRklYX1ZBTFVFU1t1bml0RGVmXSA9IGRlZmluaXRpb25bMV07XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGVmaW5pdGlvblswXS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIFBSRUZJWF9NQVBbZGVmaW5pdGlvblswXVtpXV0gPSB1bml0RGVmO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgdmFsaWRhdGVVbml0RGVmaW5pdGlvbih1bml0RGVmLCBkZWZpbml0aW9uKTtcbiAgICAgICAgVU5JVF9WQUxVRVNbdW5pdERlZl0gPSB7XG4gICAgICAgICAgc2NhbGFyOiBkZWZpbml0aW9uWzFdLFxuICAgICAgICAgIG51bWVyYXRvcjogZGVmaW5pdGlvblszXSxcbiAgICAgICAgICBkZW5vbWluYXRvcjogZGVmaW5pdGlvbls0XVxuICAgICAgICB9O1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IGRlZmluaXRpb25bMF0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICBVTklUX01BUFtkZWZpbml0aW9uWzBdW2pdXSA9IHVuaXREZWY7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIE9VVFBVVF9NQVBbdW5pdERlZl0gPSBkZWZpbml0aW9uWzBdWzBdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhdmFpbGFibGUgdW5pdHMgb2Yga2luZFxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW2tpbmRdIC0ga2luZCBvZiB1bml0c1xuICAgKiBAcmV0dXJucyB7YXJyYXl9IG5hbWVzIG9mIHVuaXRzXG4gICAqIEB0aHJvd3Mge1F0eUVycm9yfSBpZiBraW5kIGlzIHVua25vd25cbiAgICovXG4gIGZ1bmN0aW9uIGdldFVuaXRzKGtpbmQpIHtcbiAgICB2YXIgaTtcbiAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICB2YXIgdW5pdEtleXMgPSBPYmplY3Qua2V5cyhVTklUUyk7XG4gICAgaWYgKHR5cGVvZiBraW5kID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdW5pdEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFtcIlwiLCBcInByZWZpeFwiXS5pbmRleE9mKFVOSVRTW3VuaXRLZXlzW2ldXVsyXSkgPT09IC0xKSB7XG4gICAgICAgICAgdW5pdHMucHVzaCh1bml0S2V5c1tpXS5zdWJzdHIoMSwgdW5pdEtleXNbaV0ubGVuZ3RoIC0gMikpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHRoaXMuZ2V0S2luZHMoKS5pbmRleE9mKGtpbmQpID09PSAtMSkge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiS2luZCBub3QgcmVjb2duaXplZFwiKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgdW5pdEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKFVOSVRTW3VuaXRLZXlzW2ldXVsyXSA9PT0ga2luZCkge1xuICAgICAgICAgIHVuaXRzLnB1c2godW5pdEtleXNbaV0uc3Vic3RyKDEsIHVuaXRLZXlzW2ldLmxlbmd0aCAtIDIpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1bml0cy5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcbiAgICAgIGlmIChhLnRvTG93ZXJDYXNlKCkgPCBiLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgaWYgKGEudG9Mb3dlckNhc2UoKSA+IGIudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAwO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGFsdGVybmF0aXZlIG5hbWVzIGZvciBhIHVuaXRcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHVuaXROYW1lIC0gbmFtZSBvZiB1bml0XG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gYWxpYXNlcyBmb3IgdW5pdFxuICAgKiBAdGhyb3dzIHtRdHlFcnJvcn0gaWYgdW5pdCBpcyB1bmtub3duXG4gICAqL1xuICBmdW5jdGlvbiBnZXRBbGlhc2VzKHVuaXROYW1lKSB7XG4gICAgaWYgKCFVTklUX01BUFt1bml0TmFtZV0pIHtcbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIlVuaXQgbm90IHJlY29nbml6ZWRcIik7XG4gICAgfVxuICAgIHJldHVybiBVTklUU1tVTklUX01BUFt1bml0TmFtZV1dWzBdO1xuICB9XG5cbiAgdmFyIFNJR05BVFVSRV9WRUNUT1IgPSBbXCJsZW5ndGhcIiwgXCJ0aW1lXCIsIFwidGVtcGVyYXR1cmVcIiwgXCJtYXNzXCIsIFwiY3VycmVudFwiLCBcInN1YnN0YW5jZVwiLCBcImx1bWlub3NpdHlcIiwgXCJjdXJyZW5jeVwiLCBcImluZm9ybWF0aW9uXCIsIFwiYW5nbGVcIl07XG5cbiAgLypcbiAgY2FsY3VsYXRlcyB0aGUgdW5pdCBzaWduYXR1cmUgaWQgZm9yIHVzZSBpbiBjb21wYXJpbmcgY29tcGF0aWJsZSB1bml0cyBhbmQgc2ltcGxpZmljYXRpb25cbiAgdGhlIHNpZ25hdHVyZSBpcyBiYXNlZCBvbiBhIHNpbXBsZSBjbGFzc2lmaWNhdGlvbiBvZiB1bml0cyBhbmQgaXMgYmFzZWQgb24gdGhlIGZvbGxvd2luZyBwdWJsaWNhdGlvblxuXG4gIE5vdmFrLCBHLlMuLCBKci4gXCJDb252ZXJzaW9uIG9mIHVuaXRzIG9mIG1lYXN1cmVtZW50XCIsIElFRUUgVHJhbnNhY3Rpb25zIG9uIFNvZnR3YXJlIEVuZ2luZWVyaW5nLFxuICAyMSg4KSwgQXVnIDE5OTUsIHBwLjY1MS02NjFcbiAgZG9pOi8vMTAuMTEwOS8zMi40MDM3ODlcbiAgaHR0cDovL2llZWV4cGxvcmUuaWVlZS5vcmcvWHBsb3JlL2xvZ2luLmpzcD91cmw9L2llbDEvMzIvOTA3OS8wMDQwMzc4OS5wZGY/aXNudW1iZXI9OTA3OSZwcm9kPUpOTCZhcm51bWJlcj00MDM3ODkmYXJTdD02NTEmYXJlZD02NjEmYXJBdXRob3I9Tm92YWslMkMrRy5TLiUyQytKci5cbiAgKi9cbiAgZnVuY3Rpb24gdW5pdFNpZ25hdHVyZSgpIHtcbiAgICBpZiAodGhpcy5zaWduYXR1cmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnNpZ25hdHVyZTtcbiAgICB9XG4gICAgdmFyIHZlY3RvciA9IHVuaXRTaWduYXR1cmVWZWN0b3IuY2FsbCh0aGlzKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgICAgdmVjdG9yW2ldICo9IE1hdGgucG93KDIwLCBpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmVjdG9yLnJlZHVjZShcbiAgICAgIGZ1bmN0aW9uKHByZXZpb3VzLCBjdXJyZW50KSB7XG4gICAgICAgIHJldHVybiBwcmV2aW91cyArIGN1cnJlbnQ7XG4gICAgICB9LFxuICAgICAgMFxuICAgICk7XG4gIH1cblxuICAvLyBjYWxjdWxhdGVzIHRoZSB1bml0IHNpZ25hdHVyZSB2ZWN0b3IgdXNlZCBieSB1bml0X3NpZ25hdHVyZVxuICBmdW5jdGlvbiB1bml0U2lnbmF0dXJlVmVjdG9yKCkge1xuICAgIGlmICghdGhpcy5pc0Jhc2UoKSkge1xuICAgICAgcmV0dXJuIHVuaXRTaWduYXR1cmVWZWN0b3IuY2FsbCh0aGlzLnRvQmFzZSgpKTtcbiAgICB9XG5cbiAgICB2YXIgdmVjdG9yID0gbmV3IEFycmF5KFNJR05BVFVSRV9WRUNUT1IubGVuZ3RoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlY3Rvci5sZW5ndGg7IGkrKykge1xuICAgICAgdmVjdG9yW2ldID0gMDtcbiAgICB9XG4gICAgdmFyIHIsIG47XG4gICAgZm9yICh2YXIgaiA9IDA7IGogPCB0aGlzLm51bWVyYXRvci5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKChyID0gVU5JVFNbdGhpcy5udW1lcmF0b3Jbal1dKSkge1xuICAgICAgICBuID0gU0lHTkFUVVJFX1ZFQ1RPUi5pbmRleE9mKHJbMl0pO1xuICAgICAgICBpZiAobiA+PSAwKSB7XG4gICAgICAgICAgdmVjdG9yW25dID0gdmVjdG9yW25dICsgMTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5kZW5vbWluYXRvci5sZW5ndGg7IGsrKykge1xuICAgICAgaWYgKChyID0gVU5JVFNbdGhpcy5kZW5vbWluYXRvcltrXV0pKSB7XG4gICAgICAgIG4gPSBTSUdOQVRVUkVfVkVDVE9SLmluZGV4T2YoclsyXSk7XG4gICAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgICB2ZWN0b3Jbbl0gPSB2ZWN0b3Jbbl0gLSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2ZWN0b3I7XG4gIH1cblxuICB2YXIgU0lHTiA9IFwiWystXVwiO1xuICB2YXIgSU5URUdFUiA9IFwiXFxcXGQrXCI7XG4gIHZhciBTSUdORURfSU5URUdFUiA9IFNJR04gKyBcIj9cIiArIElOVEVHRVI7XG4gIHZhciBGUkFDVElPTiA9IFwiXFxcXC5cIiArIElOVEVHRVI7XG4gIHZhciBGTE9BVCA9IFwiKD86XCIgKyBJTlRFR0VSICsgXCIoPzpcIiArIEZSQUNUSU9OICsgXCIpP1wiICsgXCIpXCIgK1xuICAgICAgICAgICAgICBcInxcIiArXG4gICAgICAgICAgICAgIFwiKD86XCIgKyBGUkFDVElPTiArIFwiKVwiO1xuICB2YXIgRVhQT05FTlQgPSBcIltFZV1cIiArIFNJR05FRF9JTlRFR0VSO1xuICB2YXIgU0NJX05VTUJFUiA9IFwiKD86XCIgKyBGTE9BVCArIFwiKSg/OlwiICsgRVhQT05FTlQgKyBcIik/XCI7XG4gIHZhciBTSUdORURfTlVNQkVSID0gU0lHTiArIFwiP1xcXFxzKlwiICsgU0NJX05VTUJFUjtcbiAgdmFyIFFUWV9TVFJJTkcgPSBcIihcIiArIFNJR05FRF9OVU1CRVIgKyBcIik/XCIgKyBcIlxcXFxzKihbXi9dKikoPzpcXC8oLispKT9cIjtcbiAgdmFyIFFUWV9TVFJJTkdfUkVHRVggPSBuZXcgUmVnRXhwKFwiXlwiICsgUVRZX1NUUklORyArIFwiJFwiKTtcblxuICB2YXIgUE9XRVJfT1AgPSBcIlxcXFxefFxcXFwqezJ9XCI7XG4gIC8vIEFsbG93IHVuaXQgcG93ZXJzIHJlcHJlc2VudGluZyBzY2FsYXIsIGxlbmd0aCwgYXJlYSwgdm9sdW1lOyA0IGlzIGZvciBzb21lXG4gIC8vIHNwZWNpYWwgY2FzZSByZXByZXNlbnRhdGlvbnMgaW4gU0kgYmFzZSB1bml0cy5cbiAgdmFyIFNBRkVfUE9XRVIgPSBcIlswMTIzNF1cIjtcbiAgdmFyIFRPUF9SRUdFWCA9IG5ldyBSZWdFeHAgKFwiKFteIFxcXFwqXFxcXGRdKz8pKD86XCIgKyBQT1dFUl9PUCArIFwiKT8oLT9cIiArIFNBRkVfUE9XRVIgKyBcIig/IVthLXpBLVpdKSlcIik7XG4gIHZhciBCT1RUT01fUkVHRVggPSBuZXcgUmVnRXhwKFwiKFteIFxcXFwqXFxcXGRdKz8pKD86XCIgKyBQT1dFUl9PUCArIFwiKT8oXCIgKyBTQUZFX1BPV0VSICsgXCIoPyFbYS16QS1aXSkpXCIpO1xuXG4gIC8qIHBhcnNlIGEgc3RyaW5nIGludG8gYSB1bml0IG9iamVjdC5cbiAgICogVHlwaWNhbCBmb3JtYXRzIGxpa2UgOlxuICAgKiBcIjUuNiBrZyptL3NeMlwiXG4gICAqIFwiNS42IGtnKm0qc14tMlwiXG4gICAqIFwiNS42IGtpbG9ncmFtKm1ldGVyKnNlY29uZF4tMlwiXG4gICAqIFwiMi4yIGtQYVwiXG4gICAqIFwiMzcgZGVnQ1wiXG4gICAqIFwiMVwiICAtLSBjcmVhdGVzIGEgdW5pdGxlc3MgY29uc3RhbnQgd2l0aCB2YWx1ZSAxXG4gICAqIFwiR1BhXCIgIC0tIGNyZWF0ZXMgYSB1bml0IHdpdGggc2NhbGFyIDEgd2l0aCB1bml0cyAnR1BhJ1xuICAgKiA2JzRcIiAgLS0gcmVjb2duaXplZCBhcyA2IGZlZXQgKyA0IGluY2hlc1xuICAgKiA4IGxicyA4IG96IC0tIHJlY29nbml6ZWQgYXMgOCBsYnMgKyA4IG91bmNlc1xuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2UodmFsKSB7XG4gICAgaWYgKCFpc1N0cmluZyh2YWwpKSB7XG4gICAgICB2YWwgPSB2YWwudG9TdHJpbmcoKTtcbiAgICB9XG4gICAgdmFsID0gdmFsLnRyaW0oKTtcblxuICAgIHZhciByZXN1bHQgPSBRVFlfU1RSSU5HX1JFR0VYLmV4ZWModmFsKTtcbiAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKHZhbCArIFwiOiBRdWFudGl0eSBub3QgcmVjb2duaXplZFwiKTtcbiAgICB9XG5cbiAgICB2YXIgc2NhbGFyTWF0Y2ggPSByZXN1bHRbMV07XG4gICAgaWYgKHNjYWxhck1hdGNoKSB7XG4gICAgICAvLyBBbGxvdyB3aGl0ZXNwYWNlcyBiZXR3ZWVuIHNpZ24gYW5kIHNjYWxhciBmb3IgbG9vc2UgcGFyc2luZ1xuICAgICAgc2NhbGFyTWF0Y2ggPSBzY2FsYXJNYXRjaC5yZXBsYWNlKC9cXHMvZywgXCJcIik7XG4gICAgICB0aGlzLnNjYWxhciA9IHBhcnNlRmxvYXQoc2NhbGFyTWF0Y2gpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRoaXMuc2NhbGFyID0gMTtcbiAgICB9XG4gICAgdmFyIHRvcCA9IHJlc3VsdFsyXTtcbiAgICB2YXIgYm90dG9tID0gcmVzdWx0WzNdO1xuXG4gICAgdmFyIG4sIHgsIG54O1xuICAgIC8vIFRPRE8gRFJZIG1lXG4gICAgd2hpbGUgKChyZXN1bHQgPSBUT1BfUkVHRVguZXhlYyh0b3ApKSkge1xuICAgICAgbiA9IHBhcnNlRmxvYXQocmVzdWx0WzJdKTtcbiAgICAgIGlmIChpc05hTihuKSkge1xuICAgICAgICAvLyBQcmV2ZW50cyBpbmZpbml0ZSBsb29wc1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJVbml0IGV4cG9uZW50IGlzIG5vdCBhIG51bWJlclwiKTtcbiAgICAgIH1cbiAgICAgIC8vIERpc2FsbG93IHVucmVjb2duaXplZCB1bml0IGV2ZW4gaWYgZXhwb25lbnQgaXMgMFxuICAgICAgaWYgKG4gPT09IDAgJiYgIVVOSVRfVEVTVF9SRUdFWC50ZXN0KHJlc3VsdFsxXSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiVW5pdCBub3QgcmVjb2duaXplZFwiKTtcbiAgICAgIH1cbiAgICAgIHggPSByZXN1bHRbMV0gKyBcIiBcIjtcbiAgICAgIG54ID0gXCJcIjtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTWF0aC5hYnMobikgOyBpKyspIHtcbiAgICAgICAgbnggKz0geDtcbiAgICAgIH1cbiAgICAgIGlmIChuID49IDApIHtcbiAgICAgICAgdG9wID0gdG9wLnJlcGxhY2UocmVzdWx0WzBdLCBueCk7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgYm90dG9tID0gYm90dG9tID8gYm90dG9tICsgbnggOiBueDtcbiAgICAgICAgdG9wID0gdG9wLnJlcGxhY2UocmVzdWx0WzBdLCBcIlwiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB3aGlsZSAoKHJlc3VsdCA9IEJPVFRPTV9SRUdFWC5leGVjKGJvdHRvbSkpKSB7XG4gICAgICBuID0gcGFyc2VGbG9hdChyZXN1bHRbMl0pO1xuICAgICAgaWYgKGlzTmFOKG4pKSB7XG4gICAgICAgIC8vIFByZXZlbnRzIGluZmluaXRlIGxvb3BzXG4gICAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIlVuaXQgZXhwb25lbnQgaXMgbm90IGEgbnVtYmVyXCIpO1xuICAgICAgfVxuICAgICAgLy8gRGlzYWxsb3cgdW5yZWNvZ25pemVkIHVuaXQgZXZlbiBpZiBleHBvbmVudCBpcyAwXG4gICAgICBpZiAobiA9PT0gMCAmJiAhVU5JVF9URVNUX1JFR0VYLnRlc3QocmVzdWx0WzFdKSkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJVbml0IG5vdCByZWNvZ25pemVkXCIpO1xuICAgICAgfVxuICAgICAgeCA9IHJlc3VsdFsxXSArIFwiIFwiO1xuICAgICAgbnggPSBcIlwiO1xuICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBuIDsgaisrKSB7XG4gICAgICAgIG54ICs9IHg7XG4gICAgICB9XG5cbiAgICAgIGJvdHRvbSA9IGJvdHRvbS5yZXBsYWNlKHJlc3VsdFswXSwgbngpO1xuICAgIH1cblxuICAgIGlmICh0b3ApIHtcbiAgICAgIHRoaXMubnVtZXJhdG9yID0gcGFyc2VVbml0cyh0b3AudHJpbSgpKTtcbiAgICB9XG4gICAgaWYgKGJvdHRvbSkge1xuICAgICAgdGhpcy5kZW5vbWluYXRvciA9IHBhcnNlVW5pdHMoYm90dG9tLnRyaW0oKSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIFBSRUZJWF9SRUdFWCA9IE9iamVjdC5rZXlzKFBSRUZJWF9NQVApLnNvcnQoZnVuY3Rpb24oYSwgYikge1xuICAgIHJldHVybiBiLmxlbmd0aCAtIGEubGVuZ3RoO1xuICB9KS5qb2luKFwifFwiKTtcbiAgdmFyIFVOSVRfUkVHRVggPSBPYmplY3Qua2V5cyhVTklUX01BUCkuc29ydChmdW5jdGlvbihhLCBiKSB7XG4gICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gIH0pLmpvaW4oXCJ8XCIpO1xuICAvKlxuICAgKiBNaW5pbWFsIGJvdW5kYXJ5IHJlZ2V4IHRvIHN1cHBvcnQgdW5pdHMgd2l0aCBVbmljb2RlIGNoYXJhY3RlcnNcbiAgICogXFxiIG9ubHkgd29ya3MgZm9yIEFTQ0lJXG4gICAqL1xuICB2YXIgQk9VTkRBUllfUkVHRVggPSBcIlxcXFxifCRcIjtcbiAgdmFyIFVOSVRfTUFUQ0ggPSBcIihcIiArIFBSRUZJWF9SRUdFWCArIFwiKT8/KFwiICtcbiAgICAgICAgICAgICAgICAgICBVTklUX1JFR0VYICtcbiAgICAgICAgICAgICAgICAgICBcIikoPzpcIiArIEJPVU5EQVJZX1JFR0VYICsgXCIpXCI7XG4gIHZhciBVTklUX1RFU1RfUkVHRVggPSBuZXcgUmVnRXhwKFwiXlxcXFxzKihcIiArIFVOSVRfTUFUQ0ggKyBcIltcXFxcc1xcXFwqXSopKyRcIik7XG4gIHZhciBVTklUX01BVENIX1JFR0VYID0gbmV3IFJlZ0V4cChVTklUX01BVENILCBcImdcIik7IC8vIGcgZmxhZyBmb3IgbXVsdGlwbGUgb2NjdXJlbmNlc1xuICB2YXIgcGFyc2VkVW5pdHNDYWNoZSA9IHt9O1xuICAvKipcbiAgICogUGFyc2VzIGFuZCBjb252ZXJ0cyB1bml0cyBzdHJpbmcgdG8gbm9ybWFsaXplZCB1bml0IGFycmF5LlxuICAgKiBSZXN1bHQgaXMgY2FjaGVkIHRvIHNwZWVkIHVwIG5leHQgY2FsbHMuXG4gICAqXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0cyBVbml0cyBzdHJpbmdcbiAgICogQHJldHVybnMge3N0cmluZ1tdfSBBcnJheSBvZiBub3JtYWxpemVkIHVuaXRzXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIC8vIFJldHVybnMgW1wiPHNlY29uZD5cIiwgXCI8bWV0ZXI+XCIsIFwiPHNlY29uZD5cIl1cbiAgICogcGFyc2VVbml0cyhcInMgbSBzXCIpO1xuICAgKlxuICAgKi9cbiAgZnVuY3Rpb24gcGFyc2VVbml0cyh1bml0cykge1xuICAgIHZhciBjYWNoZWQgPSBwYXJzZWRVbml0c0NhY2hlW3VuaXRzXTtcbiAgICBpZiAoY2FjaGVkKSB7XG4gICAgICByZXR1cm4gY2FjaGVkO1xuICAgIH1cblxuICAgIHZhciB1bml0TWF0Y2gsIG5vcm1hbGl6ZWRVbml0cyA9IFtdO1xuXG4gICAgLy8gU2NhblxuICAgIGlmICghVU5JVF9URVNUX1JFR0VYLnRlc3QodW5pdHMpKSB7XG4gICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJVbml0IG5vdCByZWNvZ25pemVkXCIpO1xuICAgIH1cblxuICAgIHdoaWxlICgodW5pdE1hdGNoID0gVU5JVF9NQVRDSF9SRUdFWC5leGVjKHVuaXRzKSkpIHtcbiAgICAgIG5vcm1hbGl6ZWRVbml0cy5wdXNoKHVuaXRNYXRjaC5zbGljZSgxKSk7XG4gICAgfVxuXG4gICAgbm9ybWFsaXplZFVuaXRzID0gbm9ybWFsaXplZFVuaXRzLm1hcChmdW5jdGlvbihpdGVtKSB7XG4gICAgICByZXR1cm4gUFJFRklYX01BUFtpdGVtWzBdXSA/IFtQUkVGSVhfTUFQW2l0ZW1bMF1dLCBVTklUX01BUFtpdGVtWzFdXV0gOiBbVU5JVF9NQVBbaXRlbVsxXV1dO1xuICAgIH0pO1xuXG4gICAgLy8gRmxhdHRlbiBhbmQgcmVtb3ZlIG51bGwgZWxlbWVudHNcbiAgICBub3JtYWxpemVkVW5pdHMgPSBub3JtYWxpemVkVW5pdHMucmVkdWNlKGZ1bmN0aW9uKGEsYikge1xuICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgIH0sIFtdKTtcbiAgICBub3JtYWxpemVkVW5pdHMgPSBub3JtYWxpemVkVW5pdHMuZmlsdGVyKGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgIHJldHVybiBpdGVtO1xuICAgIH0pO1xuXG4gICAgcGFyc2VkVW5pdHNDYWNoZVt1bml0c10gPSBub3JtYWxpemVkVW5pdHM7XG5cbiAgICByZXR1cm4gbm9ybWFsaXplZFVuaXRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlcyBhIHN0cmluZyBhcyBhIHF1YW50aXR5XG4gICAqIEBwYXJhbSB7c3RyaW5nfSB2YWx1ZSAtIHF1YW50aXR5IGFzIHRleHRcbiAgICogQHRocm93cyBpZiB2YWx1ZSBpcyBub3QgYSBzdHJpbmdcbiAgICogQHJldHVybnMge1F0eXxudWxsfSBQYXJzZWQgcXVhbnRpdHkgb3IgbnVsbCBpZiB1bnJlY29nbml6ZWRcbiAgICovXG4gIGZ1bmN0aW9uIGdsb2JhbFBhcnNlKHZhbHVlKSB7XG4gICAgaWYgKCFpc1N0cmluZyh2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIkFyZ3VtZW50IHNob3VsZCBiZSBhIHN0cmluZ1wiKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHRoaXModmFsdWUpO1xuICAgIH1cbiAgICBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBRdHkgaW5zdGFuY2VcbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3RcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdmFsdWUgaXMgYSBRdHkgaW5zdGFuY2UsIGZhbHNlIG90aGVyd2lzZVxuICAgKi9cbiAgZnVuY3Rpb24gaXNRdHkodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgaW5zdGFuY2VvZiBRdHk7XG4gIH1cblxuICBmdW5jdGlvbiBRdHkoaW5pdFZhbHVlLCBpbml0VW5pdHMpIHtcbiAgICBhc3NlcnRWYWxpZENvbnN0cnVjdG9yQXJncy5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuXG4gICAgaWYgKCEoaXNRdHkodGhpcykpKSB7XG4gICAgICByZXR1cm4gbmV3IFF0eShpbml0VmFsdWUsIGluaXRVbml0cyk7XG4gICAgfVxuXG4gICAgdGhpcy5zY2FsYXIgPSBudWxsO1xuICAgIHRoaXMuYmFzZVNjYWxhciA9IG51bGw7XG4gICAgdGhpcy5zaWduYXR1cmUgPSBudWxsO1xuICAgIHRoaXMuX2NvbnZlcnNpb25DYWNoZSA9IHt9O1xuICAgIHRoaXMubnVtZXJhdG9yID0gVU5JVFlfQVJSQVk7XG4gICAgdGhpcy5kZW5vbWluYXRvciA9IFVOSVRZX0FSUkFZO1xuXG4gICAgaWYgKGlzRGVmaW5pdGlvbk9iamVjdChpbml0VmFsdWUpKSB7XG4gICAgICB0aGlzLnNjYWxhciA9IGluaXRWYWx1ZS5zY2FsYXI7XG4gICAgICB0aGlzLm51bWVyYXRvciA9IChpbml0VmFsdWUubnVtZXJhdG9yICYmIGluaXRWYWx1ZS5udW1lcmF0b3IubGVuZ3RoICE9PSAwKSA/IGluaXRWYWx1ZS5udW1lcmF0b3IgOiBVTklUWV9BUlJBWTtcbiAgICAgIHRoaXMuZGVub21pbmF0b3IgPSAoaW5pdFZhbHVlLmRlbm9taW5hdG9yICYmIGluaXRWYWx1ZS5kZW5vbWluYXRvci5sZW5ndGggIT09IDApID8gaW5pdFZhbHVlLmRlbm9taW5hdG9yIDogVU5JVFlfQVJSQVk7XG4gICAgfVxuICAgIGVsc2UgaWYgKGluaXRVbml0cykge1xuICAgICAgcGFyc2UuY2FsbCh0aGlzLCBpbml0VW5pdHMpO1xuICAgICAgdGhpcy5zY2FsYXIgPSBpbml0VmFsdWU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgcGFyc2UuY2FsbCh0aGlzLCBpbml0VmFsdWUpO1xuICAgIH1cblxuICAgIC8vIG1hdGggd2l0aCB0ZW1wZXJhdHVyZXMgaXMgdmVyeSBsaW1pdGVkXG4gICAgaWYgKHRoaXMuZGVub21pbmF0b3Iuam9pbihcIipcIikuaW5kZXhPZihcInRlbXBcIikgPj0gMCkge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiQ2Fubm90IGRpdmlkZSB3aXRoIHRlbXBlcmF0dXJlc1wiKTtcbiAgICB9XG4gICAgaWYgKHRoaXMubnVtZXJhdG9yLmpvaW4oXCIqXCIpLmluZGV4T2YoXCJ0ZW1wXCIpID49IDApIHtcbiAgICAgIGlmICh0aGlzLm51bWVyYXRvci5sZW5ndGggPiAxKSB7XG4gICAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIkNhbm5vdCBtdWx0aXBseSBieSB0ZW1wZXJhdHVyZXNcIik7XG4gICAgICB9XG4gICAgICBpZiAoIWNvbXBhcmVBcnJheSh0aGlzLmRlbm9taW5hdG9yLCBVTklUWV9BUlJBWSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiQ2Fubm90IGRpdmlkZSB3aXRoIHRlbXBlcmF0dXJlc1wiKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmluaXRWYWx1ZSA9IGluaXRWYWx1ZTtcbiAgICB1cGRhdGVCYXNlU2NhbGFyLmNhbGwodGhpcyk7XG5cbiAgICBpZiAodGhpcy5pc1RlbXBlcmF0dXJlKCkgJiYgdGhpcy5iYXNlU2NhbGFyIDwgMCkge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiVGVtcGVyYXR1cmVzIG11c3Qgbm90IGJlIGxlc3MgdGhhbiBhYnNvbHV0ZSB6ZXJvXCIpO1xuICAgIH1cbiAgfVxuXG4gIFF0eS5wcm90b3R5cGUgPSB7XG4gICAgLy8gUHJvcGVybHkgc2V0IHVwIGNvbnN0cnVjdG9yXG4gICAgY29uc3RydWN0b3I6IFF0eSxcbiAgfTtcblxuICAvKipcbiAgICogQXNzZXJ0cyBjb25zdHJ1Y3RvciBhcmd1bWVudHMgYXJlIHZhbGlkXG4gICAqXG4gICAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBWYWx1ZSB0byB0ZXN0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbdW5pdHNdIC0gT3B0aW9uYWwgdW5pdHMgd2hlbiB2YWx1ZSBpcyBwYXNzZWQgYXMgYSBudW1iZXJcbiAgICpcbiAgICogQHJldHVybnMge3ZvaWR9XG4gICAqIEB0aHJvd3Mge1F0eUVycm9yfSBpZiBjb25zdHJ1Y3RvciBhcmd1bWVudHMgYXJlIGludmFsaWRcbiAgICovXG4gIGZ1bmN0aW9uIGFzc2VydFZhbGlkQ29uc3RydWN0b3JBcmdzKHZhbHVlLCB1bml0cykge1xuICAgIGlmICh1bml0cykge1xuICAgICAgaWYgKCEoaXNOdW1iZXIodmFsdWUpICYmIGlzU3RyaW5nKHVuaXRzKSkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiT25seSBudW1iZXIgYWNjZXB0ZWQgYXMgaW5pdGlhbGl6YXRpb24gdmFsdWUgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ3aGVuIHVuaXRzIGFyZSBleHBsaWNpdGx5IHByb3ZpZGVkXCIpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlmICghKGlzU3RyaW5nKHZhbHVlKSB8fFxuICAgICAgICAgICAgaXNOdW1iZXIodmFsdWUpIHx8XG4gICAgICAgICAgICBpc1F0eSh2YWx1ZSkgICAgfHxcbiAgICAgICAgICAgIGlzRGVmaW5pdGlvbk9iamVjdCh2YWx1ZSkpKSB7XG4gICAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIk9ubHkgc3RyaW5nLCBudW1iZXIgb3IgcXVhbnRpdHkgYWNjZXB0ZWQgYXMgXCIgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaW5nbGUgaW5pdGlhbGl6YXRpb24gdmFsdWVcIik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRlc3RzIGlmIGEgdmFsdWUgaXMgYSBRdHkgZGVmaW5pdGlvbiBvYmplY3RcbiAgICpcbiAgICogQHBhcmFtIHsqfSB2YWx1ZSAtIFZhbHVlIHRvIHRlc3RcbiAgICpcbiAgICogQHJldHVybnMge2Jvb2xlYW59IHRydWUgaWYgdmFsdWUgaXMgYSBkZWZpbml0aW9uIG9iamVjdCwgZmFsc2Ugb3RoZXJ3aXNlXG4gICAqL1xuICBmdW5jdGlvbiBpc0RlZmluaXRpb25PYmplY3QodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmIHZhbHVlLmhhc093blByb3BlcnR5KFwic2NhbGFyXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQmFzZVNjYWxhcigpIHtcbiAgICBpZiAodGhpcy5iYXNlU2NhbGFyKSB7XG4gICAgICByZXR1cm4gdGhpcy5iYXNlU2NhbGFyO1xuICAgIH1cbiAgICBpZiAodGhpcy5pc0Jhc2UoKSkge1xuICAgICAgdGhpcy5iYXNlU2NhbGFyID0gdGhpcy5zY2FsYXI7XG4gICAgICB0aGlzLnNpZ25hdHVyZSA9IHVuaXRTaWduYXR1cmUuY2FsbCh0aGlzKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgYmFzZSA9IHRoaXMudG9CYXNlKCk7XG4gICAgICB0aGlzLmJhc2VTY2FsYXIgPSBiYXNlLnNjYWxhcjtcbiAgICAgIHRoaXMuc2lnbmF0dXJlID0gYmFzZS5zaWduYXR1cmU7XG4gICAgfVxuICB9XG5cbiAgdmFyIEtJTkRTID0ge1xuICAgIFwiLTMxMjA3OFwiOiBcImVsYXN0YW5jZVwiLFxuICAgIFwiLTMxMjA1OFwiOiBcInJlc2lzdGFuY2VcIixcbiAgICBcIi0zMTIwMzhcIjogXCJpbmR1Y3RhbmNlXCIsXG4gICAgXCItMTUyMDU4XCI6IFwicG90ZW50aWFsXCIsXG4gICAgXCItMTUyMDQwXCI6IFwibWFnbmV0aXNtXCIsXG4gICAgXCItMTUyMDM4XCI6IFwibWFnbmV0aXNtXCIsXG4gICAgXCItNzk5N1wiOiBcInNwZWNpZmljX3ZvbHVtZVwiLFxuICAgIFwiLTc5XCI6IFwic25hcFwiLFxuICAgIFwiLTU5XCI6IFwiam9sdFwiLFxuICAgIFwiLTM5XCI6IFwiYWNjZWxlcmF0aW9uXCIsXG4gICAgXCItMzhcIjogXCJyYWRpYXRpb25cIixcbiAgICBcIi0yMFwiOiBcImZyZXF1ZW5jeVwiLFxuICAgIFwiLTE5XCI6IFwic3BlZWRcIixcbiAgICBcIi0xOFwiOiBcInZpc2Nvc2l0eVwiLFxuICAgIFwiLTE3XCI6IFwidm9sdW1ldHJpY19mbG93XCIsXG4gICAgXCItMVwiOiBcIndhdmVudW1iZXJcIixcbiAgICBcIjBcIjogXCJ1bml0bGVzc1wiLFxuICAgIFwiMVwiOiBcImxlbmd0aFwiLFxuICAgIFwiMlwiOiBcImFyZWFcIixcbiAgICBcIjNcIjogXCJ2b2x1bWVcIixcbiAgICBcIjIwXCI6IFwidGltZVwiLFxuICAgIFwiNDAwXCI6IFwidGVtcGVyYXR1cmVcIixcbiAgICBcIjc5NDFcIjogXCJ5YW5rXCIsXG4gICAgXCI3OTQyXCI6IFwicG93ZXJcIixcbiAgICBcIjc5NTlcIjogXCJwcmVzc3VyZVwiLFxuICAgIFwiNzk2MVwiOiBcImZvcmNlXCIsXG4gICAgXCI3OTYyXCI6IFwiZW5lcmd5XCIsXG4gICAgXCI3OTc5XCI6IFwidmlzY29zaXR5XCIsXG4gICAgXCI3OTgxXCI6IFwibW9tZW50dW1cIixcbiAgICBcIjc5ODJcIjogXCJhbmd1bGFyX21vbWVudHVtXCIsXG4gICAgXCI3OTk3XCI6IFwiZGVuc2l0eVwiLFxuICAgIFwiNzk5OFwiOiBcImFyZWFfZGVuc2l0eVwiLFxuICAgIFwiODAwMFwiOiBcIm1hc3NcIixcbiAgICBcIjE1MjAyMFwiOiBcInJhZGlhdGlvbl9leHBvc3VyZVwiLFxuICAgIFwiMTU5OTk5XCI6IFwibWFnbmV0aXNtXCIsXG4gICAgXCIxNjAwMDBcIjogXCJjdXJyZW50XCIsXG4gICAgXCIxNjAwMjBcIjogXCJjaGFyZ2VcIixcbiAgICBcIjMxMjA1OFwiOiBcImNvbmR1Y3RhbmNlXCIsXG4gICAgXCIzMTIwNzhcIjogXCJjYXBhY2l0YW5jZVwiLFxuICAgIFwiMzE5OTk4MFwiOiBcImFjdGl2aXR5XCIsXG4gICAgXCIzMTk5OTk3XCI6IFwibW9sYXJfY29uY2VudHJhdGlvblwiLFxuICAgIFwiMzIwMDAwMFwiOiBcInN1YnN0YW5jZVwiLFxuICAgIFwiNjM5OTk5OThcIjogXCJpbGx1bWluYW5jZVwiLFxuICAgIFwiNjQwMDAwMDBcIjogXCJsdW1pbm91c19wb3dlclwiLFxuICAgIFwiMTI4MDAwMDAwMFwiOiBcImN1cnJlbmN5XCIsXG4gICAgXCIyNTU5OTk5OTk4MFwiOiBcImluZm9ybWF0aW9uX3JhdGVcIixcbiAgICBcIjI1NjAwMDAwMDAwXCI6IFwiaW5mb3JtYXRpb25cIixcbiAgICBcIjUxMTk5OTk5OTk4MFwiOiBcImFuZ3VsYXJfdmVsb2NpdHlcIixcbiAgICBcIjUxMjAwMDAwMDAwMFwiOiBcImFuZ2xlXCJcbiAgfTtcblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbGlzdCBvZiBhdmFpbGFibGUgd2VsbC1rbm93biBraW5kcyBvZiB1bml0cywgZS5nLlxuICAgKiBcInJhZGlhdGlvblwiIG9yIFwibGVuZ3RoXCIuXG4gICAqXG4gICAqIEByZXR1cm5zIHtzdHJpbmdbXX0gbmFtZXMgb2Yga2luZHMgb2YgdW5pdHNcbiAgICovXG4gIGZ1bmN0aW9uIGdldEtpbmRzKCkge1xuICAgIHJldHVybiB1bmlxKE9iamVjdC5rZXlzKEtJTkRTKS5tYXAoZnVuY3Rpb24oa25vd25TaWduYXR1cmUpIHtcbiAgICAgIHJldHVybiBLSU5EU1trbm93blNpZ25hdHVyZV07XG4gICAgfSkpO1xuICB9XG5cbiAgUXR5LnByb3RvdHlwZS5raW5kID0gZnVuY3Rpb24oKSB7XG4gICAgcmV0dXJuIEtJTkRTW3RoaXMuc2lnbmF0dXJlLnRvU3RyaW5nKCldO1xuICB9O1xuXG4gIGFzc2lnbihRdHkucHJvdG90eXBlLCB7XG4gICAgaXNEZWdyZWVzOiBmdW5jdGlvbigpIHtcbiAgICAgIC8vIHNpZ25hdHVyZSBtYXkgbm90IGhhdmUgYmVlbiBjYWxjdWxhdGVkIHlldFxuICAgICAgcmV0dXJuICh0aGlzLnNpZ25hdHVyZSA9PT0gbnVsbCB8fCB0aGlzLnNpZ25hdHVyZSA9PT0gNDAwKSAmJlxuICAgICAgICB0aGlzLm51bWVyYXRvci5sZW5ndGggPT09IDEgJiZcbiAgICAgICAgY29tcGFyZUFycmF5KHRoaXMuZGVub21pbmF0b3IsIFVOSVRZX0FSUkFZKSAmJlxuICAgICAgICAodGhpcy5udW1lcmF0b3JbMF0ubWF0Y2goLzx0ZW1wLVtDRlJLXT4vKSB8fCB0aGlzLm51bWVyYXRvclswXS5tYXRjaCgvPChrZWx2aW58Y2Vsc2l1c3xyYW5raW5lfGZhaHJlbmhlaXQpPi8pKTtcbiAgICB9LFxuXG4gICAgaXNUZW1wZXJhdHVyZTogZnVuY3Rpb24oKSB7XG4gICAgICByZXR1cm4gdGhpcy5pc0RlZ3JlZXMoKSAmJiB0aGlzLm51bWVyYXRvclswXS5tYXRjaCgvPHRlbXAtW0NGUktdPi8pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gc3VidHJhY3RUZW1wZXJhdHVyZXMobGhzLHJocykge1xuICAgIHZhciBsaHNVbml0cyA9IGxocy51bml0cygpO1xuICAgIHZhciByaHNDb252ZXJ0ZWQgPSByaHMudG8obGhzVW5pdHMpO1xuICAgIHZhciBkc3REZWdyZWVzID0gUXR5KGdldERlZ3JlZVVuaXRzKGxoc1VuaXRzKSk7XG4gICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogbGhzLnNjYWxhciAtIHJoc0NvbnZlcnRlZC5zY2FsYXIsIFwibnVtZXJhdG9yXCI6IGRzdERlZ3JlZXMubnVtZXJhdG9yLCBcImRlbm9taW5hdG9yXCI6IGRzdERlZ3JlZXMuZGVub21pbmF0b3J9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN1YnRyYWN0VGVtcERlZ3JlZXModGVtcCxkZWcpIHtcbiAgICB2YXIgdGVtcERlZ3JlZXMgPSBkZWcudG8oZ2V0RGVncmVlVW5pdHModGVtcC51bml0cygpKSk7XG4gICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogdGVtcC5zY2FsYXIgLSB0ZW1wRGVncmVlcy5zY2FsYXIsIFwibnVtZXJhdG9yXCI6IHRlbXAubnVtZXJhdG9yLCBcImRlbm9taW5hdG9yXCI6IHRlbXAuZGVub21pbmF0b3J9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFRlbXBEZWdyZWVzKHRlbXAsZGVnKSB7XG4gICAgdmFyIHRlbXBEZWdyZWVzID0gZGVnLnRvKGdldERlZ3JlZVVuaXRzKHRlbXAudW5pdHMoKSkpO1xuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IHRlbXAuc2NhbGFyICsgdGVtcERlZ3JlZXMuc2NhbGFyLCBcIm51bWVyYXRvclwiOiB0ZW1wLm51bWVyYXRvciwgXCJkZW5vbWluYXRvclwiOiB0ZW1wLmRlbm9taW5hdG9yfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnZXREZWdyZWVVbml0cyh1bml0cykge1xuICAgIGlmICh1bml0cyA9PT0gXCJ0ZW1wS1wiKSB7XG4gICAgICByZXR1cm4gXCJkZWdLXCI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVuaXRzID09PSBcInRlbXBDXCIpIHtcbiAgICAgIHJldHVybiBcImRlZ0NcIjtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdHMgPT09IFwidGVtcEZcIikge1xuICAgICAgcmV0dXJuIFwiZGVnRlwiO1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0cyA9PT0gXCJ0ZW1wUlwiKSB7XG4gICAgICByZXR1cm4gXCJkZWdSXCI7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiVW5rbm93biB0eXBlIGZvciB0ZW1wIGNvbnZlcnNpb24gZnJvbTogXCIgKyB1bml0cyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdG9EZWdyZWVzKHNyYyxkc3QpIHtcbiAgICB2YXIgc3JjRGVnSyA9IHRvRGVnSyhzcmMpO1xuICAgIHZhciBkc3RVbml0cyA9IGRzdC51bml0cygpO1xuICAgIHZhciBkc3RTY2FsYXI7XG5cbiAgICBpZiAoZHN0VW5pdHMgPT09IFwiZGVnS1wiKSB7XG4gICAgICBkc3RTY2FsYXIgPSBzcmNEZWdLLnNjYWxhcjtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHN0VW5pdHMgPT09IFwiZGVnQ1wiKSB7XG4gICAgICBkc3RTY2FsYXIgPSBzcmNEZWdLLnNjYWxhciA7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRzdFVuaXRzID09PSBcImRlZ0ZcIikge1xuICAgICAgZHN0U2NhbGFyID0gc3JjRGVnSy5zY2FsYXIgKiA5IC8gNTtcbiAgICB9XG4gICAgZWxzZSBpZiAoZHN0VW5pdHMgPT09IFwiZGVnUlwiKSB7XG4gICAgICBkc3RTY2FsYXIgPSBzcmNEZWdLLnNjYWxhciAqIDkgLyA1O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIlVua25vd24gdHlwZSBmb3IgZGVncmVlIGNvbnZlcnNpb24gdG86IFwiICsgZHN0VW5pdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IGRzdFNjYWxhciwgXCJudW1lcmF0b3JcIjogZHN0Lm51bWVyYXRvciwgXCJkZW5vbWluYXRvclwiOiBkc3QuZGVub21pbmF0b3J9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvRGVnSyhxdHkpIHtcbiAgICB2YXIgdW5pdHMgPSBxdHkudW5pdHMoKTtcbiAgICB2YXIgcTtcbiAgICBpZiAodW5pdHMubWF0Y2goLyhkZWcpW0NGUktdLykpIHtcbiAgICAgIHEgPSBxdHkuYmFzZVNjYWxhcjtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdHMgPT09IFwidGVtcEtcIikge1xuICAgICAgcSA9IHF0eS5zY2FsYXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVuaXRzID09PSBcInRlbXBDXCIpIHtcbiAgICAgIHEgPSBxdHkuc2NhbGFyO1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0cyA9PT0gXCJ0ZW1wRlwiKSB7XG4gICAgICBxID0gcXR5LnNjYWxhciAqIDUgLyA5O1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0cyA9PT0gXCJ0ZW1wUlwiKSB7XG4gICAgICBxID0gcXR5LnNjYWxhciAqIDUgLyA5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIlVua25vd24gdHlwZSBmb3IgdGVtcCBjb252ZXJzaW9uIGZyb206IFwiICsgdW5pdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IHEsIFwibnVtZXJhdG9yXCI6IFtcIjxrZWx2aW4+XCJdLCBcImRlbm9taW5hdG9yXCI6IFVOSVRZX0FSUkFZfSk7XG4gIH1cblxuICBmdW5jdGlvbiB0b1RlbXAoc3JjLGRzdCkge1xuICAgIHZhciBkc3RVbml0cyA9IGRzdC51bml0cygpO1xuICAgIHZhciBkc3RTY2FsYXI7XG5cbiAgICBpZiAoZHN0VW5pdHMgPT09IFwidGVtcEtcIikge1xuICAgICAgZHN0U2NhbGFyID0gc3JjLmJhc2VTY2FsYXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRzdFVuaXRzID09PSBcInRlbXBDXCIpIHtcbiAgICAgIGRzdFNjYWxhciA9IHNyYy5iYXNlU2NhbGFyIC0gMjczLjE1O1xuICAgIH1cbiAgICBlbHNlIGlmIChkc3RVbml0cyA9PT0gXCJ0ZW1wRlwiKSB7XG4gICAgICBkc3RTY2FsYXIgPSAoc3JjLmJhc2VTY2FsYXIgKiA5IC8gNSkgLSA0NTkuNjc7XG4gICAgfVxuICAgIGVsc2UgaWYgKGRzdFVuaXRzID09PSBcInRlbXBSXCIpIHtcbiAgICAgIGRzdFNjYWxhciA9IHNyYy5iYXNlU2NhbGFyICogOSAvIDU7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiVW5rbm93biB0eXBlIGZvciB0ZW1wIGNvbnZlcnNpb24gdG86IFwiICsgZHN0VW5pdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IGRzdFNjYWxhciwgXCJudW1lcmF0b3JcIjogZHN0Lm51bWVyYXRvciwgXCJkZW5vbWluYXRvclwiOiBkc3QuZGVub21pbmF0b3J9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRvVGVtcEsocXR5KSB7XG4gICAgdmFyIHVuaXRzID0gcXR5LnVuaXRzKCk7XG4gICAgdmFyIHE7XG4gICAgaWYgKHVuaXRzLm1hdGNoKC8oZGVnKVtDRlJLXS8pKSB7XG4gICAgICBxID0gcXR5LmJhc2VTY2FsYXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKHVuaXRzID09PSBcInRlbXBLXCIpIHtcbiAgICAgIHEgPSBxdHkuc2NhbGFyO1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0cyA9PT0gXCJ0ZW1wQ1wiKSB7XG4gICAgICBxID0gcXR5LnNjYWxhciArIDI3My4xNTtcbiAgICB9XG4gICAgZWxzZSBpZiAodW5pdHMgPT09IFwidGVtcEZcIikge1xuICAgICAgcSA9IChxdHkuc2NhbGFyICsgNDU5LjY3KSAqIDUgLyA5O1xuICAgIH1cbiAgICBlbHNlIGlmICh1bml0cyA9PT0gXCJ0ZW1wUlwiKSB7XG4gICAgICBxID0gcXR5LnNjYWxhciAqIDUgLyA5O1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIlVua25vd24gdHlwZSBmb3IgdGVtcCBjb252ZXJzaW9uIGZyb206IFwiICsgdW5pdHMpO1xuICAgIH1cblxuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IHEsIFwibnVtZXJhdG9yXCI6IFtcIjx0ZW1wLUs+XCJdLCBcImRlbm9taW5hdG9yXCI6IFVOSVRZX0FSUkFZfSk7XG4gIH1cblxuICBhc3NpZ24oUXR5LnByb3RvdHlwZSwge1xuICAgIC8qKlxuICAgICAqIENvbnZlcnRzIHRvIG90aGVyIGNvbXBhdGlibGUgdW5pdHMuXG4gICAgICogSW5zdGFuY2UncyBjb252ZXJ0ZWQgcXVhbnRpdGllcyBhcmUgY2FjaGVkIGZvciBmYXN0ZXIgc3Vic2VxdWVudCBjYWxscy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KHN0cmluZ3xRdHkpfSBvdGhlciAtIFRhcmdldCB1bml0cyBhcyBzdHJpbmcgb3IgcmV0cmlldmVkIGZyb21cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlciBRdHkgaW5zdGFuY2UgKHNjYWxhciBpcyBpZ25vcmVkKVxuICAgICAqXG4gICAgICogQHJldHVybnMge1F0eX0gTmV3IGNvbnZlcnRlZCBRdHkgaW5zdGFuY2Ugd2l0aCB0YXJnZXQgdW5pdHNcbiAgICAgKlxuICAgICAqIEB0aHJvd3Mge1F0eUVycm9yfSBpZiB0YXJnZXQgdW5pdHMgYXJlIGluY29tcGF0aWJsZVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiB2YXIgd2VpZ2h0ID0gUXR5KFwiMjUga2dcIik7XG4gICAgICogd2VpZ2h0LnRvKFwibGJcIik7IC8vID0+IFF0eShcIjU1LjExNTU2NTU0NjIxOTM5IGxic1wiKTtcbiAgICAgKiB3ZWlnaHQudG8oUXR5KFwiMyBnXCIpKTsgLy8gPT4gUXR5KFwiMjUwMDAgZ1wiKTsgLy8gc2NhbGFyIG9mIHBhc3NlZCBRdHkgaXMgaWdub3JlZFxuICAgICAqL1xuICAgIHRvOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgdmFyIGNhY2hlZCwgdGFyZ2V0O1xuXG4gICAgICBpZiAob3RoZXIgPT09IHVuZGVmaW5lZCB8fCBvdGhlciA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgaWYgKCFpc1N0cmluZyhvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudG8ob3RoZXIudW5pdHMoKSk7XG4gICAgICB9XG5cbiAgICAgIGNhY2hlZCA9IHRoaXMuX2NvbnZlcnNpb25DYWNoZVtvdGhlcl07XG4gICAgICBpZiAoY2FjaGVkKSB7XG4gICAgICAgIHJldHVybiBjYWNoZWQ7XG4gICAgICB9XG5cbiAgICAgIC8vIEluc3RhbnRpYXRpbmcgdGFyZ2V0IHRvIG5vcm1hbGl6ZSB1bml0c1xuICAgICAgdGFyZ2V0ID0gUXR5KG90aGVyKTtcbiAgICAgIGlmICh0YXJnZXQudW5pdHMoKSA9PT0gdGhpcy51bml0cygpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAoIXRoaXMuaXNDb21wYXRpYmxlKHRhcmdldCkpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNJbnZlcnNlKHRhcmdldCkpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0aGlzLmludmVyc2UoKS50byhvdGhlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgdGhyb3dJbmNvbXBhdGlibGVVbml0cyh0aGlzLnVuaXRzKCksIHRhcmdldC51bml0cygpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmICh0YXJnZXQuaXNUZW1wZXJhdHVyZSgpKSB7XG4gICAgICAgICAgdGFyZ2V0ID0gdG9UZW1wKHRoaXMsdGFyZ2V0KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0YXJnZXQuaXNEZWdyZWVzKCkpIHtcbiAgICAgICAgICB0YXJnZXQgPSB0b0RlZ3JlZXModGhpcyx0YXJnZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHZhciBxID0gZGl2U2FmZSh0aGlzLmJhc2VTY2FsYXIsIHRhcmdldC5iYXNlU2NhbGFyKTtcbiAgICAgICAgICB0YXJnZXQgPSBRdHkoe1wic2NhbGFyXCI6IHEsIFwibnVtZXJhdG9yXCI6IHRhcmdldC5udW1lcmF0b3IsIFwiZGVub21pbmF0b3JcIjogdGFyZ2V0LmRlbm9taW5hdG9yfSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdGhpcy5fY29udmVyc2lvbkNhY2hlW290aGVyXSA9IHRhcmdldDtcbiAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgfSxcblxuICAgIC8vIGNvbnZlcnQgdG8gYmFzZSBTSSB1bml0c1xuICAgIC8vIHJlc3VsdHMgb2YgdGhlIGNvbnZlcnNpb24gYXJlIGNhY2hlZCBzbyBzdWJzZXF1ZW50IGNhbGxzIHRvIHRoaXMgd2lsbCBiZSBmYXN0XG4gICAgdG9CYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLmlzQmFzZSgpKSB7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1RlbXBlcmF0dXJlKCkpIHtcbiAgICAgICAgcmV0dXJuIHRvVGVtcEsodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBjYWNoZWQgPSBiYXNlVW5pdENhY2hlW3RoaXMudW5pdHMoKV07XG4gICAgICBpZiAoIWNhY2hlZCkge1xuICAgICAgICBjYWNoZWQgPSB0b0Jhc2VVbml0cyh0aGlzLm51bWVyYXRvcix0aGlzLmRlbm9taW5hdG9yKTtcbiAgICAgICAgYmFzZVVuaXRDYWNoZVt0aGlzLnVuaXRzKCldID0gY2FjaGVkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGNhY2hlZC5tdWwodGhpcy5zY2FsYXIpO1xuICAgIH0sXG5cbiAgICAvLyBDb252ZXJ0cyB0aGUgdW5pdCBiYWNrIHRvIGEgZmxvYXQgaWYgaXQgaXMgdW5pdGxlc3MuICBPdGhlcndpc2UgcmFpc2VzIGFuIGV4Y2VwdGlvblxuICAgIHRvRmxvYXQ6IGZ1bmN0aW9uKCkge1xuICAgICAgaWYgKHRoaXMuaXNVbml0bGVzcygpKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjYWxhcjtcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIkNhbid0IGNvbnZlcnQgdG8gRmxvYXQgdW5sZXNzIHVuaXRsZXNzLiAgVXNlIFVuaXQjc2NhbGFyXCIpO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBuZWFyZXN0IG11bHRpcGxlIG9mIHF1YW50aXR5IHBhc3NlZCBhc1xuICAgICAqIHByZWNpc2lvblxuICAgICAqXG4gICAgICogQHBhcmFtIHsoUXR5fHN0cmluZ3xudW1iZXIpfSBwcmVjUXVhbnRpdHkgLSBRdWFudGl0eSwgc3RyaW5nIGZvcm1hdGVkXG4gICAgICogICBxdWFudGl0eSBvciBudW1iZXIgYXMgZXhwZWN0ZWQgcHJlY2lzaW9uXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyB7UXR5fSBOZWFyZXN0IG11bHRpcGxlIG9mIHByZWNRdWFudGl0eVxuICAgICAqXG4gICAgICogQGV4YW1wbGVcbiAgICAgKiBRdHkoJzUuNSBmdCcpLnRvUHJlYygnMiBmdCcpOyAvLyByZXR1cm5zIDYgZnRcbiAgICAgKiBRdHkoJzAuOCBjdScpLnRvUHJlYygnMC4yNSBjdScpOyAvLyByZXR1cm5zIDAuNzUgY3VcbiAgICAgKiBRdHkoJzYuMzc4MiBtJykudG9QcmVjKCdjbScpOyAvLyByZXR1cm5zIDYuMzggbVxuICAgICAqIFF0eSgnMS4xNDYgTVBhJykudG9QcmVjKCcwLjEgYmFyJyk7IC8vIHJldHVybnMgMS4xNSBNUGFcbiAgICAgKlxuICAgICAqL1xuICAgIHRvUHJlYzogZnVuY3Rpb24ocHJlY1F1YW50aXR5KSB7XG4gICAgICBpZiAoaXNTdHJpbmcocHJlY1F1YW50aXR5KSkge1xuICAgICAgICBwcmVjUXVhbnRpdHkgPSBRdHkocHJlY1F1YW50aXR5KTtcbiAgICAgIH1cbiAgICAgIGlmIChpc051bWJlcihwcmVjUXVhbnRpdHkpKSB7XG4gICAgICAgIHByZWNRdWFudGl0eSA9IFF0eShwcmVjUXVhbnRpdHkgKyBcIiBcIiArIHRoaXMudW5pdHMoKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5pc1VuaXRsZXNzKCkpIHtcbiAgICAgICAgcHJlY1F1YW50aXR5ID0gcHJlY1F1YW50aXR5LnRvKHRoaXMudW5pdHMoKSk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICghcHJlY1F1YW50aXR5LmlzVW5pdGxlc3MoKSkge1xuICAgICAgICB0aHJvd0luY29tcGF0aWJsZVVuaXRzKHRoaXMudW5pdHMoKSwgcHJlY1F1YW50aXR5LnVuaXRzKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAocHJlY1F1YW50aXR5LnNjYWxhciA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJEaXZpZGUgYnkgemVyb1wiKTtcbiAgICAgIH1cblxuICAgICAgdmFyIHByZWNSb3VuZGVkUmVzdWx0ID0gbXVsU2FmZShcbiAgICAgICAgTWF0aC5yb3VuZCh0aGlzLnNjYWxhciAvIHByZWNRdWFudGl0eS5zY2FsYXIpLFxuICAgICAgICBwcmVjUXVhbnRpdHkuc2NhbGFyXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gUXR5KHByZWNSb3VuZGVkUmVzdWx0ICsgdGhpcy51bml0cygpKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8qKlxuICAgKiBDb25maWd1cmVzIGFuZCByZXR1cm5zIGEgZmFzdCBmdW5jdGlvbiB0byBjb252ZXJ0XG4gICAqIE51bWJlciB2YWx1ZXMgZnJvbSB1bml0cyB0byBvdGhlcnMuXG4gICAqIFVzZWZ1bCB0byBlZmZpY2llbnRseSBjb252ZXJ0IGxhcmdlIGFycmF5IG9mIHZhbHVlc1xuICAgKiB3aXRoIHNhbWUgdW5pdHMgaW50byBvdGhlcnMgd2l0aCBpdGVyYXRpdmUgbWV0aG9kcy5cbiAgICogRG9lcyBub3QgdGFrZSBjYXJlIG9mIHJvdW5kaW5nIGlzc3Vlcy5cbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmd9IHNyY1VuaXRzIFVuaXRzIG9mIHZhbHVlcyB0byBjb252ZXJ0XG4gICAqIEBwYXJhbSB7c3RyaW5nfSBkc3RVbml0cyBVbml0cyB0byBjb252ZXJ0IHRvXG4gICAqXG4gICAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQ29udmVydGluZyBmdW5jdGlvbiBhY2NlcHRpbmcgTnVtYmVyIHZhbHVlXG4gICAqICAgYW5kIHJldHVybmluZyBjb252ZXJ0ZWQgdmFsdWVcbiAgICpcbiAgICogQHRocm93cyBcIkluY29tcGF0aWJsZSB1bml0c1wiIGlmIHVuaXRzIGFyZSBpbmNvbXBhdGlibGVcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogLy8gQ29udmVydGluZyBsYXJnZSBhcnJheSBvZiBudW1iZXJzIHdpdGggdGhlIHNhbWUgdW5pdHNcbiAgICogLy8gaW50byBvdGhlciB1bml0c1xuICAgKiB2YXIgY29udmVydGVyID0gUXR5LnN3aWZ0Q29udmVydGVyKFwibS9oXCIsIFwiZnQvc1wiKTtcbiAgICogdmFyIGNvbnZlcnRlZFNlcmllID0gbGFyZ2VTZXJpZS5tYXAoY29udmVydGVyKTtcbiAgICpcbiAgICovXG4gIGZ1bmN0aW9uIHN3aWZ0Q29udmVydGVyKHNyY1VuaXRzLCBkc3RVbml0cykge1xuICAgIHZhciBzcmNRdHkgPSBRdHkoc3JjVW5pdHMpO1xuICAgIHZhciBkc3RRdHkgPSBRdHkoZHN0VW5pdHMpO1xuXG4gICAgaWYgKHNyY1F0eS5lcShkc3RRdHkpKSB7XG4gICAgICByZXR1cm4gaWRlbnRpdHk7XG4gICAgfVxuXG4gICAgdmFyIGNvbnZlcnQ7XG4gICAgaWYgKCFzcmNRdHkuaXNUZW1wZXJhdHVyZSgpKSB7XG4gICAgICBjb252ZXJ0ID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICogc3JjUXR5LmJhc2VTY2FsYXIgLyBkc3RRdHkuYmFzZVNjYWxhcjtcbiAgICAgIH07XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgY29udmVydCA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgICAgIC8vIFRPRE8gTm90IG9wdGltaXplZFxuICAgICAgICByZXR1cm4gc3JjUXR5Lm11bCh2YWx1ZSkudG8oZHN0UXR5KS5zY2FsYXI7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiBjb252ZXJ0ZXIodmFsdWUpIHtcbiAgICAgIHZhciBpLCBsZW5ndGgsIHJlc3VsdDtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIGNvbnZlcnQodmFsdWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGxlbmd0aCA9IHZhbHVlLmxlbmd0aDtcbiAgICAgICAgcmVzdWx0ID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgICAgIHJlc3VsdC5wdXNoKGNvbnZlcnQodmFsdWVbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfVxuICAgIH07XG4gIH1cblxuICB2YXIgYmFzZVVuaXRDYWNoZSA9IHt9O1xuXG4gIGZ1bmN0aW9uIHRvQmFzZVVuaXRzKG51bWVyYXRvcixkZW5vbWluYXRvcikge1xuICAgIHZhciBudW0gPSBbXTtcbiAgICB2YXIgZGVuID0gW107XG4gICAgdmFyIHEgPSAxO1xuICAgIHZhciB1bml0O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbnVtZXJhdG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICB1bml0ID0gbnVtZXJhdG9yW2ldO1xuICAgICAgaWYgKFBSRUZJWF9WQUxVRVNbdW5pdF0pIHtcbiAgICAgICAgLy8gd29ya2Fyb3VuZCB0byBmaXhcbiAgICAgICAgLy8gMC4xICogMC4xID0+IDAuMDEwMDAwMDAwMDAwMDAwMDAyXG4gICAgICAgIHEgPSBtdWxTYWZlKHEsIFBSRUZJWF9WQUxVRVNbdW5pdF0pO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIGlmIChVTklUX1ZBTFVFU1t1bml0XSkge1xuICAgICAgICAgIHEgKj0gVU5JVF9WQUxVRVNbdW5pdF0uc2NhbGFyO1xuXG4gICAgICAgICAgaWYgKFVOSVRfVkFMVUVTW3VuaXRdLm51bWVyYXRvcikge1xuICAgICAgICAgICAgbnVtLnB1c2goVU5JVF9WQUxVRVNbdW5pdF0ubnVtZXJhdG9yKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKFVOSVRfVkFMVUVTW3VuaXRdLmRlbm9taW5hdG9yKSB7XG4gICAgICAgICAgICBkZW4ucHVzaChVTklUX1ZBTFVFU1t1bml0XS5kZW5vbWluYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgZGVub21pbmF0b3IubGVuZ3RoOyBqKyspIHtcbiAgICAgIHVuaXQgPSBkZW5vbWluYXRvcltqXTtcbiAgICAgIGlmIChQUkVGSVhfVkFMVUVTW3VuaXRdKSB7XG4gICAgICAgIHEgLz0gUFJFRklYX1ZBTFVFU1t1bml0XTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBpZiAoVU5JVF9WQUxVRVNbdW5pdF0pIHtcbiAgICAgICAgICBxIC89IFVOSVRfVkFMVUVTW3VuaXRdLnNjYWxhcjtcblxuICAgICAgICAgIGlmIChVTklUX1ZBTFVFU1t1bml0XS5udW1lcmF0b3IpIHtcbiAgICAgICAgICAgIGRlbi5wdXNoKFVOSVRfVkFMVUVTW3VuaXRdLm51bWVyYXRvcik7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChVTklUX1ZBTFVFU1t1bml0XS5kZW5vbWluYXRvcikge1xuICAgICAgICAgICAgbnVtLnB1c2goVU5JVF9WQUxVRVNbdW5pdF0uZGVub21pbmF0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEZsYXR0ZW5cbiAgICBudW0gPSBudW0ucmVkdWNlKGZ1bmN0aW9uKGEsYikge1xuICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgIH0sIFtdKTtcbiAgICBkZW4gPSBkZW4ucmVkdWNlKGZ1bmN0aW9uKGEsYikge1xuICAgICAgcmV0dXJuIGEuY29uY2F0KGIpO1xuICAgIH0sIFtdKTtcblxuICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IHEsIFwibnVtZXJhdG9yXCI6IG51bSwgXCJkZW5vbWluYXRvclwiOiBkZW59KTtcbiAgfVxuXG4gIFF0eS5wYXJzZSA9IGdsb2JhbFBhcnNlO1xuXG4gIFF0eS5nZXRVbml0cyA9IGdldFVuaXRzO1xuICBRdHkuZ2V0QWxpYXNlcyA9IGdldEFsaWFzZXM7XG5cbiAgUXR5Lm11bFNhZmUgPSBtdWxTYWZlO1xuICBRdHkuZGl2U2FmZSA9IGRpdlNhZmU7XG5cbiAgUXR5LmdldEtpbmRzID0gZ2V0S2luZHM7XG5cbiAgUXR5LnN3aWZ0Q29udmVydGVyID0gc3dpZnRDb252ZXJ0ZXI7XG5cbiAgUXR5LkVycm9yID0gUXR5RXJyb3I7XG5cbiAgYXNzaWduKFF0eS5wcm90b3R5cGUsIHtcbiAgICAvLyBSZXR1cm5zIG5ldyBpbnN0YW5jZSB3aXRoIHVuaXRzIG9mIHRoaXNcbiAgICBhZGQ6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICBpZiAoaXNTdHJpbmcob3RoZXIpKSB7XG4gICAgICAgIG90aGVyID0gUXR5KG90aGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmlzQ29tcGF0aWJsZShvdGhlcikpIHtcbiAgICAgICAgdGhyb3dJbmNvbXBhdGlibGVVbml0cyh0aGlzLnVuaXRzKCksIG90aGVyLnVuaXRzKCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1RlbXBlcmF0dXJlKCkgJiYgb3RoZXIuaXNUZW1wZXJhdHVyZSgpKSB7XG4gICAgICAgIHRocm93IG5ldyBRdHlFcnJvcihcIkNhbm5vdCBhZGQgdHdvIHRlbXBlcmF0dXJlc1wiKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRoaXMuaXNUZW1wZXJhdHVyZSgpKSB7XG4gICAgICAgIHJldHVybiBhZGRUZW1wRGVncmVlcyh0aGlzLCBvdGhlcik7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvdGhlci5pc1RlbXBlcmF0dXJlKCkpIHtcbiAgICAgICAgcmV0dXJuIGFkZFRlbXBEZWdyZWVzKG90aGVyLCB0aGlzKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogdGhpcy5zY2FsYXIgKyBvdGhlci50byh0aGlzKS5zY2FsYXIsIFwibnVtZXJhdG9yXCI6IHRoaXMubnVtZXJhdG9yLCBcImRlbm9taW5hdG9yXCI6IHRoaXMuZGVub21pbmF0b3J9KTtcbiAgICB9LFxuXG4gICAgc3ViOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKGlzU3RyaW5nKG90aGVyKSkge1xuICAgICAgICBvdGhlciA9IFF0eShvdGhlcik7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy5pc0NvbXBhdGlibGUob3RoZXIpKSB7XG4gICAgICAgIHRocm93SW5jb21wYXRpYmxlVW5pdHModGhpcy51bml0cygpLCBvdGhlci51bml0cygpKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNUZW1wZXJhdHVyZSgpICYmIG90aGVyLmlzVGVtcGVyYXR1cmUoKSkge1xuICAgICAgICByZXR1cm4gc3VidHJhY3RUZW1wZXJhdHVyZXModGhpcyxvdGhlcik7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0aGlzLmlzVGVtcGVyYXR1cmUoKSkge1xuICAgICAgICByZXR1cm4gc3VidHJhY3RUZW1wRGVncmVlcyh0aGlzLG90aGVyKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG90aGVyLmlzVGVtcGVyYXR1cmUoKSkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJDYW5ub3Qgc3VidHJhY3QgYSB0ZW1wZXJhdHVyZSBmcm9tIGEgZGlmZmVyZW50aWFsIGRlZ3JlZSB1bml0XCIpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gUXR5KHtcInNjYWxhclwiOiB0aGlzLnNjYWxhciAtIG90aGVyLnRvKHRoaXMpLnNjYWxhciwgXCJudW1lcmF0b3JcIjogdGhpcy5udW1lcmF0b3IsIFwiZGVub21pbmF0b3JcIjogdGhpcy5kZW5vbWluYXRvcn0pO1xuICAgIH0sXG5cbiAgICBtdWw6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICBpZiAoaXNOdW1iZXIob3RoZXIpKSB7XG4gICAgICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IG11bFNhZmUodGhpcy5zY2FsYXIsIG90aGVyKSwgXCJudW1lcmF0b3JcIjogdGhpcy5udW1lcmF0b3IsIFwiZGVub21pbmF0b3JcIjogdGhpcy5kZW5vbWluYXRvcn0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNTdHJpbmcob3RoZXIpKSB7XG4gICAgICAgIG90aGVyID0gUXR5KG90aGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKCh0aGlzLmlzVGVtcGVyYXR1cmUoKSB8fCBvdGhlci5pc1RlbXBlcmF0dXJlKCkpICYmICEodGhpcy5pc1VuaXRsZXNzKCkgfHwgb3RoZXIuaXNVbml0bGVzcygpKSkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJDYW5ub3QgbXVsdGlwbHkgYnkgdGVtcGVyYXR1cmVzXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBRdWFudGl0aWVzIHNob3VsZCBiZSBtdWx0aXBsaWVkIHdpdGggc2FtZSB1bml0cyBpZiBjb21wYXRpYmxlLCB3aXRoIGJhc2UgdW5pdHMgZWxzZVxuICAgICAgdmFyIG9wMSA9IHRoaXM7XG4gICAgICB2YXIgb3AyID0gb3RoZXI7XG5cbiAgICAgIC8vIHNvIGFzIG5vdCB0byBjb25mdXNlIHJlc3VsdHMsIG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpc2lvbiBiZXR3ZWVuIHRlbXBlcmF0dXJlIGRlZ3JlZXMgd2lsbCBtYWludGFpbiBvcmlnaW5hbCB1bml0IGluZm8gaW4gbnVtL2RlblxuICAgICAgLy8gbXVsdGlwbGljYXRpb24gYW5kIGRpdmlzaW9uIGJldHdlZW4gZGVnW0NGUktdIGNhbiBuZXZlciBmYWN0b3IgZWFjaCBvdGhlciBvdXQsIG9ubHkgdGhlbXNlbHZlczogXCJkZWdLKmRlZ0MvZGVnQ14yXCIgPT0gXCJkZWdLL2RlZ0NcIlxuICAgICAgaWYgKG9wMS5pc0NvbXBhdGlibGUob3AyKSAmJiBvcDEuc2lnbmF0dXJlICE9PSA0MDApIHtcbiAgICAgICAgb3AyID0gb3AyLnRvKG9wMSk7XG4gICAgICB9XG4gICAgICB2YXIgbnVtZGVuc2NhbGUgPSBjbGVhblRlcm1zKG9wMS5udW1lcmF0b3IsIG9wMS5kZW5vbWluYXRvciwgb3AyLm51bWVyYXRvciwgb3AyLmRlbm9taW5hdG9yKTtcblxuICAgICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogbXVsU2FmZShvcDEuc2NhbGFyLCBvcDIuc2NhbGFyLCBudW1kZW5zY2FsZVsyXSksIFwibnVtZXJhdG9yXCI6IG51bWRlbnNjYWxlWzBdLCBcImRlbm9taW5hdG9yXCI6IG51bWRlbnNjYWxlWzFdfSk7XG4gICAgfSxcblxuICAgIGRpdjogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIGlmIChpc051bWJlcihvdGhlcikpIHtcbiAgICAgICAgaWYgKG90aGVyID09PSAwKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiRGl2aWRlIGJ5IHplcm9cIik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogdGhpcy5zY2FsYXIgLyBvdGhlciwgXCJudW1lcmF0b3JcIjogdGhpcy5udW1lcmF0b3IsIFwiZGVub21pbmF0b3JcIjogdGhpcy5kZW5vbWluYXRvcn0pO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNTdHJpbmcob3RoZXIpKSB7XG4gICAgICAgIG90aGVyID0gUXR5KG90aGVyKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG90aGVyLnNjYWxhciA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJEaXZpZGUgYnkgemVyb1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKG90aGVyLmlzVGVtcGVyYXR1cmUoKSkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJDYW5ub3QgZGl2aWRlIHdpdGggdGVtcGVyYXR1cmVzXCIpO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5pc1RlbXBlcmF0dXJlKCkgJiYgIW90aGVyLmlzVW5pdGxlc3MoKSkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJDYW5ub3QgZGl2aWRlIHdpdGggdGVtcGVyYXR1cmVzXCIpO1xuICAgICAgfVxuXG4gICAgICAvLyBRdWFudGl0aWVzIHNob3VsZCBiZSBtdWx0aXBsaWVkIHdpdGggc2FtZSB1bml0cyBpZiBjb21wYXRpYmxlLCB3aXRoIGJhc2UgdW5pdHMgZWxzZVxuICAgICAgdmFyIG9wMSA9IHRoaXM7XG4gICAgICB2YXIgb3AyID0gb3RoZXI7XG5cbiAgICAgIC8vIHNvIGFzIG5vdCB0byBjb25mdXNlIHJlc3VsdHMsIG11bHRpcGxpY2F0aW9uIGFuZCBkaXZpc2lvbiBiZXR3ZWVuIHRlbXBlcmF0dXJlIGRlZ3JlZXMgd2lsbCBtYWludGFpbiBvcmlnaW5hbCB1bml0IGluZm8gaW4gbnVtL2RlblxuICAgICAgLy8gbXVsdGlwbGljYXRpb24gYW5kIGRpdmlzaW9uIGJldHdlZW4gZGVnW0NGUktdIGNhbiBuZXZlciBmYWN0b3IgZWFjaCBvdGhlciBvdXQsIG9ubHkgdGhlbXNlbHZlczogXCJkZWdLKmRlZ0MvZGVnQ14yXCIgPT0gXCJkZWdLL2RlZ0NcIlxuICAgICAgaWYgKG9wMS5pc0NvbXBhdGlibGUob3AyKSAmJiBvcDEuc2lnbmF0dXJlICE9PSA0MDApIHtcbiAgICAgICAgb3AyID0gb3AyLnRvKG9wMSk7XG4gICAgICB9XG4gICAgICB2YXIgbnVtZGVuc2NhbGUgPSBjbGVhblRlcm1zKG9wMS5udW1lcmF0b3IsIG9wMS5kZW5vbWluYXRvciwgb3AyLmRlbm9taW5hdG9yLCBvcDIubnVtZXJhdG9yKTtcblxuICAgICAgcmV0dXJuIFF0eSh7XCJzY2FsYXJcIjogbXVsU2FmZShvcDEuc2NhbGFyLCBudW1kZW5zY2FsZVsyXSkgLyBvcDIuc2NhbGFyLCBcIm51bWVyYXRvclwiOiBudW1kZW5zY2FsZVswXSwgXCJkZW5vbWluYXRvclwiOiBudW1kZW5zY2FsZVsxXX0pO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zIGEgUXR5IHRoYXQgaXMgdGhlIGludmVyc2Ugb2YgdGhpcyBRdHksXG4gICAgaW52ZXJzZTogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5pc1RlbXBlcmF0dXJlKCkpIHtcbiAgICAgICAgdGhyb3cgbmV3IFF0eUVycm9yKFwiQ2Fubm90IGRpdmlkZSB3aXRoIHRlbXBlcmF0dXJlc1wiKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnNjYWxhciA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUXR5RXJyb3IoXCJEaXZpZGUgYnkgemVyb1wiKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBRdHkoe1wic2NhbGFyXCI6IDEgLyB0aGlzLnNjYWxhciwgXCJudW1lcmF0b3JcIjogdGhpcy5kZW5vbWluYXRvciwgXCJkZW5vbWluYXRvclwiOiB0aGlzLm51bWVyYXRvcn0pO1xuICAgIH1cbiAgfSk7XG5cbiAgZnVuY3Rpb24gY2xlYW5UZXJtcyhudW0xLCBkZW4xLCBudW0yLCBkZW4yKSB7XG4gICAgZnVuY3Rpb24gbm90VW5pdHkodmFsKSB7XG4gICAgICByZXR1cm4gdmFsICE9PSBVTklUWTtcbiAgICB9XG5cbiAgICBudW0xID0gbnVtMS5maWx0ZXIobm90VW5pdHkpO1xuICAgIG51bTIgPSBudW0yLmZpbHRlcihub3RVbml0eSk7XG4gICAgZGVuMSA9IGRlbjEuZmlsdGVyKG5vdFVuaXR5KTtcbiAgICBkZW4yID0gZGVuMi5maWx0ZXIobm90VW5pdHkpO1xuXG4gICAgdmFyIGNvbWJpbmVkID0ge307XG5cbiAgICBmdW5jdGlvbiBjb21iaW5lVGVybXModGVybXMsIGRpcmVjdGlvbikge1xuICAgICAgdmFyIGs7XG4gICAgICB2YXIgcHJlZml4O1xuICAgICAgdmFyIHByZWZpeFZhbHVlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0ZXJtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoUFJFRklYX1ZBTFVFU1t0ZXJtc1tpXV0pIHtcbiAgICAgICAgICBrID0gdGVybXNbaSArIDFdO1xuICAgICAgICAgIHByZWZpeCA9IHRlcm1zW2ldO1xuICAgICAgICAgIHByZWZpeFZhbHVlID0gUFJFRklYX1ZBTFVFU1twcmVmaXhdO1xuICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBrID0gdGVybXNbaV07XG4gICAgICAgICAgcHJlZml4ID0gbnVsbDtcbiAgICAgICAgICBwcmVmaXhWYWx1ZSA9IDE7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGsgJiYgayAhPT0gVU5JVFkpIHtcbiAgICAgICAgICBpZiAoY29tYmluZWRba10pIHtcbiAgICAgICAgICAgIGNvbWJpbmVkW2tdWzBdICs9IGRpcmVjdGlvbjtcbiAgICAgICAgICAgIHZhciBjb21iaW5lZFByZWZpeFZhbHVlID0gY29tYmluZWRba11bMl0gPyBQUkVGSVhfVkFMVUVTW2NvbWJpbmVkW2tdWzJdXSA6IDE7XG4gICAgICAgICAgICBjb21iaW5lZFtrXVtkaXJlY3Rpb24gPT09IDEgPyAzIDogNF0gKj0gZGl2U2FmZShwcmVmaXhWYWx1ZSwgY29tYmluZWRQcmVmaXhWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY29tYmluZWRba10gPSBbZGlyZWN0aW9uLCBrLCBwcmVmaXgsIDEsIDFdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGNvbWJpbmVUZXJtcyhudW0xLCAxKTtcbiAgICBjb21iaW5lVGVybXMoZGVuMSwgLTEpO1xuICAgIGNvbWJpbmVUZXJtcyhudW0yLCAxKTtcbiAgICBjb21iaW5lVGVybXMoZGVuMiwgLTEpO1xuXG4gICAgdmFyIG51bSA9IFtdO1xuICAgIHZhciBkZW4gPSBbXTtcbiAgICB2YXIgc2NhbGUgPSAxO1xuXG4gICAgZm9yICh2YXIgcHJvcCBpbiBjb21iaW5lZCkge1xuICAgICAgaWYgKGNvbWJpbmVkLmhhc093blByb3BlcnR5KHByb3ApKSB7XG4gICAgICAgIHZhciBpdGVtID0gY29tYmluZWRbcHJvcF07XG4gICAgICAgIHZhciBuO1xuICAgICAgICBpZiAoaXRlbVswXSA+IDApIHtcbiAgICAgICAgICBmb3IgKG4gPSAwOyBuIDwgaXRlbVswXTsgbisrKSB7XG4gICAgICAgICAgICBudW0ucHVzaChpdGVtWzJdID09PSBudWxsID8gaXRlbVsxXSA6IFtpdGVtWzJdLCBpdGVtWzFdXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGl0ZW1bMF0gPCAwKSB7XG4gICAgICAgICAgZm9yIChuID0gMDsgbiA8IC1pdGVtWzBdOyBuKyspIHtcbiAgICAgICAgICAgIGRlbi5wdXNoKGl0ZW1bMl0gPT09IG51bGwgPyBpdGVtWzFdIDogW2l0ZW1bMl0sIGl0ZW1bMV1dKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc2NhbGUgKj0gZGl2U2FmZShpdGVtWzNdLCBpdGVtWzRdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAobnVtLmxlbmd0aCA9PT0gMCkge1xuICAgICAgbnVtID0gVU5JVFlfQVJSQVk7XG4gICAgfVxuICAgIGlmIChkZW4ubGVuZ3RoID09PSAwKSB7XG4gICAgICBkZW4gPSBVTklUWV9BUlJBWTtcbiAgICB9XG5cbiAgICAvLyBGbGF0dGVuXG4gICAgbnVtID0gbnVtLnJlZHVjZShmdW5jdGlvbihhLGIpIHtcbiAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICB9LCBbXSk7XG4gICAgZGVuID0gZGVuLnJlZHVjZShmdW5jdGlvbihhLGIpIHtcbiAgICAgIHJldHVybiBhLmNvbmNhdChiKTtcbiAgICB9LCBbXSk7XG5cbiAgICByZXR1cm4gW251bSwgZGVuLCBzY2FsZV07XG4gIH1cblxuICBhc3NpZ24oUXR5LnByb3RvdHlwZSwge1xuICAgIGVxOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVRvKG90aGVyKSA9PT0gMDtcbiAgICB9LFxuXG4gICAgbHQ6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wYXJlVG8ob3RoZXIpID09PSAtMTtcbiAgICB9LFxuXG4gICAgbHRlOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgcmV0dXJuIHRoaXMuZXEob3RoZXIpIHx8IHRoaXMubHQob3RoZXIpO1xuICAgIH0sXG5cbiAgICBndDogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXBhcmVUbyhvdGhlcikgPT09IDE7XG4gICAgfSxcblxuICAgIGd0ZTogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmVxKG90aGVyKSB8fCB0aGlzLmd0KG90aGVyKTtcbiAgICB9LFxuXG4gICAgLy8gQ29tcGFyZSB0d28gUXR5IG9iamVjdHMuIFRocm93cyBhbiBleGNlcHRpb24gaWYgdGhleSBhcmUgbm90IG9mIGNvbXBhdGlibGUgdHlwZXMuXG4gICAgLy8gQ29tcGFyaXNvbnMgYXJlIGRvbmUgYmFzZWQgb24gdGhlIHZhbHVlIG9mIHRoZSBxdWFudGl0eSBpbiBiYXNlIFNJIHVuaXRzLlxuICAgIC8vXG4gICAgLy8gTk9URTogV2UgY2Fubm90IGNvbXBhcmUgaW52ZXJzZXMgYXMgdGhhdCBicmVha3MgdGhlIGdlbmVyYWwgY29tcGFyZVRvIGNvbnRyYWN0OlxuICAgIC8vICAgaWYgYS5jb21wYXJlVG8oYikgPCAwIHRoZW4gYi5jb21wYXJlVG8oYSkgPiAwXG4gICAgLy8gICBpZiBhLmNvbXBhcmVUbyhiKSA9PSAwIHRoZW4gYi5jb21wYXJlVG8oYSkgPT0gMFxuICAgIC8vXG4gICAgLy8gICBTaW5jZSBcIjEwU1wiID09IFwiLjFvaG1cIiAoMTAgPiAuMSkgYW5kIFwiMTBvaG1cIiA9PSBcIi4xU1wiICgxMCA+IC4xKVxuICAgIC8vICAgICBRdHkoXCIxMFNcIikuaW52ZXJzZSgpLmNvbXBhcmVUbyhcIjEwb2htXCIpID09IC0xXG4gICAgLy8gICAgIFF0eShcIjEwb2htXCIpLmludmVyc2UoKS5jb21wYXJlVG8oXCIxMFNcIikgPT0gLTFcbiAgICAvL1xuICAgIC8vICAgSWYgaW5jbHVkaW5nIGludmVyc2VzIGluIHRoZSBzb3J0IGlzIG5lZWRlZCwgSSBzdWdnZXN0IHdyaXRpbmc6IFF0eS5zb3J0KHF0eUFycmF5LHVuaXRzKVxuICAgIGNvbXBhcmVUbzogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIGlmIChpc1N0cmluZyhvdGhlcikpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29tcGFyZVRvKFF0eShvdGhlcikpO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzQ29tcGF0aWJsZShvdGhlcikpIHtcbiAgICAgICAgdGhyb3dJbmNvbXBhdGlibGVVbml0cyh0aGlzLnVuaXRzKCksIG90aGVyLnVuaXRzKCkpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuYmFzZVNjYWxhciA8IG90aGVyLmJhc2VTY2FsYXIpIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5iYXNlU2NhbGFyID09PSBvdGhlci5iYXNlU2NhbGFyKSB7XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGhpcy5iYXNlU2NhbGFyID4gb3RoZXIuYmFzZVNjYWxhcikge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgLy8gUmV0dXJuIHRydWUgaWYgcXVhbnRpdGllcyBhbmQgdW5pdHMgbWF0Y2hcbiAgICAvLyBVbml0KFwiMTAwIGNtXCIpLnNhbWUoVW5pdChcIjEwMCBjbVwiKSkgICMgPT4gdHJ1ZVxuICAgIC8vIFVuaXQoXCIxMDAgY21cIikuc2FtZShVbml0KFwiMSBtXCIpKSAgICAgIyA9PiBmYWxzZVxuICAgIHNhbWU6IGZ1bmN0aW9uKG90aGVyKSB7XG4gICAgICByZXR1cm4gKHRoaXMuc2NhbGFyID09PSBvdGhlci5zY2FsYXIpICYmICh0aGlzLnVuaXRzKCkgPT09IG90aGVyLnVuaXRzKCkpO1xuICAgIH1cbiAgfSk7XG5cbiAgYXNzaWduKFF0eS5wcm90b3R5cGUsIHtcbiAgICAvLyByZXR1cm5zIHRydWUgaWYgbm8gYXNzb2NpYXRlZCB1bml0c1xuICAgIC8vIGZhbHNlLCBldmVuIGlmIHRoZSB1bml0cyBhcmUgXCJ1bml0bGVzc1wiIGxpa2UgJ3JhZGlhbnMsIGVhY2gsIGV0YydcbiAgICBpc1VuaXRsZXNzOiBmdW5jdGlvbigpIHtcbiAgICAgIHJldHVybiBbdGhpcy5udW1lcmF0b3IsIHRoaXMuZGVub21pbmF0b3JdLmV2ZXJ5KGZ1bmN0aW9uKGl0ZW0pIHtcbiAgICAgICAgcmV0dXJuIGNvbXBhcmVBcnJheShpdGVtLCBVTklUWV9BUlJBWSk7XG4gICAgICB9KTtcbiAgICB9LFxuXG4gICAgLypcbiAgICBjaGVjayB0byBzZWUgaWYgdW5pdHMgYXJlIGNvbXBhdGlibGUsIGJ1dCBub3QgdGhlIHNjYWxhciBwYXJ0XG4gICAgdGhpcyBjaGVjayBpcyBkb25lIGJ5IGNvbXBhcmluZyBzaWduYXR1cmVzIGZvciBwZXJmb3JtYW5jZSByZWFzb25zXG4gICAgaWYgcGFzc2VkIGEgc3RyaW5nLCBpdCB3aWxsIGNyZWF0ZSBhIHVuaXQgb2JqZWN0IHdpdGggdGhlIHN0cmluZyBhbmQgdGhlbiBkbyB0aGUgY29tcGFyaXNvblxuICAgIHRoaXMgcGVybWl0cyBhIHN5bnRheCBsaWtlOlxuICAgIHVuaXQgPX4gXCJtbVwiXG4gICAgaWYgeW91IHdhbnQgdG8gZG8gYSByZWdleHAgb24gdGhlIHVuaXQgc3RyaW5nIGRvIHRoaXMgLi4uXG4gICAgdW5pdC51bml0cyA9fiAvcmVnZXhwL1xuICAgICovXG4gICAgaXNDb21wYXRpYmxlOiBmdW5jdGlvbihvdGhlcikge1xuICAgICAgaWYgKGlzU3RyaW5nKG90aGVyKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc0NvbXBhdGlibGUoUXR5KG90aGVyKSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghKGlzUXR5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAob3RoZXIuc2lnbmF0dXJlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc2lnbmF0dXJlID09PSBvdGhlci5zaWduYXR1cmU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICAvKlxuICAgIGNoZWNrIHRvIHNlZSBpZiB1bml0cyBhcmUgaW52ZXJzZSBvZiBlYWNoIG90aGVyLCBidXQgbm90IHRoZSBzY2FsYXIgcGFydFxuICAgIHRoaXMgY2hlY2sgaXMgZG9uZSBieSBjb21wYXJpbmcgc2lnbmF0dXJlcyBmb3IgcGVyZm9ybWFuY2UgcmVhc29uc1xuICAgIGlmIHBhc3NlZCBhIHN0cmluZywgaXQgd2lsbCBjcmVhdGUgYSB1bml0IG9iamVjdCB3aXRoIHRoZSBzdHJpbmcgYW5kIHRoZW4gZG8gdGhlIGNvbXBhcmlzb25cbiAgICB0aGlzIHBlcm1pdHMgYSBzeW50YXggbGlrZTpcbiAgICB1bml0ID1+IFwibW1cIlxuICAgIGlmIHlvdSB3YW50IHRvIGRvIGEgcmVnZXhwIG9uIHRoZSB1bml0IHN0cmluZyBkbyB0aGlzIC4uLlxuICAgIHVuaXQudW5pdHMgPX4gL3JlZ2V4cC9cbiAgICAqL1xuICAgIGlzSW52ZXJzZTogZnVuY3Rpb24ob3RoZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLmludmVyc2UoKS5pc0NvbXBhdGlibGUob3RoZXIpO1xuICAgIH0sXG5cbiAgICAvLyBSZXR1cm5zICd0cnVlJyBpZiB0aGUgVW5pdCBpcyByZXByZXNlbnRlZCBpbiBiYXNlIHVuaXRzXG4gICAgaXNCYXNlOiBmdW5jdGlvbigpIHtcbiAgICAgIGlmICh0aGlzLl9pc0Jhc2UgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNCYXNlO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuaXNEZWdyZWVzKCkgJiYgdGhpcy5udW1lcmF0b3JbMF0ubWF0Y2goLzwoa2VsdmlufHRlbXAtSyk+LykpIHtcbiAgICAgICAgdGhpcy5faXNCYXNlID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lzQmFzZTtcbiAgICAgIH1cblxuICAgICAgdGhpcy5udW1lcmF0b3IuY29uY2F0KHRoaXMuZGVub21pbmF0b3IpLmZvckVhY2goZnVuY3Rpb24oaXRlbSkge1xuICAgICAgICBpZiAoaXRlbSAhPT0gVU5JVFkgJiYgQkFTRV9VTklUUy5pbmRleE9mKGl0ZW0pID09PSAtMSApIHtcbiAgICAgICAgICB0aGlzLl9pc0Jhc2UgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSwgdGhpcyk7XG4gICAgICBpZiAodGhpcy5faXNCYXNlID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNCYXNlO1xuICAgICAgfVxuICAgICAgdGhpcy5faXNCYXNlID0gdHJ1ZTtcbiAgICAgIHJldHVybiB0aGlzLl9pc0Jhc2U7XG4gICAgfVxuICB9KTtcblxuICBmdW5jdGlvbiBOZXN0ZWRNYXAoKSB7fVxuXG4gIE5lc3RlZE1hcC5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5cykge1xuXG4gICAgLy8gQWxsb3dzIHRvIHBhc3Mga2V5MSwga2V5MiwgLi4uIGluc3RlYWQgb2YgW2tleTEsIGtleTIsIC4uLl1cbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIFNsb3dlciB3aXRoIEZpcmVmb3ggYnV0IGZhc3RlciB3aXRoIENocm9tZSB0aGFuXG4gICAgICAvLyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpXG4gICAgICAvLyBTZWUgaHR0cDovL2pzcGVyZi5jb20vYXJyYXktYXBwbHktdmVyc3VzLWFycmF5LXByb3RvdHlwZS1zbGljZS1jYWxsXG4gICAgICBrZXlzID0gQXJyYXkuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICB9XG5cbiAgICByZXR1cm4ga2V5cy5yZWR1Y2UoZnVuY3Rpb24obWFwLCBrZXksIGluZGV4KSB7XG4gICAgICBpZiAobWFwKSB7XG5cbiAgICAgICAgdmFyIGNoaWxkTWFwID0gbWFwW2tleV07XG5cbiAgICAgICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICByZXR1cm4gY2hpbGRNYXAgPyBjaGlsZE1hcC5kYXRhIDogdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgIHJldHVybiBjaGlsZE1hcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgdGhpcyk7XG4gIH07XG5cbiAgTmVzdGVkTWFwLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihrZXlzLCB2YWx1ZSkge1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPiAyKSB7XG4gICAgICBrZXlzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwLCAtMSk7XG4gICAgICB2YWx1ZSA9IGFyZ3VtZW50c1thcmd1bWVudHMubGVuZ3RoIC0gMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIGtleXMucmVkdWNlKGZ1bmN0aW9uKG1hcCwga2V5LCBpbmRleCkge1xuXG4gICAgICB2YXIgY2hpbGRNYXAgPSBtYXBba2V5XTtcbiAgICAgIGlmIChjaGlsZE1hcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNoaWxkTWFwID0gbWFwW2tleV0gPSB7fTtcbiAgICAgIH1cblxuICAgICAgaWYgKGluZGV4ID09PSBrZXlzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgY2hpbGRNYXAuZGF0YSA9IHZhbHVlO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNoaWxkTWFwO1xuICAgICAgfVxuICAgIH0sIHRoaXMpO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEZWZhdWx0IGZvcm1hdHRlclxuICAgKlxuICAgKiBAcGFyYW0ge251bWJlcn0gc2NhbGFyIC0gc2NhbGFyIHZhbHVlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB1bml0cyAtIHVuaXRzIGFzIHN0cmluZ1xuICAgKlxuICAgKiBAcmV0dXJucyB7c3RyaW5nfSBmb3JtYXR0ZWQgcmVzdWx0XG4gICAqL1xuICBmdW5jdGlvbiBkZWZhdWx0Rm9ybWF0dGVyKHNjYWxhciwgdW5pdHMpIHtcbiAgICByZXR1cm4gKHNjYWxhciArIFwiIFwiICsgdW5pdHMpLnRyaW0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBDb25maWd1cmFibGUgUXR5IGRlZmF1bHQgZm9ybWF0dGVyXG4gICAqXG4gICAqIEB0eXBlIHtmdW5jdGlvbn1cbiAgICpcbiAgICogQHBhcmFtIHtudW1iZXJ9IHNjYWxhclxuICAgKiBAcGFyYW0ge3N0cmluZ30gdW5pdHNcbiAgICpcbiAgICogQHJldHVybnMge3N0cmluZ30gZm9ybWF0dGVkIHJlc3VsdFxuICAgKi9cbiAgUXR5LmZvcm1hdHRlciA9IGRlZmF1bHRGb3JtYXR0ZXI7XG5cbiAgYXNzaWduKFF0eS5wcm90b3R5cGUsIHtcblxuICAgIC8vIHJldHVybnMgdGhlICd1bml0JyBwYXJ0IG9mIHRoZSBVbml0IG9iamVjdCB3aXRob3V0IHRoZSBzY2FsYXJcbiAgICB1bml0czogZnVuY3Rpb24oKSB7XG4gICAgICBpZiAodGhpcy5fdW5pdHMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fdW5pdHM7XG4gICAgICB9XG5cbiAgICAgIHZhciBudW1Jc1VuaXR5ID0gY29tcGFyZUFycmF5KHRoaXMubnVtZXJhdG9yLCBVTklUWV9BUlJBWSk7XG4gICAgICB2YXIgZGVuSXNVbml0eSA9IGNvbXBhcmVBcnJheSh0aGlzLmRlbm9taW5hdG9yLCBVTklUWV9BUlJBWSk7XG4gICAgICBpZiAobnVtSXNVbml0eSAmJiBkZW5Jc1VuaXR5KSB7XG4gICAgICAgIHRoaXMuX3VuaXRzID0gXCJcIjtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3VuaXRzO1xuICAgICAgfVxuXG4gICAgICB2YXIgbnVtVW5pdHMgPSBzdHJpbmdpZnlVbml0cyh0aGlzLm51bWVyYXRvcik7XG4gICAgICB2YXIgZGVuVW5pdHMgPSBzdHJpbmdpZnlVbml0cyh0aGlzLmRlbm9taW5hdG9yKTtcbiAgICAgIHRoaXMuX3VuaXRzID0gbnVtVW5pdHMgKyAoZGVuSXNVbml0eSA/IFwiXCIgOiAoXCIvXCIgKyBkZW5Vbml0cykpO1xuICAgICAgcmV0dXJuIHRoaXMuX3VuaXRzO1xuICAgIH0sXG5cbiAgICAvKipcbiAgICAgKiBTdHJpbmdpZmllcyB0aGUgcXVhbnRpdHlcbiAgICAgKiBEZXByZWNhdGlvbiBub3RpY2U6IG9ubHkgdW5pdHMgcGFyYW1ldGVyIGlzIHN1cHBvcnRlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7KG51bWJlcnxzdHJpbmd8UXR5KX0gdGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjIC1cbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcmdldCB1bml0cyBpZiBzdHJpbmcsXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXggbnVtYmVyIG9mIGRlY2ltYWxzIGlmIG51bWJlcixcbiAgICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NlZCB0byAjdG9QcmVjIGJlZm9yZSBjb252ZXJ0aW5nIGlmIFF0eVxuICAgICAqXG4gICAgICogQHBhcmFtIHtudW1iZXI9fSBtYXhEZWNpbWFscyAtIE1heGltdW0gbnVtYmVyIG9mIGRlY2ltYWxzIG9mXG4gICAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZCBvdXRwdXRcbiAgICAgKlxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9IHJlcGFyc2VhYmxlIHF1YW50aXR5IGFzIHN0cmluZ1xuICAgICAqL1xuICAgIHRvU3RyaW5nOiBmdW5jdGlvbih0YXJnZXRVbml0c09yTWF4RGVjaW1hbHNPclByZWMsIG1heERlY2ltYWxzKSB7XG4gICAgICB2YXIgdGFyZ2V0VW5pdHM7XG4gICAgICBpZiAoaXNOdW1iZXIodGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjKSkge1xuICAgICAgICB0YXJnZXRVbml0cyA9IHRoaXMudW5pdHMoKTtcbiAgICAgICAgbWF4RGVjaW1hbHMgPSB0YXJnZXRVbml0c09yTWF4RGVjaW1hbHNPclByZWM7XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChpc1N0cmluZyh0YXJnZXRVbml0c09yTWF4RGVjaW1hbHNPclByZWMpKSB7XG4gICAgICAgIHRhcmdldFVuaXRzID0gdGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNRdHkodGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjKSkge1xuICAgICAgICByZXR1cm4gdGhpcy50b1ByZWModGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjKS50b1N0cmluZyhtYXhEZWNpbWFscyk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvdXQgPSB0aGlzLnRvKHRhcmdldFVuaXRzKTtcblxuICAgICAgdmFyIG91dFNjYWxhciA9IG1heERlY2ltYWxzICE9PSB1bmRlZmluZWQgPyByb3VuZChvdXQuc2NhbGFyLCBtYXhEZWNpbWFscykgOiBvdXQuc2NhbGFyO1xuICAgICAgb3V0ID0gKG91dFNjYWxhciArIFwiIFwiICsgb3V0LnVuaXRzKCkpLnRyaW0oKTtcbiAgICAgIHJldHVybiBvdXQ7XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEZvcm1hdCB0aGUgcXVhbnRpdHkgYWNjb3JkaW5nIHRvIG9wdGlvbmFsIHBhc3NlZCB0YXJnZXQgdW5pdHNcbiAgICAgKiBhbmQgZm9ybWF0dGVyXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ30gW3RhcmdldFVuaXRzPWN1cnJlbnQgdW5pdHNdIC1cbiAgICAgKiAgICAgICAgICAgICAgICAgb3B0aW9uYWwgdW5pdHMgdG8gY29udmVydCB0byBiZWZvcmUgZm9ybWF0dGluZ1xuICAgICAqXG4gICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2Zvcm1hdHRlcj1RdHkuZm9ybWF0dGVyXSAtXG4gICAgICogICAgICAgICAgICAgICAgICAgZGVsZWdhdGVzIGZvcm1hdHRpbmcgdG8gZm9ybWF0dGVyIGNhbGxiYWNrLlxuICAgICAqICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlciBpcyBjYWxsZWQgYmFjayB3aXRoIHR3byBwYXJhbWV0ZXJzIChzY2FsYXIsIHVuaXRzKVxuICAgICAqICAgICAgICAgICAgICAgICAgIGFuZCBzaG91bGQgcmV0dXJuIGZvcm1hdHRlZCByZXN1bHQuXG4gICAgICogICAgICAgICAgICAgICAgICAgSWYgdW5zcGVjaWZpZWQsIGZvcm1hdHRpbmcgaXMgZGVsZWdhdGVkIHRvIGRlZmF1bHQgZm9ybWF0dGVyXG4gICAgICogICAgICAgICAgICAgICAgICAgc2V0IHRvIFF0eS5mb3JtYXR0ZXJcbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogdmFyIHJvdW5kaW5nQW5kTG9jYWxpemluZ0Zvcm1hdHRlciA9IGZ1bmN0aW9uKHNjYWxhciwgdW5pdHMpIHtcbiAgICAgKiAgIC8vIGxvY2FsaXplIG9yIGxpbWl0IHNjYWxhciB0byBuIG1heCBkZWNpbWFscyBmb3IgaW5zdGFuY2VcbiAgICAgKiAgIC8vIHJldHVybiBmb3JtYXR0ZWQgcmVzdWx0XG4gICAgICogfTtcbiAgICAgKiB2YXIgcXR5ID0gUXR5KCcxLjEyMzQgbScpO1xuICAgICAqIHF0eS5mb3JtYXQoKTsgLy8gc2FtZSB1bml0cywgZGVmYXVsdCBmb3JtYXR0ZXIgPT4gXCIxLjIzNCBtXCJcbiAgICAgKiBxdHkuZm9ybWF0KFwiY21cIik7IC8vIGNvbnZlcnRlZCB0byBcImNtXCIsIGRlZmF1bHQgZm9ybWF0dGVyID0+IFwiMTIzLjQ1IGNtXCJcbiAgICAgKiBxdHkuZm9ybWF0KHJvdW5kaW5nQW5kTG9jYWxpemluZ0Zvcm1hdHRlcik7IC8vIHNhbWUgdW5pdHMsIGN1c3RvbSBmb3JtYXR0ZXIgPT4gXCIxLDIgbVwiXG4gICAgICogcXR5LmZvcm1hdChcImNtXCIsIHJvdW5kaW5nQW5kTG9jYWxpemluZ0Zvcm1hdHRlcik7IC8vIGNvbnZlcnQgdG8gXCJjbVwiLCBjdXN0b20gZm9ybWF0dGVyID0+IFwiMTIzLDQgY21cIlxuICAgICAqXG4gICAgICogQHJldHVybnMge3N0cmluZ30gcXVhbnRpdHkgYXMgc3RyaW5nXG4gICAgICovXG4gICAgZm9ybWF0OiBmdW5jdGlvbih0YXJnZXRVbml0cywgZm9ybWF0dGVyKSB7XG4gICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICBpZiAodHlwZW9mIHRhcmdldFVuaXRzID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICBmb3JtYXR0ZXIgPSB0YXJnZXRVbml0cztcbiAgICAgICAgICB0YXJnZXRVbml0cyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3JtYXR0ZXIgPSBmb3JtYXR0ZXIgfHwgUXR5LmZvcm1hdHRlcjtcbiAgICAgIHZhciB0YXJnZXRRdHkgPSB0aGlzLnRvKHRhcmdldFVuaXRzKTtcbiAgICAgIHJldHVybiBmb3JtYXR0ZXIuY2FsbCh0aGlzLCB0YXJnZXRRdHkuc2NhbGFyLCB0YXJnZXRRdHkudW5pdHMoKSk7XG4gICAgfVxuICB9KTtcblxuICB2YXIgc3RyaW5naWZpZWRVbml0c0NhY2hlID0gbmV3IE5lc3RlZE1hcCgpO1xuICAvKipcbiAgICogUmV0dXJucyBhIHN0cmluZyByZXByZXNlbnRpbmcgYSBub3JtYWxpemVkIHVuaXQgYXJyYXlcbiAgICpcbiAgICogQHBhcmFtIHtzdHJpbmdbXX0gdW5pdHMgTm9ybWFsaXplZCB1bml0IGFycmF5XG4gICAqIEByZXR1cm5zIHtzdHJpbmd9IFN0cmluZyByZXByZXNlbnRpbmcgcGFzc2VkIG5vcm1hbGl6ZWQgdW5pdCBhcnJheSBhbmRcbiAgICogICBzdWl0YWJsZSBmb3Igb3V0cHV0XG4gICAqXG4gICAqL1xuICBmdW5jdGlvbiBzdHJpbmdpZnlVbml0cyh1bml0cykge1xuXG4gICAgdmFyIHN0cmluZ2lmaWVkID0gc3RyaW5naWZpZWRVbml0c0NhY2hlLmdldCh1bml0cyk7XG4gICAgaWYgKHN0cmluZ2lmaWVkKSB7XG4gICAgICByZXR1cm4gc3RyaW5naWZpZWQ7XG4gICAgfVxuXG4gICAgdmFyIGlzVW5pdHkgPSBjb21wYXJlQXJyYXkodW5pdHMsIFVOSVRZX0FSUkFZKTtcbiAgICBpZiAoaXNVbml0eSkge1xuICAgICAgc3RyaW5naWZpZWQgPSBcIjFcIjtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzdHJpbmdpZmllZCA9IHNpbXBsaWZ5KGdldE91dHB1dE5hbWVzKHVuaXRzKSkuam9pbihcIipcIik7XG4gICAgfVxuXG4gICAgLy8gQ2FjaGUgcmVzdWx0XG4gICAgc3RyaW5naWZpZWRVbml0c0NhY2hlLnNldCh1bml0cywgc3RyaW5naWZpZWQpO1xuXG4gICAgcmV0dXJuIHN0cmluZ2lmaWVkO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0T3V0cHV0TmFtZXModW5pdHMpIHtcbiAgICB2YXIgdW5pdE5hbWVzID0gW10sIHRva2VuLCB0b2tlbk5leHQ7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCB1bml0cy5sZW5ndGg7IGkrKykge1xuICAgICAgdG9rZW4gPSB1bml0c1tpXTtcbiAgICAgIHRva2VuTmV4dCA9IHVuaXRzW2kgKyAxXTtcbiAgICAgIGlmIChQUkVGSVhfVkFMVUVTW3Rva2VuXSkge1xuICAgICAgICB1bml0TmFtZXMucHVzaChPVVRQVVRfTUFQW3Rva2VuXSArIE9VVFBVVF9NQVBbdG9rZW5OZXh0XSk7XG4gICAgICAgIGkrKztcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB1bml0TmFtZXMucHVzaChPVVRQVVRfTUFQW3Rva2VuXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB1bml0TmFtZXM7XG4gIH1cblxuICBmdW5jdGlvbiBzaW1wbGlmeSh1bml0cykge1xuICAgIC8vIHRoaXMgdHVybnMgWydzJywnbScsJ3MnXSBpbnRvIFsnczInLCdtJ11cblxuICAgIHZhciB1bml0Q291bnRzID0gdW5pdHMucmVkdWNlKGZ1bmN0aW9uKGFjYywgdW5pdCkge1xuICAgICAgdmFyIHVuaXRDb3VudGVyID0gYWNjW3VuaXRdO1xuICAgICAgaWYgKCF1bml0Q291bnRlcikge1xuICAgICAgICBhY2MucHVzaCh1bml0Q291bnRlciA9IGFjY1t1bml0XSA9IFt1bml0LCAwXSk7XG4gICAgICB9XG5cbiAgICAgIHVuaXRDb3VudGVyWzFdKys7XG5cbiAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgW10pO1xuXG4gICAgcmV0dXJuIHVuaXRDb3VudHMubWFwKGZ1bmN0aW9uKHVuaXRDb3VudCkge1xuICAgICAgcmV0dXJuIHVuaXRDb3VudFswXSArICh1bml0Q291bnRbMV0gPiAxID8gdW5pdENvdW50WzFdIDogXCJcIik7XG4gICAgfSk7XG4gIH1cblxuICBRdHkudmVyc2lvbiA9IFwiMS43LjZcIjtcblxuICByZXR1cm4gUXR5O1xuXG59KSkpO1xuIiwiKGZ1bmN0aW9uKCl7ZnVuY3Rpb24gYShkKXtmb3IodmFyIGU9MCxmPWQubGVuZ3RoLTEsZz12b2lkIDAsaD12b2lkIDAsaT12b2lkIDAsaj1jKGUsZik7ITA7KXtpZihmPD1lKXJldHVybiBkW2pdO2lmKGY9PWUrMSlyZXR1cm4gZFtlXT5kW2ZdJiZiKGQsZSxmKSxkW2pdO2ZvcihnPWMoZSxmKSxkW2ddPmRbZl0mJmIoZCxnLGYpLGRbZV0+ZFtmXSYmYihkLGUsZiksZFtnXT5kW2VdJiZiKGQsZyxlKSxiKGQsZyxlKzEpLGg9ZSsxLGk9ZjshMDspe2RvIGgrKzt3aGlsZShkW2VdPmRbaF0pO2RvIGktLTt3aGlsZShkW2ldPmRbZV0pO2lmKGk8aClicmVhaztiKGQsaCxpKX1iKGQsZSxpKSxpPD1qJiYoZT1oKSxpPj1qJiYoZj1pLTEpfX12YXIgYj1mdW5jdGlvbiBiKGQsZSxmKXt2YXIgX3JlZjtyZXR1cm4gX3JlZj1bZFtmXSxkW2VdXSxkW2VdPV9yZWZbMF0sZFtmXT1fcmVmWzFdLF9yZWZ9LGM9ZnVuY3Rpb24gYyhkLGUpe3JldHVybn5+KChkK2UpLzIpfTsndW5kZWZpbmVkJyE9dHlwZW9mIG1vZHVsZSYmbW9kdWxlLmV4cG9ydHM/bW9kdWxlLmV4cG9ydHM9YTp3aW5kb3cubWVkaWFuPWF9KSgpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIEBjbGFzcyBEaXNqb2ludFNldFxuICovXG5jbGFzcyBEaXNqb2ludFNldCB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMubm9kZXMgPSBuZXcgTWFwKCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQWRkcyBhbiBlbGVtZW50IGFzIGEgbmV3IHNldFxuICAgICAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAgICAgKiBAcmV0dXJuIHtEaXNqb2ludFNldE5vZGV9IE9iamVjdCBob2xkaW5nIHRoZSBlbGVtZW50XG4gICAgICovXG4gICAgYWRkKHZhbHVlKSB7XG4gICAgICAgIHZhciBub2RlID0gdGhpcy5ub2Rlcy5nZXQodmFsdWUpO1xuICAgICAgICBpZiAoIW5vZGUpIHtcbiAgICAgICAgICAgIG5vZGUgPSBuZXcgRGlzam9pbnRTZXROb2RlKHZhbHVlKTtcbiAgICAgICAgICAgIHRoaXMubm9kZXMuc2V0KHZhbHVlLCBub2RlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbm9kZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBNZXJnZXMgdGhlIHNldHMgdGhhdCBjb250YWluIHggYW5kIHlcbiAgICAgKiBAcGFyYW0ge0Rpc2pvaW50U2V0Tm9kZX0geFxuICAgICAqIEBwYXJhbSB7RGlzam9pbnRTZXROb2RlfSB5XG4gICAgICovXG4gICAgdW5pb24oeCwgeSkge1xuICAgICAgICBjb25zdCByb290WCA9IHRoaXMuZmluZCh4KTtcbiAgICAgICAgY29uc3Qgcm9vdFkgPSB0aGlzLmZpbmQoeSk7XG4gICAgICAgIGlmIChyb290WCA9PT0gcm9vdFkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAocm9vdFgucmFuayA8IHJvb3RZLnJhbmspIHtcbiAgICAgICAgICAgIHJvb3RYLnBhcmVudCA9IHJvb3RZO1xuICAgICAgICB9IGVsc2UgaWYgKHJvb3RYLnJhbmsgPiByb290WS5yYW5rKSB7XG4gICAgICAgICAgICByb290WS5wYXJlbnQgPSByb290WDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJvb3RZLnBhcmVudCA9IHJvb3RYO1xuICAgICAgICAgICAgcm9vdFgucmFuaysrO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogRmluZHMgYW5kIHJldHVybnMgdGhlIHJvb3Qgbm9kZSBvZiB0aGUgc2V0IHRoYXQgY29udGFpbnMgbm9kZVxuICAgICAqIEBwYXJhbSB7RGlzam9pbnRTZXROb2RlfSBub2RlXG4gICAgICogQHJldHVybiB7RGlzam9pbnRTZXROb2RlfVxuICAgICAqL1xuICAgIGZpbmQobm9kZSkge1xuICAgICAgICB2YXIgcm9vdFggPSBub2RlO1xuICAgICAgICB3aGlsZSAocm9vdFgucGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgICAgICByb290WCA9IHJvb3RYLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG9VcGRhdGVYID0gbm9kZTtcbiAgICAgICAgd2hpbGUgKHRvVXBkYXRlWC5wYXJlbnQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciB0b1VwZGF0ZVBhcmVudCA9IHRvVXBkYXRlWDtcbiAgICAgICAgICAgIHRvVXBkYXRlWCA9IHRvVXBkYXRlWC5wYXJlbnQ7XG4gICAgICAgICAgICB0b1VwZGF0ZVBhcmVudC5wYXJlbnQgPSByb290WDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcm9vdFg7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0cnVlIGlmIHggYW5kIHkgYmVsb25nIHRvIHRoZSBzYW1lIHNldFxuICAgICAqIEBwYXJhbSB7RGlzam9pbnRTZXROb2RlfSB4XG4gICAgICogQHBhcmFtIHtEaXNqb2ludFNldE5vZGV9IHlcbiAgICAgKi9cbiAgICBjb25uZWN0ZWQoeCwgeSkge1xuICAgICAgICByZXR1cm4gdGhpcy5maW5kKHgpID09PSB0aGlzLmZpbmQoeSk7XG4gICAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IERpc2pvaW50U2V0O1xuXG5mdW5jdGlvbiBEaXNqb2ludFNldE5vZGUodmFsdWUpIHtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5wYXJlbnQgPSBudWxsO1xuICAgIHRoaXMucmFuayA9IDA7XG59XG4iLCJleHBvcnQgZnVuY3Rpb24gc3F1YXJlZEV1Y2xpZGVhbihwLCBxKSB7XHJcbiAgICBsZXQgZCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICBkICs9IChwW2ldIC0gcVtpXSkgKiAocFtpXSAtIHFbaV0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIGV1Y2xpZGVhbihwLCBxKSB7XHJcbiAgICByZXR1cm4gTWF0aC5zcXJ0KHNxdWFyZWRFdWNsaWRlYW4ocCwgcSkpO1xyXG59XHJcbiIsIid1c2Ugc3RyaWN0J1xuXG52YXIgRkZUID0gcmVxdWlyZSgnLi9mZnRsaWInKTtcblxudmFyIEZGVFV0aWxzPSB7XG4gICAgREVCVUcgOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIGludmVyc2Ugb2YgYSAyRCBGb3VyaWVyIHRyYW5zZm9ybVxuICAgICAqXG4gICAgICogQHBhcmFtIGZ0XG4gICAgICogQHBhcmFtIGZ0Um93c1xuICAgICAqIEBwYXJhbSBmdENvbHNcbiAgICAgKiBAcmV0dXJuXG4gICAgICovXG4gICAgaWZmdDJEQXJyYXkgOiBmdW5jdGlvbihmdCwgZnRSb3dzLCBmdENvbHMpe1xuICAgICAgICB2YXIgdGVtcFRyYW5zZm9ybSA9IG5ldyBBcnJheShmdFJvd3MgKiBmdENvbHMpO1xuICAgICAgICB2YXIgblJvd3MgPSBmdFJvd3MgLyAyO1xuICAgICAgICB2YXIgbkNvbHMgPSAoZnRDb2xzIC0gMSkgKiAyO1xuICAgICAgICAvLyByZXZlcnNlIHRyYW5zZm9ybSBjb2x1bW5zXG4gICAgICAgIEZGVC5pbml0KG5Sb3dzKTtcbiAgICAgICAgdmFyIHRtcENvbHMgPSB7cmU6IG5ldyBBcnJheShuUm93cyksIGltOiBuZXcgQXJyYXkoblJvd3MpfTtcbiAgICAgICAgZm9yICh2YXIgaUNvbCA9IDA7IGlDb2wgPCBmdENvbHM7IGlDb2wrKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaVJvdyA9IG5Sb3dzIC0gMTsgaVJvdyA+PSAwOyBpUm93LS0pIHtcbiAgICAgICAgICAgICAgICB0bXBDb2xzLnJlW2lSb3ddID0gZnRbKGlSb3cgKiAyKSAqIGZ0Q29scyArIGlDb2xdO1xuICAgICAgICAgICAgICAgIHRtcENvbHMuaW1baVJvd10gPSBmdFsoaVJvdyAqIDIgKyAxKSAqIGZ0Q29scyArIGlDb2xdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy9Vbm5vcm1hbGl6ZWQgaW52ZXJzZSB0cmFuc2Zvcm1cbiAgICAgICAgICAgIEZGVC5idCh0bXBDb2xzLnJlLCB0bXBDb2xzLmltKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlSb3cgPSBuUm93cyAtIDE7IGlSb3cgPj0gMDsgaVJvdy0tKSB7XG4gICAgICAgICAgICAgICAgdGVtcFRyYW5zZm9ybVsoaVJvdyAqIDIpICogZnRDb2xzICsgaUNvbF0gPSB0bXBDb2xzLnJlW2lSb3ddO1xuICAgICAgICAgICAgICAgIHRlbXBUcmFuc2Zvcm1bKGlSb3cgKiAyICsgMSkgKiBmdENvbHMgKyBpQ29sXSA9IHRtcENvbHMuaW1baVJvd107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyByZXZlcnNlIHJvdyB0cmFuc2Zvcm1cbiAgICAgICAgdmFyIGZpbmFsVHJhbnNmb3JtID0gbmV3IEFycmF5KG5Sb3dzICogbkNvbHMpO1xuICAgICAgICBGRlQuaW5pdChuQ29scyk7XG4gICAgICAgIHZhciB0bXBSb3dzID0ge3JlOiBuZXcgQXJyYXkobkNvbHMpLCBpbTogbmV3IEFycmF5KG5Db2xzKX07XG4gICAgICAgIHZhciBzY2FsZSA9IG5Db2xzICogblJvd3M7XG4gICAgICAgIGZvciAodmFyIGlSb3cgPSAwOyBpUm93IDwgZnRSb3dzOyBpUm93ICs9IDIpIHtcbiAgICAgICAgICAgIHRtcFJvd3MucmVbMF0gPSB0ZW1wVHJhbnNmb3JtW2lSb3cgKiBmdENvbHNdO1xuICAgICAgICAgICAgdG1wUm93cy5pbVswXSA9IHRlbXBUcmFuc2Zvcm1bKGlSb3cgKyAxKSAqIGZ0Q29sc107XG4gICAgICAgICAgICBmb3IgKHZhciBpQ29sID0gMTsgaUNvbCA8IGZ0Q29sczsgaUNvbCsrKSB7XG4gICAgICAgICAgICAgICAgdG1wUm93cy5yZVtpQ29sXSA9IHRlbXBUcmFuc2Zvcm1baVJvdyAqIGZ0Q29scyArIGlDb2xdO1xuICAgICAgICAgICAgICAgIHRtcFJvd3MuaW1baUNvbF0gPSB0ZW1wVHJhbnNmb3JtWyhpUm93ICsgMSkgKiBmdENvbHMgKyBpQ29sXTtcbiAgICAgICAgICAgICAgICB0bXBSb3dzLnJlW25Db2xzIC0gaUNvbF0gPSB0ZW1wVHJhbnNmb3JtW2lSb3cgKiBmdENvbHMgKyBpQ29sXTtcbiAgICAgICAgICAgICAgICB0bXBSb3dzLmltW25Db2xzIC0gaUNvbF0gPSAtdGVtcFRyYW5zZm9ybVsoaVJvdyArIDEpICogZnRDb2xzICsgaUNvbF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvL1Vubm9ybWFsaXplZCBpbnZlcnNlIHRyYW5zZm9ybVxuICAgICAgICAgICAgRkZULmJ0KHRtcFJvd3MucmUsIHRtcFJvd3MuaW0pO1xuXG4gICAgICAgICAgICB2YXIgaW5kZXhCID0gKGlSb3cgLyAyKSAqIG5Db2xzO1xuICAgICAgICAgICAgZm9yICh2YXIgaUNvbCA9IG5Db2xzIC0gMTsgaUNvbCA+PSAwOyBpQ29sLS0pIHtcbiAgICAgICAgICAgICAgICBmaW5hbFRyYW5zZm9ybVtpbmRleEIgKyBpQ29sXSA9IHRtcFJvd3MucmVbaUNvbF0gLyBzY2FsZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmluYWxUcmFuc2Zvcm07XG4gICAgfSxcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHRoZSBmb3VyaWVyIHRyYW5zZm9ybSBvZiBhIG1hdHJpeCBvZiBzaXplIChuUm93cyxuQ29scykgSXQgaXNcbiAgICAgKiBhc3N1bWVkIHRoYXQgYm90aCBuUm93cyBhbmQgbkNvbHMgYXJlIGEgcG93ZXIgb2YgdHdvXG4gICAgICpcbiAgICAgKiBPbiBleGl0IHRoZSBtYXRyaXggaGFzIGRpbWVuc2lvbnMgKG5Sb3dzICogMiwgbkNvbHMgLyAyICsgMSkgd2hlcmUgdGhlXG4gICAgICogZXZlbiByb3dzIGNvbnRhaW4gdGhlIHJlYWwgcGFydCBhbmQgdGhlIG9kZCByb3dzIHRoZSBpbWFnaW5hcnkgcGFydCBvZiB0aGVcbiAgICAgKiB0cmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gZGF0YVxuICAgICAqIEBwYXJhbSBuUm93c1xuICAgICAqIEBwYXJhbSBuQ29sc1xuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBmZnQyREFycmF5OmZ1bmN0aW9uKGRhdGEsIG5Sb3dzLCBuQ29scywgb3B0KSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSx7aW5wbGFjZTp0cnVlfSlcbiAgICAgICAgdmFyIGZ0Q29scyA9IChuQ29scyAvIDIgKyAxKTtcbiAgICAgICAgdmFyIGZ0Um93cyA9IG5Sb3dzICogMjtcbiAgICAgICAgdmFyIHRlbXBUcmFuc2Zvcm0gPSBuZXcgQXJyYXkoZnRSb3dzICogZnRDb2xzKTtcbiAgICAgICAgRkZULmluaXQobkNvbHMpO1xuICAgICAgICAvLyB0cmFuc2Zvcm0gcm93c1xuICAgICAgICB2YXIgdG1wUm93cyA9IHtyZTogbmV3IEFycmF5KG5Db2xzKSwgaW06IG5ldyBBcnJheShuQ29scyl9O1xuICAgICAgICB2YXIgcm93MSA9IHtyZTogbmV3IEFycmF5KG5Db2xzKSwgaW06IG5ldyBBcnJheShuQ29scyl9XG4gICAgICAgIHZhciByb3cyID0ge3JlOiBuZXcgQXJyYXkobkNvbHMpLCBpbTogbmV3IEFycmF5KG5Db2xzKX1cbiAgICAgICAgdmFyIGluZGV4LCBpUm93MCwgaVJvdzEsIGlSb3cyLCBpUm93MztcbiAgICAgICAgZm9yICh2YXIgaVJvdyA9IDA7IGlSb3cgPCBuUm93cyAvIDI7IGlSb3crKykge1xuICAgICAgICAgICAgaW5kZXggPSAoaVJvdyAqIDIpICogbkNvbHM7XG4gICAgICAgICAgICB0bXBSb3dzLnJlID0gZGF0YS5zbGljZShpbmRleCwgaW5kZXggKyBuQ29scyk7XG5cbiAgICAgICAgICAgIGluZGV4ID0gKGlSb3cgKiAyICsgMSkgKiBuQ29scztcbiAgICAgICAgICAgIHRtcFJvd3MuaW0gPSBkYXRhLnNsaWNlKGluZGV4LCBpbmRleCArIG5Db2xzKTtcblxuICAgICAgICAgICAgRkZULmZmdDFkKHRtcFJvd3MucmUsIHRtcFJvd3MuaW0pO1xuXG4gICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0VHdvUmVhbEZGVCh0bXBSb3dzLCByb3cxLCByb3cyKTtcbiAgICAgICAgICAgIC8vTm93IGxldHMgcHV0IGJhY2sgdGhlIHJlc3VsdCBpbnRvIHRoZSBvdXRwdXQgYXJyYXlcbiAgICAgICAgICAgIGlSb3cwID0gKGlSb3cgKiA0KSAqIGZ0Q29scztcbiAgICAgICAgICAgIGlSb3cxID0gKGlSb3cgKiA0ICsgMSkgKiBmdENvbHM7XG4gICAgICAgICAgICBpUm93MiA9IChpUm93ICogNCArIDIpICogZnRDb2xzO1xuICAgICAgICAgICAgaVJvdzMgPSAoaVJvdyAqIDQgKyAzKSAqIGZ0Q29scztcbiAgICAgICAgICAgIGZvciAodmFyIGsgPSBmdENvbHMgLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICAgICAgICAgIHRlbXBUcmFuc2Zvcm1baVJvdzAgKyBrXSA9IHJvdzEucmVba107XG4gICAgICAgICAgICAgICAgdGVtcFRyYW5zZm9ybVtpUm93MSArIGtdID0gcm93MS5pbVtrXTtcbiAgICAgICAgICAgICAgICB0ZW1wVHJhbnNmb3JtW2lSb3cyICsga10gPSByb3cyLnJlW2tdO1xuICAgICAgICAgICAgICAgIHRlbXBUcmFuc2Zvcm1baVJvdzMgKyBrXSA9IHJvdzIuaW1ba107XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvL2NvbnNvbGUubG9nKHRlbXBUcmFuc2Zvcm0pO1xuICAgICAgICByb3cxID0gbnVsbDtcbiAgICAgICAgcm93MiA9IG51bGw7XG4gICAgICAgIC8vIHRyYW5zZm9ybSBjb2x1bW5zXG4gICAgICAgIHZhciBmaW5hbFRyYW5zZm9ybSA9IG5ldyBBcnJheShmdFJvd3MgKiBmdENvbHMpO1xuXG4gICAgICAgIEZGVC5pbml0KG5Sb3dzKTtcbiAgICAgICAgdmFyIHRtcENvbHMgPSB7cmU6IG5ldyBBcnJheShuUm93cyksIGltOiBuZXcgQXJyYXkoblJvd3MpfTtcbiAgICAgICAgZm9yICh2YXIgaUNvbCA9IGZ0Q29scyAtIDE7IGlDb2wgPj0gMDsgaUNvbC0tKSB7XG4gICAgICAgICAgICBmb3IgKHZhciBpUm93ID0gblJvd3MgLSAxOyBpUm93ID49IDA7IGlSb3ctLSkge1xuICAgICAgICAgICAgICAgIHRtcENvbHMucmVbaVJvd10gPSB0ZW1wVHJhbnNmb3JtWyhpUm93ICogMikgKiBmdENvbHMgKyBpQ29sXTtcbiAgICAgICAgICAgICAgICB0bXBDb2xzLmltW2lSb3ddID0gdGVtcFRyYW5zZm9ybVsoaVJvdyAqIDIgKyAxKSAqIGZ0Q29scyArIGlDb2xdO1xuICAgICAgICAgICAgICAgIC8vVE9ETyBDaGVjaCB3aHkgdGhpcyBoYXBwZW5zXG4gICAgICAgICAgICAgICAgaWYoaXNOYU4odG1wQ29scy5yZVtpUm93XSkpe1xuICAgICAgICAgICAgICAgICAgICB0bXBDb2xzLnJlW2lSb3ddPTA7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmKGlzTmFOKHRtcENvbHMuaW1baVJvd10pKXtcbiAgICAgICAgICAgICAgICAgICAgdG1wQ29scy5pbVtpUm93XT0wO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIEZGVC5mZnQxZCh0bXBDb2xzLnJlLCB0bXBDb2xzLmltKTtcbiAgICAgICAgICAgIGZvciAodmFyIGlSb3cgPSBuUm93cyAtIDE7IGlSb3cgPj0gMDsgaVJvdy0tKSB7XG4gICAgICAgICAgICAgICAgZmluYWxUcmFuc2Zvcm1bKGlSb3cgKiAyKSAqIGZ0Q29scyArIGlDb2xdID0gdG1wQ29scy5yZVtpUm93XTtcbiAgICAgICAgICAgICAgICBmaW5hbFRyYW5zZm9ybVsoaVJvdyAqIDIgKyAxKSAqIGZ0Q29scyArIGlDb2xdID0gdG1wQ29scy5pbVtpUm93XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vY29uc29sZS5sb2coZmluYWxUcmFuc2Zvcm0pO1xuICAgICAgICByZXR1cm4gZmluYWxUcmFuc2Zvcm07XG5cbiAgICB9LFxuICAgIC8qKlxuICAgICAqXG4gICAgICogQHBhcmFtIGZvdXJpZXJUcmFuc2Zvcm1cbiAgICAgKiBAcGFyYW0gcmVhbFRyYW5zZm9ybTFcbiAgICAgKiBAcGFyYW0gcmVhbFRyYW5zZm9ybTJcbiAgICAgKlxuICAgICAqIFJlY29uc3RydWN0cyB0aGUgaW5kaXZpZHVhbCBGb3VyaWVyIHRyYW5zZm9ybXMgb2YgdHdvIHNpbXVsdGFuZW91c2x5XG4gICAgICogdHJhbnNmb3JtZWQgc2VyaWVzLiBCYXNlZCBvbiB0aGUgU3ltbWV0cnkgcmVsYXRpb25zaGlwcyAodGhlIGFzdGVyaXNrXG4gICAgICogZGVub3RlcyB0aGUgY29tcGxleCBjb25qdWdhdGUpXG4gICAgICpcbiAgICAgKiBGX3tOLW59ID0gRl9uXnsqfSBmb3IgYSBwdXJlbHkgcmVhbCBmIHRyYW5zZm9ybWVkIHRvIEZcbiAgICAgKlxuICAgICAqIEdfe04tbn0gPSBHX25eeyp9IGZvciBhIHB1cmVseSBpbWFnaW5hcnkgZyB0cmFuc2Zvcm1lZCB0byBHXG4gICAgICpcbiAgICAgKi9cbiAgICByZWNvbnN0cnVjdFR3b1JlYWxGRlQ6ZnVuY3Rpb24oZm91cmllclRyYW5zZm9ybSwgcmVhbFRyYW5zZm9ybTEsIHJlYWxUcmFuc2Zvcm0yKSB7XG4gICAgICAgIHZhciBsZW5ndGggPSBmb3VyaWVyVHJhbnNmb3JtLnJlLmxlbmd0aDtcblxuICAgICAgICAvLyB0aGUgY29tcG9uZW50cyBuPTAgYXJlIHRyaXZpYWxcbiAgICAgICAgcmVhbFRyYW5zZm9ybTEucmVbMF0gPSBmb3VyaWVyVHJhbnNmb3JtLnJlWzBdO1xuICAgICAgICByZWFsVHJhbnNmb3JtMS5pbVswXSA9IDAuMDtcbiAgICAgICAgcmVhbFRyYW5zZm9ybTIucmVbMF0gPSBmb3VyaWVyVHJhbnNmb3JtLmltWzBdO1xuICAgICAgICByZWFsVHJhbnNmb3JtMi5pbVswXSA9IDAuMDtcbiAgICAgICAgdmFyIHJtLCBycCwgaW0sIGlwLCBqO1xuICAgICAgICBmb3IgKHZhciBpID0gbGVuZ3RoIC8gMjsgaSA+IDA7IGktLSkge1xuICAgICAgICAgICAgaiA9IGxlbmd0aCAtIGk7XG4gICAgICAgICAgICBybSA9IDAuNSAqIChmb3VyaWVyVHJhbnNmb3JtLnJlW2ldIC0gZm91cmllclRyYW5zZm9ybS5yZVtqXSk7XG4gICAgICAgICAgICBycCA9IDAuNSAqIChmb3VyaWVyVHJhbnNmb3JtLnJlW2ldICsgZm91cmllclRyYW5zZm9ybS5yZVtqXSk7XG4gICAgICAgICAgICBpbSA9IDAuNSAqIChmb3VyaWVyVHJhbnNmb3JtLmltW2ldIC0gZm91cmllclRyYW5zZm9ybS5pbVtqXSk7XG4gICAgICAgICAgICBpcCA9IDAuNSAqIChmb3VyaWVyVHJhbnNmb3JtLmltW2ldICsgZm91cmllclRyYW5zZm9ybS5pbVtqXSk7XG4gICAgICAgICAgICByZWFsVHJhbnNmb3JtMS5yZVtpXSA9IHJwO1xuICAgICAgICAgICAgcmVhbFRyYW5zZm9ybTEuaW1baV0gPSBpbTtcbiAgICAgICAgICAgIHJlYWxUcmFuc2Zvcm0xLnJlW2pdID0gcnA7XG4gICAgICAgICAgICByZWFsVHJhbnNmb3JtMS5pbVtqXSA9IC1pbTtcbiAgICAgICAgICAgIHJlYWxUcmFuc2Zvcm0yLnJlW2ldID0gaXA7XG4gICAgICAgICAgICByZWFsVHJhbnNmb3JtMi5pbVtpXSA9IC1ybTtcbiAgICAgICAgICAgIHJlYWxUcmFuc2Zvcm0yLnJlW2pdID0gaXA7XG4gICAgICAgICAgICByZWFsVHJhbnNmb3JtMi5pbVtqXSA9IHJtO1xuICAgICAgICB9XG4gICAgfSxcblxuICAgIC8qKlxuICAgICAqIEluIHBsYWNlIHZlcnNpb24gb2YgY29udm9sdXRlIDJEXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZnRTaWduYWxcbiAgICAgKiBAcGFyYW0gZnRGaWx0ZXJcbiAgICAgKiBAcGFyYW0gZnRSb3dzXG4gICAgICogQHBhcmFtIGZ0Q29sc1xuICAgICAqIEByZXR1cm5cbiAgICAgKi9cbiAgICBjb252b2x1dGUyREk6ZnVuY3Rpb24oZnRTaWduYWwsIGZ0RmlsdGVyLCBmdFJvd3MsIGZ0Q29scykge1xuICAgICAgICB2YXIgcmUsIGltO1xuICAgICAgICBmb3IgKHZhciBpUm93ID0gMDsgaVJvdyA8IGZ0Um93cyAvIDI7IGlSb3crKykge1xuICAgICAgICAgICAgZm9yICh2YXIgaUNvbCA9IDA7IGlDb2wgPCBmdENvbHM7IGlDb2wrKykge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgcmUgPSBmdFNpZ25hbFsoaVJvdyAqIDIpICogZnRDb2xzICsgaUNvbF1cbiAgICAgICAgICAgICAgICAgICAgKiBmdEZpbHRlclsoaVJvdyAqIDIpICogZnRDb2xzICsgaUNvbF1cbiAgICAgICAgICAgICAgICAgICAgLSBmdFNpZ25hbFsoaVJvdyAqIDIgKyAxKSAqIGZ0Q29scyArIGlDb2xdXG4gICAgICAgICAgICAgICAgICAgICogZnRGaWx0ZXJbKGlSb3cgKiAyICsgMSkgKiBmdENvbHMgKyBpQ29sXTtcbiAgICAgICAgICAgICAgICBpbSA9IGZ0U2lnbmFsWyhpUm93ICogMikgKiBmdENvbHMgKyBpQ29sXVxuICAgICAgICAgICAgICAgICAgICAqIGZ0RmlsdGVyWyhpUm93ICogMiArIDEpICogZnRDb2xzICsgaUNvbF1cbiAgICAgICAgICAgICAgICAgICAgKyBmdFNpZ25hbFsoaVJvdyAqIDIgKyAxKSAqIGZ0Q29scyArIGlDb2xdXG4gICAgICAgICAgICAgICAgICAgICogZnRGaWx0ZXJbKGlSb3cgKiAyKSAqIGZ0Q29scyArIGlDb2xdO1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgZnRTaWduYWxbKGlSb3cgKiAyKSAqIGZ0Q29scyArIGlDb2xdID0gcmU7XG4gICAgICAgICAgICAgICAgZnRTaWduYWxbKGlSb3cgKiAyICsgMSkgKiBmdENvbHMgKyBpQ29sXSA9IGltO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICAvKipcbiAgICAgKlxuICAgICAqIEBwYXJhbSBkYXRhXG4gICAgICogQHBhcmFtIGtlcm5lbFxuICAgICAqIEBwYXJhbSBuUm93c1xuICAgICAqIEBwYXJhbSBuQ29sc1xuICAgICAqIEByZXR1cm5zIHsqfVxuICAgICAqL1xuICAgIGNvbnZvbHV0ZTpmdW5jdGlvbihkYXRhLCBrZXJuZWwsIG5Sb3dzLCBuQ29scywgb3B0KSB7XG4gICAgICAgIHZhciBmdFNwZWN0cnVtID0gbmV3IEFycmF5KG5Db2xzICogblJvd3MpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaTxuUm93cyAqIG5Db2xzOyBpKyspIHtcbiAgICAgICAgICAgIGZ0U3BlY3RydW1baV0gPSBkYXRhW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgZnRTcGVjdHJ1bSA9IHRoaXMuZmZ0MkRBcnJheShmdFNwZWN0cnVtLCBuUm93cywgbkNvbHMpO1xuXG5cbiAgICAgICAgdmFyIGRpbVIgPSBrZXJuZWwubGVuZ3RoO1xuICAgICAgICB2YXIgZGltQyA9IGtlcm5lbFswXS5sZW5ndGg7XG4gICAgICAgIHZhciBmdEZpbHRlckRhdGEgPSBuZXcgQXJyYXkobkNvbHMgKiBuUm93cyk7XG4gICAgICAgIGZvcih2YXIgaSA9IDA7IGkgPCBuQ29scyAqIG5Sb3dzOyBpKyspIHtcbiAgICAgICAgICAgIGZ0RmlsdGVyRGF0YVtpXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaVJvdywgaUNvbDtcbiAgICAgICAgdmFyIHNoaWZ0UiA9IE1hdGguZmxvb3IoKGRpbVIgLSAxKSAvIDIpO1xuICAgICAgICB2YXIgc2hpZnRDID0gTWF0aC5mbG9vcigoZGltQyAtIDEpIC8gMik7XG4gICAgICAgIGZvciAodmFyIGlyID0gMDsgaXIgPCBkaW1SOyBpcisrKSB7XG4gICAgICAgICAgICBpUm93ID0gKGlyIC0gc2hpZnRSICsgblJvd3MpICUgblJvd3M7XG4gICAgICAgICAgICBmb3IgKHZhciBpYyA9IDA7IGljIDwgZGltQzsgaWMrKykge1xuICAgICAgICAgICAgICAgIGlDb2wgPSAoaWMgLSBzaGlmdEMgKyBuQ29scykgJSBuQ29scztcbiAgICAgICAgICAgICAgICBmdEZpbHRlckRhdGFbaVJvdyAqIG5Db2xzICsgaUNvbF0gPSBrZXJuZWxbaXJdW2ljXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBmdEZpbHRlckRhdGEgPSB0aGlzLmZmdDJEQXJyYXkoZnRGaWx0ZXJEYXRhLCBuUm93cywgbkNvbHMpO1xuXG4gICAgICAgIHZhciBmdFJvd3MgPSBuUm93cyAqIDI7XG4gICAgICAgIHZhciBmdENvbHMgPSBuQ29scyAvIDIgKyAxO1xuICAgICAgICB0aGlzLmNvbnZvbHV0ZTJESShmdFNwZWN0cnVtLCBmdEZpbHRlckRhdGEsIGZ0Um93cywgZnRDb2xzKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5pZmZ0MkRBcnJheShmdFNwZWN0cnVtLCBmdFJvd3MsIGZ0Q29scyk7XG4gICAgfSxcblxuXG4gICAgdG9SYWRpeDI6ZnVuY3Rpb24oZGF0YSwgblJvd3MsIG5Db2xzKSB7XG4gICAgICAgIHZhciBpLCBqLCBpcm93LCBpY29sO1xuICAgICAgICB2YXIgY29scyA9IG5Db2xzLCByb3dzID0gblJvd3MsIHByb3dzPTAsIHBjb2xzPTA7XG4gICAgICAgIGlmKCEobkNvbHMgIT09IDAgJiYgKG5Db2xzICYgKG5Db2xzIC0gMSkpID09PSAwKSkge1xuICAgICAgICAgICAgLy9UaGVuIHdlIGhhdmUgdG8gbWFrZSBhIHBhZGluZyB0byBuZXh0IHJhZGl4MlxuICAgICAgICAgICAgY29scyA9IDA7XG4gICAgICAgICAgICB3aGlsZSgobkNvbHM+PisrY29scykhPTApO1xuICAgICAgICAgICAgY29scz0xPDxjb2xzO1xuICAgICAgICAgICAgcGNvbHMgPSBjb2xzLW5Db2xzO1xuICAgICAgICB9XG4gICAgICAgIGlmKCEoblJvd3MgIT09IDAgJiYgKG5Sb3dzICYgKG5Sb3dzIC0gMSkpID09PSAwKSkge1xuICAgICAgICAgICAgLy9UaGVuIHdlIGhhdmUgdG8gbWFrZSBhIHBhZGluZyB0byBuZXh0IHJhZGl4MlxuICAgICAgICAgICAgcm93cyA9IDA7XG4gICAgICAgICAgICB3aGlsZSgoblJvd3M+Pisrcm93cykhPTApO1xuICAgICAgICAgICAgcm93cz0xPDxyb3dzO1xuICAgICAgICAgICAgcHJvd3MgPSAocm93cy1uUm93cykqY29scztcbiAgICAgICAgfVxuICAgICAgICBpZihyb3dzPT1uUm93cyYmY29scz09bkNvbHMpLy9EbyBub3RoaW5nLiBSZXR1cm5zIHRoZSBzYW1lIGlucHV0ISEhIEJlIGNhcmVmdWxcbiAgICAgICAgICAgIHJldHVybiB7ZGF0YTpkYXRhLCByb3dzOm5Sb3dzLCBjb2xzOm5Db2xzfTtcblxuICAgICAgICB2YXIgb3V0cHV0ID0gbmV3IEFycmF5KHJvd3MqY29scyk7XG4gICAgICAgIHZhciBzaGlmdFIgPSBNYXRoLmZsb29yKChyb3dzLW5Sb3dzKS8yKS1uUm93cztcbiAgICAgICAgdmFyIHNoaWZ0QyA9IE1hdGguZmxvb3IoKGNvbHMtbkNvbHMpLzIpLW5Db2xzO1xuXG4gICAgICAgIGZvciggaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgICAgIGlyb3cgPSBpKmNvbHM7XG4gICAgICAgICAgICBpY29sID0gKChpLXNoaWZ0UikgJSBuUm93cykgKiBuQ29scztcbiAgICAgICAgICAgIGZvciggaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgICAgICAgICAgICBvdXRwdXRbaXJvdytqXSA9IGRhdGFbKGljb2wrKGotc2hpZnRDKSAlIG5Db2xzKSBdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7ZGF0YTpvdXRwdXQsIHJvd3M6cm93cywgY29sczpjb2xzfTtcbiAgICB9LFxuXG4gICAgLyoqXG4gICAgICogQ3JvcCB0aGUgZ2l2ZW4gbWF0cml4IHRvIGZpdCB0aGUgY29ycmVzcG9uZGluZyBudW1iZXIgb2Ygcm93cyBhbmQgY29sdW1uc1xuICAgICAqL1xuICAgIGNyb3A6ZnVuY3Rpb24oZGF0YSwgcm93cywgY29scywgblJvd3MsIG5Db2xzLCBvcHQpIHtcblxuICAgICAgICBpZihyb3dzID09IG5Sb3dzICYmIGNvbHMgPT0gbkNvbHMpLy9EbyBub3RoaW5nLiBSZXR1cm5zIHRoZSBzYW1lIGlucHV0ISEhIEJlIGNhcmVmdWxcbiAgICAgICAgICAgIHJldHVybiBkYXRhO1xuXG4gICAgICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgb3B0KTtcblxuICAgICAgICB2YXIgb3V0cHV0ID0gbmV3IEFycmF5KG5Db2xzKm5Sb3dzKTtcblxuICAgICAgICB2YXIgc2hpZnRSID0gTWF0aC5mbG9vcigocm93cy1uUm93cykvMik7XG4gICAgICAgIHZhciBzaGlmdEMgPSBNYXRoLmZsb29yKChjb2xzLW5Db2xzKS8yKTtcbiAgICAgICAgdmFyIGRlc3RpbnlSb3csIHNvdXJjZVJvdywgaSwgajtcbiAgICAgICAgZm9yKCBpID0gMDsgaSA8IG5Sb3dzOyBpKyspIHtcbiAgICAgICAgICAgIGRlc3RpbnlSb3cgPSBpKm5Db2xzO1xuICAgICAgICAgICAgc291cmNlUm93ID0gKGkrc2hpZnRSKSpjb2xzO1xuICAgICAgICAgICAgZm9yKCBqID0gMDtqIDwgbkNvbHM7IGorKykge1xuICAgICAgICAgICAgICAgIG91dHB1dFtkZXN0aW55Um93K2pdID0gZGF0YVtzb3VyY2VSb3crKGorc2hpZnRDKV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gb3V0cHV0O1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBGRlRVdGlscztcbiIsIi8qKlxuICogRmFzdCBGb3VyaWVyIFRyYW5zZm9ybSBtb2R1bGVcbiAqIDFELUZGVC9JRkZULCAyRC1GRlQvSUZGVCAocmFkaXgtMilcbiAqL1xudmFyIEZGVCA9IChmdW5jdGlvbigpe1xuICB2YXIgRkZUOyAgXG4gIFxuICBpZih0eXBlb2YgZXhwb3J0cyAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICBGRlQgPSBleHBvcnRzOyAgIC8vIGZvciBDb21tb25KU1xuICB9IGVsc2Uge1xuICAgIEZGVCA9IHt9O1xuICB9XG4gIFxuICB2YXIgdmVyc2lvbiA9IHtcbiAgICByZWxlYXNlOiAnMC4zLjAnLFxuICAgIGRhdGU6ICcyMDEzLTAzJ1xuICB9O1xuICBGRlQudG9TdHJpbmcgPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gXCJ2ZXJzaW9uIFwiICsgdmVyc2lvbi5yZWxlYXNlICsgXCIsIHJlbGVhc2VkIFwiICsgdmVyc2lvbi5kYXRlO1xuICB9O1xuXG4gIC8vIGNvcmUgb3BlcmF0aW9uc1xuICB2YXIgX24gPSAwLCAgICAgICAgICAvLyBvcmRlclxuICAgICAgX2JpdHJldiA9IG51bGwsICAvLyBiaXQgcmV2ZXJzYWwgdGFibGVcbiAgICAgIF9jc3RiID0gbnVsbDsgICAgLy8gc2luL2NvcyB0YWJsZVxuXG4gIHZhciBjb3JlID0ge1xuICAgIGluaXQgOiBmdW5jdGlvbihuKSB7XG4gICAgICBpZihuICE9PSAwICYmIChuICYgKG4gLSAxKSkgPT09IDApIHtcbiAgICAgICAgX24gPSBuO1xuICAgICAgICBjb3JlLl9pbml0QXJyYXkoKTtcbiAgICAgICAgY29yZS5fbWFrZUJpdFJldmVyc2FsVGFibGUoKTtcbiAgICAgICAgY29yZS5fbWFrZUNvc1NpblRhYmxlKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbml0OiByYWRpeC0yIHJlcXVpcmVkXCIpO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gMUQtRkZUXG4gICAgZmZ0MWQgOiBmdW5jdGlvbihyZSwgaW0pIHtcbiAgICAgIGNvcmUuZmZ0KHJlLCBpbSwgMSk7XG4gICAgfSxcbiAgICAvLyAxRC1JRkZUXG4gICAgaWZmdDFkIDogZnVuY3Rpb24ocmUsIGltKSB7XG4gICAgICB2YXIgbiA9IDEvX247XG4gICAgICBjb3JlLmZmdChyZSwgaW0sIC0xKTtcbiAgICAgIGZvcih2YXIgaT0wOyBpPF9uOyBpKyspIHtcbiAgICAgICAgcmVbaV0gKj0gbjtcbiAgICAgICAgaW1baV0gKj0gbjtcbiAgICAgIH1cbiAgICB9LFxuICAgICAvLyAxRC1JRkZUXG4gICAgYnQxZCA6IGZ1bmN0aW9uKHJlLCBpbSkge1xuICAgICAgY29yZS5mZnQocmUsIGltLCAtMSk7XG4gICAgfSxcbiAgICAvLyAyRC1GRlQgTm90IHZlcnkgdXNlZnVsIGlmIHRoZSBudW1iZXIgb2Ygcm93cyBoYXZlIHRvIGJlIGVxdWFsIHRvIGNvbHNcbiAgICBmZnQyZCA6IGZ1bmN0aW9uKHJlLCBpbSkge1xuICAgICAgdmFyIHRyZSA9IFtdLFxuICAgICAgICAgIHRpbSA9IFtdLFxuICAgICAgICAgIGkgPSAwO1xuICAgICAgLy8geC1heGlzXG4gICAgICBmb3IodmFyIHk9MDsgeTxfbjsgeSsrKSB7XG4gICAgICAgIGkgPSB5Kl9uO1xuICAgICAgICBmb3IodmFyIHgxPTA7IHgxPF9uOyB4MSsrKSB7XG4gICAgICAgICAgdHJlW3gxXSA9IHJlW3gxICsgaV07XG4gICAgICAgICAgdGltW3gxXSA9IGltW3gxICsgaV07XG4gICAgICAgIH1cbiAgICAgICAgY29yZS5mZnQxZCh0cmUsIHRpbSk7XG4gICAgICAgIGZvcih2YXIgeDI9MDsgeDI8X247IHgyKyspIHtcbiAgICAgICAgICByZVt4MiArIGldID0gdHJlW3gyXTtcbiAgICAgICAgICBpbVt4MiArIGldID0gdGltW3gyXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8geS1heGlzXG4gICAgICBmb3IodmFyIHg9MDsgeDxfbjsgeCsrKSB7XG4gICAgICAgIGZvcih2YXIgeTE9MDsgeTE8X247IHkxKyspIHtcbiAgICAgICAgICBpID0geCArIHkxKl9uO1xuICAgICAgICAgIHRyZVt5MV0gPSByZVtpXTtcbiAgICAgICAgICB0aW1beTFdID0gaW1baV07XG4gICAgICAgIH1cbiAgICAgICAgY29yZS5mZnQxZCh0cmUsIHRpbSk7XG4gICAgICAgIGZvcih2YXIgeTI9MDsgeTI8X247IHkyKyspIHtcbiAgICAgICAgICBpID0geCArIHkyKl9uO1xuICAgICAgICAgIHJlW2ldID0gdHJlW3kyXTtcbiAgICAgICAgICBpbVtpXSA9IHRpbVt5Ml07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIDJELUlGRlRcbiAgICBpZmZ0MmQgOiBmdW5jdGlvbihyZSwgaW0pIHtcbiAgICAgIHZhciB0cmUgPSBbXSxcbiAgICAgICAgICB0aW0gPSBbXSxcbiAgICAgICAgICBpID0gMDtcbiAgICAgIC8vIHgtYXhpc1xuICAgICAgZm9yKHZhciB5PTA7IHk8X247IHkrKykge1xuICAgICAgICBpID0geSpfbjtcbiAgICAgICAgZm9yKHZhciB4MT0wOyB4MTxfbjsgeDErKykge1xuICAgICAgICAgIHRyZVt4MV0gPSByZVt4MSArIGldO1xuICAgICAgICAgIHRpbVt4MV0gPSBpbVt4MSArIGldO1xuICAgICAgICB9XG4gICAgICAgIGNvcmUuaWZmdDFkKHRyZSwgdGltKTtcbiAgICAgICAgZm9yKHZhciB4Mj0wOyB4MjxfbjsgeDIrKykge1xuICAgICAgICAgIHJlW3gyICsgaV0gPSB0cmVbeDJdO1xuICAgICAgICAgIGltW3gyICsgaV0gPSB0aW1beDJdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICAvLyB5LWF4aXNcbiAgICAgIGZvcih2YXIgeD0wOyB4PF9uOyB4KyspIHtcbiAgICAgICAgZm9yKHZhciB5MT0wOyB5MTxfbjsgeTErKykge1xuICAgICAgICAgIGkgPSB4ICsgeTEqX247XG4gICAgICAgICAgdHJlW3kxXSA9IHJlW2ldO1xuICAgICAgICAgIHRpbVt5MV0gPSBpbVtpXTtcbiAgICAgICAgfVxuICAgICAgICBjb3JlLmlmZnQxZCh0cmUsIHRpbSk7XG4gICAgICAgIGZvcih2YXIgeTI9MDsgeTI8X247IHkyKyspIHtcbiAgICAgICAgICBpID0geCArIHkyKl9uO1xuICAgICAgICAgIHJlW2ldID0gdHJlW3kyXTtcbiAgICAgICAgICBpbVtpXSA9IHRpbVt5Ml07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIGNvcmUgb3BlcmF0aW9uIG9mIEZGVFxuICAgIGZmdCA6IGZ1bmN0aW9uKHJlLCBpbSwgaW52KSB7XG4gICAgICB2YXIgZCwgaCwgaWssIG0sIHRtcCwgd3IsIHdpLCB4ciwgeGksXG4gICAgICAgICAgbjQgPSBfbiA+PiAyO1xuICAgICAgLy8gYml0IHJldmVyc2FsXG4gICAgICBmb3IodmFyIGw9MDsgbDxfbjsgbCsrKSB7XG4gICAgICAgIG0gPSBfYml0cmV2W2xdO1xuICAgICAgICBpZihsIDwgbSkge1xuICAgICAgICAgIHRtcCA9IHJlW2xdO1xuICAgICAgICAgIHJlW2xdID0gcmVbbV07XG4gICAgICAgICAgcmVbbV0gPSB0bXA7XG4gICAgICAgICAgdG1wID0gaW1bbF07XG4gICAgICAgICAgaW1bbF0gPSBpbVttXTtcbiAgICAgICAgICBpbVttXSA9IHRtcDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gYnV0dGVyZmx5IG9wZXJhdGlvblxuICAgICAgZm9yKHZhciBrPTE7IGs8X247IGs8PD0xKSB7XG4gICAgICAgIGggPSAwO1xuICAgICAgICBkID0gX24vKGsgPDwgMSk7XG4gICAgICAgIGZvcih2YXIgaj0wOyBqPGs7IGorKykge1xuICAgICAgICAgIHdyID0gX2NzdGJbaCArIG40XTtcbiAgICAgICAgICB3aSA9IGludipfY3N0YltoXTtcbiAgICAgICAgICBmb3IodmFyIGk9ajsgaTxfbjsgaSs9KGs8PDEpKSB7XG4gICAgICAgICAgICBpayA9IGkgKyBrO1xuICAgICAgICAgICAgeHIgPSB3cipyZVtpa10gKyB3aSppbVtpa107XG4gICAgICAgICAgICB4aSA9IHdyKmltW2lrXSAtIHdpKnJlW2lrXTtcbiAgICAgICAgICAgIHJlW2lrXSA9IHJlW2ldIC0geHI7XG4gICAgICAgICAgICByZVtpXSArPSB4cjtcbiAgICAgICAgICAgIGltW2lrXSA9IGltW2ldIC0geGk7XG4gICAgICAgICAgICBpbVtpXSArPSB4aTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaCArPSBkO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICAvLyBpbml0aWFsaXplIHRoZSBhcnJheSAoc3VwcG9ydHMgVHlwZWRBcnJheSlcbiAgICBfaW5pdEFycmF5IDogZnVuY3Rpb24oKSB7XG4gICAgICBpZih0eXBlb2YgVWludDMyQXJyYXkgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIF9iaXRyZXYgPSBuZXcgVWludDMyQXJyYXkoX24pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2JpdHJldiA9IFtdO1xuICAgICAgfVxuICAgICAgaWYodHlwZW9mIEZsb2F0NjRBcnJheSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgX2NzdGIgPSBuZXcgRmxvYXQ2NEFycmF5KF9uKjEuMjUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2NzdGIgPSBbXTtcbiAgICAgIH1cbiAgICB9LFxuICAgIC8vIHplcm8gcGFkZGluZ1xuICAgIF9wYWRkaW5nWmVybyA6IGZ1bmN0aW9uKCkge1xuICAgICAgLy8gVE9ET1xuICAgIH0sXG4gICAgLy8gbWFrZXMgYml0IHJldmVyc2FsIHRhYmxlXG4gICAgX21ha2VCaXRSZXZlcnNhbFRhYmxlIDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgaSA9IDAsXG4gICAgICAgICAgaiA9IDAsXG4gICAgICAgICAgayA9IDA7XG4gICAgICBfYml0cmV2WzBdID0gMDtcbiAgICAgIHdoaWxlKCsraSA8IF9uKSB7XG4gICAgICAgIGsgPSBfbiA+PiAxO1xuICAgICAgICB3aGlsZShrIDw9IGopIHtcbiAgICAgICAgICBqIC09IGs7XG4gICAgICAgICAgayA+Pj0gMTtcbiAgICAgICAgfVxuICAgICAgICBqICs9IGs7XG4gICAgICAgIF9iaXRyZXZbaV0gPSBqO1xuICAgICAgfVxuICAgIH0sXG4gICAgLy8gbWFrZXMgdHJpZ29ub21ldGlyaWMgZnVuY3Rpb24gdGFibGVcbiAgICBfbWFrZUNvc1NpblRhYmxlIDogZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgbjIgPSBfbiA+PiAxLFxuICAgICAgICAgIG40ID0gX24gPj4gMixcbiAgICAgICAgICBuOCA9IF9uID4+IDMsXG4gICAgICAgICAgbjJwNCA9IG4yICsgbjQsXG4gICAgICAgICAgdCA9IE1hdGguc2luKE1hdGguUEkvX24pLFxuICAgICAgICAgIGRjID0gMip0KnQsXG4gICAgICAgICAgZHMgPSBNYXRoLnNxcnQoZGMqKDIgLSBkYykpLFxuICAgICAgICAgIGMgPSBfY3N0YltuNF0gPSAxLFxuICAgICAgICAgIHMgPSBfY3N0YlswXSA9IDA7XG4gICAgICB0ID0gMipkYztcbiAgICAgIGZvcih2YXIgaT0xOyBpPG44OyBpKyspIHtcbiAgICAgICAgYyAtPSBkYztcbiAgICAgICAgZGMgKz0gdCpjO1xuICAgICAgICBzICs9IGRzO1xuICAgICAgICBkcyAtPSB0KnM7XG4gICAgICAgIF9jc3RiW2ldID0gcztcbiAgICAgICAgX2NzdGJbbjQgLSBpXSA9IGM7XG4gICAgICB9XG4gICAgICBpZihuOCAhPT0gMCkge1xuICAgICAgICBfY3N0YltuOF0gPSBNYXRoLnNxcnQoMC41KTtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgaj0wOyBqPG40OyBqKyspIHtcbiAgICAgICAgX2NzdGJbbjIgLSBqXSAgPSBfY3N0YltqXTtcbiAgICAgIH1cbiAgICAgIGZvcih2YXIgaz0wOyBrPG4ycDQ7IGsrKykge1xuICAgICAgICBfY3N0YltrICsgbjJdID0gLV9jc3RiW2tdO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgLy8gYWxpYXNlcyAocHVibGljIEFQSXMpXG4gIHZhciBhcGlzID0gWydpbml0JywgJ2ZmdDFkJywgJ2lmZnQxZCcsICdmZnQyZCcsICdpZmZ0MmQnXTtcbiAgZm9yKHZhciBpPTA7IGk8YXBpcy5sZW5ndGg7IGkrKykge1xuICAgIEZGVFthcGlzW2ldXSA9IGNvcmVbYXBpc1tpXV07XG4gIH1cbiAgRkZULmJ0ID0gY29yZS5idDFkO1xuICBGRlQuZmZ0ID0gY29yZS5mZnQxZDtcbiAgRkZULmlmZnQgPSBjb3JlLmlmZnQxZDtcbiAgXG4gIHJldHVybiBGRlQ7XG59KS5jYWxsKHRoaXMpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLkZGVFV0aWxzID0gcmVxdWlyZShcIi4vRkZUVXRpbHNcIik7XG5leHBvcnRzLkZGVCA9IHJlcXVpcmUoJy4vZmZ0bGliJyk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgc3F1YXJlZEV1Y2xpZGVhbiB9ID0gcmVxdWlyZSgnbWwtZGlzdGFuY2UtZXVjbGlkZWFuJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBzaWdtYTogMVxufTtcblxuY2xhc3MgR2F1c3NpYW5LZXJuZWwge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICB0aGlzLnNpZ21hID0gb3B0aW9ucy5zaWdtYTtcbiAgICB0aGlzLmRpdmlzb3IgPSAyICogb3B0aW9ucy5zaWdtYSAqIG9wdGlvbnMuc2lnbWE7XG4gIH1cbiAgY29tcHV0ZSh4LCB5KSB7XG4gICAgY29uc3QgZGlzdGFuY2UgPSBzcXVhcmVkRXVjbGlkZWFuKHgsIHkpO1xuICAgIHJldHVybiBNYXRoLmV4cCgtZGlzdGFuY2UgLyB0aGlzLmRpdmlzb3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gR2F1c3NpYW5LZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBkZWdyZWU6IDEsXG4gIGNvbnN0YW50OiAxLFxuICBzY2FsZTogMVxufTtcblxuY2xhc3MgUG9seW5vbWlhbEtlcm5lbCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuXG4gICAgdGhpcy5kZWdyZWUgPSBvcHRpb25zLmRlZ3JlZTtcbiAgICB0aGlzLmNvbnN0YW50ID0gb3B0aW9ucy5jb25zdGFudDtcbiAgICB0aGlzLnNjYWxlID0gb3B0aW9ucy5zY2FsZTtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgc3VtICs9IHhbaV0gKiB5W2ldO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC5wb3codGhpcy5zY2FsZSAqIHN1bSArIHRoaXMuY29uc3RhbnQsIHRoaXMuZGVncmVlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFBvbHlub21pYWxLZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBhbHBoYTogMC4wMSxcbiAgY29uc3RhbnQ6IC1NYXRoLkVcbn07XG5cbmNsYXNzIFNpZ21vaWRLZXJuZWwge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICB0aGlzLmFscGhhID0gb3B0aW9ucy5hbHBoYTtcbiAgICB0aGlzLmNvbnN0YW50ID0gb3B0aW9ucy5jb25zdGFudDtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgeC5sZW5ndGg7IGkrKykge1xuICAgICAgc3VtICs9IHhbaV0gKiB5W2ldO1xuICAgIH1cbiAgICByZXR1cm4gTWF0aC50YW5oKHRoaXMuYWxwaGEgKiBzdW0gKyB0aGlzLmNvbnN0YW50KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFNpZ21vaWRLZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgTWF0cml4LCBNYXRyaXhUcmFuc3Bvc2VWaWV3IH0gPSByZXF1aXJlKCdtbC1tYXRyaXgnKTtcbmNvbnN0IEdhdXNzaWFuS2VybmVsID0gcmVxdWlyZSgnbWwta2VybmVsLWdhdXNzaWFuJyk7XG5jb25zdCBQb2x5bm9taWFsS2VybmVsID0gcmVxdWlyZSgnbWwta2VybmVsLXBvbHlub21pYWwnKTtcbmNvbnN0IFNpZ21vaWRLZXJuZWwgPSByZXF1aXJlKCdtbC1rZXJuZWwtc2lnbW9pZCcpO1xuXG5jb25zdCBBTk9WQUtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVscy9hbm92YS1rZXJuZWwnKTtcbmNvbnN0IENhdWNoeUtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVscy9jYXVjaHkta2VybmVsJyk7XG5jb25zdCBFeHBvbmVudGlhbEtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVscy9leHBvbmVudGlhbC1rZXJuZWwnKTtcbmNvbnN0IEhpc3RvZ3JhbUtlcm5lbCA9IHJlcXVpcmUoJy4va2VybmVscy9oaXN0b2dyYW0taW50ZXJzZWN0aW9uLWtlcm5lbCcpO1xuY29uc3QgTGFwbGFjaWFuS2VybmVsID0gcmVxdWlyZSgnLi9rZXJuZWxzL2xhcGxhY2lhbi1rZXJuZWwnKTtcbmNvbnN0IE11bHRpcXVhZHJhdGljS2VybmVsID0gcmVxdWlyZSgnLi9rZXJuZWxzL211bHRpcXVhZHJhdGljLWtlcm5lbCcpO1xuY29uc3QgUmF0aW9uYWxLZXJuZWwgPSByZXF1aXJlKCcuL2tlcm5lbHMvcmF0aW9uYWwtcXVhZHJhdGljLWtlcm5lbCcpO1xuXG5jb25zdCBrZXJuZWxUeXBlID0ge1xuICBnYXVzc2lhbjogR2F1c3NpYW5LZXJuZWwsXG4gIHJiZjogR2F1c3NpYW5LZXJuZWwsXG4gIHBvbHlub21pYWw6IFBvbHlub21pYWxLZXJuZWwsXG4gIHBvbHk6IFBvbHlub21pYWxLZXJuZWwsXG4gIGFub3ZhOiBBTk9WQUtlcm5lbCxcbiAgY2F1Y2h5OiBDYXVjaHlLZXJuZWwsXG4gIGV4cG9uZW50aWFsOiBFeHBvbmVudGlhbEtlcm5lbCxcbiAgaGlzdG9ncmFtOiBIaXN0b2dyYW1LZXJuZWwsXG4gIG1pbjogSGlzdG9ncmFtS2VybmVsLFxuICBsYXBsYWNpYW46IExhcGxhY2lhbktlcm5lbCxcbiAgbXVsdGlxdWFkcmF0aWM6IE11bHRpcXVhZHJhdGljS2VybmVsLFxuICByYXRpb25hbDogUmF0aW9uYWxLZXJuZWwsXG4gIHNpZ21vaWQ6IFNpZ21vaWRLZXJuZWwsXG4gIG1scDogU2lnbW9pZEtlcm5lbFxufTtcblxuY2xhc3MgS2VybmVsIHtcbiAgY29uc3RydWN0b3IodHlwZSwgb3B0aW9ucykge1xuICAgIHRoaXMua2VybmVsVHlwZSA9IHR5cGU7XG4gICAgaWYgKHR5cGUgPT09ICdsaW5lYXInKSByZXR1cm47XG5cbiAgICBpZiAodHlwZW9mIHR5cGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0eXBlID0gdHlwZS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICB2YXIgS2VybmVsQ29uc3RydWN0b3IgPSBrZXJuZWxUeXBlW3R5cGVdO1xuICAgICAgaWYgKEtlcm5lbENvbnN0cnVjdG9yKSB7XG4gICAgICAgIHRoaXMua2VybmVsRnVuY3Rpb24gPSBuZXcgS2VybmVsQ29uc3RydWN0b3Iob3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHVuc3VwcG9ydGVkIGtlcm5lbCB0eXBlOiAke3R5cGV9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIHR5cGUuY29tcHV0ZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5rZXJuZWxGdW5jdGlvbiA9IHR5cGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICdmaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgdmFsaWQga2VybmVsIHR5cGUgb3IgaW5zdGFuY2UnXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGNvbXB1dGUoaW5wdXRzLCBsYW5kbWFya3MpIHtcbiAgICBpbnB1dHMgPSBNYXRyaXguY2hlY2tNYXRyaXgoaW5wdXRzKTtcbiAgICBpZiAobGFuZG1hcmtzID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGxhbmRtYXJrcyA9IGlucHV0cztcbiAgICB9IGVsc2Uge1xuICAgICAgbGFuZG1hcmtzID0gTWF0cml4LmNoZWNrTWF0cml4KGxhbmRtYXJrcyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmtlcm5lbFR5cGUgPT09ICdsaW5lYXInKSB7XG4gICAgICByZXR1cm4gaW5wdXRzLm1tdWwobmV3IE1hdHJpeFRyYW5zcG9zZVZpZXcobGFuZG1hcmtzKSk7XG4gICAgfVxuXG4gICAgY29uc3Qga2VybmVsTWF0cml4ID0gbmV3IE1hdHJpeChpbnB1dHMucm93cywgbGFuZG1hcmtzLnJvd3MpO1xuICAgIGlmIChpbnB1dHMgPT09IGxhbmRtYXJrcykge1xuICAgICAgLy8gZmFzdCBwYXRoLCBtYXRyaXggaXMgc3ltbWV0cmljXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGlucHV0cy5yb3dzOyBpKyspIHtcbiAgICAgICAgZm9yIChsZXQgaiA9IGk7IGogPCBpbnB1dHMucm93czsgaisrKSB7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLmtlcm5lbEZ1bmN0aW9uLmNvbXB1dGUoXG4gICAgICAgICAgICBpbnB1dHMuZ2V0Um93KGkpLFxuICAgICAgICAgICAgaW5wdXRzLmdldFJvdyhqKVxuICAgICAgICAgICk7XG4gICAgICAgICAga2VybmVsTWF0cml4LnNldChpLCBqLCB2YWx1ZSk7XG4gICAgICAgICAga2VybmVsTWF0cml4LnNldChqLCBpLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbnB1dHMucm93czsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbGFuZG1hcmtzLnJvd3M7IGorKykge1xuICAgICAgICAgIGtlcm5lbE1hdHJpeC5zZXQoXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgaixcbiAgICAgICAgICAgIHRoaXMua2VybmVsRnVuY3Rpb24uY29tcHV0ZShpbnB1dHMuZ2V0Um93KGkpLCBsYW5kbWFya3MuZ2V0Um93KGopKVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGtlcm5lbE1hdHJpeDtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEtlcm5lbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHNpZ21hOiAxLFxuICBkZWdyZWU6IDFcbn07XG5cbmNsYXNzIEFOT1ZBS2VybmVsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5zaWdtYSA9IG9wdGlvbnMuc2lnbWE7XG4gICAgdGhpcy5kZWdyZWUgPSBvcHRpb25zLmRlZ3JlZTtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHZhciBzdW0gPSAwO1xuICAgIHZhciBsZW4gPSBNYXRoLm1pbih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IGxlbjsgKytpKSB7XG4gICAgICBzdW0gKz0gTWF0aC5wb3coXG4gICAgICAgIE1hdGguZXhwKFxuICAgICAgICAgIC10aGlzLnNpZ21hICpcbiAgICAgICAgICAgIE1hdGgucG93KE1hdGgucG93KHhbaSAtIDFdLCBpKSAtIE1hdGgucG93KHlbaSAtIDFdLCBpKSwgMilcbiAgICAgICAgKSxcbiAgICAgICAgdGhpcy5kZWdyZWVcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBzdW07XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBTk9WQUtlcm5lbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgeyBzcXVhcmVkRXVjbGlkZWFuIH0gPSByZXF1aXJlKCdtbC1kaXN0YW5jZS1ldWNsaWRlYW4nKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHNpZ21hOiAxXG59O1xuXG5jbGFzcyBDYXVjaHlLZXJuZWwge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICB0aGlzLnNpZ21hID0gb3B0aW9ucy5zaWdtYTtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHJldHVybiAxIC8gKDEgKyBzcXVhcmVkRXVjbGlkZWFuKHgsIHkpIC8gKHRoaXMuc2lnbWEgKiB0aGlzLnNpZ21hKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDYXVjaHlLZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgZXVjbGlkZWFuIH0gPSByZXF1aXJlKCdtbC1kaXN0YW5jZS1ldWNsaWRlYW4nKTtcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHNpZ21hOiAxXG59O1xuXG5jbGFzcyBFeHBvbmVudGlhbEtlcm5lbCB7XG4gIGNvbnN0cnVjdG9yKG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xuICAgIHRoaXMuc2lnbWEgPSBvcHRpb25zLnNpZ21hO1xuICAgIHRoaXMuZGl2aXNvciA9IDIgKiBvcHRpb25zLnNpZ21hICogb3B0aW9ucy5zaWdtYTtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIGNvbnN0IGRpc3RhbmNlID0gZXVjbGlkZWFuKHgsIHkpO1xuICAgIHJldHVybiBNYXRoLmV4cCgtZGlzdGFuY2UgLyB0aGlzLmRpdmlzb3IpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRXhwb25lbnRpYWxLZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNsYXNzIEhpc3RvZ3JhbUludGVyc2VjdGlvbktlcm5lbCB7XG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHZhciBtaW4gPSBNYXRoLm1pbih4Lmxlbmd0aCwgeS5sZW5ndGgpO1xuICAgIHZhciBzdW0gPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbWluOyArK2kpIHtcbiAgICAgIHN1bSArPSBNYXRoLm1pbih4W2ldLCB5W2ldKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3VtO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gSGlzdG9ncmFtSW50ZXJzZWN0aW9uS2VybmVsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IGV1Y2xpZGVhbiB9ID0gcmVxdWlyZSgnbWwtZGlzdGFuY2UtZXVjbGlkZWFuJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBzaWdtYTogMVxufTtcblxuY2xhc3MgTGFwbGFjaWFuS2VybmVsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5zaWdtYSA9IG9wdGlvbnMuc2lnbWE7XG4gIH1cblxuICBjb21wdXRlKHgsIHkpIHtcbiAgICBjb25zdCBkaXN0YW5jZSA9IGV1Y2xpZGVhbih4LCB5KTtcbiAgICByZXR1cm4gTWF0aC5leHAoLWRpc3RhbmNlIC8gdGhpcy5zaWdtYSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBMYXBsYWNpYW5LZXJuZWw7XG4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IHsgc3F1YXJlZEV1Y2xpZGVhbiB9ID0gcmVxdWlyZSgnbWwtZGlzdGFuY2UtZXVjbGlkZWFuJyk7XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xuICBjb25zdGFudDogMVxufTtcblxuY2xhc3MgTXVsdGlxdWFkcmF0aWNLZXJuZWwge1xuICBjb25zdHJ1Y3RvcihvcHRpb25zKSB7XG4gICAgb3B0aW9ucyA9IE9iamVjdC5hc3NpZ24oe30sIGRlZmF1bHRPcHRpb25zLCBvcHRpb25zKTtcbiAgICB0aGlzLmNvbnN0YW50ID0gb3B0aW9ucy5jb25zdGFudDtcbiAgfVxuXG4gIGNvbXB1dGUoeCwgeSkge1xuICAgIHJldHVybiBNYXRoLnNxcnQoc3F1YXJlZEV1Y2xpZGVhbih4LCB5KSArIHRoaXMuY29uc3RhbnQgKiB0aGlzLmNvbnN0YW50KTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IE11bHRpcXVhZHJhdGljS2VybmVsO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCB7IHNxdWFyZWRFdWNsaWRlYW4gfSA9IHJlcXVpcmUoJ21sLWRpc3RhbmNlLWV1Y2xpZGVhbicpO1xuXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcbiAgY29uc3RhbnQ6IDFcbn07XG5cbmNsYXNzIFJhdGlvbmFsUXVhZHJhdGljS2VybmVsIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucykge1xuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5jb25zdGFudCA9IG9wdGlvbnMuY29uc3RhbnQ7XG4gIH1cblxuICBjb21wdXRlKHgsIHkpIHtcbiAgICBjb25zdCBkaXN0YW5jZSA9IHNxdWFyZWRFdWNsaWRlYW4oeCwgeSk7XG4gICAgcmV0dXJuIDEgLSBkaXN0YW5jZSAvIChkaXN0YW5jZSArIHRoaXMuY29uc3RhbnQpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUmF0aW9uYWxRdWFkcmF0aWNLZXJuZWw7XG4iLCIndXNlIHN0cmljdDsnXG4vKipcbiAqIENyZWF0ZWQgYnkgYWNhc3RpbGxvIG9uIDcvNy8xNi5cbiAqL1xudmFyIEZGVFV0aWxzID0gcmVxdWlyZShcIm1sLWZmdFwiKS5GRlRVdGlscztcblxuZnVuY3Rpb24gY29udm9sdXRpb25GRlQoaW5wdXQsIGtlcm5lbCwgb3B0KSB7XG4gICAgdmFyIHRtcCA9IG1hdHJpeDJBcnJheShpbnB1dCk7XG4gICAgdmFyIGlucHV0RGF0YSA9IHRtcC5kYXRhO1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7bm9ybWFsaXplIDogZmFsc2UsIGRpdmlzb3IgOiAxLCByb3dzOnRtcC5yb3dzLCBjb2xzOnRtcC5jb2xzfSwgb3B0KTtcblxuICAgIHZhciBuUm93cywgbkNvbHM7XG4gICAgaWYgKG9wdGlvbnMucm93cyYmb3B0aW9ucy5jb2xzKSB7XG4gICAgICAgIG5Sb3dzID0gb3B0aW9ucy5yb3dzO1xuICAgICAgICBuQ29scyA9IG9wdGlvbnMuY29scztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbnVtYmVyIG9mIHJvd3Mgb3IgY29sdW1ucyBcIiArIG5Sb3dzICsgXCIgXCIgKyBuQ29scylcbiAgICB9XG5cbiAgICB2YXIgZGl2aXNvciA9IG9wdGlvbnMuZGl2aXNvcjtcbiAgICB2YXIgaSxqO1xuICAgIHZhciBrSGVpZ2h0ID0gIGtlcm5lbC5sZW5ndGg7XG4gICAgdmFyIGtXaWR0aCA9ICBrZXJuZWxbMF0ubGVuZ3RoO1xuICAgIGlmIChvcHRpb25zLm5vcm1hbGl6ZSkge1xuICAgICAgICBkaXZpc29yID0gMDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGtIZWlnaHQ7IGkrKylcbiAgICAgICAgICAgIGZvciAoaiA9IDA7IGogPCBrV2lkdGg7IGorKylcbiAgICAgICAgICAgICAgICBkaXZpc29yICs9IGtlcm5lbFtpXVtqXTtcbiAgICB9XG4gICAgaWYgKGRpdmlzb3IgPT09IDApIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2NvbnZvbHV0aW9uOiBUaGUgZGl2aXNvciBpcyBlcXVhbCB0byB6ZXJvJyk7XG4gICAgfVxuXG4gICAgdmFyIHJhZGl4MlNpemVkID0gRkZUVXRpbHMudG9SYWRpeDIoaW5wdXREYXRhLCBuUm93cywgbkNvbHMpO1xuICAgIHZhciBjb252ID0gRkZUVXRpbHMuY29udm9sdXRlKHJhZGl4MlNpemVkLmRhdGEsIGtlcm5lbCwgcmFkaXgyU2l6ZWQucm93cywgcmFkaXgyU2l6ZWQuY29scyk7XG4gICAgY29udiA9IEZGVFV0aWxzLmNyb3AoY29udiwgcmFkaXgyU2l6ZWQucm93cywgcmFkaXgyU2l6ZWQuY29scywgblJvd3MsIG5Db2xzKTtcblxuICAgIGlmKGRpdmlzb3IhPTAmJmRpdmlzb3IhPTEpe1xuICAgICAgICBmb3IoaT0wO2k8Y29udi5sZW5ndGg7aSsrKXtcbiAgICAgICAgICAgIGNvbnZbaV0vPWRpdmlzb3I7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gY29udjtcbn1cblxuZnVuY3Rpb24gY29udm9sdXRpb25EaXJlY3QoaW5wdXQsIGtlcm5lbCwgb3B0KSB7XG4gICAgdmFyIHRtcCA9IG1hdHJpeDJBcnJheShpbnB1dCk7XG4gICAgdmFyIGlucHV0RGF0YSA9IHRtcC5kYXRhO1xuICAgIHZhciBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7bm9ybWFsaXplIDogZmFsc2UsIGRpdmlzb3IgOiAxLCByb3dzOnRtcC5yb3dzLCBjb2xzOnRtcC5jb2xzfSwgb3B0KTtcblxuICAgIHZhciBuUm93cywgbkNvbHM7XG4gICAgaWYgKG9wdGlvbnMucm93cyYmb3B0aW9ucy5jb2xzKSB7XG4gICAgICAgIG5Sb3dzID0gb3B0aW9ucy5yb3dzO1xuICAgICAgICBuQ29scyA9IG9wdGlvbnMuY29scztcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgbnVtYmVyIG9mIHJvd3Mgb3IgY29sdW1ucyBcIiArIG5Sb3dzICsgXCIgXCIgKyBuQ29scylcbiAgICB9XG5cbiAgICB2YXIgZGl2aXNvciA9IG9wdGlvbnMuZGl2aXNvcjtcbiAgICB2YXIga0hlaWdodCA9ICBrZXJuZWwubGVuZ3RoO1xuICAgIHZhciBrV2lkdGggPSAga2VybmVsWzBdLmxlbmd0aDtcbiAgICB2YXIgaSwgaiwgeCwgeSwgaW5kZXgsIHN1bSwga1ZhbCwgcm93LCBjb2w7XG4gICAgaWYgKG9wdGlvbnMubm9ybWFsaXplKSB7XG4gICAgICAgIGRpdmlzb3IgPSAwO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwga0hlaWdodDsgaSsrKVxuICAgICAgICAgICAgZm9yIChqID0gMDsgaiA8IGtXaWR0aDsgaisrKVxuICAgICAgICAgICAgICAgIGRpdmlzb3IgKz0ga2VybmVsW2ldW2pdO1xuICAgIH1cbiAgICBpZiAoZGl2aXNvciA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignY29udm9sdXRpb246IFRoZSBkaXZpc29yIGlzIGVxdWFsIHRvIHplcm8nKTtcbiAgICB9XG5cbiAgICB2YXIgb3V0cHV0ID0gbmV3IEFycmF5KG5Sb3dzKm5Db2xzKTtcblxuICAgIHZhciBoSGVpZ2h0ID0gTWF0aC5mbG9vcihrSGVpZ2h0LzIpO1xuICAgIHZhciBoV2lkdGggPSBNYXRoLmZsb29yKGtXaWR0aC8yKTtcblxuICAgIGZvciAoeSA9IDA7IHkgPCBuUm93czsgeSsrKSB7XG4gICAgICAgIGZvciAoeCA9IDA7IHggPCBuQ29sczsgeCsrKSB7XG4gICAgICAgICAgICBzdW0gPSAwO1xuICAgICAgICAgICAgZm9yICggaiA9IDA7IGogPCBrSGVpZ2h0OyBqKyspIHtcbiAgICAgICAgICAgICAgICBmb3IgKCBpID0gMDsgaSA8IGtXaWR0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgICAgIGtWYWwgPSBrZXJuZWxba0hlaWdodCAtIGogLSAxXVtrV2lkdGggLSBpIC0gMV07XG4gICAgICAgICAgICAgICAgICAgIHJvdyA9ICh5ICsgaiAtaEhlaWdodCArIG5Sb3dzKSAlIG5Sb3dzO1xuICAgICAgICAgICAgICAgICAgICBjb2wgPSAoeCArIGkgLSBoV2lkdGggKyBuQ29scykgJSBuQ29scztcbiAgICAgICAgICAgICAgICAgICAgaW5kZXggPSAocm93ICogbkNvbHMgKyBjb2wpO1xuICAgICAgICAgICAgICAgICAgICBzdW0gKz0gaW5wdXREYXRhW2luZGV4XSAqIGtWYWw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaW5kZXggPSAoeSAqIG5Db2xzICsgeCk7XG4gICAgICAgICAgICBvdXRwdXRbaW5kZXhdPSBzdW0gLyBkaXZpc29yO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cblxuXG5mdW5jdGlvbiBMb0coc2lnbWEsIG5Qb2ludHMsIG9wdGlvbnMpe1xuICAgIHZhciBmYWN0b3IgPSAxMDAwO1xuICAgIGlmKG9wdGlvbnMmJm9wdGlvbnMuZmFjdG9yKXtcbiAgICAgICAgZmFjdG9yID0gb3B0aW9ucy5mYWN0b3I7XG4gICAgfVxuXG4gICAgdmFyIGtlcm5lbCA9IG5ldyBBcnJheShuUG9pbnRzKTtcbiAgICB2YXIgaSxqLHRtcCx5Mix0bXAyO1xuXG4gICAgZmFjdG9yKj0tMTsvLy0xLyhNYXRoLlBJKk1hdGgucG93KHNpZ21hLDQpKTtcbiAgICB2YXIgY2VudGVyID0gKG5Qb2ludHMtMSkvMjtcbiAgICB2YXIgc2lnbWEyID0gMipzaWdtYSpzaWdtYTtcbiAgICBmb3IoIGk9MDtpPG5Qb2ludHM7aSsrKXtcbiAgICAgICAga2VybmVsW2ldPW5ldyBBcnJheShuUG9pbnRzKTtcbiAgICAgICAgeTIgPSAoaS1jZW50ZXIpKihpLWNlbnRlcik7XG4gICAgICAgIGZvciggaj0wO2o8blBvaW50cztqKyspe1xuICAgICAgICAgICAgdG1wID0gLSgoai1jZW50ZXIpKihqLWNlbnRlcikreTIpL3NpZ21hMjtcbiAgICAgICAgICAgIGtlcm5lbFtpXVtqXT1NYXRoLnJvdW5kKGZhY3RvciooMSt0bXApKk1hdGguZXhwKHRtcCkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGtlcm5lbDtcbn1cblxuZnVuY3Rpb24gbWF0cml4MkFycmF5KGlucHV0KXtcbiAgICB2YXIgaW5wdXREYXRhPWlucHV0O1xuICAgIHZhciBuUm93cywgbkNvbHM7XG4gICAgaWYodHlwZW9mIGlucHV0WzBdIT1cIm51bWJlclwiKXtcbiAgICAgICAgblJvd3MgPSBpbnB1dC5sZW5ndGg7XG4gICAgICAgIG5Db2xzID0gaW5wdXRbMF0ubGVuZ3RoO1xuICAgICAgICBpbnB1dERhdGEgPSBuZXcgQXJyYXkoblJvd3MqbkNvbHMpO1xuICAgICAgICBmb3IodmFyIGk9MDtpPG5Sb3dzO2krKyl7XG4gICAgICAgICAgICBmb3IodmFyIGo9MDtqPG5Db2xzO2orKyl7XG4gICAgICAgICAgICAgICAgaW5wdXREYXRhW2kqbkNvbHMral09aW5wdXRbaV1bal07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZXtcbiAgICAgICAgdmFyIHRtcCA9IE1hdGguc3FydChpbnB1dC5sZW5ndGgpO1xuICAgICAgICBpZihOdW1iZXIuaXNJbnRlZ2VyKHRtcCkpe1xuICAgICAgICAgICAgblJvd3M9dG1wO1xuICAgICAgICAgICAgbkNvbHM9dG1wO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtkYXRhOmlucHV0RGF0YSxyb3dzOm5Sb3dzLGNvbHM6bkNvbHN9O1xufVxuXG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGZmdDpjb252b2x1dGlvbkZGVCxcbiAgICBkaXJlY3Q6Y29udm9sdXRpb25EaXJlY3QsXG4gICAga2VybmVsRmFjdG9yeTp7TG9HOkxvR30sXG4gICAgbWF0cml4MkFycmF5Om1hdHJpeDJBcnJheVxufTsiLCJpbXBvcnQgTWF0cml4IGZyb20gJy4uL21hdHJpeCc7XG5pbXBvcnQgV3JhcHBlck1hdHJpeDJEIGZyb20gJy4uL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTHVEZWNvbXBvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IobWF0cml4KSB7XG4gICAgbWF0cml4ID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KG1hdHJpeCk7XG5cbiAgICBsZXQgbHUgPSBtYXRyaXguY2xvbmUoKTtcbiAgICBsZXQgcm93cyA9IGx1LnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBsdS5jb2x1bW5zO1xuICAgIGxldCBwaXZvdFZlY3RvciA9IG5ldyBGbG9hdDY0QXJyYXkocm93cyk7XG4gICAgbGV0IHBpdm90U2lnbiA9IDE7XG4gICAgbGV0IGksIGosIGssIHAsIHMsIHQsIHY7XG4gICAgbGV0IExVY29saiwga21heDtcblxuICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgIHBpdm90VmVjdG9yW2ldID0gaTtcbiAgICB9XG5cbiAgICBMVWNvbGogPSBuZXcgRmxvYXQ2NEFycmF5KHJvd3MpO1xuXG4gICAgZm9yIChqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICBMVWNvbGpbaV0gPSBsdS5nZXQoaSwgaik7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAga21heCA9IE1hdGgubWluKGksIGopO1xuICAgICAgICBzID0gMDtcbiAgICAgICAgZm9yIChrID0gMDsgayA8IGttYXg7IGsrKykge1xuICAgICAgICAgIHMgKz0gbHUuZ2V0KGksIGspICogTFVjb2xqW2tdO1xuICAgICAgICB9XG4gICAgICAgIExVY29saltpXSAtPSBzO1xuICAgICAgICBsdS5zZXQoaSwgaiwgTFVjb2xqW2ldKTtcbiAgICAgIH1cblxuICAgICAgcCA9IGo7XG4gICAgICBmb3IgKGkgPSBqICsgMTsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICBpZiAoTWF0aC5hYnMoTFVjb2xqW2ldKSA+IE1hdGguYWJzKExVY29saltwXSkpIHtcbiAgICAgICAgICBwID0gaTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAocCAhPT0gaikge1xuICAgICAgICBmb3IgKGsgPSAwOyBrIDwgY29sdW1uczsgaysrKSB7XG4gICAgICAgICAgdCA9IGx1LmdldChwLCBrKTtcbiAgICAgICAgICBsdS5zZXQocCwgaywgbHUuZ2V0KGosIGspKTtcbiAgICAgICAgICBsdS5zZXQoaiwgaywgdCk7XG4gICAgICAgIH1cblxuICAgICAgICB2ID0gcGl2b3RWZWN0b3JbcF07XG4gICAgICAgIHBpdm90VmVjdG9yW3BdID0gcGl2b3RWZWN0b3Jbal07XG4gICAgICAgIHBpdm90VmVjdG9yW2pdID0gdjtcblxuICAgICAgICBwaXZvdFNpZ24gPSAtcGl2b3RTaWduO1xuICAgICAgfVxuXG4gICAgICBpZiAoaiA8IHJvd3MgJiYgbHUuZ2V0KGosIGopICE9PSAwKSB7XG4gICAgICAgIGZvciAoaSA9IGogKyAxOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICAgICAgbHUuc2V0KGksIGosIGx1LmdldChpLCBqKSAvIGx1LmdldChqLCBqKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLkxVID0gbHU7XG4gICAgdGhpcy5waXZvdFZlY3RvciA9IHBpdm90VmVjdG9yO1xuICAgIHRoaXMucGl2b3RTaWduID0gcGl2b3RTaWduO1xuICB9XG5cbiAgaXNTaW5ndWxhcigpIHtcbiAgICBsZXQgZGF0YSA9IHRoaXMuTFU7XG4gICAgbGV0IGNvbCA9IGRhdGEuY29sdW1ucztcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbDsgaisrKSB7XG4gICAgICBpZiAoZGF0YS5nZXQoaiwgaikgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHNvbHZlKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBNYXRyaXguY2hlY2tNYXRyaXgodmFsdWUpO1xuXG4gICAgbGV0IGx1ID0gdGhpcy5MVTtcbiAgICBsZXQgcm93cyA9IGx1LnJvd3M7XG5cbiAgICBpZiAocm93cyAhPT0gdmFsdWUucm93cykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIG1hdHJpeCBkaW1lbnNpb25zJyk7XG4gICAgfVxuICAgIGlmICh0aGlzLmlzU2luZ3VsYXIoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdMVSBtYXRyaXggaXMgc2luZ3VsYXInKTtcbiAgICB9XG5cbiAgICBsZXQgY291bnQgPSB2YWx1ZS5jb2x1bW5zO1xuICAgIGxldCBYID0gdmFsdWUuc3ViTWF0cml4Um93KHRoaXMucGl2b3RWZWN0b3IsIDAsIGNvdW50IC0gMSk7XG4gICAgbGV0IGNvbHVtbnMgPSBsdS5jb2x1bW5zO1xuICAgIGxldCBpLCBqLCBrO1xuXG4gICAgZm9yIChrID0gMDsgayA8IGNvbHVtbnM7IGsrKykge1xuICAgICAgZm9yIChpID0gayArIDE7IGkgPCBjb2x1bW5zOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBYLmdldChpLCBqKSAtIFguZ2V0KGssIGopICogbHUuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSBjb2x1bW5zIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIFguc2V0KGssIGosIFguZ2V0KGssIGopIC8gbHUuZ2V0KGssIGspKTtcbiAgICAgIH1cbiAgICAgIGZvciAoaSA9IDA7IGkgPCBrOyBpKyspIHtcbiAgICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBYLmdldChpLCBqKSAtIFguZ2V0KGssIGopICogbHUuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxuXG4gIGdldCBkZXRlcm1pbmFudCgpIHtcbiAgICBsZXQgZGF0YSA9IHRoaXMuTFU7XG4gICAgaWYgKCFkYXRhLmlzU3F1YXJlKCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0cml4IG11c3QgYmUgc3F1YXJlJyk7XG4gICAgfVxuICAgIGxldCBkZXRlcm1pbmFudCA9IHRoaXMucGl2b3RTaWduO1xuICAgIGxldCBjb2wgPSBkYXRhLmNvbHVtbnM7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2w7IGorKykge1xuICAgICAgZGV0ZXJtaW5hbnQgKj0gZGF0YS5nZXQoaiwgaik7XG4gICAgfVxuICAgIHJldHVybiBkZXRlcm1pbmFudDtcbiAgfVxuXG4gIGdldCBsb3dlclRyaWFuZ3VsYXJNYXRyaXgoKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLkxVO1xuICAgIGxldCByb3dzID0gZGF0YS5yb3dzO1xuICAgIGxldCBjb2x1bW5zID0gZGF0YS5jb2x1bW5zO1xuICAgIGxldCBYID0gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPiBqKSB7XG4gICAgICAgICAgWC5zZXQoaSwgaiwgZGF0YS5nZXQoaSwgaikpO1xuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGopIHtcbiAgICAgICAgICBYLnNldChpLCBqLCAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBYLnNldChpLCBqLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxuXG4gIGdldCB1cHBlclRyaWFuZ3VsYXJNYXRyaXgoKSB7XG4gICAgbGV0IGRhdGEgPSB0aGlzLkxVO1xuICAgIGxldCByb3dzID0gZGF0YS5yb3dzO1xuICAgIGxldCBjb2x1bW5zID0gZGF0YS5jb2x1bW5zO1xuICAgIGxldCBYID0gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKGkgPD0gaikge1xuICAgICAgICAgIFguc2V0KGksIGosIGRhdGEuZ2V0KGksIGopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBYLnNldChpLCBqLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxuXG4gIGdldCBwaXZvdFBlcm11dGF0aW9uVmVjdG9yKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGl2b3RWZWN0b3IpO1xuICB9XG59XG4iLCJpbXBvcnQgTWF0cml4IGZyb20gJy4uL21hdHJpeCc7XG5pbXBvcnQgV3JhcHBlck1hdHJpeDJEIGZyb20gJy4uL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuaW1wb3J0IHsgaHlwb3RlbnVzZSB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFFyRGVjb21wb3NpdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgodmFsdWUpO1xuXG4gICAgbGV0IHFyID0gdmFsdWUuY2xvbmUoKTtcbiAgICBsZXQgbSA9IHZhbHVlLnJvd3M7XG4gICAgbGV0IG4gPSB2YWx1ZS5jb2x1bW5zO1xuICAgIGxldCByZGlhZyA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgbGV0IGksIGosIGssIHM7XG5cbiAgICBmb3IgKGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICBsZXQgbnJtID0gMDtcbiAgICAgIGZvciAoaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgbnJtID0gaHlwb3RlbnVzZShucm0sIHFyLmdldChpLCBrKSk7XG4gICAgICB9XG4gICAgICBpZiAobnJtICE9PSAwKSB7XG4gICAgICAgIGlmIChxci5nZXQoaywgaykgPCAwKSB7XG4gICAgICAgICAgbnJtID0gLW5ybTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgcXIuc2V0KGksIGssIHFyLmdldChpLCBrKSAvIG5ybSk7XG4gICAgICAgIH1cbiAgICAgICAgcXIuc2V0KGssIGssIHFyLmdldChrLCBrKSArIDEpO1xuICAgICAgICBmb3IgKGogPSBrICsgMTsgaiA8IG47IGorKykge1xuICAgICAgICAgIHMgPSAwO1xuICAgICAgICAgIGZvciAoaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gcXIuZ2V0KGksIGspICogcXIuZ2V0KGksIGopO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzID0gLXMgLyBxci5nZXQoaywgayk7XG4gICAgICAgICAgZm9yIChpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgICAgcXIuc2V0KGksIGosIHFyLmdldChpLCBqKSArIHMgKiBxci5nZXQoaSwgaykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmRpYWdba10gPSAtbnJtO1xuICAgIH1cblxuICAgIHRoaXMuUVIgPSBxcjtcbiAgICB0aGlzLlJkaWFnID0gcmRpYWc7XG4gIH1cblxuICBzb2x2ZSh2YWx1ZSkge1xuICAgIHZhbHVlID0gTWF0cml4LmNoZWNrTWF0cml4KHZhbHVlKTtcblxuICAgIGxldCBxciA9IHRoaXMuUVI7XG4gICAgbGV0IG0gPSBxci5yb3dzO1xuXG4gICAgaWYgKHZhbHVlLnJvd3MgIT09IG0pIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignTWF0cml4IHJvdyBkaW1lbnNpb25zIG11c3QgYWdyZWUnKTtcbiAgICB9XG4gICAgaWYgKCF0aGlzLmlzRnVsbFJhbmsoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggaXMgcmFuayBkZWZpY2llbnQnKTtcbiAgICB9XG5cbiAgICBsZXQgY291bnQgPSB2YWx1ZS5jb2x1bW5zO1xuICAgIGxldCBYID0gdmFsdWUuY2xvbmUoKTtcbiAgICBsZXQgbiA9IHFyLmNvbHVtbnM7XG4gICAgbGV0IGksIGosIGssIHM7XG5cbiAgICBmb3IgKGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgY291bnQ7IGorKykge1xuICAgICAgICBzID0gMDtcbiAgICAgICAgZm9yIChpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgIHMgKz0gcXIuZ2V0KGksIGspICogWC5nZXQoaSwgaik7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IC1zIC8gcXIuZ2V0KGssIGspO1xuICAgICAgICBmb3IgKGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgWC5zZXQoaSwgaiwgWC5nZXQoaSwgaikgKyBzICogcXIuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGsgPSBuIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIFguc2V0KGssIGosIFguZ2V0KGssIGopIC8gdGhpcy5SZGlhZ1trXSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgazsgaSsrKSB7XG4gICAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgICAgWC5zZXQoaSwgaiwgWC5nZXQoaSwgaikgLSBYLmdldChrLCBqKSAqIHFyLmdldChpLCBrKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gWC5zdWJNYXRyaXgoMCwgbiAtIDEsIDAsIGNvdW50IC0gMSk7XG4gIH1cblxuICBpc0Z1bGxSYW5rKCkge1xuICAgIGxldCBjb2x1bW5zID0gdGhpcy5RUi5jb2x1bW5zO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY29sdW1uczsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5SZGlhZ1tpXSA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgZ2V0IHVwcGVyVHJpYW5ndWxhck1hdHJpeCgpIHtcbiAgICBsZXQgcXIgPSB0aGlzLlFSO1xuICAgIGxldCBuID0gcXIuY29sdW1ucztcbiAgICBsZXQgWCA9IG5ldyBNYXRyaXgobiwgbik7XG4gICAgbGV0IGksIGo7XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICBpZiAoaSA8IGopIHtcbiAgICAgICAgICBYLnNldChpLCBqLCBxci5nZXQoaSwgaikpO1xuICAgICAgICB9IGVsc2UgaWYgKGkgPT09IGopIHtcbiAgICAgICAgICBYLnNldChpLCBqLCB0aGlzLlJkaWFnW2ldKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBYLnNldChpLCBqLCAwKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxuXG4gIGdldCBvcnRob2dvbmFsTWF0cml4KCkge1xuICAgIGxldCBxciA9IHRoaXMuUVI7XG4gICAgbGV0IHJvd3MgPSBxci5yb3dzO1xuICAgIGxldCBjb2x1bW5zID0gcXIuY29sdW1ucztcbiAgICBsZXQgWCA9IG5ldyBNYXRyaXgocm93cywgY29sdW1ucyk7XG4gICAgbGV0IGksIGosIGssIHM7XG5cbiAgICBmb3IgKGsgPSBjb2x1bW5zIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgWC5zZXQoaSwgaywgMCk7XG4gICAgICB9XG4gICAgICBYLnNldChrLCBrLCAxKTtcbiAgICAgIGZvciAoaiA9IGs7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKHFyLmdldChrLCBrKSAhPT0gMCkge1xuICAgICAgICAgIHMgPSAwO1xuICAgICAgICAgIGZvciAoaSA9IGs7IGkgPCByb3dzOyBpKyspIHtcbiAgICAgICAgICAgIHMgKz0gcXIuZ2V0KGksIGspICogWC5nZXQoaSwgaik7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcyA9IC1zIC8gcXIuZ2V0KGssIGspO1xuXG4gICAgICAgICAgZm9yIChpID0gazsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgICAgICAgWC5zZXQoaSwgaiwgWC5nZXQoaSwgaikgKyBzICogcXIuZ2V0KGksIGspKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFg7XG4gIH1cbn1cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi4vbWF0cml4JztcbmltcG9ydCBXcmFwcGVyTWF0cml4MkQgZnJvbSAnLi4vd3JhcC9XcmFwcGVyTWF0cml4MkQnO1xuXG5pbXBvcnQgeyBoeXBvdGVudXNlIH0gZnJvbSAnLi91dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24ge1xuICBjb25zdHJ1Y3Rvcih2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdmFsdWUgPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgodmFsdWUpO1xuXG4gICAgaWYgKHZhbHVlLmlzRW1wdHkoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggbXVzdCBiZSBub24tZW1wdHknKTtcbiAgICB9XG5cbiAgICBsZXQgbSA9IHZhbHVlLnJvd3M7XG4gICAgbGV0IG4gPSB2YWx1ZS5jb2x1bW5zO1xuXG4gICAgY29uc3Qge1xuICAgICAgY29tcHV0ZUxlZnRTaW5ndWxhclZlY3RvcnMgPSB0cnVlLFxuICAgICAgY29tcHV0ZVJpZ2h0U2luZ3VsYXJWZWN0b3JzID0gdHJ1ZSxcbiAgICAgIGF1dG9UcmFuc3Bvc2UgPSBmYWxzZSxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGxldCB3YW50dSA9IEJvb2xlYW4oY29tcHV0ZUxlZnRTaW5ndWxhclZlY3RvcnMpO1xuICAgIGxldCB3YW50diA9IEJvb2xlYW4oY29tcHV0ZVJpZ2h0U2luZ3VsYXJWZWN0b3JzKTtcblxuICAgIGxldCBzd2FwcGVkID0gZmFsc2U7XG4gICAgbGV0IGE7XG4gICAgaWYgKG0gPCBuKSB7XG4gICAgICBpZiAoIWF1dG9UcmFuc3Bvc2UpIHtcbiAgICAgICAgYSA9IHZhbHVlLmNsb25lKCk7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAnQ29tcHV0aW5nIFNWRCBvbiBhIG1hdHJpeCB3aXRoIG1vcmUgY29sdW1ucyB0aGFuIHJvd3MuIENvbnNpZGVyIGVuYWJsaW5nIGF1dG9UcmFuc3Bvc2UnLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYSA9IHZhbHVlLnRyYW5zcG9zZSgpO1xuICAgICAgICBtID0gYS5yb3dzO1xuICAgICAgICBuID0gYS5jb2x1bW5zO1xuICAgICAgICBzd2FwcGVkID0gdHJ1ZTtcbiAgICAgICAgbGV0IGF1eCA9IHdhbnR1O1xuICAgICAgICB3YW50dSA9IHdhbnR2O1xuICAgICAgICB3YW50diA9IGF1eDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IHZhbHVlLmNsb25lKCk7XG4gICAgfVxuXG4gICAgbGV0IG51ID0gTWF0aC5taW4obSwgbik7XG4gICAgbGV0IG5pID0gTWF0aC5taW4obSArIDEsIG4pO1xuICAgIGxldCBzID0gbmV3IEZsb2F0NjRBcnJheShuaSk7XG4gICAgbGV0IFUgPSBuZXcgTWF0cml4KG0sIG51KTtcbiAgICBsZXQgViA9IG5ldyBNYXRyaXgobiwgbik7XG5cbiAgICBsZXQgZSA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgbGV0IHdvcmsgPSBuZXcgRmxvYXQ2NEFycmF5KG0pO1xuXG4gICAgbGV0IHNpID0gbmV3IEZsb2F0NjRBcnJheShuaSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuaTsgaSsrKSBzaVtpXSA9IGk7XG5cbiAgICBsZXQgbmN0ID0gTWF0aC5taW4obSAtIDEsIG4pO1xuICAgIGxldCBucnQgPSBNYXRoLm1heCgwLCBNYXRoLm1pbihuIC0gMiwgbSkpO1xuICAgIGxldCBtcmMgPSBNYXRoLm1heChuY3QsIG5ydCk7XG5cbiAgICBmb3IgKGxldCBrID0gMDsgayA8IG1yYzsgaysrKSB7XG4gICAgICBpZiAoayA8IG5jdCkge1xuICAgICAgICBzW2tdID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICBzW2tdID0gaHlwb3RlbnVzZShzW2tdLCBhLmdldChpLCBrKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHNba10gIT09IDApIHtcbiAgICAgICAgICBpZiAoYS5nZXQoaywgaykgPCAwKSB7XG4gICAgICAgICAgICBzW2tdID0gLXNba107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICBhLnNldChpLCBrLCBhLmdldChpLCBrKSAvIHNba10pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhLnNldChrLCBrLCBhLmdldChrLCBrKSArIDEpO1xuICAgICAgICB9XG4gICAgICAgIHNba10gPSAtc1trXTtcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaiA9IGsgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIGlmIChrIDwgbmN0ICYmIHNba10gIT09IDApIHtcbiAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIHQgKz0gYS5nZXQoaSwgaykgKiBhLmdldChpLCBqKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdCA9IC10IC8gYS5nZXQoaywgayk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIGEuc2V0KGksIGosIGEuZ2V0KGksIGopICsgdCAqIGEuZ2V0KGksIGspKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZVtqXSA9IGEuZ2V0KGssIGopO1xuICAgICAgfVxuXG4gICAgICBpZiAod2FudHUgJiYgayA8IG5jdCkge1xuICAgICAgICBmb3IgKGxldCBpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgIFUuc2V0KGksIGssIGEuZ2V0KGksIGspKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoayA8IG5ydCkge1xuICAgICAgICBlW2tdID0gMDtcbiAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgZVtrXSA9IGh5cG90ZW51c2UoZVtrXSwgZVtpXSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVba10gIT09IDApIHtcbiAgICAgICAgICBpZiAoZVtrICsgMV0gPCAwKSB7XG4gICAgICAgICAgICBlW2tdID0gMCAtIGVba107XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGkgPSBrICsgMTsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgZVtpXSAvPSBlW2tdO1xuICAgICAgICAgIH1cbiAgICAgICAgICBlW2sgKyAxXSArPSAxO1xuICAgICAgICB9XG4gICAgICAgIGVba10gPSAtZVtrXTtcbiAgICAgICAgaWYgKGsgKyAxIDwgbSAmJiBlW2tdICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICB3b3JrW2ldID0gMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gayArIDE7IGogPCBuOyBqKyspIHtcbiAgICAgICAgICAgICAgd29ya1tpXSArPSBlW2pdICogYS5nZXQoaSwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGZvciAobGV0IGogPSBrICsgMTsgaiA8IG47IGorKykge1xuICAgICAgICAgICAgbGV0IHQgPSAtZVtqXSAvIGVbayArIDFdO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICAgIGEuc2V0KGksIGosIGEuZ2V0KGksIGopICsgdCAqIHdvcmtbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2FudHYpIHtcbiAgICAgICAgICBmb3IgKGxldCBpID0gayArIDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgIFYuc2V0KGksIGssIGVbaV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBwID0gTWF0aC5taW4obiwgbSArIDEpO1xuICAgIGlmIChuY3QgPCBuKSB7XG4gICAgICBzW25jdF0gPSBhLmdldChuY3QsIG5jdCk7XG4gICAgfVxuICAgIGlmIChtIDwgcCkge1xuICAgICAgc1twIC0gMV0gPSAwO1xuICAgIH1cbiAgICBpZiAobnJ0ICsgMSA8IHApIHtcbiAgICAgIGVbbnJ0XSA9IGEuZ2V0KG5ydCwgcCAtIDEpO1xuICAgIH1cbiAgICBlW3AgLSAxXSA9IDA7XG5cbiAgICBpZiAod2FudHUpIHtcbiAgICAgIGZvciAobGV0IGogPSBuY3Q7IGogPCBudTsgaisrKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgVS5zZXQoaSwgaiwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgVS5zZXQoaiwgaiwgMSk7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBrID0gbmN0IC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgICAgaWYgKHNba10gIT09IDApIHtcbiAgICAgICAgICBmb3IgKGxldCBqID0gayArIDE7IGogPCBudTsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gazsgaSA8IG07IGkrKykge1xuICAgICAgICAgICAgICB0ICs9IFUuZ2V0KGksIGspICogVS5nZXQoaSwgaik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gLXQgLyBVLmdldChrLCBrKTtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBrOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgICAgICAgIFUuc2V0KGksIGosIFUuZ2V0KGksIGopICsgdCAqIFUuZ2V0KGksIGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZm9yIChsZXQgaSA9IGs7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIFUuc2V0KGksIGssIC1VLmdldChpLCBrKSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFUuc2V0KGssIGssIDEgKyBVLmdldChrLCBrKSk7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICBVLnNldChpLCBrLCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgIFUuc2V0KGksIGssIDApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBVLnNldChrLCBrLCAxKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh3YW50dikge1xuICAgICAgZm9yIChsZXQgayA9IG4gLSAxOyBrID49IDA7IGstLSkge1xuICAgICAgICBpZiAoayA8IG5ydCAmJiBlW2tdICE9PSAwKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGsgKyAxOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gayArIDE7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgdCArPSBWLmdldChpLCBrKSAqIFYuZ2V0KGksIGopO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdCA9IC10IC8gVi5nZXQoayArIDEsIGspO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGsgKyAxOyBpIDwgbjsgaSsrKSB7XG4gICAgICAgICAgICAgIFYuc2V0KGksIGosIFYuZ2V0KGksIGopICsgdCAqIFYuZ2V0KGksIGspKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICBWLnNldChpLCBrLCAwKTtcbiAgICAgICAgfVxuICAgICAgICBWLnNldChrLCBrLCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsZXQgcHAgPSBwIC0gMTtcbiAgICBsZXQgaXRlciA9IDA7XG4gICAgbGV0IGVwcyA9IE51bWJlci5FUFNJTE9OO1xuICAgIHdoaWxlIChwID4gMCkge1xuICAgICAgbGV0IGssIGthc2U7XG4gICAgICBmb3IgKGsgPSBwIC0gMjsgayA+PSAtMTsgay0tKSB7XG4gICAgICAgIGlmIChrID09PSAtMSkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGFscGhhID1cbiAgICAgICAgICBOdW1iZXIuTUlOX1ZBTFVFICsgZXBzICogTWF0aC5hYnMoc1trXSArIE1hdGguYWJzKHNbayArIDFdKSk7XG4gICAgICAgIGlmIChNYXRoLmFicyhlW2tdKSA8PSBhbHBoYSB8fCBOdW1iZXIuaXNOYU4oZVtrXSkpIHtcbiAgICAgICAgICBlW2tdID0gMDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGsgPT09IHAgLSAyKSB7XG4gICAgICAgIGthc2UgPSA0O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGV0IGtzO1xuICAgICAgICBmb3IgKGtzID0gcCAtIDE7IGtzID49IGs7IGtzLS0pIHtcbiAgICAgICAgICBpZiAoa3MgPT09IGspIHtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBsZXQgdCA9XG4gICAgICAgICAgICAoa3MgIT09IHAgPyBNYXRoLmFicyhlW2tzXSkgOiAwKSArXG4gICAgICAgICAgICAoa3MgIT09IGsgKyAxID8gTWF0aC5hYnMoZVtrcyAtIDFdKSA6IDApO1xuICAgICAgICAgIGlmIChNYXRoLmFicyhzW2tzXSkgPD0gZXBzICogdCkge1xuICAgICAgICAgICAgc1trc10gPSAwO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChrcyA9PT0gaykge1xuICAgICAgICAgIGthc2UgPSAzO1xuICAgICAgICB9IGVsc2UgaWYgKGtzID09PSBwIC0gMSkge1xuICAgICAgICAgIGthc2UgPSAxO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGthc2UgPSAyO1xuICAgICAgICAgIGsgPSBrcztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBrKys7XG5cbiAgICAgIHN3aXRjaCAoa2FzZSkge1xuICAgICAgICBjYXNlIDE6IHtcbiAgICAgICAgICBsZXQgZiA9IGVbcCAtIDJdO1xuICAgICAgICAgIGVbcCAtIDJdID0gMDtcbiAgICAgICAgICBmb3IgKGxldCBqID0gcCAtIDI7IGogPj0gazsgai0tKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2Uoc1tqXSwgZik7XG4gICAgICAgICAgICBsZXQgY3MgPSBzW2pdIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGYgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBpZiAoaiAhPT0gaykge1xuICAgICAgICAgICAgICBmID0gLXNuICogZVtqIC0gMV07XG4gICAgICAgICAgICAgIGVbaiAtIDFdID0gY3MgKiBlW2ogLSAxXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHQgPSBjcyAqIFYuZ2V0KGksIGopICsgc24gKiBWLmdldChpLCBwIC0gMSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgcCAtIDEsIC1zbiAqIFYuZ2V0KGksIGopICsgY3MgKiBWLmdldChpLCBwIC0gMSkpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGosIHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgMjoge1xuICAgICAgICAgIGxldCBmID0gZVtrIC0gMV07XG4gICAgICAgICAgZVtrIC0gMV0gPSAwO1xuICAgICAgICAgIGZvciAobGV0IGogPSBrOyBqIDwgcDsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2Uoc1tqXSwgZik7XG4gICAgICAgICAgICBsZXQgY3MgPSBzW2pdIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGYgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBmID0gLXNuICogZVtqXTtcbiAgICAgICAgICAgIGVbal0gPSBjcyAqIGVbal07XG4gICAgICAgICAgICBpZiAod2FudHUpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gY3MgKiBVLmdldChpLCBqKSArIHNuICogVS5nZXQoaSwgayAtIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGsgLSAxLCAtc24gKiBVLmdldChpLCBqKSArIGNzICogVS5nZXQoaSwgayAtIDEpKTtcbiAgICAgICAgICAgICAgICBVLnNldChpLCBqLCB0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjYXNlIDM6IHtcbiAgICAgICAgICBjb25zdCBzY2FsZSA9IE1hdGgubWF4KFxuICAgICAgICAgICAgTWF0aC5hYnMoc1twIC0gMV0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoc1twIC0gMl0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoZVtwIC0gMl0pLFxuICAgICAgICAgICAgTWF0aC5hYnMoc1trXSksXG4gICAgICAgICAgICBNYXRoLmFicyhlW2tdKSxcbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHNwID0gc1twIC0gMV0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBzcG0xID0gc1twIC0gMl0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBlcG0xID0gZVtwIC0gMl0gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBzayA9IHNba10gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBlayA9IGVba10gLyBzY2FsZTtcbiAgICAgICAgICBjb25zdCBiID0gKChzcG0xICsgc3ApICogKHNwbTEgLSBzcCkgKyBlcG0xICogZXBtMSkgLyAyO1xuICAgICAgICAgIGNvbnN0IGMgPSBzcCAqIGVwbTEgKiAoc3AgKiBlcG0xKTtcbiAgICAgICAgICBsZXQgc2hpZnQgPSAwO1xuICAgICAgICAgIGlmIChiICE9PSAwIHx8IGMgIT09IDApIHtcbiAgICAgICAgICAgIGlmIChiIDwgMCkge1xuICAgICAgICAgICAgICBzaGlmdCA9IDAgLSBNYXRoLnNxcnQoYiAqIGIgKyBjKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHNoaWZ0ID0gTWF0aC5zcXJ0KGIgKiBiICsgYyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzaGlmdCA9IGMgLyAoYiArIHNoaWZ0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGV0IGYgPSAoc2sgKyBzcCkgKiAoc2sgLSBzcCkgKyBzaGlmdDtcbiAgICAgICAgICBsZXQgZyA9IHNrICogZWs7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IGs7IGogPCBwIC0gMTsgaisrKSB7XG4gICAgICAgICAgICBsZXQgdCA9IGh5cG90ZW51c2UoZiwgZyk7XG4gICAgICAgICAgICBpZiAodCA9PT0gMCkgdCA9IE51bWJlci5NSU5fVkFMVUU7XG4gICAgICAgICAgICBsZXQgY3MgPSBmIC8gdDtcbiAgICAgICAgICAgIGxldCBzbiA9IGcgLyB0O1xuICAgICAgICAgICAgaWYgKGogIT09IGspIHtcbiAgICAgICAgICAgICAgZVtqIC0gMV0gPSB0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZiA9IGNzICogc1tqXSArIHNuICogZVtqXTtcbiAgICAgICAgICAgIGVbal0gPSBjcyAqIGVbal0gLSBzbiAqIHNbal07XG4gICAgICAgICAgICBnID0gc24gKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIHNbaiArIDFdID0gY3MgKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgICAgICAgIHQgPSBjcyAqIFYuZ2V0KGksIGopICsgc24gKiBWLmdldChpLCBqICsgMSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaiArIDEsIC1zbiAqIFYuZ2V0KGksIGopICsgY3MgKiBWLmdldChpLCBqICsgMSkpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGosIHQpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0ID0gaHlwb3RlbnVzZShmLCBnKTtcbiAgICAgICAgICAgIGlmICh0ID09PSAwKSB0ID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgICAgICAgICAgIGNzID0gZiAvIHQ7XG4gICAgICAgICAgICBzbiA9IGcgLyB0O1xuICAgICAgICAgICAgc1tqXSA9IHQ7XG4gICAgICAgICAgICBmID0gY3MgKiBlW2pdICsgc24gKiBzW2ogKyAxXTtcbiAgICAgICAgICAgIHNbaiArIDFdID0gLXNuICogZVtqXSArIGNzICogc1tqICsgMV07XG4gICAgICAgICAgICBnID0gc24gKiBlW2ogKyAxXTtcbiAgICAgICAgICAgIGVbaiArIDFdID0gY3MgKiBlW2ogKyAxXTtcbiAgICAgICAgICAgIGlmICh3YW50dSAmJiBqIDwgbSAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gY3MgKiBVLmdldChpLCBqKSArIHNuICogVS5nZXQoaSwgaiArIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGogKyAxLCAtc24gKiBVLmdldChpLCBqKSArIGNzICogVS5nZXQoaSwgaiArIDEpKTtcbiAgICAgICAgICAgICAgICBVLnNldChpLCBqLCB0KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlW3AgLSAyXSA9IGY7XG4gICAgICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgNDoge1xuICAgICAgICAgIGlmIChzW2tdIDw9IDApIHtcbiAgICAgICAgICAgIHNba10gPSBzW2tdIDwgMCA/IC1zW2tdIDogMDtcbiAgICAgICAgICAgIGlmICh3YW50dikge1xuICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8PSBwcDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaywgLVYuZ2V0KGksIGspKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB3aGlsZSAoayA8IHBwKSB7XG4gICAgICAgICAgICBpZiAoc1trXSA+PSBzW2sgKyAxXSkge1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGxldCB0ID0gc1trXTtcbiAgICAgICAgICAgIHNba10gPSBzW2sgKyAxXTtcbiAgICAgICAgICAgIHNbayArIDFdID0gdDtcbiAgICAgICAgICAgIGlmICh3YW50diAmJiBrIDwgbiAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gVi5nZXQoaSwgayArIDEpO1xuICAgICAgICAgICAgICAgIFYuc2V0KGksIGsgKyAxLCBWLmdldChpLCBrKSk7XG4gICAgICAgICAgICAgICAgVi5zZXQoaSwgaywgdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh3YW50dSAmJiBrIDwgbSAtIDEpIHtcbiAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0ID0gVS5nZXQoaSwgayArIDEpO1xuICAgICAgICAgICAgICAgIFUuc2V0KGksIGsgKyAxLCBVLmdldChpLCBrKSk7XG4gICAgICAgICAgICAgICAgVS5zZXQoaSwgaywgdCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGsrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaXRlciA9IDA7XG4gICAgICAgICAgcC0tO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc3dhcHBlZCkge1xuICAgICAgbGV0IHRtcCA9IFY7XG4gICAgICBWID0gVTtcbiAgICAgIFUgPSB0bXA7XG4gICAgfVxuXG4gICAgdGhpcy5tID0gbTtcbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMucyA9IHM7XG4gICAgdGhpcy5VID0gVTtcbiAgICB0aGlzLlYgPSBWO1xuICB9XG5cbiAgc29sdmUodmFsdWUpIHtcbiAgICBsZXQgWSA9IHZhbHVlO1xuICAgIGxldCBlID0gdGhpcy50aHJlc2hvbGQ7XG4gICAgbGV0IHNjb2xzID0gdGhpcy5zLmxlbmd0aDtcbiAgICBsZXQgTHMgPSBNYXRyaXguemVyb3Moc2NvbHMsIHNjb2xzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc2NvbHM7IGkrKykge1xuICAgICAgaWYgKE1hdGguYWJzKHRoaXMuc1tpXSkgPD0gZSkge1xuICAgICAgICBMcy5zZXQoaSwgaSwgMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBMcy5zZXQoaSwgaSwgMSAvIHRoaXMuc1tpXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IFUgPSB0aGlzLlU7XG4gICAgbGV0IFYgPSB0aGlzLnJpZ2h0U2luZ3VsYXJWZWN0b3JzO1xuXG4gICAgbGV0IFZMID0gVi5tbXVsKExzKTtcbiAgICBsZXQgdnJvd3MgPSBWLnJvd3M7XG4gICAgbGV0IHVyb3dzID0gVS5yb3dzO1xuICAgIGxldCBWTFUgPSBNYXRyaXguemVyb3ModnJvd3MsIHVyb3dzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB1cm93czsgaisrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHNjb2xzOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gVkwuZ2V0KGksIGspICogVS5nZXQoaiwgayk7XG4gICAgICAgIH1cbiAgICAgICAgVkxVLnNldChpLCBqLCBzdW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBWTFUubW11bChZKTtcbiAgfVxuXG4gIHNvbHZlRm9yRGlhZ29uYWwodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5zb2x2ZShNYXRyaXguZGlhZyh2YWx1ZSkpO1xuICB9XG5cbiAgaW52ZXJzZSgpIHtcbiAgICBsZXQgViA9IHRoaXMuVjtcbiAgICBsZXQgZSA9IHRoaXMudGhyZXNob2xkO1xuICAgIGxldCB2cm93cyA9IFYucm93cztcbiAgICBsZXQgdmNvbHMgPSBWLmNvbHVtbnM7XG4gICAgbGV0IFggPSBuZXcgTWF0cml4KHZyb3dzLCB0aGlzLnMubGVuZ3RoKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2Y29sczsgaisrKSB7XG4gICAgICAgIGlmIChNYXRoLmFicyh0aGlzLnNbal0pID4gZSkge1xuICAgICAgICAgIFguc2V0KGksIGosIFYuZ2V0KGksIGopIC8gdGhpcy5zW2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCBVID0gdGhpcy5VO1xuXG4gICAgbGV0IHVyb3dzID0gVS5yb3dzO1xuICAgIGxldCB1Y29scyA9IFUuY29sdW1ucztcbiAgICBsZXQgWSA9IG5ldyBNYXRyaXgodnJvd3MsIHVyb3dzKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB1cm93czsgaisrKSB7XG4gICAgICAgIGxldCBzdW0gPSAwO1xuICAgICAgICBmb3IgKGxldCBrID0gMDsgayA8IHVjb2xzOyBrKyspIHtcbiAgICAgICAgICBzdW0gKz0gWC5nZXQoaSwgaykgKiBVLmdldChqLCBrKTtcbiAgICAgICAgfVxuICAgICAgICBZLnNldChpLCBqLCBzdW0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBZO1xuICB9XG5cbiAgZ2V0IGNvbmRpdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcy5zWzBdIC8gdGhpcy5zW01hdGgubWluKHRoaXMubSwgdGhpcy5uKSAtIDFdO1xuICB9XG5cbiAgZ2V0IG5vcm0yKCkge1xuICAgIHJldHVybiB0aGlzLnNbMF07XG4gIH1cblxuICBnZXQgcmFuaygpIHtcbiAgICBsZXQgdG9sID0gTWF0aC5tYXgodGhpcy5tLCB0aGlzLm4pICogdGhpcy5zWzBdICogTnVtYmVyLkVQU0lMT047XG4gICAgbGV0IHIgPSAwO1xuICAgIGxldCBzID0gdGhpcy5zO1xuICAgIGZvciAobGV0IGkgPSAwLCBpaSA9IHMubGVuZ3RoOyBpIDwgaWk7IGkrKykge1xuICAgICAgaWYgKHNbaV0gPiB0b2wpIHtcbiAgICAgICAgcisrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcjtcbiAgfVxuXG4gIGdldCBkaWFnb25hbCgpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLnMpO1xuICB9XG5cbiAgZ2V0IHRocmVzaG9sZCgpIHtcbiAgICByZXR1cm4gKE51bWJlci5FUFNJTE9OIC8gMikgKiBNYXRoLm1heCh0aGlzLm0sIHRoaXMubikgKiB0aGlzLnNbMF07XG4gIH1cblxuICBnZXQgbGVmdFNpbmd1bGFyVmVjdG9ycygpIHtcbiAgICByZXR1cm4gdGhpcy5VO1xuICB9XG5cbiAgZ2V0IHJpZ2h0U2luZ3VsYXJWZWN0b3JzKCkge1xuICAgIHJldHVybiB0aGlzLlY7XG4gIH1cblxuICBnZXQgZGlhZ29uYWxNYXRyaXgoKSB7XG4gICAgcmV0dXJuIE1hdHJpeC5kaWFnKHRoaXMucyk7XG4gIH1cbn1cbiIsImV4cG9ydCBmdW5jdGlvbiBoeXBvdGVudXNlKGEsIGIpIHtcbiAgbGV0IHIgPSAwO1xuICBpZiAoTWF0aC5hYnMoYSkgPiBNYXRoLmFicyhiKSkge1xuICAgIHIgPSBiIC8gYTtcbiAgICByZXR1cm4gTWF0aC5hYnMoYSkgKiBNYXRoLnNxcnQoMSArIHIgKiByKTtcbiAgfVxuICBpZiAoYiAhPT0gMCkge1xuICAgIHIgPSBhIC8gYjtcbiAgICByZXR1cm4gTWF0aC5hYnMoYikgKiBNYXRoLnNxcnQoMSArIHIgKiByKTtcbiAgfVxuICByZXR1cm4gMDtcbn1cbiIsImltcG9ydCBMdURlY29tcG9zaXRpb24gZnJvbSAnLi9kYy9sdSc7XG5pbXBvcnQgUXJEZWNvbXBvc2l0aW9uIGZyb20gJy4vZGMvcXInO1xuaW1wb3J0IFNpbmd1bGFyVmFsdWVEZWNvbXBvc2l0aW9uIGZyb20gJy4vZGMvc3ZkJztcbmltcG9ydCBNYXRyaXggZnJvbSAnLi9tYXRyaXgnO1xuaW1wb3J0IFdyYXBwZXJNYXRyaXgyRCBmcm9tICcuL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuZXhwb3J0IGZ1bmN0aW9uIGludmVyc2UobWF0cml4LCB1c2VTVkQgPSBmYWxzZSkge1xuICBtYXRyaXggPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgaWYgKHVzZVNWRCkge1xuICAgIHJldHVybiBuZXcgU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24obWF0cml4KS5pbnZlcnNlKCk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHNvbHZlKG1hdHJpeCwgTWF0cml4LmV5ZShtYXRyaXgucm93cykpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzb2x2ZShsZWZ0SGFuZFNpZGUsIHJpZ2h0SGFuZFNpZGUsIHVzZVNWRCA9IGZhbHNlKSB7XG4gIGxlZnRIYW5kU2lkZSA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeChsZWZ0SGFuZFNpZGUpO1xuICByaWdodEhhbmRTaWRlID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KHJpZ2h0SGFuZFNpZGUpO1xuICBpZiAodXNlU1ZEKSB7XG4gICAgcmV0dXJuIG5ldyBTaW5ndWxhclZhbHVlRGVjb21wb3NpdGlvbihsZWZ0SGFuZFNpZGUpLnNvbHZlKHJpZ2h0SGFuZFNpZGUpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBsZWZ0SGFuZFNpZGUuaXNTcXVhcmUoKVxuICAgICAgPyBuZXcgTHVEZWNvbXBvc2l0aW9uKGxlZnRIYW5kU2lkZSkuc29sdmUocmlnaHRIYW5kU2lkZSlcbiAgICAgIDogbmV3IFFyRGVjb21wb3NpdGlvbihsZWZ0SGFuZFNpZGUpLnNvbHZlKHJpZ2h0SGFuZFNpZGUpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVja0NvbHVtbkluZGV4IH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBCYXNlVmlldyBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXhDb2x1bW5WaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgsIGNvbHVtbikge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgobWF0cml4LCBjb2x1bW4pO1xuICAgIHN1cGVyKG1hdHJpeCwgbWF0cml4LnJvd3MsIDEpO1xuICAgIHRoaXMuY29sdW1uID0gY29sdW1uO1xuICB9XG5cbiAgc2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCwgdmFsdWUpIHtcbiAgICB0aGlzLm1hdHJpeC5zZXQocm93SW5kZXgsIHRoaXMuY29sdW1uLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaXguZ2V0KHJvd0luZGV4LCB0aGlzLmNvbHVtbik7XG4gIH1cbn1cbiIsImltcG9ydCB7IGNoZWNrQ29sdW1uSW5kaWNlcyB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4Q29sdW1uU2VsZWN0aW9uVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgY29uc3RydWN0b3IobWF0cml4LCBjb2x1bW5JbmRpY2VzKSB7XG4gICAgY29sdW1uSW5kaWNlcyA9IGNoZWNrQ29sdW1uSW5kaWNlcyhtYXRyaXgsIGNvbHVtbkluZGljZXMpO1xuICAgIHN1cGVyKG1hdHJpeCwgbWF0cml4LnJvd3MsIGNvbHVtbkluZGljZXMubGVuZ3RoKTtcbiAgICB0aGlzLmNvbHVtbkluZGljZXMgPSBjb2x1bW5JbmRpY2VzO1xuICB9XG5cbiAgc2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCwgdmFsdWUpIHtcbiAgICB0aGlzLm1hdHJpeC5zZXQocm93SW5kZXgsIHRoaXMuY29sdW1uSW5kaWNlc1tjb2x1bW5JbmRleF0sIHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChyb3dJbmRleCwgY29sdW1uSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaXguZ2V0KHJvd0luZGV4LCB0aGlzLmNvbHVtbkluZGljZXNbY29sdW1uSW5kZXhdKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeEZsaXBDb2x1bW5WaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgpIHtcbiAgICBzdXBlcihtYXRyaXgsIG1hdHJpeC5yb3dzLCBtYXRyaXguY29sdW1ucyk7XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldChyb3dJbmRleCwgdGhpcy5jb2x1bW5zIC0gY29sdW1uSW5kZXggLSAxLCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubWF0cml4LmdldChyb3dJbmRleCwgdGhpcy5jb2x1bW5zIC0gY29sdW1uSW5kZXggLSAxKTtcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeEZsaXBSb3dWaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgpIHtcbiAgICBzdXBlcihtYXRyaXgsIG1hdHJpeC5yb3dzLCBtYXRyaXguY29sdW1ucyk7XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldCh0aGlzLnJvd3MgLSByb3dJbmRleCAtIDEsIGNvbHVtbkluZGV4LCB2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubWF0cml4LmdldCh0aGlzLnJvd3MgLSByb3dJbmRleCAtIDEsIGNvbHVtbkluZGV4KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2tSb3dJbmRleCB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4Um93VmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgY29uc3RydWN0b3IobWF0cml4LCByb3cpIHtcbiAgICBjaGVja1Jvd0luZGV4KG1hdHJpeCwgcm93KTtcbiAgICBzdXBlcihtYXRyaXgsIDEsIG1hdHJpeC5jb2x1bW5zKTtcbiAgICB0aGlzLnJvdyA9IHJvdztcbiAgfVxuXG4gIHNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXRyaXguc2V0KHRoaXMucm93LCBjb2x1bW5JbmRleCwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgIHJldHVybiB0aGlzLm1hdHJpeC5nZXQodGhpcy5yb3csIGNvbHVtbkluZGV4KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2tSb3dJbmRpY2VzIH0gZnJvbSAnLi4vdXRpbCc7XG5cbmltcG9ydCBCYXNlVmlldyBmcm9tICcuL2Jhc2UnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYXRyaXhSb3dTZWxlY3Rpb25WaWV3IGV4dGVuZHMgQmFzZVZpZXcge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgsIHJvd0luZGljZXMpIHtcbiAgICByb3dJbmRpY2VzID0gY2hlY2tSb3dJbmRpY2VzKG1hdHJpeCwgcm93SW5kaWNlcyk7XG4gICAgc3VwZXIobWF0cml4LCByb3dJbmRpY2VzLmxlbmd0aCwgbWF0cml4LmNvbHVtbnMpO1xuICAgIHRoaXMucm93SW5kaWNlcyA9IHJvd0luZGljZXM7XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldCh0aGlzLnJvd0luZGljZXNbcm93SW5kZXhdLCBjb2x1bW5JbmRleCwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgIHJldHVybiB0aGlzLm1hdHJpeC5nZXQodGhpcy5yb3dJbmRpY2VzW3Jvd0luZGV4XSwgY29sdW1uSW5kZXgpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBjaGVja0luZGljZXMgfSBmcm9tICcuLi91dGlsJztcblxuaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeFNlbGVjdGlvblZpZXcgZXh0ZW5kcyBCYXNlVmlldyB7XG4gIGNvbnN0cnVjdG9yKG1hdHJpeCwgcm93SW5kaWNlcywgY29sdW1uSW5kaWNlcykge1xuICAgIGxldCBpbmRpY2VzID0gY2hlY2tJbmRpY2VzKG1hdHJpeCwgcm93SW5kaWNlcywgY29sdW1uSW5kaWNlcyk7XG4gICAgc3VwZXIobWF0cml4LCBpbmRpY2VzLnJvdy5sZW5ndGgsIGluZGljZXMuY29sdW1uLmxlbmd0aCk7XG4gICAgdGhpcy5yb3dJbmRpY2VzID0gaW5kaWNlcy5yb3c7XG4gICAgdGhpcy5jb2x1bW5JbmRpY2VzID0gaW5kaWNlcy5jb2x1bW47XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldChcbiAgICAgIHRoaXMucm93SW5kaWNlc1tyb3dJbmRleF0sXG4gICAgICB0aGlzLmNvbHVtbkluZGljZXNbY29sdW1uSW5kZXhdLFxuICAgICAgdmFsdWUsXG4gICAgKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChyb3dJbmRleCwgY29sdW1uSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaXguZ2V0KFxuICAgICAgdGhpcy5yb3dJbmRpY2VzW3Jvd0luZGV4XSxcbiAgICAgIHRoaXMuY29sdW1uSW5kaWNlc1tjb2x1bW5JbmRleF0sXG4gICAgKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgY2hlY2tSYW5nZSB9IGZyb20gJy4uL3V0aWwnO1xuXG5pbXBvcnQgQmFzZVZpZXcgZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4U3ViVmlldyBleHRlbmRzIEJhc2VWaWV3IHtcbiAgY29uc3RydWN0b3IobWF0cml4LCBzdGFydFJvdywgZW5kUm93LCBzdGFydENvbHVtbiwgZW5kQ29sdW1uKSB7XG4gICAgY2hlY2tSYW5nZShtYXRyaXgsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pO1xuICAgIHN1cGVyKG1hdHJpeCwgZW5kUm93IC0gc3RhcnRSb3cgKyAxLCBlbmRDb2x1bW4gLSBzdGFydENvbHVtbiArIDEpO1xuICAgIHRoaXMuc3RhcnRSb3cgPSBzdGFydFJvdztcbiAgICB0aGlzLnN0YXJ0Q29sdW1uID0gc3RhcnRDb2x1bW47XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMubWF0cml4LnNldChcbiAgICAgIHRoaXMuc3RhcnRSb3cgKyByb3dJbmRleCxcbiAgICAgIHRoaXMuc3RhcnRDb2x1bW4gKyBjb2x1bW5JbmRleCxcbiAgICAgIHZhbHVlLFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMubWF0cml4LmdldChcbiAgICAgIHRoaXMuc3RhcnRSb3cgKyByb3dJbmRleCxcbiAgICAgIHRoaXMuc3RhcnRDb2x1bW4gKyBjb2x1bW5JbmRleCxcbiAgICApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBYnN0cmFjdE1hdHJpeCB9IGZyb20gJy4uL21hdHJpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFdyYXBwZXJNYXRyaXgxRCBleHRlbmRzIEFic3RyYWN0TWF0cml4IHtcbiAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3QgeyByb3dzID0gMSB9ID0gb3B0aW9ucztcblxuICAgIGlmIChkYXRhLmxlbmd0aCAlIHJvd3MgIT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcigndGhlIGRhdGEgbGVuZ3RoIGlzIG5vdCBkaXZpc2libGUgYnkgdGhlIG51bWJlciBvZiByb3dzJyk7XG4gICAgfVxuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5yb3dzID0gcm93cztcbiAgICB0aGlzLmNvbHVtbnMgPSBkYXRhLmxlbmd0aCAvIHJvd3M7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgfVxuXG4gIHNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHZhbHVlKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5fY2FsY3VsYXRlSW5kZXgocm93SW5kZXgsIGNvbHVtbkluZGV4KTtcbiAgICB0aGlzLmRhdGFbaW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5fY2FsY3VsYXRlSW5kZXgocm93SW5kZXgsIGNvbHVtbkluZGV4KTtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2luZGV4XTtcbiAgfVxuXG4gIF9jYWxjdWxhdGVJbmRleChyb3csIGNvbHVtbikge1xuICAgIHJldHVybiByb3cgKiB0aGlzLmNvbHVtbnMgKyBjb2x1bW47XG4gIH1cbn1cbiIsImltcG9ydCBXcmFwcGVyTWF0cml4MUQgZnJvbSAnLi9XcmFwcGVyTWF0cml4MUQnO1xuaW1wb3J0IFdyYXBwZXJNYXRyaXgyRCBmcm9tICcuL1dyYXBwZXJNYXRyaXgyRCc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cmFwKGFycmF5LCBvcHRpb25zKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycmF5KSkge1xuICAgIGlmIChhcnJheVswXSAmJiBBcnJheS5pc0FycmF5KGFycmF5WzBdKSkge1xuICAgICAgcmV0dXJuIG5ldyBXcmFwcGVyTWF0cml4MkQoYXJyYXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IFdyYXBwZXJNYXRyaXgxRChhcnJheSwgb3B0aW9ucyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcigndGhlIGFyZ3VtZW50IGlzIG5vdCBhbiBhcnJheScpO1xuICB9XG59XG4iLCJpbXBvcnQgTHVEZWNvbXBvc2l0aW9uIGZyb20gJy4vZGMvbHUnO1xuaW1wb3J0IE1hdHJpeCBmcm9tICcuL21hdHJpeCc7XG5pbXBvcnQgTWF0cml4U2VsZWN0aW9uVmlldyBmcm9tICcuL3ZpZXdzL3NlbGVjdGlvbic7XG5cbmV4cG9ydCBmdW5jdGlvbiBkZXRlcm1pbmFudChtYXRyaXgpIHtcbiAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gIGlmIChtYXRyaXguaXNTcXVhcmUoKSkge1xuICAgIGlmIChtYXRyaXguY29sdW1ucyA9PT0gMCkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuXG4gICAgbGV0IGEsIGIsIGMsIGQ7XG4gICAgaWYgKG1hdHJpeC5jb2x1bW5zID09PSAyKSB7XG4gICAgICAvLyAyIHggMiBtYXRyaXhcbiAgICAgIGEgPSBtYXRyaXguZ2V0KDAsIDApO1xuICAgICAgYiA9IG1hdHJpeC5nZXQoMCwgMSk7XG4gICAgICBjID0gbWF0cml4LmdldCgxLCAwKTtcbiAgICAgIGQgPSBtYXRyaXguZ2V0KDEsIDEpO1xuXG4gICAgICByZXR1cm4gYSAqIGQgLSBiICogYztcbiAgICB9IGVsc2UgaWYgKG1hdHJpeC5jb2x1bW5zID09PSAzKSB7XG4gICAgICAvLyAzIHggMyBtYXRyaXhcbiAgICAgIGxldCBzdWJNYXRyaXgwLCBzdWJNYXRyaXgxLCBzdWJNYXRyaXgyO1xuICAgICAgc3ViTWF0cml4MCA9IG5ldyBNYXRyaXhTZWxlY3Rpb25WaWV3KG1hdHJpeCwgWzEsIDJdLCBbMSwgMl0pO1xuICAgICAgc3ViTWF0cml4MSA9IG5ldyBNYXRyaXhTZWxlY3Rpb25WaWV3KG1hdHJpeCwgWzEsIDJdLCBbMCwgMl0pO1xuICAgICAgc3ViTWF0cml4MiA9IG5ldyBNYXRyaXhTZWxlY3Rpb25WaWV3KG1hdHJpeCwgWzEsIDJdLCBbMCwgMV0pO1xuICAgICAgYSA9IG1hdHJpeC5nZXQoMCwgMCk7XG4gICAgICBiID0gbWF0cml4LmdldCgwLCAxKTtcbiAgICAgIGMgPSBtYXRyaXguZ2V0KDAsIDIpO1xuXG4gICAgICByZXR1cm4gKFxuICAgICAgICBhICogZGV0ZXJtaW5hbnQoc3ViTWF0cml4MCkgLVxuICAgICAgICBiICogZGV0ZXJtaW5hbnQoc3ViTWF0cml4MSkgK1xuICAgICAgICBjICogZGV0ZXJtaW5hbnQoc3ViTWF0cml4MilcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGdlbmVyYWwgcHVycG9zZSBkZXRlcm1pbmFudCB1c2luZyB0aGUgTFUgZGVjb21wb3NpdGlvblxuICAgICAgcmV0dXJuIG5ldyBMdURlY29tcG9zaXRpb24obWF0cml4KS5kZXRlcm1pbmFudDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgRXJyb3IoJ2RldGVybWluYW50IGNhbiBvbmx5IGJlIGNhbGN1bGF0ZWQgZm9yIGEgc3F1YXJlIG1hdHJpeCcpO1xuICB9XG59XG4iLCJpbXBvcnQgU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24gZnJvbSAnLi9kYy9zdmQnO1xuaW1wb3J0IE1hdHJpeCBmcm9tICcuL21hdHJpeCc7XG5cbmZ1bmN0aW9uIHhyYW5nZShuLCBleGNlcHRpb24pIHtcbiAgbGV0IHJhbmdlID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgaWYgKGkgIT09IGV4Y2VwdGlvbikge1xuICAgICAgcmFuZ2UucHVzaChpKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJhbmdlO1xufVxuXG5mdW5jdGlvbiBkZXBlbmRlbmNpZXNPbmVSb3coXG4gIGVycm9yLFxuICBtYXRyaXgsXG4gIGluZGV4LFxuICB0aHJlc2hvbGRWYWx1ZSA9IDEwZS0xMCxcbiAgdGhyZXNob2xkRXJyb3IgPSAxMGUtMTAsXG4pIHtcbiAgaWYgKGVycm9yID4gdGhyZXNob2xkRXJyb3IpIHtcbiAgICByZXR1cm4gbmV3IEFycmF5KG1hdHJpeC5yb3dzICsgMSkuZmlsbCgwKTtcbiAgfSBlbHNlIHtcbiAgICBsZXQgcmV0dXJuQXJyYXkgPSBtYXRyaXguYWRkUm93KGluZGV4LCBbMF0pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcmV0dXJuQXJyYXkucm93czsgaSsrKSB7XG4gICAgICBpZiAoTWF0aC5hYnMocmV0dXJuQXJyYXkuZ2V0KGksIDApKSA8IHRocmVzaG9sZFZhbHVlKSB7XG4gICAgICAgIHJldHVybkFycmF5LnNldChpLCAwLCAwKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJldHVybkFycmF5LnRvMURBcnJheSgpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaW5lYXJEZXBlbmRlbmNpZXMobWF0cml4LCBvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyB0aHJlc2hvbGRWYWx1ZSA9IDEwZS0xMCwgdGhyZXNob2xkRXJyb3IgPSAxMGUtMTAgfSA9IG9wdGlvbnM7XG4gIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuXG4gIGxldCBuID0gbWF0cml4LnJvd3M7XG4gIGxldCByZXN1bHRzID0gbmV3IE1hdHJpeChuLCBuKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGxldCBiID0gTWF0cml4LmNvbHVtblZlY3RvcihtYXRyaXguZ2V0Um93KGkpKTtcbiAgICBsZXQgQWJpcyA9IG1hdHJpeC5zdWJNYXRyaXhSb3coeHJhbmdlKG4sIGkpKS50cmFuc3Bvc2UoKTtcbiAgICBsZXQgc3ZkID0gbmV3IFNpbmd1bGFyVmFsdWVEZWNvbXBvc2l0aW9uKEFiaXMpO1xuICAgIGxldCB4ID0gc3ZkLnNvbHZlKGIpO1xuICAgIGxldCBlcnJvciA9IE1hdHJpeC5zdWIoYiwgQWJpcy5tbXVsKHgpKS5hYnMoKS5tYXgoKTtcbiAgICByZXN1bHRzLnNldFJvdyhcbiAgICAgIGksXG4gICAgICBkZXBlbmRlbmNpZXNPbmVSb3coZXJyb3IsIHgsIGksIHRocmVzaG9sZFZhbHVlLCB0aHJlc2hvbGRFcnJvciksXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0cztcbn1cbiIsImltcG9ydCBTVkQgZnJvbSAnLi9kYy9zdmQnO1xuaW1wb3J0IE1hdHJpeCBmcm9tICcuL21hdHJpeCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBwc2V1ZG9JbnZlcnNlKG1hdHJpeCwgdGhyZXNob2xkID0gTnVtYmVyLkVQU0lMT04pIHtcbiAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gIGlmIChtYXRyaXguaXNFbXB0eSgpKSB7XG4gICAgLy8gd2l0aCBhIHplcm8gZGltZW5zaW9uLCB0aGUgcHNldWRvLWludmVyc2UgaXMgdGhlIHRyYW5zcG9zZSwgc2luY2UgYWxsIDB4biBhbmQgbngwIG1hdHJpY2VzIGFyZSBzaW5ndWxhclxuICAgIC8vICgweG4pKihueDApKigweG4pID0gMHhuXG4gICAgLy8gKG54MCkqKDB4bikqKG54MCkgPSBueDBcbiAgICByZXR1cm4gbWF0cml4LnRyYW5zcG9zZSgpO1xuICB9XG4gIGxldCBzdmRTb2x1dGlvbiA9IG5ldyBTVkQobWF0cml4LCB7IGF1dG9UcmFuc3Bvc2U6IHRydWUgfSk7XG5cbiAgbGV0IFUgPSBzdmRTb2x1dGlvbi5sZWZ0U2luZ3VsYXJWZWN0b3JzO1xuICBsZXQgViA9IHN2ZFNvbHV0aW9uLnJpZ2h0U2luZ3VsYXJWZWN0b3JzO1xuICBsZXQgcyA9IHN2ZFNvbHV0aW9uLmRpYWdvbmFsO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChNYXRoLmFicyhzW2ldKSA+IHRocmVzaG9sZCkge1xuICAgICAgc1tpXSA9IDEuMCAvIHNbaV07XG4gICAgfSBlbHNlIHtcbiAgICAgIHNbaV0gPSAwLjA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIFYubW11bChNYXRyaXguZGlhZyhzKS5tbXVsKFUudHJhbnNwb3NlKCkpKTtcbn1cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi9tYXRyaXgnO1xuXG5leHBvcnQgZnVuY3Rpb24gY292YXJpYW5jZSh4TWF0cml4LCB5TWF0cml4ID0geE1hdHJpeCwgb3B0aW9ucyA9IHt9KSB7XG4gIHhNYXRyaXggPSBuZXcgTWF0cml4KHhNYXRyaXgpO1xuICBsZXQgeUlzU2FtZSA9IGZhbHNlO1xuICBpZiAoXG4gICAgdHlwZW9mIHlNYXRyaXggPT09ICdvYmplY3QnICYmXG4gICAgIU1hdHJpeC5pc01hdHJpeCh5TWF0cml4KSAmJlxuICAgICFBcnJheS5pc0FycmF5KHlNYXRyaXgpXG4gICkge1xuICAgIG9wdGlvbnMgPSB5TWF0cml4O1xuICAgIHlNYXRyaXggPSB4TWF0cml4O1xuICAgIHlJc1NhbWUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHlNYXRyaXggPSBuZXcgTWF0cml4KHlNYXRyaXgpO1xuICB9XG4gIGlmICh4TWF0cml4LnJvd3MgIT09IHlNYXRyaXgucm93cykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvdGggbWF0cmljZXMgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiByb3dzJyk7XG4gIH1cbiAgY29uc3QgeyBjZW50ZXIgPSB0cnVlIH0gPSBvcHRpb25zO1xuICBpZiAoY2VudGVyKSB7XG4gICAgeE1hdHJpeCA9IHhNYXRyaXguY2VudGVyKCdjb2x1bW4nKTtcbiAgICBpZiAoIXlJc1NhbWUpIHtcbiAgICAgIHlNYXRyaXggPSB5TWF0cml4LmNlbnRlcignY29sdW1uJyk7XG4gICAgfVxuICB9XG4gIGNvbnN0IGNvdiA9IHhNYXRyaXgudHJhbnNwb3NlKCkubW11bCh5TWF0cml4KTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3Yucm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb3YuY29sdW1uczsgaisrKSB7XG4gICAgICBjb3Yuc2V0KGksIGosIGNvdi5nZXQoaSwgaikgKiAoMSAvICh4TWF0cml4LnJvd3MgLSAxKSkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gY292O1xufVxuIiwiaW1wb3J0IE1hdHJpeCBmcm9tICcuL21hdHJpeCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb3JyZWxhdGlvbih4TWF0cml4LCB5TWF0cml4ID0geE1hdHJpeCwgb3B0aW9ucyA9IHt9KSB7XG4gIHhNYXRyaXggPSBuZXcgTWF0cml4KHhNYXRyaXgpO1xuICBsZXQgeUlzU2FtZSA9IGZhbHNlO1xuICBpZiAoXG4gICAgdHlwZW9mIHlNYXRyaXggPT09ICdvYmplY3QnICYmXG4gICAgIU1hdHJpeC5pc01hdHJpeCh5TWF0cml4KSAmJlxuICAgICFBcnJheS5pc0FycmF5KHlNYXRyaXgpXG4gICkge1xuICAgIG9wdGlvbnMgPSB5TWF0cml4O1xuICAgIHlNYXRyaXggPSB4TWF0cml4O1xuICAgIHlJc1NhbWUgPSB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHlNYXRyaXggPSBuZXcgTWF0cml4KHlNYXRyaXgpO1xuICB9XG4gIGlmICh4TWF0cml4LnJvd3MgIT09IHlNYXRyaXgucm93cykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvdGggbWF0cmljZXMgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiByb3dzJyk7XG4gIH1cblxuICBjb25zdCB7IGNlbnRlciA9IHRydWUsIHNjYWxlID0gdHJ1ZSB9ID0gb3B0aW9ucztcbiAgaWYgKGNlbnRlcikge1xuICAgIHhNYXRyaXguY2VudGVyKCdjb2x1bW4nKTtcbiAgICBpZiAoIXlJc1NhbWUpIHtcbiAgICAgIHlNYXRyaXguY2VudGVyKCdjb2x1bW4nKTtcbiAgICB9XG4gIH1cbiAgaWYgKHNjYWxlKSB7XG4gICAgeE1hdHJpeC5zY2FsZSgnY29sdW1uJyk7XG4gICAgaWYgKCF5SXNTYW1lKSB7XG4gICAgICB5TWF0cml4LnNjYWxlKCdjb2x1bW4nKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBzZHggPSB4TWF0cml4LnN0YW5kYXJkRGV2aWF0aW9uKCdjb2x1bW4nLCB7IHVuYmlhc2VkOiB0cnVlIH0pO1xuICBjb25zdCBzZHkgPSB5SXNTYW1lXG4gICAgPyBzZHhcbiAgICA6IHlNYXRyaXguc3RhbmRhcmREZXZpYXRpb24oJ2NvbHVtbicsIHsgdW5iaWFzZWQ6IHRydWUgfSk7XG5cbiAgY29uc3QgY29yciA9IHhNYXRyaXgudHJhbnNwb3NlKCkubW11bCh5TWF0cml4KTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3JyLnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29yci5jb2x1bW5zOyBqKyspIHtcbiAgICAgIGNvcnIuc2V0KFxuICAgICAgICBpLFxuICAgICAgICBqLFxuICAgICAgICBjb3JyLmdldChpLCBqKSAqICgxIC8gKHNkeFtpXSAqIHNkeVtqXSkpICogKDEgLyAoeE1hdHJpeC5yb3dzIC0gMSkpLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGNvcnI7XG59XG4iLCJpbXBvcnQgTWF0cml4IGZyb20gJy4uL21hdHJpeCc7XG5pbXBvcnQgV3JhcHBlck1hdHJpeDJEIGZyb20gJy4uL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuaW1wb3J0IHsgaHlwb3RlbnVzZSB9IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEVpZ2VudmFsdWVEZWNvbXBvc2l0aW9uIHtcbiAgY29uc3RydWN0b3IobWF0cml4LCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGFzc3VtZVN5bW1ldHJpYyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gICAgbWF0cml4ID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKCFtYXRyaXguaXNTcXVhcmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggaXMgbm90IGEgc3F1YXJlIG1hdHJpeCcpO1xuICAgIH1cblxuICAgIGlmIChtYXRyaXguaXNFbXB0eSgpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdHJpeCBtdXN0IGJlIG5vbi1lbXB0eScpO1xuICAgIH1cblxuICAgIGxldCBuID0gbWF0cml4LmNvbHVtbnM7XG4gICAgbGV0IFYgPSBuZXcgTWF0cml4KG4sIG4pO1xuICAgIGxldCBkID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICBsZXQgZSA9IG5ldyBGbG9hdDY0QXJyYXkobik7XG4gICAgbGV0IHZhbHVlID0gbWF0cml4O1xuICAgIGxldCBpLCBqO1xuXG4gICAgbGV0IGlzU3ltbWV0cmljID0gZmFsc2U7XG4gICAgaWYgKGFzc3VtZVN5bW1ldHJpYykge1xuICAgICAgaXNTeW1tZXRyaWMgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBpc1N5bW1ldHJpYyA9IG1hdHJpeC5pc1N5bW1ldHJpYygpO1xuICAgIH1cblxuICAgIGlmIChpc1N5bW1ldHJpYykge1xuICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgICAgVi5zZXQoaSwgaiwgdmFsdWUuZ2V0KGksIGopKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdHJlZDIobiwgZSwgZCwgVik7XG4gICAgICB0cWwyKG4sIGUsIGQsIFYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgSCA9IG5ldyBNYXRyaXgobiwgbik7XG4gICAgICBsZXQgb3J0ID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgICAgIEguc2V0KGksIGosIHZhbHVlLmdldChpLCBqKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG9ydGhlcyhuLCBILCBvcnQsIFYpO1xuICAgICAgaHFyMihuLCBlLCBkLCBWLCBIKTtcbiAgICB9XG5cbiAgICB0aGlzLm4gPSBuO1xuICAgIHRoaXMuZSA9IGU7XG4gICAgdGhpcy5kID0gZDtcbiAgICB0aGlzLlYgPSBWO1xuICB9XG5cbiAgZ2V0IHJlYWxFaWdlbnZhbHVlcygpIHtcbiAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzLmQpO1xuICB9XG5cbiAgZ2V0IGltYWdpbmFyeUVpZ2VudmFsdWVzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMuZSk7XG4gIH1cblxuICBnZXQgZWlnZW52ZWN0b3JNYXRyaXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuVjtcbiAgfVxuXG4gIGdldCBkaWFnb25hbE1hdHJpeCgpIHtcbiAgICBsZXQgbiA9IHRoaXMubjtcbiAgICBsZXQgZSA9IHRoaXMuZTtcbiAgICBsZXQgZCA9IHRoaXMuZDtcbiAgICBsZXQgWCA9IG5ldyBNYXRyaXgobiwgbik7XG4gICAgbGV0IGksIGo7XG4gICAgZm9yIChpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IG47IGorKykge1xuICAgICAgICBYLnNldChpLCBqLCAwKTtcbiAgICAgIH1cbiAgICAgIFguc2V0KGksIGksIGRbaV0pO1xuICAgICAgaWYgKGVbaV0gPiAwKSB7XG4gICAgICAgIFguc2V0KGksIGkgKyAxLCBlW2ldKTtcbiAgICAgIH0gZWxzZSBpZiAoZVtpXSA8IDApIHtcbiAgICAgICAgWC5zZXQoaSwgaSAtIDEsIGVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gWDtcbiAgfVxufVxuXG5mdW5jdGlvbiB0cmVkMihuLCBlLCBkLCBWKSB7XG4gIGxldCBmLCBnLCBoLCBpLCBqLCBrLCBoaCwgc2NhbGU7XG5cbiAgZm9yIChqID0gMDsgaiA8IG47IGorKykge1xuICAgIGRbal0gPSBWLmdldChuIC0gMSwgaik7XG4gIH1cblxuICBmb3IgKGkgPSBuIC0gMTsgaSA+IDA7IGktLSkge1xuICAgIHNjYWxlID0gMDtcbiAgICBoID0gMDtcbiAgICBmb3IgKGsgPSAwOyBrIDwgaTsgaysrKSB7XG4gICAgICBzY2FsZSA9IHNjYWxlICsgTWF0aC5hYnMoZFtrXSk7XG4gICAgfVxuXG4gICAgaWYgKHNjYWxlID09PSAwKSB7XG4gICAgICBlW2ldID0gZFtpIC0gMV07XG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGRbal0gPSBWLmdldChpIC0gMSwgaik7XG4gICAgICAgIFYuc2V0KGksIGosIDApO1xuICAgICAgICBWLnNldChqLCBpLCAwKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChrID0gMDsgayA8IGk7IGsrKykge1xuICAgICAgICBkW2tdIC89IHNjYWxlO1xuICAgICAgICBoICs9IGRba10gKiBkW2tdO1xuICAgICAgfVxuXG4gICAgICBmID0gZFtpIC0gMV07XG4gICAgICBnID0gTWF0aC5zcXJ0KGgpO1xuICAgICAgaWYgKGYgPiAwKSB7XG4gICAgICAgIGcgPSAtZztcbiAgICAgIH1cblxuICAgICAgZVtpXSA9IHNjYWxlICogZztcbiAgICAgIGggPSBoIC0gZiAqIGc7XG4gICAgICBkW2kgLSAxXSA9IGYgLSBnO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBlW2pdID0gMDtcbiAgICAgIH1cblxuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBmID0gZFtqXTtcbiAgICAgICAgVi5zZXQoaiwgaSwgZik7XG4gICAgICAgIGcgPSBlW2pdICsgVi5nZXQoaiwgaikgKiBmO1xuICAgICAgICBmb3IgKGsgPSBqICsgMTsgayA8PSBpIC0gMTsgaysrKSB7XG4gICAgICAgICAgZyArPSBWLmdldChrLCBqKSAqIGRba107XG4gICAgICAgICAgZVtrXSArPSBWLmdldChrLCBqKSAqIGY7XG4gICAgICAgIH1cbiAgICAgICAgZVtqXSA9IGc7XG4gICAgICB9XG5cbiAgICAgIGYgPSAwO1xuICAgICAgZm9yIChqID0gMDsgaiA8IGk7IGorKykge1xuICAgICAgICBlW2pdIC89IGg7XG4gICAgICAgIGYgKz0gZVtqXSAqIGRbal07XG4gICAgICB9XG5cbiAgICAgIGhoID0gZiAvIChoICsgaCk7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGVbal0gLT0gaGggKiBkW2pdO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwOyBqIDwgaTsgaisrKSB7XG4gICAgICAgIGYgPSBkW2pdO1xuICAgICAgICBnID0gZVtqXTtcbiAgICAgICAgZm9yIChrID0gajsgayA8PSBpIC0gMTsgaysrKSB7XG4gICAgICAgICAgVi5zZXQoaywgaiwgVi5nZXQoaywgaikgLSAoZiAqIGVba10gKyBnICogZFtrXSkpO1xuICAgICAgICB9XG4gICAgICAgIGRbal0gPSBWLmdldChpIC0gMSwgaik7XG4gICAgICAgIFYuc2V0KGksIGosIDApO1xuICAgICAgfVxuICAgIH1cbiAgICBkW2ldID0gaDtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgaSsrKSB7XG4gICAgVi5zZXQobiAtIDEsIGksIFYuZ2V0KGksIGkpKTtcbiAgICBWLnNldChpLCBpLCAxKTtcbiAgICBoID0gZFtpICsgMV07XG4gICAgaWYgKGggIT09IDApIHtcbiAgICAgIGZvciAoayA9IDA7IGsgPD0gaTsgaysrKSB7XG4gICAgICAgIGRba10gPSBWLmdldChrLCBpICsgMSkgLyBoO1xuICAgICAgfVxuXG4gICAgICBmb3IgKGogPSAwOyBqIDw9IGk7IGorKykge1xuICAgICAgICBnID0gMDtcbiAgICAgICAgZm9yIChrID0gMDsgayA8PSBpOyBrKyspIHtcbiAgICAgICAgICBnICs9IFYuZ2V0KGssIGkgKyAxKSAqIFYuZ2V0KGssIGopO1xuICAgICAgICB9XG4gICAgICAgIGZvciAoayA9IDA7IGsgPD0gaTsgaysrKSB7XG4gICAgICAgICAgVi5zZXQoaywgaiwgVi5nZXQoaywgaikgLSBnICogZFtrXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGsgPSAwOyBrIDw9IGk7IGsrKykge1xuICAgICAgVi5zZXQoaywgaSArIDEsIDApO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaiA9IDA7IGogPCBuOyBqKyspIHtcbiAgICBkW2pdID0gVi5nZXQobiAtIDEsIGopO1xuICAgIFYuc2V0KG4gLSAxLCBqLCAwKTtcbiAgfVxuXG4gIFYuc2V0KG4gLSAxLCBuIC0gMSwgMSk7XG4gIGVbMF0gPSAwO1xufVxuXG5mdW5jdGlvbiB0cWwyKG4sIGUsIGQsIFYpIHtcbiAgbGV0IGcsIGgsIGksIGosIGssIGwsIG0sIHAsIHIsIGRsMSwgYywgYzIsIGMzLCBlbDEsIHMsIHMyLCBpdGVyO1xuXG4gIGZvciAoaSA9IDE7IGkgPCBuOyBpKyspIHtcbiAgICBlW2kgLSAxXSA9IGVbaV07XG4gIH1cblxuICBlW24gLSAxXSA9IDA7XG5cbiAgbGV0IGYgPSAwO1xuICBsZXQgdHN0MSA9IDA7XG4gIGxldCBlcHMgPSBOdW1iZXIuRVBTSUxPTjtcblxuICBmb3IgKGwgPSAwOyBsIDwgbjsgbCsrKSB7XG4gICAgdHN0MSA9IE1hdGgubWF4KHRzdDEsIE1hdGguYWJzKGRbbF0pICsgTWF0aC5hYnMoZVtsXSkpO1xuICAgIG0gPSBsO1xuICAgIHdoaWxlIChtIDwgbikge1xuICAgICAgaWYgKE1hdGguYWJzKGVbbV0pIDw9IGVwcyAqIHRzdDEpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICBtKys7XG4gICAgfVxuXG4gICAgaWYgKG0gPiBsKSB7XG4gICAgICBpdGVyID0gMDtcbiAgICAgIGRvIHtcbiAgICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuXG4gICAgICAgIGcgPSBkW2xdO1xuICAgICAgICBwID0gKGRbbCArIDFdIC0gZykgLyAoMiAqIGVbbF0pO1xuICAgICAgICByID0gaHlwb3RlbnVzZShwLCAxKTtcbiAgICAgICAgaWYgKHAgPCAwKSB7XG4gICAgICAgICAgciA9IC1yO1xuICAgICAgICB9XG5cbiAgICAgICAgZFtsXSA9IGVbbF0gLyAocCArIHIpO1xuICAgICAgICBkW2wgKyAxXSA9IGVbbF0gKiAocCArIHIpO1xuICAgICAgICBkbDEgPSBkW2wgKyAxXTtcbiAgICAgICAgaCA9IGcgLSBkW2xdO1xuICAgICAgICBmb3IgKGkgPSBsICsgMjsgaSA8IG47IGkrKykge1xuICAgICAgICAgIGRbaV0gLT0gaDtcbiAgICAgICAgfVxuXG4gICAgICAgIGYgPSBmICsgaDtcblxuICAgICAgICBwID0gZFttXTtcbiAgICAgICAgYyA9IDE7XG4gICAgICAgIGMyID0gYztcbiAgICAgICAgYzMgPSBjO1xuICAgICAgICBlbDEgPSBlW2wgKyAxXTtcbiAgICAgICAgcyA9IDA7XG4gICAgICAgIHMyID0gMDtcbiAgICAgICAgZm9yIChpID0gbSAtIDE7IGkgPj0gbDsgaS0tKSB7XG4gICAgICAgICAgYzMgPSBjMjtcbiAgICAgICAgICBjMiA9IGM7XG4gICAgICAgICAgczIgPSBzO1xuICAgICAgICAgIGcgPSBjICogZVtpXTtcbiAgICAgICAgICBoID0gYyAqIHA7XG4gICAgICAgICAgciA9IGh5cG90ZW51c2UocCwgZVtpXSk7XG4gICAgICAgICAgZVtpICsgMV0gPSBzICogcjtcbiAgICAgICAgICBzID0gZVtpXSAvIHI7XG4gICAgICAgICAgYyA9IHAgLyByO1xuICAgICAgICAgIHAgPSBjICogZFtpXSAtIHMgKiBnO1xuICAgICAgICAgIGRbaSArIDFdID0gaCArIHMgKiAoYyAqIGcgKyBzICogZFtpXSk7XG5cbiAgICAgICAgICBmb3IgKGsgPSAwOyBrIDwgbjsgaysrKSB7XG4gICAgICAgICAgICBoID0gVi5nZXQoaywgaSArIDEpO1xuICAgICAgICAgICAgVi5zZXQoaywgaSArIDEsIHMgKiBWLmdldChrLCBpKSArIGMgKiBoKTtcbiAgICAgICAgICAgIFYuc2V0KGssIGksIGMgKiBWLmdldChrLCBpKSAtIHMgKiBoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBwID0gKC1zICogczIgKiBjMyAqIGVsMSAqIGVbbF0pIC8gZGwxO1xuICAgICAgICBlW2xdID0gcyAqIHA7XG4gICAgICAgIGRbbF0gPSBjICogcDtcbiAgICAgIH0gd2hpbGUgKE1hdGguYWJzKGVbbF0pID4gZXBzICogdHN0MSk7XG4gICAgfVxuICAgIGRbbF0gPSBkW2xdICsgZjtcbiAgICBlW2xdID0gMDtcbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuIC0gMTsgaSsrKSB7XG4gICAgayA9IGk7XG4gICAgcCA9IGRbaV07XG4gICAgZm9yIChqID0gaSArIDE7IGogPCBuOyBqKyspIHtcbiAgICAgIGlmIChkW2pdIDwgcCkge1xuICAgICAgICBrID0gajtcbiAgICAgICAgcCA9IGRbal07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGsgIT09IGkpIHtcbiAgICAgIGRba10gPSBkW2ldO1xuICAgICAgZFtpXSA9IHA7XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIHAgPSBWLmdldChqLCBpKTtcbiAgICAgICAgVi5zZXQoaiwgaSwgVi5nZXQoaiwgaykpO1xuICAgICAgICBWLnNldChqLCBrLCBwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gb3J0aGVzKG4sIEgsIG9ydCwgVikge1xuICBsZXQgbG93ID0gMDtcbiAgbGV0IGhpZ2ggPSBuIC0gMTtcbiAgbGV0IGYsIGcsIGgsIGksIGosIG07XG4gIGxldCBzY2FsZTtcblxuICBmb3IgKG0gPSBsb3cgKyAxOyBtIDw9IGhpZ2ggLSAxOyBtKyspIHtcbiAgICBzY2FsZSA9IDA7XG4gICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgIHNjYWxlID0gc2NhbGUgKyBNYXRoLmFicyhILmdldChpLCBtIC0gMSkpO1xuICAgIH1cblxuICAgIGlmIChzY2FsZSAhPT0gMCkge1xuICAgICAgaCA9IDA7XG4gICAgICBmb3IgKGkgPSBoaWdoOyBpID49IG07IGktLSkge1xuICAgICAgICBvcnRbaV0gPSBILmdldChpLCBtIC0gMSkgLyBzY2FsZTtcbiAgICAgICAgaCArPSBvcnRbaV0gKiBvcnRbaV07XG4gICAgICB9XG5cbiAgICAgIGcgPSBNYXRoLnNxcnQoaCk7XG4gICAgICBpZiAob3J0W21dID4gMCkge1xuICAgICAgICBnID0gLWc7XG4gICAgICB9XG5cbiAgICAgIGggPSBoIC0gb3J0W21dICogZztcbiAgICAgIG9ydFttXSA9IG9ydFttXSAtIGc7XG5cbiAgICAgIGZvciAoaiA9IG07IGogPCBuOyBqKyspIHtcbiAgICAgICAgZiA9IDA7XG4gICAgICAgIGZvciAoaSA9IGhpZ2g7IGkgPj0gbTsgaS0tKSB7XG4gICAgICAgICAgZiArPSBvcnRbaV0gKiBILmdldChpLCBqKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGYgPSBmIC8gaDtcbiAgICAgICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgICAgICBILnNldChpLCBqLCBILmdldChpLCBqKSAtIGYgKiBvcnRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IDA7IGkgPD0gaGlnaDsgaSsrKSB7XG4gICAgICAgIGYgPSAwO1xuICAgICAgICBmb3IgKGogPSBoaWdoOyBqID49IG07IGotLSkge1xuICAgICAgICAgIGYgKz0gb3J0W2pdICogSC5nZXQoaSwgaik7XG4gICAgICAgIH1cblxuICAgICAgICBmID0gZiAvIGg7XG4gICAgICAgIGZvciAoaiA9IG07IGogPD0gaGlnaDsgaisrKSB7XG4gICAgICAgICAgSC5zZXQoaSwgaiwgSC5nZXQoaSwgaikgLSBmICogb3J0W2pdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBvcnRbbV0gPSBzY2FsZSAqIG9ydFttXTtcbiAgICAgIEguc2V0KG0sIG0gLSAxLCBzY2FsZSAqIGcpO1xuICAgIH1cbiAgfVxuXG4gIGZvciAoaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICBmb3IgKGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICBWLnNldChpLCBqLCBpID09PSBqID8gMSA6IDApO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobSA9IGhpZ2ggLSAxOyBtID49IGxvdyArIDE7IG0tLSkge1xuICAgIGlmIChILmdldChtLCBtIC0gMSkgIT09IDApIHtcbiAgICAgIGZvciAoaSA9IG0gKyAxOyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICBvcnRbaV0gPSBILmdldChpLCBtIC0gMSk7XG4gICAgICB9XG5cbiAgICAgIGZvciAoaiA9IG07IGogPD0gaGlnaDsgaisrKSB7XG4gICAgICAgIGcgPSAwO1xuICAgICAgICBmb3IgKGkgPSBtOyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgIGcgKz0gb3J0W2ldICogVi5nZXQoaSwgaik7XG4gICAgICAgIH1cblxuICAgICAgICBnID0gZyAvIG9ydFttXSAvIEguZ2V0KG0sIG0gLSAxKTtcbiAgICAgICAgZm9yIChpID0gbTsgaSA8PSBoaWdoOyBpKyspIHtcbiAgICAgICAgICBWLnNldChpLCBqLCBWLmdldChpLCBqKSArIGcgKiBvcnRbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGhxcjIobm4sIGUsIGQsIFYsIEgpIHtcbiAgbGV0IG4gPSBubiAtIDE7XG4gIGxldCBsb3cgPSAwO1xuICBsZXQgaGlnaCA9IG5uIC0gMTtcbiAgbGV0IGVwcyA9IE51bWJlci5FUFNJTE9OO1xuICBsZXQgZXhzaGlmdCA9IDA7XG4gIGxldCBub3JtID0gMDtcbiAgbGV0IHAgPSAwO1xuICBsZXQgcSA9IDA7XG4gIGxldCByID0gMDtcbiAgbGV0IHMgPSAwO1xuICBsZXQgeiA9IDA7XG4gIGxldCBpdGVyID0gMDtcbiAgbGV0IGksIGosIGssIGwsIG0sIHQsIHcsIHgsIHk7XG4gIGxldCByYSwgc2EsIHZyLCB2aTtcbiAgbGV0IG5vdGxhc3QsIGNkaXZyZXM7XG5cbiAgZm9yIChpID0gMDsgaSA8IG5uOyBpKyspIHtcbiAgICBpZiAoaSA8IGxvdyB8fCBpID4gaGlnaCkge1xuICAgICAgZFtpXSA9IEguZ2V0KGksIGkpO1xuICAgICAgZVtpXSA9IDA7XG4gICAgfVxuXG4gICAgZm9yIChqID0gTWF0aC5tYXgoaSAtIDEsIDApOyBqIDwgbm47IGorKykge1xuICAgICAgbm9ybSA9IG5vcm0gKyBNYXRoLmFicyhILmdldChpLCBqKSk7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKG4gPj0gbG93KSB7XG4gICAgbCA9IG47XG4gICAgd2hpbGUgKGwgPiBsb3cpIHtcbiAgICAgIHMgPSBNYXRoLmFicyhILmdldChsIC0gMSwgbCAtIDEpKSArIE1hdGguYWJzKEguZ2V0KGwsIGwpKTtcbiAgICAgIGlmIChzID09PSAwKSB7XG4gICAgICAgIHMgPSBub3JtO1xuICAgICAgfVxuICAgICAgaWYgKE1hdGguYWJzKEguZ2V0KGwsIGwgLSAxKSkgPCBlcHMgKiBzKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgICAgbC0tO1xuICAgIH1cblxuICAgIGlmIChsID09PSBuKSB7XG4gICAgICBILnNldChuLCBuLCBILmdldChuLCBuKSArIGV4c2hpZnQpO1xuICAgICAgZFtuXSA9IEguZ2V0KG4sIG4pO1xuICAgICAgZVtuXSA9IDA7XG4gICAgICBuLS07XG4gICAgICBpdGVyID0gMDtcbiAgICB9IGVsc2UgaWYgKGwgPT09IG4gLSAxKSB7XG4gICAgICB3ID0gSC5nZXQobiwgbiAtIDEpICogSC5nZXQobiAtIDEsIG4pO1xuICAgICAgcCA9IChILmdldChuIC0gMSwgbiAtIDEpIC0gSC5nZXQobiwgbikpIC8gMjtcbiAgICAgIHEgPSBwICogcCArIHc7XG4gICAgICB6ID0gTWF0aC5zcXJ0KE1hdGguYWJzKHEpKTtcbiAgICAgIEguc2V0KG4sIG4sIEguZ2V0KG4sIG4pICsgZXhzaGlmdCk7XG4gICAgICBILnNldChuIC0gMSwgbiAtIDEsIEguZ2V0KG4gLSAxLCBuIC0gMSkgKyBleHNoaWZ0KTtcbiAgICAgIHggPSBILmdldChuLCBuKTtcblxuICAgICAgaWYgKHEgPj0gMCkge1xuICAgICAgICB6ID0gcCA+PSAwID8gcCArIHogOiBwIC0gejtcbiAgICAgICAgZFtuIC0gMV0gPSB4ICsgejtcbiAgICAgICAgZFtuXSA9IGRbbiAtIDFdO1xuICAgICAgICBpZiAoeiAhPT0gMCkge1xuICAgICAgICAgIGRbbl0gPSB4IC0gdyAvIHo7XG4gICAgICAgIH1cbiAgICAgICAgZVtuIC0gMV0gPSAwO1xuICAgICAgICBlW25dID0gMDtcbiAgICAgICAgeCA9IEguZ2V0KG4sIG4gLSAxKTtcbiAgICAgICAgcyA9IE1hdGguYWJzKHgpICsgTWF0aC5hYnMoeik7XG4gICAgICAgIHAgPSB4IC8gcztcbiAgICAgICAgcSA9IHogLyBzO1xuICAgICAgICByID0gTWF0aC5zcXJ0KHAgKiBwICsgcSAqIHEpO1xuICAgICAgICBwID0gcCAvIHI7XG4gICAgICAgIHEgPSBxIC8gcjtcblxuICAgICAgICBmb3IgKGogPSBuIC0gMTsgaiA8IG5uOyBqKyspIHtcbiAgICAgICAgICB6ID0gSC5nZXQobiAtIDEsIGopO1xuICAgICAgICAgIEguc2V0KG4gLSAxLCBqLCBxICogeiArIHAgKiBILmdldChuLCBqKSk7XG4gICAgICAgICAgSC5zZXQobiwgaiwgcSAqIEguZ2V0KG4sIGopIC0gcCAqIHopO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gMDsgaSA8PSBuOyBpKyspIHtcbiAgICAgICAgICB6ID0gSC5nZXQoaSwgbiAtIDEpO1xuICAgICAgICAgIEguc2V0KGksIG4gLSAxLCBxICogeiArIHAgKiBILmdldChpLCBuKSk7XG4gICAgICAgICAgSC5zZXQoaSwgbiwgcSAqIEguZ2V0KGksIG4pIC0gcCAqIHopO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgIHogPSBWLmdldChpLCBuIC0gMSk7XG4gICAgICAgICAgVi5zZXQoaSwgbiAtIDEsIHEgKiB6ICsgcCAqIFYuZ2V0KGksIG4pKTtcbiAgICAgICAgICBWLnNldChpLCBuLCBxICogVi5nZXQoaSwgbikgLSBwICogeik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRbbiAtIDFdID0geCArIHA7XG4gICAgICAgIGRbbl0gPSB4ICsgcDtcbiAgICAgICAgZVtuIC0gMV0gPSB6O1xuICAgICAgICBlW25dID0gLXo7XG4gICAgICB9XG5cbiAgICAgIG4gPSBuIC0gMjtcbiAgICAgIGl0ZXIgPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICB4ID0gSC5nZXQobiwgbik7XG4gICAgICB5ID0gMDtcbiAgICAgIHcgPSAwO1xuICAgICAgaWYgKGwgPCBuKSB7XG4gICAgICAgIHkgPSBILmdldChuIC0gMSwgbiAtIDEpO1xuICAgICAgICB3ID0gSC5nZXQobiwgbiAtIDEpICogSC5nZXQobiAtIDEsIG4pO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlciA9PT0gMTApIHtcbiAgICAgICAgZXhzaGlmdCArPSB4O1xuICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgICAgSC5zZXQoaSwgaSwgSC5nZXQoaSwgaSkgLSB4KTtcbiAgICAgICAgfVxuICAgICAgICBzID0gTWF0aC5hYnMoSC5nZXQobiwgbiAtIDEpKSArIE1hdGguYWJzKEguZ2V0KG4gLSAxLCBuIC0gMikpO1xuICAgICAgICB4ID0geSA9IDAuNzUgKiBzO1xuICAgICAgICB3ID0gLTAuNDM3NSAqIHMgKiBzO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlciA9PT0gMzApIHtcbiAgICAgICAgcyA9ICh5IC0geCkgLyAyO1xuICAgICAgICBzID0gcyAqIHMgKyB3O1xuICAgICAgICBpZiAocyA+IDApIHtcbiAgICAgICAgICBzID0gTWF0aC5zcXJ0KHMpO1xuICAgICAgICAgIGlmICh5IDwgeCkge1xuICAgICAgICAgICAgcyA9IC1zO1xuICAgICAgICAgIH1cbiAgICAgICAgICBzID0geCAtIHcgLyAoKHkgLSB4KSAvIDIgKyBzKTtcbiAgICAgICAgICBmb3IgKGkgPSBsb3c7IGkgPD0gbjsgaSsrKSB7XG4gICAgICAgICAgICBILnNldChpLCBpLCBILmdldChpLCBpKSAtIHMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBleHNoaWZ0ICs9IHM7XG4gICAgICAgICAgeCA9IHkgPSB3ID0gMC45NjQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaXRlciA9IGl0ZXIgKyAxO1xuXG4gICAgICBtID0gbiAtIDI7XG4gICAgICB3aGlsZSAobSA+PSBsKSB7XG4gICAgICAgIHogPSBILmdldChtLCBtKTtcbiAgICAgICAgciA9IHggLSB6O1xuICAgICAgICBzID0geSAtIHo7XG4gICAgICAgIHAgPSAociAqIHMgLSB3KSAvIEguZ2V0KG0gKyAxLCBtKSArIEguZ2V0KG0sIG0gKyAxKTtcbiAgICAgICAgcSA9IEguZ2V0KG0gKyAxLCBtICsgMSkgLSB6IC0gciAtIHM7XG4gICAgICAgIHIgPSBILmdldChtICsgMiwgbSArIDEpO1xuICAgICAgICBzID0gTWF0aC5hYnMocCkgKyBNYXRoLmFicyhxKSArIE1hdGguYWJzKHIpO1xuICAgICAgICBwID0gcCAvIHM7XG4gICAgICAgIHEgPSBxIC8gcztcbiAgICAgICAgciA9IHIgLyBzO1xuICAgICAgICBpZiAobSA9PT0gbCkge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICBNYXRoLmFicyhILmdldChtLCBtIC0gMSkpICogKE1hdGguYWJzKHEpICsgTWF0aC5hYnMocikpIDxcbiAgICAgICAgICBlcHMgKlxuICAgICAgICAgICAgKE1hdGguYWJzKHApICpcbiAgICAgICAgICAgICAgKE1hdGguYWJzKEguZ2V0KG0gLSAxLCBtIC0gMSkpICtcbiAgICAgICAgICAgICAgICBNYXRoLmFicyh6KSArXG4gICAgICAgICAgICAgICAgTWF0aC5hYnMoSC5nZXQobSArIDEsIG0gKyAxKSkpKVxuICAgICAgICApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBtLS07XG4gICAgICB9XG5cbiAgICAgIGZvciAoaSA9IG0gKyAyOyBpIDw9IG47IGkrKykge1xuICAgICAgICBILnNldChpLCBpIC0gMiwgMCk7XG4gICAgICAgIGlmIChpID4gbSArIDIpIHtcbiAgICAgICAgICBILnNldChpLCBpIC0gMywgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgZm9yIChrID0gbTsgayA8PSBuIC0gMTsgaysrKSB7XG4gICAgICAgIG5vdGxhc3QgPSBrICE9PSBuIC0gMTtcbiAgICAgICAgaWYgKGsgIT09IG0pIHtcbiAgICAgICAgICBwID0gSC5nZXQoaywgayAtIDEpO1xuICAgICAgICAgIHEgPSBILmdldChrICsgMSwgayAtIDEpO1xuICAgICAgICAgIHIgPSBub3RsYXN0ID8gSC5nZXQoayArIDIsIGsgLSAxKSA6IDA7XG4gICAgICAgICAgeCA9IE1hdGguYWJzKHApICsgTWF0aC5hYnMocSkgKyBNYXRoLmFicyhyKTtcbiAgICAgICAgICBpZiAoeCAhPT0gMCkge1xuICAgICAgICAgICAgcCA9IHAgLyB4O1xuICAgICAgICAgICAgcSA9IHEgLyB4O1xuICAgICAgICAgICAgciA9IHIgLyB4O1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID09PSAwKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzID0gTWF0aC5zcXJ0KHAgKiBwICsgcSAqIHEgKyByICogcik7XG4gICAgICAgIGlmIChwIDwgMCkge1xuICAgICAgICAgIHMgPSAtcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzICE9PSAwKSB7XG4gICAgICAgICAgaWYgKGsgIT09IG0pIHtcbiAgICAgICAgICAgIEguc2V0KGssIGsgLSAxLCAtcyAqIHgpO1xuICAgICAgICAgIH0gZWxzZSBpZiAobCAhPT0gbSkge1xuICAgICAgICAgICAgSC5zZXQoaywgayAtIDEsIC1ILmdldChrLCBrIC0gMSkpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHAgPSBwICsgcztcbiAgICAgICAgICB4ID0gcCAvIHM7XG4gICAgICAgICAgeSA9IHEgLyBzO1xuICAgICAgICAgIHogPSByIC8gcztcbiAgICAgICAgICBxID0gcSAvIHA7XG4gICAgICAgICAgciA9IHIgLyBwO1xuXG4gICAgICAgICAgZm9yIChqID0gazsgaiA8IG5uOyBqKyspIHtcbiAgICAgICAgICAgIHAgPSBILmdldChrLCBqKSArIHEgKiBILmdldChrICsgMSwgaik7XG4gICAgICAgICAgICBpZiAobm90bGFzdCkge1xuICAgICAgICAgICAgICBwID0gcCArIHIgKiBILmdldChrICsgMiwgaik7XG4gICAgICAgICAgICAgIEguc2V0KGsgKyAyLCBqLCBILmdldChrICsgMiwgaikgLSBwICogeik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIEguc2V0KGssIGosIEguZ2V0KGssIGopIC0gcCAqIHgpO1xuICAgICAgICAgICAgSC5zZXQoayArIDEsIGosIEguZ2V0KGsgKyAxLCBqKSAtIHAgKiB5KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBmb3IgKGkgPSAwOyBpIDw9IE1hdGgubWluKG4sIGsgKyAzKTsgaSsrKSB7XG4gICAgICAgICAgICBwID0geCAqIEguZ2V0KGksIGspICsgeSAqIEguZ2V0KGksIGsgKyAxKTtcbiAgICAgICAgICAgIGlmIChub3RsYXN0KSB7XG4gICAgICAgICAgICAgIHAgPSBwICsgeiAqIEguZ2V0KGksIGsgKyAyKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSwgayArIDIsIEguZ2V0KGksIGsgKyAyKSAtIHAgKiByKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgSC5zZXQoaSwgaywgSC5nZXQoaSwgaykgLSBwKTtcbiAgICAgICAgICAgIEguc2V0KGksIGsgKyAxLCBILmdldChpLCBrICsgMSkgLSBwICogcSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgICAgICAgcCA9IHggKiBWLmdldChpLCBrKSArIHkgKiBWLmdldChpLCBrICsgMSk7XG4gICAgICAgICAgICBpZiAobm90bGFzdCkge1xuICAgICAgICAgICAgICBwID0gcCArIHogKiBWLmdldChpLCBrICsgMik7XG4gICAgICAgICAgICAgIFYuc2V0KGksIGsgKyAyLCBWLmdldChpLCBrICsgMikgLSBwICogcik7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIFYuc2V0KGksIGssIFYuZ2V0KGksIGspIC0gcCk7XG4gICAgICAgICAgICBWLnNldChpLCBrICsgMSwgVi5nZXQoaSwgayArIDEpIC0gcCAqIHEpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChub3JtID09PSAwKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgZm9yIChuID0gbm4gLSAxOyBuID49IDA7IG4tLSkge1xuICAgIHAgPSBkW25dO1xuICAgIHEgPSBlW25dO1xuXG4gICAgaWYgKHEgPT09IDApIHtcbiAgICAgIGwgPSBuO1xuICAgICAgSC5zZXQobiwgbiwgMSk7XG4gICAgICBmb3IgKGkgPSBuIC0gMTsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgdyA9IEguZ2V0KGksIGkpIC0gcDtcbiAgICAgICAgciA9IDA7XG4gICAgICAgIGZvciAoaiA9IGw7IGogPD0gbjsgaisrKSB7XG4gICAgICAgICAgciA9IHIgKyBILmdldChpLCBqKSAqIEguZ2V0KGosIG4pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVbaV0gPCAwKSB7XG4gICAgICAgICAgeiA9IHc7XG4gICAgICAgICAgcyA9IHI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbCA9IGk7XG4gICAgICAgICAgaWYgKGVbaV0gPT09IDApIHtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIHcgIT09IDAgPyAtciAvIHcgOiAtciAvIChlcHMgKiBub3JtKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHggPSBILmdldChpLCBpICsgMSk7XG4gICAgICAgICAgICB5ID0gSC5nZXQoaSArIDEsIGkpO1xuICAgICAgICAgICAgcSA9IChkW2ldIC0gcCkgKiAoZFtpXSAtIHApICsgZVtpXSAqIGVbaV07XG4gICAgICAgICAgICB0ID0gKHggKiBzIC0geiAqIHIpIC8gcTtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIHQpO1xuICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgIGkgKyAxLFxuICAgICAgICAgICAgICBuLFxuICAgICAgICAgICAgICBNYXRoLmFicyh4KSA+IE1hdGguYWJzKHopID8gKC1yIC0gdyAqIHQpIC8geCA6ICgtcyAtIHkgKiB0KSAvIHosXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHQgPSBNYXRoLmFicyhILmdldChpLCBuKSk7XG4gICAgICAgICAgaWYgKGVwcyAqIHQgKiB0ID4gMSkge1xuICAgICAgICAgICAgZm9yIChqID0gaTsgaiA8PSBuOyBqKyspIHtcbiAgICAgICAgICAgICAgSC5zZXQoaiwgbiwgSC5nZXQoaiwgbikgLyB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHEgPCAwKSB7XG4gICAgICBsID0gbiAtIDE7XG5cbiAgICAgIGlmIChNYXRoLmFicyhILmdldChuLCBuIC0gMSkpID4gTWF0aC5hYnMoSC5nZXQobiAtIDEsIG4pKSkge1xuICAgICAgICBILnNldChuIC0gMSwgbiAtIDEsIHEgLyBILmdldChuLCBuIC0gMSkpO1xuICAgICAgICBILnNldChuIC0gMSwgbiwgLShILmdldChuLCBuKSAtIHApIC8gSC5nZXQobiwgbiAtIDEpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNkaXZyZXMgPSBjZGl2KDAsIC1ILmdldChuIC0gMSwgbiksIEguZ2V0KG4gLSAxLCBuIC0gMSkgLSBwLCBxKTtcbiAgICAgICAgSC5zZXQobiAtIDEsIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgSC5zZXQobiAtIDEsIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgfVxuXG4gICAgICBILnNldChuLCBuIC0gMSwgMCk7XG4gICAgICBILnNldChuLCBuLCAxKTtcbiAgICAgIGZvciAoaSA9IG4gLSAyOyBpID49IDA7IGktLSkge1xuICAgICAgICByYSA9IDA7XG4gICAgICAgIHNhID0gMDtcbiAgICAgICAgZm9yIChqID0gbDsgaiA8PSBuOyBqKyspIHtcbiAgICAgICAgICByYSA9IHJhICsgSC5nZXQoaSwgaikgKiBILmdldChqLCBuIC0gMSk7XG4gICAgICAgICAgc2EgPSBzYSArIEguZ2V0KGksIGopICogSC5nZXQoaiwgbik7XG4gICAgICAgIH1cblxuICAgICAgICB3ID0gSC5nZXQoaSwgaSkgLSBwO1xuXG4gICAgICAgIGlmIChlW2ldIDwgMCkge1xuICAgICAgICAgIHogPSB3O1xuICAgICAgICAgIHIgPSByYTtcbiAgICAgICAgICBzID0gc2E7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbCA9IGk7XG4gICAgICAgICAgaWYgKGVbaV0gPT09IDApIHtcbiAgICAgICAgICAgIGNkaXZyZXMgPSBjZGl2KC1yYSwgLXNhLCB3LCBxKTtcbiAgICAgICAgICAgIEguc2V0KGksIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgICAgIEguc2V0KGksIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB4ID0gSC5nZXQoaSwgaSArIDEpO1xuICAgICAgICAgICAgeSA9IEguZ2V0KGkgKyAxLCBpKTtcbiAgICAgICAgICAgIHZyID0gKGRbaV0gLSBwKSAqIChkW2ldIC0gcCkgKyBlW2ldICogZVtpXSAtIHEgKiBxO1xuICAgICAgICAgICAgdmkgPSAoZFtpXSAtIHApICogMiAqIHE7XG4gICAgICAgICAgICBpZiAodnIgPT09IDAgJiYgdmkgPT09IDApIHtcbiAgICAgICAgICAgICAgdnIgPVxuICAgICAgICAgICAgICAgIGVwcyAqXG4gICAgICAgICAgICAgICAgbm9ybSAqXG4gICAgICAgICAgICAgICAgKE1hdGguYWJzKHcpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHEpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHgpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHkpICtcbiAgICAgICAgICAgICAgICAgIE1hdGguYWJzKHopKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNkaXZyZXMgPSBjZGl2KFxuICAgICAgICAgICAgICB4ICogciAtIHogKiByYSArIHEgKiBzYSxcbiAgICAgICAgICAgICAgeCAqIHMgLSB6ICogc2EgLSBxICogcmEsXG4gICAgICAgICAgICAgIHZyLFxuICAgICAgICAgICAgICB2aSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBILnNldChpLCBuIC0gMSwgY2RpdnJlc1swXSk7XG4gICAgICAgICAgICBILnNldChpLCBuLCBjZGl2cmVzWzFdKTtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyh4KSA+IE1hdGguYWJzKHopICsgTWF0aC5hYnMocSkpIHtcbiAgICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgICAgaSArIDEsXG4gICAgICAgICAgICAgICAgbiAtIDEsXG4gICAgICAgICAgICAgICAgKC1yYSAtIHcgKiBILmdldChpLCBuIC0gMSkgKyBxICogSC5nZXQoaSwgbikpIC8geCxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSC5zZXQoXG4gICAgICAgICAgICAgICAgaSArIDEsXG4gICAgICAgICAgICAgICAgbixcbiAgICAgICAgICAgICAgICAoLXNhIC0gdyAqIEguZ2V0KGksIG4pIC0gcSAqIEguZ2V0KGksIG4gLSAxKSkgLyB4LFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgY2RpdnJlcyA9IGNkaXYoXG4gICAgICAgICAgICAgICAgLXIgLSB5ICogSC5nZXQoaSwgbiAtIDEpLFxuICAgICAgICAgICAgICAgIC1zIC0geSAqIEguZ2V0KGksIG4pLFxuICAgICAgICAgICAgICAgIHosXG4gICAgICAgICAgICAgICAgcSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSArIDEsIG4gLSAxLCBjZGl2cmVzWzBdKTtcbiAgICAgICAgICAgICAgSC5zZXQoaSArIDEsIG4sIGNkaXZyZXNbMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIHQgPSBNYXRoLm1heChNYXRoLmFicyhILmdldChpLCBuIC0gMSkpLCBNYXRoLmFicyhILmdldChpLCBuKSkpO1xuICAgICAgICAgIGlmIChlcHMgKiB0ICogdCA+IDEpIHtcbiAgICAgICAgICAgIGZvciAoaiA9IGk7IGogPD0gbjsgaisrKSB7XG4gICAgICAgICAgICAgIEguc2V0KGosIG4gLSAxLCBILmdldChqLCBuIC0gMSkgLyB0KTtcbiAgICAgICAgICAgICAgSC5zZXQoaiwgbiwgSC5nZXQoaiwgbikgLyB0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGkgPSAwOyBpIDwgbm47IGkrKykge1xuICAgIGlmIChpIDwgbG93IHx8IGkgPiBoaWdoKSB7XG4gICAgICBmb3IgKGogPSBpOyBqIDwgbm47IGorKykge1xuICAgICAgICBWLnNldChpLCBqLCBILmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChqID0gbm4gLSAxOyBqID49IGxvdzsgai0tKSB7XG4gICAgZm9yIChpID0gbG93OyBpIDw9IGhpZ2g7IGkrKykge1xuICAgICAgeiA9IDA7XG4gICAgICBmb3IgKGsgPSBsb3c7IGsgPD0gTWF0aC5taW4oaiwgaGlnaCk7IGsrKykge1xuICAgICAgICB6ID0geiArIFYuZ2V0KGksIGspICogSC5nZXQoaywgaik7XG4gICAgICB9XG4gICAgICBWLnNldChpLCBqLCB6KTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2Rpdih4ciwgeGksIHlyLCB5aSkge1xuICBsZXQgciwgZDtcbiAgaWYgKE1hdGguYWJzKHlyKSA+IE1hdGguYWJzKHlpKSkge1xuICAgIHIgPSB5aSAvIHlyO1xuICAgIGQgPSB5ciArIHIgKiB5aTtcbiAgICByZXR1cm4gWyh4ciArIHIgKiB4aSkgLyBkLCAoeGkgLSByICogeHIpIC8gZF07XG4gIH0gZWxzZSB7XG4gICAgciA9IHlyIC8geWk7XG4gICAgZCA9IHlpICsgciAqIHlyO1xuICAgIHJldHVybiBbKHIgKiB4ciArIHhpKSAvIGQsIChyICogeGkgLSB4cikgLyBkXTtcbiAgfVxufVxuIiwiaW1wb3J0IE1hdHJpeCBmcm9tICcuLi9tYXRyaXgnO1xuaW1wb3J0IFdyYXBwZXJNYXRyaXgyRCBmcm9tICcuLi93cmFwL1dyYXBwZXJNYXRyaXgyRCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENob2xlc2t5RGVjb21wb3NpdGlvbiB7XG4gIGNvbnN0cnVjdG9yKHZhbHVlKSB7XG4gICAgdmFsdWUgPSBXcmFwcGVyTWF0cml4MkQuY2hlY2tNYXRyaXgodmFsdWUpO1xuICAgIGlmICghdmFsdWUuaXNTeW1tZXRyaWMoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggaXMgbm90IHN5bW1ldHJpYycpO1xuICAgIH1cblxuICAgIGxldCBhID0gdmFsdWU7XG4gICAgbGV0IGRpbWVuc2lvbiA9IGEucm93cztcbiAgICBsZXQgbCA9IG5ldyBNYXRyaXgoZGltZW5zaW9uLCBkaW1lbnNpb24pO1xuICAgIGxldCBwb3NpdGl2ZURlZmluaXRlID0gdHJ1ZTtcbiAgICBsZXQgaSwgaiwgaztcblxuICAgIGZvciAoaiA9IDA7IGogPCBkaW1lbnNpb247IGorKykge1xuICAgICAgbGV0IGQgPSAwO1xuICAgICAgZm9yIChrID0gMDsgayA8IGo7IGsrKykge1xuICAgICAgICBsZXQgcyA9IDA7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBrOyBpKyspIHtcbiAgICAgICAgICBzICs9IGwuZ2V0KGssIGkpICogbC5nZXQoaiwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgcyA9IChhLmdldChqLCBrKSAtIHMpIC8gbC5nZXQoaywgayk7XG4gICAgICAgIGwuc2V0KGosIGssIHMpO1xuICAgICAgICBkID0gZCArIHMgKiBzO1xuICAgICAgfVxuXG4gICAgICBkID0gYS5nZXQoaiwgaikgLSBkO1xuXG4gICAgICBwb3NpdGl2ZURlZmluaXRlICY9IGQgPiAwO1xuICAgICAgbC5zZXQoaiwgaiwgTWF0aC5zcXJ0KE1hdGgubWF4KGQsIDApKSk7XG4gICAgICBmb3IgKGsgPSBqICsgMTsgayA8IGRpbWVuc2lvbjsgaysrKSB7XG4gICAgICAgIGwuc2V0KGosIGssIDApO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuTCA9IGw7XG4gICAgdGhpcy5wb3NpdGl2ZURlZmluaXRlID0gQm9vbGVhbihwb3NpdGl2ZURlZmluaXRlKTtcbiAgfVxuXG4gIGlzUG9zaXRpdmVEZWZpbml0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wb3NpdGl2ZURlZmluaXRlO1xuICB9XG5cbiAgc29sdmUodmFsdWUpIHtcbiAgICB2YWx1ZSA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeCh2YWx1ZSk7XG5cbiAgICBsZXQgbCA9IHRoaXMuTDtcbiAgICBsZXQgZGltZW5zaW9uID0gbC5yb3dzO1xuXG4gICAgaWYgKHZhbHVlLnJvd3MgIT09IGRpbWVuc2lvbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdNYXRyaXggZGltZW5zaW9ucyBkbyBub3QgbWF0Y2gnKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuaXNQb3NpdGl2ZURlZmluaXRlKCkgPT09IGZhbHNlKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hdHJpeCBpcyBub3QgcG9zaXRpdmUgZGVmaW5pdGUnKTtcbiAgICB9XG5cbiAgICBsZXQgY291bnQgPSB2YWx1ZS5jb2x1bW5zO1xuICAgIGxldCBCID0gdmFsdWUuY2xvbmUoKTtcbiAgICBsZXQgaSwgaiwgaztcblxuICAgIGZvciAoayA9IDA7IGsgPCBkaW1lbnNpb247IGsrKykge1xuICAgICAgZm9yIChqID0gMDsgaiA8IGNvdW50OyBqKyspIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGs7IGkrKykge1xuICAgICAgICAgIEIuc2V0KGssIGosIEIuZ2V0KGssIGopIC0gQi5nZXQoaSwgaikgKiBsLmdldChrLCBpKSk7XG4gICAgICAgIH1cbiAgICAgICAgQi5zZXQoaywgaiwgQi5nZXQoaywgaikgLyBsLmdldChrLCBrKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChrID0gZGltZW5zaW9uIC0gMTsgayA+PSAwOyBrLS0pIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCBjb3VudDsgaisrKSB7XG4gICAgICAgIGZvciAoaSA9IGsgKyAxOyBpIDwgZGltZW5zaW9uOyBpKyspIHtcbiAgICAgICAgICBCLnNldChrLCBqLCBCLmdldChrLCBqKSAtIEIuZ2V0KGksIGopICogbC5nZXQoaSwgaykpO1xuICAgICAgICB9XG4gICAgICAgIEIuc2V0KGssIGosIEIuZ2V0KGssIGopIC8gbC5nZXQoaywgaykpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBCO1xuICB9XG5cbiAgZ2V0IGxvd2VyVHJpYW5ndWxhck1hdHJpeCgpIHtcbiAgICByZXR1cm4gdGhpcy5MO1xuICB9XG59XG4iLCJpbXBvcnQgTWF0cml4IGZyb20gJy4uL21hdHJpeCc7XG5pbXBvcnQgV3JhcHBlck1hdHJpeDJEIGZyb20gJy4uL3dyYXAvV3JhcHBlck1hdHJpeDJEJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgbmlwYWxzIHtcbiAgY29uc3RydWN0b3IoWCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgWCA9IFdyYXBwZXJNYXRyaXgyRC5jaGVja01hdHJpeChYKTtcbiAgICBsZXQgeyBZIH0gPSBvcHRpb25zO1xuICAgIGNvbnN0IHtcbiAgICAgIHNjYWxlU2NvcmVzID0gZmFsc2UsXG4gICAgICBtYXhJdGVyYXRpb25zID0gMTAwMCxcbiAgICAgIHRlcm1pbmF0aW9uQ3JpdGVyaWEgPSAxZS0xMCxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGxldCB1O1xuICAgIGlmIChZKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShZKSAmJiB0eXBlb2YgWVswXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgWSA9IE1hdHJpeC5jb2x1bW5WZWN0b3IoWSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBZID0gV3JhcHBlck1hdHJpeDJELmNoZWNrTWF0cml4KFkpO1xuICAgICAgfVxuICAgICAgaWYgKFkucm93cyAhPT0gWC5yb3dzKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWSBzaG91bGQgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2Ygcm93cyBhcyBYJyk7XG4gICAgICB9XG4gICAgICB1ID0gWS5nZXRDb2x1bW5WZWN0b3IoMCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHUgPSBYLmdldENvbHVtblZlY3RvcigwKTtcbiAgICB9XG5cbiAgICBsZXQgZGlmZiA9IDE7XG4gICAgbGV0IHQsIHEsIHcsIHRPbGQ7XG5cbiAgICBmb3IgKFxuICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgY291bnRlciA8IG1heEl0ZXJhdGlvbnMgJiYgZGlmZiA+IHRlcm1pbmF0aW9uQ3JpdGVyaWE7XG4gICAgICBjb3VudGVyKytcbiAgICApIHtcbiAgICAgIHcgPSBYLnRyYW5zcG9zZSgpLm1tdWwodSkuZGl2KHUudHJhbnNwb3NlKCkubW11bCh1KS5nZXQoMCwgMCkpO1xuICAgICAgdyA9IHcuZGl2KHcubm9ybSgpKTtcblxuICAgICAgdCA9IFgubW11bCh3KS5kaXYody50cmFuc3Bvc2UoKS5tbXVsKHcpLmdldCgwLCAwKSk7XG5cbiAgICAgIGlmIChjb3VudGVyID4gMCkge1xuICAgICAgICBkaWZmID0gdC5jbG9uZSgpLnN1Yih0T2xkKS5wb3coMikuc3VtKCk7XG4gICAgICB9XG4gICAgICB0T2xkID0gdC5jbG9uZSgpO1xuXG4gICAgICBpZiAoWSkge1xuICAgICAgICBxID0gWS50cmFuc3Bvc2UoKS5tbXVsKHQpLmRpdih0LnRyYW5zcG9zZSgpLm1tdWwodCkuZ2V0KDAsIDApKTtcbiAgICAgICAgcSA9IHEuZGl2KHEubm9ybSgpKTtcblxuICAgICAgICB1ID0gWS5tbXVsKHEpLmRpdihxLnRyYW5zcG9zZSgpLm1tdWwocSkuZ2V0KDAsIDApKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHUgPSB0O1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChZKSB7XG4gICAgICBsZXQgcCA9IFgudHJhbnNwb3NlKCkubW11bCh0KS5kaXYodC50cmFuc3Bvc2UoKS5tbXVsKHQpLmdldCgwLCAwKSk7XG4gICAgICBwID0gcC5kaXYocC5ub3JtKCkpO1xuICAgICAgbGV0IHhSZXNpZHVhbCA9IFguY2xvbmUoKS5zdWIodC5jbG9uZSgpLm1tdWwocC50cmFuc3Bvc2UoKSkpO1xuICAgICAgbGV0IHJlc2lkdWFsID0gdS50cmFuc3Bvc2UoKS5tbXVsKHQpLmRpdih0LnRyYW5zcG9zZSgpLm1tdWwodCkuZ2V0KDAsIDApKTtcbiAgICAgIGxldCB5UmVzaWR1YWwgPSBZLmNsb25lKCkuc3ViKFxuICAgICAgICB0LmNsb25lKCkubXVsUyhyZXNpZHVhbC5nZXQoMCwgMCkpLm1tdWwocS50cmFuc3Bvc2UoKSksXG4gICAgICApO1xuXG4gICAgICB0aGlzLnQgPSB0O1xuICAgICAgdGhpcy5wID0gcC50cmFuc3Bvc2UoKTtcbiAgICAgIHRoaXMudyA9IHcudHJhbnNwb3NlKCk7XG4gICAgICB0aGlzLnEgPSBxO1xuICAgICAgdGhpcy51ID0gdTtcbiAgICAgIHRoaXMucyA9IHQudHJhbnNwb3NlKCkubW11bCh0KTtcbiAgICAgIHRoaXMueFJlc2lkdWFsID0geFJlc2lkdWFsO1xuICAgICAgdGhpcy55UmVzaWR1YWwgPSB5UmVzaWR1YWw7XG4gICAgICB0aGlzLmJldGFzID0gcmVzaWR1YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMudyA9IHcudHJhbnNwb3NlKCk7XG4gICAgICB0aGlzLnMgPSB0LnRyYW5zcG9zZSgpLm1tdWwodCkuc3FydCgpO1xuICAgICAgaWYgKHNjYWxlU2NvcmVzKSB7XG4gICAgICAgIHRoaXMudCA9IHQuY2xvbmUoKS5kaXYodGhpcy5zLmdldCgwLCAwKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLnQgPSB0O1xuICAgICAgfVxuICAgICAgdGhpcy54UmVzaWR1YWwgPSBYLnN1Yih0Lm1tdWwody50cmFuc3Bvc2UoKSkpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnaXMtYW55LWFycmF5JztcblxuZnVuY3Rpb24gbWF4KGlucHV0KSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXQgbXVzdCBiZSBhbiBhcnJheScpO1xuICB9XG5cbiAgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cblxuICB2YXIgX29wdGlvbnMkZnJvbUluZGV4ID0gb3B0aW9ucy5mcm9tSW5kZXgsXG4gICAgICBmcm9tSW5kZXggPSBfb3B0aW9ucyRmcm9tSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfb3B0aW9ucyRmcm9tSW5kZXgsXG4gICAgICBfb3B0aW9ucyR0b0luZGV4ID0gb3B0aW9ucy50b0luZGV4LFxuICAgICAgdG9JbmRleCA9IF9vcHRpb25zJHRvSW5kZXggPT09IHZvaWQgMCA/IGlucHV0Lmxlbmd0aCA6IF9vcHRpb25zJHRvSW5kZXg7XG5cbiAgaWYgKGZyb21JbmRleCA8IDAgfHwgZnJvbUluZGV4ID49IGlucHV0Lmxlbmd0aCB8fCAhTnVtYmVyLmlzSW50ZWdlcihmcm9tSW5kZXgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdmcm9tSW5kZXggbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIgc21hbGxlciB0aGFuIGxlbmd0aCcpO1xuICB9XG5cbiAgaWYgKHRvSW5kZXggPD0gZnJvbUluZGV4IHx8IHRvSW5kZXggPiBpbnB1dC5sZW5ndGggfHwgIU51bWJlci5pc0ludGVnZXIodG9JbmRleCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3RvSW5kZXggbXVzdCBiZSBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBmcm9tSW5kZXggYW5kIGF0IG1vc3QgZXF1YWwgdG8gbGVuZ3RoJyk7XG4gIH1cblxuICB2YXIgbWF4VmFsdWUgPSBpbnB1dFtmcm9tSW5kZXhdO1xuXG4gIGZvciAodmFyIGkgPSBmcm9tSW5kZXggKyAxOyBpIDwgdG9JbmRleDsgaSsrKSB7XG4gICAgaWYgKGlucHV0W2ldID4gbWF4VmFsdWUpIG1heFZhbHVlID0gaW5wdXRbaV07XG4gIH1cblxuICByZXR1cm4gbWF4VmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1heDtcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJ2lzLWFueS1hcnJheSc7XG5cbmZ1bmN0aW9uIG1pbihpbnB1dCkge1xuICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgaWYgKCFpc0FycmF5KGlucHV0KSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3QgYmUgYW4gYXJyYXknKTtcbiAgfVxuXG4gIGlmIChpbnB1dC5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdpbnB1dCBtdXN0IG5vdCBiZSBlbXB0eScpO1xuICB9XG5cbiAgdmFyIF9vcHRpb25zJGZyb21JbmRleCA9IG9wdGlvbnMuZnJvbUluZGV4LFxuICAgICAgZnJvbUluZGV4ID0gX29wdGlvbnMkZnJvbUluZGV4ID09PSB2b2lkIDAgPyAwIDogX29wdGlvbnMkZnJvbUluZGV4LFxuICAgICAgX29wdGlvbnMkdG9JbmRleCA9IG9wdGlvbnMudG9JbmRleCxcbiAgICAgIHRvSW5kZXggPSBfb3B0aW9ucyR0b0luZGV4ID09PSB2b2lkIDAgPyBpbnB1dC5sZW5ndGggOiBfb3B0aW9ucyR0b0luZGV4O1xuXG4gIGlmIChmcm9tSW5kZXggPCAwIHx8IGZyb21JbmRleCA+PSBpbnB1dC5sZW5ndGggfHwgIU51bWJlci5pc0ludGVnZXIoZnJvbUluZGV4KSkge1xuICAgIHRocm93IG5ldyBFcnJvcignZnJvbUluZGV4IG11c3QgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyIHNtYWxsZXIgdGhhbiBsZW5ndGgnKTtcbiAgfVxuXG4gIGlmICh0b0luZGV4IDw9IGZyb21JbmRleCB8fCB0b0luZGV4ID4gaW5wdXQubGVuZ3RoIHx8ICFOdW1iZXIuaXNJbnRlZ2VyKHRvSW5kZXgpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd0b0luZGV4IG11c3QgYmUgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gZnJvbUluZGV4IGFuZCBhdCBtb3N0IGVxdWFsIHRvIGxlbmd0aCcpO1xuICB9XG5cbiAgdmFyIG1pblZhbHVlID0gaW5wdXRbZnJvbUluZGV4XTtcblxuICBmb3IgKHZhciBpID0gZnJvbUluZGV4ICsgMTsgaSA8IHRvSW5kZXg7IGkrKykge1xuICAgIGlmIChpbnB1dFtpXSA8IG1pblZhbHVlKSBtaW5WYWx1ZSA9IGlucHV0W2ldO1xuICB9XG5cbiAgcmV0dXJuIG1pblZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtaW47XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICdpcy1hbnktYXJyYXknO1xuaW1wb3J0IG1heCBmcm9tICdtbC1hcnJheS1tYXgnO1xuaW1wb3J0IG1pbiBmcm9tICdtbC1hcnJheS1taW4nO1xuXG5mdW5jdGlvbiByZXNjYWxlKGlucHV0KSB7XG4gIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcblxuICBpZiAoIWlzQXJyYXkoaW5wdXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW5wdXQgbXVzdCBiZSBhbiBhcnJheScpO1xuICB9IGVsc2UgaWYgKGlucHV0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2lucHV0IG11c3Qgbm90IGJlIGVtcHR5Jyk7XG4gIH1cblxuICB2YXIgb3V0cHV0O1xuXG4gIGlmIChvcHRpb25zLm91dHB1dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKCFpc0FycmF5KG9wdGlvbnMub3V0cHV0KSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3V0cHV0IG9wdGlvbiBtdXN0IGJlIGFuIGFycmF5IGlmIHNwZWNpZmllZCcpO1xuICAgIH1cblxuICAgIG91dHB1dCA9IG9wdGlvbnMub3V0cHV0O1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IG5ldyBBcnJheShpbnB1dC5sZW5ndGgpO1xuICB9XG5cbiAgdmFyIGN1cnJlbnRNaW4gPSBtaW4oaW5wdXQpO1xuICB2YXIgY3VycmVudE1heCA9IG1heChpbnB1dCk7XG5cbiAgaWYgKGN1cnJlbnRNaW4gPT09IGN1cnJlbnRNYXgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbWluaW11bSBhbmQgbWF4aW11bSBpbnB1dCB2YWx1ZXMgYXJlIGVxdWFsLiBDYW5ub3QgcmVzY2FsZSBhIGNvbnN0YW50IGFycmF5Jyk7XG4gIH1cblxuICB2YXIgX29wdGlvbnMkbWluID0gb3B0aW9ucy5taW4sXG4gICAgICBtaW5WYWx1ZSA9IF9vcHRpb25zJG1pbiA9PT0gdm9pZCAwID8gb3B0aW9ucy5hdXRvTWluTWF4ID8gY3VycmVudE1pbiA6IDAgOiBfb3B0aW9ucyRtaW4sXG4gICAgICBfb3B0aW9ucyRtYXggPSBvcHRpb25zLm1heCxcbiAgICAgIG1heFZhbHVlID0gX29wdGlvbnMkbWF4ID09PSB2b2lkIDAgPyBvcHRpb25zLmF1dG9NaW5NYXggPyBjdXJyZW50TWF4IDogMSA6IF9vcHRpb25zJG1heDtcblxuICBpZiAobWluVmFsdWUgPj0gbWF4VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbWluIG9wdGlvbiBtdXN0IGJlIHNtYWxsZXIgdGhhbiBtYXggb3B0aW9uJyk7XG4gIH1cblxuICB2YXIgZmFjdG9yID0gKG1heFZhbHVlIC0gbWluVmFsdWUpIC8gKGN1cnJlbnRNYXggLSBjdXJyZW50TWluKTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0cHV0W2ldID0gKGlucHV0W2ldIC0gY3VycmVudE1pbikgKiBmYWN0b3IgKyBtaW5WYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBvdXRwdXQ7XG59XG5cbmV4cG9ydCB7IHJlc2NhbGUgYXMgZGVmYXVsdCB9O1xuIiwiY29uc3QgaW5kZW50ID0gJyAnLnJlcGVhdCgyKTtcbmNvbnN0IGluZGVudERhdGEgPSAnICcucmVwZWF0KDQpO1xuXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdE1hdHJpeCgpIHtcbiAgcmV0dXJuIGluc3BlY3RNYXRyaXhXaXRoT3B0aW9ucyh0aGlzKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGluc3BlY3RNYXRyaXhXaXRoT3B0aW9ucyhtYXRyaXgsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IG1heFJvd3MgPSAxNSwgbWF4Q29sdW1ucyA9IDEwLCBtYXhOdW1TaXplID0gOCB9ID0gb3B0aW9ucztcbiAgcmV0dXJuIGAke21hdHJpeC5jb25zdHJ1Y3Rvci5uYW1lfSB7XG4ke2luZGVudH1bXG4ke2luZGVudERhdGF9JHtpbnNwZWN0RGF0YShtYXRyaXgsIG1heFJvd3MsIG1heENvbHVtbnMsIG1heE51bVNpemUpfVxuJHtpbmRlbnR9XVxuJHtpbmRlbnR9cm93czogJHttYXRyaXgucm93c31cbiR7aW5kZW50fWNvbHVtbnM6ICR7bWF0cml4LmNvbHVtbnN9XG59YDtcbn1cblxuZnVuY3Rpb24gaW5zcGVjdERhdGEobWF0cml4LCBtYXhSb3dzLCBtYXhDb2x1bW5zLCBtYXhOdW1TaXplKSB7XG4gIGNvbnN0IHsgcm93cywgY29sdW1ucyB9ID0gbWF0cml4O1xuICBjb25zdCBtYXhJID0gTWF0aC5taW4ocm93cywgbWF4Um93cyk7XG4gIGNvbnN0IG1heEogPSBNYXRoLm1pbihjb2x1bW5zLCBtYXhDb2x1bW5zKTtcbiAgY29uc3QgcmVzdWx0ID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF4STsgaSsrKSB7XG4gICAgbGV0IGxpbmUgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1heEo7IGorKykge1xuICAgICAgbGluZS5wdXNoKGZvcm1hdE51bWJlcihtYXRyaXguZ2V0KGksIGopLCBtYXhOdW1TaXplKSk7XG4gICAgfVxuICAgIHJlc3VsdC5wdXNoKGAke2xpbmUuam9pbignICcpfWApO1xuICB9XG4gIGlmIChtYXhKICE9PSBjb2x1bW5zKSB7XG4gICAgcmVzdWx0W3Jlc3VsdC5sZW5ndGggLSAxXSArPSBgIC4uLiAke2NvbHVtbnMgLSBtYXhDb2x1bW5zfSBtb3JlIGNvbHVtbnNgO1xuICB9XG4gIGlmIChtYXhJICE9PSByb3dzKSB7XG4gICAgcmVzdWx0LnB1c2goYC4uLiAke3Jvd3MgLSBtYXhSb3dzfSBtb3JlIHJvd3NgKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0LmpvaW4oYFxcbiR7aW5kZW50RGF0YX1gKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0TnVtYmVyKG51bSwgbWF4TnVtU2l6ZSkge1xuICBjb25zdCBudW1TdHIgPSBTdHJpbmcobnVtKTtcbiAgaWYgKG51bVN0ci5sZW5ndGggPD0gbWF4TnVtU2l6ZSkge1xuICAgIHJldHVybiBudW1TdHIucGFkRW5kKG1heE51bVNpemUsICcgJyk7XG4gIH1cbiAgY29uc3QgcHJlY2lzZSA9IG51bS50b1ByZWNpc2lvbihtYXhOdW1TaXplIC0gMik7XG4gIGlmIChwcmVjaXNlLmxlbmd0aCA8PSBtYXhOdW1TaXplKSB7XG4gICAgcmV0dXJuIHByZWNpc2U7XG4gIH1cbiAgY29uc3QgZXhwb25lbnRpYWwgPSBudW0udG9FeHBvbmVudGlhbChtYXhOdW1TaXplIC0gMik7XG4gIGNvbnN0IGVJbmRleCA9IGV4cG9uZW50aWFsLmluZGV4T2YoJ2UnKTtcbiAgY29uc3QgZSA9IGV4cG9uZW50aWFsLnNsaWNlKGVJbmRleCk7XG4gIHJldHVybiBleHBvbmVudGlhbC5zbGljZSgwLCBtYXhOdW1TaXplIC0gZS5sZW5ndGgpICsgZTtcbn1cbiIsImltcG9ydCByZXNjYWxlIGZyb20gJ21sLWFycmF5LXJlc2NhbGUnO1xuXG5pbXBvcnQgeyBpbnNwZWN0TWF0cml4LCBpbnNwZWN0TWF0cml4V2l0aE9wdGlvbnMgfSBmcm9tICcuL2luc3BlY3QnO1xuaW1wb3J0IHsgaW5zdGFsbE1hdGhPcGVyYXRpb25zIH0gZnJvbSAnLi9tYXRoT3BlcmF0aW9ucyc7XG5pbXBvcnQge1xuICBzdW1CeVJvdyxcbiAgc3VtQnlDb2x1bW4sXG4gIHN1bUFsbCxcbiAgcHJvZHVjdEJ5Um93LFxuICBwcm9kdWN0QnlDb2x1bW4sXG4gIHByb2R1Y3RBbGwsXG4gIHZhcmlhbmNlQnlSb3csXG4gIHZhcmlhbmNlQnlDb2x1bW4sXG4gIHZhcmlhbmNlQWxsLFxuICBjZW50ZXJCeVJvdyxcbiAgY2VudGVyQnlDb2x1bW4sXG4gIGNlbnRlckFsbCxcbiAgc2NhbGVCeVJvdyxcbiAgc2NhbGVCeUNvbHVtbixcbiAgc2NhbGVBbGwsXG4gIGdldFNjYWxlQnlSb3csXG4gIGdldFNjYWxlQnlDb2x1bW4sXG4gIGdldFNjYWxlQWxsLFxufSBmcm9tICcuL3N0YXQnO1xuaW1wb3J0IHtcbiAgY2hlY2tSb3dWZWN0b3IsXG4gIGNoZWNrUm93SW5kZXgsXG4gIGNoZWNrQ29sdW1uSW5kZXgsXG4gIGNoZWNrQ29sdW1uVmVjdG9yLFxuICBjaGVja1JhbmdlLFxuICBjaGVja0luZGljZXMsXG4gIGNoZWNrTm9uRW1wdHksXG59IGZyb20gJy4vdXRpbCc7XG5cbmV4cG9ydCBjbGFzcyBBYnN0cmFjdE1hdHJpeCB7XG4gIHN0YXRpYyBmcm9tMURBcnJheShuZXdSb3dzLCBuZXdDb2x1bW5zLCBuZXdEYXRhKSB7XG4gICAgbGV0IGxlbmd0aCA9IG5ld1Jvd3MgKiBuZXdDb2x1bW5zO1xuICAgIGlmIChsZW5ndGggIT09IG5ld0RhdGEubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZGF0YSBsZW5ndGggZG9lcyBub3QgbWF0Y2ggZ2l2ZW4gZGltZW5zaW9ucycpO1xuICAgIH1cbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChuZXdSb3dzLCBuZXdDb2x1bW5zKTtcbiAgICBmb3IgKGxldCByb3cgPSAwOyByb3cgPCBuZXdSb3dzOyByb3crKykge1xuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgbmV3Q29sdW1uczsgY29sdW1uKyspIHtcbiAgICAgICAgbmV3TWF0cml4LnNldChyb3csIGNvbHVtbiwgbmV3RGF0YVtyb3cgKiBuZXdDb2x1bW5zICsgY29sdW1uXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICBzdGF0aWMgcm93VmVjdG9yKG5ld0RhdGEpIHtcbiAgICBsZXQgdmVjdG9yID0gbmV3IE1hdHJpeCgxLCBuZXdEYXRhLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2ZWN0b3Iuc2V0KDAsIGksIG5ld0RhdGFbaV0pO1xuICAgIH1cbiAgICByZXR1cm4gdmVjdG9yO1xuICB9XG5cbiAgc3RhdGljIGNvbHVtblZlY3RvcihuZXdEYXRhKSB7XG4gICAgbGV0IHZlY3RvciA9IG5ldyBNYXRyaXgobmV3RGF0YS5sZW5ndGgsIDEpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgdmVjdG9yLnNldChpLCAwLCBuZXdEYXRhW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHZlY3RvcjtcbiAgfVxuXG4gIHN0YXRpYyB6ZXJvcyhyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgocm93cywgY29sdW1ucyk7XG4gIH1cblxuICBzdGF0aWMgb25lcyhyb3dzLCBjb2x1bW5zKSB7XG4gICAgcmV0dXJuIG5ldyBNYXRyaXgocm93cywgY29sdW1ucykuZmlsbCgxKTtcbiAgfVxuXG4gIHN0YXRpYyByYW5kKHJvd3MsIGNvbHVtbnMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyByYW5kb20gPSBNYXRoLnJhbmRvbSB9ID0gb3B0aW9ucztcbiAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgbWF0cml4LnNldChpLCBqLCByYW5kb20oKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG4gIH1cblxuICBzdGF0aWMgcmFuZEludChyb3dzLCBjb2x1bW5zLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgbWluID0gMCwgbWF4ID0gMTAwMCwgcmFuZG9tID0gTWF0aC5yYW5kb20gfSA9IG9wdGlvbnM7XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKG1pbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pbiBtdXN0IGJlIGFuIGludGVnZXInKTtcbiAgICBpZiAoIU51bWJlci5pc0ludGVnZXIobWF4KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYW4gaW50ZWdlcicpO1xuICAgIGlmIChtaW4gPj0gbWF4KSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbWluIG11c3QgYmUgc21hbGxlciB0aGFuIG1heCcpO1xuICAgIGxldCBpbnRlcnZhbCA9IG1heCAtIG1pbjtcbiAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeChyb3dzLCBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgbGV0IHZhbHVlID0gbWluICsgTWF0aC5yb3VuZChyYW5kb20oKSAqIGludGVydmFsKTtcbiAgICAgICAgbWF0cml4LnNldChpLCBqLCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG4gIH1cblxuICBzdGF0aWMgZXllKHJvd3MsIGNvbHVtbnMsIHZhbHVlKSB7XG4gICAgaWYgKGNvbHVtbnMgPT09IHVuZGVmaW5lZCkgY29sdW1ucyA9IHJvd3M7XG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHZhbHVlID0gMTtcbiAgICBsZXQgbWluID0gTWF0aC5taW4ocm93cywgY29sdW1ucyk7XG4gICAgbGV0IG1hdHJpeCA9IHRoaXMuemVyb3Mocm93cywgY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xuICAgICAgbWF0cml4LnNldChpLCBpLCB2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiBtYXRyaXg7XG4gIH1cblxuICBzdGF0aWMgZGlhZyhkYXRhLCByb3dzLCBjb2x1bW5zKSB7XG4gICAgbGV0IGwgPSBkYXRhLmxlbmd0aDtcbiAgICBpZiAocm93cyA9PT0gdW5kZWZpbmVkKSByb3dzID0gbDtcbiAgICBpZiAoY29sdW1ucyA9PT0gdW5kZWZpbmVkKSBjb2x1bW5zID0gcm93cztcbiAgICBsZXQgbWluID0gTWF0aC5taW4obCwgcm93cywgY29sdW1ucyk7XG4gICAgbGV0IG1hdHJpeCA9IHRoaXMuemVyb3Mocm93cywgY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtaW47IGkrKykge1xuICAgICAgbWF0cml4LnNldChpLCBpLCBkYXRhW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuXG4gIHN0YXRpYyBtaW4obWF0cml4MSwgbWF0cml4Mikge1xuICAgIG1hdHJpeDEgPSB0aGlzLmNoZWNrTWF0cml4KG1hdHJpeDEpO1xuICAgIG1hdHJpeDIgPSB0aGlzLmNoZWNrTWF0cml4KG1hdHJpeDIpO1xuICAgIGxldCByb3dzID0gbWF0cml4MS5yb3dzO1xuICAgIGxldCBjb2x1bW5zID0gbWF0cml4MS5jb2x1bW5zO1xuICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4KHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICByZXN1bHQuc2V0KGksIGosIE1hdGgubWluKG1hdHJpeDEuZ2V0KGksIGopLCBtYXRyaXgyLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3RhdGljIG1heChtYXRyaXgxLCBtYXRyaXgyKSB7XG4gICAgbWF0cml4MSA9IHRoaXMuY2hlY2tNYXRyaXgobWF0cml4MSk7XG4gICAgbWF0cml4MiA9IHRoaXMuY2hlY2tNYXRyaXgobWF0cml4Mik7XG4gICAgbGV0IHJvd3MgPSBtYXRyaXgxLnJvd3M7XG4gICAgbGV0IGNvbHVtbnMgPSBtYXRyaXgxLmNvbHVtbnM7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyB0aGlzKHJvd3MsIGNvbHVtbnMpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNvbHVtbnM7IGorKykge1xuICAgICAgICByZXN1bHQuc2V0KGksIGosIE1hdGgubWF4KG1hdHJpeDEuZ2V0KGksIGopLCBtYXRyaXgyLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3RhdGljIGNoZWNrTWF0cml4KHZhbHVlKSB7XG4gICAgcmV0dXJuIEFic3RyYWN0TWF0cml4LmlzTWF0cml4KHZhbHVlKSA/IHZhbHVlIDogbmV3IE1hdHJpeCh2YWx1ZSk7XG4gIH1cblxuICBzdGF0aWMgaXNNYXRyaXgodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS5rbGFzcyA9PT0gJ01hdHJpeCc7XG4gIH1cblxuICBnZXQgc2l6ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzICogdGhpcy5jb2x1bW5zO1xuICB9XG5cbiAgYXBwbHkoY2FsbGJhY2spIHtcbiAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBjYWxsYmFjay5jYWxsKHRoaXMsIGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIHRvMURBcnJheSgpIHtcbiAgICBsZXQgYXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIGFycmF5LnB1c2godGhpcy5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXk7XG4gIH1cblxuICB0bzJEQXJyYXkoKSB7XG4gICAgbGV0IGNvcHkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBjb3B5LnB1c2goW10pO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBjb3B5W2ldLnB1c2godGhpcy5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29weTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4gdGhpcy50bzJEQXJyYXkoKTtcbiAgfVxuXG4gIGlzUm93VmVjdG9yKCkge1xuICAgIHJldHVybiB0aGlzLnJvd3MgPT09IDE7XG4gIH1cblxuICBpc0NvbHVtblZlY3RvcigpIHtcbiAgICByZXR1cm4gdGhpcy5jb2x1bW5zID09PSAxO1xuICB9XG5cbiAgaXNWZWN0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucm93cyA9PT0gMSB8fCB0aGlzLmNvbHVtbnMgPT09IDE7XG4gIH1cblxuICBpc1NxdWFyZSgpIHtcbiAgICByZXR1cm4gdGhpcy5yb3dzID09PSB0aGlzLmNvbHVtbnM7XG4gIH1cblxuICBpc0VtcHR5KCkge1xuICAgIHJldHVybiB0aGlzLnJvd3MgPT09IDAgfHwgdGhpcy5jb2x1bW5zID09PSAwO1xuICB9XG5cbiAgaXNTeW1tZXRyaWMoKSB7XG4gICAgaWYgKHRoaXMuaXNTcXVhcmUoKSkge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBpOyBqKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5nZXQoaSwgaikgIT09IHRoaXMuZ2V0KGosIGkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgaXNFY2hlbG9uRm9ybSgpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGogPSAwO1xuICAgIGxldCBwcmV2aW91c0NvbHVtbiA9IC0xO1xuICAgIGxldCBpc0VjaGVsb25Gb3JtID0gdHJ1ZTtcbiAgICBsZXQgY2hlY2tlZCA9IGZhbHNlO1xuICAgIHdoaWxlIChpIDwgdGhpcy5yb3dzICYmIGlzRWNoZWxvbkZvcm0pIHtcbiAgICAgIGogPSAwO1xuICAgICAgY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgd2hpbGUgKGogPCB0aGlzLmNvbHVtbnMgJiYgY2hlY2tlZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopID09PSAwKSB7XG4gICAgICAgICAgaisrO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuZ2V0KGksIGopID09PSAxICYmIGogPiBwcmV2aW91c0NvbHVtbikge1xuICAgICAgICAgIGNoZWNrZWQgPSB0cnVlO1xuICAgICAgICAgIHByZXZpb3VzQ29sdW1uID0gajtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpc0VjaGVsb25Gb3JtID0gZmFsc2U7XG4gICAgICAgICAgY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGlzRWNoZWxvbkZvcm07XG4gIH1cblxuICBpc1JlZHVjZWRFY2hlbG9uRm9ybSgpIHtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGogPSAwO1xuICAgIGxldCBwcmV2aW91c0NvbHVtbiA9IC0xO1xuICAgIGxldCBpc1JlZHVjZWRFY2hlbG9uRm9ybSA9IHRydWU7XG4gICAgbGV0IGNoZWNrZWQgPSBmYWxzZTtcbiAgICB3aGlsZSAoaSA8IHRoaXMucm93cyAmJiBpc1JlZHVjZWRFY2hlbG9uRm9ybSkge1xuICAgICAgaiA9IDA7XG4gICAgICBjaGVja2VkID0gZmFsc2U7XG4gICAgICB3aGlsZSAoaiA8IHRoaXMuY29sdW1ucyAmJiBjaGVja2VkID09PSBmYWxzZSkge1xuICAgICAgICBpZiAodGhpcy5nZXQoaSwgaikgPT09IDApIHtcbiAgICAgICAgICBqKys7XG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5nZXQoaSwgaikgPT09IDEgJiYgaiA+IHByZXZpb3VzQ29sdW1uKSB7XG4gICAgICAgICAgY2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgcHJldmlvdXNDb2x1bW4gPSBqO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlzUmVkdWNlZEVjaGVsb25Gb3JtID0gZmFsc2U7XG4gICAgICAgICAgY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGZvciAobGV0IGsgPSBqICsgMTsgayA8IHRoaXMucm93czsgaysrKSB7XG4gICAgICAgIGlmICh0aGlzLmdldChpLCBrKSAhPT0gMCkge1xuICAgICAgICAgIGlzUmVkdWNlZEVjaGVsb25Gb3JtID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgcmV0dXJuIGlzUmVkdWNlZEVjaGVsb25Gb3JtO1xuICB9XG5cbiAgZWNoZWxvbkZvcm0oKSB7XG4gICAgbGV0IHJlc3VsdCA9IHRoaXMuY2xvbmUoKTtcbiAgICBsZXQgaCA9IDA7XG4gICAgbGV0IGsgPSAwO1xuICAgIHdoaWxlIChoIDwgcmVzdWx0LnJvd3MgJiYgayA8IHJlc3VsdC5jb2x1bW5zKSB7XG4gICAgICBsZXQgaU1heCA9IGg7XG4gICAgICBmb3IgKGxldCBpID0gaDsgaSA8IHJlc3VsdC5yb3dzOyBpKyspIHtcbiAgICAgICAgaWYgKHJlc3VsdC5nZXQoaSwgaykgPiByZXN1bHQuZ2V0KGlNYXgsIGspKSB7XG4gICAgICAgICAgaU1heCA9IGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuZ2V0KGlNYXgsIGspID09PSAwKSB7XG4gICAgICAgIGsrKztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlc3VsdC5zd2FwUm93cyhoLCBpTWF4KTtcbiAgICAgICAgbGV0IHRtcCA9IHJlc3VsdC5nZXQoaCwgayk7XG4gICAgICAgIGZvciAobGV0IGogPSBrOyBqIDwgcmVzdWx0LmNvbHVtbnM7IGorKykge1xuICAgICAgICAgIHJlc3VsdC5zZXQoaCwgaiwgcmVzdWx0LmdldChoLCBqKSAvIHRtcCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChsZXQgaSA9IGggKyAxOyBpIDwgcmVzdWx0LnJvd3M7IGkrKykge1xuICAgICAgICAgIGxldCBmYWN0b3IgPSByZXN1bHQuZ2V0KGksIGspIC8gcmVzdWx0LmdldChoLCBrKTtcbiAgICAgICAgICByZXN1bHQuc2V0KGksIGssIDApO1xuICAgICAgICAgIGZvciAobGV0IGogPSBrICsgMTsgaiA8IHJlc3VsdC5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoaSwgaiwgcmVzdWx0LmdldChpLCBqKSAtIHJlc3VsdC5nZXQoaCwgaikgKiBmYWN0b3IpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBoKys7XG4gICAgICAgIGsrKztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHJlZHVjZWRFY2hlbG9uRm9ybSgpIHtcbiAgICBsZXQgcmVzdWx0ID0gdGhpcy5lY2hlbG9uRm9ybSgpO1xuICAgIGxldCBtID0gcmVzdWx0LmNvbHVtbnM7XG4gICAgbGV0IG4gPSByZXN1bHQucm93cztcbiAgICBsZXQgaCA9IG4gLSAxO1xuICAgIHdoaWxlIChoID49IDApIHtcbiAgICAgIGlmIChyZXN1bHQubWF4Um93KGgpID09PSAwKSB7XG4gICAgICAgIGgtLTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBwID0gMDtcbiAgICAgICAgbGV0IHBpdm90ID0gZmFsc2U7XG4gICAgICAgIHdoaWxlIChwIDwgbiAmJiBwaXZvdCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICBpZiAocmVzdWx0LmdldChoLCBwKSA9PT0gMSkge1xuICAgICAgICAgICAgcGl2b3QgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBwKys7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGZhY3RvciA9IHJlc3VsdC5nZXQoaSwgcCk7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IHA7IGogPCBtOyBqKyspIHtcbiAgICAgICAgICAgIGxldCB0bXAgPSByZXN1bHQuZ2V0KGksIGopIC0gZmFjdG9yICogcmVzdWx0LmdldChoLCBqKTtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQoaSwgaiwgdG1wKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaC0tO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc2V0KCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc2V0IG1ldGhvZCBpcyB1bmltcGxlbWVudGVkJyk7XG4gIH1cblxuICBnZXQoKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdnZXQgbWV0aG9kIGlzIHVuaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIHJlcGVhdChvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgIT09ICdvYmplY3QnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuICAgIGNvbnN0IHsgcm93cyA9IDEsIGNvbHVtbnMgPSAxIH0gPSBvcHRpb25zO1xuICAgIGlmICghTnVtYmVyLmlzSW50ZWdlcihyb3dzKSB8fCByb3dzIDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3Jvd3MgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICB9XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvbHVtbnMpIHx8IGNvbHVtbnMgPD0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY29sdW1ucyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgIH1cbiAgICBsZXQgbWF0cml4ID0gbmV3IE1hdHJpeCh0aGlzLnJvd3MgKiByb3dzLCB0aGlzLmNvbHVtbnMgKiBjb2x1bW5zKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2x1bW5zOyBqKyspIHtcbiAgICAgICAgbWF0cml4LnNldFN1Yk1hdHJpeCh0aGlzLCB0aGlzLnJvd3MgKiBpLCB0aGlzLmNvbHVtbnMgKiBqKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1hdHJpeDtcbiAgfVxuXG4gIGZpbGwodmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBuZWcoKSB7XG4gICAgcmV0dXJuIHRoaXMubXVsUygtMSk7XG4gIH1cblxuICBnZXRSb3coaW5kZXgpIHtcbiAgICBjaGVja1Jvd0luZGV4KHRoaXMsIGluZGV4KTtcbiAgICBsZXQgcm93ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgcm93LnB1c2godGhpcy5nZXQoaW5kZXgsIGkpKTtcbiAgICB9XG4gICAgcmV0dXJuIHJvdztcbiAgfVxuXG4gIGdldFJvd1ZlY3RvcihpbmRleCkge1xuICAgIHJldHVybiBNYXRyaXgucm93VmVjdG9yKHRoaXMuZ2V0Um93KGluZGV4KSk7XG4gIH1cblxuICBzZXRSb3coaW5kZXgsIGFycmF5KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgYXJyYXkgPSBjaGVja1Jvd1ZlY3Rvcih0aGlzLCBhcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgdGhpcy5zZXQoaW5kZXgsIGksIGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzd2FwUm93cyhyb3cxLCByb3cyKSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cxKTtcbiAgICBjaGVja1Jvd0luZGV4KHRoaXMsIHJvdzIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIGxldCB0ZW1wID0gdGhpcy5nZXQocm93MSwgaSk7XG4gICAgICB0aGlzLnNldChyb3cxLCBpLCB0aGlzLmdldChyb3cyLCBpKSk7XG4gICAgICB0aGlzLnNldChyb3cyLCBpLCB0ZW1wKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXRDb2x1bW4oaW5kZXgpIHtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGluZGV4KTtcbiAgICBsZXQgY29sdW1uID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29sdW1uLnB1c2godGhpcy5nZXQoaSwgaW5kZXgpKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvbHVtbjtcbiAgfVxuXG4gIGdldENvbHVtblZlY3RvcihpbmRleCkge1xuICAgIHJldHVybiBNYXRyaXguY29sdW1uVmVjdG9yKHRoaXMuZ2V0Q29sdW1uKGluZGV4KSk7XG4gIH1cblxuICBzZXRDb2x1bW4oaW5kZXgsIGFycmF5KSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCk7XG4gICAgYXJyYXkgPSBjaGVja0NvbHVtblZlY3Rvcih0aGlzLCBhcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5zZXQoaSwgaW5kZXgsIGFycmF5W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzd2FwQ29sdW1ucyhjb2x1bW4xLCBjb2x1bW4yKSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBjb2x1bW4xKTtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGNvbHVtbjIpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGxldCB0ZW1wID0gdGhpcy5nZXQoaSwgY29sdW1uMSk7XG4gICAgICB0aGlzLnNldChpLCBjb2x1bW4xLCB0aGlzLmdldChpLCBjb2x1bW4yKSk7XG4gICAgICB0aGlzLnNldChpLCBjb2x1bW4yLCB0ZW1wKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRSb3dWZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tSb3dWZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICsgdmVjdG9yW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdWJSb3dWZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tSb3dWZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC0gdmVjdG9yW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtdWxSb3dWZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tSb3dWZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICogdmVjdG9yW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkaXZSb3dWZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tSb3dWZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC8gdmVjdG9yW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRDb2x1bW5WZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tDb2x1bW5WZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICsgdmVjdG9yW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzdWJDb2x1bW5WZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tDb2x1bW5WZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC0gdmVjdG9yW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtdWxDb2x1bW5WZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tDb2x1bW5WZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICogdmVjdG9yW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkaXZDb2x1bW5WZWN0b3IodmVjdG9yKSB7XG4gICAgdmVjdG9yID0gY2hlY2tDb2x1bW5WZWN0b3IodGhpcywgdmVjdG9yKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC8gdmVjdG9yW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtdWxSb3coaW5kZXgsIHZhbHVlKSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCBpbmRleCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgdGhpcy5zZXQoaW5kZXgsIGksIHRoaXMuZ2V0KGluZGV4LCBpKSAqIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtdWxDb2x1bW4oaW5kZXgsIHZhbHVlKSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5zZXQoaSwgaW5kZXgsIHRoaXMuZ2V0KGksIGluZGV4KSAqIHZhbHVlKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYXgoKSB7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBsZXQgdiA9IHRoaXMuZ2V0KDAsIDApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopID4gdikge1xuICAgICAgICAgIHYgPSB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIG1heEluZGV4KCkge1xuICAgIGNoZWNrTm9uRW1wdHkodGhpcyk7XG4gICAgbGV0IHYgPSB0aGlzLmdldCgwLCAwKTtcbiAgICBsZXQgaWR4ID0gWzAsIDBdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgaWYgKHRoaXMuZ2V0KGksIGopID4gdikge1xuICAgICAgICAgIHYgPSB0aGlzLmdldChpLCBqKTtcbiAgICAgICAgICBpZHhbMF0gPSBpO1xuICAgICAgICAgIGlkeFsxXSA9IGo7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkeDtcbiAgfVxuXG4gIG1pbigpIHtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgMCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAodGhpcy5nZXQoaSwgaikgPCB2KSB7XG4gICAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWluSW5kZXgoKSB7XG4gICAgY2hlY2tOb25FbXB0eSh0aGlzKTtcbiAgICBsZXQgdiA9IHRoaXMuZ2V0KDAsIDApO1xuICAgIGxldCBpZHggPSBbMCwgMF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBpZiAodGhpcy5nZXQoaSwgaikgPCB2KSB7XG4gICAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICAgIGlkeFswXSA9IGk7XG4gICAgICAgICAgaWR4WzFdID0gajtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWR4O1xuICB9XG5cbiAgbWF4Um93KHJvdykge1xuICAgIGNoZWNrUm93SW5kZXgodGhpcywgcm93KTtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGxldCB2ID0gdGhpcy5nZXQocm93LCAwKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuY29sdW1uczsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQocm93LCBpKSA+IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KHJvdywgaSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWF4Um93SW5kZXgocm93KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cpO1xuICAgIGNoZWNrTm9uRW1wdHkodGhpcyk7XG4gICAgbGV0IHYgPSB0aGlzLmdldChyb3csIDApO1xuICAgIGxldCBpZHggPSBbcm93LCAwXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMuY29sdW1uczsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQocm93LCBpKSA+IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KHJvdywgaSk7XG4gICAgICAgIGlkeFsxXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG4gIH1cblxuICBtaW5Sb3cocm93KSB7XG4gICAgY2hlY2tSb3dJbmRleCh0aGlzLCByb3cpO1xuICAgIGlmICh0aGlzLmlzRW1wdHkoKSkge1xuICAgICAgcmV0dXJuIE5hTjtcbiAgICB9XG4gICAgbGV0IHYgPSB0aGlzLmdldChyb3csIDApO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmdldChyb3csIGkpIDwgdikge1xuICAgICAgICB2ID0gdGhpcy5nZXQocm93LCBpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHY7XG4gIH1cblxuICBtaW5Sb3dJbmRleChyb3cpIHtcbiAgICBjaGVja1Jvd0luZGV4KHRoaXMsIHJvdyk7XG4gICAgY2hlY2tOb25FbXB0eSh0aGlzKTtcbiAgICBsZXQgdiA9IHRoaXMuZ2V0KHJvdywgMCk7XG4gICAgbGV0IGlkeCA9IFtyb3csIDBdO1xuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmdldChyb3csIGkpIDwgdikge1xuICAgICAgICB2ID0gdGhpcy5nZXQocm93LCBpKTtcbiAgICAgICAgaWR4WzFdID0gaTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGlkeDtcbiAgfVxuXG4gIG1heENvbHVtbihjb2x1bW4pIHtcbiAgICBjaGVja0NvbHVtbkluZGV4KHRoaXMsIGNvbHVtbik7XG4gICAgaWYgKHRoaXMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gTmFOO1xuICAgIH1cbiAgICBsZXQgdiA9IHRoaXMuZ2V0KDAsIGNvbHVtbik7XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0KGksIGNvbHVtbikgPiB2KSB7XG4gICAgICAgIHYgPSB0aGlzLmdldChpLCBjb2x1bW4pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdjtcbiAgfVxuXG4gIG1heENvbHVtbkluZGV4KGNvbHVtbikge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgodGhpcywgY29sdW1uKTtcbiAgICBjaGVja05vbkVtcHR5KHRoaXMpO1xuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgY29sdW1uKTtcbiAgICBsZXQgaWR4ID0gWzAsIGNvbHVtbl07XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0KGksIGNvbHVtbikgPiB2KSB7XG4gICAgICAgIHYgPSB0aGlzLmdldChpLCBjb2x1bW4pO1xuICAgICAgICBpZHhbMF0gPSBpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gaWR4O1xuICB9XG5cbiAgbWluQ29sdW1uKGNvbHVtbikge1xuICAgIGNoZWNrQ29sdW1uSW5kZXgodGhpcywgY29sdW1uKTtcbiAgICBpZiAodGhpcy5pc0VtcHR5KCkpIHtcbiAgICAgIHJldHVybiBOYU47XG4gICAgfVxuICAgIGxldCB2ID0gdGhpcy5nZXQoMCwgY29sdW1uKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQoaSwgY29sdW1uKSA8IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGNvbHVtbik7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB2O1xuICB9XG5cbiAgbWluQ29sdW1uSW5kZXgoY29sdW1uKSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBjb2x1bW4pO1xuICAgIGNoZWNrTm9uRW1wdHkodGhpcyk7XG4gICAgbGV0IHYgPSB0aGlzLmdldCgwLCBjb2x1bW4pO1xuICAgIGxldCBpZHggPSBbMCwgY29sdW1uXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBpZiAodGhpcy5nZXQoaSwgY29sdW1uKSA8IHYpIHtcbiAgICAgICAgdiA9IHRoaXMuZ2V0KGksIGNvbHVtbik7XG4gICAgICAgIGlkeFswXSA9IGk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpZHg7XG4gIH1cblxuICBkaWFnKCkge1xuICAgIGxldCBtaW4gPSBNYXRoLm1pbih0aGlzLnJvd3MsIHRoaXMuY29sdW1ucyk7XG4gICAgbGV0IGRpYWcgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG1pbjsgaSsrKSB7XG4gICAgICBkaWFnLnB1c2godGhpcy5nZXQoaSwgaSkpO1xuICAgIH1cbiAgICByZXR1cm4gZGlhZztcbiAgfVxuXG4gIG5vcm0odHlwZSA9ICdmcm9iZW5pdXMnKSB7XG4gICAgbGV0IHJlc3VsdCA9IDA7XG4gICAgaWYgKHR5cGUgPT09ICdtYXgnKSB7XG4gICAgICByZXR1cm4gdGhpcy5tYXgoKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdmcm9iZW5pdXMnKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgICByZXN1bHQgPSByZXN1bHQgKyB0aGlzLmdldChpLCBqKSAqIHRoaXMuZ2V0KGksIGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1bmtub3duIG5vcm0gdHlwZTogJHt0eXBlfWApO1xuICAgIH1cbiAgfVxuXG4gIGN1bXVsYXRpdmVTdW0oKSB7XG4gICAgbGV0IHN1bSA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICBzdW0gKz0gdGhpcy5nZXQoaSwgaik7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHN1bSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZG90KHZlY3RvcjIpIHtcbiAgICBpZiAoQWJzdHJhY3RNYXRyaXguaXNNYXRyaXgodmVjdG9yMikpIHZlY3RvcjIgPSB2ZWN0b3IyLnRvMURBcnJheSgpO1xuICAgIGxldCB2ZWN0b3IxID0gdGhpcy50bzFEQXJyYXkoKTtcbiAgICBpZiAodmVjdG9yMS5sZW5ndGggIT09IHZlY3RvcjIubGVuZ3RoKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndmVjdG9ycyBkbyBub3QgaGF2ZSB0aGUgc2FtZSBzaXplJyk7XG4gICAgfVxuICAgIGxldCBkb3QgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmVjdG9yMS5sZW5ndGg7IGkrKykge1xuICAgICAgZG90ICs9IHZlY3RvcjFbaV0gKiB2ZWN0b3IyW2ldO1xuICAgIH1cbiAgICByZXR1cm4gZG90O1xuICB9XG5cbiAgbW11bChvdGhlcikge1xuICAgIG90aGVyID0gTWF0cml4LmNoZWNrTWF0cml4KG90aGVyKTtcblxuICAgIGxldCBtID0gdGhpcy5yb3dzO1xuICAgIGxldCBuID0gdGhpcy5jb2x1bW5zO1xuICAgIGxldCBwID0gb3RoZXIuY29sdW1ucztcblxuICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4KG0sIHApO1xuXG4gICAgbGV0IEJjb2xqID0gbmV3IEZsb2F0NjRBcnJheShuKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHA7IGorKykge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgICAgQmNvbGpba10gPSBvdGhlci5nZXQoaywgaik7XG4gICAgICB9XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbTsgaSsrKSB7XG4gICAgICAgIGxldCBzID0gMDtcbiAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuOyBrKyspIHtcbiAgICAgICAgICBzICs9IHRoaXMuZ2V0KGksIGspICogQmNvbGpba107XG4gICAgICAgIH1cblxuICAgICAgICByZXN1bHQuc2V0KGksIGosIHMpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3RyYXNzZW4yeDIob3RoZXIpIHtcbiAgICBvdGhlciA9IE1hdHJpeC5jaGVja01hdHJpeChvdGhlcik7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXRyaXgoMiwgMik7XG4gICAgY29uc3QgYTExID0gdGhpcy5nZXQoMCwgMCk7XG4gICAgY29uc3QgYjExID0gb3RoZXIuZ2V0KDAsIDApO1xuICAgIGNvbnN0IGExMiA9IHRoaXMuZ2V0KDAsIDEpO1xuICAgIGNvbnN0IGIxMiA9IG90aGVyLmdldCgwLCAxKTtcbiAgICBjb25zdCBhMjEgPSB0aGlzLmdldCgxLCAwKTtcbiAgICBjb25zdCBiMjEgPSBvdGhlci5nZXQoMSwgMCk7XG4gICAgY29uc3QgYTIyID0gdGhpcy5nZXQoMSwgMSk7XG4gICAgY29uc3QgYjIyID0gb3RoZXIuZ2V0KDEsIDEpO1xuXG4gICAgLy8gQ29tcHV0ZSBpbnRlcm1lZGlhdGUgdmFsdWVzLlxuICAgIGNvbnN0IG0xID0gKGExMSArIGEyMikgKiAoYjExICsgYjIyKTtcbiAgICBjb25zdCBtMiA9IChhMjEgKyBhMjIpICogYjExO1xuICAgIGNvbnN0IG0zID0gYTExICogKGIxMiAtIGIyMik7XG4gICAgY29uc3QgbTQgPSBhMjIgKiAoYjIxIC0gYjExKTtcbiAgICBjb25zdCBtNSA9IChhMTEgKyBhMTIpICogYjIyO1xuICAgIGNvbnN0IG02ID0gKGEyMSAtIGExMSkgKiAoYjExICsgYjEyKTtcbiAgICBjb25zdCBtNyA9IChhMTIgLSBhMjIpICogKGIyMSArIGIyMik7XG5cbiAgICAvLyBDb21iaW5lIGludGVybWVkaWF0ZSB2YWx1ZXMgaW50byB0aGUgb3V0cHV0LlxuICAgIGNvbnN0IGMwMCA9IG0xICsgbTQgLSBtNSArIG03O1xuICAgIGNvbnN0IGMwMSA9IG0zICsgbTU7XG4gICAgY29uc3QgYzEwID0gbTIgKyBtNDtcbiAgICBjb25zdCBjMTEgPSBtMSAtIG0yICsgbTMgKyBtNjtcblxuICAgIHJlc3VsdC5zZXQoMCwgMCwgYzAwKTtcbiAgICByZXN1bHQuc2V0KDAsIDEsIGMwMSk7XG4gICAgcmVzdWx0LnNldCgxLCAwLCBjMTApO1xuICAgIHJlc3VsdC5zZXQoMSwgMSwgYzExKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgc3RyYXNzZW4zeDMob3RoZXIpIHtcbiAgICBvdGhlciA9IE1hdHJpeC5jaGVja01hdHJpeChvdGhlcik7XG4gICAgbGV0IHJlc3VsdCA9IG5ldyBNYXRyaXgoMywgMyk7XG5cbiAgICBjb25zdCBhMDAgPSB0aGlzLmdldCgwLCAwKTtcbiAgICBjb25zdCBhMDEgPSB0aGlzLmdldCgwLCAxKTtcbiAgICBjb25zdCBhMDIgPSB0aGlzLmdldCgwLCAyKTtcbiAgICBjb25zdCBhMTAgPSB0aGlzLmdldCgxLCAwKTtcbiAgICBjb25zdCBhMTEgPSB0aGlzLmdldCgxLCAxKTtcbiAgICBjb25zdCBhMTIgPSB0aGlzLmdldCgxLCAyKTtcbiAgICBjb25zdCBhMjAgPSB0aGlzLmdldCgyLCAwKTtcbiAgICBjb25zdCBhMjEgPSB0aGlzLmdldCgyLCAxKTtcbiAgICBjb25zdCBhMjIgPSB0aGlzLmdldCgyLCAyKTtcblxuICAgIGNvbnN0IGIwMCA9IG90aGVyLmdldCgwLCAwKTtcbiAgICBjb25zdCBiMDEgPSBvdGhlci5nZXQoMCwgMSk7XG4gICAgY29uc3QgYjAyID0gb3RoZXIuZ2V0KDAsIDIpO1xuICAgIGNvbnN0IGIxMCA9IG90aGVyLmdldCgxLCAwKTtcbiAgICBjb25zdCBiMTEgPSBvdGhlci5nZXQoMSwgMSk7XG4gICAgY29uc3QgYjEyID0gb3RoZXIuZ2V0KDEsIDIpO1xuICAgIGNvbnN0IGIyMCA9IG90aGVyLmdldCgyLCAwKTtcbiAgICBjb25zdCBiMjEgPSBvdGhlci5nZXQoMiwgMSk7XG4gICAgY29uc3QgYjIyID0gb3RoZXIuZ2V0KDIsIDIpO1xuXG4gICAgY29uc3QgbTEgPSAoYTAwICsgYTAxICsgYTAyIC0gYTEwIC0gYTExIC0gYTIxIC0gYTIyKSAqIGIxMTtcbiAgICBjb25zdCBtMiA9IChhMDAgLSBhMTApICogKC1iMDEgKyBiMTEpO1xuICAgIGNvbnN0IG0zID0gYTExICogKC1iMDAgKyBiMDEgKyBiMTAgLSBiMTEgLSBiMTIgLSBiMjAgKyBiMjIpO1xuICAgIGNvbnN0IG00ID0gKC1hMDAgKyBhMTAgKyBhMTEpICogKGIwMCAtIGIwMSArIGIxMSk7XG4gICAgY29uc3QgbTUgPSAoYTEwICsgYTExKSAqICgtYjAwICsgYjAxKTtcbiAgICBjb25zdCBtNiA9IGEwMCAqIGIwMDtcbiAgICBjb25zdCBtNyA9ICgtYTAwICsgYTIwICsgYTIxKSAqIChiMDAgLSBiMDIgKyBiMTIpO1xuICAgIGNvbnN0IG04ID0gKC1hMDAgKyBhMjApICogKGIwMiAtIGIxMik7XG4gICAgY29uc3QgbTkgPSAoYTIwICsgYTIxKSAqICgtYjAwICsgYjAyKTtcbiAgICBjb25zdCBtMTAgPSAoYTAwICsgYTAxICsgYTAyIC0gYTExIC0gYTEyIC0gYTIwIC0gYTIxKSAqIGIxMjtcbiAgICBjb25zdCBtMTEgPSBhMjEgKiAoLWIwMCArIGIwMiArIGIxMCAtIGIxMSAtIGIxMiAtIGIyMCArIGIyMSk7XG4gICAgY29uc3QgbTEyID0gKC1hMDIgKyBhMjEgKyBhMjIpICogKGIxMSArIGIyMCAtIGIyMSk7XG4gICAgY29uc3QgbTEzID0gKGEwMiAtIGEyMikgKiAoYjExIC0gYjIxKTtcbiAgICBjb25zdCBtMTQgPSBhMDIgKiBiMjA7XG4gICAgY29uc3QgbTE1ID0gKGEyMSArIGEyMikgKiAoLWIyMCArIGIyMSk7XG4gICAgY29uc3QgbTE2ID0gKC1hMDIgKyBhMTEgKyBhMTIpICogKGIxMiArIGIyMCAtIGIyMik7XG4gICAgY29uc3QgbTE3ID0gKGEwMiAtIGExMikgKiAoYjEyIC0gYjIyKTtcbiAgICBjb25zdCBtMTggPSAoYTExICsgYTEyKSAqICgtYjIwICsgYjIyKTtcbiAgICBjb25zdCBtMTkgPSBhMDEgKiBiMTA7XG4gICAgY29uc3QgbTIwID0gYTEyICogYjIxO1xuICAgIGNvbnN0IG0yMSA9IGExMCAqIGIwMjtcbiAgICBjb25zdCBtMjIgPSBhMjAgKiBiMDE7XG4gICAgY29uc3QgbTIzID0gYTIyICogYjIyO1xuXG4gICAgY29uc3QgYzAwID0gbTYgKyBtMTQgKyBtMTk7XG4gICAgY29uc3QgYzAxID0gbTEgKyBtNCArIG01ICsgbTYgKyBtMTIgKyBtMTQgKyBtMTU7XG4gICAgY29uc3QgYzAyID0gbTYgKyBtNyArIG05ICsgbTEwICsgbTE0ICsgbTE2ICsgbTE4O1xuICAgIGNvbnN0IGMxMCA9IG0yICsgbTMgKyBtNCArIG02ICsgbTE0ICsgbTE2ICsgbTE3O1xuICAgIGNvbnN0IGMxMSA9IG0yICsgbTQgKyBtNSArIG02ICsgbTIwO1xuICAgIGNvbnN0IGMxMiA9IG0xNCArIG0xNiArIG0xNyArIG0xOCArIG0yMTtcbiAgICBjb25zdCBjMjAgPSBtNiArIG03ICsgbTggKyBtMTEgKyBtMTIgKyBtMTMgKyBtMTQ7XG4gICAgY29uc3QgYzIxID0gbTEyICsgbTEzICsgbTE0ICsgbTE1ICsgbTIyO1xuICAgIGNvbnN0IGMyMiA9IG02ICsgbTcgKyBtOCArIG05ICsgbTIzO1xuXG4gICAgcmVzdWx0LnNldCgwLCAwLCBjMDApO1xuICAgIHJlc3VsdC5zZXQoMCwgMSwgYzAxKTtcbiAgICByZXN1bHQuc2V0KDAsIDIsIGMwMik7XG4gICAgcmVzdWx0LnNldCgxLCAwLCBjMTApO1xuICAgIHJlc3VsdC5zZXQoMSwgMSwgYzExKTtcbiAgICByZXN1bHQuc2V0KDEsIDIsIGMxMik7XG4gICAgcmVzdWx0LnNldCgyLCAwLCBjMjApO1xuICAgIHJlc3VsdC5zZXQoMiwgMSwgYzIxKTtcbiAgICByZXN1bHQuc2V0KDIsIDIsIGMyMik7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIG1tdWxTdHJhc3Nlbih5KSB7XG4gICAgeSA9IE1hdHJpeC5jaGVja01hdHJpeCh5KTtcbiAgICBsZXQgeCA9IHRoaXMuY2xvbmUoKTtcbiAgICBsZXQgcjEgPSB4LnJvd3M7XG4gICAgbGV0IGMxID0geC5jb2x1bW5zO1xuICAgIGxldCByMiA9IHkucm93cztcbiAgICBsZXQgYzIgPSB5LmNvbHVtbnM7XG4gICAgaWYgKGMxICE9PSByMikge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgYE11bHRpcGx5aW5nICR7cjF9IHggJHtjMX0gYW5kICR7cjJ9IHggJHtjMn0gbWF0cml4OiBkaW1lbnNpb25zIGRvIG5vdCBtYXRjaC5gLFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBQdXQgYSBtYXRyaXggaW50byB0aGUgdG9wIGxlZnQgb2YgYSBtYXRyaXggb2YgemVyb3MuXG4gICAgLy8gYHJvd3NgIGFuZCBgY29sc2AgYXJlIHRoZSBkaW1lbnNpb25zIG9mIHRoZSBvdXRwdXQgbWF0cml4LlxuICAgIGZ1bmN0aW9uIGVtYmVkKG1hdCwgcm93cywgY29scykge1xuICAgICAgbGV0IHIgPSBtYXQucm93cztcbiAgICAgIGxldCBjID0gbWF0LmNvbHVtbnM7XG4gICAgICBpZiAociA9PT0gcm93cyAmJiBjID09PSBjb2xzKSB7XG4gICAgICAgIHJldHVybiBtYXQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZXQgcmVzdWx0YXQgPSBBYnN0cmFjdE1hdHJpeC56ZXJvcyhyb3dzLCBjb2xzKTtcbiAgICAgICAgcmVzdWx0YXQgPSByZXN1bHRhdC5zZXRTdWJNYXRyaXgobWF0LCAwLCAwKTtcbiAgICAgICAgcmV0dXJuIHJlc3VsdGF0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSBib3RoIG1hdHJpY2VzIGFyZSB0aGUgc2FtZSBzaXplLlxuICAgIC8vIFRoaXMgaXMgZXhjbHVzaXZlbHkgZm9yIHNpbXBsaWNpdHk6XG4gICAgLy8gdGhpcyBhbGdvcml0aG0gY2FuIGJlIGltcGxlbWVudGVkIHdpdGggbWF0cmljZXMgb2YgZGlmZmVyZW50IHNpemVzLlxuXG4gICAgbGV0IHIgPSBNYXRoLm1heChyMSwgcjIpO1xuICAgIGxldCBjID0gTWF0aC5tYXgoYzEsIGMyKTtcbiAgICB4ID0gZW1iZWQoeCwgciwgYyk7XG4gICAgeSA9IGVtYmVkKHksIHIsIGMpO1xuXG4gICAgLy8gT3VyIHJlY3Vyc2l2ZSBtdWx0aXBsaWNhdGlvbiBmdW5jdGlvbi5cbiAgICBmdW5jdGlvbiBibG9ja011bHQoYSwgYiwgcm93cywgY29scykge1xuICAgICAgLy8gRm9yIHNtYWxsIG1hdHJpY2VzLCByZXNvcnQgdG8gbmFpdmUgbXVsdGlwbGljYXRpb24uXG4gICAgICBpZiAocm93cyA8PSA1MTIgfHwgY29scyA8PSA1MTIpIHtcbiAgICAgICAgcmV0dXJuIGEubW11bChiKTsgLy8gYSBpcyBlcXVpdmFsZW50IHRvIHRoaXNcbiAgICAgIH1cblxuICAgICAgLy8gQXBwbHkgZHluYW1pYyBwYWRkaW5nLlxuICAgICAgaWYgKHJvd3MgJSAyID09PSAxICYmIGNvbHMgJSAyID09PSAxKSB7XG4gICAgICAgIGEgPSBlbWJlZChhLCByb3dzICsgMSwgY29scyArIDEpO1xuICAgICAgICBiID0gZW1iZWQoYiwgcm93cyArIDEsIGNvbHMgKyAxKTtcbiAgICAgIH0gZWxzZSBpZiAocm93cyAlIDIgPT09IDEpIHtcbiAgICAgICAgYSA9IGVtYmVkKGEsIHJvd3MgKyAxLCBjb2xzKTtcbiAgICAgICAgYiA9IGVtYmVkKGIsIHJvd3MgKyAxLCBjb2xzKTtcbiAgICAgIH0gZWxzZSBpZiAoY29scyAlIDIgPT09IDEpIHtcbiAgICAgICAgYSA9IGVtYmVkKGEsIHJvd3MsIGNvbHMgKyAxKTtcbiAgICAgICAgYiA9IGVtYmVkKGIsIHJvd3MsIGNvbHMgKyAxKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGhhbGZSb3dzID0gcGFyc2VJbnQoYS5yb3dzIC8gMiwgMTApO1xuICAgICAgbGV0IGhhbGZDb2xzID0gcGFyc2VJbnQoYS5jb2x1bW5zIC8gMiwgMTApO1xuICAgICAgLy8gU3ViZGl2aWRlIGlucHV0IG1hdHJpY2VzLlxuICAgICAgbGV0IGExMSA9IGEuc3ViTWF0cml4KDAsIGhhbGZSb3dzIC0gMSwgMCwgaGFsZkNvbHMgLSAxKTtcbiAgICAgIGxldCBiMTEgPSBiLnN1Yk1hdHJpeCgwLCBoYWxmUm93cyAtIDEsIDAsIGhhbGZDb2xzIC0gMSk7XG5cbiAgICAgIGxldCBhMTIgPSBhLnN1Yk1hdHJpeCgwLCBoYWxmUm93cyAtIDEsIGhhbGZDb2xzLCBhLmNvbHVtbnMgLSAxKTtcbiAgICAgIGxldCBiMTIgPSBiLnN1Yk1hdHJpeCgwLCBoYWxmUm93cyAtIDEsIGhhbGZDb2xzLCBiLmNvbHVtbnMgLSAxKTtcblxuICAgICAgbGV0IGEyMSA9IGEuc3ViTWF0cml4KGhhbGZSb3dzLCBhLnJvd3MgLSAxLCAwLCBoYWxmQ29scyAtIDEpO1xuICAgICAgbGV0IGIyMSA9IGIuc3ViTWF0cml4KGhhbGZSb3dzLCBiLnJvd3MgLSAxLCAwLCBoYWxmQ29scyAtIDEpO1xuXG4gICAgICBsZXQgYTIyID0gYS5zdWJNYXRyaXgoaGFsZlJvd3MsIGEucm93cyAtIDEsIGhhbGZDb2xzLCBhLmNvbHVtbnMgLSAxKTtcbiAgICAgIGxldCBiMjIgPSBiLnN1Yk1hdHJpeChoYWxmUm93cywgYi5yb3dzIC0gMSwgaGFsZkNvbHMsIGIuY29sdW1ucyAtIDEpO1xuXG4gICAgICAvLyBDb21wdXRlIGludGVybWVkaWF0ZSB2YWx1ZXMuXG4gICAgICBsZXQgbTEgPSBibG9ja011bHQoXG4gICAgICAgIEFic3RyYWN0TWF0cml4LmFkZChhMTEsIGEyMiksXG4gICAgICAgIEFic3RyYWN0TWF0cml4LmFkZChiMTEsIGIyMiksXG4gICAgICAgIGhhbGZSb3dzLFxuICAgICAgICBoYWxmQ29scyxcbiAgICAgICk7XG4gICAgICBsZXQgbTIgPSBibG9ja011bHQoQWJzdHJhY3RNYXRyaXguYWRkKGEyMSwgYTIyKSwgYjExLCBoYWxmUm93cywgaGFsZkNvbHMpO1xuICAgICAgbGV0IG0zID0gYmxvY2tNdWx0KGExMSwgQWJzdHJhY3RNYXRyaXguc3ViKGIxMiwgYjIyKSwgaGFsZlJvd3MsIGhhbGZDb2xzKTtcbiAgICAgIGxldCBtNCA9IGJsb2NrTXVsdChhMjIsIEFic3RyYWN0TWF0cml4LnN1YihiMjEsIGIxMSksIGhhbGZSb3dzLCBoYWxmQ29scyk7XG4gICAgICBsZXQgbTUgPSBibG9ja011bHQoQWJzdHJhY3RNYXRyaXguYWRkKGExMSwgYTEyKSwgYjIyLCBoYWxmUm93cywgaGFsZkNvbHMpO1xuICAgICAgbGV0IG02ID0gYmxvY2tNdWx0KFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5zdWIoYTIxLCBhMTEpLFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5hZGQoYjExLCBiMTIpLFxuICAgICAgICBoYWxmUm93cyxcbiAgICAgICAgaGFsZkNvbHMsXG4gICAgICApO1xuICAgICAgbGV0IG03ID0gYmxvY2tNdWx0KFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5zdWIoYTEyLCBhMjIpLFxuICAgICAgICBBYnN0cmFjdE1hdHJpeC5hZGQoYjIxLCBiMjIpLFxuICAgICAgICBoYWxmUm93cyxcbiAgICAgICAgaGFsZkNvbHMsXG4gICAgICApO1xuXG4gICAgICAvLyBDb21iaW5lIGludGVybWVkaWF0ZSB2YWx1ZXMgaW50byB0aGUgb3V0cHV0LlxuICAgICAgbGV0IGMxMSA9IEFic3RyYWN0TWF0cml4LmFkZChtMSwgbTQpO1xuICAgICAgYzExLnN1YihtNSk7XG4gICAgICBjMTEuYWRkKG03KTtcbiAgICAgIGxldCBjMTIgPSBBYnN0cmFjdE1hdHJpeC5hZGQobTMsIG01KTtcbiAgICAgIGxldCBjMjEgPSBBYnN0cmFjdE1hdHJpeC5hZGQobTIsIG00KTtcbiAgICAgIGxldCBjMjIgPSBBYnN0cmFjdE1hdHJpeC5zdWIobTEsIG0yKTtcbiAgICAgIGMyMi5hZGQobTMpO1xuICAgICAgYzIyLmFkZChtNik7XG5cbiAgICAgIC8vIENyb3Agb3V0cHV0IHRvIHRoZSBkZXNpcmVkIHNpemUgKHVuZG8gZHluYW1pYyBwYWRkaW5nKS5cbiAgICAgIGxldCByZXN1bHRhdCA9IEFic3RyYWN0TWF0cml4Lnplcm9zKDIgKiBjMTEucm93cywgMiAqIGMxMS5jb2x1bW5zKTtcbiAgICAgIHJlc3VsdGF0ID0gcmVzdWx0YXQuc2V0U3ViTWF0cml4KGMxMSwgMCwgMCk7XG4gICAgICByZXN1bHRhdCA9IHJlc3VsdGF0LnNldFN1Yk1hdHJpeChjMTIsIGMxMS5yb3dzLCAwKTtcbiAgICAgIHJlc3VsdGF0ID0gcmVzdWx0YXQuc2V0U3ViTWF0cml4KGMyMSwgMCwgYzExLmNvbHVtbnMpO1xuICAgICAgcmVzdWx0YXQgPSByZXN1bHRhdC5zZXRTdWJNYXRyaXgoYzIyLCBjMTEucm93cywgYzExLmNvbHVtbnMpO1xuICAgICAgcmV0dXJuIHJlc3VsdGF0LnN1Yk1hdHJpeCgwLCByb3dzIC0gMSwgMCwgY29scyAtIDEpO1xuICAgIH1cbiAgICByZXR1cm4gYmxvY2tNdWx0KHgsIHksIHIsIGMpO1xuICB9XG5cbiAgc2NhbGVSb3dzKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBtaW4gPSAwLCBtYXggPSAxIH0gPSBvcHRpb25zO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG1pbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobWF4KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAobWluID49IG1heCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ21pbiBtdXN0IGJlIHNtYWxsZXIgdGhhbiBtYXgnKTtcbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeCh0aGlzLnJvd3MsIHRoaXMuY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29uc3Qgcm93ID0gdGhpcy5nZXRSb3coaSk7XG4gICAgICBpZiAocm93Lmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzY2FsZShyb3csIHsgbWluLCBtYXgsIG91dHB1dDogcm93IH0pO1xuICAgICAgfVxuICAgICAgbmV3TWF0cml4LnNldFJvdyhpLCByb3cpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgc2NhbGVDb2x1bW5zKG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBtaW4gPSAwLCBtYXggPSAxIH0gPSBvcHRpb25zO1xuICAgIGlmICghTnVtYmVyLmlzRmluaXRlKG1pbikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ21pbiBtdXN0IGJlIGEgbnVtYmVyJyk7XG4gICAgaWYgKCFOdW1iZXIuaXNGaW5pdGUobWF4KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbWF4IG11c3QgYmUgYSBudW1iZXInKTtcbiAgICBpZiAobWluID49IG1heCkgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ21pbiBtdXN0IGJlIHNtYWxsZXIgdGhhbiBtYXgnKTtcbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeCh0aGlzLnJvd3MsIHRoaXMuY29sdW1ucyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNvbHVtbnM7IGkrKykge1xuICAgICAgY29uc3QgY29sdW1uID0gdGhpcy5nZXRDb2x1bW4oaSk7XG4gICAgICBpZiAoY29sdW1uLmxlbmd0aCkge1xuICAgICAgICByZXNjYWxlKGNvbHVtbiwge1xuICAgICAgICAgIG1pbjogbWluLFxuICAgICAgICAgIG1heDogbWF4LFxuICAgICAgICAgIG91dHB1dDogY29sdW1uLFxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIG5ld01hdHJpeC5zZXRDb2x1bW4oaSwgY29sdW1uKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdHJpeDtcbiAgfVxuXG4gIGZsaXBSb3dzKCkge1xuICAgIGNvbnN0IG1pZGRsZSA9IE1hdGguY2VpbCh0aGlzLmNvbHVtbnMgLyAyKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1pZGRsZTsgaisrKSB7XG4gICAgICAgIGxldCBmaXJzdCA9IHRoaXMuZ2V0KGksIGopO1xuICAgICAgICBsZXQgbGFzdCA9IHRoaXMuZ2V0KGksIHRoaXMuY29sdW1ucyAtIDEgLSBqKTtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgbGFzdCk7XG4gICAgICAgIHRoaXMuc2V0KGksIHRoaXMuY29sdW1ucyAtIDEgLSBqLCBmaXJzdCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZmxpcENvbHVtbnMoKSB7XG4gICAgY29uc3QgbWlkZGxlID0gTWF0aC5jZWlsKHRoaXMucm93cyAvIDIpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWlkZGxlOyBpKyspIHtcbiAgICAgICAgbGV0IGZpcnN0ID0gdGhpcy5nZXQoaSwgaik7XG4gICAgICAgIGxldCBsYXN0ID0gdGhpcy5nZXQodGhpcy5yb3dzIC0gMSAtIGksIGopO1xuICAgICAgICB0aGlzLnNldChpLCBqLCBsYXN0KTtcbiAgICAgICAgdGhpcy5zZXQodGhpcy5yb3dzIC0gMSAtIGksIGosIGZpcnN0KTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBrcm9uZWNrZXJQcm9kdWN0KG90aGVyKSB7XG4gICAgb3RoZXIgPSBNYXRyaXguY2hlY2tNYXRyaXgob3RoZXIpO1xuXG4gICAgbGV0IG0gPSB0aGlzLnJvd3M7XG4gICAgbGV0IG4gPSB0aGlzLmNvbHVtbnM7XG4gICAgbGV0IHAgPSBvdGhlci5yb3dzO1xuICAgIGxldCBxID0gb3RoZXIuY29sdW1ucztcblxuICAgIGxldCByZXN1bHQgPSBuZXcgTWF0cml4KG0gKiBwLCBuICogcSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbjsgaisrKSB7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgcDsgaysrKSB7XG4gICAgICAgICAgZm9yIChsZXQgbCA9IDA7IGwgPCBxOyBsKyspIHtcbiAgICAgICAgICAgIHJlc3VsdC5zZXQocCAqIGkgKyBrLCBxICogaiArIGwsIHRoaXMuZ2V0KGksIGopICogb3RoZXIuZ2V0KGssIGwpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGtyb25lY2tlclN1bShvdGhlcikge1xuICAgIG90aGVyID0gTWF0cml4LmNoZWNrTWF0cml4KG90aGVyKTtcbiAgICBpZiAoIXRoaXMuaXNTcXVhcmUoKSB8fCAhb3RoZXIuaXNTcXVhcmUoKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdLcm9uZWNrZXIgU3VtIG5lZWRzIHR3byBTcXVhcmUgTWF0cmljZXMnKTtcbiAgICB9XG4gICAgbGV0IG0gPSB0aGlzLnJvd3M7XG4gICAgbGV0IG4gPSBvdGhlci5yb3dzO1xuICAgIGxldCBBeEkgPSB0aGlzLmtyb25lY2tlclByb2R1Y3QoTWF0cml4LmV5ZShuLCBuKSk7XG4gICAgbGV0IEl4QiA9IE1hdHJpeC5leWUobSwgbSkua3JvbmVja2VyUHJvZHVjdChvdGhlcik7XG4gICAgcmV0dXJuIEF4SS5hZGQoSXhCKTtcbiAgfVxuXG4gIHRyYW5zcG9zZSgpIHtcbiAgICBsZXQgcmVzdWx0ID0gbmV3IE1hdHJpeCh0aGlzLmNvbHVtbnMsIHRoaXMucm93cyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICByZXN1bHQuc2V0KGosIGksIHRoaXMuZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIHNvcnRSb3dzKGNvbXBhcmVGdW5jdGlvbiA9IGNvbXBhcmVOdW1iZXJzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgdGhpcy5zZXRSb3coaSwgdGhpcy5nZXRSb3coaSkuc29ydChjb21wYXJlRnVuY3Rpb24pKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzb3J0Q29sdW1ucyhjb21wYXJlRnVuY3Rpb24gPSBjb21wYXJlTnVtYmVycykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgIHRoaXMuc2V0Q29sdW1uKGksIHRoaXMuZ2V0Q29sdW1uKGkpLnNvcnQoY29tcGFyZUZ1bmN0aW9uKSk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgc3ViTWF0cml4KHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pIHtcbiAgICBjaGVja1JhbmdlKHRoaXMsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pO1xuICAgIGxldCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KFxuICAgICAgZW5kUm93IC0gc3RhcnRSb3cgKyAxLFxuICAgICAgZW5kQ29sdW1uIC0gc3RhcnRDb2x1bW4gKyAxLFxuICAgICk7XG4gICAgZm9yIChsZXQgaSA9IHN0YXJ0Um93OyBpIDw9IGVuZFJvdzsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gc3RhcnRDb2x1bW47IGogPD0gZW5kQ29sdW1uOyBqKyspIHtcbiAgICAgICAgbmV3TWF0cml4LnNldChpIC0gc3RhcnRSb3csIGogLSBzdGFydENvbHVtbiwgdGhpcy5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgc3ViTWF0cml4Um93KGluZGljZXMsIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pIHtcbiAgICBpZiAoc3RhcnRDb2x1bW4gPT09IHVuZGVmaW5lZCkgc3RhcnRDb2x1bW4gPSAwO1xuICAgIGlmIChlbmRDb2x1bW4gPT09IHVuZGVmaW5lZCkgZW5kQ29sdW1uID0gdGhpcy5jb2x1bW5zIC0gMTtcbiAgICBpZiAoXG4gICAgICBzdGFydENvbHVtbiA+IGVuZENvbHVtbiB8fFxuICAgICAgc3RhcnRDb2x1bW4gPCAwIHx8XG4gICAgICBzdGFydENvbHVtbiA+PSB0aGlzLmNvbHVtbnMgfHxcbiAgICAgIGVuZENvbHVtbiA8IDAgfHxcbiAgICAgIGVuZENvbHVtbiA+PSB0aGlzLmNvbHVtbnNcbiAgICApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdBcmd1bWVudCBvdXQgb2YgcmFuZ2UnKTtcbiAgICB9XG5cbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChpbmRpY2VzLmxlbmd0aCwgZW5kQ29sdW1uIC0gc3RhcnRDb2x1bW4gKyAxKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBzdGFydENvbHVtbjsgaiA8PSBlbmRDb2x1bW47IGorKykge1xuICAgICAgICBpZiAoaW5kaWNlc1tpXSA8IDAgfHwgaW5kaWNlc1tpXSA+PSB0aGlzLnJvd3MpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgUm93IGluZGV4IG91dCBvZiByYW5nZTogJHtpbmRpY2VzW2ldfWApO1xuICAgICAgICB9XG4gICAgICAgIG5ld01hdHJpeC5zZXQoaSwgaiAtIHN0YXJ0Q29sdW1uLCB0aGlzLmdldChpbmRpY2VzW2ldLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdNYXRyaXg7XG4gIH1cblxuICBzdWJNYXRyaXhDb2x1bW4oaW5kaWNlcywgc3RhcnRSb3csIGVuZFJvdykge1xuICAgIGlmIChzdGFydFJvdyA9PT0gdW5kZWZpbmVkKSBzdGFydFJvdyA9IDA7XG4gICAgaWYgKGVuZFJvdyA9PT0gdW5kZWZpbmVkKSBlbmRSb3cgPSB0aGlzLnJvd3MgLSAxO1xuICAgIGlmIChcbiAgICAgIHN0YXJ0Um93ID4gZW5kUm93IHx8XG4gICAgICBzdGFydFJvdyA8IDAgfHxcbiAgICAgIHN0YXJ0Um93ID49IHRoaXMucm93cyB8fFxuICAgICAgZW5kUm93IDwgMCB8fFxuICAgICAgZW5kUm93ID49IHRoaXMucm93c1xuICAgICkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0FyZ3VtZW50IG91dCBvZiByYW5nZScpO1xuICAgIH1cblxuICAgIGxldCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KGVuZFJvdyAtIHN0YXJ0Um93ICsgMSwgaW5kaWNlcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kaWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IHN0YXJ0Um93OyBqIDw9IGVuZFJvdzsgaisrKSB7XG4gICAgICAgIGlmIChpbmRpY2VzW2ldIDwgMCB8fCBpbmRpY2VzW2ldID49IHRoaXMuY29sdW1ucykge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBDb2x1bW4gaW5kZXggb3V0IG9mIHJhbmdlOiAke2luZGljZXNbaV19YCk7XG4gICAgICAgIH1cbiAgICAgICAgbmV3TWF0cml4LnNldChqIC0gc3RhcnRSb3csIGksIHRoaXMuZ2V0KGosIGluZGljZXNbaV0pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld01hdHJpeDtcbiAgfVxuXG4gIHNldFN1Yk1hdHJpeChtYXRyaXgsIHN0YXJ0Um93LCBzdGFydENvbHVtbikge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmIChtYXRyaXguaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgbGV0IGVuZFJvdyA9IHN0YXJ0Um93ICsgbWF0cml4LnJvd3MgLSAxO1xuICAgIGxldCBlbmRDb2x1bW4gPSBzdGFydENvbHVtbiArIG1hdHJpeC5jb2x1bW5zIC0gMTtcbiAgICBjaGVja1JhbmdlKHRoaXMsIHN0YXJ0Um93LCBlbmRSb3csIHN0YXJ0Q29sdW1uLCBlbmRDb2x1bW4pO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KHN0YXJ0Um93ICsgaSwgc3RhcnRDb2x1bW4gKyBqLCBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZWxlY3Rpb24ocm93SW5kaWNlcywgY29sdW1uSW5kaWNlcykge1xuICAgIGxldCBpbmRpY2VzID0gY2hlY2tJbmRpY2VzKHRoaXMsIHJvd0luZGljZXMsIGNvbHVtbkluZGljZXMpO1xuICAgIGxldCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KHJvd0luZGljZXMubGVuZ3RoLCBjb2x1bW5JbmRpY2VzLmxlbmd0aCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRpY2VzLnJvdy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IHJvd0luZGV4ID0gaW5kaWNlcy5yb3dbaV07XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGluZGljZXMuY29sdW1uLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBjb2x1bW5JbmRleCA9IGluZGljZXMuY29sdW1uW2pdO1xuICAgICAgICBuZXdNYXRyaXguc2V0KGksIGosIHRoaXMuZ2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgdHJhY2UoKSB7XG4gICAgbGV0IG1pbiA9IE1hdGgubWluKHRoaXMucm93cywgdGhpcy5jb2x1bW5zKTtcbiAgICBsZXQgdHJhY2UgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWluOyBpKyspIHtcbiAgICAgIHRyYWNlICs9IHRoaXMuZ2V0KGksIGkpO1xuICAgIH1cbiAgICByZXR1cm4gdHJhY2U7XG4gIH1cblxuICBjbG9uZSgpIHtcbiAgICBsZXQgbmV3TWF0cml4ID0gbmV3IE1hdHJpeCh0aGlzLnJvd3MsIHRoaXMuY29sdW1ucyk7XG4gICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5yb3dzOyByb3crKykge1xuICAgICAgZm9yIChsZXQgY29sdW1uID0gMDsgY29sdW1uIDwgdGhpcy5jb2x1bW5zOyBjb2x1bW4rKykge1xuICAgICAgICBuZXdNYXRyaXguc2V0KHJvdywgY29sdW1uLCB0aGlzLmdldChyb3csIGNvbHVtbikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbmV3TWF0cml4O1xuICB9XG5cbiAgc3VtKGJ5KSB7XG4gICAgc3dpdGNoIChieSkge1xuICAgICAgY2FzZSAncm93JzpcbiAgICAgICAgcmV0dXJuIHN1bUJ5Um93KHRoaXMpO1xuICAgICAgY2FzZSAnY29sdW1uJzpcbiAgICAgICAgcmV0dXJuIHN1bUJ5Q29sdW1uKHRoaXMpO1xuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiBzdW1BbGwodGhpcyk7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgb3B0aW9uOiAke2J5fWApO1xuICAgIH1cbiAgfVxuXG4gIHByb2R1Y3QoYnkpIHtcbiAgICBzd2l0Y2ggKGJ5KSB7XG4gICAgICBjYXNlICdyb3cnOlxuICAgICAgICByZXR1cm4gcHJvZHVjdEJ5Um93KHRoaXMpO1xuICAgICAgY2FzZSAnY29sdW1uJzpcbiAgICAgICAgcmV0dXJuIHByb2R1Y3RCeUNvbHVtbih0aGlzKTtcbiAgICAgIGNhc2UgdW5kZWZpbmVkOlxuICAgICAgICByZXR1cm4gcHJvZHVjdEFsbCh0aGlzKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG5cbiAgbWVhbihieSkge1xuICAgIGNvbnN0IHN1bSA9IHRoaXMuc3VtKGJ5KTtcbiAgICBzd2l0Y2ggKGJ5KSB7XG4gICAgICBjYXNlICdyb3cnOiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgICAgICBzdW1baV0gLz0gdGhpcy5jb2x1bW5zO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgICB9XG4gICAgICBjYXNlICdjb2x1bW4nOiB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb2x1bW5zOyBpKyspIHtcbiAgICAgICAgICBzdW1baV0gLz0gdGhpcy5yb3dzO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdW07XG4gICAgICB9XG4gICAgICBjYXNlIHVuZGVmaW5lZDpcbiAgICAgICAgcmV0dXJuIHN1bSAvIHRoaXMuc2l6ZTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG5cbiAgdmFyaWFuY2UoYnksIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgYnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gYnk7XG4gICAgICBieSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCB7IHVuYmlhc2VkID0gdHJ1ZSwgbWVhbiA9IHRoaXMubWVhbihieSkgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHR5cGVvZiB1bmJpYXNlZCAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmJpYXNlZCBtdXN0IGJlIGEgYm9vbGVhbicpO1xuICAgIH1cbiAgICBzd2l0Y2ggKGJ5KSB7XG4gICAgICBjYXNlICdyb3cnOiB7XG4gICAgICAgIGlmICghQXJyYXkuaXNBcnJheShtZWFuKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21lYW4gbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJpYW5jZUJ5Um93KHRoaXMsIHVuYmlhc2VkLCBtZWFuKTtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbHVtbic6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1lYW4pKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbWVhbiBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhcmlhbmNlQnlDb2x1bW4odGhpcywgdW5iaWFzZWQsIG1lYW4pO1xuICAgICAgfVxuICAgICAgY2FzZSB1bmRlZmluZWQ6IHtcbiAgICAgICAgaWYgKHR5cGVvZiBtZWFuICE9PSAnbnVtYmVyJykge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ21lYW4gbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YXJpYW5jZUFsbCh0aGlzLCB1bmJpYXNlZCwgbWVhbik7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgb3B0aW9uOiAke2J5fWApO1xuICAgIH1cbiAgfVxuXG4gIHN0YW5kYXJkRGV2aWF0aW9uKGJ5LCBvcHRpb25zKSB7XG4gICAgaWYgKHR5cGVvZiBieSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSBieTtcbiAgICAgIGJ5ID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBjb25zdCB2YXJpYW5jZSA9IHRoaXMudmFyaWFuY2UoYnksIG9wdGlvbnMpO1xuICAgIGlmIChieSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm4gTWF0aC5zcXJ0KHZhcmlhbmNlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YXJpYW5jZS5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXJpYW5jZVtpXSA9IE1hdGguc3FydCh2YXJpYW5jZVtpXSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdmFyaWFuY2U7XG4gICAgfVxuICB9XG5cbiAgY2VudGVyKGJ5LCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAodHlwZW9mIGJ5ID09PSAnb2JqZWN0Jykge1xuICAgICAgb3B0aW9ucyA9IGJ5O1xuICAgICAgYnkgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyAhPT0gJ29iamVjdCcpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbnMgbXVzdCBiZSBhbiBvYmplY3QnKTtcbiAgICB9XG4gICAgY29uc3QgeyBjZW50ZXIgPSB0aGlzLm1lYW4oYnkpIH0gPSBvcHRpb25zO1xuICAgIHN3aXRjaCAoYnkpIHtcbiAgICAgIGNhc2UgJ3Jvdyc6IHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNlbnRlcikpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjZW50ZXIgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIGNlbnRlckJ5Um93KHRoaXMsIGNlbnRlcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgfVxuICAgICAgY2FzZSAnY29sdW1uJzoge1xuICAgICAgICBpZiAoIUFycmF5LmlzQXJyYXkoY2VudGVyKSkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NlbnRlciBtdXN0IGJlIGFuIGFycmF5Jyk7XG4gICAgICAgIH1cbiAgICAgICAgY2VudGVyQnlDb2x1bW4odGhpcywgY2VudGVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBjYXNlIHVuZGVmaW5lZDoge1xuICAgICAgICBpZiAodHlwZW9mIGNlbnRlciAhPT0gJ251bWJlcicpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdjZW50ZXIgbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIGNlbnRlckFsbCh0aGlzLCBjZW50ZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBvcHRpb246ICR7Ynl9YCk7XG4gICAgfVxuICB9XG5cbiAgc2NhbGUoYnksIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgYnkgPT09ICdvYmplY3QnKSB7XG4gICAgICBvcHRpb25zID0gYnk7XG4gICAgICBieSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9ucyBtdXN0IGJlIGFuIG9iamVjdCcpO1xuICAgIH1cbiAgICBsZXQgc2NhbGUgPSBvcHRpb25zLnNjYWxlO1xuICAgIHN3aXRjaCAoYnkpIHtcbiAgICAgIGNhc2UgJ3Jvdyc6IHtcbiAgICAgICAgaWYgKHNjYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzY2FsZSA9IGdldFNjYWxlQnlSb3codGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc2NhbGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2NhbGUgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlQnlSb3codGhpcywgc2NhbGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2NvbHVtbic6IHtcbiAgICAgICAgaWYgKHNjYWxlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzY2FsZSA9IGdldFNjYWxlQnlDb2x1bW4odGhpcyk7XG4gICAgICAgIH0gZWxzZSBpZiAoIUFycmF5LmlzQXJyYXkoc2NhbGUpKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2NhbGUgbXVzdCBiZSBhbiBhcnJheScpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlQnlDb2x1bW4odGhpcywgc2NhbGUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cbiAgICAgIGNhc2UgdW5kZWZpbmVkOiB7XG4gICAgICAgIGlmIChzY2FsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgc2NhbGUgPSBnZXRTY2FsZUFsbCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2Ygc2NhbGUgIT09ICdudW1iZXInKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignc2NhbGUgbXVzdCBiZSBhIG51bWJlcicpO1xuICAgICAgICB9XG4gICAgICAgIHNjYWxlQWxsKHRoaXMsIHNjYWxlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgb3B0aW9uOiAke2J5fWApO1xuICAgIH1cbiAgfVxuXG4gIHRvU3RyaW5nKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zcGVjdE1hdHJpeFdpdGhPcHRpb25zKHRoaXMsIG9wdGlvbnMpO1xuICB9XG59XG5cbkFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5rbGFzcyA9ICdNYXRyaXgnO1xuaWYgKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnKSB7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZVtcbiAgICBTeW1ib2wuZm9yKCdub2RlanMudXRpbC5pbnNwZWN0LmN1c3RvbScpXG4gIF0gPSBpbnNwZWN0TWF0cml4O1xufVxuXG5mdW5jdGlvbiBjb21wYXJlTnVtYmVycyhhLCBiKSB7XG4gIHJldHVybiBhIC0gYjtcbn1cblxuLy8gU3lub255bXNcbkFic3RyYWN0TWF0cml4LnJhbmRvbSA9IEFic3RyYWN0TWF0cml4LnJhbmQ7XG5BYnN0cmFjdE1hdHJpeC5yYW5kb21JbnQgPSBBYnN0cmFjdE1hdHJpeC5yYW5kSW50O1xuQWJzdHJhY3RNYXRyaXguZGlhZ29uYWwgPSBBYnN0cmFjdE1hdHJpeC5kaWFnO1xuQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpYWdvbmFsID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpYWc7XG5BYnN0cmFjdE1hdHJpeC5pZGVudGl0eSA9IEFic3RyYWN0TWF0cml4LmV5ZTtcbkFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5uZWdhdGUgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubmVnO1xuQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnRlbnNvclByb2R1Y3QgPVxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUua3JvbmVja2VyUHJvZHVjdDtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWF0cml4IGV4dGVuZHMgQWJzdHJhY3RNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihuUm93cywgbkNvbHVtbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIGlmIChNYXRyaXguaXNNYXRyaXgoblJvd3MpKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc3RydWN0b3ItcmV0dXJuXG4gICAgICByZXR1cm4gblJvd3MuY2xvbmUoKTtcbiAgICB9IGVsc2UgaWYgKE51bWJlci5pc0ludGVnZXIoblJvd3MpICYmIG5Sb3dzID49IDApIHtcbiAgICAgIC8vIENyZWF0ZSBhbiBlbXB0eSBtYXRyaXhcbiAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgaWYgKE51bWJlci5pc0ludGVnZXIobkNvbHVtbnMpICYmIG5Db2x1bW5zID49IDApIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuUm93czsgaSsrKSB7XG4gICAgICAgICAgdGhpcy5kYXRhLnB1c2gobmV3IEZsb2F0NjRBcnJheShuQ29sdW1ucykpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCduQ29sdW1ucyBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcicpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShuUm93cykpIHtcbiAgICAgIC8vIENvcHkgdGhlIHZhbHVlcyBmcm9tIHRoZSAyRCBhcnJheVxuICAgICAgY29uc3QgYXJyYXlEYXRhID0gblJvd3M7XG4gICAgICBuUm93cyA9IGFycmF5RGF0YS5sZW5ndGg7XG4gICAgICBuQ29sdW1ucyA9IG5Sb3dzID8gYXJyYXlEYXRhWzBdLmxlbmd0aCA6IDA7XG4gICAgICBpZiAodHlwZW9mIG5Db2x1bW5zICE9PSAnbnVtYmVyJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgICdEYXRhIG11c3QgYmUgYSAyRCBhcnJheSB3aXRoIGF0IGxlYXN0IG9uZSBlbGVtZW50JyxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YSA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuUm93czsgaSsrKSB7XG4gICAgICAgIGlmIChhcnJheURhdGFbaV0ubGVuZ3RoICE9PSBuQ29sdW1ucykge1xuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmNvbnNpc3RlbnQgYXJyYXkgZGltZW5zaW9ucycpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGF0YS5wdXNoKEZsb2F0NjRBcnJheS5mcm9tKGFycmF5RGF0YVtpXSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnRmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlciBvciBhbiBhcnJheScsXG4gICAgICApO1xuICAgIH1cbiAgICB0aGlzLnJvd3MgPSBuUm93cztcbiAgICB0aGlzLmNvbHVtbnMgPSBuQ29sdW1ucztcbiAgfVxuXG4gIHNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHZhbHVlKSB7XG4gICAgdGhpcy5kYXRhW3Jvd0luZGV4XVtjb2x1bW5JbmRleF0gPSB2YWx1ZTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChyb3dJbmRleCwgY29sdW1uSW5kZXgpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW3Jvd0luZGV4XVtjb2x1bW5JbmRleF07XG4gIH1cblxuICByZW1vdmVSb3coaW5kZXgpIHtcbiAgICBjaGVja1Jvd0luZGV4KHRoaXMsIGluZGV4KTtcbiAgICB0aGlzLmRhdGEuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB0aGlzLnJvd3MgLT0gMTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGFkZFJvdyhpbmRleCwgYXJyYXkpIHtcbiAgICBpZiAoYXJyYXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYXJyYXkgPSBpbmRleDtcbiAgICAgIGluZGV4ID0gdGhpcy5yb3dzO1xuICAgIH1cbiAgICBjaGVja1Jvd0luZGV4KHRoaXMsIGluZGV4LCB0cnVlKTtcbiAgICBhcnJheSA9IEZsb2F0NjRBcnJheS5mcm9tKGNoZWNrUm93VmVjdG9yKHRoaXMsIGFycmF5KSk7XG4gICAgdGhpcy5kYXRhLnNwbGljZShpbmRleCwgMCwgYXJyYXkpO1xuICAgIHRoaXMucm93cyArPSAxO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgcmVtb3ZlQ29sdW1uKGluZGV4KSB7XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29uc3QgbmV3Um93ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmNvbHVtbnMgLSAxKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgICBuZXdSb3dbal0gPSB0aGlzLmRhdGFbaV1bal07XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gaW5kZXggKyAxOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgbmV3Um93W2ogLSAxXSA9IHRoaXMuZGF0YVtpXVtqXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YVtpXSA9IG5ld1JvdztcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5zIC09IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBhZGRDb2x1bW4oaW5kZXgsIGFycmF5KSB7XG4gICAgaWYgKHR5cGVvZiBhcnJheSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGFycmF5ID0gaW5kZXg7XG4gICAgICBpbmRleCA9IHRoaXMuY29sdW1ucztcbiAgICB9XG4gICAgY2hlY2tDb2x1bW5JbmRleCh0aGlzLCBpbmRleCwgdHJ1ZSk7XG4gICAgYXJyYXkgPSBjaGVja0NvbHVtblZlY3Rvcih0aGlzLCBhcnJheSk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgY29uc3QgbmV3Um93ID0gbmV3IEZsb2F0NjRBcnJheSh0aGlzLmNvbHVtbnMgKyAxKTtcbiAgICAgIGxldCBqID0gMDtcbiAgICAgIGZvciAoOyBqIDwgaW5kZXg7IGorKykge1xuICAgICAgICBuZXdSb3dbal0gPSB0aGlzLmRhdGFbaV1bal07XG4gICAgICB9XG4gICAgICBuZXdSb3dbaisrXSA9IGFycmF5W2ldO1xuICAgICAgZm9yICg7IGogPCB0aGlzLmNvbHVtbnMgKyAxOyBqKyspIHtcbiAgICAgICAgbmV3Um93W2pdID0gdGhpcy5kYXRhW2ldW2ogLSAxXTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZGF0YVtpXSA9IG5ld1JvdztcbiAgICB9XG4gICAgdGhpcy5jb2x1bW5zICs9IDE7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuaW5zdGFsbE1hdGhPcGVyYXRpb25zKEFic3RyYWN0TWF0cml4LCBNYXRyaXgpO1xuIiwiaW1wb3J0IHsgbmV3QXJyYXkgfSBmcm9tICcuL3V0aWwnO1xuXG5leHBvcnQgZnVuY3Rpb24gc3VtQnlSb3cobWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXgucm93cyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2ldICs9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzdW1CeUNvbHVtbihtYXRyaXgpIHtcbiAgbGV0IHN1bSA9IG5ld0FycmF5KG1hdHJpeC5jb2x1bW5zKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgKytpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgKytqKSB7XG4gICAgICBzdW1bal0gKz0gbWF0cml4LmdldChpLCBqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHN1bTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHN1bUFsbChtYXRyaXgpIHtcbiAgbGV0IHYgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIHYgKz0gbWF0cml4LmdldChpLCBqKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHY7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QnlSb3cobWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXgucm93cywgMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2ldICo9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QnlDb2x1bW4obWF0cml4KSB7XG4gIGxldCBzdW0gPSBuZXdBcnJheShtYXRyaXguY29sdW1ucywgMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7ICsraSkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7ICsraikge1xuICAgICAgc3VtW2pdICo9IG1hdHJpeC5nZXQoaSwgaik7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdW07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9kdWN0QWxsKG1hdHJpeCkge1xuICBsZXQgdiA9IDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgdiAqPSBtYXRyaXguZ2V0KGksIGopO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZhcmlhbmNlQnlSb3cobWF0cml4LCB1bmJpYXNlZCwgbWVhbikge1xuICBjb25zdCByb3dzID0gbWF0cml4LnJvd3M7XG4gIGNvbnN0IGNvbHMgPSBtYXRyaXguY29sdW1ucztcbiAgY29uc3QgdmFyaWFuY2UgPSBbXTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgIGxldCBzdW0xID0gMDtcbiAgICBsZXQgc3VtMiA9IDA7XG4gICAgbGV0IHggPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29sczsgaisrKSB7XG4gICAgICB4ID0gbWF0cml4LmdldChpLCBqKSAtIG1lYW5baV07XG4gICAgICBzdW0xICs9IHg7XG4gICAgICBzdW0yICs9IHggKiB4O1xuICAgIH1cbiAgICBpZiAodW5iaWFzZWQpIHtcbiAgICAgIHZhcmlhbmNlLnB1c2goKHN1bTIgLSAoc3VtMSAqIHN1bTEpIC8gY29scykgLyAoY29scyAtIDEpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyaWFuY2UucHVzaCgoc3VtMiAtIChzdW0xICogc3VtMSkgLyBjb2xzKSAvIGNvbHMpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdmFyaWFuY2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YXJpYW5jZUJ5Q29sdW1uKG1hdHJpeCwgdW5iaWFzZWQsIG1lYW4pIHtcbiAgY29uc3Qgcm93cyA9IG1hdHJpeC5yb3dzO1xuICBjb25zdCBjb2xzID0gbWF0cml4LmNvbHVtbnM7XG4gIGNvbnN0IHZhcmlhbmNlID0gW107XG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICBsZXQgc3VtMSA9IDA7XG4gICAgbGV0IHN1bTIgPSAwO1xuICAgIGxldCB4ID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJvd3M7IGkrKykge1xuICAgICAgeCA9IG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuW2pdO1xuICAgICAgc3VtMSArPSB4O1xuICAgICAgc3VtMiArPSB4ICogeDtcbiAgICB9XG4gICAgaWYgKHVuYmlhc2VkKSB7XG4gICAgICB2YXJpYW5jZS5wdXNoKChzdW0yIC0gKHN1bTEgKiBzdW0xKSAvIHJvd3MpIC8gKHJvd3MgLSAxKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhcmlhbmNlLnB1c2goKHN1bTIgLSAoc3VtMSAqIHN1bTEpIC8gcm93cykgLyByb3dzKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHZhcmlhbmNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFyaWFuY2VBbGwobWF0cml4LCB1bmJpYXNlZCwgbWVhbikge1xuICBjb25zdCByb3dzID0gbWF0cml4LnJvd3M7XG4gIGNvbnN0IGNvbHMgPSBtYXRyaXguY29sdW1ucztcbiAgY29uc3Qgc2l6ZSA9IHJvd3MgKiBjb2xzO1xuXG4gIGxldCBzdW0xID0gMDtcbiAgbGV0IHN1bTIgPSAwO1xuICBsZXQgeCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjb2xzOyBqKyspIHtcbiAgICAgIHggPSBtYXRyaXguZ2V0KGksIGopIC0gbWVhbjtcbiAgICAgIHN1bTEgKz0geDtcbiAgICAgIHN1bTIgKz0geCAqIHg7XG4gICAgfVxuICB9XG4gIGlmICh1bmJpYXNlZCkge1xuICAgIHJldHVybiAoc3VtMiAtIChzdW0xICogc3VtMSkgLyBzaXplKSAvIChzaXplIC0gMSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIChzdW0yIC0gKHN1bTEgKiBzdW0xKSAvIHNpemUpIC8gc2l6ZTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2VudGVyQnlSb3cobWF0cml4LCBtZWFuKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgbWF0cml4LnNldChpLCBqLCBtYXRyaXguZ2V0KGksIGopIC0gbWVhbltpXSk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjZW50ZXJCeUNvbHVtbihtYXRyaXgsIG1lYW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGosIG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuW2pdKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNlbnRlckFsbChtYXRyaXgsIG1lYW4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgICBtYXRyaXguc2V0KGksIGosIG1hdHJpeC5nZXQoaSwgaikgLSBtZWFuKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQnlSb3cobWF0cml4KSB7XG4gIGNvbnN0IHNjYWxlID0gW107XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgc3VtICs9IE1hdGgucG93KG1hdHJpeC5nZXQoaSwgaiksIDIpIC8gKG1hdHJpeC5jb2x1bW5zIC0gMSk7XG4gICAgfVxuICAgIHNjYWxlLnB1c2goTWF0aC5zcXJ0KHN1bSkpO1xuICB9XG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQnlSb3cobWF0cml4LCBzY2FsZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgaiwgbWF0cml4LmdldChpLCBqKSAvIHNjYWxlW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQnlDb2x1bW4obWF0cml4KSB7XG4gIGNvbnN0IHNjYWxlID0gW107XG4gIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgIGxldCBzdW0gPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgICAgc3VtICs9IE1hdGgucG93KG1hdHJpeC5nZXQoaSwgaiksIDIpIC8gKG1hdHJpeC5yb3dzIC0gMSk7XG4gICAgfVxuICAgIHNjYWxlLnB1c2goTWF0aC5zcXJ0KHN1bSkpO1xuICB9XG4gIHJldHVybiBzY2FsZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNjYWxlQnlDb2x1bW4obWF0cml4LCBzY2FsZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hdHJpeC5yb3dzOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hdHJpeC5jb2x1bW5zOyBqKyspIHtcbiAgICAgIG1hdHJpeC5zZXQoaSwgaiwgbWF0cml4LmdldChpLCBqKSAvIHNjYWxlW2pdKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFNjYWxlQWxsKG1hdHJpeCkge1xuICBjb25zdCBkaXZpZGVyID0gbWF0cml4LnNpemUgLSAxO1xuICBsZXQgc3VtID0gMDtcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBtYXRyaXguY29sdW1uczsgaisrKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBtYXRyaXgucm93czsgaSsrKSB7XG4gICAgICBzdW0gKz0gTWF0aC5wb3cobWF0cml4LmdldChpLCBqKSwgMikgLyBkaXZpZGVyO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5zcXJ0KHN1bSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzY2FsZUFsbChtYXRyaXgsIHNjYWxlKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbWF0cml4LnJvd3M7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgbWF0cml4LmNvbHVtbnM7IGorKykge1xuICAgICAgbWF0cml4LnNldChpLCBqLCBtYXRyaXguZ2V0KGksIGopIC8gc2NhbGUpO1xuICAgIH1cbiAgfVxufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGluc3RhbGxNYXRoT3BlcmF0aW9ucyhBYnN0cmFjdE1hdHJpeCwgTWF0cml4KSB7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMuYWRkUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuYWRkTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFkZFMgPSBmdW5jdGlvbiBhZGRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSArIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFkZE0gPSBmdW5jdGlvbiBhZGRNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgKyBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYWRkID0gZnVuY3Rpb24gYWRkKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hZGQodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zdWIgPSBmdW5jdGlvbiBzdWIodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMuc3ViUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMuc3ViTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1YlMgPSBmdW5jdGlvbiBzdWJTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAtIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1Yk0gPSBmdW5jdGlvbiBzdWJNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgLSBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc3ViID0gZnVuY3Rpb24gc3ViKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5zdWIodmFsdWUpO1xuICB9O1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3VidHJhY3QgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3ViO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3VidHJhY3RTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnN1YlM7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zdWJ0cmFjdE0gPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc3ViTTtcbiAgQWJzdHJhY3RNYXRyaXguc3VidHJhY3QgPSBBYnN0cmFjdE1hdHJpeC5zdWI7XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm11bCA9IGZ1bmN0aW9uIG11bCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5tdWxTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5tdWxNKHZhbHVlKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsUyA9IGZ1bmN0aW9uIG11bFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICogdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsTSA9IGZ1bmN0aW9uIG11bE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAqIG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5tdWwgPSBmdW5jdGlvbiBtdWwobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4Lm11bCh2YWx1ZSk7XG4gIH07XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWx0aXBseSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWw7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWx0aXBseVMgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubXVsUztcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm11bHRpcGx5TSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tdWxNO1xuICBBYnN0cmFjdE1hdHJpeC5tdWx0aXBseSA9IEFic3RyYWN0TWF0cml4Lm11bDtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuZGl2ID0gZnVuY3Rpb24gZGl2KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLmRpdlModmFsdWUpO1xuICAgIHJldHVybiB0aGlzLmRpdk0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZTID0gZnVuY3Rpb24gZGl2Uyh2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgLyB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZNID0gZnVuY3Rpb24gZGl2TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIC8gbWF0cml4LmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmRpdiA9IGZ1bmN0aW9uIGRpdihtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguZGl2KHZhbHVlKTtcbiAgfTtcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdmlkZSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXY7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZpZGVTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdlM7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5kaXZpZGVNID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmRpdk07XG4gIEFic3RyYWN0TWF0cml4LmRpdmlkZSA9IEFic3RyYWN0TWF0cml4LmRpdjtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kID0gZnVuY3Rpb24gbW9kKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLm1vZFModmFsdWUpO1xuICAgIHJldHVybiB0aGlzLm1vZE0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tb2RTID0gZnVuY3Rpb24gbW9kUyh2YWx1ZSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgJSB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5tb2RNID0gZnVuY3Rpb24gbW9kTShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICUgbWF0cml4LmdldChpLCBqKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4Lm1vZCA9IGZ1bmN0aW9uIG1vZChtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubW9kKHZhbHVlKTtcbiAgfTtcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZHVsdXMgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kdWx1c1MgPSBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubW9kUztcbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZHVsdXNNID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm1vZE07XG4gIEFic3RyYWN0TWF0cml4Lm1vZHVsdXMgPSBBYnN0cmFjdE1hdHJpeC5tb2Q7XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFuZCA9IGZ1bmN0aW9uIGFuZCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5hbmRTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5hbmRNKHZhbHVlKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYW5kUyA9IGZ1bmN0aW9uIGFuZFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopICYgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYW5kTSA9IGZ1bmN0aW9uIGFuZE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSAmIG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hbmQgPSBmdW5jdGlvbiBhbmQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFuZCh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLm9yID0gZnVuY3Rpb24gb3IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMub3JTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5vck0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5vclMgPSBmdW5jdGlvbiBvclModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIHwgdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUub3JNID0gZnVuY3Rpb24gb3JNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgfCBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgub3IgPSBmdW5jdGlvbiBvcihtYXRyaXgsIHZhbHVlKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgub3IodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS54b3IgPSBmdW5jdGlvbiB4b3IodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMueG9yUyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMueG9yTSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnhvclMgPSBmdW5jdGlvbiB4b3JTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSBeIHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnhvck0gPSBmdW5jdGlvbiB4b3JNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgdGhpcy5nZXQoaSwgaikgXiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgueG9yID0gZnVuY3Rpb24geG9yKG1hdHJpeCwgdmFsdWUpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC54b3IodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sZWZ0U2hpZnQgPSBmdW5jdGlvbiBsZWZ0U2hpZnQodmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMubGVmdFNoaWZ0Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMubGVmdFNoaWZ0TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmxlZnRTaGlmdFMgPSBmdW5jdGlvbiBsZWZ0U2hpZnRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA8PCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sZWZ0U2hpZnRNID0gZnVuY3Rpb24gbGVmdFNoaWZ0TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopIDw8IG1hdHJpeC5nZXQoaSwgaikpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5sZWZ0U2hpZnQgPSBmdW5jdGlvbiBsZWZ0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxlZnRTaGlmdCh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQgPSBmdW5jdGlvbiBzaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0KHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHJldHVybiB0aGlzLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRTKHZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy5zaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRTID0gZnVuY3Rpb24gc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdFModmFsdWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopID4+IHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnRNID0gZnVuY3Rpb24gc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdE0obWF0cml4KSB7XG4gICAgbWF0cml4ID0gTWF0cml4LmNoZWNrTWF0cml4KG1hdHJpeCk7XG4gICAgaWYgKHRoaXMucm93cyAhPT0gbWF0cml4LnJvd3MgfHxcbiAgICAgIHRoaXMuY29sdW1ucyAhPT0gbWF0cml4LmNvbHVtbnMpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdNYXRyaWNlcyBkaW1lbnNpb25zIG11c3QgYmUgZXF1YWwnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA+PiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdCA9IGZ1bmN0aW9uIHNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpZ25Qcm9wYWdhdGluZ1JpZ2h0U2hpZnQodmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0ID0gZnVuY3Rpb24gcmlnaHRTaGlmdCh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSByZXR1cm4gdGhpcy5yaWdodFNoaWZ0Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucmlnaHRTaGlmdE0odmFsdWUpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0UyA9IGZ1bmN0aW9uIHJpZ2h0U2hpZnRTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCB0aGlzLmdldChpLCBqKSA+Pj4gdmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUucmlnaHRTaGlmdE0gPSBmdW5jdGlvbiByaWdodFNoaWZ0TShtYXRyaXgpIHtcbiAgICBtYXRyaXggPSBNYXRyaXguY2hlY2tNYXRyaXgobWF0cml4KTtcbiAgICBpZiAodGhpcy5yb3dzICE9PSBtYXRyaXgucm93cyB8fFxuICAgICAgdGhpcy5jb2x1bW5zICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ01hdHJpY2VzIGRpbWVuc2lvbnMgbXVzdCBiZSBlcXVhbCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIHRoaXMuZ2V0KGksIGopID4+PiBtYXRyaXguZ2V0KGksIGopKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucmlnaHRTaGlmdCA9IGZ1bmN0aW9uIHJpZ2h0U2hpZnQobWF0cml4LCB2YWx1ZSkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnJpZ2h0U2hpZnQodmFsdWUpO1xuICB9O1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuemVyb0ZpbGxSaWdodFNoaWZ0ID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnJpZ2h0U2hpZnQ7XG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS56ZXJvRmlsbFJpZ2h0U2hpZnRTID0gQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnJpZ2h0U2hpZnRTO1xuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuemVyb0ZpbGxSaWdodFNoaWZ0TSA9IEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yaWdodFNoaWZ0TTtcbiAgQWJzdHJhY3RNYXRyaXguemVyb0ZpbGxSaWdodFNoaWZ0ID0gQWJzdHJhY3RNYXRyaXgucmlnaHRTaGlmdDtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubm90ID0gZnVuY3Rpb24gbm90KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgfih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5ub3QgPSBmdW5jdGlvbiBub3QobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubm90KCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFicyA9IGZ1bmN0aW9uIGFicygpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYWJzKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmFicyA9IGZ1bmN0aW9uIGFicyhtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hYnMoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYWNvcyA9IGZ1bmN0aW9uIGFjb3MoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmFjb3ModGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYWNvcyA9IGZ1bmN0aW9uIGFjb3MobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguYWNvcygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hY29zaCA9IGZ1bmN0aW9uIGFjb3NoKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5hY29zaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hY29zaCA9IGZ1bmN0aW9uIGFjb3NoKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFjb3NoKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmFzaW4gPSBmdW5jdGlvbiBhc2luKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5hc2luKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmFzaW4gPSBmdW5jdGlvbiBhc2luKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmFzaW4oKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuYXNpbmggPSBmdW5jdGlvbiBhc2luaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYXNpbmgodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguYXNpbmggPSBmdW5jdGlvbiBhc2luaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hc2luaCgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5hdGFuID0gZnVuY3Rpb24gYXRhbigpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguYXRhbih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5hdGFuID0gZnVuY3Rpb24gYXRhbihtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5hdGFuKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmF0YW5oID0gZnVuY3Rpb24gYXRhbmgoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmF0YW5oKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmF0YW5oID0gZnVuY3Rpb24gYXRhbmgobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguYXRhbmgoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuY2JydCA9IGZ1bmN0aW9uIGNicnQoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmNicnQodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguY2JydCA9IGZ1bmN0aW9uIGNicnQobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguY2JydCgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5jZWlsID0gZnVuY3Rpb24gY2VpbCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguY2VpbCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5jZWlsID0gZnVuY3Rpb24gY2VpbChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5jZWlsKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmNsejMyID0gZnVuY3Rpb24gY2x6MzIoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmNsejMyKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmNsejMyID0gZnVuY3Rpb24gY2x6MzIobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXguY2x6MzIoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuY29zID0gZnVuY3Rpb24gY29zKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5jb3ModGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguY29zID0gZnVuY3Rpb24gY29zKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmNvcygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5jb3NoID0gZnVuY3Rpb24gY29zaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguY29zaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5jb3NoID0gZnVuY3Rpb24gY29zaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5jb3NoKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmV4cCA9IGZ1bmN0aW9uIGV4cCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZXhwKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmV4cCA9IGZ1bmN0aW9uIGV4cChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5leHAoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuZXhwbTEgPSBmdW5jdGlvbiBleHBtMSgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZXhwbTEodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguZXhwbTEgPSBmdW5jdGlvbiBleHBtMShtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5leHBtMSgpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5mbG9vciA9IGZ1bmN0aW9uIGZsb29yKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5mbG9vcih0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5mbG9vciA9IGZ1bmN0aW9uIGZsb29yKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmZsb29yKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmZyb3VuZCA9IGZ1bmN0aW9uIGZyb3VuZCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguZnJvdW5kKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmZyb3VuZCA9IGZ1bmN0aW9uIGZyb3VuZChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5mcm91bmQoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubG9nID0gZnVuY3Rpb24gbG9nKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5sb2codGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgubG9nID0gZnVuY3Rpb24gbG9nKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxvZygpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5sb2cxcCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5sb2cxcCA9IGZ1bmN0aW9uIGxvZzFwKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LmxvZzFwKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLmxvZzEwID0gZnVuY3Rpb24gbG9nMTAoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmxvZzEwKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LmxvZzEwID0gZnVuY3Rpb24gbG9nMTAobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubG9nMTAoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUubG9nMiA9IGZ1bmN0aW9uIGxvZzIoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLmxvZzIodGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgubG9nMiA9IGZ1bmN0aW9uIGxvZzIobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgubG9nMigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5yb3VuZCA9IGZ1bmN0aW9uIHJvdW5kKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5yb3VuZCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5yb3VuZCA9IGZ1bmN0aW9uIHJvdW5kKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnJvdW5kKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNpZ24gPSBmdW5jdGlvbiBzaWduKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zaWduKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnNpZ24gPSBmdW5jdGlvbiBzaWduKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpZ24oKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUuc2luID0gZnVuY3Rpb24gc2luKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zaW4odGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXguc2luID0gZnVuY3Rpb24gc2luKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNpbigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5zaW5oID0gZnVuY3Rpb24gc2luaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGguc2luaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5zaW5oID0gZnVuY3Rpb24gc2luaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC5zaW5oKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnNxcnQgPSBmdW5jdGlvbiBzcXJ0KCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5zcXJ0KHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnNxcnQgPSBmdW5jdGlvbiBzcXJ0KG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnNxcnQoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wcm90b3R5cGUudGFuID0gZnVuY3Rpb24gdGFuKCkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC50YW4odGhpcy5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgudGFuID0gZnVuY3Rpb24gdGFuKG1hdHJpeCkge1xuICAgIGNvbnN0IG5ld01hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgICByZXR1cm4gbmV3TWF0cml4LnRhbigpO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS50YW5oID0gZnVuY3Rpb24gdGFuaCgpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMucm93czsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29sdW1uczsgaisrKSB7XG4gICAgICAgIHRoaXMuc2V0KGksIGosIE1hdGgudGFuaCh0aGlzLmdldChpLCBqKSkpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC50YW5oID0gZnVuY3Rpb24gdGFuaChtYXRyaXgpIHtcbiAgICBjb25zdCBuZXdNYXRyaXggPSBuZXcgTWF0cml4KG1hdHJpeCk7XG4gICAgcmV0dXJuIG5ld01hdHJpeC50YW5oKCk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnRydW5jID0gZnVuY3Rpb24gdHJ1bmMoKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLnRydW5jKHRoaXMuZ2V0KGksIGopKSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnRydW5jID0gZnVuY3Rpb24gdHJ1bmMobWF0cml4KSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgudHJ1bmMoKTtcbiAgfTtcblxuICBBYnN0cmFjdE1hdHJpeC5wb3cgPSBmdW5jdGlvbiBwb3cobWF0cml4LCBhcmcwKSB7XG4gICAgY29uc3QgbmV3TWF0cml4ID0gbmV3IE1hdHJpeChtYXRyaXgpO1xuICAgIHJldHVybiBuZXdNYXRyaXgucG93KGFyZzApO1xuICB9O1xuXG4gIEFic3RyYWN0TWF0cml4LnByb3RvdHlwZS5wb3cgPSBmdW5jdGlvbiBwb3codmFsdWUpIHtcbiAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJykgcmV0dXJuIHRoaXMucG93Uyh2YWx1ZSk7XG4gICAgcmV0dXJuIHRoaXMucG93TSh2YWx1ZSk7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnBvd1MgPSBmdW5jdGlvbiBwb3dTKHZhbHVlKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnJvd3M7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmNvbHVtbnM7IGorKykge1xuICAgICAgICB0aGlzLnNldChpLCBqLCBNYXRoLnBvdyh0aGlzLmdldChpLCBqKSwgdmFsdWUpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgQWJzdHJhY3RNYXRyaXgucHJvdG90eXBlLnBvd00gPSBmdW5jdGlvbiBwb3dNKG1hdHJpeCkge1xuICAgIG1hdHJpeCA9IE1hdHJpeC5jaGVja01hdHJpeChtYXRyaXgpO1xuICAgIGlmICh0aGlzLnJvd3MgIT09IG1hdHJpeC5yb3dzIHx8XG4gICAgICB0aGlzLmNvbHVtbnMgIT09IG1hdHJpeC5jb2x1bW5zKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignTWF0cmljZXMgZGltZW5zaW9ucyBtdXN0IGJlIGVxdWFsJyk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5yb3dzOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5jb2x1bW5zOyBqKyspIHtcbiAgICAgICAgdGhpcy5zZXQoaSwgaiwgTWF0aC5wb3codGhpcy5nZXQoaSwgaiksIG1hdHJpeC5nZXQoaSwgaikpKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG59XG4iLCIvKipcbiAqIEBwcml2YXRlXG4gKiBDaGVjayB0aGF0IGEgcm93IGluZGV4IGlzIG5vdCBvdXQgb2YgYm91bmRzXG4gKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gKiBAcGFyYW0ge251bWJlcn0gaW5kZXhcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW291dGVyXVxuICovXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSb3dJbmRleChtYXRyaXgsIGluZGV4LCBvdXRlcikge1xuICBsZXQgbWF4ID0gb3V0ZXIgPyBtYXRyaXgucm93cyA6IG1hdHJpeC5yb3dzIC0gMTtcbiAgaWYgKGluZGV4IDwgMCB8fCBpbmRleCA+IG1heCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdSb3cgaW5kZXggb3V0IG9mIHJhbmdlJyk7XG4gIH1cbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQ2hlY2sgdGhhdCBhIGNvbHVtbiBpbmRleCBpcyBub3Qgb3V0IG9mIGJvdW5kc1xuICogQHBhcmFtIHtNYXRyaXh9IG1hdHJpeFxuICogQHBhcmFtIHtudW1iZXJ9IGluZGV4XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvdXRlcl1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ29sdW1uSW5kZXgobWF0cml4LCBpbmRleCwgb3V0ZXIpIHtcbiAgbGV0IG1heCA9IG91dGVyID8gbWF0cml4LmNvbHVtbnMgOiBtYXRyaXguY29sdW1ucyAtIDE7XG4gIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPiBtYXgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQ29sdW1uIGluZGV4IG91dCBvZiByYW5nZScpO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIENoZWNrIHRoYXQgdGhlIHByb3ZpZGVkIHZlY3RvciBpcyBhbiBhcnJheSB3aXRoIHRoZSByaWdodCBsZW5ndGhcbiAqIEBwYXJhbSB7TWF0cml4fSBtYXRyaXhcbiAqIEBwYXJhbSB7QXJyYXl8TWF0cml4fSB2ZWN0b3JcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUm93VmVjdG9yKG1hdHJpeCwgdmVjdG9yKSB7XG4gIGlmICh2ZWN0b3IudG8xREFycmF5KSB7XG4gICAgdmVjdG9yID0gdmVjdG9yLnRvMURBcnJheSgpO1xuICB9XG4gIGlmICh2ZWN0b3IubGVuZ3RoICE9PSBtYXRyaXguY29sdW1ucykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgJ3ZlY3RvciBzaXplIG11c3QgYmUgdGhlIHNhbWUgYXMgdGhlIG51bWJlciBvZiBjb2x1bW5zJyxcbiAgICApO1xuICB9XG4gIHJldHVybiB2ZWN0b3I7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIENoZWNrIHRoYXQgdGhlIHByb3ZpZGVkIHZlY3RvciBpcyBhbiBhcnJheSB3aXRoIHRoZSByaWdodCBsZW5ndGhcbiAqIEBwYXJhbSB7TWF0cml4fSBtYXRyaXhcbiAqIEBwYXJhbSB7QXJyYXl8TWF0cml4fSB2ZWN0b3JcbiAqIEByZXR1cm4ge0FycmF5fVxuICogQHRocm93cyB7UmFuZ2VFcnJvcn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ29sdW1uVmVjdG9yKG1hdHJpeCwgdmVjdG9yKSB7XG4gIGlmICh2ZWN0b3IudG8xREFycmF5KSB7XG4gICAgdmVjdG9yID0gdmVjdG9yLnRvMURBcnJheSgpO1xuICB9XG4gIGlmICh2ZWN0b3IubGVuZ3RoICE9PSBtYXRyaXgucm93cykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd2ZWN0b3Igc2l6ZSBtdXN0IGJlIHRoZSBzYW1lIGFzIHRoZSBudW1iZXIgb2Ygcm93cycpO1xuICB9XG4gIHJldHVybiB2ZWN0b3I7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0luZGljZXMobWF0cml4LCByb3dJbmRpY2VzLCBjb2x1bW5JbmRpY2VzKSB7XG4gIHJldHVybiB7XG4gICAgcm93OiBjaGVja1Jvd0luZGljZXMobWF0cml4LCByb3dJbmRpY2VzKSxcbiAgICBjb2x1bW46IGNoZWNrQ29sdW1uSW5kaWNlcyhtYXRyaXgsIGNvbHVtbkluZGljZXMpLFxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tSb3dJbmRpY2VzKG1hdHJpeCwgcm93SW5kaWNlcykge1xuICBpZiAodHlwZW9mIHJvd0luZGljZXMgIT09ICdvYmplY3QnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndW5leHBlY3RlZCB0eXBlIGZvciByb3cgaW5kaWNlcycpO1xuICB9XG5cbiAgbGV0IHJvd091dCA9IHJvd0luZGljZXMuc29tZSgocikgPT4ge1xuICAgIHJldHVybiByIDwgMCB8fCByID49IG1hdHJpeC5yb3dzO1xuICB9KTtcblxuICBpZiAocm93T3V0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3JvdyBpbmRpY2VzIGFyZSBvdXQgb2YgcmFuZ2UnKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShyb3dJbmRpY2VzKSkgcm93SW5kaWNlcyA9IEFycmF5LmZyb20ocm93SW5kaWNlcyk7XG5cbiAgcmV0dXJuIHJvd0luZGljZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbHVtbkluZGljZXMobWF0cml4LCBjb2x1bW5JbmRpY2VzKSB7XG4gIGlmICh0eXBlb2YgY29sdW1uSW5kaWNlcyAhPT0gJ29iamVjdCcpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd1bmV4cGVjdGVkIHR5cGUgZm9yIGNvbHVtbiBpbmRpY2VzJyk7XG4gIH1cblxuICBsZXQgY29sdW1uT3V0ID0gY29sdW1uSW5kaWNlcy5zb21lKChjKSA9PiB7XG4gICAgcmV0dXJuIGMgPCAwIHx8IGMgPj0gbWF0cml4LmNvbHVtbnM7XG4gIH0pO1xuXG4gIGlmIChjb2x1bW5PdXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignY29sdW1uIGluZGljZXMgYXJlIG91dCBvZiByYW5nZScpO1xuICB9XG4gIGlmICghQXJyYXkuaXNBcnJheShjb2x1bW5JbmRpY2VzKSkgY29sdW1uSW5kaWNlcyA9IEFycmF5LmZyb20oY29sdW1uSW5kaWNlcyk7XG5cbiAgcmV0dXJuIGNvbHVtbkluZGljZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja1JhbmdlKG1hdHJpeCwgc3RhcnRSb3csIGVuZFJvdywgc3RhcnRDb2x1bW4sIGVuZENvbHVtbikge1xuICBpZiAoYXJndW1lbnRzLmxlbmd0aCAhPT0gNSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdleHBlY3RlZCA0IGFyZ3VtZW50cycpO1xuICB9XG4gIGNoZWNrTnVtYmVyKCdzdGFydFJvdycsIHN0YXJ0Um93KTtcbiAgY2hlY2tOdW1iZXIoJ2VuZFJvdycsIGVuZFJvdyk7XG4gIGNoZWNrTnVtYmVyKCdzdGFydENvbHVtbicsIHN0YXJ0Q29sdW1uKTtcbiAgY2hlY2tOdW1iZXIoJ2VuZENvbHVtbicsIGVuZENvbHVtbik7XG4gIGlmIChcbiAgICBzdGFydFJvdyA+IGVuZFJvdyB8fFxuICAgIHN0YXJ0Q29sdW1uID4gZW5kQ29sdW1uIHx8XG4gICAgc3RhcnRSb3cgPCAwIHx8XG4gICAgc3RhcnRSb3cgPj0gbWF0cml4LnJvd3MgfHxcbiAgICBlbmRSb3cgPCAwIHx8XG4gICAgZW5kUm93ID49IG1hdHJpeC5yb3dzIHx8XG4gICAgc3RhcnRDb2x1bW4gPCAwIHx8XG4gICAgc3RhcnRDb2x1bW4gPj0gbWF0cml4LmNvbHVtbnMgfHxcbiAgICBlbmRDb2x1bW4gPCAwIHx8XG4gICAgZW5kQ29sdW1uID49IG1hdHJpeC5jb2x1bW5zXG4gICkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdTdWJtYXRyaXggaW5kaWNlcyBhcmUgb3V0IG9mIHJhbmdlJyk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5ld0FycmF5KGxlbmd0aCwgdmFsdWUgPSAwKSB7XG4gIGxldCBhcnJheSA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgYXJyYXkucHVzaCh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5mdW5jdGlvbiBjaGVja051bWJlcihuYW1lLCB2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYCR7bmFtZX0gbXVzdCBiZSBhIG51bWJlcmApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja05vbkVtcHR5KG1hdHJpeCkge1xuICBpZiAobWF0cml4LmlzRW1wdHkoKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignRW1wdHkgbWF0cml4IGhhcyBubyBlbGVtZW50cyB0byBpbmRleCcpO1xuICB9XG59XG4iLCJpbXBvcnQgeyBBYnN0cmFjdE1hdHJpeCB9IGZyb20gJy4uL21hdHJpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VWaWV3IGV4dGVuZHMgQWJzdHJhY3RNYXRyaXgge1xuICBjb25zdHJ1Y3RvcihtYXRyaXgsIHJvd3MsIGNvbHVtbnMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMubWF0cml4ID0gbWF0cml4O1xuICAgIHRoaXMucm93cyA9IHJvd3M7XG4gICAgdGhpcy5jb2x1bW5zID0gY29sdW1ucztcbiAgfVxufVxuIiwiaW1wb3J0IEJhc2VWaWV3IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdHJpeFRyYW5zcG9zZVZpZXcgZXh0ZW5kcyBCYXNlVmlldyB7XG4gIGNvbnN0cnVjdG9yKG1hdHJpeCkge1xuICAgIHN1cGVyKG1hdHJpeCwgbWF0cml4LmNvbHVtbnMsIG1hdHJpeC5yb3dzKTtcbiAgfVxuXG4gIHNldChyb3dJbmRleCwgY29sdW1uSW5kZXgsIHZhbHVlKSB7XG4gICAgdGhpcy5tYXRyaXguc2V0KGNvbHVtbkluZGV4LCByb3dJbmRleCwgdmFsdWUpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZ2V0KHJvd0luZGV4LCBjb2x1bW5JbmRleCkge1xuICAgIHJldHVybiB0aGlzLm1hdHJpeC5nZXQoY29sdW1uSW5kZXgsIHJvd0luZGV4KTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgQWJzdHJhY3RNYXRyaXggfSBmcm9tICcuLi9tYXRyaXgnO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXcmFwcGVyTWF0cml4MkQgZXh0ZW5kcyBBYnN0cmFjdE1hdHJpeCB7XG4gIGNvbnN0cnVjdG9yKGRhdGEpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5yb3dzID0gZGF0YS5sZW5ndGg7XG4gICAgdGhpcy5jb2x1bW5zID0gZGF0YVswXS5sZW5ndGg7XG4gIH1cblxuICBzZXQocm93SW5kZXgsIGNvbHVtbkluZGV4LCB2YWx1ZSkge1xuICAgIHRoaXMuZGF0YVtyb3dJbmRleF1bY29sdW1uSW5kZXhdID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBnZXQocm93SW5kZXgsIGNvbHVtbkluZGV4KSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtyb3dJbmRleF1bY29sdW1uSW5kZXhdO1xuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IG5ld0FycmF5XG5cbmZ1bmN0aW9uIG5ld0FycmF5IChuLCB2YWx1ZSkge1xuICBuID0gbiB8fCAwXG4gIHZhciBhcnJheSA9IG5ldyBBcnJheShuKVxuICBmb3IgKHZhciBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGFycmF5W2ldID0gdmFsdWVcbiAgfVxuICByZXR1cm4gYXJyYXlcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gbmV4dFBvd2VyT2ZUd29cblxuZnVuY3Rpb24gbmV4dFBvd2VyT2ZUd28gKG4pIHtcbiAgaWYgKG4gPT09IDApIHJldHVybiAxXG4gIG4tLVxuICBuIHw9IG4gPj4gMVxuICBuIHw9IG4gPj4gMlxuICBuIHw9IG4gPj4gNFxuICBuIHw9IG4gPj4gOFxuICBuIHw9IG4gPj4gMTZcbiAgcmV0dXJuIG4rMVxufSIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gYXNzZXJ0TnVtYmVyKG51bWJlcikge1xuXHRpZiAodHlwZW9mIG51bWJlciAhPT0gJ251bWJlcicpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBhIG51bWJlcicpO1xuXHR9XG59XG5cbmV4cG9ydHMuYXNjZW5kaW5nID0gKGxlZnQsIHJpZ2h0KSA9PiB7XG5cdGFzc2VydE51bWJlcihsZWZ0KTtcblx0YXNzZXJ0TnVtYmVyKHJpZ2h0KTtcblxuXHRpZiAoTnVtYmVyLmlzTmFOKGxlZnQpKSB7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0aWYgKE51bWJlci5pc05hTihyaWdodCkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdHJldHVybiBsZWZ0IC0gcmlnaHQ7XG59O1xuXG5leHBvcnRzLmRlc2NlbmRpbmcgPSAobGVmdCwgcmlnaHQpID0+IHtcblx0YXNzZXJ0TnVtYmVyKGxlZnQpO1xuXHRhc3NlcnROdW1iZXIocmlnaHQpO1xuXG5cdGlmIChOdW1iZXIuaXNOYU4obGVmdCkpIHtcblx0XHRyZXR1cm4gMTtcblx0fVxuXG5cdGlmIChOdW1iZXIuaXNOYU4ocmlnaHQpKSB7XG5cdFx0cmV0dXJuIC0xO1xuXHR9XG5cblx0cmV0dXJuIHJpZ2h0IC0gbGVmdDtcbn07XG4iLCIvKlxub2JqZWN0LWFzc2lnblxuKGMpIFNpbmRyZSBTb3JodXNcbkBsaWNlbnNlIE1JVFxuKi9cblxuJ3VzZSBzdHJpY3QnO1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzO1xudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBwcm9wSXNFbnVtZXJhYmxlID0gT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuZnVuY3Rpb24gdG9PYmplY3QodmFsKSB7XG5cdGlmICh2YWwgPT09IG51bGwgfHwgdmFsID09PSB1bmRlZmluZWQpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKCdPYmplY3QuYXNzaWduIGNhbm5vdCBiZSBjYWxsZWQgd2l0aCBudWxsIG9yIHVuZGVmaW5lZCcpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdCh2YWwpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VOYXRpdmUoKSB7XG5cdHRyeSB7XG5cdFx0aWYgKCFPYmplY3QuYXNzaWduKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZWN0IGJ1Z2d5IHByb3BlcnR5IGVudW1lcmF0aW9uIG9yZGVyIGluIG9sZGVyIFY4IHZlcnNpb25zLlxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9NDExOFxuXHRcdHZhciB0ZXN0MSA9IG5ldyBTdHJpbmcoJ2FiYycpOyAgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1uZXctd3JhcHBlcnNcblx0XHR0ZXN0MVs1XSA9ICdkZSc7XG5cdFx0aWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRlc3QxKVswXSA9PT0gJzUnKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MiA9IHt9O1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgMTA7IGkrKykge1xuXHRcdFx0dGVzdDJbJ18nICsgU3RyaW5nLmZyb21DaGFyQ29kZShpKV0gPSBpO1xuXHRcdH1cblx0XHR2YXIgb3JkZXIyID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDIpLm1hcChmdW5jdGlvbiAobikge1xuXHRcdFx0cmV0dXJuIHRlc3QyW25dO1xuXHRcdH0pO1xuXHRcdGlmIChvcmRlcjIuam9pbignJykgIT09ICcwMTIzNDU2Nzg5Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdC8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC92OC9pc3N1ZXMvZGV0YWlsP2lkPTMwNTZcblx0XHR2YXIgdGVzdDMgPSB7fTtcblx0XHQnYWJjZGVmZ2hpamtsbW5vcHFyc3QnLnNwbGl0KCcnKS5mb3JFYWNoKGZ1bmN0aW9uIChsZXR0ZXIpIHtcblx0XHRcdHRlc3QzW2xldHRlcl0gPSBsZXR0ZXI7XG5cdFx0fSk7XG5cdFx0aWYgKE9iamVjdC5rZXlzKE9iamVjdC5hc3NpZ24oe30sIHRlc3QzKSkuam9pbignJykgIT09XG5cdFx0XHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSBjYXRjaCAoZXJyKSB7XG5cdFx0Ly8gV2UgZG9uJ3QgZXhwZWN0IGFueSBvZiB0aGUgYWJvdmUgdG8gdGhyb3csIGJ1dCBiZXR0ZXIgdG8gYmUgc2FmZS5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzaG91bGRVc2VOYXRpdmUoKSA/IE9iamVjdC5hc3NpZ24gOiBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcblx0dmFyIGZyb207XG5cdHZhciB0byA9IHRvT2JqZWN0KHRhcmdldCk7XG5cdHZhciBzeW1ib2xzO1xuXG5cdGZvciAodmFyIHMgPSAxOyBzIDwgYXJndW1lbnRzLmxlbmd0aDsgcysrKSB7XG5cdFx0ZnJvbSA9IE9iamVjdChhcmd1bWVudHNbc10pO1xuXG5cdFx0Zm9yICh2YXIga2V5IGluIGZyb20pIHtcblx0XHRcdGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKGZyb20sIGtleSkpIHtcblx0XHRcdFx0dG9ba2V5XSA9IGZyb21ba2V5XTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG5cdFx0XHRzeW1ib2xzID0gZ2V0T3duUHJvcGVydHlTeW1ib2xzKGZyb20pO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzeW1ib2xzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChwcm9wSXNFbnVtZXJhYmxlLmNhbGwoZnJvbSwgc3ltYm9sc1tpXSkpIHtcblx0XHRcdFx0XHR0b1tzeW1ib2xzW2ldXSA9IGZyb21bc3ltYm9sc1tpXV07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdG87XG59O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNy4wLjJcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPTYwMTAzLHA9NjAxMDY7ZXhwb3J0cy5GcmFnbWVudD02MDEwNztleHBvcnRzLlN0cmljdE1vZGU9NjAxMDg7ZXhwb3J0cy5Qcm9maWxlcj02MDExNDt2YXIgcT02MDEwOSxyPTYwMTEwLHQ9NjAxMTI7ZXhwb3J0cy5TdXNwZW5zZT02MDExMzt2YXIgdT02MDExNSx2PTYwMTE2O1xuaWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcil7dmFyIHc9U3ltYm9sLmZvcjtuPXcoXCJyZWFjdC5lbGVtZW50XCIpO3A9dyhcInJlYWN0LnBvcnRhbFwiKTtleHBvcnRzLkZyYWdtZW50PXcoXCJyZWFjdC5mcmFnbWVudFwiKTtleHBvcnRzLlN0cmljdE1vZGU9dyhcInJlYWN0LnN0cmljdF9tb2RlXCIpO2V4cG9ydHMuUHJvZmlsZXI9dyhcInJlYWN0LnByb2ZpbGVyXCIpO3E9dyhcInJlYWN0LnByb3ZpZGVyXCIpO3I9dyhcInJlYWN0LmNvbnRleHRcIik7dD13KFwicmVhY3QuZm9yd2FyZF9yZWZcIik7ZXhwb3J0cy5TdXNwZW5zZT13KFwicmVhY3Quc3VzcGVuc2VcIik7dT13KFwicmVhY3QubWVtb1wiKTt2PXcoXCJyZWFjdC5sYXp5XCIpfXZhciB4PVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtcbmZ1bmN0aW9uIHkoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXgmJmFbeF18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiB6KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEE9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEI9e307ZnVuY3Rpb24gQyhhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1CO3RoaXMudXBkYXRlcj1jfHxBfUMucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Qy5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKHooODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0MucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRCgpe31ELnByb3RvdHlwZT1DLnByb3RvdHlwZTtmdW5jdGlvbiBFKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUI7dGhpcy51cGRhdGVyPWN8fEF9dmFyIEY9RS5wcm90b3R5cGU9bmV3IEQ7Ri5jb25zdHJ1Y3Rvcj1FO2woRixDLnByb3RvdHlwZSk7Ri5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgRz17Y3VycmVudDpudWxsfSxIPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksST17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gSihhLGIsYyl7dmFyIGUsZD17fSxrPW51bGwsaD1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihoPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGs9XCJcIitiLmtleSksYilILmNhbGwoYixlKSYmIUkuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBnPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZylkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGcpe2Zvcih2YXIgZj1BcnJheShnKSxtPTA7bTxnO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Zn1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBnPWEuZGVmYXVsdFByb3BzLGcpdm9pZCAwPT09ZFtlXSYmKGRbZV09Z1tlXSk7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLGtleTprLHJlZjpoLHByb3BzOmQsX293bmVyOkcuY3VycmVudH19XG5mdW5jdGlvbiBLKGEsYil7cmV0dXJueyQkdHlwZW9mOm4sdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBMKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1ufWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrYS5yZXBsYWNlKC9bPTpdL2csZnVuY3Rpb24oYSl7cmV0dXJuIGJbYV19KX12YXIgTT0vXFwvKy9nO2Z1bmN0aW9uIE4oYSxiKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZudWxsIT1hLmtleT9lc2NhcGUoXCJcIithLmtleSk6Yi50b1N0cmluZygzNil9XG5mdW5jdGlvbiBPKGEsYixjLGUsZCl7dmFyIGs9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWt8fFwiYm9vbGVhblwiPT09aylhPW51bGw7dmFyIGg9ITE7aWYobnVsbD09PWEpaD0hMDtlbHNlIHN3aXRjaChrKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmg9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIG46Y2FzZSBwOmg9ITB9fWlmKGgpcmV0dXJuIGg9YSxkPWQoaCksYT1cIlwiPT09ZT9cIi5cIitOKGgsMCk6ZSxBcnJheS5pc0FycmF5KGQpPyhjPVwiXCIsbnVsbCE9YSYmKGM9YS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpLE8oZCxiLGMsXCJcIixmdW5jdGlvbihhKXtyZXR1cm4gYX0pKTpudWxsIT1kJiYoTChkKSYmKGQ9SyhkLGMrKCFkLmtleXx8aCYmaC5rZXk9PT1kLmtleT9cIlwiOihcIlwiK2Qua2V5KS5yZXBsYWNlKE0sXCIkJi9cIikrXCIvXCIpK2EpKSxiLnB1c2goZCkpLDE7aD0wO2U9XCJcIj09PWU/XCIuXCI6ZStcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgZz1cbjA7ZzxhLmxlbmd0aDtnKyspe2s9YVtnXTt2YXIgZj1lK04oayxnKTtoKz1PKGssYixjLGYsZCl9ZWxzZSBpZihmPXkoYSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGc9MDshKGs9YS5uZXh0KCkpLmRvbmU7KWs9ay52YWx1ZSxmPWUrTihrLGcrKyksaCs9TyhrLGIsYyxmLGQpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWspdGhyb3cgYj1cIlwiK2EsRXJyb3IoeigzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yj9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpiKSk7cmV0dXJuIGh9ZnVuY3Rpb24gUChhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXSxkPTA7TyhhLGUsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoYyxhLGQrKyl9KTtyZXR1cm4gZX1cbmZ1bmN0aW9uIFEoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe3ZhciBiPWEuX3Jlc3VsdDtiPWIoKTthLl9zdGF0dXM9MDthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdDt0aHJvdyBhLl9yZXN1bHQ7fXZhciBSPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFMoKXt2YXIgYT1SLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoeigzMjEpKTtyZXR1cm4gYX12YXIgVD17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpSLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOnt0cmFuc2l0aW9uOjB9LFJlYWN0Q3VycmVudE93bmVyOkcsSXNTb21lUmVuZGVyZXJBY3Rpbmc6e2N1cnJlbnQ6ITF9LGFzc2lnbjpsfTtcbmV4cG9ydHMuQ2hpbGRyZW49e21hcDpQLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe1AoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxjKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtQKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUChhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFMKGEpKXRocm93IEVycm9yKHooMTQzKSk7cmV0dXJuIGF9fTtleHBvcnRzLkNvbXBvbmVudD1DO2V4cG9ydHMuUHVyZUNvbXBvbmVudD1FO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VDtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcih6KDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGs9YS5yZWYsaD1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGs9Yi5yZWYsaD1HLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGc9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoZiBpbiBiKUguY2FsbChiLGYpJiYhSS5oYXNPd25Qcm9wZXJ0eShmKSYmKGVbZl09dm9pZCAwPT09YltmXSYmdm9pZCAwIT09Zz9nW2ZdOmJbZl0pfXZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZillLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2c9QXJyYXkoZik7Zm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bix0eXBlOmEudHlwZSxcbmtleTpkLHJlZjprLHByb3BzOmUsX293bmVyOmh9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjpyLF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6cSxfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9SjtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9Si5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TDtcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6dixfcGF5bG9hZDp7X3N0YXR1czotMSxfcmVzdWx0OmF9LF9pbml0OlF9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6dSx0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gUygpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBTKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gUygpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFMoKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFMoKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFMoKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTcuMC4yXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIlwidXNlIHN0cmljdFwiXG5cbnZhciB0d29Qcm9kdWN0ID0gcmVxdWlyZShcInR3by1wcm9kdWN0XCIpXG52YXIgcm9idXN0U3VtID0gcmVxdWlyZShcInJvYnVzdC1zdW1cIilcbnZhciByb2J1c3RTY2FsZSA9IHJlcXVpcmUoXCJyb2J1c3Qtc2NhbGVcIilcbnZhciByb2J1c3RTdWJ0cmFjdCA9IHJlcXVpcmUoXCJyb2J1c3Qtc3VidHJhY3RcIilcblxudmFyIE5VTV9FWFBBTkQgPSA1XG5cbnZhciBFUFNJTE9OICAgICA9IDEuMTEwMjIzMDI0NjI1MTU2NWUtMTZcbnZhciBFUlJCT1VORDMgICA9ICgzLjAgKyAxNi4wICogRVBTSUxPTikgKiBFUFNJTE9OXG52YXIgRVJSQk9VTkQ0ICAgPSAoNy4wICsgNTYuMCAqIEVQU0lMT04pICogRVBTSUxPTlxuXG5mdW5jdGlvbiBvcmllbnRhdGlvbl8zKHN1bSwgcHJvZCwgc2NhbGUsIHN1Yikge1xuICByZXR1cm4gZnVuY3Rpb24gb3JpZW50YXRpb24zRXhhY3QobTAsIG0xLCBtMikge1xuICAgIHZhciBwID0gc3VtKHN1bShwcm9kKG0xWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMVswXSkpLCBzdW0ocHJvZChtMFsxXSwgbTFbMF0pLCBwcm9kKC1tMVsxXSwgbTBbMF0pKSlcbiAgICB2YXIgbiA9IHN1bShwcm9kKG0wWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMFswXSkpXG4gICAgdmFyIGQgPSBzdWIocCwgbilcbiAgICByZXR1cm4gZFtkLmxlbmd0aCAtIDFdXG4gIH1cbn1cblxuZnVuY3Rpb24gb3JpZW50YXRpb25fNChzdW0sIHByb2QsIHNjYWxlLCBzdWIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9yaWVudGF0aW9uNEV4YWN0KG0wLCBtMSwgbTIsIG0zKSB7XG4gICAgdmFyIHAgPSBzdW0oc3VtKHNjYWxlKHN1bShwcm9kKG0yWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMlswXSkpLCBtMVsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMVsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTFbMF0pKSwgLW0yWzJdKSwgc2NhbGUoc3VtKHByb2QobTFbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0xWzBdKSksIG0zWzJdKSkpLCBzdW0oc2NhbGUoc3VtKHByb2QobTFbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0xWzBdKSksIG0wWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMFswXSkpLCAtbTFbMl0pLCBzY2FsZShzdW0ocHJvZChtMFsxXSwgbTFbMF0pLCBwcm9kKC1tMVsxXSwgbTBbMF0pKSwgbTNbMl0pKSkpXG4gICAgdmFyIG4gPSBzdW0oc3VtKHNjYWxlKHN1bShwcm9kKG0yWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMlswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTBbMF0pKSwgLW0yWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0wWzBdKSksIG0zWzJdKSkpLCBzdW0oc2NhbGUoc3VtKHByb2QobTFbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0xWzBdKSksIG0wWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMFswXSkpLCAtbTFbMl0pLCBzY2FsZShzdW0ocHJvZChtMFsxXSwgbTFbMF0pLCBwcm9kKC1tMVsxXSwgbTBbMF0pKSwgbTJbMl0pKSkpXG4gICAgdmFyIGQgPSBzdWIocCwgbilcbiAgICByZXR1cm4gZFtkLmxlbmd0aCAtIDFdXG4gIH1cbn1cblxuZnVuY3Rpb24gb3JpZW50YXRpb25fNShzdW0sIHByb2QsIHNjYWxlLCBzdWIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIG9yaWVudGF0aW9uNUV4YWN0KG0wLCBtMSwgbTIsIG0zLCBtNCkge1xuICAgIHZhciBwID0gc3VtKHN1bShzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0zWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtM1swXSkpLCBtMlsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMlsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTJbMF0pKSwgLW0zWzJdKSwgc2NhbGUoc3VtKHByb2QobTJbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0yWzBdKSksIG00WzJdKSkpLCBtMVszXSksIHN1bShzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTNbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0zWzBdKSksIG0xWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMVswXSkpLCAtbTNbMl0pLCBzY2FsZShzdW0ocHJvZChtMVsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTFbMF0pKSwgbTRbMl0pKSksIC1tMlszXSksIHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMlsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTJbMF0pKSwgbTFbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTFbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0xWzBdKSksIC1tMlsyXSksIHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMVswXSkpLCBtNFsyXSkpKSwgbTNbM10pKSksIHN1bShzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTJbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0yWzBdKSksIG0xWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMVswXSkpLCAtbTJbMl0pLCBzY2FsZShzdW0ocHJvZChtMVsxXSwgbTJbMF0pLCBwcm9kKC1tMlsxXSwgbTFbMF0pKSwgbTNbMl0pKSksIC1tNFszXSksIHN1bShzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTNbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0zWzBdKSksIG0xWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMVswXSkpLCAtbTNbMl0pLCBzY2FsZShzdW0ocHJvZChtMVsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTFbMF0pKSwgbTRbMl0pKSksIG0wWzNdKSwgc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0zWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtM1swXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTBbMF0pKSwgLW0zWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0wWzBdKSksIG00WzJdKSkpLCAtbTFbM10pKSkpLCBzdW0oc3VtKHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMVsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTFbMF0pKSwgbTBbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTBbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0wWzBdKSksIC1tMVsyXSksIHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtMVswXSksIHByb2QoLW0xWzFdLCBtMFswXSkpLCBtNFsyXSkpKSwgbTNbM10pLCBzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMVswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTBbMF0pKSwgLW0xWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0xWzBdKSwgcHJvZCgtbTFbMV0sIG0wWzBdKSksIG0zWzJdKSkpLCAtbTRbM10pLCBzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTJbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0yWzBdKSksIG0xWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMVswXSkpLCAtbTJbMl0pLCBzY2FsZShzdW0ocHJvZChtMVsxXSwgbTJbMF0pLCBwcm9kKC1tMlsxXSwgbTFbMF0pKSwgbTNbMl0pKSksIG0wWzNdKSkpLCBzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0yWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMlswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTBbMF0pKSwgLW0yWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0wWzBdKSksIG0zWzJdKSkpLCAtbTFbM10pLCBzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMVswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTBbMF0pKSwgLW0xWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0xWzBdKSwgcHJvZCgtbTFbMV0sIG0wWzBdKSksIG0zWzJdKSkpLCBtMlszXSksIHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMVsxXSwgbTJbMF0pLCBwcm9kKC1tMlsxXSwgbTFbMF0pKSwgbTBbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTBbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0wWzBdKSksIC1tMVsyXSksIHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtMVswXSksIHByb2QoLW0xWzFdLCBtMFswXSkpLCBtMlsyXSkpKSwgLW0zWzNdKSkpKSlcbiAgICB2YXIgbiA9IHN1bShzdW0oc3VtKHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtM1sxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTNbMF0pKSwgbTJbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTJbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0yWzBdKSksIC1tM1syXSksIHNjYWxlKHN1bShwcm9kKG0yWzFdLCBtM1swXSksIHByb2QoLW0zWzFdLCBtMlswXSkpLCBtNFsyXSkpKSwgbTBbM10pLCBzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTNbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0zWzBdKSksIG0wWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMFswXSkpLCAtbTNbMl0pLCBzY2FsZShzdW0ocHJvZChtMFsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTBbMF0pKSwgbTRbMl0pKSksIC1tMlszXSkpLCBzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0yWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMlswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTBbMF0pKSwgLW0yWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0wWzBdKSksIG00WzJdKSkpLCBtM1szXSksIHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMlsxXSwgbTNbMF0pLCBwcm9kKC1tM1sxXSwgbTJbMF0pKSwgbTBbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTBbMV0sIG0zWzBdKSwgcHJvZCgtbTNbMV0sIG0wWzBdKSksIC1tMlsyXSksIHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMFswXSkpLCBtM1syXSkpKSwgLW00WzNdKSkpLCBzdW0oc3VtKHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMlsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTJbMF0pKSwgbTFbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTFbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0xWzBdKSksIC1tMlsyXSksIHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtMlswXSksIHByb2QoLW0yWzFdLCBtMVswXSkpLCBtNFsyXSkpKSwgbTBbM10pLCBzY2FsZShzdW0oc2NhbGUoc3VtKHByb2QobTJbMV0sIG00WzBdKSwgcHJvZCgtbTRbMV0sIG0yWzBdKSksIG0wWzJdKSwgc3VtKHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMFswXSkpLCAtbTJbMl0pLCBzY2FsZShzdW0ocHJvZChtMFsxXSwgbTJbMF0pLCBwcm9kKC1tMlsxXSwgbTBbMF0pKSwgbTRbMl0pKSksIC1tMVszXSkpLCBzdW0oc2NhbGUoc3VtKHNjYWxlKHN1bShwcm9kKG0xWzFdLCBtNFswXSksIHByb2QoLW00WzFdLCBtMVswXSkpLCBtMFsyXSksIHN1bShzY2FsZShzdW0ocHJvZChtMFsxXSwgbTRbMF0pLCBwcm9kKC1tNFsxXSwgbTBbMF0pKSwgLW0xWzJdKSwgc2NhbGUoc3VtKHByb2QobTBbMV0sIG0xWzBdKSwgcHJvZCgtbTFbMV0sIG0wWzBdKSksIG00WzJdKSkpLCBtMlszXSksIHNjYWxlKHN1bShzY2FsZShzdW0ocHJvZChtMVsxXSwgbTJbMF0pLCBwcm9kKC1tMlsxXSwgbTFbMF0pKSwgbTBbMl0pLCBzdW0oc2NhbGUoc3VtKHByb2QobTBbMV0sIG0yWzBdKSwgcHJvZCgtbTJbMV0sIG0wWzBdKSksIC1tMVsyXSksIHNjYWxlKHN1bShwcm9kKG0wWzFdLCBtMVswXSksIHByb2QoLW0xWzFdLCBtMFswXSkpLCBtMlsyXSkpKSwgLW00WzNdKSkpKVxuICAgIHZhciBkID0gc3ViKHAsIG4pXG4gICAgcmV0dXJuIGRbZC5sZW5ndGggLSAxXVxuICB9XG59XG5cbmZ1bmN0aW9uIG9yaWVudGF0aW9uKG4pIHtcbiAgdmFyIGZuID1cbiAgICBuID09PSAzID8gb3JpZW50YXRpb25fMyA6XG4gICAgbiA9PT0gNCA/IG9yaWVudGF0aW9uXzQgOiBvcmllbnRhdGlvbl81XG5cbiAgcmV0dXJuIGZuKHJvYnVzdFN1bSwgdHdvUHJvZHVjdCwgcm9idXN0U2NhbGUsIHJvYnVzdFN1YnRyYWN0KVxufVxuXG52YXIgb3JpZW50YXRpb24zRXhhY3QgPSBvcmllbnRhdGlvbigzKVxudmFyIG9yaWVudGF0aW9uNEV4YWN0ID0gb3JpZW50YXRpb24oNClcblxudmFyIENBQ0hFRCA9IFtcbiAgZnVuY3Rpb24gb3JpZW50YXRpb24wKCkgeyByZXR1cm4gMCB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjEoKSB7IHJldHVybiAwIH0sXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uMihhLCBiKSB7XG4gICAgcmV0dXJuIGJbMF0gLSBhWzBdXG4gIH0sXG4gIGZ1bmN0aW9uIG9yaWVudGF0aW9uMyhhLCBiLCBjKSB7XG4gICAgdmFyIGwgPSAoYVsxXSAtIGNbMV0pICogKGJbMF0gLSBjWzBdKVxuICAgIHZhciByID0gKGFbMF0gLSBjWzBdKSAqIChiWzFdIC0gY1sxXSlcbiAgICB2YXIgZGV0ID0gbCAtIHJcbiAgICB2YXIgc1xuICAgIGlmKGwgPiAwKSB7XG4gICAgICBpZihyIDw9IDApIHtcbiAgICAgICAgcmV0dXJuIGRldFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IGwgKyByXG4gICAgICB9XG4gICAgfSBlbHNlIGlmKGwgPCAwKSB7XG4gICAgICBpZihyID49IDApIHtcbiAgICAgICAgcmV0dXJuIGRldFxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcyA9IC0obCArIHIpXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkZXRcbiAgICB9XG4gICAgdmFyIHRvbCA9IEVSUkJPVU5EMyAqIHNcbiAgICBpZihkZXQgPj0gdG9sIHx8IGRldCA8PSAtdG9sKSB7XG4gICAgICByZXR1cm4gZGV0XG4gICAgfVxuICAgIHJldHVybiBvcmllbnRhdGlvbjNFeGFjdChhLCBiLCBjKVxuICB9LFxuICBmdW5jdGlvbiBvcmllbnRhdGlvbjQoYSxiLGMsZCkge1xuICAgIHZhciBhZHggPSBhWzBdIC0gZFswXVxuICAgIHZhciBiZHggPSBiWzBdIC0gZFswXVxuICAgIHZhciBjZHggPSBjWzBdIC0gZFswXVxuICAgIHZhciBhZHkgPSBhWzFdIC0gZFsxXVxuICAgIHZhciBiZHkgPSBiWzFdIC0gZFsxXVxuICAgIHZhciBjZHkgPSBjWzFdIC0gZFsxXVxuICAgIHZhciBhZHogPSBhWzJdIC0gZFsyXVxuICAgIHZhciBiZHogPSBiWzJdIC0gZFsyXVxuICAgIHZhciBjZHogPSBjWzJdIC0gZFsyXVxuICAgIHZhciBiZHhjZHkgPSBiZHggKiBjZHlcbiAgICB2YXIgY2R4YmR5ID0gY2R4ICogYmR5XG4gICAgdmFyIGNkeGFkeSA9IGNkeCAqIGFkeVxuICAgIHZhciBhZHhjZHkgPSBhZHggKiBjZHlcbiAgICB2YXIgYWR4YmR5ID0gYWR4ICogYmR5XG4gICAgdmFyIGJkeGFkeSA9IGJkeCAqIGFkeVxuICAgIHZhciBkZXQgPSBhZHogKiAoYmR4Y2R5IC0gY2R4YmR5KVxuICAgICAgICAgICAgKyBiZHogKiAoY2R4YWR5IC0gYWR4Y2R5KVxuICAgICAgICAgICAgKyBjZHogKiAoYWR4YmR5IC0gYmR4YWR5KVxuICAgIHZhciBwZXJtYW5lbnQgPSAoTWF0aC5hYnMoYmR4Y2R5KSArIE1hdGguYWJzKGNkeGJkeSkpICogTWF0aC5hYnMoYWR6KVxuICAgICAgICAgICAgICAgICAgKyAoTWF0aC5hYnMoY2R4YWR5KSArIE1hdGguYWJzKGFkeGNkeSkpICogTWF0aC5hYnMoYmR6KVxuICAgICAgICAgICAgICAgICAgKyAoTWF0aC5hYnMoYWR4YmR5KSArIE1hdGguYWJzKGJkeGFkeSkpICogTWF0aC5hYnMoY2R6KVxuICAgIHZhciB0b2wgPSBFUlJCT1VORDQgKiBwZXJtYW5lbnRcbiAgICBpZiAoKGRldCA+IHRvbCkgfHwgKC1kZXQgPiB0b2wpKSB7XG4gICAgICByZXR1cm4gZGV0XG4gICAgfVxuICAgIHJldHVybiBvcmllbnRhdGlvbjRFeGFjdChhLGIsYyxkKVxuICB9XG5dXG5cbmZ1bmN0aW9uIHNsb3dPcmllbnQoYXJncykge1xuICB2YXIgcHJvYyA9IENBQ0hFRFthcmdzLmxlbmd0aF1cbiAgaWYoIXByb2MpIHtcbiAgICBwcm9jID0gQ0FDSEVEW2FyZ3MubGVuZ3RoXSA9IG9yaWVudGF0aW9uKGFyZ3MubGVuZ3RoKVxuICB9XG4gIHJldHVybiBwcm9jLmFwcGx5KHVuZGVmaW5lZCwgYXJncylcbn1cblxuZnVuY3Rpb24gcHJvYyAoc2xvdywgbzAsIG8xLCBvMiwgbzMsIG80LCBvNSkge1xuICByZXR1cm4gZnVuY3Rpb24gZ2V0T3JpZW50YXRpb24oYTAsIGExLCBhMiwgYTMsIGE0KSB7XG4gICAgc3dpdGNoIChhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICBjYXNlIDA6XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiAwO1xuICAgICAgY2FzZSAyOlxuICAgICAgICByZXR1cm4gbzIoYTAsIGExKVxuICAgICAgY2FzZSAzOlxuICAgICAgICByZXR1cm4gbzMoYTAsIGExLCBhMilcbiAgICAgIGNhc2UgNDpcbiAgICAgICAgcmV0dXJuIG80KGEwLCBhMSwgYTIsIGEzKVxuICAgICAgY2FzZSA1OlxuICAgICAgICByZXR1cm4gbzUoYTAsIGExLCBhMiwgYTMsIGE0KVxuICAgIH1cblxuICAgIHZhciBzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGgpXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyArK2kpIHtcbiAgICAgIHNbaV0gPSBhcmd1bWVudHNbaV1cbiAgICB9XG4gICAgcmV0dXJuIHNsb3cocylcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZU9yaWVudGF0aW9uUHJvYygpIHtcbiAgd2hpbGUoQ0FDSEVELmxlbmd0aCA8PSBOVU1fRVhQQU5EKSB7XG4gICAgQ0FDSEVELnB1c2gob3JpZW50YXRpb24oQ0FDSEVELmxlbmd0aCkpXG4gIH1cbiAgbW9kdWxlLmV4cG9ydHMgPSBwcm9jLmFwcGx5KHVuZGVmaW5lZCwgW3Nsb3dPcmllbnRdLmNvbmNhdChDQUNIRUQpKVxuICBmb3IodmFyIGk9MDsgaTw9TlVNX0VYUEFORDsgKytpKSB7XG4gICAgbW9kdWxlLmV4cG9ydHNbaV0gPSBDQUNIRURbaV1cbiAgfVxufVxuXG5nZW5lcmF0ZU9yaWVudGF0aW9uUHJvYygpIiwibW9kdWxlLmV4cG9ydHMgPSByb2J1c3RQb2ludEluUG9seWdvblxuXG52YXIgb3JpZW50ID0gcmVxdWlyZSgncm9idXN0LW9yaWVudGF0aW9uJylcblxuZnVuY3Rpb24gcm9idXN0UG9pbnRJblBvbHlnb24odnMsIHBvaW50KSB7XG4gIHZhciB4ID0gcG9pbnRbMF1cbiAgdmFyIHkgPSBwb2ludFsxXVxuICB2YXIgbiA9IHZzLmxlbmd0aFxuICB2YXIgaW5zaWRlID0gMVxuICB2YXIgbGltID0gblxuICBmb3IodmFyIGkgPSAwLCBqID0gbi0xOyBpPGxpbTsgaj1pKyspIHtcbiAgICB2YXIgYSA9IHZzW2ldXG4gICAgdmFyIGIgPSB2c1tqXVxuICAgIHZhciB5aSA9IGFbMV1cbiAgICB2YXIgeWogPSBiWzFdXG4gICAgaWYoeWogPCB5aSkge1xuICAgICAgaWYoeWogPCB5ICYmIHkgPCB5aSkge1xuICAgICAgICB2YXIgcyA9IG9yaWVudChhLCBiLCBwb2ludClcbiAgICAgICAgaWYocyA9PT0gMCkge1xuICAgICAgICAgIHJldHVybiAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5zaWRlIF49ICgwIDwgcyl8MFxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYoeSA9PT0geWkpIHtcbiAgICAgICAgdmFyIGMgPSB2c1soaSsxKSVuXVxuICAgICAgICB2YXIgeWsgPSBjWzFdXG4gICAgICAgIGlmKHlpIDwgeWspIHtcbiAgICAgICAgICB2YXIgcyA9IG9yaWVudChhLCBiLCBwb2ludClcbiAgICAgICAgICBpZihzID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpbnNpZGUgXj0gKDAgPCBzKXwwXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmKHlpIDwgeWopIHtcbiAgICAgIGlmKHlpIDwgeSAmJiB5IDwgeWopIHtcbiAgICAgICAgdmFyIHMgPSBvcmllbnQoYSwgYiwgcG9pbnQpXG4gICAgICAgIGlmKHMgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gMFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGluc2lkZSBePSAocyA8IDApfDBcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmKHkgPT09IHlpKSB7XG4gICAgICAgIHZhciBjID0gdnNbKGkrMSklbl1cbiAgICAgICAgdmFyIHlrID0gY1sxXVxuICAgICAgICBpZih5ayA8IHlpKSB7XG4gICAgICAgICAgdmFyIHMgPSBvcmllbnQoYSwgYiwgcG9pbnQpXG4gICAgICAgICAgaWYocyA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5zaWRlIF49IChzIDwgMCl8MFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZih5ID09PSB5aSkge1xuICAgICAgdmFyIHgwID0gTWF0aC5taW4oYVswXSwgYlswXSlcbiAgICAgIHZhciB4MSA9IE1hdGgubWF4KGFbMF0sIGJbMF0pXG4gICAgICBpZihpID09PSAwKSB7XG4gICAgICAgIHdoaWxlKGo+MCkge1xuICAgICAgICAgIHZhciBrID0gKGorbi0xKSVuXG4gICAgICAgICAgdmFyIHAgPSB2c1trXVxuICAgICAgICAgIGlmKHBbMV0gIT09IHkpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciBweCA9IHBbMF1cbiAgICAgICAgICB4MCA9IE1hdGgubWluKHgwLCBweClcbiAgICAgICAgICB4MSA9IE1hdGgubWF4KHgxLCBweClcbiAgICAgICAgICBqID0ga1xuICAgICAgICB9XG4gICAgICAgIGlmKGogPT09IDApIHtcbiAgICAgICAgICBpZih4MCA8PSB4ICYmIHggPD0geDEpIHtcbiAgICAgICAgICAgIHJldHVybiAwXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiAxIFxuICAgICAgICB9XG4gICAgICAgIGxpbSA9IGorMVxuICAgICAgfVxuICAgICAgdmFyIHkwID0gdnNbKGorbi0xKSVuXVsxXVxuICAgICAgd2hpbGUoaSsxPGxpbSkge1xuICAgICAgICB2YXIgcCA9IHZzW2krMV1cbiAgICAgICAgaWYocFsxXSAhPT0geSkge1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgdmFyIHB4ID0gcFswXVxuICAgICAgICB4MCA9IE1hdGgubWluKHgwLCBweClcbiAgICAgICAgeDEgPSBNYXRoLm1heCh4MSwgcHgpXG4gICAgICAgIGkgKz0gMVxuICAgICAgfVxuICAgICAgaWYoeDAgPD0geCAmJiB4IDw9IHgxKSB7XG4gICAgICAgIHJldHVybiAwXG4gICAgICB9XG4gICAgICB2YXIgeTEgPSB2c1soaSsxKSVuXVsxXVxuICAgICAgaWYoeCA8IHgwICYmICh5MCA8IHkgIT09IHkxIDwgeSkpIHtcbiAgICAgICAgaW5zaWRlIF49IDFcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIDIgKiBpbnNpZGUgLSAxXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxudmFyIHR3b1Byb2R1Y3QgPSByZXF1aXJlKFwidHdvLXByb2R1Y3RcIilcbnZhciB0d29TdW0gPSByZXF1aXJlKFwidHdvLXN1bVwiKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNjYWxlTGluZWFyRXhwYW5zaW9uXG5cbmZ1bmN0aW9uIHNjYWxlTGluZWFyRXhwYW5zaW9uKGUsIHNjYWxlKSB7XG4gIHZhciBuID0gZS5sZW5ndGhcbiAgaWYobiA9PT0gMSkge1xuICAgIHZhciB0cyA9IHR3b1Byb2R1Y3QoZVswXSwgc2NhbGUpXG4gICAgaWYodHNbMF0pIHtcbiAgICAgIHJldHVybiB0c1xuICAgIH1cbiAgICByZXR1cm4gWyB0c1sxXSBdXG4gIH1cbiAgdmFyIGcgPSBuZXcgQXJyYXkoMiAqIG4pXG4gIHZhciBxID0gWzAuMSwgMC4xXVxuICB2YXIgdCA9IFswLjEsIDAuMV1cbiAgdmFyIGNvdW50ID0gMFxuICB0d29Qcm9kdWN0KGVbMF0sIHNjYWxlLCBxKVxuICBpZihxWzBdKSB7XG4gICAgZ1tjb3VudCsrXSA9IHFbMF1cbiAgfVxuICBmb3IodmFyIGk9MTsgaTxuOyArK2kpIHtcbiAgICB0d29Qcm9kdWN0KGVbaV0sIHNjYWxlLCB0KVxuICAgIHZhciBwcSA9IHFbMV1cbiAgICB0d29TdW0ocHEsIHRbMF0sIHEpXG4gICAgaWYocVswXSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHFbMF1cbiAgICB9XG4gICAgdmFyIGEgPSB0WzFdXG4gICAgdmFyIGIgPSBxWzFdXG4gICAgdmFyIHggPSBhICsgYlxuICAgIHZhciBidiA9IHggLSBhXG4gICAgdmFyIHkgPSBiIC0gYnZcbiAgICBxWzFdID0geFxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICB9XG4gIGlmKHFbMV0pIHtcbiAgICBnW2NvdW50KytdID0gcVsxXVxuICB9XG4gIGlmKGNvdW50ID09PSAwKSB7XG4gICAgZ1tjb3VudCsrXSA9IDAuMFxuICB9XG4gIGcubGVuZ3RoID0gY291bnRcbiAgcmV0dXJuIGdcbn0iLCJcInVzZSBzdHJpY3RcIlxuXG5tb2R1bGUuZXhwb3J0cyA9IHJvYnVzdFN1YnRyYWN0XG5cbi8vRWFzeSBjYXNlOiBBZGQgdHdvIHNjYWxhcnNcbmZ1bmN0aW9uIHNjYWxhclNjYWxhcihhLCBiKSB7XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIGF2ID0geCAtIGJ2XG4gIHZhciBiciA9IGIgLSBidlxuICB2YXIgYXIgPSBhIC0gYXZcbiAgdmFyIHkgPSBhciArIGJyXG4gIGlmKHkpIHtcbiAgICByZXR1cm4gW3ksIHhdXG4gIH1cbiAgcmV0dXJuIFt4XVxufVxuXG5mdW5jdGlvbiByb2J1c3RTdWJ0cmFjdChlLCBmKSB7XG4gIHZhciBuZSA9IGUubGVuZ3RofDBcbiAgdmFyIG5mID0gZi5sZW5ndGh8MFxuICBpZihuZSA9PT0gMSAmJiBuZiA9PT0gMSkge1xuICAgIHJldHVybiBzY2FsYXJTY2FsYXIoZVswXSwgLWZbMF0pXG4gIH1cbiAgdmFyIG4gPSBuZSArIG5mXG4gIHZhciBnID0gbmV3IEFycmF5KG4pXG4gIHZhciBjb3VudCA9IDBcbiAgdmFyIGVwdHIgPSAwXG4gIHZhciBmcHRyID0gMFxuICB2YXIgYWJzID0gTWF0aC5hYnNcbiAgdmFyIGVpID0gZVtlcHRyXVxuICB2YXIgZWEgPSBhYnMoZWkpXG4gIHZhciBmaSA9IC1mW2ZwdHJdXG4gIHZhciBmYSA9IGFicyhmaSlcbiAgdmFyIGEsIGJcbiAgaWYoZWEgPCBmYSkge1xuICAgIGIgPSBlaVxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgICBlYSA9IGFicyhlaSlcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYiA9IGZpXG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgICBmYSA9IGFicyhmaSlcbiAgICB9XG4gIH1cbiAgaWYoKGVwdHIgPCBuZSAmJiBlYSA8IGZhKSB8fCAoZnB0ciA+PSBuZikpIHtcbiAgICBhID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGEgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSAtZltmcHRyXVxuICAgICAgZmEgPSBhYnMoZmkpXG4gICAgfVxuICB9XG4gIHZhciB4ID0gYSArIGJcbiAgdmFyIGJ2ID0geCAtIGFcbiAgdmFyIHkgPSBiIC0gYnZcbiAgdmFyIHEwID0geVxuICB2YXIgcTEgPSB4XG4gIHZhciBfeCwgX2J2LCBfYXYsIF9iciwgX2FyXG4gIHdoaWxlKGVwdHIgPCBuZSAmJiBmcHRyIDwgbmYpIHtcbiAgICBpZihlYSA8IGZhKSB7XG4gICAgICBhID0gZWlcbiAgICAgIGVwdHIgKz0gMVxuICAgICAgaWYoZXB0ciA8IG5lKSB7XG4gICAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgICBlYSA9IGFicyhlaSlcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgYSA9IGZpXG4gICAgICBmcHRyICs9IDFcbiAgICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgICAgIGZhID0gYWJzKGZpKVxuICAgICAgfVxuICAgIH1cbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfVxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gIH1cbiAgd2hpbGUoZXB0ciA8IG5lKSB7XG4gICAgYSA9IGVpXG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGVwdHIgKz0gMVxuICAgIGlmKGVwdHIgPCBuZSkge1xuICAgICAgZWkgPSBlW2VwdHJdXG4gICAgfVxuICB9XG4gIHdoaWxlKGZwdHIgPCBuZikge1xuICAgIGEgPSBmaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9IFxuICAgIF94ID0gcTEgKyB4XG4gICAgX2J2ID0gX3ggLSBxMVxuICAgIF9hdiA9IF94IC0gX2J2XG4gICAgX2JyID0geCAtIF9idlxuICAgIF9hciA9IHExIC0gX2F2XG4gICAgcTAgPSBfYXIgKyBfYnJcbiAgICBxMSA9IF94XG4gICAgZnB0ciArPSAxXG4gICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICBmaSA9IC1mW2ZwdHJdXG4gICAgfVxuICB9XG4gIGlmKHEwKSB7XG4gICAgZ1tjb3VudCsrXSA9IHEwXG4gIH1cbiAgaWYocTEpIHtcbiAgICBnW2NvdW50KytdID0gcTFcbiAgfVxuICBpZighY291bnQpIHtcbiAgICBnW2NvdW50KytdID0gMC4wICBcbiAgfVxuICBnLmxlbmd0aCA9IGNvdW50XG4gIHJldHVybiBnXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSBsaW5lYXJFeHBhbnNpb25TdW1cblxuLy9FYXN5IGNhc2U6IEFkZCB0d28gc2NhbGFyc1xuZnVuY3Rpb24gc2NhbGFyU2NhbGFyKGEsIGIpIHtcbiAgdmFyIHggPSBhICsgYlxuICB2YXIgYnYgPSB4IC0gYVxuICB2YXIgYXYgPSB4IC0gYnZcbiAgdmFyIGJyID0gYiAtIGJ2XG4gIHZhciBhciA9IGEgLSBhdlxuICB2YXIgeSA9IGFyICsgYnJcbiAgaWYoeSkge1xuICAgIHJldHVybiBbeSwgeF1cbiAgfVxuICByZXR1cm4gW3hdXG59XG5cbmZ1bmN0aW9uIGxpbmVhckV4cGFuc2lvblN1bShlLCBmKSB7XG4gIHZhciBuZSA9IGUubGVuZ3RofDBcbiAgdmFyIG5mID0gZi5sZW5ndGh8MFxuICBpZihuZSA9PT0gMSAmJiBuZiA9PT0gMSkge1xuICAgIHJldHVybiBzY2FsYXJTY2FsYXIoZVswXSwgZlswXSlcbiAgfVxuICB2YXIgbiA9IG5lICsgbmZcbiAgdmFyIGcgPSBuZXcgQXJyYXkobilcbiAgdmFyIGNvdW50ID0gMFxuICB2YXIgZXB0ciA9IDBcbiAgdmFyIGZwdHIgPSAwXG4gIHZhciBhYnMgPSBNYXRoLmFic1xuICB2YXIgZWkgPSBlW2VwdHJdXG4gIHZhciBlYSA9IGFicyhlaSlcbiAgdmFyIGZpID0gZltmcHRyXVxuICB2YXIgZmEgPSBhYnMoZmkpXG4gIHZhciBhLCBiXG4gIGlmKGVhIDwgZmEpIHtcbiAgICBiID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGIgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSBmW2ZwdHJdXG4gICAgICBmYSA9IGFicyhmaSlcbiAgICB9XG4gIH1cbiAgaWYoKGVwdHIgPCBuZSAmJiBlYSA8IGZhKSB8fCAoZnB0ciA+PSBuZikpIHtcbiAgICBhID0gZWlcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgICAgZWEgPSBhYnMoZWkpXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGEgPSBmaVxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSBmW2ZwdHJdXG4gICAgICBmYSA9IGFicyhmaSlcbiAgICB9XG4gIH1cbiAgdmFyIHggPSBhICsgYlxuICB2YXIgYnYgPSB4IC0gYVxuICB2YXIgeSA9IGIgLSBidlxuICB2YXIgcTAgPSB5XG4gIHZhciBxMSA9IHhcbiAgdmFyIF94LCBfYnYsIF9hdiwgX2JyLCBfYXJcbiAgd2hpbGUoZXB0ciA8IG5lICYmIGZwdHIgPCBuZikge1xuICAgIGlmKGVhIDwgZmEpIHtcbiAgICAgIGEgPSBlaVxuICAgICAgZXB0ciArPSAxXG4gICAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgICAgZWkgPSBlW2VwdHJdXG4gICAgICAgIGVhID0gYWJzKGVpKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBhID0gZmlcbiAgICAgIGZwdHIgKz0gMVxuICAgICAgaWYoZnB0ciA8IG5mKSB7XG4gICAgICAgIGZpID0gZltmcHRyXVxuICAgICAgICBmYSA9IGFicyhmaSlcbiAgICAgIH1cbiAgICB9XG4gICAgYiA9IHEwXG4gICAgeCA9IGEgKyBiXG4gICAgYnYgPSB4IC0gYVxuICAgIHkgPSBiIC0gYnZcbiAgICBpZih5KSB7XG4gICAgICBnW2NvdW50KytdID0geVxuICAgIH1cbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICB9XG4gIHdoaWxlKGVwdHIgPCBuZSkge1xuICAgIGEgPSBlaVxuICAgIGIgPSBxMFxuICAgIHggPSBhICsgYlxuICAgIGJ2ID0geCAtIGFcbiAgICB5ID0gYiAtIGJ2XG4gICAgaWYoeSkge1xuICAgICAgZ1tjb3VudCsrXSA9IHlcbiAgICB9XG4gICAgX3ggPSBxMSArIHhcbiAgICBfYnYgPSBfeCAtIHExXG4gICAgX2F2ID0gX3ggLSBfYnZcbiAgICBfYnIgPSB4IC0gX2J2XG4gICAgX2FyID0gcTEgLSBfYXZcbiAgICBxMCA9IF9hciArIF9iclxuICAgIHExID0gX3hcbiAgICBlcHRyICs9IDFcbiAgICBpZihlcHRyIDwgbmUpIHtcbiAgICAgIGVpID0gZVtlcHRyXVxuICAgIH1cbiAgfVxuICB3aGlsZShmcHRyIDwgbmYpIHtcbiAgICBhID0gZmlcbiAgICBiID0gcTBcbiAgICB4ID0gYSArIGJcbiAgICBidiA9IHggLSBhXG4gICAgeSA9IGIgLSBidlxuICAgIGlmKHkpIHtcbiAgICAgIGdbY291bnQrK10gPSB5XG4gICAgfSBcbiAgICBfeCA9IHExICsgeFxuICAgIF9idiA9IF94IC0gcTFcbiAgICBfYXYgPSBfeCAtIF9idlxuICAgIF9iciA9IHggLSBfYnZcbiAgICBfYXIgPSBxMSAtIF9hdlxuICAgIHEwID0gX2FyICsgX2JyXG4gICAgcTEgPSBfeFxuICAgIGZwdHIgKz0gMVxuICAgIGlmKGZwdHIgPCBuZikge1xuICAgICAgZmkgPSBmW2ZwdHJdXG4gICAgfVxuICB9XG4gIGlmKHEwKSB7XG4gICAgZ1tjb3VudCsrXSA9IHEwXG4gIH1cbiAgaWYocTEpIHtcbiAgICBnW2NvdW50KytdID0gcTFcbiAgfVxuICBpZighY291bnQpIHtcbiAgICBnW2NvdW50KytdID0gMC4wICBcbiAgfVxuICBnLmxlbmd0aCA9IGNvdW50XG4gIHJldHVybiBnXG59IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRPTSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRE9NLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRE9NW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXhCeUlkZW50aWZpZXIgPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM10sXG4gICAgICBzdXBwb3J0czogaXRlbVs0XSxcbiAgICAgIGxheWVyOiBpdGVtWzVdXG4gICAgfTtcblxuICAgIGlmIChpbmRleEJ5SWRlbnRpZmllciAhPT0gLTEpIHtcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS5yZWZlcmVuY2VzKys7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleEJ5SWRlbnRpZmllcl0udXBkYXRlcihvYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgdXBkYXRlciA9IGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpO1xuICAgICAgb3B0aW9ucy5ieUluZGV4ID0gaTtcbiAgICAgIHN0eWxlc0luRE9NLnNwbGljZShpLCAwLCB7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IHVwZGF0ZXIsXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZEVsZW1lbnRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG5cbiAgdmFyIHVwZGF0ZXIgPSBmdW5jdGlvbiB1cGRhdGVyKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXAgJiYgbmV3T2JqLnN1cHBvcnRzID09PSBvYmouc3VwcG9ydHMgJiYgbmV3T2JqLmxheWVyID09PSBvYmoubGF5ZXIpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHVwZGF0ZXI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRPTVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5ET01bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xuICBvcHRpb25zLnNldEF0dHJpYnV0ZXMoZWxlbWVudCwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoZWxlbWVudCwgb3B0aW9ucy5vcHRpb25zKTtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZUVsZW1lbnQpIHtcbiAgdmFyIG5vbmNlID0gdHlwZW9mIF9fd2VicGFja19ub25jZV9fICE9PSBcInVuZGVmaW5lZFwiID8gX193ZWJwYWNrX25vbmNlX18gOiBudWxsO1xuXG4gIGlmIChub25jZSkge1xuICAgIHN0eWxlRWxlbWVudC5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IFwiXCI7XG5cbiAgaWYgKG9iai5zdXBwb3J0cykge1xuICAgIGNzcyArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KG9iai5zdXBwb3J0cywgXCIpIHtcIik7XG4gIH1cblxuICBpZiAob2JqLm1lZGlhKSB7XG4gICAgY3NzICs9IFwiQG1lZGlhIFwiLmNvbmNhdChvYmoubWVkaWEsIFwiIHtcIik7XG4gIH1cblxuICB2YXIgbmVlZExheWVyID0gdHlwZW9mIG9iai5sYXllciAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwiQGxheWVyXCIuY29uY2F0KG9iai5sYXllci5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KG9iai5sYXllcikgOiBcIlwiLCBcIiB7XCIpO1xuICB9XG5cbiAgY3NzICs9IG9iai5jc3M7XG5cbiAgaWYgKG5lZWRMYXllcikge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KSB7XG4gIC8vIGlzdGFuYnVsIGlnbm9yZSBpZlxuICBpZiAoc3R5bGVFbGVtZW50LnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZUVsZW1lbnQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQpO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gZG9tQVBJKG9wdGlvbnMpIHtcbiAgdmFyIHN0eWxlRWxlbWVudCA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGVFbGVtZW50LCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGVFbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZG9tQVBJOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGVFbGVtZW50KSB7XG4gIGlmIChzdHlsZUVsZW1lbnQuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0LmNzc1RleHQgPSBjc3M7XG4gIH0gZWxzZSB7XG4gICAgd2hpbGUgKHN0eWxlRWxlbWVudC5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZUVsZW1lbnQucmVtb3ZlQ2hpbGQoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpO1xuICAgIH1cblxuICAgIHN0eWxlRWxlbWVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIlwidXNlIHN0cmljdFwiO1xyXG4vKlxyXG4gKiBDb3B5cmlnaHQgMjAxNyBTYW0gVGhvcm9nb29kLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxyXG4gKlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdFxyXG4gKiB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZlxyXG4gKiB0aGUgTGljZW5zZSBhdFxyXG4gKlxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUXHJcbiAqIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZVxyXG4gKiBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlclxyXG4gKiB0aGUgTGljZW5zZS5cclxuICovXHJcbihmdW5jdGlvbiAoc2NvcGUpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIC8vIGZhaWwgZWFybHlcclxuICAgIGlmIChzY29wZVsnVGV4dEVuY29kZXInXSAmJiBzY29wZVsnVGV4dERlY29kZXInXSkge1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHV0ZkxhYmVsXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEZhc3RUZXh0RW5jb2Rlcih1dGZMYWJlbCA9ICd1dGYtOCcpIHtcclxuICAgICAgICBpZiAodXRmTGFiZWwgIT09ICd1dGYtOCcpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYEZhaWxlZCB0byBjb25zdHJ1Y3QgJ1RleHRFbmNvZGVyJzogVGhlIGVuY29kaW5nIGxhYmVsIHByb3ZpZGVkICgnJHt1dGZMYWJlbH0nKSBpcyBpbnZhbGlkLmApO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShGYXN0VGV4dEVuY29kZXIucHJvdG90eXBlLCAnZW5jb2RpbmcnLCB7XHJcbiAgICAgICAgdmFsdWU6ICd1dGYtOCcsXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZ1xyXG4gICAgICogQHBhcmFtIHt7c3RyZWFtOiBib29sZWFufT19IG9wdGlvbnNcclxuICAgICAqIEByZXR1cm4geyFVaW50OEFycmF5fVxyXG4gICAgICovXHJcbiAgICBGYXN0VGV4dEVuY29kZXIucHJvdG90eXBlLmVuY29kZSA9IGZ1bmN0aW9uIChzdHJpbmcsIG9wdGlvbnMgPSB7IHN0cmVhbTogZmFsc2UgfSkge1xyXG4gICAgICAgIGlmIChvcHRpb25zLnN0cmVhbSkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBlbmNvZGU6IHRoZSAnc3RyZWFtJyBvcHRpb24gaXMgdW5zdXBwb3J0ZWQuYCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGxldCBwb3MgPSAwO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IHN0cmluZy5sZW5ndGg7XHJcbiAgICAgICAgY29uc3Qgb3V0ID0gW107XHJcbiAgICAgICAgbGV0IGF0ID0gMDsgLy8gb3V0cHV0IHBvc2l0aW9uXHJcbiAgICAgICAgbGV0IHRsZW4gPSBNYXRoLm1heCgzMiwgbGVuICsgKGxlbiA+PiAxKSArIDcpOyAvLyAxLjV4IHNpemVcclxuICAgICAgICBsZXQgdGFyZ2V0ID0gbmV3IFVpbnQ4QXJyYXkoKHRsZW4gPj4gMykgPDwgMyk7IC8vIC4uLiBidXQgYXQgOCBieXRlIG9mZnNldFxyXG4gICAgICAgIHdoaWxlIChwb3MgPCBsZW4pIHtcclxuICAgICAgICAgICAgbGV0IHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQocG9zKyspO1xyXG4gICAgICAgICAgICBpZiAodmFsdWUgPj0gMHhkODAwICYmIHZhbHVlIDw9IDB4ZGJmZikge1xyXG4gICAgICAgICAgICAgICAgLy8gaGlnaCBzdXJyb2dhdGVcclxuICAgICAgICAgICAgICAgIGlmIChwb3MgPCBsZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBleHRyYSA9IHN0cmluZy5jaGFyQ29kZUF0KHBvcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChleHRyYSAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICArK3BvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSAoKHZhbHVlICYgMHgzZmYpIDw8IDEwKSArIChleHRyYSAmIDB4M2ZmKSArIDB4MTAwMDA7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbHVlID49IDB4ZDgwMCAmJiB2YWx1ZSA8PSAweGRiZmYpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsgLy8gZHJvcCBsb25lIHN1cnJvZ2F0ZVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vIGV4cGFuZCB0aGUgYnVmZmVyIGlmIHdlIGNvdWxkbid0IHdyaXRlIDQgYnl0ZXNcclxuICAgICAgICAgICAgaWYgKGF0ICsgNCA+IHRhcmdldC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgICAgIHRsZW4gKz0gODsgLy8gbWluaW11bSBleHRyYVxyXG4gICAgICAgICAgICAgICAgdGxlbiAqPSAxLjAgKyAocG9zIC8gc3RyaW5nLmxlbmd0aCkgKiAyOyAvLyB0YWtlIDJ4IHRoZSByZW1haW5pbmdcclxuICAgICAgICAgICAgICAgIHRsZW4gPSAodGxlbiA+PiAzKSA8PCAzOyAvLyA4IGJ5dGUgb2Zmc2V0XHJcbiAgICAgICAgICAgICAgICBjb25zdCB1cGRhdGUgPSBuZXcgVWludDhBcnJheSh0bGVuKTtcclxuICAgICAgICAgICAgICAgIHVwZGF0ZS5zZXQodGFyZ2V0KTtcclxuICAgICAgICAgICAgICAgIHRhcmdldCA9IHVwZGF0ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKHZhbHVlICYgMHhmZmZmZmY4MCkgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIC8vIDEtYnl0ZVxyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2F0KytdID0gdmFsdWU7IC8vIEFTQ0lJXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgodmFsdWUgJiAweGZmZmZmODAwKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gMi1ieXRlXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbYXQrK10gPSAoKHZhbHVlID4+IDYpICYgMHgxZikgfCAweGMwO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2UgaWYgKCh2YWx1ZSAmIDB4ZmZmZjAwMDApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAzLWJ5dGVcclxuICAgICAgICAgICAgICAgIHRhcmdldFthdCsrXSA9ICgodmFsdWUgPj4gMTIpICYgMHgwZikgfCAweGUwO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2F0KytdID0gKCh2YWx1ZSA+PiA2KSAmIDB4M2YpIHwgMHg4MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgodmFsdWUgJiAweGZmZTAwMDAwKSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gNC1ieXRlXHJcbiAgICAgICAgICAgICAgICB0YXJnZXRbYXQrK10gPSAoKHZhbHVlID4+IDE4KSAmIDB4MDcpIHwgMHhmMDtcclxuICAgICAgICAgICAgICAgIHRhcmdldFthdCsrXSA9ICgodmFsdWUgPj4gMTIpICYgMHgzZikgfCAweDgwO1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0W2F0KytdID0gKCh2YWx1ZSA+PiA2KSAmIDB4M2YpIHwgMHg4MDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIEZJWE1FOiBkbyB3ZSBjYXJlXHJcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0YXJnZXRbYXQrK10gPSAodmFsdWUgJiAweDNmKSB8IDB4ODA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXQuc2xpY2UoMCwgYXQpO1xyXG4gICAgfTtcclxuICAgIC8qKlxyXG4gICAgICogQGNvbnN0cnVjdG9yXHJcbiAgICAgKiBAcGFyYW0ge3N0cmluZz19IHV0ZkxhYmVsXHJcbiAgICAgKiBAcGFyYW0ge3tmYXRhbDogYm9vbGVhbn09fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGZ1bmN0aW9uIEZhc3RUZXh0RGVjb2Rlcih1dGZMYWJlbCA9ICd1dGYtOCcsIG9wdGlvbnMgPSB7IGZhdGFsOiBmYWxzZSB9KSB7XHJcbiAgICAgICAgaWYgKHV0ZkxhYmVsICE9PSAndXRmLTgnKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBGYWlsZWQgdG8gY29uc3RydWN0ICdUZXh0RGVjb2Rlcic6IFRoZSBlbmNvZGluZyBsYWJlbCBwcm92aWRlZCAoJyR7dXRmTGFiZWx9JykgaXMgaW52YWxpZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKG9wdGlvbnMuZmF0YWwpIHtcclxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBGYWlsZWQgdG8gY29uc3RydWN0ICdUZXh0RGVjb2Rlcic6IHRoZSAnZmF0YWwnIG9wdGlvbiBpcyB1bnN1cHBvcnRlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFzdFRleHREZWNvZGVyLnByb3RvdHlwZSwgJ2VuY29kaW5nJywge1xyXG4gICAgICAgIHZhbHVlOiAndXRmLTgnLFxyXG4gICAgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFzdFRleHREZWNvZGVyLnByb3RvdHlwZSwgJ2ZhdGFsJywgeyB2YWx1ZTogZmFsc2UgfSk7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoRmFzdFRleHREZWNvZGVyLnByb3RvdHlwZSwgJ2lnbm9yZUJPTScsIHtcclxuICAgICAgICB2YWx1ZTogZmFsc2UsXHJcbiAgICB9KTtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIHsoIUFycmF5QnVmZmVyfCFBcnJheUJ1ZmZlclZpZXcpfSBidWZmZXJcclxuICAgICAqIEBwYXJhbSB7e3N0cmVhbTogYm9vbGVhbn09fSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIEZhc3RUZXh0RGVjb2Rlci5wcm90b3R5cGUuZGVjb2RlID0gZnVuY3Rpb24gKGJ1ZmZlciwgb3B0aW9ucyA9IHsgc3RyZWFtOiBmYWxzZSB9KSB7XHJcbiAgICAgICAgaWYgKG9wdGlvbnNbJ3N0cmVhbSddKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGRlY29kZTogdGhlICdzdHJlYW0nIG9wdGlvbiBpcyB1bnN1cHBvcnRlZC5gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xyXG4gICAgICAgIGxldCBwb3MgPSAwO1xyXG4gICAgICAgIGNvbnN0IGxlbiA9IGJ5dGVzLmxlbmd0aDtcclxuICAgICAgICBjb25zdCBvdXQgPSBbXTtcclxuICAgICAgICB3aGlsZSAocG9zIDwgbGVuKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJ5dGUxID0gYnl0ZXNbcG9zKytdO1xyXG4gICAgICAgICAgICBpZiAoYnl0ZTEgPT09IDApIHtcclxuICAgICAgICAgICAgICAgIGJyZWFrOyAvLyBOVUxMXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChieXRlMSAmIDB4ODApID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAxLWJ5dGVcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKGJ5dGUxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICgoYnl0ZTEgJiAweGUwKSA9PT0gMHhjMCkge1xyXG4gICAgICAgICAgICAgICAgLy8gMi1ieXRlXHJcbiAgICAgICAgICAgICAgICBjb25zdCBieXRlMiA9IGJ5dGVzW3BvcysrXSAmIDB4M2Y7XHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaCgoKGJ5dGUxICYgMHgxZikgPDwgNikgfCBieXRlMik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKGJ5dGUxICYgMHhmMCkgPT09IDB4ZTApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUzID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIG91dC5wdXNoKCgoYnl0ZTEgJiAweDFmKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAoKGJ5dGUxICYgMHhmOCkgPT09IDB4ZjApIHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUyID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGUzID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGJ5dGU0ID0gYnl0ZXNbcG9zKytdICYgMHgzZjtcclxuICAgICAgICAgICAgICAgIC8vIHRoaXMgY2FuIGJlID4gMHhmZmZmLCBzbyBwb3NzaWJseSBnZW5lcmF0ZSBzdXJyb2dhdGVzXHJcbiAgICAgICAgICAgICAgICBsZXQgY29kZXBvaW50ID0gKChieXRlMSAmIDB4MDcpIDw8IDB4MTIpIHwgKGJ5dGUyIDw8IDB4MGMpIHwgKGJ5dGUzIDw8IDB4MDYpIHwgYnl0ZTQ7XHJcbiAgICAgICAgICAgICAgICBpZiAoY29kZXBvaW50ID4gMHhmZmZmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gY29kZXBvaW50ICY9IH4weDEwMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGVwb2ludCAtPSAweDEwMDAwO1xyXG4gICAgICAgICAgICAgICAgICAgIG91dC5wdXNoKCgoY29kZXBvaW50ID4+PiAxMCkgJiAweDNmZikgfCAweGQ4MDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGNvZGVwb2ludCA9IDB4ZGMwMCB8IChjb2RlcG9pbnQgJiAweDNmZik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvdXQucHVzaChjb2RlcG9pbnQpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gRklYTUU6IHdlJ3JlIGlnbm9yaW5nIHRoaXNcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBvdXQpO1xyXG4gICAgfTtcclxuICAgIHNjb3BlWydUZXh0RW5jb2RlciddID0gRmFzdFRleHRFbmNvZGVyO1xyXG4gICAgc2NvcGVbJ1RleHREZWNvZGVyJ10gPSBGYXN0VGV4dERlY29kZXI7XHJcbn0pKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnXHJcbiAgICA/IHdpbmRvd1xyXG4gICAgOiB0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCdcclxuICAgICAgICA/IHNlbGZcclxuICAgICAgICA6IHRoaXMpO1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10ZXh0LWVuY29kaW5nLXBvbHlmaWxsLmpzLm1hcCIsIlwidXNlIHN0cmljdFwiXG5cbm1vZHVsZS5leHBvcnRzID0gdHdvUHJvZHVjdFxuXG52YXIgU1BMSVRURVIgPSArKE1hdGgucG93KDIsIDI3KSArIDEuMClcblxuZnVuY3Rpb24gdHdvUHJvZHVjdChhLCBiLCByZXN1bHQpIHtcbiAgdmFyIHggPSBhICogYlxuXG4gIHZhciBjID0gU1BMSVRURVIgKiBhXG4gIHZhciBhYmlnID0gYyAtIGFcbiAgdmFyIGFoaSA9IGMgLSBhYmlnXG4gIHZhciBhbG8gPSBhIC0gYWhpXG5cbiAgdmFyIGQgPSBTUExJVFRFUiAqIGJcbiAgdmFyIGJiaWcgPSBkIC0gYlxuICB2YXIgYmhpID0gZCAtIGJiaWdcbiAgdmFyIGJsbyA9IGIgLSBiaGlcblxuICB2YXIgZXJyMSA9IHggLSAoYWhpICogYmhpKVxuICB2YXIgZXJyMiA9IGVycjEgLSAoYWxvICogYmhpKVxuICB2YXIgZXJyMyA9IGVycjIgLSAoYWhpICogYmxvKVxuXG4gIHZhciB5ID0gYWxvICogYmxvIC0gZXJyM1xuXG4gIGlmKHJlc3VsdCkge1xuICAgIHJlc3VsdFswXSA9IHlcbiAgICByZXN1bHRbMV0gPSB4XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgcmV0dXJuIFsgeSwgeCBdXG59IiwiXCJ1c2Ugc3RyaWN0XCJcblxubW9kdWxlLmV4cG9ydHMgPSBmYXN0VHdvU3VtXG5cbmZ1bmN0aW9uIGZhc3RUd29TdW0oYSwgYiwgcmVzdWx0KSB7XG5cdHZhciB4ID0gYSArIGJcblx0dmFyIGJ2ID0geCAtIGFcblx0dmFyIGF2ID0geCAtIGJ2XG5cdHZhciBiciA9IGIgLSBidlxuXHR2YXIgYXIgPSBhIC0gYXZcblx0aWYocmVzdWx0KSB7XG5cdFx0cmVzdWx0WzBdID0gYXIgKyBiclxuXHRcdHJlc3VsdFsxXSA9IHhcblx0XHRyZXR1cm4gcmVzdWx0XG5cdH1cblx0cmV0dXJuIFthciticiwgeF1cbn0iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3V0ZjhqcyB2Mi4xLjIgYnkgQG1hdGhpYXMgKi9cbjsoZnVuY3Rpb24ocm9vdCkge1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlcyBgZXhwb3J0c2Bcblx0dmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cztcblxuXHQvLyBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgbW9kdWxlYFxuXHR2YXIgZnJlZU1vZHVsZSA9IHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmXG5cdFx0bW9kdWxlLmV4cG9ydHMgPT0gZnJlZUV4cG9ydHMgJiYgbW9kdWxlO1xuXG5cdC8vIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgLCBmcm9tIE5vZGUuanMgb3IgQnJvd3NlcmlmaWVkIGNvZGUsXG5cdC8vIGFuZCB1c2UgaXQgYXMgYHJvb3RgXG5cdHZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWw7XG5cdGlmIChmcmVlR2xvYmFsLmdsb2JhbCA9PT0gZnJlZUdsb2JhbCB8fCBmcmVlR2xvYmFsLndpbmRvdyA9PT0gZnJlZUdsb2JhbCkge1xuXHRcdHJvb3QgPSBmcmVlR2xvYmFsO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmRlY29kZShzdHJpbmcpIHtcblx0XHR2YXIgb3V0cHV0ID0gW107XG5cdFx0dmFyIGNvdW50ZXIgPSAwO1xuXHRcdHZhciBsZW5ndGggPSBzdHJpbmcubGVuZ3RoO1xuXHRcdHZhciB2YWx1ZTtcblx0XHR2YXIgZXh0cmE7XG5cdFx0d2hpbGUgKGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdGlmICh2YWx1ZSA+PSAweEQ4MDAgJiYgdmFsdWUgPD0gMHhEQkZGICYmIGNvdW50ZXIgPCBsZW5ndGgpIHtcblx0XHRcdFx0Ly8gaGlnaCBzdXJyb2dhdGUsIGFuZCB0aGVyZSBpcyBhIG5leHQgY2hhcmFjdGVyXG5cdFx0XHRcdGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcblx0XHRcdFx0aWYgKChleHRyYSAmIDB4RkMwMCkgPT0gMHhEQzAwKSB7IC8vIGxvdyBzdXJyb2dhdGVcblx0XHRcdFx0XHRvdXRwdXQucHVzaCgoKHZhbHVlICYgMHgzRkYpIDw8IDEwKSArIChleHRyYSAmIDB4M0ZGKSArIDB4MTAwMDApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIHVubWF0Y2hlZCBzdXJyb2dhdGU7IG9ubHkgYXBwZW5kIHRoaXMgY29kZSB1bml0LCBpbiBjYXNlIHRoZSBuZXh0XG5cdFx0XHRcdFx0Ly8gY29kZSB1bml0IGlzIHRoZSBoaWdoIHN1cnJvZ2F0ZSBvZiBhIHN1cnJvZ2F0ZSBwYWlyXG5cdFx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0XHRcdGNvdW50ZXItLTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0b3V0cHV0LnB1c2godmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0Ly8gVGFrZW4gZnJvbSBodHRwczovL210aHMuYmUvcHVueWNvZGVcblx0ZnVuY3Rpb24gdWNzMmVuY29kZShhcnJheSkge1xuXHRcdHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cdFx0dmFyIGluZGV4ID0gLTE7XG5cdFx0dmFyIHZhbHVlO1xuXHRcdHZhciBvdXRwdXQgPSAnJztcblx0XHR3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuXHRcdFx0dmFsdWUgPSBhcnJheVtpbmRleF07XG5cdFx0XHRpZiAodmFsdWUgPiAweEZGRkYpIHtcblx0XHRcdFx0dmFsdWUgLT0gMHgxMDAwMDtcblx0XHRcdFx0b3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG5cdFx0XHRcdHZhbHVlID0gMHhEQzAwIHwgdmFsdWUgJiAweDNGRjtcblx0XHRcdH1cblx0XHRcdG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuXHRcdH1cblx0XHRyZXR1cm4gb3V0cHV0O1xuXHR9XG5cblx0ZnVuY3Rpb24gY2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpIHtcblx0XHRpZiAoY29kZVBvaW50ID49IDB4RDgwMCAmJiBjb2RlUG9pbnQgPD0gMHhERkZGKSB7XG5cdFx0XHR0aHJvdyBFcnJvcihcblx0XHRcdFx0J0xvbmUgc3Vycm9nYXRlIFUrJyArIGNvZGVQb2ludC50b1N0cmluZygxNikudG9VcHBlckNhc2UoKSArXG5cdFx0XHRcdCcgaXMgbm90IGEgc2NhbGFyIHZhbHVlJ1xuXHRcdFx0KTtcblx0XHR9XG5cdH1cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0ZnVuY3Rpb24gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIHNoaWZ0KSB7XG5cdFx0cmV0dXJuIHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiBzaGlmdCkgJiAweDNGKSB8IDB4ODApO1xuXHR9XG5cblx0ZnVuY3Rpb24gZW5jb2RlQ29kZVBvaW50KGNvZGVQb2ludCkge1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRkY4MCkgPT0gMCkgeyAvLyAxLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHJldHVybiBzdHJpbmdGcm9tQ2hhckNvZGUoY29kZVBvaW50KTtcblx0XHR9XG5cdFx0dmFyIHN5bWJvbCA9ICcnO1xuXHRcdGlmICgoY29kZVBvaW50ICYgMHhGRkZGRjgwMCkgPT0gMCkgeyAvLyAyLWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiA2KSAmIDB4MUYpIHwgMHhDMCk7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKChjb2RlUG9pbnQgJiAweEZGRkYwMDAwKSA9PSAwKSB7IC8vIDMtYnl0ZSBzZXF1ZW5jZVxuXHRcdFx0Y2hlY2tTY2FsYXJWYWx1ZShjb2RlUG9pbnQpO1xuXHRcdFx0c3ltYm9sID0gc3RyaW5nRnJvbUNoYXJDb2RlKCgoY29kZVBvaW50ID4+IDEyKSAmIDB4MEYpIHwgMHhFMCk7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRlbHNlIGlmICgoY29kZVBvaW50ICYgMHhGRkUwMDAwMCkgPT0gMCkgeyAvLyA0LWJ5dGUgc2VxdWVuY2Vcblx0XHRcdHN5bWJvbCA9IHN0cmluZ0Zyb21DaGFyQ29kZSgoKGNvZGVQb2ludCA+PiAxOCkgJiAweDA3KSB8IDB4RjApO1xuXHRcdFx0c3ltYm9sICs9IGNyZWF0ZUJ5dGUoY29kZVBvaW50LCAxMik7XG5cdFx0XHRzeW1ib2wgKz0gY3JlYXRlQnl0ZShjb2RlUG9pbnQsIDYpO1xuXHRcdH1cblx0XHRzeW1ib2wgKz0gc3RyaW5nRnJvbUNoYXJDb2RlKChjb2RlUG9pbnQgJiAweDNGKSB8IDB4ODApO1xuXHRcdHJldHVybiBzeW1ib2w7XG5cdH1cblxuXHRmdW5jdGlvbiB1dGY4ZW5jb2RlKHN0cmluZykge1xuXHRcdHZhciBjb2RlUG9pbnRzID0gdWNzMmRlY29kZShzdHJpbmcpO1xuXHRcdHZhciBsZW5ndGggPSBjb2RlUG9pbnRzLmxlbmd0aDtcblx0XHR2YXIgaW5kZXggPSAtMTtcblx0XHR2YXIgY29kZVBvaW50O1xuXHRcdHZhciBieXRlU3RyaW5nID0gJyc7XG5cdFx0d2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcblx0XHRcdGNvZGVQb2ludCA9IGNvZGVQb2ludHNbaW5kZXhdO1xuXHRcdFx0Ynl0ZVN0cmluZyArPSBlbmNvZGVDb2RlUG9pbnQoY29kZVBvaW50KTtcblx0XHR9XG5cdFx0cmV0dXJuIGJ5dGVTdHJpbmc7XG5cdH1cblxuXHQvKi0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tKi9cblxuXHRmdW5jdGlvbiByZWFkQ29udGludWF0aW9uQnl0ZSgpIHtcblx0XHRpZiAoYnl0ZUluZGV4ID49IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdHZhciBjb250aW51YXRpb25CeXRlID0gYnl0ZUFycmF5W2J5dGVJbmRleF0gJiAweEZGO1xuXHRcdGJ5dGVJbmRleCsrO1xuXG5cdFx0aWYgKChjb250aW51YXRpb25CeXRlICYgMHhDMCkgPT0gMHg4MCkge1xuXHRcdFx0cmV0dXJuIGNvbnRpbnVhdGlvbkJ5dGUgJiAweDNGO1xuXHRcdH1cblxuXHRcdC8vIElmIHdlIGVuZCB1cCBoZXJlLCBpdOKAmXMgbm90IGEgY29udGludWF0aW9uIGJ5dGVcblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBjb250aW51YXRpb24gYnl0ZScpO1xuXHR9XG5cblx0ZnVuY3Rpb24gZGVjb2RlU3ltYm9sKCkge1xuXHRcdHZhciBieXRlMTtcblx0XHR2YXIgYnl0ZTI7XG5cdFx0dmFyIGJ5dGUzO1xuXHRcdHZhciBieXRlNDtcblx0XHR2YXIgY29kZVBvaW50O1xuXG5cdFx0aWYgKGJ5dGVJbmRleCA+IGJ5dGVDb3VudCkge1xuXHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgYnl0ZSBpbmRleCcpO1xuXHRcdH1cblxuXHRcdGlmIChieXRlSW5kZXggPT0gYnl0ZUNvdW50KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gUmVhZCBmaXJzdCBieXRlXG5cdFx0Ynl0ZTEgPSBieXRlQXJyYXlbYnl0ZUluZGV4XSAmIDB4RkY7XG5cdFx0Ynl0ZUluZGV4Kys7XG5cblx0XHQvLyAxLWJ5dGUgc2VxdWVuY2UgKG5vIGNvbnRpbnVhdGlvbiBieXRlcylcblx0XHRpZiAoKGJ5dGUxICYgMHg4MCkgPT0gMCkge1xuXHRcdFx0cmV0dXJuIGJ5dGUxO1xuXHRcdH1cblxuXHRcdC8vIDItYnl0ZSBzZXF1ZW5jZVxuXHRcdGlmICgoYnl0ZTEgJiAweEUwKSA9PSAweEMwKSB7XG5cdFx0XHRieXRlMiA9IHJlYWRDb250aW51YXRpb25CeXRlKCk7XG5cdFx0XHRjb2RlUG9pbnQgPSAoKGJ5dGUxICYgMHgxRikgPDwgNikgfCBieXRlMjtcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHg4MCkge1xuXHRcdFx0XHRyZXR1cm4gY29kZVBvaW50O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dGhyb3cgRXJyb3IoJ0ludmFsaWQgY29udGludWF0aW9uIGJ5dGUnKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyAzLWJ5dGUgc2VxdWVuY2UgKG1heSBpbmNsdWRlIHVucGFpcmVkIHN1cnJvZ2F0ZXMpXG5cdFx0aWYgKChieXRlMSAmIDB4RjApID09IDB4RTApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDBGKSA8PCAxMikgfCAoYnl0ZTIgPDwgNikgfCBieXRlMztcblx0XHRcdGlmIChjb2RlUG9pbnQgPj0gMHgwODAwKSB7XG5cdFx0XHRcdGNoZWNrU2NhbGFyVmFsdWUoY29kZVBvaW50KTtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRocm93IEVycm9yKCdJbnZhbGlkIGNvbnRpbnVhdGlvbiBieXRlJyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gNC1ieXRlIHNlcXVlbmNlXG5cdFx0aWYgKChieXRlMSAmIDB4RjgpID09IDB4RjApIHtcblx0XHRcdGJ5dGUyID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGUzID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGJ5dGU0ID0gcmVhZENvbnRpbnVhdGlvbkJ5dGUoKTtcblx0XHRcdGNvZGVQb2ludCA9ICgoYnl0ZTEgJiAweDA3KSA8PCAweDEyKSB8IChieXRlMiA8PCAweDBDKSB8XG5cdFx0XHRcdChieXRlMyA8PCAweDA2KSB8IGJ5dGU0O1xuXHRcdFx0aWYgKGNvZGVQb2ludCA+PSAweDAxMDAwMCAmJiBjb2RlUG9pbnQgPD0gMHgxMEZGRkYpIHtcblx0XHRcdFx0cmV0dXJuIGNvZGVQb2ludDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0aHJvdyBFcnJvcignSW52YWxpZCBVVEYtOCBkZXRlY3RlZCcpO1xuXHR9XG5cblx0dmFyIGJ5dGVBcnJheTtcblx0dmFyIGJ5dGVDb3VudDtcblx0dmFyIGJ5dGVJbmRleDtcblx0ZnVuY3Rpb24gdXRmOGRlY29kZShieXRlU3RyaW5nKSB7XG5cdFx0Ynl0ZUFycmF5ID0gdWNzMmRlY29kZShieXRlU3RyaW5nKTtcblx0XHRieXRlQ291bnQgPSBieXRlQXJyYXkubGVuZ3RoO1xuXHRcdGJ5dGVJbmRleCA9IDA7XG5cdFx0dmFyIGNvZGVQb2ludHMgPSBbXTtcblx0XHR2YXIgdG1wO1xuXHRcdHdoaWxlICgodG1wID0gZGVjb2RlU3ltYm9sKCkpICE9PSBmYWxzZSkge1xuXHRcdFx0Y29kZVBvaW50cy5wdXNoKHRtcCk7XG5cdFx0fVxuXHRcdHJldHVybiB1Y3MyZW5jb2RlKGNvZGVQb2ludHMpO1xuXHR9XG5cblx0LyotLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSovXG5cblx0dmFyIHV0ZjggPSB7XG5cdFx0J3ZlcnNpb24nOiAnMi4xLjInLFxuXHRcdCdlbmNvZGUnOiB1dGY4ZW5jb2RlLFxuXHRcdCdkZWNvZGUnOiB1dGY4ZGVjb2RlXG5cdH07XG5cblx0Ly8gU29tZSBBTUQgYnVpbGQgb3B0aW1pemVycywgbGlrZSByLmpzLCBjaGVjayBmb3Igc3BlY2lmaWMgY29uZGl0aW9uIHBhdHRlcm5zXG5cdC8vIGxpa2UgdGhlIGZvbGxvd2luZzpcblx0aWYgKFxuXHRcdHR5cGVvZiBkZWZpbmUgPT0gJ2Z1bmN0aW9uJyAmJlxuXHRcdHR5cGVvZiBkZWZpbmUuYW1kID09ICdvYmplY3QnICYmXG5cdFx0ZGVmaW5lLmFtZFxuXHQpIHtcblx0XHRkZWZpbmUoZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdXRmODtcblx0XHR9KTtcblx0fVx0ZWxzZSBpZiAoZnJlZUV4cG9ydHMgJiYgIWZyZWVFeHBvcnRzLm5vZGVUeXBlKSB7XG5cdFx0aWYgKGZyZWVNb2R1bGUpIHsgLy8gaW4gTm9kZS5qcyBvciBSaW5nb0pTIHYwLjguMCtcblx0XHRcdGZyZWVNb2R1bGUuZXhwb3J0cyA9IHV0Zjg7XG5cdFx0fSBlbHNlIHsgLy8gaW4gTmFyd2hhbCBvciBSaW5nb0pTIHYwLjcuMC1cblx0XHRcdHZhciBvYmplY3QgPSB7fTtcblx0XHRcdHZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdC5oYXNPd25Qcm9wZXJ0eTtcblx0XHRcdGZvciAodmFyIGtleSBpbiB1dGY4KSB7XG5cdFx0XHRcdGhhc093blByb3BlcnR5LmNhbGwodXRmOCwga2V5KSAmJiAoZnJlZUV4cG9ydHNba2V5XSA9IHV0Zjhba2V5XSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9IGVsc2UgeyAvLyBpbiBSaGlubyBvciBhIHdlYiBicm93c2VyXG5cdFx0cm9vdC51dGY4ID0gdXRmODtcblx0fVxuXG59KHRoaXMpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdvcmtlclRlbXBsYXRlID0gcmVxdWlyZSgnLi93b3JrZXJUZW1wbGF0ZScpO1xuXG52YXIgQ09SRVMgPSBuYXZpZ2F0b3IuaGFyZHdhcmVDb25jdXJyZW5jeSB8fCAxO1xuXG52YXIgbm9vcCA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuZnVuY3Rpb24gV29ya2VyTWFuYWdlcihmdW5jLCBvcHRpb25zKSB7XG4gICAgLy8gQ2hlY2sgYXJndW1lbnRzXG4gICAgaWYgKHR5cGVvZiBmdW5jICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgZnVuYyAhPT0gJ2Z1bmN0aW9uJylcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZnVuYyBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgICBpZiAob3B0aW9ucyA9PT0gdW5kZWZpbmVkKVxuICAgICAgICBvcHRpb25zID0ge307XG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIGFyZ3VtZW50IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG5cbiAgICB0aGlzLl93b3JrZXJDb2RlID0gZnVuYy50b1N0cmluZygpO1xuXG4gICAgLy8gUGFyc2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zLm1heFdvcmtlcnMgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLm1heFdvcmtlcnMgPT09ICdhdXRvJykge1xuICAgICAgICB0aGlzLl9udW1Xb3JrZXJzID0gTWF0aC5taW4oQ09SRVMgLSAxLCAxKTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMubWF4V29ya2VycyA+IDApIHtcbiAgICAgICAgdGhpcy5fbnVtV29ya2VycyA9IE1hdGgubWluKG9wdGlvbnMubWF4V29ya2VycywgQ09SRVMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX251bVdvcmtlcnMgPSBDT1JFUztcbiAgICB9XG5cbiAgICB0aGlzLl93b3JrZXJzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3RpbWVvdXQgPSBvcHRpb25zLnRpbWVvdXQgfHwgMDtcbiAgICB0aGlzLl90ZXJtaW5hdGVPbkVycm9yID0gISFvcHRpb25zLnRlcm1pbmF0ZU9uRXJyb3I7XG5cbiAgICB2YXIgZGVwcyA9IG9wdGlvbnMuZGVwcztcbiAgICBpZiAodHlwZW9mIGRlcHMgPT09ICdzdHJpbmcnKVxuICAgICAgICBkZXBzID0gW2RlcHNdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShkZXBzKSlcbiAgICAgICAgZGVwcyA9IHVuZGVmaW5lZDtcblxuICAgIHRoaXMuX2lkID0gMDtcbiAgICB0aGlzLl90ZXJtaW5hdGVkID0gZmFsc2U7XG4gICAgdGhpcy5fd29ya2luZyA9IDA7XG4gICAgdGhpcy5fd2FpdGluZyA9IFtdO1xuXG4gICAgdGhpcy5faW5pdChkZXBzKTtcbn1cblxuV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAoZGVwcykge1xuICAgIHZhciB3b3JrZXJVUkwgPSB3b3JrZXJUZW1wbGF0ZS5uZXdXb3JrZXJVUkwodGhpcy5fd29ya2VyQ29kZSwgZGVwcyk7XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuX251bVdvcmtlcnM7IGkrKykge1xuICAgICAgICB2YXIgd29ya2VyID0gbmV3IFdvcmtlcih3b3JrZXJVUkwpO1xuICAgICAgICB3b3JrZXIub25tZXNzYWdlID0gdGhpcy5fb25tZXNzYWdlLmJpbmQodGhpcywgd29ya2VyKTtcbiAgICAgICAgd29ya2VyLm9uZXJyb3IgPSB0aGlzLl9vbmVycm9yLmJpbmQodGhpcywgd29ya2VyKTtcbiAgICAgICAgd29ya2VyLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICAgICAgd29ya2VyLmlkID0gaTtcbiAgICAgICAgdGhpcy5fd29ya2Vycy5zZXQod29ya2VyLCBudWxsKTtcbiAgICB9XG5cbiAgICBVUkwucmV2b2tlT2JqZWN0VVJMKHdvcmtlclVSTCk7XG59O1xuXG5Xb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fb25lcnJvciA9IGZ1bmN0aW9uICh3b3JrZXIsIGVycm9yKSB7XG4gICAgaWYgKHRoaXMuX3Rlcm1pbmF0ZWQpXG4gICAgICAgIHJldHVybjtcbiAgICB0aGlzLl93b3JraW5nLS07XG4gICAgd29ya2VyLnJ1bm5pbmcgPSBmYWxzZTtcbiAgICB2YXIgY2FsbGJhY2sgPSB0aGlzLl93b3JrZXJzLmdldCh3b3JrZXIpO1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICBjYWxsYmFja1sxXShlcnJvci5tZXNzYWdlKTtcbiAgICB9XG4gICAgdGhpcy5fd29ya2Vycy5zZXQod29ya2VyLCBudWxsKTtcbiAgICBpZiAodGhpcy5fdGVybWluYXRlT25FcnJvcikge1xuICAgICAgICB0aGlzLnRlcm1pbmF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2V4ZWMoKTtcbiAgICB9XG59O1xuXG5Xb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS5fb25tZXNzYWdlID0gZnVuY3Rpb24gKHdvcmtlciwgZXZlbnQpIHtcbiAgICBpZiAodGhpcy5fdGVybWluYXRlZClcbiAgICAgICAgcmV0dXJuO1xuICAgIHRoaXMuX3dvcmtpbmctLTtcbiAgICB3b3JrZXIucnVubmluZyA9IGZhbHNlO1xuICAgIHZhciBjYWxsYmFjayA9IHRoaXMuX3dvcmtlcnMuZ2V0KHdvcmtlcik7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIGNhbGxiYWNrWzBdKGV2ZW50LmRhdGEuZGF0YSk7XG4gICAgfVxuICAgIHRoaXMuX3dvcmtlcnMuc2V0KHdvcmtlciwgbnVsbCk7XG4gICAgdGhpcy5fZXhlYygpO1xufTtcblxuV29ya2VyTWFuYWdlci5wcm90b3R5cGUuX2V4ZWMgPSBmdW5jdGlvbiAoKSB7XG4gICAgZm9yICh2YXIgd29ya2VyIG9mIHRoaXMuX3dvcmtlcnMua2V5cygpKSB7XG4gICAgICAgIGlmICh0aGlzLl93b3JraW5nID09PSB0aGlzLl9udW1Xb3JrZXJzIHx8XG4gICAgICAgICAgICB0aGlzLl93YWl0aW5nLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghd29ya2VyLnJ1bm5pbmcpIHtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5fd2FpdGluZy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHZhciBleGVjSW5mbyA9IHRoaXMuX3dhaXRpbmdbaV07XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBleGVjSW5mb1s0XSA9PT0gJ251bWJlcicgJiYgZXhlY0luZm9bNF0gIT09IHdvcmtlci5pZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyB0aGlzIG1lc3NhZ2UgaXMgaW50ZW5kZWQgdG8gYW5vdGhlciB3b3JrZXIsIGxldCdzIGlnbm9yZSBpdFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fd2FpdGluZy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiAnZXhlYycsXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50OiBleGVjSW5mb1swXSxcbiAgICAgICAgICAgICAgICAgICAgYXJnczogZXhlY0luZm9bMV1cbiAgICAgICAgICAgICAgICB9LCBleGVjSW5mb1syXSk7XG4gICAgICAgICAgICAgICAgd29ya2VyLnJ1bm5pbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHdvcmtlci50aW1lID0gRGF0ZS5ub3coKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JrZXJzLnNldCh3b3JrZXIsIGV4ZWNJbmZvWzNdKTtcbiAgICAgICAgICAgICAgICB0aGlzLl93b3JraW5nKys7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5Xb3JrZXJNYW5hZ2VyLnByb3RvdHlwZS50ZXJtaW5hdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHRoaXMuX3Rlcm1pbmF0ZWQpIHJldHVybjtcbiAgICBmb3IgKHZhciBlbnRyeSBvZiB0aGlzLl93b3JrZXJzKSB7XG4gICAgICAgIGVudHJ5WzBdLnRlcm1pbmF0ZSgpO1xuICAgICAgICBpZiAoZW50cnlbMV0pIHtcbiAgICAgICAgICAgIGVudHJ5WzFdWzFdKG5ldyBFcnJvcignVGVybWluYXRlZCcpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aGlzLl93b3JrZXJzLmNsZWFyKCk7XG4gICAgdGhpcy5fd2FpdGluZyA9IFtdO1xuICAgIHRoaXMuX3dvcmtpbmcgPSAwO1xuICAgIHRoaXMuX3Rlcm1pbmF0ZWQgPSB0cnVlO1xufTtcblxuV29ya2VyTWFuYWdlci5wcm90b3R5cGUucG9zdEFsbCA9IGZ1bmN0aW9uIChldmVudCwgYXJncykge1xuICAgIGlmICh0aGlzLl90ZXJtaW5hdGVkKVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Nhbm5vdCBwb3N0ICh0ZXJtaW5hdGVkKScpO1xuICAgIHZhciBwcm9taXNlcyA9IFtdO1xuICAgIGZvciAodmFyIHdvcmtlciBvZiB0aGlzLl93b3JrZXJzLmtleXMoKSkge1xuICAgICAgICBwcm9taXNlcy5wdXNoKHRoaXMucG9zdChldmVudCwgYXJncywgW10sIHdvcmtlci5pZCkpO1xuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuV29ya2VyTWFuYWdlci5wcm90b3R5cGUucG9zdCA9IGZ1bmN0aW9uIChldmVudCwgYXJncywgdHJhbnNmZXJhYmxlLCBpZCkge1xuICAgIGlmIChhcmdzID09PSB1bmRlZmluZWQpIGFyZ3MgPSBbXTtcbiAgICBpZiAodHJhbnNmZXJhYmxlID09PSB1bmRlZmluZWQpIHRyYW5zZmVyYWJsZSA9IFtdO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShhcmdzKSkge1xuICAgICAgICBhcmdzID0gW2FyZ3NdO1xuICAgIH1cbiAgICBpZiAoIUFycmF5LmlzQXJyYXkodHJhbnNmZXJhYmxlKSkge1xuICAgICAgICB0cmFuc2ZlcmFibGUgPSBbdHJhbnNmZXJhYmxlXTtcbiAgICB9XG5cbiAgICB2YXIgc2VsZiA9IHRoaXM7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgaWYgKHNlbGYuX3Rlcm1pbmF0ZWQpIHRocm93IG5ldyBFcnJvcignQ2Fubm90IHBvc3QgKHRlcm1pbmF0ZWQpJyk7XG4gICAgICAgIHNlbGYuX3dhaXRpbmcucHVzaChbZXZlbnQsIGFyZ3MsIHRyYW5zZmVyYWJsZSwgW3Jlc29sdmUsIHJlamVjdF0sIGlkXSk7XG4gICAgICAgIHNlbGYuX2V4ZWMoKTtcbiAgICB9KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gV29ya2VyTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHdvcmtlciA9IGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgd2luZG93ID0gc2VsZi53aW5kb3cgPSBzZWxmO1xuICAgIGZ1bmN0aW9uIE1hbmFnZWRXb3JrZXIoKSB7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVycyA9IHt9O1xuICAgIH1cbiAgICBNYW5hZ2VkV29ya2VyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldmVudCwgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKHRoaXMuX2xpc3RlbmVyc1tldmVudF0pXG4gICAgICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcigndGhlcmUgaXMgYWxyZWFkeSBhIGxpc3RlbmVyIGZvciAnICsgZXZlbnQpO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignY2FsbGJhY2sgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICAgIHRoaXMuX2xpc3RlbmVyc1tldmVudF0gPSBjYWxsYmFjaztcbiAgICB9O1xuICAgIE1hbmFnZWRXb3JrZXIucHJvdG90eXBlLl9zZW5kID0gZnVuY3Rpb24gKGlkLCBkYXRhLCB0cmFuc2ZlcmFibGUpIHtcbiAgICAgICAgaWYgKHRyYW5zZmVyYWJsZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0cmFuc2ZlcmFibGUgPSBbXTtcbiAgICAgICAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheSh0cmFuc2ZlcmFibGUpKSB7XG4gICAgICAgICAgICB0cmFuc2ZlcmFibGUgPSBbdHJhbnNmZXJhYmxlXTtcbiAgICAgICAgfVxuICAgICAgICBzZWxmLnBvc3RNZXNzYWdlKHtcbiAgICAgICAgICAgIGlkOiBpZCxcbiAgICAgICAgICAgIGRhdGE6IGRhdGFcbiAgICAgICAgfSwgdHJhbnNmZXJhYmxlKTtcbiAgICB9O1xuICAgIE1hbmFnZWRXb3JrZXIucHJvdG90eXBlLl90cmlnZ2VyID0gZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XG4gICAgICAgIGlmICghdGhpcy5fbGlzdGVuZXJzW2V2ZW50XSlcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXZlbnQgJyArIGV2ZW50ICsgJyBpcyBub3QgZGVmaW5lZCcpO1xuICAgICAgICB0aGlzLl9saXN0ZW5lcnNbZXZlbnRdLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH07XG4gICAgdmFyIHdvcmtlciA9IG5ldyBNYW5hZ2VkV29ya2VyKCk7XG4gICAgc2VsZi5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgc3dpdGNoKGV2ZW50LmRhdGEuYWN0aW9uKSB7XG4gICAgICAgICAgICBjYXNlICdleGVjJzpcbiAgICAgICAgICAgICAgICBldmVudC5kYXRhLmFyZ3MudW5zaGlmdChmdW5jdGlvbiAoZGF0YSwgdHJhbnNmZXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgICAgIHdvcmtlci5fc2VuZChldmVudC5kYXRhLmlkLCBkYXRhLCB0cmFuc2ZlcmFibGUpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHdvcmtlci5fdHJpZ2dlcihldmVudC5kYXRhLmV2ZW50LCBldmVudC5kYXRhLmFyZ3MpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncGluZyc6XG4gICAgICAgICAgICAgICAgd29ya2VyLl9zZW5kKGV2ZW50LmRhdGEuaWQsICdwb25nJyk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5leHBlY3RlZCBhY3Rpb246ICcgKyBldmVudC5kYXRhLmFjdGlvbik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFwiQ09ERVwiO1xufTtcblxudmFyIHdvcmtlclN0ciA9IHdvcmtlci50b1N0cmluZygpLnNwbGl0KCdcIkNPREVcIjsnKTtcblxuZXhwb3J0cy5uZXdXb3JrZXJVUkwgPSBmdW5jdGlvbiBuZXdXb3JrZXJVUkwoY29kZSwgZGVwcykge1xuICAgIHZhciBibG9iID0gbmV3IEJsb2IoWycoJywgd29ya2VyU3RyWzBdLCAnaW1wb3J0U2NyaXB0cy5hcHBseShzZWxmLCAnICsgSlNPTi5zdHJpbmdpZnkoZGVwcykgKyAnKTtcXG4nLCAnKCcsIGNvZGUsICcpKCk7Jywgd29ya2VyU3RyWzFdLCAnKSgpOyddLCB7dHlwZTogJ2FwcGxpY2F0aW9uL2phdmFzY3JpcHQnfSk7XG4gICAgcmV0dXJuIFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiLy8gVGhpcyBmdW5jdGlvbiBhbGxvdyB0byByZWZlcmVuY2UgYXN5bmMgY2h1bmtzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnUgPSAoY2h1bmtJZCkgPT4ge1xuXHQvLyByZXR1cm4gdXJsIGZvciBmaWxlbmFtZXMgYmFzZWQgb24gdGVtcGxhdGVcblx0cmV0dXJuIFwiXCIgKyBjaHVua0lkICsgXCIuaW5kZXguanNcIjtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwiLy8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5yID0gKGV4cG9ydHMpID0+IHtcblx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG5cdH1cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5ubWQgPSAobW9kdWxlKSA9PiB7XG5cdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdHJldHVybiBtb2R1bGU7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0MTc5OiAwXG59O1xuXG4vLyBubyBjaHVuayBvbiBkZW1hbmQgbG9hZGluZ1xuXG4vLyBubyBwcmVmZXRjaGluZ1xuXG4vLyBubyBwcmVsb2FkZWRcblxuLy8gbm8gSE1SXG5cbi8vIG5vIEhNUiBtYW5pZmVzdFxuXG4vLyBubyBvbiBjaHVua3MgbG9hZGVkXG5cbi8vIG5vIGpzb25wIGZ1bmN0aW9uIiwiaW1wb3J0IFJlYWN0LCB7IHVzZVN0YXRlLCB1c2VFZmZlY3QgfSBmcm9tIFwicmVhY3RcIlxuLy9pbXBvcnQgd3N3b3JrZXIgZnJvbSBcIi4vd3N3b3JrZXJcIjtcblxuLy9jbGFzcyBXZWJXb3JrZXIge1xuLy8gIGNvbnN0cnVjdG9yKHdvcmtlcikge1xuLy8gICAgICBjb25zdCBjb2RlID0gd29ya2VyLnRvU3RyaW5nKCk7XG4vLyAgICAgIGNvbnN0IGJsb2IgPSBuZXcgQmxvYihbJygnK2NvZGUrJykoKSddKTtcbi8vICAgICAgcmV0dXJuIG5ldyBXb3JrZXIoVVJMLmNyZWF0ZU9iamVjdFVSTChibG9iKSk7XG4vLyAgfVxuLy99XG5cbmV4cG9ydCBjb25zdCBXc0hPQyA9IChDYW52YXMpID0+ICh7XG4gICAgaXNPbj10cnVlLFxuICAgIHRva2VuLFxuICAgIHdlYnNvY2tldFVSTCxcbiAgICByb2JvdE5hbWUsXG4gICAgZXhjaGFuZ2U9XCJyZ2JqcGVnXCIsXG4gICAgaGFuZGxlRXJyb3I9KGVycm9yOmFueSkgPT4ge2NvbnNvbGUubG9nKHtlcnJvcn0pfSxcbiAgICAuLi5wcm9wc1xuICB9KSA9PiB7XG4gICAgXG4gICAgY29uc3QgW2ltYWdlLCBzZXRJbWFnZV0gPSB1c2VTdGF0ZShuZXcgSW1hZ2UoKSlcbiAgICBjb25zdCBbd29ya2VyLHNldFdvcmtlcl0gPSB1c2VTdGF0ZShudWxsKVxuICAgICAgXG4gICAgICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgICAgICBsZXQgd2Vid29ya2VyXG4gICAgICAgIHdlYndvcmtlciA9IG5ldyBXb3JrZXIobmV3IFVSTCgnLi93c3dvcmtlcicsIGltcG9ydC5tZXRhLnVybCkpXG5cbiAgICAgICAgd2Vid29ya2VyLmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCAoe2RhdGF9KSA9PiB7XG4gICAgICAgICAgY29uc3Qge3R5cGUsIHBheWxvYWR9ID0gZGF0YVxuICAgICAgICAgIGNvbnNvbGUubG9nKFwiaXQncyB1cGRhdGVkXCIpXG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIFwiaW1hZ2VcIjpcbiAgICAgICAgICAgICAgY29uc3QgbmV3SW1nID0gbmV3IEltYWdlKClcbiAgICAgICAgICAgICAgaWYgKHBheWxvYWQpIHtcbiAgICAgICAgICAgICAgICBuZXdJbWcuc3JjID0gcGF5bG9hZFxuICAgICAgICAgICAgICAgIG5ld0ltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICAgICAgICAgICAgICBzZXRJbWFnZShuZXdJbWcpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNldEltYWdlKG5ld0ltZylcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBjYXNlIFwiZXJyb3JcIjpcbiAgICAgICAgICAgICAgaGFuZGxlRXJyb3IocGF5bG9hZClcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhkYXRhKVxuICAgICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHNldFdvcmtlcih3ZWJ3b3JrZXIpXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgd2Vid29ya2VyLnBvc3RNZXNzYWdlKHt0eXBlOlwiY2xvc2VcIn0pXG4gICAgICAgICAgd2Vid29ya2VyLnRlcm1pbmF0ZSgpXG4gICAgICAgIH1cbiAgICAgIH0sW10pXG5cbiAgICAgIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgICAgIGlmICh3b3JrZXIpIHtcbiAgICAgICAgICBpZiAoaXNPbikge1xuICAgICAgICAgICAgbGV0IGNvbnRyb2xQYWNrZXQgPSB7XG4gICAgICAgICAgICAgIGNvbW1hbmQ6ICdwdWxsJyxcbiAgICAgICAgICAgICAgZXhjaGFuZ2U6IGV4Y2hhbmdlLFxuICAgICAgICAgICAgICBhY2Nlc3NUb2tlbjogdG9rZW4sXG4gICAgICAgICAgICAgIHJvYm90X25hbWU6IHJvYm90TmFtZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd29ya2VyLnBvc3RNZXNzYWdlKHt0eXBlOlwib3BlblwiLCBwYXlsb2FkOiBKU09OLnN0cmluZ2lmeShjb250cm9sUGFja2V0KSwgdXJsOiB3ZWJzb2NrZXRVUkx9KVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB3b3JrZXIucG9zdE1lc3NhZ2Uoe3R5cGU6XCJjbG9zZVwifSlcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgIH0gIFxuICAgICAgfSwgW3JvYm90TmFtZSwgZXhjaGFuZ2UsIHRva2VuLCBpc09uLCB3b3JrZXJdKVxuICAgIFxuICAgIHJldHVybiA8Q2FudmFzIGltYWdlPXtpbWFnZX0gey4uLnByb3BzfS8+ICAgIFxufSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVJlZiB9IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgV3NIT0MgfSBmcm9tICcuL1dzSE9DJ1xuXG5jb25zdCBSZWFjdFJnYlN0cmVhbSA9ICh7XG4gIHBvc1ggPSAwLFxuICBwb3NZID0gMCxcbiAgd2lkdGgsXG4gIGhlaWdodCxcbiAgcGxhY2Vob2xkZXJUZXh0ID0gJ05vIEltYWdlJyxcbiAgaW1hZ2UgPSBuZXcgSW1hZ2UoKSxcbn06IGFueSkgPT4ge1xuICBjb25zdCBjYW52YXNSZWYgPSB1c2VSZWY8SFRNTENhbnZhc0VsZW1lbnQgfCBudWxsPiAobnVsbClcblxuICBjb25zdCBjYW52YXNEcmF3ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi5jdXJyZW50XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgICBjb250ZXh0ICYmIGNvbnRleHQuZHJhd0ltYWdlKGltYWdlLCBwb3NYLCBwb3NZLCB3aWR0aCwgaGVpZ2h0KVxuICAgIH1cbiAgICBcbiAgfSAgXG5cbiAgY29uc3QgZHJhd1BsYWNlaG9sZGVyID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi5jdXJyZW50XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpXG4gICAgICBpZiAoY29udGV4dCkge1xuICAgICAgICBjb250ZXh0LmNsZWFyUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gJyNkM2QzZDMnXG4gICAgICAgIGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcidcbiAgICAgICAgY29udGV4dC5mb250ID0gJzVlbSBBcmlhbCdcbiAgICAgICAgY29udGV4dC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJ1xuICAgICAgICBjb250ZXh0LmZpbGxUZXh0KFxuICAgICAgICAgIHBsYWNlaG9sZGVyVGV4dCxcbiAgICAgICAgICBjYW52YXMud2lkdGggLyAyLFxuICAgICAgICAgIGNhbnZhcy5oZWlnaHQgLyAyXG4gICAgICAgIClcbiAgICAgIH1cbiAgICBcbiAgICB9XG4gICAgXG4gIH1cblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGNhbnZhc0RyYXcoKVxuICAgIGlmICghaW1hZ2Uuc3JjKXtcbiAgICAgIGRyYXdQbGFjZWhvbGRlcigpXG4gICAgfVxuICB9LCBbaW1hZ2VdKVxuXG4gIHJldHVybiA8Y2FudmFzIHJlZj17Y2FudmFzUmVmfSB3aWR0aD17d2lkdGh9IGhlaWdodD17aGVpZ2h0fSAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBXc0hPQyhSZWFjdFJnYlN0cmVhbSkiLCJpbXBvcnQgUmVhY3QsIHsgdXNlRWZmZWN0LCB1c2VSZWYsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5pbXBvcnQgZml0IGZyb20gJ2NhbnZhcy1maXQnXG5pbXBvcnQgeyBXc0hPQyB9IGZyb20gJy4vV3NIT0MnXG5cbmNvbnN0IFJlYWN0UmVzcG9uc2l2ZVJnYlN0cmVhbSA9ICh7XG4gIG1heFdpZHRoLFxuICBtaW5XaWR0aCxcbiAgYXNwZWN0UmF0aW8sXG4gIHBsYWNlaG9sZGVyVGV4dCA9ICdObyBJbWFnZScsXG4gIGltYWdlXG59IDoge1xuICBtYXhXaWR0aDogbnVtYmVyLFxuICBtaW5XaWR0aDogbnVtYmVyLFxuICBhc3BlY3RSYXRpbzogbnVtYmVyLFxuICBwbGFjZWhvbGRlclRleHQ6IHN0cmluZyxcbiAgaW1hZ2U6IGFueSxcbn0pID0+IHtcbiAgbGV0IHJlc2l6ZVRpbWVvdXQ6YW55XG4gIGNvbnN0IFtkcmF3aW5nLCBzZXREcmF3aW5nXSA9IHVzZVN0YXRlKGZhbHNlKVxuXG4gIGNvbnN0IGNhbnZhc1JlZiA9IHVzZVJlZjxIVE1MQ2FudmFzRWxlbWVudCB8IG51bGw+KG51bGwpXG4gIFxuICBjb25zdCBkcmF3ID0gKCkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGNhbnZhc1JlZi5jdXJyZW50XG4gICAgaWYgKGNhbnZhcykge1xuICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJylcbiAgICAgIGN0eCAmJiBjdHguZHJhd0ltYWdlKGltYWdlLCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpXG4gICAgfVxuICB9XG5cbiAgY29uc3QgaGFuZGxlUmVzaXplID0gKCkgPT4ge1xuICAgIGNsZWFyVGltZW91dChyZXNpemVUaW1lb3V0KVxuICAgIHNldERyYXdpbmcoZmFsc2UpXG4gICAgcmVzaXplVGltZW91dCA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgY29uc3QgY2FudmFzID0gY2FudmFzUmVmLmN1cnJlbnRcbiAgICAgIGlmIChjYW52YXMpIHtcbiAgICAgICAgZml0KGNhbnZhcylcbiAgICAgICAgc2V0RHJhd2luZyh0cnVlKVxuICAgICAgICBpZiAoIWltYWdlLnNyYykge1xuICAgICAgICAgIGRyYXdQbGFjZWhvbGRlcigpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIFxuICAgIH0sIDUwMClcbiAgfVxuXG4gIGNvbnN0IGRyYXdQbGFjZWhvbGRlciA9ICgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBjYW52YXNSZWYuY3VycmVudFxuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIGNvbnN0IGNvbnRleHQgPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKVxuICAgICAgaWYgKGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KVxuICAgICAgICBjb250ZXh0LmZpbGxTdHlsZSA9ICcjZDNkM2QzJ1xuICAgICAgICBjb250ZXh0LnRleHRBbGlnbiA9ICdjZW50ZXInXG4gICAgICAgIGNvbnRleHQuZm9udCA9ICc1ZW0gQXJpYWwnXG4gICAgICAgIGNvbnRleHQudGV4dEJhc2VsaW5lID0gJ21pZGRsZSdcbiAgICAgICAgY29udGV4dC5maWxsVGV4dChcbiAgICAgICAgICBwbGFjZWhvbGRlclRleHQsXG4gICAgICAgICAgY2FudmFzLndpZHRoIC8gMixcbiAgICAgICAgICBjYW52YXMuaGVpZ2h0IC8gMlxuICAgICAgICApXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBjYW52YXNSZWYuY3VycmVudFxuICAgIGlmIChjYW52YXMpIHtcbiAgICAgIGZpdChjYW52YXMpXG4gICAgICBkcmF3KClcbiAgICAgIHNldERyYXdpbmcodHJ1ZSlcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCBoYW5kbGVSZXNpemUsIGZhbHNlKVxuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZVJlc2l6ZSwgZmFsc2UpXG4gICAgfVxuICB9LCBbXSlcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIGRyYXcoKVxuICAgIGlmICghaW1hZ2Uuc3JjKSB7XG4gICAgICBkcmF3UGxhY2Vob2xkZXIoKVxuICAgIH1cbiAgfSwgW2ltYWdlXSlcblxuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIHN0eWxlPXt7XG4gICAgICAgIGFzcGVjdFJhdGlvOiBhc3BlY3RSYXRpby50b1N0cmluZygpLFxuICAgICAgICBtYXhXaWR0aCxcbiAgICAgICAgbWluV2lkdGgsXG4gICAgICAgIHBhZGRpbmc6IDAsXG4gICAgICAgIG1hcmdpbjogMCxcbiAgICAgICAgcG9zaXRpb246ICdyZWxhdGl2ZSdcbiAgICAgIH19XG4gICAgPlxuICAgICAgPGNhbnZhcyBzdHlsZT17ZHJhd2luZyA/IHt9IDogeyBkaXNwbGF5OiAnbm9uZScgfX0gcmVmPXtjYW52YXNSZWZ9IC8+XG4gICAgPC9kaXY+XG4gIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgV3NIT0MoUmVhY3RSZXNwb25zaXZlUmdiU3RyZWFtKSIsImltcG9ydCBSZWFjdCwgeyB1c2VFZmZlY3QsIHVzZVN0YXRlIH0gZnJvbSAncmVhY3QnXG5cbmV4cG9ydCBjb25zdCBSZW1icmFpbkltYWdlID0gKHsgdG9rZW4sIHVybCwgd2lkdGgsIGhlaWdodCwgYWx0PVwiSW1hZ2VcIiwgb25Mb2FkPSgpPT57fSwgb25FcnJvcj0oKT0+e30gfTpcbiAge1xuICAgIHRva2VuOiBzdHJpbmcsXG4gICAgdXJsOiBzdHJpbmcsXG4gICAgd2lkdGg6IG51bWJlcixcbiAgICBoZWlnaHQ6IG51bWJlcixcbiAgICBhbHQ6IHN0cmluZyxcbiAgICBvbkxvYWQ6IGFueSxcbiAgICBvbkVycm9yOiBhbnksXG4gIH0pID0+IHtcbiAgY29uc3QgW3NyYywgc2V0U3JjXSA9IHVzZVN0YXRlKFwiXCIpXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKHVybCkge1xuICAgICAgZmV0Y2godXJsLCB7IGhlYWRlcnM6IHsgQXV0aG9yaXphdGlvbjogdG9rZW4gfSB9KS50aGVuKChyZXNwKSA9PiB7XG4gICAgICAgIHJlc3AuYmxvYigpLnRoZW4oKGJsb2JSZXNwKSA9PiB7XG4gICAgICAgICAgY29uc3QgZGF0YSA9IGJsb2JSZXNwXG4gICAgICAgICAgY29uc3QgdXJsQ3JlYXRvciA9IHdpbmRvdy5VUkwgfHwgd2luZG93LndlYmtpdFVSTFxuICAgICAgICAgIGNvbnN0IG9iamVjdFVybCA9IHVybENyZWF0b3IuY3JlYXRlT2JqZWN0VVJMKGRhdGEpXG4gICAgICAgICAgc2V0U3JjKG9iamVjdFVybClcbiAgICAgICAgfSlcbiAgICAgIH0pLmNhdGNoKG9uRXJyb3IpXG4gICAgfVxuICB9LCBbdXJsXSlcbiAgcmV0dXJuIChcbiAgICA8aW1nXG4gICAgICBvbkxvYWQ9e29uTG9hZH1cbiAgICAgIHNyYz17c3JjICYmIHNyY31cbiAgICAgIGlkPSdyZW1icmFpbkltYWdlJ1xuICAgICAgY2xhc3NOYW1lPSdyZW1icmFpbi1pbWFnZSdcbiAgICAgIHdpZHRoPXt3aWR0aH1cbiAgICAgIGhlaWdodD17aGVpZ2h0fVxuICAgICAgYWx0PXthbHQgPyBhbHQgOiAnJ31cbiAgICAvPlxuICApXG59XG4iLCJpbXBvcnQgeyBCdWZmZXIgfSBmcm9tICdidWZmZXIvJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElPcGVyYXRvclByb3BzIHtcbiAgZGF0YVdTVXJsOiBzdHJpbmdcbiAgcm9ib3ROYW1lOiBzdHJpbmdcbiAgYWNjZXNzVG9rZW46IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvYm90SW1hZ2VEYXRhIHtcbiAgZGF0YTogQnVmZmVyXG4gIHR5cGU6IHN0cmluZ1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElXZWJTb2NrZXRDb250cm9sUGFja2FnZSB7XG4gIGNvbW1hbmQ6IHN0cmluZ1xuICBleGNoYW5nZTogc3RyaW5nXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm9ib3REYXRhIHtcbiAgZng6IG51bWJlclxuICBmeTogbnVtYmVyXG4gIHBweDogbnVtYmVyXG4gIHBweTogbnVtYmVyXG4gIGRlcHRoX3VuaXQ6IG51bWJlclxuICB0aW1lOiBudW1iZXJcbiAgZnJhbWVpbmRleDogbnVtYmVyXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm9ib3RTdGF0ZSB7XG4gIGFybV9zdGF0ZTogc3RyaW5nXG4gIHN0YXRlX21hY2hpbmU6IHN0cmluZ1xuICBsYXN0X2dvdG86IG9iamVjdFxuICBqb2ludHM6IG51bWJlcltdXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9pbnQge1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG59XG5cbmV4cG9ydCBjbGFzcyBSZWN0YW5nbGUge1xuICB4OiBudW1iZXJcbiAgeTogbnVtYmVyXG4gIHc6IG51bWJlclxuICBoOiBudW1iZXJcblxuICBwdWJsaWMgc3RhdGljIGZyb21Qb2ludHMocDE6IFBvaW50LCBwMjogUG9pbnQpOiBSZWN0YW5nbGUge1xuICAgIC8vIERldGVybWluZSB0b3BMZWZ0IGFuZCBib3R0b21SaWdodCBwb2ludHMgb2YgdGhlIHJlY3RhbmdsZVxuICAgIGxldCB0b3BMZWZ0ID0ge1xuICAgICAgeDogTWF0aC5taW4ocDEueCwgcDIueCksXG4gICAgICB5OiBNYXRoLm1pbihwMS55LCBwMi55KVxuICAgIH1cbiAgICBsZXQgYm90dG9tUmlnaHQgPSB7XG4gICAgICB4OiBNYXRoLm1heChwMS54LCBwMi54KSxcbiAgICAgIHk6IE1hdGgubWF4KHAxLnksIHAyLnkpXG4gICAgfVxuICAgIHJldHVybiBuZXcgUmVjdGFuZ2xlKFxuICAgICAgdG9wTGVmdC54LFxuICAgICAgdG9wTGVmdC55LFxuICAgICAgYm90dG9tUmlnaHQueCAtIHRvcExlZnQueCxcbiAgICAgIGJvdHRvbVJpZ2h0LnkgLSB0b3BMZWZ0LnlcbiAgICApXG4gIH1cblxuICBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgdzogbnVtYmVyLCBoOiBudW1iZXIpIHtcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy55ID0geVxuICAgIHRoaXMudyA9IHdcbiAgICB0aGlzLmggPSBoXG4gIH1cblxuICBnZXQgVG9wTGVmdCgpOiBQb2ludCB7XG4gICAgcmV0dXJuIHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfVxuICB9XG4gIGdldCBUb3BSaWdodCgpOiBQb2ludCB7XG4gICAgcmV0dXJuIHsgeDogdGhpcy54ICsgdGhpcy53LCB5OiB0aGlzLnkgfVxuICB9XG4gIGdldCBCb3R0b21MZWZ0KCk6IFBvaW50IHtcbiAgICByZXR1cm4geyB4OiB0aGlzLngsIHk6IHRoaXMueSArIHRoaXMuaCB9XG4gIH1cbiAgZ2V0IEJvdHRvbVJpZ2h0KCk6IFBvaW50IHtcbiAgICByZXR1cm4geyB4OiB0aGlzLnggKyB0aGlzLncsIHk6IHRoaXMueSArIHRoaXMuaCB9XG4gIH1cbiAgZ2V0IENlbnRlcigpOiBQb2ludCB7XG4gICAgcmV0dXJuIHsgeDogdGhpcy54ICsgdGhpcy53ICogMC41LCB5OiB0aGlzLnkgKyB0aGlzLmggKiAwLjUgfVxuICB9XG4gIGdldCBDZW50ZXJUb3AoKTogUG9pbnQge1xuICAgIHJldHVybiB7IHg6IHRoaXMueCArIHRoaXMudyAqIDAuNSwgeTogdGhpcy55IH1cbiAgfVxuICBnZXQgQ2VudGVyQm90dG9tKCk6IFBvaW50IHtcbiAgICByZXR1cm4geyB4OiB0aGlzLnggKyB0aGlzLncgKiAwLjUsIHk6IHRoaXMueSArIHRoaXMuaCB9XG4gIH1cbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tKSB7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgaWwgPSBmcm9tLmxlbmd0aCwgaiA9IHRvLmxlbmd0aDsgaSA8IGlsOyBpKyssIGorKylcclxuICAgICAgICB0b1tqXSA9IGZyb21baV07XHJcbiAgICByZXR1cm4gdG87XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHByaXZhdGVNYXApIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBnZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcHJpdmF0ZU1hcC5nZXQocmVjZWl2ZXIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19jbGFzc1ByaXZhdGVGaWVsZFNldChyZWNlaXZlciwgcHJpdmF0ZU1hcCwgdmFsdWUpIHtcclxuICAgIGlmICghcHJpdmF0ZU1hcC5oYXMocmVjZWl2ZXIpKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcImF0dGVtcHRlZCB0byBzZXQgcHJpdmF0ZSBmaWVsZCBvbiBub24taW5zdGFuY2VcIik7XHJcbiAgICB9XHJcbiAgICBwcml2YXRlTWFwLnNldChyZWNlaXZlciwgdmFsdWUpO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbiIsImV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRnVuY3Rpb24uanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yQ2xhc3MoY3JlYXRlSW1wbCkge1xuICAgIHZhciBfc3VwZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcbiAgICAgICAgRXJyb3IuY2FsbChpbnN0YW5jZSk7XG4gICAgICAgIGluc3RhbmNlLnN0YWNrID0gbmV3IEVycm9yKCkuc3RhY2s7XG4gICAgfTtcbiAgICB2YXIgY3RvckZ1bmMgPSBjcmVhdGVJbXBsKF9zdXBlcik7XG4gICAgY3RvckZ1bmMucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuICAgIGN0b3JGdW5jLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGN0b3JGdW5jO1xuICAgIHJldHVybiBjdG9yRnVuYztcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNyZWF0ZUVycm9yQ2xhc3MuanMubWFwIiwiaW1wb3J0IHsgY3JlYXRlRXJyb3JDbGFzcyB9IGZyb20gJy4vY3JlYXRlRXJyb3JDbGFzcyc7XG5leHBvcnQgdmFyIFVuc3Vic2NyaXB0aW9uRXJyb3IgPSBjcmVhdGVFcnJvckNsYXNzKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gVW5zdWJzY3JpcHRpb25FcnJvckltcGwoZXJyb3JzKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gZXJyb3JzXG4gICAgICAgICAgICA/IGVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWQgZHVyaW5nIHVuc3Vic2NyaXB0aW9uOlxcblwiICsgZXJyb3JzLm1hcChmdW5jdGlvbiAoZXJyLCBpKSB7IHJldHVybiBpICsgMSArIFwiKSBcIiArIGVyci50b1N0cmluZygpOyB9KS5qb2luKCdcXG4gICcpXG4gICAgICAgICAgICA6ICcnO1xuICAgICAgICB0aGlzLm5hbWUgPSAnVW5zdWJzY3JpcHRpb25FcnJvcic7XG4gICAgICAgIHRoaXMuZXJyb3JzID0gZXJyb3JzO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVVuc3Vic2NyaXB0aW9uRXJyb3IuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGFyclJlbW92ZShhcnIsIGl0ZW0pIHtcbiAgICBpZiAoYXJyKSB7XG4gICAgICAgIHZhciBpbmRleCA9IGFyci5pbmRleE9mKGl0ZW0pO1xuICAgICAgICAwIDw9IGluZGV4ICYmIGFyci5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWFyclJlbW92ZS5qcy5tYXAiLCJpbXBvcnQgeyBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgVW5zdWJzY3JpcHRpb25FcnJvciB9IGZyb20gJy4vdXRpbC9VbnN1YnNjcmlwdGlvbkVycm9yJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4vdXRpbC9hcnJSZW1vdmUnO1xudmFyIFN1YnNjcmlwdGlvbiA9IChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gU3Vic2NyaXB0aW9uKGluaXRpYWxUZWFyZG93bikge1xuICAgICAgICB0aGlzLmluaXRpYWxUZWFyZG93biA9IGluaXRpYWxUZWFyZG93bjtcbiAgICAgICAgdGhpcy5jbG9zZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gbnVsbDtcbiAgICAgICAgdGhpcy5fdGVhcmRvd25zID0gbnVsbDtcbiAgICB9XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIHZhciBlcnJvcnM7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICAgICAgaWYgKF9wYXJlbnRhZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KF9wYXJlbnRhZ2UpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfcGFyZW50YWdlXzEgPSBfX3ZhbHVlcyhfcGFyZW50YWdlKSwgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpOyAhX3BhcmVudGFnZV8xXzEuZG9uZTsgX3BhcmVudGFnZV8xXzEgPSBfcGFyZW50YWdlXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBhcmVudF8xID0gX3BhcmVudGFnZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFyZW50XzEucmVtb3ZlKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3BhcmVudGFnZV8xXzEgJiYgIV9wYXJlbnRhZ2VfMV8xLmRvbmUgJiYgKF9hID0gX3BhcmVudGFnZV8xLnJldHVybikpIF9hLmNhbGwoX3BhcmVudGFnZV8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgX3BhcmVudGFnZS5yZW1vdmUodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGluaXRpYWxUZWFyZG93biA9IHRoaXMuaW5pdGlhbFRlYXJkb3duO1xuICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24oaW5pdGlhbFRlYXJkb3duKSkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxUZWFyZG93bigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvciA/IGUuZXJyb3JzIDogW2VdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhciBfdGVhcmRvd25zID0gdGhpcy5fdGVhcmRvd25zO1xuICAgICAgICAgICAgaWYgKF90ZWFyZG93bnMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl90ZWFyZG93bnMgPSBudWxsO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIF90ZWFyZG93bnNfMSA9IF9fdmFsdWVzKF90ZWFyZG93bnMpLCBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCk7ICFfdGVhcmRvd25zXzFfMS5kb25lOyBfdGVhcmRvd25zXzFfMSA9IF90ZWFyZG93bnNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZWFyZG93bl8xID0gX3RlYXJkb3duc18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV4ZWNUZWFyZG93bih0ZWFyZG93bl8xKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBlcnJvcnMgIT09IG51bGwgJiYgZXJyb3JzICE9PSB2b2lkIDAgPyBlcnJvcnMgOiBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgVW5zdWJzY3JpcHRpb25FcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvcnMgPSBfX3NwcmVhZEFycmF5KF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChlcnJvcnMpKSwgX19yZWFkKGVyci5lcnJvcnMpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX3RlYXJkb3duc18xXzEgJiYgIV90ZWFyZG93bnNfMV8xLmRvbmUgJiYgKF9iID0gX3RlYXJkb3duc18xLnJldHVybikpIF9iLmNhbGwoX3RlYXJkb3duc18xKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGVycm9ycykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBVbnN1YnNjcmlwdGlvbkVycm9yKGVycm9ycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5wcm90b3R5cGUuYWRkID0gZnVuY3Rpb24gKHRlYXJkb3duKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRlYXJkb3duICYmIHRlYXJkb3duICE9PSB0aGlzKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBleGVjVGVhcmRvd24odGVhcmRvd24pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgaWYgKHRlYXJkb3duIGluc3RhbmNlb2YgU3Vic2NyaXB0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZWFyZG93bi5jbG9zZWQgfHwgdGVhcmRvd24uX2hhc1BhcmVudCh0aGlzKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRlYXJkb3duLl9hZGRQYXJlbnQodGhpcyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICh0aGlzLl90ZWFyZG93bnMgPSAoX2EgPSB0aGlzLl90ZWFyZG93bnMpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFtdKS5wdXNoKHRlYXJkb3duKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5faGFzUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgcmV0dXJuIF9wYXJlbnRhZ2UgPT09IHBhcmVudCB8fCAoQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSAmJiBfcGFyZW50YWdlLmluY2x1ZGVzKHBhcmVudCkpO1xuICAgIH07XG4gICAgU3Vic2NyaXB0aW9uLnByb3RvdHlwZS5fYWRkUGFyZW50ID0gZnVuY3Rpb24gKHBhcmVudCkge1xuICAgICAgICB2YXIgX3BhcmVudGFnZSA9IHRoaXMuX3BhcmVudGFnZTtcbiAgICAgICAgdGhpcy5fcGFyZW50YWdlID0gQXJyYXkuaXNBcnJheShfcGFyZW50YWdlKSA/IChfcGFyZW50YWdlLnB1c2gocGFyZW50KSwgX3BhcmVudGFnZSkgOiBfcGFyZW50YWdlID8gW19wYXJlbnRhZ2UsIHBhcmVudF0gOiBwYXJlbnQ7XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLl9yZW1vdmVQYXJlbnQgPSBmdW5jdGlvbiAocGFyZW50KSB7XG4gICAgICAgIHZhciBfcGFyZW50YWdlID0gdGhpcy5fcGFyZW50YWdlO1xuICAgICAgICBpZiAoX3BhcmVudGFnZSA9PT0gcGFyZW50KSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJlbnRhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoX3BhcmVudGFnZSkpIHtcbiAgICAgICAgICAgIGFyclJlbW92ZShfcGFyZW50YWdlLCBwYXJlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBTdWJzY3JpcHRpb24ucHJvdG90eXBlLnJlbW92ZSA9IGZ1bmN0aW9uICh0ZWFyZG93bikge1xuICAgICAgICB2YXIgX3RlYXJkb3ducyA9IHRoaXMuX3RlYXJkb3ducztcbiAgICAgICAgX3RlYXJkb3ducyAmJiBhcnJSZW1vdmUoX3RlYXJkb3ducywgdGVhcmRvd24pO1xuICAgICAgICBpZiAodGVhcmRvd24gaW5zdGFuY2VvZiBTdWJzY3JpcHRpb24pIHtcbiAgICAgICAgICAgIHRlYXJkb3duLl9yZW1vdmVQYXJlbnQodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmlwdGlvbi5FTVBUWSA9IChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlbXB0eSA9IG5ldyBTdWJzY3JpcHRpb24oKTtcbiAgICAgICAgZW1wdHkuY2xvc2VkID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIGVtcHR5O1xuICAgIH0pKCk7XG4gICAgcmV0dXJuIFN1YnNjcmlwdGlvbjtcbn0oKSk7XG5leHBvcnQgeyBTdWJzY3JpcHRpb24gfTtcbmV4cG9ydCB2YXIgRU1QVFlfU1VCU0NSSVBUSU9OID0gU3Vic2NyaXB0aW9uLkVNUFRZO1xuZXhwb3J0IGZ1bmN0aW9uIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuICh2YWx1ZSBpbnN0YW5jZW9mIFN1YnNjcmlwdGlvbiB8fFxuICAgICAgICAodmFsdWUgJiYgJ2Nsb3NlZCcgaW4gdmFsdWUgJiYgaXNGdW5jdGlvbih2YWx1ZS5yZW1vdmUpICYmIGlzRnVuY3Rpb24odmFsdWUuYWRkKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnVuc3Vic2NyaWJlKSkpO1xufVxuZnVuY3Rpb24gZXhlY1RlYXJkb3duKHRlYXJkb3duKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odGVhcmRvd24pKSB7XG4gICAgICAgIHRlYXJkb3duKCk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICB0ZWFyZG93bi51bnN1YnNjcmliZSgpO1xuICAgIH1cbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YnNjcmlwdGlvbi5qcy5tYXAiLCJleHBvcnQgdmFyIGNvbmZpZyA9IHtcbiAgICBvblVuaGFuZGxlZEVycm9yOiBudWxsLFxuICAgIG9uU3RvcHBlZE5vdGlmaWNhdGlvbjogbnVsbCxcbiAgICBQcm9taXNlOiB1bmRlZmluZWQsXG4gICAgdXNlRGVwcmVjYXRlZFN5bmNocm9ub3VzRXJyb3JIYW5kbGluZzogZmFsc2UsXG4gICAgdXNlRGVwcmVjYXRlZE5leHRDb250ZXh0OiBmYWxzZSxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25maWcuanMubWFwIiwiaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5leHBvcnQgdmFyIHRpbWVvdXRQcm92aWRlciA9IHtcbiAgICBzZXRUaW1lb3V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gdGltZW91dFByb3ZpZGVyLmRlbGVnYXRlO1xuICAgICAgICByZXR1cm4gKChkZWxlZ2F0ZSA9PT0gbnVsbCB8fCBkZWxlZ2F0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVsZWdhdGUuc2V0VGltZW91dCkgfHwgc2V0VGltZW91dCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFyVGltZW91dDogZnVuY3Rpb24gKGhhbmRsZSkge1xuICAgICAgICB2YXIgZGVsZWdhdGUgPSB0aW1lb3V0UHJvdmlkZXIuZGVsZWdhdGU7XG4gICAgICAgIHJldHVybiAoKGRlbGVnYXRlID09PSBudWxsIHx8IGRlbGVnYXRlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWxlZ2F0ZS5jbGVhclRpbWVvdXQpIHx8IGNsZWFyVGltZW91dCkoaGFuZGxlKTtcbiAgICB9LFxuICAgIGRlbGVnYXRlOiB1bmRlZmluZWQsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dGltZW91dFByb3ZpZGVyLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG5pbXBvcnQgeyB0aW1lb3V0UHJvdmlkZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpIHtcbiAgICB0aW1lb3V0UHJvdmlkZXIuc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvblVuaGFuZGxlZEVycm9yID0gY29uZmlnLm9uVW5oYW5kbGVkRXJyb3I7XG4gICAgICAgIGlmIChvblVuaGFuZGxlZEVycm9yKSB7XG4gICAgICAgICAgICBvblVuaGFuZGxlZEVycm9yKGVycik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXJlcG9ydFVuaGFuZGxlZEVycm9yLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBub29wKCkgeyB9XG4vLyMgc291cmNlTWFwcGluZ1VSTD1ub29wLmpzLm1hcCIsImV4cG9ydCB2YXIgQ09NUExFVEVfTk9USUZJQ0FUSU9OID0gKGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignQycsIHVuZGVmaW5lZCwgdW5kZWZpbmVkKTsgfSkoKTtcbmV4cG9ydCBmdW5jdGlvbiBlcnJvck5vdGlmaWNhdGlvbihlcnJvcikge1xuICAgIHJldHVybiBjcmVhdGVOb3RpZmljYXRpb24oJ0UnLCB1bmRlZmluZWQsIGVycm9yKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGNyZWF0ZU5vdGlmaWNhdGlvbignTicsIHZhbHVlLCB1bmRlZmluZWQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZU5vdGlmaWNhdGlvbihraW5kLCB2YWx1ZSwgZXJyb3IpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBraW5kOiBraW5kLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yOiBlcnJvcixcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm90aWZpY2F0aW9uRmFjdG9yaWVzLmpzLm1hcCIsImltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4uL2NvbmZpZyc7XG52YXIgY29udGV4dCA9IG51bGw7XG5leHBvcnQgZnVuY3Rpb24gZXJyb3JDb250ZXh0KGNiKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgIHZhciBpc1Jvb3QgPSAhY29udGV4dDtcbiAgICAgICAgaWYgKGlzUm9vdCkge1xuICAgICAgICAgICAgY29udGV4dCA9IHsgZXJyb3JUaHJvd246IGZhbHNlLCBlcnJvcjogbnVsbCB9O1xuICAgICAgICB9XG4gICAgICAgIGNiKCk7XG4gICAgICAgIGlmIChpc1Jvb3QpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IGNvbnRleHQsIGVycm9yVGhyb3duID0gX2EuZXJyb3JUaHJvd24sIGVycm9yID0gX2EuZXJyb3I7XG4gICAgICAgICAgICBjb250ZXh0ID0gbnVsbDtcbiAgICAgICAgICAgIGlmIChlcnJvclRocm93bikge1xuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBjYigpO1xuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBjYXB0dXJlRXJyb3IoZXJyKSB7XG4gICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nICYmIGNvbnRleHQpIHtcbiAgICAgICAgY29udGV4dC5lcnJvclRocm93biA9IHRydWU7XG4gICAgICAgIGNvbnRleHQuZXJyb3IgPSBlcnI7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXJyb3JDb250ZXh0LmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcywgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi91dGlsL2lzRnVuY3Rpb24nO1xuaW1wb3J0IHsgaXNTdWJzY3JpcHRpb24sIFN1YnNjcmlwdGlvbiB9IGZyb20gJy4vU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi91dGlsL3JlcG9ydFVuaGFuZGxlZEVycm9yJztcbmltcG9ydCB7IG5vb3AgfSBmcm9tICcuL3V0aWwvbm9vcCc7XG5pbXBvcnQgeyBuZXh0Tm90aWZpY2F0aW9uLCBlcnJvck5vdGlmaWNhdGlvbiwgQ09NUExFVEVfTk9USUZJQ0FUSU9OIH0gZnJvbSAnLi9Ob3RpZmljYXRpb25GYWN0b3JpZXMnO1xuaW1wb3J0IHsgdGltZW91dFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvdGltZW91dFByb3ZpZGVyJztcbmltcG9ydCB7IGNhcHR1cmVFcnJvciB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJzY3JpYmVyLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YnNjcmliZXIoZGVzdGluYXRpb24pIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIGlmIChkZXN0aW5hdGlvbikge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBkZXN0aW5hdGlvbjtcbiAgICAgICAgICAgIGlmIChpc1N1YnNjcmlwdGlvbihkZXN0aW5hdGlvbikpIHtcbiAgICAgICAgICAgICAgICBkZXN0aW5hdGlvbi5hZGQoX3RoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgX3RoaXMuZGVzdGluYXRpb24gPSBFTVBUWV9PQlNFUlZFUjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIFN1YnNjcmliZXIuY3JlYXRlID0gZnVuY3Rpb24gKG5leHQsIGVycm9yLCBjb21wbGV0ZSkge1xuICAgICAgICByZXR1cm4gbmV3IFNhZmVTdWJzY3JpYmVyKG5leHQsIGVycm9yLCBjb21wbGV0ZSk7XG4gICAgfTtcbiAgICBTdWJzY3JpYmVyLnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihuZXh0Tm90aWZpY2F0aW9uKHZhbHVlKSwgdGhpcyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9uZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGlmICh0aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihlcnJvck5vdGlmaWNhdGlvbihlcnIpLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2Vycm9yKGVycik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgIGhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24oQ09NUExFVEVfTk9USUZJQ0FUSU9OLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuaXNTdG9wcGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIHRoaXMuX2NvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB0aGlzLmRlc3RpbmF0aW9uID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX25leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5uZXh0KHZhbHVlKTtcbiAgICB9O1xuICAgIFN1YnNjcmliZXIucHJvdG90eXBlLl9lcnJvciA9IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMuZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3Vic2NyaWJlci5wcm90b3R5cGUuX2NvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgdGhpcy5kZXN0aW5hdGlvbi5jb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdGhpcy51bnN1YnNjcmliZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gU3Vic2NyaWJlcjtcbn0oU3Vic2NyaXB0aW9uKSk7XG5leHBvcnQgeyBTdWJzY3JpYmVyIH07XG52YXIgU2FmZVN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTYWZlU3Vic2NyaWJlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBTYWZlU3Vic2NyaWJlcihvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIHZhciBuZXh0O1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnNlcnZlck9yTmV4dCkpIHtcbiAgICAgICAgICAgIG5leHQgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChvYnNlcnZlck9yTmV4dCkge1xuICAgICAgICAgICAgKG5leHQgPSBvYnNlcnZlck9yTmV4dC5uZXh0LCBlcnJvciA9IG9ic2VydmVyT3JOZXh0LmVycm9yLCBjb21wbGV0ZSA9IG9ic2VydmVyT3JOZXh0LmNvbXBsZXRlKTtcbiAgICAgICAgICAgIHZhciBjb250ZXh0XzE7XG4gICAgICAgICAgICBpZiAoX3RoaXMgJiYgY29uZmlnLnVzZURlcHJlY2F0ZWROZXh0Q29udGV4dCkge1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMSA9IE9iamVjdC5jcmVhdGUob2JzZXJ2ZXJPck5leHQpO1xuICAgICAgICAgICAgICAgIGNvbnRleHRfMS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnVuc3Vic2NyaWJlKCk7IH07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb250ZXh0XzEgPSBvYnNlcnZlck9yTmV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5leHQgPSBuZXh0ID09PSBudWxsIHx8IG5leHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG5leHQuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgZXJyb3IgPSBlcnJvciA9PT0gbnVsbCB8fCBlcnJvciA9PT0gdm9pZCAwID8gdm9pZCAwIDogZXJyb3IuYmluZChjb250ZXh0XzEpO1xuICAgICAgICAgICAgY29tcGxldGUgPSBjb21wbGV0ZSA9PT0gbnVsbCB8fCBjb21wbGV0ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY29tcGxldGUuYmluZChjb250ZXh0XzEpO1xuICAgICAgICB9XG4gICAgICAgIF90aGlzLmRlc3RpbmF0aW9uID0ge1xuICAgICAgICAgICAgbmV4dDogbmV4dCA/IHdyYXBGb3JFcnJvckhhbmRsaW5nKG5leHQsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgICAgICBlcnJvcjogd3JhcEZvckVycm9ySGFuZGxpbmcoZXJyb3IgIT09IG51bGwgJiYgZXJyb3IgIT09IHZvaWQgMCA/IGVycm9yIDogZGVmYXVsdEVycm9ySGFuZGxlciwgX3RoaXMpLFxuICAgICAgICAgICAgY29tcGxldGU6IGNvbXBsZXRlID8gd3JhcEZvckVycm9ySGFuZGxpbmcoY29tcGxldGUsIF90aGlzKSA6IG5vb3AsXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgcmV0dXJuIFNhZmVTdWJzY3JpYmVyO1xufShTdWJzY3JpYmVyKSk7XG5leHBvcnQgeyBTYWZlU3Vic2NyaWJlciB9O1xuZnVuY3Rpb24gd3JhcEZvckVycm9ySGFuZGxpbmcoaGFuZGxlciwgaW5zdGFuY2UpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgYXJnc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBoYW5kbGVyLmFwcGx5KHZvaWQgMCwgX19zcHJlYWRBcnJheShbXSwgX19yZWFkKGFyZ3MpKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgaWYgKGNvbmZpZy51c2VEZXByZWNhdGVkU3luY2hyb25vdXNFcnJvckhhbmRsaW5nKSB7XG4gICAgICAgICAgICAgICAgY2FwdHVyZUVycm9yKGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXBvcnRVbmhhbmRsZWRFcnJvcihlcnIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRFcnJvckhhbmRsZXIoZXJyKSB7XG4gICAgdGhyb3cgZXJyO1xufVxuZnVuY3Rpb24gaGFuZGxlU3RvcHBlZE5vdGlmaWNhdGlvbihub3RpZmljYXRpb24sIHN1YnNjcmliZXIpIHtcbiAgICB2YXIgb25TdG9wcGVkTm90aWZpY2F0aW9uID0gY29uZmlnLm9uU3RvcHBlZE5vdGlmaWNhdGlvbjtcbiAgICBvblN0b3BwZWROb3RpZmljYXRpb24gJiYgdGltZW91dFByb3ZpZGVyLnNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyByZXR1cm4gb25TdG9wcGVkTm90aWZpY2F0aW9uKG5vdGlmaWNhdGlvbiwgc3Vic2NyaWJlcik7IH0pO1xufVxuZXhwb3J0IHZhciBFTVBUWV9PQlNFUlZFUiA9IHtcbiAgICBjbG9zZWQ6IHRydWUsXG4gICAgbmV4dDogbm9vcCxcbiAgICBlcnJvcjogZGVmYXVsdEVycm9ySGFuZGxlcixcbiAgICBjb21wbGV0ZTogbm9vcCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdWJzY3JpYmVyLmpzLm1hcCIsImV4cG9ydCB2YXIgb2JzZXJ2YWJsZSA9IChmdW5jdGlvbiAoKSB7IHJldHVybiAodHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wub2JzZXJ2YWJsZSkgfHwgJ0BAb2JzZXJ2YWJsZSc7IH0pKCk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpZGVudGl0eSh4KSB7XG4gICAgcmV0dXJuIHg7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pZGVudGl0eS5qcy5tYXAiLCJpbXBvcnQgeyBpZGVudGl0eSB9IGZyb20gJy4vaWRlbnRpdHknO1xuZXhwb3J0IGZ1bmN0aW9uIHBpcGUoKSB7XG4gICAgdmFyIGZucyA9IFtdO1xuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIGZuc1tfaV0gPSBhcmd1bWVudHNbX2ldO1xuICAgIH1cbiAgICByZXR1cm4gcGlwZUZyb21BcnJheShmbnMpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBpcGVGcm9tQXJyYXkoZm5zKSB7XG4gICAgaWYgKGZucy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGlkZW50aXR5O1xuICAgIH1cbiAgICBpZiAoZm5zLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gZm5zWzBdO1xuICAgIH1cbiAgICByZXR1cm4gZnVuY3Rpb24gcGlwZWQoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGZucy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGZuKSB7IHJldHVybiBmbihwcmV2KTsgfSwgaW5wdXQpO1xuICAgIH07XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1waXBlLmpzLm1hcCIsImltcG9ydCB7IFNhZmVTdWJzY3JpYmVyLCBTdWJzY3JpYmVyIH0gZnJvbSAnLi9TdWJzY3JpYmVyJztcbmltcG9ydCB7IGlzU3Vic2NyaXB0aW9uIH0gZnJvbSAnLi9TdWJzY3JpcHRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2YWJsZSBhcyBTeW1ib2xfb2JzZXJ2YWJsZSB9IGZyb20gJy4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgcGlwZUZyb21BcnJheSB9IGZyb20gJy4vdXRpbC9waXBlJztcbmltcG9ydCB7IGNvbmZpZyB9IGZyb20gJy4vY29uZmlnJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWwvaXNGdW5jdGlvbic7XG5pbXBvcnQgeyBlcnJvckNvbnRleHQgfSBmcm9tICcuL3V0aWwvZXJyb3JDb250ZXh0JztcbnZhciBPYnNlcnZhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBPYnNlcnZhYmxlKHN1YnNjcmliZSkge1xuICAgICAgICBpZiAoc3Vic2NyaWJlKSB7XG4gICAgICAgICAgICB0aGlzLl9zdWJzY3JpYmUgPSBzdWJzY3JpYmU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUubGlmdCA9IGZ1bmN0aW9uIChvcGVyYXRvcikge1xuICAgICAgICB2YXIgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlKCk7XG4gICAgICAgIG9ic2VydmFibGUuc291cmNlID0gdGhpcztcbiAgICAgICAgb2JzZXJ2YWJsZS5vcGVyYXRvciA9IG9wZXJhdG9yO1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZTtcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnN1YnNjcmliZSA9IGZ1bmN0aW9uIChvYnNlcnZlck9yTmV4dCwgZXJyb3IsIGNvbXBsZXRlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBzdWJzY3JpYmVyID0gaXNTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0KSA/IG9ic2VydmVyT3JOZXh0IDogbmV3IFNhZmVTdWJzY3JpYmVyKG9ic2VydmVyT3JOZXh0LCBlcnJvciwgY29tcGxldGUpO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hID0gX3RoaXMsIG9wZXJhdG9yID0gX2Eub3BlcmF0b3IsIHNvdXJjZSA9IF9hLnNvdXJjZTtcbiAgICAgICAgICAgIHN1YnNjcmliZXIuYWRkKG9wZXJhdG9yXG4gICAgICAgICAgICAgICAgP1xuICAgICAgICAgICAgICAgICAgICBvcGVyYXRvci5jYWxsKHN1YnNjcmliZXIsIHNvdXJjZSlcbiAgICAgICAgICAgICAgICA6IHNvdXJjZVxuICAgICAgICAgICAgICAgICAgICA/XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpcy5fc3Vic2NyaWJlKHN1YnNjcmliZXIpXG4gICAgICAgICAgICAgICAgICAgIDpcbiAgICAgICAgICAgICAgICAgICAgICAgIF90aGlzLl90cnlTdWJzY3JpYmUoc3Vic2NyaWJlcikpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmliZXI7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5fdHJ5U3Vic2NyaWJlID0gZnVuY3Rpb24gKHNpbmspIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9zdWJzY3JpYmUoc2luayk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgc2luay5lcnJvcihlcnIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKG5leHQsIHByb21pc2VDdG9yKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHByb21pc2VDdG9yID0gZ2V0UHJvbWlzZUN0b3IocHJvbWlzZUN0b3IpO1xuICAgICAgICByZXR1cm4gbmV3IHByb21pc2VDdG9yKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb247XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24gPSBfdGhpcy5zdWJzY3JpYmUoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgbmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbiA9PT0gbnVsbCB8fCBzdWJzY3JpcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sIHJlamVjdCwgcmVzb2x2ZSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgcmV0dXJuIChfYSA9IHRoaXMuc291cmNlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgT2JzZXJ2YWJsZS5wcm90b3R5cGVbU3ltYm9sX29ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuICAgIE9ic2VydmFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVyYXRpb25zID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBvcGVyYXRpb25zW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHBpcGVGcm9tQXJyYXkob3BlcmF0aW9ucykodGhpcyk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLnByb3RvdHlwZS50b1Byb21pc2UgPSBmdW5jdGlvbiAocHJvbWlzZUN0b3IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcHJvbWlzZUN0b3IgPSBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcik7XG4gICAgICAgIHJldHVybiBuZXcgcHJvbWlzZUN0b3IoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICAgICAgdmFyIHZhbHVlO1xuICAgICAgICAgICAgX3RoaXMuc3Vic2NyaWJlKGZ1bmN0aW9uICh4KSB7IHJldHVybiAodmFsdWUgPSB4KTsgfSwgZnVuY3Rpb24gKGVycikgeyByZXR1cm4gcmVqZWN0KGVycik7IH0sIGZ1bmN0aW9uICgpIHsgcmV0dXJuIHJlc29sdmUodmFsdWUpOyB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBPYnNlcnZhYmxlLmNyZWF0ZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmUpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKHN1YnNjcmliZSk7XG4gICAgfTtcbiAgICByZXR1cm4gT2JzZXJ2YWJsZTtcbn0oKSk7XG5leHBvcnQgeyBPYnNlcnZhYmxlIH07XG5mdW5jdGlvbiBnZXRQcm9taXNlQ3Rvcihwcm9taXNlQ3Rvcikge1xuICAgIHZhciBfYTtcbiAgICByZXR1cm4gKF9hID0gcHJvbWlzZUN0b3IgIT09IG51bGwgJiYgcHJvbWlzZUN0b3IgIT09IHZvaWQgMCA/IHByb21pc2VDdG9yIDogY29uZmlnLlByb21pc2UpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IFByb21pc2U7XG59XG5mdW5jdGlvbiBpc09ic2VydmVyKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIGlzRnVuY3Rpb24odmFsdWUubmV4dCkgJiYgaXNGdW5jdGlvbih2YWx1ZS5lcnJvcikgJiYgaXNGdW5jdGlvbih2YWx1ZS5jb21wbGV0ZSk7XG59XG5mdW5jdGlvbiBpc1N1YnNjcmliZXIodmFsdWUpIHtcbiAgICByZXR1cm4gKHZhbHVlICYmIHZhbHVlIGluc3RhbmNlb2YgU3Vic2NyaWJlcikgfHwgKGlzT2JzZXJ2ZXIodmFsdWUpICYmIGlzU3Vic2NyaXB0aW9uKHZhbHVlKSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PYnNlcnZhYmxlLmpzLm1hcCIsImltcG9ydCB7IGNyZWF0ZUVycm9yQ2xhc3MgfSBmcm9tICcuL2NyZWF0ZUVycm9yQ2xhc3MnO1xuZXhwb3J0IHZhciBPYmplY3RVbnN1YnNjcmliZWRFcnJvciA9IGNyZWF0ZUVycm9yQ2xhc3MoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIHJldHVybiBmdW5jdGlvbiBPYmplY3RVbnN1YnNjcmliZWRFcnJvckltcGwoKSB7XG4gICAgICAgIF9zdXBlcih0aGlzKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ09iamVjdFVuc3Vic2NyaWJlZEVycm9yJztcbiAgICAgICAgdGhpcy5tZXNzYWdlID0gJ29iamVjdCB1bnN1YnNjcmliZWQnO1xuICAgIH07XG59KTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU9iamVjdFVuc3Vic2NyaWJlZEVycm9yLmpzLm1hcCIsImltcG9ydCB7IF9fZXh0ZW5kcywgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICcuL09ic2VydmFibGUnO1xuaW1wb3J0IHsgU3Vic2NyaXB0aW9uLCBFTVBUWV9TVUJTQ1JJUFRJT04gfSBmcm9tICcuL1N1YnNjcmlwdGlvbic7XG5pbXBvcnQgeyBPYmplY3RVbnN1YnNjcmliZWRFcnJvciB9IGZyb20gJy4vdXRpbC9PYmplY3RVbnN1YnNjcmliZWRFcnJvcic7XG5pbXBvcnQgeyBhcnJSZW1vdmUgfSBmcm9tICcuL3V0aWwvYXJyUmVtb3ZlJztcbmltcG9ydCB7IGVycm9yQ29udGV4dCB9IGZyb20gJy4vdXRpbC9lcnJvckNvbnRleHQnO1xudmFyIFN1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIFN1YmplY3QoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNsb3NlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5vYnNlcnZlcnMgPSBbXTtcbiAgICAgICAgX3RoaXMuaXNTdG9wcGVkID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmhhc0Vycm9yID0gZmFsc2U7XG4gICAgICAgIF90aGlzLnRocm93bkVycm9yID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBTdWJqZWN0LnByb3RvdHlwZS5saWZ0ID0gZnVuY3Rpb24gKG9wZXJhdG9yKSB7XG4gICAgICAgIHZhciBzdWJqZWN0ID0gbmV3IEFub255bW91c1N1YmplY3QodGhpcywgdGhpcyk7XG4gICAgICAgIHN1YmplY3Qub3BlcmF0b3IgPSBvcGVyYXRvcjtcbiAgICAgICAgcmV0dXJuIHN1YmplY3Q7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5fdGhyb3dJZkNsb3NlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBlcnJvckNvbnRleHQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICB2YXIgY29weSA9IF90aGlzLm9ic2VydmVycy5zbGljZSgpO1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGNvcHlfMSA9IF9fdmFsdWVzKGNvcHkpLCBjb3B5XzFfMSA9IGNvcHlfMS5uZXh0KCk7ICFjb3B5XzFfMS5kb25lOyBjb3B5XzFfMSA9IGNvcHlfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IGNvcHlfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb3B5XzFfMSAmJiAhY29weV8xXzEuZG9uZSAmJiAoX2EgPSBjb3B5XzEucmV0dXJuKSkgX2EuY2FsbChjb3B5XzEpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGVycm9yQ29udGV4dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5fdGhyb3dJZkNsb3NlZCgpO1xuICAgICAgICAgICAgaWYgKCFfdGhpcy5pc1N0b3BwZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5oYXNFcnJvciA9IF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMudGhyb3duRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5lcnJvcihlcnIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgZXJyb3JDb250ZXh0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmlzU3RvcHBlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmlzU3RvcHBlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdmFyIG9ic2VydmVycyA9IF90aGlzLm9ic2VydmVycztcbiAgICAgICAgICAgICAgICB3aGlsZSAob2JzZXJ2ZXJzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcnMuc2hpZnQoKS5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBTdWJqZWN0LnByb3RvdHlwZS51bnN1YnNjcmliZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc1N0b3BwZWQgPSB0aGlzLmNsb3NlZCA9IHRydWU7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXJzID0gbnVsbDtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShTdWJqZWN0LnByb3RvdHlwZSwgXCJvYnNlcnZlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIF9hO1xuICAgICAgICAgICAgcmV0dXJuICgoX2EgPSB0aGlzLm9ic2VydmVycykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmxlbmd0aCkgPiAwO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3RyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5wcm90b3R5cGUuX3RyeVN1YnNjcmliZS5jYWxsKHRoaXMsIHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHRoaXMuX3Rocm93SWZDbG9zZWQoKTtcbiAgICAgICAgdGhpcy5fY2hlY2tGaW5hbGl6ZWRTdGF0dXNlcyhzdWJzY3JpYmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2lubmVyU3Vic2NyaWJlID0gZnVuY3Rpb24gKHN1YnNjcmliZXIpIHtcbiAgICAgICAgdmFyIF9hID0gdGhpcywgaGFzRXJyb3IgPSBfYS5oYXNFcnJvciwgaXNTdG9wcGVkID0gX2EuaXNTdG9wcGVkLCBvYnNlcnZlcnMgPSBfYS5vYnNlcnZlcnM7XG4gICAgICAgIHJldHVybiBoYXNFcnJvciB8fCBpc1N0b3BwZWRcbiAgICAgICAgICAgID8gRU1QVFlfU1VCU0NSSVBUSU9OXG4gICAgICAgICAgICA6IChvYnNlcnZlcnMucHVzaChzdWJzY3JpYmVyKSwgbmV3IFN1YnNjcmlwdGlvbihmdW5jdGlvbiAoKSB7IHJldHVybiBhcnJSZW1vdmUob2JzZXJ2ZXJzLCBzdWJzY3JpYmVyKTsgfSkpO1xuICAgIH07XG4gICAgU3ViamVjdC5wcm90b3R5cGUuX2NoZWNrRmluYWxpemVkU3RhdHVzZXMgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBoYXNFcnJvciA9IF9hLmhhc0Vycm9yLCB0aHJvd25FcnJvciA9IF9hLnRocm93bkVycm9yLCBpc1N0b3BwZWQgPSBfYS5pc1N0b3BwZWQ7XG4gICAgICAgIGlmIChoYXNFcnJvcikge1xuICAgICAgICAgICAgc3Vic2NyaWJlci5lcnJvcih0aHJvd25FcnJvcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIFN1YmplY3QucHJvdG90eXBlLmFzT2JzZXJ2YWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZSgpO1xuICAgICAgICBvYnNlcnZhYmxlLnNvdXJjZSA9IHRoaXM7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlO1xuICAgIH07XG4gICAgU3ViamVjdC5jcmVhdGUgPSBmdW5jdGlvbiAoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICByZXR1cm4gbmV3IEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSk7XG4gICAgfTtcbiAgICByZXR1cm4gU3ViamVjdDtcbn0oT2JzZXJ2YWJsZSkpO1xuZXhwb3J0IHsgU3ViamVjdCB9O1xudmFyIEFub255bW91c1N1YmplY3QgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhBbm9ueW1vdXNTdWJqZWN0LCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFub255bW91c1N1YmplY3QoZGVzdGluYXRpb24sIHNvdXJjZSkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5kZXN0aW5hdGlvbiA9IGRlc3RpbmF0aW9uO1xuICAgICAgICBfdGhpcy5zb3VyY2UgPSBzb3VyY2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUubmV4dCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EubmV4dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EsIHZhbHVlKTtcbiAgICB9O1xuICAgIEFub255bW91c1N1YmplY3QucHJvdG90eXBlLmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAoX2IgPSAoX2EgPSB0aGlzLmRlc3RpbmF0aW9uKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZXJyb3IpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKF9hLCBlcnIpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIChfYiA9IChfYSA9IHRoaXMuZGVzdGluYXRpb24pID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jb21wbGV0ZSkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmNhbGwoX2EpO1xuICAgIH07XG4gICAgQW5vbnltb3VzU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBfYSwgX2I7XG4gICAgICAgIHJldHVybiAoX2IgPSAoX2EgPSB0aGlzLnNvdXJjZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnN1YnNjcmliZShzdWJzY3JpYmVyKSkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogRU1QVFlfU1VCU0NSSVBUSU9OO1xuICAgIH07XG4gICAgcmV0dXJuIEFub255bW91c1N1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEFub255bW91c1N1YmplY3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVN1YmplY3QuanMubWFwIiwiZXhwb3J0IHZhciBkYXRlVGltZXN0YW1wUHJvdmlkZXIgPSB7XG4gICAgbm93OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAoZGF0ZVRpbWVzdGFtcFByb3ZpZGVyLmRlbGVnYXRlIHx8IERhdGUpLm5vdygpO1xuICAgIH0sXG4gICAgZGVsZWdhdGU6IHVuZGVmaW5lZCxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRlVGltZXN0YW1wUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJqZWN0IH0gZnJvbSAnLi9TdWJqZWN0JztcbmltcG9ydCB7IGRhdGVUaW1lc3RhbXBQcm92aWRlciB9IGZyb20gJy4vc2NoZWR1bGVyL2RhdGVUaW1lc3RhbXBQcm92aWRlcic7XG52YXIgUmVwbGF5U3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKFJlcGxheVN1YmplY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gUmVwbGF5U3ViamVjdChfYnVmZmVyU2l6ZSwgX3dpbmRvd1RpbWUsIF90aW1lc3RhbXBQcm92aWRlcikge1xuICAgICAgICBpZiAoX2J1ZmZlclNpemUgPT09IHZvaWQgMCkgeyBfYnVmZmVyU2l6ZSA9IEluZmluaXR5OyB9XG4gICAgICAgIGlmIChfd2luZG93VGltZSA9PT0gdm9pZCAwKSB7IF93aW5kb3dUaW1lID0gSW5maW5pdHk7IH1cbiAgICAgICAgaWYgKF90aW1lc3RhbXBQcm92aWRlciA9PT0gdm9pZCAwKSB7IF90aW1lc3RhbXBQcm92aWRlciA9IGRhdGVUaW1lc3RhbXBQcm92aWRlcjsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5fYnVmZmVyU2l6ZSA9IF9idWZmZXJTaXplO1xuICAgICAgICBfdGhpcy5fd2luZG93VGltZSA9IF93aW5kb3dUaW1lO1xuICAgICAgICBfdGhpcy5fdGltZXN0YW1wUHJvdmlkZXIgPSBfdGltZXN0YW1wUHJvdmlkZXI7XG4gICAgICAgIF90aGlzLl9idWZmZXIgPSBbXTtcbiAgICAgICAgX3RoaXMuX2luZmluaXRlVGltZVdpbmRvdyA9IHRydWU7XG4gICAgICAgIF90aGlzLl9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfd2luZG93VGltZSA9PT0gSW5maW5pdHk7XG4gICAgICAgIF90aGlzLl9idWZmZXJTaXplID0gTWF0aC5tYXgoMSwgX2J1ZmZlclNpemUpO1xuICAgICAgICBfdGhpcy5fd2luZG93VGltZSA9IE1hdGgubWF4KDEsIF93aW5kb3dUaW1lKTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBSZXBsYXlTdWJqZWN0LnByb3RvdHlwZS5uZXh0ID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGlzU3RvcHBlZCA9IF9hLmlzU3RvcHBlZCwgX2J1ZmZlciA9IF9hLl9idWZmZXIsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93LCBfdGltZXN0YW1wUHJvdmlkZXIgPSBfYS5fdGltZXN0YW1wUHJvdmlkZXIsIF93aW5kb3dUaW1lID0gX2EuX3dpbmRvd1RpbWU7XG4gICAgICAgIGlmICghaXNTdG9wcGVkKSB7XG4gICAgICAgICAgICBfYnVmZmVyLnB1c2godmFsdWUpO1xuICAgICAgICAgICAgIV9pbmZpbml0ZVRpbWVXaW5kb3cgJiYgX2J1ZmZlci5wdXNoKF90aW1lc3RhbXBQcm92aWRlci5ub3coKSArIF93aW5kb3dUaW1lKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90cmltQnVmZmVyKCk7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUubmV4dC5jYWxsKHRoaXMsIHZhbHVlKTtcbiAgICB9O1xuICAgIFJlcGxheVN1YmplY3QucHJvdG90eXBlLl9zdWJzY3JpYmUgPSBmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHRoaXMuX3RyaW1CdWZmZXIoKTtcbiAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IHRoaXMuX2lubmVyU3Vic2NyaWJlKHN1YnNjcmliZXIpO1xuICAgICAgICB2YXIgX2EgPSB0aGlzLCBfaW5maW5pdGVUaW1lV2luZG93ID0gX2EuX2luZmluaXRlVGltZVdpbmRvdywgX2J1ZmZlciA9IF9hLl9idWZmZXI7XG4gICAgICAgIHZhciBjb3B5ID0gX2J1ZmZlci5zbGljZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNvcHkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSArPSBfaW5maW5pdGVUaW1lV2luZG93ID8gMSA6IDIpIHtcbiAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dChjb3B5W2ldKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzKHN1YnNjcmliZXIpO1xuICAgICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH07XG4gICAgUmVwbGF5U3ViamVjdC5wcm90b3R5cGUuX3RyaW1CdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIF9idWZmZXJTaXplID0gX2EuX2J1ZmZlclNpemUsIF90aW1lc3RhbXBQcm92aWRlciA9IF9hLl90aW1lc3RhbXBQcm92aWRlciwgX2J1ZmZlciA9IF9hLl9idWZmZXIsIF9pbmZpbml0ZVRpbWVXaW5kb3cgPSBfYS5faW5maW5pdGVUaW1lV2luZG93O1xuICAgICAgICB2YXIgYWRqdXN0ZWRCdWZmZXJTaXplID0gKF9pbmZpbml0ZVRpbWVXaW5kb3cgPyAxIDogMikgKiBfYnVmZmVyU2l6ZTtcbiAgICAgICAgX2J1ZmZlclNpemUgPCBJbmZpbml0eSAmJiBhZGp1c3RlZEJ1ZmZlclNpemUgPCBfYnVmZmVyLmxlbmd0aCAmJiBfYnVmZmVyLnNwbGljZSgwLCBfYnVmZmVyLmxlbmd0aCAtIGFkanVzdGVkQnVmZmVyU2l6ZSk7XG4gICAgICAgIGlmICghX2luZmluaXRlVGltZVdpbmRvdykge1xuICAgICAgICAgICAgdmFyIG5vdyA9IF90aW1lc3RhbXBQcm92aWRlci5ub3coKTtcbiAgICAgICAgICAgIHZhciBsYXN0ID0gMDtcbiAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDwgX2J1ZmZlci5sZW5ndGggJiYgX2J1ZmZlcltpXSA8PSBub3c7IGkgKz0gMikge1xuICAgICAgICAgICAgICAgIGxhc3QgPSBpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdCAmJiBfYnVmZmVyLnNwbGljZSgwLCBsYXN0ICsgMSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBSZXBsYXlTdWJqZWN0O1xufShTdWJqZWN0KSk7XG5leHBvcnQgeyBSZXBsYXlTdWJqZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1SZXBsYXlTdWJqZWN0LmpzLm1hcCIsIi8vIFRob3NlIG1ldGhvZHMgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGJpbmFyeSBpbWFnZXMsIGJ1dCB3ZSB3b24ndCBsb3NlIHRpbWUgdG8gY2hlY2suXG5jb25zdCBiaXRNZXRob2RzID0ge1xuICAvKipcbiAgICogR2V0IHRoZSBiaXQgb2YgYSBwaXhlbCB1c2luZyBhIHBpeGVsIGluZGV4LlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSBjYWxsZWQgb24gYmluYXJ5IGltYWdlcy5cbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWwgLSBUaGUgcGl4ZWwgaW5kZXggd2hpY2ggY29ycmVzcG9uZHMgdG8gYHggKiBpbWFnZS53aWR0aCArIHlgXG4gICAqIEByZXR1cm4ge251bWJlcn0gMDogYml0IGlzIHVuc2V0LCAxOiBiaXQgaXMgc2V0XG4gICAqL1xuICBnZXRCaXQocGl4ZWwpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhW2dldFNsb3QocGl4ZWwpXSAmICgxIDw8IGdldFNoaWZ0KHBpeGVsKSkgPyAxIDogMDtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IHRoZSBiaXQgb2YgYSBwaXhlbCB1c2luZyBhIHBpeGVsIGluZGV4LlxuICAgKiBUaGlzIG1ldGhvZCBjYW4gb25seSBiZSBjYWxsZWQgb24gYmluYXJ5IGltYWdlcy5cbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0gcGl4ZWwgLSBUaGUgcGl4ZWwgaW5kZXggd2hpY2ggY29ycmVzcG9uZHMgdG8gYHggKiBpbWFnZS53aWR0aCArIHlgXG4gICAqL1xuICBzZXRCaXQocGl4ZWwpIHtcbiAgICB0aGlzLmRhdGFbZ2V0U2xvdChwaXhlbCldIHw9IDEgPDwgZ2V0U2hpZnQocGl4ZWwpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgYml0IG9mIGEgcGl4ZWwgdXNpbmcgYSBwaXhlbCBpbmRleC5cbiAgICogVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGJpbmFyeSBpbWFnZXMuXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHBpeGVsIC0gVGhlIHBpeGVsIGluZGV4IHdoaWNoIGNvcnJlc3BvbmRzIHRvIGB4ICogaW1hZ2Uud2lkdGggKyB5YFxuICAgKi9cbiAgY2xlYXJCaXQocGl4ZWwpIHtcbiAgICB0aGlzLmRhdGFbZ2V0U2xvdChwaXhlbCldICY9IH4oMSA8PCBnZXRTaGlmdChwaXhlbCkpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUb2dnbGUgKGludmVydCkgdGhlIGJpdCBvZiBhIHBpeGVsIHVzaW5nIGEgcGl4ZWwgaW5kZXguXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBiaW5hcnkgaW1hZ2VzLlxuICAgKiBAbWVtYmVyb2YgSW1hZ2VcbiAgICogQGluc3RhbmNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBwaXhlbCAtIFRoZSBwaXhlbCBpbmRleCB3aGljaCBjb3JyZXNwb25kcyB0byBgeCAqIGltYWdlLndpZHRoICsgeWBcbiAgICovXG4gIHRvZ2dsZUJpdChwaXhlbCkge1xuICAgIHRoaXMuZGF0YVtnZXRTbG90KHBpeGVsKV0gXj0gMSA8PCBnZXRTaGlmdChwaXhlbCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYml0IG9mIGEgcGl4ZWwgdXNpbmcgY29vcmRpbmF0ZXMuXG4gICAqIFRoaXMgbWV0aG9kIGNhbiBvbmx5IGJlIGNhbGxlZCBvbiBiaW5hcnkgaW1hZ2VzLlxuICAgKiBAbWVtYmVyb2YgSW1hZ2VcbiAgICogQGluc3RhbmNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0geCBjb29yZGluYXRlICgwID0gbGVmdClcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB5IGNvb3JkaW5hdGUgKDAgPSB0b3ApXG4gICAqIEByZXR1cm4ge251bWJlcn0gMDogYml0IGlzIHVuc2V0LCAxOiBiaXQgaXMgc2V0XG4gICAqL1xuICBnZXRCaXRYWSh4LCB5KSB7XG4gICAgaWYgKHggPj0gdGhpcy53aWR0aCB8fCB5ID49IHRoaXMuaGVpZ2h0KSByZXR1cm4gMDtcbiAgICByZXR1cm4gdGhpcy5nZXRCaXQoeSAqIHRoaXMud2lkdGggKyB4KTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IHRoZSBiaXQgb2YgYSBwaXhlbCB1c2luZyBjb29yZGluYXRlcy5cbiAgICogVGhpcyBtZXRob2QgY2FuIG9ubHkgYmUgY2FsbGVkIG9uIGJpbmFyeSBpbWFnZXMuXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSB4IGNvb3JkaW5hdGUgKDAgPSBsZWZ0KVxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHkgY29vcmRpbmF0ZSAoMCA9IHRvcClcbiAgICovXG4gIHNldEJpdFhZKHgsIHkpIHtcbiAgICB0aGlzLnNldEJpdCh5ICogdGhpcy53aWR0aCArIHgpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDbGVhciB0aGUgYml0IG9mIGEgcGl4ZWwgdXNpbmcgY29vcmRpbmF0ZXMuXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSB4IGNvb3JkaW5hdGUgKDAgPSBsZWZ0KVxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHkgY29vcmRpbmF0ZSAoMCA9IHRvcClcbiAgICovXG4gIGNsZWFyQml0WFkoeCwgeSkge1xuICAgIHRoaXMuY2xlYXJCaXQoeSAqIHRoaXMud2lkdGggKyB4KTtcbiAgfSxcblxuICAvKipcbiAgICogVG9nZ2xlIChpbnZlcnQpIHRoZSBiaXQgb2YgYSBwaXhlbCB1c2luZyBjb29yZGluYXRlcy5cbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHggY29vcmRpbmF0ZSAoMCA9IGxlZnQpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0geSBjb29yZGluYXRlICgwID0gdG9wKVxuICAgKi9cbiAgdG9nZ2xlQml0WFkoeCwgeSkge1xuICAgIHRoaXMudG9nZ2xlQml0KHkgKiB0aGlzLndpZHRoICsgeCk7XG4gIH0sXG59O1xuXG5mdW5jdGlvbiBnZXRTbG90KHBpeGVsKSB7XG4gIHJldHVybiBwaXhlbCA+PiAzO1xufVxuXG5mdW5jdGlvbiBnZXRTaGlmdChwaXhlbCkge1xuICByZXR1cm4gNyAtIChwaXhlbCAmIDBiMDAwMDAxMTEpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRCaXRNZXRob2RzKEltYWdlKSB7XG4gIGZvciAoY29uc3QgaSBpbiBiaXRNZXRob2RzKSB7XG4gICAgSW1hZ2UucHJvdG90eXBlW2ldID0gYml0TWV0aG9kc1tpXTtcbiAgfVxufVxuIiwiLy8gVE9ETzogaW5jbHVkaW5nIHRoZXNlIGluIGJsb2ItdXRpbC50cyBjYXVzZXMgdHlwZWRvYyB0byBnZW5lcmF0ZSBkb2NzIGZvciB0aGVtLFxuLy8gZXZlbiB3aXRoIC0tZXhjbHVkZVByaXZhdGUgwq9cXF8o44OEKV8vwq9cbi8qKiBAcHJpdmF0ZSAqL1xuZnVuY3Rpb24gbG9hZEltYWdlKHNyYywgY3Jvc3NPcmlnaW4pIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgaW1nID0gbmV3IEltYWdlKCk7XG4gICAgICAgIGlmIChjcm9zc09yaWdpbikge1xuICAgICAgICAgICAgaW1nLmNyb3NzT3JpZ2luID0gY3Jvc3NPcmlnaW47XG4gICAgICAgIH1cbiAgICAgICAgaW1nLm9ubG9hZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJlc29sdmUoaW1nKTtcbiAgICAgICAgfTtcbiAgICAgICAgaW1nLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIGltZy5zcmMgPSBzcmM7XG4gICAgfSk7XG59XG4vKiogQHByaXZhdGUgKi9cbmZ1bmN0aW9uIGltZ1RvQ2FudmFzKGltZykge1xuICAgIHZhciBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7XG4gICAgY2FudmFzLmhlaWdodCA9IGltZy5oZWlnaHQ7XG4gICAgLy8gY29weSB0aGUgaW1hZ2UgY29udGVudHMgdG8gdGhlIGNhbnZhc1xuICAgIHZhciBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY29udGV4dC5kcmF3SW1hZ2UoaW1nLCAwLCAwLCBpbWcud2lkdGgsIGltZy5oZWlnaHQsIDAsIDAsIGltZy53aWR0aCwgaW1nLmhlaWdodCk7XG4gICAgcmV0dXJuIGNhbnZhcztcbn1cblxuLyogZ2xvYmFsIFByb21pc2UsIEltYWdlLCBCbG9iLCBGaWxlUmVhZGVyLCBhdG9iLCBidG9hLFxuICAgQmxvYkJ1aWxkZXIsIE1TQmxvYkJ1aWxkZXIsIE1vekJsb2JCdWlsZGVyLCBXZWJLaXRCbG9iQnVpbGRlciwgd2Via2l0VVJMICovXG4vKipcbiAqIFNoaW0gZm9yXG4gKiBbYG5ldyBCbG9iKClgXShodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvQmxvYi5CbG9iKVxuICogdG8gc3VwcG9ydFxuICogW29sZGVyIGJyb3dzZXJzIHRoYXQgdXNlIHRoZSBkZXByZWNhdGVkIGBCbG9iQnVpbGRlcmAgQVBJXShodHRwOi8vY2FuaXVzZS5jb20vYmxvYikuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15QmxvYiA9IGJsb2JVdGlsLmNyZWF0ZUJsb2IoWydoZWxsbyB3b3JsZCddLCB7dHlwZTogJ3RleHQvcGxhaW4nfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gcGFydHMgLSBjb250ZW50IG9mIHRoZSBCbG9iXG4gKiBAcGFyYW0gcHJvcGVydGllcyAtIHVzdWFsbHkgYHt0eXBlOiBteUNvbnRlbnRUeXBlfWAsXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgIHlvdSBjYW4gYWxzbyBwYXNzIGEgc3RyaW5nIGZvciB0aGUgY29udGVudCB0eXBlXG4gKiBAcmV0dXJucyBCbG9iXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJsb2IocGFydHMsIHByb3BlcnRpZXMpIHtcbiAgICBwYXJ0cyA9IHBhcnRzIHx8IFtdO1xuICAgIHByb3BlcnRpZXMgPSBwcm9wZXJ0aWVzIHx8IHt9O1xuICAgIGlmICh0eXBlb2YgcHJvcGVydGllcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcHJvcGVydGllcyA9IHsgdHlwZTogcHJvcGVydGllcyB9OyAvLyBpbmZlciBjb250ZW50IHR5cGVcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG5ldyBCbG9iKHBhcnRzLCBwcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgaWYgKGUubmFtZSAhPT0gJ1R5cGVFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IGU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIEJ1aWxkZXIgPSB0eXBlb2YgQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IEJsb2JCdWlsZGVyIDogdHlwZW9mIE1TQmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IE1TQmxvYkJ1aWxkZXIgOiB0eXBlb2YgTW96QmxvYkJ1aWxkZXIgIT09ICd1bmRlZmluZWQnXG4gICAgICAgICAgICA/IE1vekJsb2JCdWlsZGVyIDogV2ViS2l0QmxvYkJ1aWxkZXI7XG4gICAgICAgIHZhciBidWlsZGVyID0gbmV3IEJ1aWxkZXIoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7IGkgKz0gMSkge1xuICAgICAgICAgICAgYnVpbGRlci5hcHBlbmQocGFydHNbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBidWlsZGVyLmdldEJsb2IocHJvcGVydGllcy50eXBlKTtcbiAgICB9XG59XG4vKipcbiAqIFNoaW0gZm9yXG4gKiBbYFVSTC5jcmVhdGVPYmplY3RVUkwoKWBdKGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9VUkwuY3JlYXRlT2JqZWN0VVJMKVxuICogdG8gc3VwcG9ydCBicm93c2VycyB0aGF0IG9ubHkgaGF2ZSB0aGUgcHJlZml4ZWRcbiAqIGB3ZWJraXRVUkxgIChlLmcuIEFuZHJvaWQgPDQuNCkuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIG15VXJsID0gYmxvYlV0aWwuY3JlYXRlT2JqZWN0VVJMKGJsb2IpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGJsb2JcbiAqIEByZXR1cm5zIHVybFxuICovXG5mdW5jdGlvbiBjcmVhdGVPYmplY3RVUkwoYmxvYikge1xuICAgIHJldHVybiAodHlwZW9mIFVSTCAhPT0gJ3VuZGVmaW5lZCcgPyBVUkwgOiB3ZWJraXRVUkwpLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcbn1cbi8qKlxuICogU2hpbSBmb3JcbiAqIFtgVVJMLnJldm9rZU9iamVjdFVSTCgpYF0oaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1VSTC5yZXZva2VPYmplY3RVUkwpXG4gKiB0byBzdXBwb3J0IGJyb3dzZXJzIHRoYXQgb25seSBoYXZlIHRoZSBwcmVmaXhlZFxuICogYHdlYmtpdFVSTGAgKGUuZy4gQW5kcm9pZCA8NC40KS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBibG9iVXRpbC5yZXZva2VPYmplY3RVUkwobXlVcmwpO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHVybFxuICovXG5mdW5jdGlvbiByZXZva2VPYmplY3RVUkwodXJsKSB7XG4gICAgcmV0dXJuICh0eXBlb2YgVVJMICE9PSAndW5kZWZpbmVkJyA/IFVSTCA6IHdlYmtpdFVSTCkucmV2b2tlT2JqZWN0VVJMKHVybCk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBgQmxvYmAgdG8gYSBiaW5hcnkgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIGJsb2JVdGlsLmJsb2JUb0JpbmFyeVN0cmluZyhibG9iKS50aGVuKGZ1bmN0aW9uIChiaW5hcnlTdHJpbmcpIHtcbiAqICAgLy8gc3VjY2Vzc1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICAvLyBlcnJvclxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYmxvYlxuICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGJpbmFyeSBzdHJpbmdcbiAqL1xuZnVuY3Rpb24gYmxvYlRvQmluYXJ5U3RyaW5nKGJsb2IpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgICAgICB2YXIgcmVhZGVyID0gbmV3IEZpbGVSZWFkZXIoKTtcbiAgICAgICAgdmFyIGhhc0JpbmFyeVN0cmluZyA9IHR5cGVvZiByZWFkZXIucmVhZEFzQmluYXJ5U3RyaW5nID09PSAnZnVuY3Rpb24nO1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlYWRlci5yZXN1bHQgfHwgJyc7XG4gICAgICAgICAgICBpZiAoaGFzQmluYXJ5U3RyaW5nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJlc29sdmUoYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZyhyZXN1bHQpKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmVhZGVyLm9uZXJyb3IgPSByZWplY3Q7XG4gICAgICAgIGlmIChoYXNCaW5hcnlTdHJpbmcpIHtcbiAgICAgICAgICAgIHJlYWRlci5yZWFkQXNCaW5hcnlTdHJpbmcoYmxvYik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICByZWFkZXIucmVhZEFzQXJyYXlCdWZmZXIoYmxvYik7XG4gICAgICAgIH1cbiAgICB9KTtcbn1cbi8qKlxuICogQ29udmVydCBhIGJhc2U2NC1lbmNvZGVkIHN0cmluZyB0byBhIGBCbG9iYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgYmxvYiA9IGJsb2JVdGlsLmJhc2U2NFN0cmluZ1RvQmxvYihiYXNlNjRTdHJpbmcpO1xuICogYGBgXG4gKiBAcGFyYW0gYmFzZTY0IC0gYmFzZTY0LWVuY29kZWQgc3RyaW5nXG4gKiBAcGFyYW0gdHlwZSAtIHRoZSBjb250ZW50IHR5cGUgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmxvYlxuICovXG5mdW5jdGlvbiBiYXNlNjRTdHJpbmdUb0Jsb2IoYmFzZTY0LCB0eXBlKSB7XG4gICAgdmFyIHBhcnRzID0gW2JpbmFyeVN0cmluZ1RvQXJyYXlCdWZmZXIoYXRvYihiYXNlNjQpKV07XG4gICAgcmV0dXJuIHR5cGUgPyBjcmVhdGVCbG9iKHBhcnRzLCB7IHR5cGU6IHR5cGUgfSkgOiBjcmVhdGVCbG9iKHBhcnRzKTtcbn1cbi8qKlxuICogQ29udmVydCBhIGJpbmFyeSBzdHJpbmcgdG8gYSBgQmxvYmAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIGJsb2IgPSBibG9iVXRpbC5iaW5hcnlTdHJpbmdUb0Jsb2IoYmluYXJ5U3RyaW5nKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBiaW5hcnkgLSBiaW5hcnkgc3RyaW5nXG4gKiBAcGFyYW0gdHlwZSAtIHRoZSBjb250ZW50IHR5cGUgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmxvYlxuICovXG5mdW5jdGlvbiBiaW5hcnlTdHJpbmdUb0Jsb2IoYmluYXJ5LCB0eXBlKSB7XG4gICAgcmV0dXJuIGJhc2U2NFN0cmluZ1RvQmxvYihidG9hKGJpbmFyeSksIHR5cGUpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgYEJsb2JgIHRvIGEgYmluYXJ5IHN0cmluZy5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBibG9iVXRpbC5ibG9iVG9CYXNlNjRTdHJpbmcoYmxvYikudGhlbihmdW5jdGlvbiAoYmFzZTY0U3RyaW5nKSB7XG4gKiAgIC8vIHN1Y2Nlc3NcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gZXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIGJsb2JcbiAqIEByZXR1cm5zIFByb21pc2UgdGhhdCByZXNvbHZlcyB3aXRoIHRoZSBiaW5hcnkgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGJsb2JUb0Jhc2U2NFN0cmluZyhibG9iKSB7XG4gICAgcmV0dXJuIGJsb2JUb0JpbmFyeVN0cmluZyhibG9iKS50aGVuKGJ0b2EpO1xufVxuLyoqXG4gKiBDb252ZXJ0IGEgZGF0YSBVUkwgc3RyaW5nXG4gKiAoZS5nLiBgJ2RhdGE6aW1hZ2UvcG5nO2Jhc2U2NCxpVkJPUncwS0cuLi4nYClcbiAqIHRvIGEgYEJsb2JgLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciBibG9iID0gYmxvYlV0aWwuZGF0YVVSTFRvQmxvYihkYXRhVVJMKTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBkYXRhVVJMIC0gZGF0YVVSTC1lbmNvZGVkIHN0cmluZ1xuICogQHJldHVybnMgQmxvYlxuICovXG5mdW5jdGlvbiBkYXRhVVJMVG9CbG9iKGRhdGFVUkwpIHtcbiAgICB2YXIgdHlwZSA9IGRhdGFVUkwubWF0Y2goL2RhdGE6KFteO10rKS8pWzFdO1xuICAgIHZhciBiYXNlNjQgPSBkYXRhVVJMLnJlcGxhY2UoL15bXixdKywvLCAnJyk7XG4gICAgdmFyIGJ1ZmYgPSBiaW5hcnlTdHJpbmdUb0FycmF5QnVmZmVyKGF0b2IoYmFzZTY0KSk7XG4gICAgcmV0dXJuIGNyZWF0ZUJsb2IoW2J1ZmZdLCB7IHR5cGU6IHR5cGUgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBgQmxvYmAgdG8gYSBkYXRhIFVSTCBzdHJpbmdcbiAqIChlLmcuIGAnZGF0YTppbWFnZS9wbmc7YmFzZTY0LGlWQk9SdzBLRy4uLidgKS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgZGF0YVVSTCA9IGJsb2JVdGlsLmJsb2JUb0RhdGFVUkwoYmxvYik7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYmxvYlxuICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGRhdGEgVVJMIHN0cmluZ1xuICovXG5mdW5jdGlvbiBibG9iVG9EYXRhVVJMKGJsb2IpIHtcbiAgICByZXR1cm4gYmxvYlRvQmFzZTY0U3RyaW5nKGJsb2IpLnRoZW4oZnVuY3Rpb24gKGJhc2U2NFN0cmluZykge1xuICAgICAgICByZXR1cm4gJ2RhdGE6JyArIGJsb2IudHlwZSArICc7YmFzZTY0LCcgKyBiYXNlNjRTdHJpbmc7XG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYW4gaW1hZ2UncyBgc3JjYCBVUkwgdG8gYSBkYXRhIFVSTCBieSBsb2FkaW5nIHRoZSBpbWFnZSBhbmQgcGFpbnRpbmdcbiAqIGl0IHRvIGEgYGNhbnZhc2AuXG4gKlxuICogTm90ZTogdGhpcyB3aWxsIGNvZXJjZSB0aGUgaW1hZ2UgdG8gdGhlIGRlc2lyZWQgY29udGVudCB0eXBlLCBhbmQgaXRcbiAqIHdpbGwgb25seSBwYWludCB0aGUgZmlyc3QgZnJhbWUgb2YgYW4gYW5pbWF0ZWQgR0lGLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqIGBgYGpzXG4gKiBibG9iVXRpbC5pbWdTcmNUb0RhdGFVUkwoJ2h0dHA6Ly9teXNpdGUuY29tL2ltZy5wbmcnKS50aGVuKGZ1bmN0aW9uIChkYXRhVVJMKSB7XG4gKiAgIC8vIHN1Y2Nlc3NcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gZXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogYGBganNcbiAqIGJsb2JVdGlsLmltZ1NyY1RvRGF0YVVSTCgnaHR0cDovL3NvbWUtb3RoZXItc2l0ZS5jb20vaW1nLmpwZycsICdpbWFnZS9qcGVnJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAnQW5vbnltb3VzJywgMS4wKS50aGVuKGZ1bmN0aW9uIChkYXRhVVJMKSB7XG4gKiAgIC8vIHN1Y2Nlc3NcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gZXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNyYyAtIGltYWdlIHNyY1xuICogQHBhcmFtIHR5cGUgLSB0aGUgY29udGVudCB0eXBlIChvcHRpb25hbCwgZGVmYXVsdHMgdG8gJ2ltYWdlL3BuZycpXG4gKiBAcGFyYW0gY3Jvc3NPcmlnaW4gLSBmb3IgQ09SUy1lbmFibGVkIGltYWdlcywgc2V0IHRoaXMgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQW5vbnltb3VzJyB0byBhdm9pZCBcInRhaW50ZWQgY2FudmFzXCIgZXJyb3JzXG4gKiBAcGFyYW0gcXVhbGl0eSAtIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZSByZXF1ZXN0ZWQgdHlwZSBpcyAnaW1hZ2UvanBlZycgb3IgJ2ltYWdlL3dlYnAnXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgZGF0YSBVUkwgc3RyaW5nXG4gKi9cbmZ1bmN0aW9uIGltZ1NyY1RvRGF0YVVSTChzcmMsIHR5cGUsIGNyb3NzT3JpZ2luLCBxdWFsaXR5KSB7XG4gICAgdHlwZSA9IHR5cGUgfHwgJ2ltYWdlL3BuZyc7XG4gICAgcmV0dXJuIGxvYWRJbWFnZShzcmMsIGNyb3NzT3JpZ2luKS50aGVuKGltZ1RvQ2FudmFzKS50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGNhbnZhcy50b0RhdGFVUkwodHlwZSwgcXVhbGl0eSk7XG4gICAgfSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBgY2FudmFzYCB0byBhIGBCbG9iYC5cbiAqXG4gKiBFeGFtcGxlczpcbiAqXG4gKiBgYGBqc1xuICogYmxvYlV0aWwuY2FudmFzVG9CbG9iKGNhbnZhcykudGhlbihmdW5jdGlvbiAoYmxvYikge1xuICogICAvLyBzdWNjZXNzXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgIC8vIGVycm9yXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIE1vc3QgYnJvd3NlcnMgc3VwcG9ydCBjb252ZXJ0aW5nIGEgY2FudmFzIHRvIGJvdGggYCdpbWFnZS9wbmcnYCBhbmQgYCdpbWFnZS9qcGVnJ2AuIFlvdSBtYXlcbiAqIGFsc28gd2FudCB0byB0cnkgYCdpbWFnZS93ZWJwJ2AsIHdoaWNoIHdpbGwgd29yayBpbiBzb21lIGJyb3dzZXJzIGxpa2UgQ2hyb21lIChhbmQgaW4gb3RoZXIgYnJvd3NlcnMsIHdpbGwganVzdCBmYWxsIGJhY2sgdG8gYCdpbWFnZS9wbmcnYCk6XG4gKlxuICogYGBganNcbiAqIGJsb2JVdGlsLmNhbnZhc1RvQmxvYihjYW52YXMsICdpbWFnZS93ZWJwJykudGhlbihmdW5jdGlvbiAoYmxvYikge1xuICogICAvLyBzdWNjZXNzXG4gKiB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gKiAgIC8vIGVycm9yXG4gKiB9KTtcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSBjYW52YXMgLSBIVE1MQ2FudmFzRWxlbWVudFxuICogQHBhcmFtIHR5cGUgLSB0aGUgY29udGVudCB0eXBlIChvcHRpb25hbCwgZGVmYXVsdHMgdG8gJ2ltYWdlL3BuZycpXG4gKiBAcGFyYW0gcXVhbGl0eSAtIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZSByZXF1ZXN0ZWQgdHlwZSBpcyAnaW1hZ2UvanBlZycgb3IgJ2ltYWdlL3dlYnAnXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYEJsb2JgXG4gKi9cbmZ1bmN0aW9uIGNhbnZhc1RvQmxvYihjYW52YXMsIHR5cGUsIHF1YWxpdHkpIHtcbiAgICBpZiAodHlwZW9mIGNhbnZhcy50b0Jsb2IgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgICAgICBjYW52YXMudG9CbG9iKHJlc29sdmUsIHR5cGUsIHF1YWxpdHkpO1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShkYXRhVVJMVG9CbG9iKGNhbnZhcy50b0RhdGFVUkwodHlwZSwgcXVhbGl0eSkpKTtcbn1cbi8qKlxuICogQ29udmVydCBhbiBpbWFnZSdzIGBzcmNgIFVSTCB0byBhIGBCbG9iYCBieSBsb2FkaW5nIHRoZSBpbWFnZSBhbmQgcGFpbnRpbmdcbiAqIGl0IHRvIGEgYGNhbnZhc2AuXG4gKlxuICogTm90ZTogdGhpcyB3aWxsIGNvZXJjZSB0aGUgaW1hZ2UgdG8gdGhlIGRlc2lyZWQgY29udGVudCB0eXBlLCBhbmQgaXRcbiAqIHdpbGwgb25seSBwYWludCB0aGUgZmlyc3QgZnJhbWUgb2YgYW4gYW5pbWF0ZWQgR0lGLlxuICpcbiAqIEV4YW1wbGVzOlxuICpcbiAqIGBgYGpzXG4gKiBibG9iVXRpbC5pbWdTcmNUb0Jsb2IoJ2h0dHA6Ly9teXNpdGUuY29tL2ltZy5wbmcnKS50aGVuKGZ1bmN0aW9uIChibG9iKSB7XG4gKiAgIC8vIHN1Y2Nlc3NcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gZXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogYGBganNcbiAqIGJsb2JVdGlsLmltZ1NyY1RvQmxvYignaHR0cDovL3NvbWUtb3RoZXItc2l0ZS5jb20vaW1nLmpwZycsICdpbWFnZS9qcGVnJyxcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAnQW5vbnltb3VzJywgMS4wKS50aGVuKGZ1bmN0aW9uIChibG9iKSB7XG4gKiAgIC8vIHN1Y2Nlc3NcbiAqIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAqICAgLy8gZXJyb3JcbiAqIH0pO1xuICogYGBgXG4gKlxuICogQHBhcmFtIHNyYyAtIGltYWdlIHNyY1xuICogQHBhcmFtIHR5cGUgLSB0aGUgY29udGVudCB0eXBlIChvcHRpb25hbCwgZGVmYXVsdHMgdG8gJ2ltYWdlL3BuZycpXG4gKiBAcGFyYW0gY3Jvc3NPcmlnaW4gLSBmb3IgQ09SUy1lbmFibGVkIGltYWdlcywgc2V0IHRoaXMgdG9cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnQW5vbnltb3VzJyB0byBhdm9pZCBcInRhaW50ZWQgY2FudmFzXCIgZXJyb3JzXG4gKiBAcGFyYW0gcXVhbGl0eSAtIGEgbnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHlcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIHRoZSByZXF1ZXN0ZWQgdHlwZSBpcyAnaW1hZ2UvanBlZycgb3IgJ2ltYWdlL3dlYnAnXG4gKiBAcmV0dXJucyBQcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2l0aCB0aGUgYEJsb2JgXG4gKi9cbmZ1bmN0aW9uIGltZ1NyY1RvQmxvYihzcmMsIHR5cGUsIGNyb3NzT3JpZ2luLCBxdWFsaXR5KSB7XG4gICAgdHlwZSA9IHR5cGUgfHwgJ2ltYWdlL3BuZyc7XG4gICAgcmV0dXJuIGxvYWRJbWFnZShzcmMsIGNyb3NzT3JpZ2luKS50aGVuKGltZ1RvQ2FudmFzKS50aGVuKGZ1bmN0aW9uIChjYW52YXMpIHtcbiAgICAgICAgcmV0dXJuIGNhbnZhc1RvQmxvYihjYW52YXMsIHR5cGUsIHF1YWxpdHkpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGFuIGBBcnJheUJ1ZmZlcmAgdG8gYSBgQmxvYmAuXG4gKlxuICogRXhhbXBsZTpcbiAqXG4gKiBgYGBqc1xuICogdmFyIGJsb2IgPSBibG9iVXRpbC5hcnJheUJ1ZmZlclRvQmxvYihhcnJheUJ1ZmYsICdhdWRpby9tcGVnJyk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYnVmZmVyXG4gKiBAcGFyYW0gdHlwZSAtIHRoZSBjb250ZW50IHR5cGUgKG9wdGlvbmFsKVxuICogQHJldHVybnMgQmxvYlxuICovXG5mdW5jdGlvbiBhcnJheUJ1ZmZlclRvQmxvYihidWZmZXIsIHR5cGUpIHtcbiAgICByZXR1cm4gY3JlYXRlQmxvYihbYnVmZmVyXSwgdHlwZSk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBgQmxvYmAgdG8gYW4gYEFycmF5QnVmZmVyYC5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiBibG9iVXRpbC5ibG9iVG9BcnJheUJ1ZmZlcihibG9iKS50aGVuKGZ1bmN0aW9uIChhcnJheUJ1ZmYpIHtcbiAqICAgLy8gc3VjY2Vzc1xuICogfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICogICAvLyBlcnJvclxuICogfSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gYmxvYlxuICogQHJldHVybnMgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggdGhlIGBBcnJheUJ1ZmZlcmBcbiAqL1xuZnVuY3Rpb24gYmxvYlRvQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgICAgICByZWFkZXIub25sb2FkZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3VsdCA9IHJlYWRlci5yZXN1bHQgfHwgbmV3IEFycmF5QnVmZmVyKDApO1xuICAgICAgICAgICAgcmVzb2x2ZShyZXN1bHQpO1xuICAgICAgICB9O1xuICAgICAgICByZWFkZXIub25lcnJvciA9IHJlamVjdDtcbiAgICAgICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKGJsb2IpO1xuICAgIH0pO1xufVxuLyoqXG4gKiBDb252ZXJ0IGFuIGBBcnJheUJ1ZmZlcmAgdG8gYSBiaW5hcnkgc3RyaW5nLlxuICpcbiAqIEV4YW1wbGU6XG4gKlxuICogYGBganNcbiAqIHZhciBteVN0cmluZyA9IGJsb2JVdGlsLmFycmF5QnVmZmVyVG9CaW5hcnlTdHJpbmcoYXJyYXlCdWZmKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGJ1ZmZlciAtIGFycmF5IGJ1ZmZlclxuICogQHJldHVybnMgYmluYXJ5IHN0cmluZ1xuICovXG5mdW5jdGlvbiBhcnJheUJ1ZmZlclRvQmluYXJ5U3RyaW5nKGJ1ZmZlcikge1xuICAgIHZhciBiaW5hcnkgPSAnJztcbiAgICB2YXIgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXIpO1xuICAgIHZhciBsZW5ndGggPSBieXRlcy5ieXRlTGVuZ3RoO1xuICAgIHZhciBpID0gLTE7XG4gICAgd2hpbGUgKCsraSA8IGxlbmd0aCkge1xuICAgICAgICBiaW5hcnkgKz0gU3RyaW5nLmZyb21DaGFyQ29kZShieXRlc1tpXSk7XG4gICAgfVxuICAgIHJldHVybiBiaW5hcnk7XG59XG4vKipcbiAqIENvbnZlcnQgYSBiaW5hcnkgc3RyaW5nIHRvIGFuIGBBcnJheUJ1ZmZlcmAuXG4gKlxuICogYGBganNcbiAqIHZhciBteUJ1ZmZlciA9IGJsb2JVdGlsLmJpbmFyeVN0cmluZ1RvQXJyYXlCdWZmZXIoYmluYXJ5U3RyaW5nKVxuICogYGBgXG4gKlxuICogQHBhcmFtIGJpbmFyeSAtIGJpbmFyeSBzdHJpbmdcbiAqIEByZXR1cm5zIGFycmF5IGJ1ZmZlclxuICovXG5mdW5jdGlvbiBiaW5hcnlTdHJpbmdUb0FycmF5QnVmZmVyKGJpbmFyeSkge1xuICAgIHZhciBsZW5ndGggPSBiaW5hcnkubGVuZ3RoO1xuICAgIHZhciBidWYgPSBuZXcgQXJyYXlCdWZmZXIobGVuZ3RoKTtcbiAgICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICB2YXIgaSA9IC0xO1xuICAgIHdoaWxlICgrK2kgPCBsZW5ndGgpIHtcbiAgICAgICAgYXJyW2ldID0gYmluYXJ5LmNoYXJDb2RlQXQoaSk7XG4gICAgfVxuICAgIHJldHVybiBidWY7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJsb2IsIGNyZWF0ZU9iamVjdFVSTCwgcmV2b2tlT2JqZWN0VVJMLCBibG9iVG9CaW5hcnlTdHJpbmcsIGJhc2U2NFN0cmluZ1RvQmxvYiwgYmluYXJ5U3RyaW5nVG9CbG9iLCBibG9iVG9CYXNlNjRTdHJpbmcsIGRhdGFVUkxUb0Jsb2IsIGJsb2JUb0RhdGFVUkwsIGltZ1NyY1RvRGF0YVVSTCwgY2FudmFzVG9CbG9iLCBpbWdTcmNUb0Jsb2IsIGFycmF5QnVmZmVyVG9CbG9iLCBibG9iVG9BcnJheUJ1ZmZlciwgYXJyYXlCdWZmZXJUb0JpbmFyeVN0cmluZywgYmluYXJ5U3RyaW5nVG9BcnJheUJ1ZmZlciB9O1xuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uby11bmFzc2lnbmVkLWltcG9ydFxyXG5pbXBvcnQgJy4vdGV4dC1lbmNvZGluZy1wb2x5ZmlsbCc7XHJcbmNvbnN0IGRlY29kZXIgPSBuZXcgVGV4dERlY29kZXIoJ3V0Zi04Jyk7XHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoYnl0ZXMpIHtcclxuICAgIHJldHVybiBkZWNvZGVyLmRlY29kZShieXRlcyk7XHJcbn1cclxuY29uc3QgZW5jb2RlciA9IG5ldyBUZXh0RW5jb2RlcigpO1xyXG5leHBvcnQgZnVuY3Rpb24gZW5jb2RlKHN0cikge1xyXG4gICAgcmV0dXJuIGVuY29kZXIuZW5jb2RlKHN0cik7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRmOC5icm93c2VyLmpzLm1hcCIsImltcG9ydCB7IGRlY29kZSwgZW5jb2RlIH0gZnJvbSAnLi91dGY4JztcclxuY29uc3QgZGVmYXVsdEJ5dGVMZW5ndGggPSAxMDI0ICogODtcclxuZXhwb3J0IGNsYXNzIElPQnVmZmVyIHtcclxuICAgIC8qKlxyXG4gICAgICogQHBhcmFtIGRhdGEgLSBUaGUgZGF0YSB0byBjb25zdHJ1Y3QgdGhlIElPQnVmZmVyIHdpdGguXHJcbiAgICAgKiBJZiBkYXRhIGlzIGEgbnVtYmVyLCBpdCB3aWxsIGJlIHRoZSBuZXcgYnVmZmVyJ3MgbGVuZ3RoPGJyPlxyXG4gICAgICogSWYgZGF0YSBpcyBgdW5kZWZpbmVkYCwgdGhlIGJ1ZmZlciB3aWxsIGJlIGluaXRpYWxpemVkIHdpdGggYSBkZWZhdWx0IGxlbmd0aCBvZiA4S2I8YnI+XHJcbiAgICAgKiBJZiBkYXRhIGlzIGFuIEFycmF5QnVmZmVyLCBTaGFyZWRBcnJheUJ1ZmZlciwgYW4gQXJyYXlCdWZmZXJWaWV3IChUeXBlZCBBcnJheSksIGFuIElPQnVmZmVyIGluc3RhbmNlLFxyXG4gICAgICogb3IgYSBOb2RlLmpzIEJ1ZmZlciwgYSB2aWV3IHdpbGwgYmUgY3JlYXRlZCBvdmVyIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyLlxyXG4gICAgICogQHBhcmFtIG9wdGlvbnNcclxuICAgICAqL1xyXG4gICAgY29uc3RydWN0b3IoZGF0YSA9IGRlZmF1bHRCeXRlTGVuZ3RoLCBvcHRpb25zID0ge30pIHtcclxuICAgICAgICBsZXQgZGF0YUlzR2l2ZW4gPSBmYWxzZTtcclxuICAgICAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIGRhdGEgPSBuZXcgQXJyYXlCdWZmZXIoZGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBkYXRhSXNHaXZlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHRoaXMubGFzdFdyaXR0ZW5CeXRlID0gZGF0YS5ieXRlTGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBvZmZzZXQgPSBvcHRpb25zLm9mZnNldCA/IG9wdGlvbnMub2Zmc2V0ID4+PiAwIDogMDtcclxuICAgICAgICBjb25zdCBieXRlTGVuZ3RoID0gZGF0YS5ieXRlTGVuZ3RoIC0gb2Zmc2V0O1xyXG4gICAgICAgIGxldCBkdk9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KGRhdGEpIHx8IGRhdGEgaW5zdGFuY2VvZiBJT0J1ZmZlcikge1xyXG4gICAgICAgICAgICBpZiAoZGF0YS5ieXRlTGVuZ3RoICE9PSBkYXRhLmJ1ZmZlci5ieXRlTGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICBkdk9mZnNldCA9IGRhdGEuYnl0ZU9mZnNldCArIG9mZnNldDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBkYXRhID0gZGF0YS5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChkYXRhSXNHaXZlbikge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RXcml0dGVuQnl0ZSA9IGJ5dGVMZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RXcml0dGVuQnl0ZSA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYnVmZmVyID0gZGF0YTtcclxuICAgICAgICB0aGlzLmxlbmd0aCA9IGJ5dGVMZW5ndGg7XHJcbiAgICAgICAgdGhpcy5ieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aDtcclxuICAgICAgICB0aGlzLmJ5dGVPZmZzZXQgPSBkdk9mZnNldDtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IDA7XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0cnVlO1xyXG4gICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIsIGR2T2Zmc2V0LCBieXRlTGVuZ3RoKTtcclxuICAgICAgICB0aGlzLl9tYXJrID0gMDtcclxuICAgICAgICB0aGlzLl9tYXJrcyA9IFtdO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVja3MgaWYgdGhlIG1lbW9yeSBhbGxvY2F0ZWQgdG8gdGhlIGJ1ZmZlciBpcyBzdWZmaWNpZW50IHRvIHN0b3JlIG1vcmVcclxuICAgICAqIGJ5dGVzIGFmdGVyIHRoZSBvZmZzZXQuXHJcbiAgICAgKiBAcGFyYW0gYnl0ZUxlbmd0aCAtIFRoZSBuZWVkZWQgbWVtb3J5IGluIGJ5dGVzLlxyXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIHRoZXJlIGlzIHN1ZmZpY2llbnQgc3BhY2UgYW5kIGBmYWxzZWAgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBhdmFpbGFibGUoYnl0ZUxlbmd0aCA9IDEpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5vZmZzZXQgKyBieXRlTGVuZ3RoIDw9IHRoaXMubGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBsaXR0bGUtZW5kaWFuIG1vZGUgaXMgdXNlZCBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBtdWx0aS1ieXRlXHJcbiAgICAgKiB2YWx1ZXMuXHJcbiAgICAgKiBAcmV0dXJucyBgdHJ1ZWAgaWYgbGl0dGxlLWVuZGlhbiBtb2RlIGlzIHVzZWQsIGBmYWxzZWAgb3RoZXJ3aXNlLlxyXG4gICAgICovXHJcbiAgICBpc0xpdHRsZUVuZGlhbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5saXR0bGVFbmRpYW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFNldCBsaXR0bGUtZW5kaWFuIG1vZGUgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgbXVsdGktYnl0ZSB2YWx1ZXMuXHJcbiAgICAgKi9cclxuICAgIHNldExpdHRsZUVuZGlhbigpIHtcclxuICAgICAgICB0aGlzLmxpdHRsZUVuZGlhbiA9IHRydWU7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIENoZWNrIGlmIGJpZy1lbmRpYW4gbW9kZSBpcyB1c2VkIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIG11bHRpLWJ5dGUgdmFsdWVzLlxyXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIGJpZy1lbmRpYW4gbW9kZSBpcyB1c2VkLCBgZmFsc2VgIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgaXNCaWdFbmRpYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuICF0aGlzLmxpdHRsZUVuZGlhbjtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3dpdGNoZXMgdG8gYmlnLWVuZGlhbiBtb2RlIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIG11bHRpLWJ5dGUgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBzZXRCaWdFbmRpYW4oKSB7XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSBmYWxzZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgcG9pbnRlciBuIGJ5dGVzIGZvcndhcmQuXHJcbiAgICAgKiBAcGFyYW0gbiAtIE51bWJlciBvZiBieXRlcyB0byBza2lwLlxyXG4gICAgICovXHJcbiAgICBza2lwKG4gPSAxKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gbjtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgcG9pbnRlciB0byB0aGUgZ2l2ZW4gb2Zmc2V0LlxyXG4gICAgICogQHBhcmFtIG9mZnNldFxyXG4gICAgICovXHJcbiAgICBzZWVrKG9mZnNldCkge1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gb2Zmc2V0O1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTdG9yZSB0aGUgY3VycmVudCBwb2ludGVyIG9mZnNldC5cclxuICAgICAqIEBzZWUge0BsaW5rIElPQnVmZmVyI3Jlc2V0fVxyXG4gICAgICovXHJcbiAgICBtYXJrKCkge1xyXG4gICAgICAgIHRoaXMuX21hcmsgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgcG9pbnRlciBiYWNrIHRvIHRoZSBsYXN0IHBvaW50ZXIgb2Zmc2V0IHNldCBieSBtYXJrLlxyXG4gICAgICogQHNlZSB7QGxpbmsgSU9CdWZmZXIjbWFya31cclxuICAgICAqL1xyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSB0aGlzLl9tYXJrO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQdXNoIHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0IHRvIHRoZSBtYXJrIHN0YWNrLlxyXG4gICAgICogQHNlZSB7QGxpbmsgSU9CdWZmZXIjcG9wTWFya31cclxuICAgICAqL1xyXG4gICAgcHVzaE1hcmsoKSB7XHJcbiAgICAgICAgdGhpcy5fbWFya3MucHVzaCh0aGlzLm9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFBvcCB0aGUgbGFzdCBwb2ludGVyIG9mZnNldCBmcm9tIHRoZSBtYXJrIHN0YWNrLCBhbmQgc2V0IHRoZSBjdXJyZW50XHJcbiAgICAgKiBwb2ludGVyIG9mZnNldCB0byB0aGUgcG9wcGVkIHZhbHVlLlxyXG4gICAgICogQHNlZSB7QGxpbmsgSU9CdWZmZXIjcHVzaE1hcmt9XHJcbiAgICAgKi9cclxuICAgIHBvcE1hcmsoKSB7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gdGhpcy5fbWFya3MucG9wKCk7XHJcbiAgICAgICAgaWYgKG9mZnNldCA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTWFyayBzdGFjayBlbXB0eScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnNlZWsob2Zmc2V0KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTW92ZSB0aGUgcG9pbnRlciBvZmZzZXQgYmFjayB0byAwLlxyXG4gICAgICovXHJcbiAgICByZXdpbmQoKSB7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBNYWtlIHN1cmUgdGhlIGJ1ZmZlciBoYXMgc3VmZmljaWVudCBtZW1vcnkgdG8gd3JpdGUgYSBnaXZlbiBieXRlTGVuZ3RoIGF0XHJcbiAgICAgKiB0aGUgY3VycmVudCBwb2ludGVyIG9mZnNldC5cclxuICAgICAqIElmIHRoZSBidWZmZXIncyBtZW1vcnkgaXMgaW5zdWZmaWNpZW50LCB0aGlzIG1ldGhvZCB3aWxsIGNyZWF0ZSBhIG5ld1xyXG4gICAgICogYnVmZmVyIChhIGNvcHkpIHdpdGggYSBsZW5ndGggdGhhdCBpcyB0d2ljZSAoYnl0ZUxlbmd0aCArIGN1cnJlbnQgb2Zmc2V0KS5cclxuICAgICAqIEBwYXJhbSBieXRlTGVuZ3RoXHJcbiAgICAgKi9cclxuICAgIGVuc3VyZUF2YWlsYWJsZShieXRlTGVuZ3RoID0gMSkge1xyXG4gICAgICAgIGlmICghdGhpcy5hdmFpbGFibGUoYnl0ZUxlbmd0aCkpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVuZ3RoTmVlZGVkID0gdGhpcy5vZmZzZXQgKyBieXRlTGVuZ3RoO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdMZW5ndGggPSBsZW5ndGhOZWVkZWQgKiAyO1xyXG4gICAgICAgICAgICBjb25zdCBuZXdBcnJheSA9IG5ldyBVaW50OEFycmF5KG5ld0xlbmd0aCk7XHJcbiAgICAgICAgICAgIG5ld0FycmF5LnNldChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlcikpO1xyXG4gICAgICAgICAgICB0aGlzLmJ1ZmZlciA9IG5ld0FycmF5LmJ1ZmZlcjtcclxuICAgICAgICAgICAgdGhpcy5sZW5ndGggPSB0aGlzLmJ5dGVMZW5ndGggPSBuZXdMZW5ndGg7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIGJ5dGUgYW5kIHJldHVybiBmYWxzZSBpZiB0aGUgYnl0ZSdzIHZhbHVlIGlzIDAsIG9yIHRydWUgb3RoZXJ3aXNlLlxyXG4gICAgICogTW92ZXMgcG9pbnRlciBmb3J3YXJkIGJ5IG9uZSBieXRlLlxyXG4gICAgICovXHJcbiAgICByZWFkQm9vbGVhbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5yZWFkVWludDgoKSAhPT0gMDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIHNpZ25lZCA4LWJpdCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSAxIGJ5dGUuXHJcbiAgICAgKi9cclxuICAgIHJlYWRJbnQ4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldEludDgodGhpcy5vZmZzZXQrKyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYW4gdW5zaWduZWQgOC1iaXQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMSBieXRlLlxyXG4gICAgICovXHJcbiAgICByZWFkVWludDgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuX2RhdGEuZ2V0VWludDgodGhpcy5vZmZzZXQrKyk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFsaWFzIGZvciB7QGxpbmsgSU9CdWZmZXIjcmVhZFVpbnQ4fS5cclxuICAgICAqL1xyXG4gICAgcmVhZEJ5dGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVpbnQ4KCk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYG5gIGJ5dGVzIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSBgbmAgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRCeXRlcyhuID0gMSkge1xyXG4gICAgICAgIGNvbnN0IGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkobik7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgYnl0ZXNbaV0gPSB0aGlzLnJlYWRCeXRlKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBieXRlcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIDE2LWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMiBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZEludDE2KCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YS5nZXRJbnQxNih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgMTYtYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDIgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRVaW50MTYoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhLmdldFVpbnQxNih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgMzItYml0IHNpZ25lZCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSA0IGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICByZWFkSW50MzIoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSAzMi1iaXQgdW5zaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgNCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZFVpbnQzMigpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0VWludDMyKHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSAzMi1iaXQgZmxvYXRpbmcgbnVtYmVyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSA0IGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICByZWFkRmxvYXQzMigpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0RmxvYXQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgNjQtYml0IGZsb2F0aW5nIG51bWJlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgOCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZEZsb2F0NjQoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEZsb2F0NjQodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSA4O1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIDEtYnl0ZSBBU0NJSSBjaGFyYWN0ZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDEgYnl0ZS5cclxuICAgICAqL1xyXG4gICAgcmVhZENoYXIoKSB7XHJcbiAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUodGhpcy5yZWFkSW50OCgpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBgbmAgMS1ieXRlIEFTQ0lJIGNoYXJhY3RlcnMgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IGBuYCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZENoYXJzKG4gPSAxKSB7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHJlc3VsdCArPSB0aGlzLnJlYWRDaGFyKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgdGhlIG5leHQgYG5gIGJ5dGVzLCByZXR1cm4gYSBVVEYtOCBkZWNvZGVkIHN0cmluZyBhbmQgbW92ZSBwb2ludGVyXHJcbiAgICAgKiBmb3J3YXJkIGJ5IGBuYCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZFV0ZjgobiA9IDEpIHtcclxuICAgICAgICByZXR1cm4gZGVjb2RlKHRoaXMucmVhZEJ5dGVzKG4pKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgMHhmZiBpZiB0aGUgcGFzc2VkIHZhbHVlIGlzIHRydXRoeSwgMHgwMCBvdGhlcndpc2UgYW5kIG1vdmUgcG9pbnRlclxyXG4gICAgICogZm9yd2FyZCBieSAxIGJ5dGUuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlQm9vbGVhbih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMud3JpdGVVaW50OCh2YWx1ZSA/IDB4ZmYgOiAweDAwKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhbiA4LWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMSBieXRlLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUludDgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSgxKTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldEludDgodGhpcy5vZmZzZXQrKywgdmFsdWUpO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZSBgdmFsdWVgIGFzIGFuIDgtYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDFcclxuICAgICAqIGJ5dGUuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVWludDgodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSgxKTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldFVpbnQ4KHRoaXMub2Zmc2V0KyssIHZhbHVlKTtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQW4gYWxpYXMgZm9yIHtAbGluayBJT0J1ZmZlciN3cml0ZVVpbnQ4fS5cclxuICAgICAqL1xyXG4gICAgd3JpdGVCeXRlKHZhbHVlKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVVaW50OCh2YWx1ZSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGFsbCBlbGVtZW50cyBvZiBgYnl0ZXNgIGFzIHVpbnQ4IHZhbHVlcyBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnlcclxuICAgICAqIGBieXRlcy5sZW5ndGhgIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUJ5dGVzKGJ5dGVzKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoYnl0ZXMubGVuZ3RoKTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDgodGhpcy5vZmZzZXQrKywgYnl0ZXNbaV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhIDE2LWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMlxyXG4gICAgICogYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlSW50MTYodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSgyKTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldEludDE2KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSAxNi1iaXQgdW5zaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMlxyXG4gICAgICogYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVWludDE2KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMik7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRVaW50MTYodGhpcy5vZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gMjtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhIDMyLWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgNFxyXG4gICAgICogYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlSW50MzIodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSg0KTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldEludDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSAzMi1iaXQgdW5zaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgNFxyXG4gICAgICogYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVWludDMyKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoNCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRVaW50MzIodGhpcy5vZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhIDMyLWJpdCBmbG9hdGluZyBudW1iZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDRcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUZsb2F0MzIodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSg0KTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldEZsb2F0MzIodGhpcy5vZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gNDtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhIDY0LWJpdCBmbG9hdGluZyBudW1iZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDhcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUZsb2F0NjQodmFsdWUpIHtcclxuICAgICAgICB0aGlzLmVuc3VyZUF2YWlsYWJsZSg4KTtcclxuICAgICAgICB0aGlzLl9kYXRhLnNldEZsb2F0NjQodGhpcy5vZmZzZXQsIHZhbHVlLCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgdGhlIGNoYXJDb2RlIG9mIGBzdHJgJ3MgZmlyc3QgY2hhcmFjdGVyIGFzIGFuIDgtYml0IHVuc2lnbmVkIGludGVnZXJcclxuICAgICAqIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSAxIGJ5dGUuXHJcbiAgICAgKi9cclxuICAgIHdyaXRlQ2hhcihzdHIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZVVpbnQ4KHN0ci5jaGFyQ29kZUF0KDApKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgdGhlIGNoYXJDb2RlcyBvZiBhbGwgYHN0cmAncyBjaGFyYWN0ZXJzIGFzIDgtYml0IHVuc2lnbmVkIGludGVnZXJzXHJcbiAgICAgKiBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgYHN0ci5sZW5ndGhgIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUNoYXJzKHN0cikge1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMud3JpdGVVaW50OChzdHIuY2hhckNvZGVBdChpKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVVEYtOCBlbmNvZGUgYW5kIHdyaXRlIGBzdHJgIHRvIHRoZSBjdXJyZW50IHBvaW50ZXIgb2Zmc2V0IGFuZCBtb3ZlIHBvaW50ZXJcclxuICAgICAqIGZvcndhcmQgYWNjb3JkaW5nIHRvIHRoZSBlbmNvZGVkIGxlbmd0aC5cclxuICAgICAqL1xyXG4gICAgd3JpdGVVdGY4KHN0cikge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlQnl0ZXMoZW5jb2RlKHN0cikpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBFeHBvcnQgYSBVaW50OEFycmF5IHZpZXcgb2YgdGhlIGludGVybmFsIGJ1ZmZlci5cclxuICAgICAqIFRoZSB2aWV3IHN0YXJ0cyBhdCB0aGUgYnl0ZSBvZmZzZXQgYW5kIGl0cyBsZW5ndGhcclxuICAgICAqIGlzIGNhbGN1bGF0ZWQgdG8gc3RvcCBhdCB0aGUgbGFzdCB3cml0dGVuIGJ5dGUgb3IgdGhlIG9yaWdpbmFsIGxlbmd0aC5cclxuICAgICAqL1xyXG4gICAgdG9BcnJheSgpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCwgdGhpcy5sYXN0V3JpdHRlbkJ5dGUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBVcGRhdGUgdGhlIGxhc3Qgd3JpdHRlbiBieXRlIG9mZnNldFxyXG4gICAgICogQHByaXZhdGVcclxuICAgICAqL1xyXG4gICAgX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5vZmZzZXQgPiB0aGlzLmxhc3RXcml0dGVuQnl0ZSkge1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RXcml0dGVuQnl0ZSA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1JT0J1ZmZlci5qcy5tYXAiLCJcbi8qISBwYWtvIDIuMC40IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlY2EvcGFrbyBAbGljZW5zZSAoTUlUIEFORCBabGliKSAqL1xuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG4vKiBlc2xpbnQtZGlzYWJsZSBzcGFjZS11bmFyeS1vcHMgKi9cblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuLy9jb25zdCBaX0ZJTFRFUkVEICAgICAgICAgID0gMTtcbi8vY29uc3QgWl9IVUZGTUFOX09OTFkgICAgICA9IDI7XG4vL2NvbnN0IFpfUkxFICAgICAgICAgICAgICAgPSAzO1xuY29uc3QgWl9GSVhFRCQxICAgICAgICAgICAgICAgPSA0O1xuLy9jb25zdCBaX0RFRkFVTFRfU1RSQVRFR1kgID0gMDtcblxuLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuY29uc3QgWl9CSU5BUlkgICAgICAgICAgICAgID0gMDtcbmNvbnN0IFpfVEVYVCAgICAgICAgICAgICAgICA9IDE7XG4vL2NvbnN0IFpfQVNDSUkgICAgICAgICAgICAgPSAxOyAvLyA9IFpfVEVYVFxuY29uc3QgWl9VTktOT1dOJDEgICAgICAgICAgICAgPSAyO1xuXG4vKj09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbmZ1bmN0aW9uIHplcm8kMShidWYpIHsgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfSB9XG5cbi8vIEZyb20genV0aWwuaFxuXG5jb25zdCBTVE9SRURfQkxPQ0sgPSAwO1xuY29uc3QgU1RBVElDX1RSRUVTID0gMTtcbmNvbnN0IERZTl9UUkVFUyAgICA9IDI7XG4vKiBUaGUgdGhyZWUga2luZHMgb2YgYmxvY2sgdHlwZSAqL1xuXG5jb25zdCBNSU5fTUFUQ0gkMSAgICA9IDM7XG5jb25zdCBNQVhfTUFUQ0gkMSAgICA9IDI1ODtcbi8qIFRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtIG1hdGNoIGxlbmd0aHMgKi9cblxuLy8gRnJvbSBkZWZsYXRlLmhcbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW50ZXJuYWwgY29tcHJlc3Npb24gc3RhdGUuXG4gKi9cblxuY29uc3QgTEVOR1RIX0NPREVTJDEgID0gMjk7XG4vKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGVzLCBub3QgY291bnRpbmcgdGhlIHNwZWNpYWwgRU5EX0JMT0NLIGNvZGUgKi9cblxuY29uc3QgTElURVJBTFMkMSAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5cbmNvbnN0IExfQ09ERVMkMSAgICAgICA9IExJVEVSQUxTJDEgKyAxICsgTEVOR1RIX0NPREVTJDE7XG4vKiBudW1iZXIgb2YgTGl0ZXJhbCBvciBMZW5ndGggY29kZXMsIGluY2x1ZGluZyB0aGUgRU5EX0JMT0NLIGNvZGUgKi9cblxuY29uc3QgRF9DT0RFUyQxICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cblxuY29uc3QgQkxfQ09ERVMkMSAgICAgID0gMTk7XG4vKiBudW1iZXIgb2YgY29kZXMgdXNlZCB0byB0cmFuc2ZlciB0aGUgYml0IGxlbmd0aHMgKi9cblxuY29uc3QgSEVBUF9TSVpFJDEgICAgID0gMiAqIExfQ09ERVMkMSArIDE7XG4vKiBtYXhpbXVtIGhlYXAgc2l6ZSAqL1xuXG5jb25zdCBNQVhfQklUUyQxICAgICAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG5jb25zdCBCdWZfc2l6ZSAgICAgID0gMTY7XG4vKiBzaXplIG9mIGJpdCBidWZmZXIgaW4gYmlfYnVmICovXG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb25zdGFudHNcbiAqL1xuXG5jb25zdCBNQVhfQkxfQklUUyA9IDc7XG4vKiBCaXQgbGVuZ3RoIGNvZGVzIG11c3Qgbm90IGV4Y2VlZCBNQVhfQkxfQklUUyBiaXRzICovXG5cbmNvbnN0IEVORF9CTE9DSyAgID0gMjU2O1xuLyogZW5kIG9mIGJsb2NrIGxpdGVyYWwgY29kZSAqL1xuXG5jb25zdCBSRVBfM182ICAgICA9IDE2O1xuLyogcmVwZWF0IHByZXZpb3VzIGJpdCBsZW5ndGggMy02IHRpbWVzICgyIGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG5jb25zdCBSRVBaXzNfMTAgICA9IDE3O1xuLyogcmVwZWF0IGEgemVybyBsZW5ndGggMy0xMCB0aW1lcyAgKDMgYml0cyBvZiByZXBlYXQgY291bnQpICovXG5cbmNvbnN0IFJFUFpfMTFfMTM4ID0gMTg7XG4vKiByZXBlYXQgYSB6ZXJvIGxlbmd0aCAxMS0xMzggdGltZXMgICg3IGJpdHMgb2YgcmVwZWF0IGNvdW50KSAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBjb21tYS1zcGFjaW5nLGFycmF5LWJyYWNrZXQtc3BhY2luZyAqL1xuY29uc3QgZXh0cmFfbGJpdHMgPSAgIC8qIGV4dHJhIGJpdHMgZm9yIGVhY2ggbGVuZ3RoIGNvZGUgKi9cbiAgbmV3IFVpbnQ4QXJyYXkoWzAsMCwwLDAsMCwwLDAsMCwxLDEsMSwxLDIsMiwyLDIsMywzLDMsMyw0LDQsNCw0LDUsNSw1LDUsMF0pO1xuXG5jb25zdCBleHRyYV9kYml0cyA9ICAgLyogZXh0cmEgYml0cyBmb3IgZWFjaCBkaXN0YW5jZSBjb2RlICovXG4gIG5ldyBVaW50OEFycmF5KFswLDAsMCwwLDEsMSwyLDIsMywzLDQsNCw1LDUsNiw2LDcsNyw4LDgsOSw5LDEwLDEwLDExLDExLDEyLDEyLDEzLDEzXSk7XG5cbmNvbnN0IGV4dHJhX2JsYml0cyA9ICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGJpdCBsZW5ndGggY29kZSAqL1xuICBuZXcgVWludDhBcnJheShbMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDMsN10pO1xuXG5jb25zdCBibF9vcmRlciA9XG4gIG5ldyBVaW50OEFycmF5KFsxNiwxNywxOCwwLDgsNyw5LDYsMTAsNSwxMSw0LDEyLDMsMTMsMiwxNCwxLDE1XSk7XG4vKiBlc2xpbnQtZW5hYmxlIGNvbW1hLXNwYWNpbmcsYXJyYXktYnJhY2tldC1zcGFjaW5nICovXG5cbi8qIFRoZSBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzIGFyZSBzZW50IGluIG9yZGVyIG9mIGRlY3JlYXNpbmdcbiAqIHByb2JhYmlsaXR5LCB0byBhdm9pZCB0cmFuc21pdHRpbmcgdGhlIGxlbmd0aHMgZm9yIHVudXNlZCBiaXQgbGVuZ3RoIGNvZGVzLlxuICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogTG9jYWwgZGF0YS4gVGhlc2UgYXJlIGluaXRpYWxpemVkIG9ubHkgb25jZS5cbiAqL1xuXG4vLyBXZSBwcmUtZmlsbCBhcnJheXMgd2l0aCAwIHRvIGF2b2lkIHVuaW5pdGlhbGl6ZWQgZ2Fwc1xuXG5jb25zdCBESVNUX0NPREVfTEVOID0gNTEyOyAvKiBzZWUgZGVmaW5pdGlvbiBvZiBhcnJheSBkaXN0X2NvZGUgYmVsb3cgKi9cblxuLy8gISEhISBVc2UgZmxhdCBhcnJheSBpbnN0ZWFkIG9mIHN0cnVjdHVyZSwgRnJlcSA9IGkqMiwgTGVuID0gaSoyKzFcbmNvbnN0IHN0YXRpY19sdHJlZSAgPSBuZXcgQXJyYXkoKExfQ09ERVMkMSArIDIpICogMik7XG56ZXJvJDEoc3RhdGljX2x0cmVlKTtcbi8qIFRoZSBzdGF0aWMgbGl0ZXJhbCB0cmVlLiBTaW5jZSB0aGUgYml0IGxlbmd0aHMgYXJlIGltcG9zZWQsIHRoZXJlIGlzIG5vXG4gKiBuZWVkIGZvciB0aGUgTF9DT0RFUyBleHRyYSBjb2RlcyB1c2VkIGR1cmluZyBoZWFwIGNvbnN0cnVjdGlvbi4gSG93ZXZlclxuICogVGhlIGNvZGVzIDI4NiBhbmQgMjg3IGFyZSBuZWVkZWQgdG8gYnVpbGQgYSBjYW5vbmljYWwgdHJlZSAoc2VlIF90cl9pbml0XG4gKiBiZWxvdykuXG4gKi9cblxuY29uc3Qgc3RhdGljX2R0cmVlICA9IG5ldyBBcnJheShEX0NPREVTJDEgKiAyKTtcbnplcm8kMShzdGF0aWNfZHRyZWUpO1xuLyogVGhlIHN0YXRpYyBkaXN0YW5jZSB0cmVlLiAoQWN0dWFsbHkgYSB0cml2aWFsIHRyZWUgc2luY2UgYWxsIGNvZGVzIHVzZVxuICogNSBiaXRzLilcbiAqL1xuXG5jb25zdCBfZGlzdF9jb2RlICAgID0gbmV3IEFycmF5KERJU1RfQ09ERV9MRU4pO1xuemVybyQxKF9kaXN0X2NvZGUpO1xuLyogRGlzdGFuY2UgY29kZXMuIFRoZSBmaXJzdCAyNTYgdmFsdWVzIGNvcnJlc3BvbmQgdG8gdGhlIGRpc3RhbmNlc1xuICogMyAuLiAyNTgsIHRoZSBsYXN0IDI1NiB2YWx1ZXMgY29ycmVzcG9uZCB0byB0aGUgdG9wIDggYml0cyBvZlxuICogdGhlIDE1IGJpdCBkaXN0YW5jZXMuXG4gKi9cblxuY29uc3QgX2xlbmd0aF9jb2RlICA9IG5ldyBBcnJheShNQVhfTUFUQ0gkMSAtIE1JTl9NQVRDSCQxICsgMSk7XG56ZXJvJDEoX2xlbmd0aF9jb2RlKTtcbi8qIGxlbmd0aCBjb2RlIGZvciBlYWNoIG5vcm1hbGl6ZWQgbWF0Y2ggbGVuZ3RoICgwID09IE1JTl9NQVRDSCkgKi9cblxuY29uc3QgYmFzZV9sZW5ndGggICA9IG5ldyBBcnJheShMRU5HVEhfQ09ERVMkMSk7XG56ZXJvJDEoYmFzZV9sZW5ndGgpO1xuLyogRmlyc3Qgbm9ybWFsaXplZCBsZW5ndGggZm9yIGVhY2ggY29kZSAoMCA9IE1JTl9NQVRDSCkgKi9cblxuY29uc3QgYmFzZV9kaXN0ICAgICA9IG5ldyBBcnJheShEX0NPREVTJDEpO1xuemVybyQxKGJhc2VfZGlzdCk7XG4vKiBGaXJzdCBub3JtYWxpemVkIGRpc3RhbmNlIGZvciBlYWNoIGNvZGUgKDAgPSBkaXN0YW5jZSBvZiAxKSAqL1xuXG5cbmZ1bmN0aW9uIFN0YXRpY1RyZWVEZXNjKHN0YXRpY190cmVlLCBleHRyYV9iaXRzLCBleHRyYV9iYXNlLCBlbGVtcywgbWF4X2xlbmd0aCkge1xuXG4gIHRoaXMuc3RhdGljX3RyZWUgID0gc3RhdGljX3RyZWU7ICAvKiBzdGF0aWMgdHJlZSBvciBOVUxMICovXG4gIHRoaXMuZXh0cmFfYml0cyAgID0gZXh0cmFfYml0czsgICAvKiBleHRyYSBiaXRzIGZvciBlYWNoIGNvZGUgb3IgTlVMTCAqL1xuICB0aGlzLmV4dHJhX2Jhc2UgICA9IGV4dHJhX2Jhc2U7ICAgLyogYmFzZSBpbmRleCBmb3IgZXh0cmFfYml0cyAqL1xuICB0aGlzLmVsZW1zICAgICAgICA9IGVsZW1zOyAgICAgICAgLyogbWF4IG51bWJlciBvZiBlbGVtZW50cyBpbiB0aGUgdHJlZSAqL1xuICB0aGlzLm1heF9sZW5ndGggICA9IG1heF9sZW5ndGg7ICAgLyogbWF4IGJpdCBsZW5ndGggZm9yIHRoZSBjb2RlcyAqL1xuXG4gIC8vIHNob3cgaWYgYHN0YXRpY190cmVlYCBoYXMgZGF0YSBvciBkdW1teSAtIG5lZWRlZCBmb3IgbW9ub21vcnBoaWMgb2JqZWN0c1xuICB0aGlzLmhhc19zdHJlZSAgICA9IHN0YXRpY190cmVlICYmIHN0YXRpY190cmVlLmxlbmd0aDtcbn1cblxuXG5sZXQgc3RhdGljX2xfZGVzYztcbmxldCBzdGF0aWNfZF9kZXNjO1xubGV0IHN0YXRpY19ibF9kZXNjO1xuXG5cbmZ1bmN0aW9uIFRyZWVEZXNjKGR5bl90cmVlLCBzdGF0X2Rlc2MpIHtcbiAgdGhpcy5keW5fdHJlZSA9IGR5bl90cmVlOyAgICAgLyogdGhlIGR5bmFtaWMgdHJlZSAqL1xuICB0aGlzLm1heF9jb2RlID0gMDsgICAgICAgICAgICAvKiBsYXJnZXN0IGNvZGUgd2l0aCBub24gemVybyBmcmVxdWVuY3kgKi9cbiAgdGhpcy5zdGF0X2Rlc2MgPSBzdGF0X2Rlc2M7ICAgLyogdGhlIGNvcnJlc3BvbmRpbmcgc3RhdGljIHRyZWUgKi9cbn1cblxuXG5cbmNvbnN0IGRfY29kZSA9IChkaXN0KSA9PiB7XG5cbiAgcmV0dXJuIGRpc3QgPCAyNTYgPyBfZGlzdF9jb2RlW2Rpc3RdIDogX2Rpc3RfY29kZVsyNTYgKyAoZGlzdCA+Pj4gNyldO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIE91dHB1dCBhIHNob3J0IExTQiBmaXJzdCBvbiB0aGUgc3RyZWFtLlxuICogSU4gYXNzZXJ0aW9uOiB0aGVyZSBpcyBlbm91Z2ggcm9vbSBpbiBwZW5kaW5nQnVmLlxuICovXG5jb25zdCBwdXRfc2hvcnQgPSAocywgdykgPT4ge1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHcpICYgMHhmZikpO1xuLy8gICAgcHV0X2J5dGUocywgKHVjaCkoKHVzaCkodykgPj4gOCkpO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9ICh3KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gKHcgPj4+IDgpICYgMHhmZjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBTZW5kIGEgdmFsdWUgb24gYSBnaXZlbiBudW1iZXIgb2YgYml0cy5cbiAqIElOIGFzc2VydGlvbjogbGVuZ3RoIDw9IDE2IGFuZCB2YWx1ZSBmaXRzIGluIGxlbmd0aCBiaXRzLlxuICovXG5jb25zdCBzZW5kX2JpdHMgPSAocywgdmFsdWUsIGxlbmd0aCkgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID4gKEJ1Zl9zaXplIC0gbGVuZ3RoKSkge1xuICAgIHMuYmlfYnVmIHw9ICh2YWx1ZSA8PCBzLmJpX3ZhbGlkKSAmIDB4ZmZmZjtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICAgIHMuYmlfYnVmID0gdmFsdWUgPj4gKEJ1Zl9zaXplIC0gcy5iaV92YWxpZCk7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGggLSBCdWZfc2l6ZTtcbiAgfSBlbHNlIHtcbiAgICBzLmJpX2J1ZiB8PSAodmFsdWUgPDwgcy5iaV92YWxpZCkgJiAweGZmZmY7XG4gICAgcy5iaV92YWxpZCArPSBsZW5ndGg7XG4gIH1cbn07XG5cblxuY29uc3Qgc2VuZF9jb2RlID0gKHMsIGMsIHRyZWUpID0+IHtcblxuICBzZW5kX2JpdHMocywgdHJlZVtjICogMl0vKi5Db2RlKi8sIHRyZWVbYyAqIDIgKyAxXS8qLkxlbiovKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXZlcnNlIHRoZSBmaXJzdCBsZW4gYml0cyBvZiBhIGNvZGUsIHVzaW5nIHN0cmFpZ2h0Zm9yd2FyZCBjb2RlIChhIGZhc3RlclxuICogbWV0aG9kIHdvdWxkIHVzZSBhIHRhYmxlKVxuICogSU4gYXNzZXJ0aW9uOiAxIDw9IGxlbiA8PSAxNVxuICovXG5jb25zdCBiaV9yZXZlcnNlID0gKGNvZGUsIGxlbikgPT4ge1xuXG4gIGxldCByZXMgPSAwO1xuICBkbyB7XG4gICAgcmVzIHw9IGNvZGUgJiAxO1xuICAgIGNvZGUgPj4+PSAxO1xuICAgIHJlcyA8PD0gMTtcbiAgfSB3aGlsZSAoLS1sZW4gPiAwKTtcbiAgcmV0dXJuIHJlcyA+Pj4gMTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGbHVzaCB0aGUgYml0IGJ1ZmZlciwga2VlcGluZyBhdCBtb3N0IDcgYml0cyBpbiBpdC5cbiAqL1xuY29uc3QgYmlfZmx1c2ggPSAocykgPT4ge1xuXG4gIGlmIChzLmJpX3ZhbGlkID09PSAxNikge1xuICAgIHB1dF9zaG9ydChzLCBzLmJpX2J1Zik7XG4gICAgcy5iaV9idWYgPSAwO1xuICAgIHMuYmlfdmFsaWQgPSAwO1xuXG4gIH0gZWxzZSBpZiAocy5iaV92YWxpZCA+PSA4KSB7XG4gICAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSBzLmJpX2J1ZiAmIDB4ZmY7XG4gICAgcy5iaV9idWYgPj49IDg7XG4gICAgcy5iaV92YWxpZCAtPSA4O1xuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHV0ZSB0aGUgb3B0aW1hbCBiaXQgbGVuZ3RocyBmb3IgYSB0cmVlIGFuZCB1cGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGhcbiAqIGZvciB0aGUgY3VycmVudCBibG9jay5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBmcmVxIGFuZCBkYWQgYXJlIHNldCwgaGVhcFtoZWFwX21heF0gYW5kXG4gKiAgICBhYm92ZSBhcmUgdGhlIHRyZWUgbm9kZXMgc29ydGVkIGJ5IGluY3JlYXNpbmcgZnJlcXVlbmN5LlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZCBsZW4gaXMgc2V0IHRvIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGgsIHRoZVxuICogICAgIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBmcmVxdWVuY2llcyBmb3IgZWFjaCBiaXQgbGVuZ3RoLlxuICogICAgIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzIGFsc28gdXBkYXRlZCBpZiBzdHJlZSBpc1xuICogICAgIG5vdCBudWxsLlxuICovXG5jb25zdCBnZW5fYml0bGVuID0gKHMsIGRlc2MpID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAgICAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIGNvbnN0IHRyZWUgICAgICAgICAgICA9IGRlc2MuZHluX3RyZWU7XG4gIGNvbnN0IG1heF9jb2RlICAgICAgICA9IGRlc2MubWF4X2NvZGU7XG4gIGNvbnN0IHN0cmVlICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLnN0YXRpY190cmVlO1xuICBjb25zdCBoYXNfc3RyZWUgICAgICAgPSBkZXNjLnN0YXRfZGVzYy5oYXNfc3RyZWU7XG4gIGNvbnN0IGV4dHJhICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2JpdHM7XG4gIGNvbnN0IGJhc2UgICAgICAgICAgICA9IGRlc2Muc3RhdF9kZXNjLmV4dHJhX2Jhc2U7XG4gIGNvbnN0IG1heF9sZW5ndGggICAgICA9IGRlc2Muc3RhdF9kZXNjLm1heF9sZW5ndGg7XG4gIGxldCBoOyAgICAgICAgICAgICAgLyogaGVhcCBpbmRleCAqL1xuICBsZXQgbiwgbTsgICAgICAgICAgIC8qIGl0ZXJhdGUgb3ZlciB0aGUgdHJlZSBlbGVtZW50cyAqL1xuICBsZXQgYml0czsgICAgICAgICAgIC8qIGJpdCBsZW5ndGggKi9cbiAgbGV0IHhiaXRzOyAgICAgICAgICAvKiBleHRyYSBiaXRzICovXG4gIGxldCBmOyAgICAgICAgICAgICAgLyogZnJlcXVlbmN5ICovXG4gIGxldCBvdmVyZmxvdyA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIHdpdGggYml0IGxlbmd0aCB0b28gbGFyZ2UgKi9cblxuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTJDE7IGJpdHMrKykge1xuICAgIHMuYmxfY291bnRbYml0c10gPSAwO1xuICB9XG5cbiAgLyogSW4gYSBmaXJzdCBwYXNzLCBjb21wdXRlIHRoZSBvcHRpbWFsIGJpdCBsZW5ndGhzICh3aGljaCBtYXlcbiAgICogb3ZlcmZsb3cgaW4gdGhlIGNhc2Ugb2YgdGhlIGJpdCBsZW5ndGggdHJlZSkuXG4gICAqL1xuICB0cmVlW3MuaGVhcFtzLmhlYXBfbWF4XSAqIDIgKyAxXS8qLkxlbiovID0gMDsgLyogcm9vdCBvZiB0aGUgaGVhcCAqL1xuXG4gIGZvciAoaCA9IHMuaGVhcF9tYXggKyAxOyBoIDwgSEVBUF9TSVpFJDE7IGgrKykge1xuICAgIG4gPSBzLmhlYXBbaF07XG4gICAgYml0cyA9IHRyZWVbdHJlZVtuICogMiArIDFdLyouRGFkKi8gKiAyICsgMV0vKi5MZW4qLyArIDE7XG4gICAgaWYgKGJpdHMgPiBtYXhfbGVuZ3RoKSB7XG4gICAgICBiaXRzID0gbWF4X2xlbmd0aDtcbiAgICAgIG92ZXJmbG93Kys7XG4gICAgfVxuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gYml0cztcbiAgICAvKiBXZSBvdmVyd3JpdGUgdHJlZVtuXS5EYWQgd2hpY2ggaXMgbm8gbG9uZ2VyIG5lZWRlZCAqL1xuXG4gICAgaWYgKG4gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfSAvKiBub3QgYSBsZWFmIG5vZGUgKi9cblxuICAgIHMuYmxfY291bnRbYml0c10rKztcbiAgICB4Yml0cyA9IDA7XG4gICAgaWYgKG4gPj0gYmFzZSkge1xuICAgICAgeGJpdHMgPSBleHRyYVtuIC0gYmFzZV07XG4gICAgfVxuICAgIGYgPSB0cmVlW24gKiAyXS8qLkZyZXEqLztcbiAgICBzLm9wdF9sZW4gKz0gZiAqIChiaXRzICsgeGJpdHMpO1xuICAgIGlmIChoYXNfc3RyZWUpIHtcbiAgICAgIHMuc3RhdGljX2xlbiArPSBmICogKHN0cmVlW24gKiAyICsgMV0vKi5MZW4qLyArIHhiaXRzKTtcbiAgICB9XG4gIH1cbiAgaWYgKG92ZXJmbG93ID09PSAwKSB7IHJldHVybjsgfVxuXG4gIC8vIFRyYWNlKChzdGRlcnIsXCJcXG5iaXQgbGVuZ3RoIG92ZXJmbG93XFxuXCIpKTtcbiAgLyogVGhpcyBoYXBwZW5zIGZvciBleGFtcGxlIG9uIG9iajIgYW5kIHBpYyBvZiB0aGUgQ2FsZ2FyeSBjb3JwdXMgKi9cblxuICAvKiBGaW5kIHRoZSBmaXJzdCBiaXQgbGVuZ3RoIHdoaWNoIGNvdWxkIGluY3JlYXNlOiAqL1xuICBkbyB7XG4gICAgYml0cyA9IG1heF9sZW5ndGggLSAxO1xuICAgIHdoaWxlIChzLmJsX2NvdW50W2JpdHNdID09PSAwKSB7IGJpdHMtLTsgfVxuICAgIHMuYmxfY291bnRbYml0c10tLTsgICAgICAvKiBtb3ZlIG9uZSBsZWFmIGRvd24gdGhlIHRyZWUgKi9cbiAgICBzLmJsX2NvdW50W2JpdHMgKyAxXSArPSAyOyAvKiBtb3ZlIG9uZSBvdmVyZmxvdyBpdGVtIGFzIGl0cyBicm90aGVyICovXG4gICAgcy5ibF9jb3VudFttYXhfbGVuZ3RoXS0tO1xuICAgIC8qIFRoZSBicm90aGVyIG9mIHRoZSBvdmVyZmxvdyBpdGVtIGFsc28gbW92ZXMgb25lIHN0ZXAgdXAsXG4gICAgICogYnV0IHRoaXMgZG9lcyBub3QgYWZmZWN0IGJsX2NvdW50W21heF9sZW5ndGhdXG4gICAgICovXG4gICAgb3ZlcmZsb3cgLT0gMjtcbiAgfSB3aGlsZSAob3ZlcmZsb3cgPiAwKTtcblxuICAvKiBOb3cgcmVjb21wdXRlIGFsbCBiaXQgbGVuZ3Rocywgc2Nhbm5pbmcgaW4gaW5jcmVhc2luZyBmcmVxdWVuY3kuXG4gICAqIGggaXMgc3RpbGwgZXF1YWwgdG8gSEVBUF9TSVpFLiAoSXQgaXMgc2ltcGxlciB0byByZWNvbnN0cnVjdCBhbGxcbiAgICogbGVuZ3RocyBpbnN0ZWFkIG9mIGZpeGluZyBvbmx5IHRoZSB3cm9uZyBvbmVzLiBUaGlzIGlkZWEgaXMgdGFrZW5cbiAgICogZnJvbSAnYXInIHdyaXR0ZW4gYnkgSGFydWhpa28gT2t1bXVyYS4pXG4gICAqL1xuICBmb3IgKGJpdHMgPSBtYXhfbGVuZ3RoOyBiaXRzICE9PSAwOyBiaXRzLS0pIHtcbiAgICBuID0gcy5ibF9jb3VudFtiaXRzXTtcbiAgICB3aGlsZSAobiAhPT0gMCkge1xuICAgICAgbSA9IHMuaGVhcFstLWhdO1xuICAgICAgaWYgKG0gPiBtYXhfY29kZSkgeyBjb250aW51ZTsgfVxuICAgICAgaWYgKHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovICE9PSBiaXRzKSB7XG4gICAgICAgIC8vIFRyYWNlKChzdGRlcnIsXCJjb2RlICVkIGJpdHMgJWQtPiVkXFxuXCIsIG0sIHRyZWVbbV0uTGVuLCBiaXRzKSk7XG4gICAgICAgIHMub3B0X2xlbiArPSAoYml0cyAtIHRyZWVbbSAqIDIgKyAxXS8qLkxlbiovKSAqIHRyZWVbbSAqIDJdLyouRnJlcSovO1xuICAgICAgICB0cmVlW20gKiAyICsgMV0vKi5MZW4qLyA9IGJpdHM7XG4gICAgICB9XG4gICAgICBuLS07XG4gICAgfVxuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogR2VuZXJhdGUgdGhlIGNvZGVzIGZvciBhIGdpdmVuIHRyZWUgYW5kIGJpdCBjb3VudHMgKHdoaWNoIG5lZWQgbm90IGJlXG4gKiBvcHRpbWFsKS5cbiAqIElOIGFzc2VydGlvbjogdGhlIGFycmF5IGJsX2NvdW50IGNvbnRhaW5zIHRoZSBiaXQgbGVuZ3RoIHN0YXRpc3RpY3MgZm9yXG4gKiB0aGUgZ2l2ZW4gdHJlZSBhbmQgdGhlIGZpZWxkIGxlbiBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbjogdGhlIGZpZWxkIGNvZGUgaXMgc2V0IGZvciBhbGwgdHJlZSBlbGVtZW50cyBvZiBub25cbiAqICAgICB6ZXJvIGNvZGUgbGVuZ3RoLlxuICovXG5jb25zdCBnZW5fY29kZXMgPSAodHJlZSwgbWF4X2NvZGUsIGJsX2NvdW50KSA9PlxuLy8gICAgY3RfZGF0YSAqdHJlZTsgICAgICAgICAgICAgLyogdGhlIHRyZWUgdG8gZGVjb3JhdGUgKi9cbi8vICAgIGludCBtYXhfY29kZTsgICAgICAgICAgICAgIC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuLy8gICAgdXNoZiAqYmxfY291bnQ7ICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGVzIGF0IGVhY2ggYml0IGxlbmd0aCAqL1xue1xuICBjb25zdCBuZXh0X2NvZGUgPSBuZXcgQXJyYXkoTUFYX0JJVFMkMSArIDEpOyAvKiBuZXh0IGNvZGUgdmFsdWUgZm9yIGVhY2ggYml0IGxlbmd0aCAqL1xuICBsZXQgY29kZSA9IDA7ICAgICAgICAgICAgICAvKiBydW5uaW5nIGNvZGUgdmFsdWUgKi9cbiAgbGV0IGJpdHM7ICAgICAgICAgICAgICAgICAgLyogYml0IGluZGV4ICovXG4gIGxldCBuOyAgICAgICAgICAgICAgICAgICAgIC8qIGNvZGUgaW5kZXggKi9cblxuICAvKiBUaGUgZGlzdHJpYnV0aW9uIGNvdW50cyBhcmUgZmlyc3QgdXNlZCB0byBnZW5lcmF0ZSB0aGUgY29kZSB2YWx1ZXNcbiAgICogd2l0aG91dCBiaXQgcmV2ZXJzYWwuXG4gICAqL1xuICBmb3IgKGJpdHMgPSAxOyBiaXRzIDw9IE1BWF9CSVRTJDE7IGJpdHMrKykge1xuICAgIG5leHRfY29kZVtiaXRzXSA9IGNvZGUgPSAoY29kZSArIGJsX2NvdW50W2JpdHMgLSAxXSkgPDwgMTtcbiAgfVxuICAvKiBDaGVjayB0aGF0IHRoZSBiaXQgY291bnRzIGluIGJsX2NvdW50IGFyZSBjb25zaXN0ZW50LiBUaGUgbGFzdCBjb2RlXG4gICAqIG11c3QgYmUgYWxsIG9uZXMuXG4gICAqL1xuICAvL0Fzc2VydCAoY29kZSArIGJsX2NvdW50W01BWF9CSVRTXS0xID09ICgxPDxNQVhfQklUUyktMSxcbiAgLy8gICAgICAgIFwiaW5jb25zaXN0ZW50IGJpdCBjb3VudHNcIik7XG4gIC8vVHJhY2V2KChzdGRlcnIsXCJcXG5nZW5fY29kZXM6IG1heF9jb2RlICVkIFwiLCBtYXhfY29kZSkpO1xuXG4gIGZvciAobiA9IDA7ICBuIDw9IG1heF9jb2RlOyBuKyspIHtcbiAgICBsZXQgbGVuID0gdHJlZVtuICogMiArIDFdLyouTGVuKi87XG4gICAgaWYgKGxlbiA9PT0gMCkgeyBjb250aW51ZTsgfVxuICAgIC8qIE5vdyByZXZlcnNlIHRoZSBiaXRzICovXG4gICAgdHJlZVtuICogMl0vKi5Db2RlKi8gPSBiaV9yZXZlcnNlKG5leHRfY29kZVtsZW5dKyssIGxlbik7XG5cbiAgICAvL1RyYWNlY3YodHJlZSAhPSBzdGF0aWNfbHRyZWUsIChzdGRlcnIsXCJcXG5uICUzZCAlYyBsICUyZCBjICU0eCAoJXgpIFwiLFxuICAgIC8vICAgICBuLCAoaXNncmFwaChuKSA/IG4gOiAnICcpLCBsZW4sIHRyZWVbbl0uQ29kZSwgbmV4dF9jb2RlW2xlbl0tMSkpO1xuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgdmFyaW91cyAnY29uc3RhbnQnIHRhYmxlcy5cbiAqL1xuY29uc3QgdHJfc3RhdGljX2luaXQgPSAoKSA9PiB7XG5cbiAgbGV0IG47ICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIHRyZWUgZWxlbWVudHMgKi9cbiAgbGV0IGJpdHM7ICAgICAvKiBiaXQgY291bnRlciAqL1xuICBsZXQgbGVuZ3RoOyAgIC8qIGxlbmd0aCB2YWx1ZSAqL1xuICBsZXQgY29kZTsgICAgIC8qIGNvZGUgdmFsdWUgKi9cbiAgbGV0IGRpc3Q7ICAgICAvKiBkaXN0YW5jZSBpbmRleCAqL1xuICBjb25zdCBibF9jb3VudCA9IG5ldyBBcnJheShNQVhfQklUUyQxICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vIGRvIGNoZWNrIGluIF90cl9pbml0KClcbiAgLy9pZiAoc3RhdGljX2luaXRfZG9uZSkgcmV0dXJuO1xuXG4gIC8qIEZvciBzb21lIGVtYmVkZGVkIHRhcmdldHMsIGdsb2JhbCB2YXJpYWJsZXMgYXJlIG5vdCBpbml0aWFsaXplZDogKi9cbi8qI2lmZGVmIE5PX0lOSVRfR0xPQkFMX1BPSU5URVJTXG4gIHN0YXRpY19sX2Rlc2Muc3RhdGljX3RyZWUgPSBzdGF0aWNfbHRyZWU7XG4gIHN0YXRpY19sX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2xiaXRzO1xuICBzdGF0aWNfZF9kZXNjLnN0YXRpY190cmVlID0gc3RhdGljX2R0cmVlO1xuICBzdGF0aWNfZF9kZXNjLmV4dHJhX2JpdHMgPSBleHRyYV9kYml0cztcbiAgc3RhdGljX2JsX2Rlc2MuZXh0cmFfYml0cyA9IGV4dHJhX2JsYml0cztcbiNlbmRpZiovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgbWFwcGluZyBsZW5ndGggKDAuLjI1NSkgLT4gbGVuZ3RoIGNvZGUgKDAuLjI4KSAqL1xuICBsZW5ndGggPSAwO1xuICBmb3IgKGNvZGUgPSAwOyBjb2RlIDwgTEVOR1RIX0NPREVTJDEgLSAxOyBjb2RlKyspIHtcbiAgICBiYXNlX2xlbmd0aFtjb2RlXSA9IGxlbmd0aDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfbGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9sZW5ndGhfY29kZVtsZW5ndGgrK10gPSBjb2RlO1xuICAgIH1cbiAgfVxuICAvL0Fzc2VydCAobGVuZ3RoID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogbGVuZ3RoICE9IDI1NlwiKTtcbiAgLyogTm90ZSB0aGF0IHRoZSBsZW5ndGggMjU1IChtYXRjaCBsZW5ndGggMjU4KSBjYW4gYmUgcmVwcmVzZW50ZWRcbiAgICogaW4gdHdvIGRpZmZlcmVudCB3YXlzOiBjb2RlIDI4NCArIDUgYml0cyBvciBjb2RlIDI4NSwgc28gd2VcbiAgICogb3ZlcndyaXRlIGxlbmd0aF9jb2RlWzI1NV0gdG8gdXNlIHRoZSBiZXN0IGVuY29kaW5nOlxuICAgKi9cbiAgX2xlbmd0aF9jb2RlW2xlbmd0aCAtIDFdID0gY29kZTtcblxuICAvKiBJbml0aWFsaXplIHRoZSBtYXBwaW5nIGRpc3QgKDAuLjMySykgLT4gZGlzdCBjb2RlICgwLi4yOSkgKi9cbiAgZGlzdCA9IDA7XG4gIGZvciAoY29kZSA9IDA7IGNvZGUgPCAxNjsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdDtcbiAgICBmb3IgKG4gPSAwOyBuIDwgKDEgPDwgZXh0cmFfZGJpdHNbY29kZV0pOyBuKyspIHtcbiAgICAgIF9kaXN0X2NvZGVbZGlzdCsrXSA9IGNvZGU7XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0IChkaXN0ID09IDI1NiwgXCJ0cl9zdGF0aWNfaW5pdDogZGlzdCAhPSAyNTZcIik7XG4gIGRpc3QgPj49IDc7IC8qIGZyb20gbm93IG9uLCBhbGwgZGlzdGFuY2VzIGFyZSBkaXZpZGVkIGJ5IDEyOCAqL1xuICBmb3IgKDsgY29kZSA8IERfQ09ERVMkMTsgY29kZSsrKSB7XG4gICAgYmFzZV9kaXN0W2NvZGVdID0gZGlzdCA8PCA3O1xuICAgIGZvciAobiA9IDA7IG4gPCAoMSA8PCAoZXh0cmFfZGJpdHNbY29kZV0gLSA3KSk7IG4rKykge1xuICAgICAgX2Rpc3RfY29kZVsyNTYgKyBkaXN0KytdID0gY29kZTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGRpc3QgPT0gMjU2LCBcInRyX3N0YXRpY19pbml0OiAyNTYrZGlzdCAhPSA1MTJcIik7XG5cbiAgLyogQ29uc3RydWN0IHRoZSBjb2RlcyBvZiB0aGUgc3RhdGljIGxpdGVyYWwgdHJlZSAqL1xuICBmb3IgKGJpdHMgPSAwOyBiaXRzIDw9IE1BWF9CSVRTJDE7IGJpdHMrKykge1xuICAgIGJsX2NvdW50W2JpdHNdID0gMDtcbiAgfVxuXG4gIG4gPSAwO1xuICB3aGlsZSAobiA8PSAxNDMpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNTUpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gOTtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOV0rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyNzkpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNztcbiAgICBuKys7XG4gICAgYmxfY291bnRbN10rKztcbiAgfVxuICB3aGlsZSAobiA8PSAyODcpIHtcbiAgICBzdGF0aWNfbHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gODtcbiAgICBuKys7XG4gICAgYmxfY291bnRbOF0rKztcbiAgfVxuICAvKiBDb2RlcyAyODYgYW5kIDI4NyBkbyBub3QgZXhpc3QsIGJ1dCB3ZSBtdXN0IGluY2x1ZGUgdGhlbSBpbiB0aGVcbiAgICogdHJlZSBjb25zdHJ1Y3Rpb24gdG8gZ2V0IGEgY2Fub25pY2FsIEh1ZmZtYW4gdHJlZSAobG9uZ2VzdCBjb2RlXG4gICAqIGFsbCBvbmVzKVxuICAgKi9cbiAgZ2VuX2NvZGVzKHN0YXRpY19sdHJlZSwgTF9DT0RFUyQxICsgMSwgYmxfY291bnQpO1xuXG4gIC8qIFRoZSBzdGF0aWMgZGlzdGFuY2UgdHJlZSBpcyB0cml2aWFsOiAqL1xuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUyQxOyBuKyspIHtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gNTtcbiAgICBzdGF0aWNfZHRyZWVbbiAqIDJdLyouQ29kZSovID0gYmlfcmV2ZXJzZShuLCA1KTtcbiAgfVxuXG4gIC8vIE5vdyBkYXRhIHJlYWR5IGFuZCB3ZSBjYW4gaW5pdCBzdGF0aWMgdHJlZXNcbiAgc3RhdGljX2xfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfbHRyZWUsIGV4dHJhX2xiaXRzLCBMSVRFUkFMUyQxICsgMSwgTF9DT0RFUyQxLCBNQVhfQklUUyQxKTtcbiAgc3RhdGljX2RfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhzdGF0aWNfZHRyZWUsIGV4dHJhX2RiaXRzLCAwLCAgICAgICAgICBEX0NPREVTJDEsIE1BWF9CSVRTJDEpO1xuICBzdGF0aWNfYmxfZGVzYyA9IG5ldyBTdGF0aWNUcmVlRGVzYyhuZXcgQXJyYXkoMCksIGV4dHJhX2JsYml0cywgMCwgICAgICAgICBCTF9DT0RFUyQxLCBNQVhfQkxfQklUUyk7XG5cbiAgLy9zdGF0aWNfaW5pdF9kb25lID0gdHJ1ZTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIGEgbmV3IGJsb2NrLlxuICovXG5jb25zdCBpbml0X2Jsb2NrID0gKHMpID0+IHtcblxuICBsZXQgbjsgLyogaXRlcmF0ZXMgb3ZlciB0cmVlIGVsZW1lbnRzICovXG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgdHJlZXMuICovXG4gIGZvciAobiA9IDA7IG4gPCBMX0NPREVTJDE7ICBuKyspIHsgcy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuICBmb3IgKG4gPSAwOyBuIDwgRF9DT0RFUyQxOyAgbisrKSB7IHMuZHluX2R0cmVlW24gKiAyXS8qLkZyZXEqLyA9IDA7IH1cbiAgZm9yIChuID0gMDsgbiA8IEJMX0NPREVTJDE7IG4rKykgeyBzLmJsX3RyZWVbbiAqIDJdLyouRnJlcSovID0gMDsgfVxuXG4gIHMuZHluX2x0cmVlW0VORF9CTE9DSyAqIDJdLyouRnJlcSovID0gMTtcbiAgcy5vcHRfbGVuID0gcy5zdGF0aWNfbGVuID0gMDtcbiAgcy5sYXN0X2xpdCA9IHMubWF0Y2hlcyA9IDA7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggdGhlIGJpdCBidWZmZXIgYW5kIGFsaWduIHRoZSBvdXRwdXQgb24gYSBieXRlIGJvdW5kYXJ5XG4gKi9cbmNvbnN0IGJpX3dpbmR1cCA9IChzKSA9Plxue1xuICBpZiAocy5iaV92YWxpZCA+IDgpIHtcbiAgICBwdXRfc2hvcnQocywgcy5iaV9idWYpO1xuICB9IGVsc2UgaWYgKHMuYmlfdmFsaWQgPiAwKSB7XG4gICAgLy9wdXRfYnl0ZShzLCAoQnl0ZSlzLT5iaV9idWYpO1xuICAgIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gcy5iaV9idWY7XG4gIH1cbiAgcy5iaV9idWYgPSAwO1xuICBzLmJpX3ZhbGlkID0gMDtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29weSBhIHN0b3JlZCBibG9jaywgc3RvcmluZyBmaXJzdCB0aGUgbGVuZ3RoIGFuZCBpdHNcbiAqIG9uZSdzIGNvbXBsZW1lbnQgaWYgcmVxdWVzdGVkLlxuICovXG5jb25zdCBjb3B5X2Jsb2NrID0gKHMsIGJ1ZiwgbGVuLCBoZWFkZXIpID0+XG4vL0RlZmxhdGVTdGF0ZSAqcztcbi8vY2hhcmYgICAgKmJ1ZjsgICAgLyogdGhlIGlucHV0IGRhdGEgKi9cbi8vdW5zaWduZWQgbGVuOyAgICAgLyogaXRzIGxlbmd0aCAqL1xuLy9pbnQgICAgICBoZWFkZXI7ICAvKiB0cnVlIGlmIGJsb2NrIGhlYWRlciBtdXN0IGJlIHdyaXR0ZW4gKi9cbntcbiAgYmlfd2luZHVwKHMpOyAgICAgICAgLyogYWxpZ24gb24gYnl0ZSBib3VuZGFyeSAqL1xuXG4gIGlmIChoZWFkZXIpIHtcbiAgICBwdXRfc2hvcnQocywgbGVuKTtcbiAgICBwdXRfc2hvcnQocywgfmxlbik7XG4gIH1cbi8vICB3aGlsZSAobGVuLS0pIHtcbi8vICAgIHB1dF9ieXRlKHMsICpidWYrKyk7XG4vLyAgfVxuICBzLnBlbmRpbmdfYnVmLnNldChzLndpbmRvdy5zdWJhcnJheShidWYsIGJ1ZiArIGxlbiksIHMucGVuZGluZyk7XG4gIHMucGVuZGluZyArPSBsZW47XG59O1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIENvbXBhcmVzIHRvIHN1YnRyZWVzLCB1c2luZyB0aGUgdHJlZSBkZXB0aCBhcyB0aWUgYnJlYWtlciB3aGVuXG4gKiB0aGUgc3VidHJlZXMgaGF2ZSBlcXVhbCBmcmVxdWVuY3kuIFRoaXMgbWluaW1pemVzIHRoZSB3b3JzdCBjYXNlIGxlbmd0aC5cbiAqL1xuY29uc3Qgc21hbGxlciA9ICh0cmVlLCBuLCBtLCBkZXB0aCkgPT4ge1xuXG4gIGNvbnN0IF9uMiA9IG4gKiAyO1xuICBjb25zdCBfbTIgPSBtICogMjtcbiAgcmV0dXJuICh0cmVlW19uMl0vKi5GcmVxKi8gPCB0cmVlW19tMl0vKi5GcmVxKi8gfHxcbiAgICAgICAgICh0cmVlW19uMl0vKi5GcmVxKi8gPT09IHRyZWVbX20yXS8qLkZyZXEqLyAmJiBkZXB0aFtuXSA8PSBkZXB0aFttXSkpO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBSZXN0b3JlIHRoZSBoZWFwIHByb3BlcnR5IGJ5IG1vdmluZyBkb3duIHRoZSB0cmVlIHN0YXJ0aW5nIGF0IG5vZGUgayxcbiAqIGV4Y2hhbmdpbmcgYSBub2RlIHdpdGggdGhlIHNtYWxsZXN0IG9mIGl0cyB0d28gc29ucyBpZiBuZWNlc3NhcnksIHN0b3BwaW5nXG4gKiB3aGVuIHRoZSBoZWFwIHByb3BlcnR5IGlzIHJlLWVzdGFibGlzaGVkIChlYWNoIGZhdGhlciBzbWFsbGVyIHRoYW4gaXRzXG4gKiB0d28gc29ucykuXG4gKi9cbmNvbnN0IHBxZG93bmhlYXAgPSAocywgdHJlZSwgaykgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAgLyogdGhlIHRyZWUgdG8gcmVzdG9yZSAqL1xuLy8gICAgaW50IGs7ICAgICAgICAgICAgICAgLyogbm9kZSB0byBtb3ZlIGRvd24gKi9cbntcbiAgY29uc3QgdiA9IHMuaGVhcFtrXTtcbiAgbGV0IGogPSBrIDw8IDE7ICAvKiBsZWZ0IHNvbiBvZiBrICovXG4gIHdoaWxlIChqIDw9IHMuaGVhcF9sZW4pIHtcbiAgICAvKiBTZXQgaiB0byB0aGUgc21hbGxlc3Qgb2YgdGhlIHR3byBzb25zOiAqL1xuICAgIGlmIChqIDwgcy5oZWFwX2xlbiAmJlxuICAgICAgc21hbGxlcih0cmVlLCBzLmhlYXBbaiArIDFdLCBzLmhlYXBbal0sIHMuZGVwdGgpKSB7XG4gICAgICBqKys7XG4gICAgfVxuICAgIC8qIEV4aXQgaWYgdiBpcyBzbWFsbGVyIHRoYW4gYm90aCBzb25zICovXG4gICAgaWYgKHNtYWxsZXIodHJlZSwgdiwgcy5oZWFwW2pdLCBzLmRlcHRoKSkgeyBicmVhazsgfVxuXG4gICAgLyogRXhjaGFuZ2UgdiB3aXRoIHRoZSBzbWFsbGVzdCBzb24gKi9cbiAgICBzLmhlYXBba10gPSBzLmhlYXBbal07XG4gICAgayA9IGo7XG5cbiAgICAvKiBBbmQgY29udGludWUgZG93biB0aGUgdHJlZSwgc2V0dGluZyBqIHRvIHRoZSBsZWZ0IHNvbiBvZiBrICovXG4gICAgaiA8PD0gMTtcbiAgfVxuICBzLmhlYXBba10gPSB2O1xufTtcblxuXG4vLyBpbmxpbmVkIG1hbnVhbGx5XG4vLyBjb25zdCBTTUFMTEVTVCA9IDE7XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgYmxvY2sgZGF0YSBjb21wcmVzc2VkIHVzaW5nIHRoZSBnaXZlbiBIdWZmbWFuIHRyZWVzXG4gKi9cbmNvbnN0IGNvbXByZXNzX2Jsb2NrID0gKHMsIGx0cmVlLCBkdHJlZSkgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjb25zdCBjdF9kYXRhICpsdHJlZTsgLyogbGl0ZXJhbCB0cmVlICovXG4vLyAgICBjb25zdCBjdF9kYXRhICpkdHJlZTsgLyogZGlzdGFuY2UgdHJlZSAqL1xue1xuICBsZXQgZGlzdDsgICAgICAgICAgIC8qIGRpc3RhbmNlIG9mIG1hdGNoZWQgc3RyaW5nICovXG4gIGxldCBsYzsgICAgICAgICAgICAgLyogbWF0Y2ggbGVuZ3RoIG9yIHVubWF0Y2hlZCBjaGFyIChpZiBkaXN0ID09IDApICovXG4gIGxldCBseCA9IDA7ICAgICAgICAgLyogcnVubmluZyBpbmRleCBpbiBsX2J1ZiAqL1xuICBsZXQgY29kZTsgICAgICAgICAgIC8qIHRoZSBjb2RlIHRvIHNlbmQgKi9cbiAgbGV0IGV4dHJhOyAgICAgICAgICAvKiBudW1iZXIgb2YgZXh0cmEgYml0cyB0byBzZW5kICovXG5cbiAgaWYgKHMubGFzdF9saXQgIT09IDApIHtcbiAgICBkbyB7XG4gICAgICBkaXN0ID0gKHMucGVuZGluZ19idWZbcy5kX2J1ZiArIGx4ICogMl0gPDwgOCkgfCAocy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgbHggKiAyICsgMV0pO1xuICAgICAgbGMgPSBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBseF07XG4gICAgICBseCsrO1xuXG4gICAgICBpZiAoZGlzdCA9PT0gMCkge1xuICAgICAgICBzZW5kX2NvZGUocywgbGMsIGx0cmVlKTsgLyogc2VuZCBhIGxpdGVyYWwgYnl0ZSAqL1xuICAgICAgICAvL1RyYWNlY3YoaXNncmFwaChsYyksIChzdGRlcnIsXCIgJyVjJyBcIiwgbGMpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICAgICAgY29kZSA9IF9sZW5ndGhfY29kZVtsY107XG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlICsgTElURVJBTFMkMSArIDEsIGx0cmVlKTsgLyogc2VuZCB0aGUgbGVuZ3RoIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9sYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgbGMgLT0gYmFzZV9sZW5ndGhbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGxjLCBleHRyYSk7ICAgICAgIC8qIHNlbmQgdGhlIGV4dHJhIGxlbmd0aCBiaXRzICovXG4gICAgICAgIH1cbiAgICAgICAgZGlzdC0tOyAvKiBkaXN0IGlzIG5vdyB0aGUgbWF0Y2ggZGlzdGFuY2UgLSAxICovXG4gICAgICAgIGNvZGUgPSBkX2NvZGUoZGlzdCk7XG4gICAgICAgIC8vQXNzZXJ0IChjb2RlIDwgRF9DT0RFUywgXCJiYWQgZF9jb2RlXCIpO1xuXG4gICAgICAgIHNlbmRfY29kZShzLCBjb2RlLCBkdHJlZSk7ICAgICAgIC8qIHNlbmQgdGhlIGRpc3RhbmNlIGNvZGUgKi9cbiAgICAgICAgZXh0cmEgPSBleHRyYV9kYml0c1tjb2RlXTtcbiAgICAgICAgaWYgKGV4dHJhICE9PSAwKSB7XG4gICAgICAgICAgZGlzdCAtPSBiYXNlX2Rpc3RbY29kZV07XG4gICAgICAgICAgc2VuZF9iaXRzKHMsIGRpc3QsIGV4dHJhKTsgICAvKiBzZW5kIHRoZSBleHRyYSBkaXN0YW5jZSBiaXRzICovXG4gICAgICAgIH1cbiAgICAgIH0gLyogbGl0ZXJhbCBvciBtYXRjaCBwYWlyID8gKi9cblxuICAgICAgLyogQ2hlY2sgdGhhdCB0aGUgb3ZlcmxheSBiZXR3ZWVuIHBlbmRpbmdfYnVmIGFuZCBkX2J1ZitsX2J1ZiBpcyBvazogKi9cbiAgICAgIC8vQXNzZXJ0KCh1SW50KShzLT5wZW5kaW5nKSA8IHMtPmxpdF9idWZzaXplICsgMipseCxcbiAgICAgIC8vICAgICAgIFwicGVuZGluZ0J1ZiBvdmVyZmxvd1wiKTtcblxuICAgIH0gd2hpbGUgKGx4IDwgcy5sYXN0X2xpdCk7XG4gIH1cblxuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBsdHJlZSk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IG9uZSBIdWZmbWFuIHRyZWUgYW5kIGFzc2lnbnMgdGhlIGNvZGUgYml0IHN0cmluZ3MgYW5kIGxlbmd0aHMuXG4gKiBVcGRhdGUgdGhlIHRvdGFsIGJpdCBsZW5ndGggZm9yIHRoZSBjdXJyZW50IGJsb2NrLlxuICogSU4gYXNzZXJ0aW9uOiB0aGUgZmllbGQgZnJlcSBpcyBzZXQgZm9yIGFsbCB0cmVlIGVsZW1lbnRzLlxuICogT1VUIGFzc2VydGlvbnM6IHRoZSBmaWVsZHMgbGVuIGFuZCBjb2RlIGFyZSBzZXQgdG8gdGhlIG9wdGltYWwgYml0IGxlbmd0aFxuICogICAgIGFuZCBjb3JyZXNwb25kaW5nIGNvZGUuIFRoZSBsZW5ndGggb3B0X2xlbiBpcyB1cGRhdGVkOyBzdGF0aWNfbGVuIGlzXG4gKiAgICAgYWxzbyB1cGRhdGVkIGlmIHN0cmVlIGlzIG5vdCBudWxsLiBUaGUgZmllbGQgbWF4X2NvZGUgaXMgc2V0LlxuICovXG5jb25zdCBidWlsZF90cmVlID0gKHMsIGRlc2MpID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgdHJlZV9kZXNjICpkZXNjOyAvKiB0aGUgdHJlZSBkZXNjcmlwdG9yICovXG57XG4gIGNvbnN0IHRyZWUgICAgID0gZGVzYy5keW5fdHJlZTtcbiAgY29uc3Qgc3RyZWUgICAgPSBkZXNjLnN0YXRfZGVzYy5zdGF0aWNfdHJlZTtcbiAgY29uc3QgaGFzX3N0cmVlID0gZGVzYy5zdGF0X2Rlc2MuaGFzX3N0cmVlO1xuICBjb25zdCBlbGVtcyAgICA9IGRlc2Muc3RhdF9kZXNjLmVsZW1zO1xuICBsZXQgbiwgbTsgICAgICAgICAgLyogaXRlcmF0ZSBvdmVyIGhlYXAgZWxlbWVudHMgKi9cbiAgbGV0IG1heF9jb2RlID0gLTE7IC8qIGxhcmdlc3QgY29kZSB3aXRoIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xuICBsZXQgbm9kZTsgICAgICAgICAgLyogbmV3IG5vZGUgYmVpbmcgY3JlYXRlZCAqL1xuXG4gIC8qIENvbnN0cnVjdCB0aGUgaW5pdGlhbCBoZWFwLCB3aXRoIGxlYXN0IGZyZXF1ZW50IGVsZW1lbnQgaW5cbiAgICogaGVhcFtTTUFMTEVTVF0uIFRoZSBzb25zIG9mIGhlYXBbbl0gYXJlIGhlYXBbMipuXSBhbmQgaGVhcFsyKm4rMV0uXG4gICAqIGhlYXBbMF0gaXMgbm90IHVzZWQuXG4gICAqL1xuICBzLmhlYXBfbGVuID0gMDtcbiAgcy5oZWFwX21heCA9IEhFQVBfU0laRSQxO1xuXG4gIGZvciAobiA9IDA7IG4gPCBlbGVtczsgbisrKSB7XG4gICAgaWYgKHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgICBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IG1heF9jb2RlID0gbjtcbiAgICAgIHMuZGVwdGhbbl0gPSAwO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHRyZWVbbiAqIDIgKyAxXS8qLkxlbiovID0gMDtcbiAgICB9XG4gIH1cblxuICAvKiBUaGUgcGt6aXAgZm9ybWF0IHJlcXVpcmVzIHRoYXQgYXQgbGVhc3Qgb25lIGRpc3RhbmNlIGNvZGUgZXhpc3RzLFxuICAgKiBhbmQgdGhhdCBhdCBsZWFzdCBvbmUgYml0IHNob3VsZCBiZSBzZW50IGV2ZW4gaWYgdGhlcmUgaXMgb25seSBvbmVcbiAgICogcG9zc2libGUgY29kZS4gU28gdG8gYXZvaWQgc3BlY2lhbCBjaGVja3MgbGF0ZXIgb24gd2UgZm9yY2UgYXQgbGVhc3RcbiAgICogdHdvIGNvZGVzIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeS5cbiAgICovXG4gIHdoaWxlIChzLmhlYXBfbGVuIDwgMikge1xuICAgIG5vZGUgPSBzLmhlYXBbKytzLmhlYXBfbGVuXSA9IChtYXhfY29kZSA8IDIgPyArK21heF9jb2RlIDogMCk7XG4gICAgdHJlZVtub2RlICogMl0vKi5GcmVxKi8gPSAxO1xuICAgIHMuZGVwdGhbbm9kZV0gPSAwO1xuICAgIHMub3B0X2xlbi0tO1xuXG4gICAgaWYgKGhhc19zdHJlZSkge1xuICAgICAgcy5zdGF0aWNfbGVuIC09IHN0cmVlW25vZGUgKiAyICsgMV0vKi5MZW4qLztcbiAgICB9XG4gICAgLyogbm9kZSBpcyAwIG9yIDEgc28gaXQgZG9lcyBub3QgaGF2ZSBleHRyYSBiaXRzICovXG4gIH1cbiAgZGVzYy5tYXhfY29kZSA9IG1heF9jb2RlO1xuXG4gIC8qIFRoZSBlbGVtZW50cyBoZWFwW2hlYXBfbGVuLzIrMSAuLiBoZWFwX2xlbl0gYXJlIGxlYXZlcyBvZiB0aGUgdHJlZSxcbiAgICogZXN0YWJsaXNoIHN1Yi1oZWFwcyBvZiBpbmNyZWFzaW5nIGxlbmd0aHM6XG4gICAqL1xuICBmb3IgKG4gPSAocy5oZWFwX2xlbiA+PiAxLyppbnQgLzIqLyk7IG4gPj0gMTsgbi0tKSB7IHBxZG93bmhlYXAocywgdHJlZSwgbik7IH1cblxuICAvKiBDb25zdHJ1Y3QgdGhlIEh1ZmZtYW4gdHJlZSBieSByZXBlYXRlZGx5IGNvbWJpbmluZyB0aGUgbGVhc3QgdHdvXG4gICAqIGZyZXF1ZW50IG5vZGVzLlxuICAgKi9cbiAgbm9kZSA9IGVsZW1zOyAgICAgICAgICAgICAgLyogbmV4dCBpbnRlcm5hbCBub2RlIG9mIHRoZSB0cmVlICovXG4gIGRvIHtcbiAgICAvL3BxcmVtb3ZlKHMsIHRyZWUsIG4pOyAgLyogbiA9IG5vZGUgb2YgbGVhc3QgZnJlcXVlbmN5ICovXG4gICAgLyoqKiBwcXJlbW92ZSAqKiovXG4gICAgbiA9IHMuaGVhcFsxLypTTUFMTEVTVCovXTtcbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBzLmhlYXBbcy5oZWFwX2xlbi0tXTtcbiAgICBwcWRvd25oZWFwKHMsIHRyZWUsIDEvKlNNQUxMRVNUKi8pO1xuICAgIC8qKiovXG5cbiAgICBtID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dOyAvKiBtID0gbm9kZSBvZiBuZXh0IGxlYXN0IGZyZXF1ZW5jeSAqL1xuXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBuOyAvKiBrZWVwIHRoZSBub2RlcyBzb3J0ZWQgYnkgZnJlcXVlbmN5ICovXG4gICAgcy5oZWFwWy0tcy5oZWFwX21heF0gPSBtO1xuXG4gICAgLyogQ3JlYXRlIGEgbmV3IG5vZGUgZmF0aGVyIG9mIG4gYW5kIG0gKi9cbiAgICB0cmVlW25vZGUgKiAyXS8qLkZyZXEqLyA9IHRyZWVbbiAqIDJdLyouRnJlcSovICsgdHJlZVttICogMl0vKi5GcmVxKi87XG4gICAgcy5kZXB0aFtub2RlXSA9IChzLmRlcHRoW25dID49IHMuZGVwdGhbbV0gPyBzLmRlcHRoW25dIDogcy5kZXB0aFttXSkgKyAxO1xuICAgIHRyZWVbbiAqIDIgKyAxXS8qLkRhZCovID0gdHJlZVttICogMiArIDFdLyouRGFkKi8gPSBub2RlO1xuXG4gICAgLyogYW5kIGluc2VydCB0aGUgbmV3IG5vZGUgaW4gdGhlIGhlYXAgKi9cbiAgICBzLmhlYXBbMS8qU01BTExFU1QqL10gPSBub2RlKys7XG4gICAgcHFkb3duaGVhcChzLCB0cmVlLCAxLypTTUFMTEVTVCovKTtcblxuICB9IHdoaWxlIChzLmhlYXBfbGVuID49IDIpO1xuXG4gIHMuaGVhcFstLXMuaGVhcF9tYXhdID0gcy5oZWFwWzEvKlNNQUxMRVNUKi9dO1xuXG4gIC8qIEF0IHRoaXMgcG9pbnQsIHRoZSBmaWVsZHMgZnJlcSBhbmQgZGFkIGFyZSBzZXQuIFdlIGNhbiBub3dcbiAgICogZ2VuZXJhdGUgdGhlIGJpdCBsZW5ndGhzLlxuICAgKi9cbiAgZ2VuX2JpdGxlbihzLCBkZXNjKTtcblxuICAvKiBUaGUgZmllbGQgbGVuIGlzIG5vdyBzZXQsIHdlIGNhbiBnZW5lcmF0ZSB0aGUgYml0IGNvZGVzICovXG4gIGdlbl9jb2Rlcyh0cmVlLCBtYXhfY29kZSwgcy5ibF9jb3VudCk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2NhbiBhIGxpdGVyYWwgb3IgZGlzdGFuY2UgdHJlZSB0byBkZXRlcm1pbmUgdGhlIGZyZXF1ZW5jaWVzIG9mIHRoZSBjb2Rlc1xuICogaW4gdGhlIGJpdCBsZW5ndGggdHJlZS5cbiAqL1xuY29uc3Qgc2Nhbl90cmVlID0gKHMsIHRyZWUsIG1heF9jb2RlKSA9PlxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIGN0X2RhdGEgKnRyZWU7ICAgLyogdGhlIHRyZWUgdG8gYmUgc2Nhbm5lZCAqL1xuLy8gICAgaW50IG1heF9jb2RlOyAgICAvKiBhbmQgaXRzIGxhcmdlc3QgY29kZSBvZiBub24gemVybyBmcmVxdWVuY3kgKi9cbntcbiAgbGV0IG47ICAgICAgICAgICAgICAgICAgICAgLyogaXRlcmF0ZXMgb3ZlciBhbGwgdHJlZSBlbGVtZW50cyAqL1xuICBsZXQgcHJldmxlbiA9IC0xOyAgICAgICAgICAvKiBsYXN0IGVtaXR0ZWQgbGVuZ3RoICovXG4gIGxldCBjdXJsZW47ICAgICAgICAgICAgICAgIC8qIGxlbmd0aCBvZiBjdXJyZW50IGNvZGUgKi9cblxuICBsZXQgbmV4dGxlbiA9IHRyZWVbMCAqIDIgKyAxXS8qLkxlbiovOyAvKiBsZW5ndGggb2YgbmV4dCBjb2RlICovXG5cbiAgbGV0IGNvdW50ID0gMDsgICAgICAgICAgICAgLyogcmVwZWF0IGNvdW50IG9mIHRoZSBjdXJyZW50IGNvZGUgKi9cbiAgbGV0IG1heF9jb3VudCA9IDc7ICAgICAgICAgLyogbWF4IHJlcGVhdCBjb3VudCAqL1xuICBsZXQgbWluX2NvdW50ID0gNDsgICAgICAgICAvKiBtaW4gcmVwZWF0IGNvdW50ICovXG5cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuICB0cmVlWyhtYXhfY29kZSArIDEpICogMiArIDFdLyouTGVuKi8gPSAweGZmZmY7IC8qIGd1YXJkICovXG5cbiAgZm9yIChuID0gMDsgbiA8PSBtYXhfY29kZTsgbisrKSB7XG4gICAgY3VybGVuID0gbmV4dGxlbjtcbiAgICBuZXh0bGVuID0gdHJlZVsobiArIDEpICogMiArIDFdLyouTGVuKi87XG5cbiAgICBpZiAoKytjb3VudCA8IG1heF9jb3VudCAmJiBjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIGNvbnRpbnVlO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8IG1pbl9jb3VudCkge1xuICAgICAgcy5ibF90cmVlW2N1cmxlbiAqIDJdLyouRnJlcSovICs9IGNvdW50O1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gIT09IDApIHtcblxuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikgeyBzLmJsX3RyZWVbY3VybGVuICogMl0vKi5GcmVxKi8rKzsgfVxuICAgICAgcy5ibF90cmVlW1JFUF8zXzYgKiAyXS8qLkZyZXEqLysrO1xuXG4gICAgfSBlbHNlIGlmIChjb3VudCA8PSAxMCkge1xuICAgICAgcy5ibF90cmVlW1JFUFpfM18xMCAqIDJdLyouRnJlcSovKys7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcy5ibF90cmVlW1JFUFpfMTFfMTM4ICogMl0vKi5GcmVxKi8rKztcbiAgICB9XG5cbiAgICBjb3VudCA9IDA7XG4gICAgcHJldmxlbiA9IGN1cmxlbjtcblxuICAgIGlmIChuZXh0bGVuID09PSAwKSB7XG4gICAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIGlmIChjdXJsZW4gPT09IG5leHRsZW4pIHtcbiAgICAgIG1heF9jb3VudCA9IDY7XG4gICAgICBtaW5fY291bnQgPSAzO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1heF9jb3VudCA9IDc7XG4gICAgICBtaW5fY291bnQgPSA0O1xuICAgIH1cbiAgfVxufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgYSBsaXRlcmFsIG9yIGRpc3RhbmNlIHRyZWUgaW4gY29tcHJlc3NlZCBmb3JtLCB1c2luZyB0aGUgY29kZXMgaW5cbiAqIGJsX3RyZWUuXG4gKi9cbmNvbnN0IHNlbmRfdHJlZSA9IChzLCB0cmVlLCBtYXhfY29kZSkgPT5cbi8vICAgIGRlZmxhdGVfc3RhdGUgKnM7XG4vLyAgICBjdF9kYXRhICp0cmVlOyAvKiB0aGUgdHJlZSB0byBiZSBzY2FubmVkICovXG4vLyAgICBpbnQgbWF4X2NvZGU7ICAgICAgIC8qIGFuZCBpdHMgbGFyZ2VzdCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXF1ZW5jeSAqL1xue1xuICBsZXQgbjsgICAgICAgICAgICAgICAgICAgICAvKiBpdGVyYXRlcyBvdmVyIGFsbCB0cmVlIGVsZW1lbnRzICovXG4gIGxldCBwcmV2bGVuID0gLTE7ICAgICAgICAgIC8qIGxhc3QgZW1pdHRlZCBsZW5ndGggKi9cbiAgbGV0IGN1cmxlbjsgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgY29kZSAqL1xuXG4gIGxldCBuZXh0bGVuID0gdHJlZVswICogMiArIDFdLyouTGVuKi87IC8qIGxlbmd0aCBvZiBuZXh0IGNvZGUgKi9cblxuICBsZXQgY291bnQgPSAwOyAgICAgICAgICAgICAvKiByZXBlYXQgY291bnQgb2YgdGhlIGN1cnJlbnQgY29kZSAqL1xuICBsZXQgbWF4X2NvdW50ID0gNzsgICAgICAgICAvKiBtYXggcmVwZWF0IGNvdW50ICovXG4gIGxldCBtaW5fY291bnQgPSA0OyAgICAgICAgIC8qIG1pbiByZXBlYXQgY291bnQgKi9cblxuICAvKiB0cmVlW21heF9jb2RlKzFdLkxlbiA9IC0xOyAqLyAgLyogZ3VhcmQgYWxyZWFkeSBzZXQgKi9cbiAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICBtYXhfY291bnQgPSAxMzg7XG4gICAgbWluX2NvdW50ID0gMztcbiAgfVxuXG4gIGZvciAobiA9IDA7IG4gPD0gbWF4X2NvZGU7IG4rKykge1xuICAgIGN1cmxlbiA9IG5leHRsZW47XG4gICAgbmV4dGxlbiA9IHRyZWVbKG4gKyAxKSAqIDIgKyAxXS8qLkxlbiovO1xuXG4gICAgaWYgKCsrY291bnQgPCBtYXhfY291bnQgJiYgY3VybGVuID09PSBuZXh0bGVuKSB7XG4gICAgICBjb250aW51ZTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPCBtaW5fY291bnQpIHtcbiAgICAgIGRvIHsgc2VuZF9jb2RlKHMsIGN1cmxlbiwgcy5ibF90cmVlKTsgfSB3aGlsZSAoLS1jb3VudCAhPT0gMCk7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiAhPT0gMCkge1xuICAgICAgaWYgKGN1cmxlbiAhPT0gcHJldmxlbikge1xuICAgICAgICBzZW5kX2NvZGUocywgY3VybGVuLCBzLmJsX3RyZWUpO1xuICAgICAgICBjb3VudC0tO1xuICAgICAgfVxuICAgICAgLy9Bc3NlcnQoY291bnQgPj0gMyAmJiBjb3VudCA8PSA2LCBcIiAzXzY/XCIpO1xuICAgICAgc2VuZF9jb2RlKHMsIFJFUF8zXzYsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAyKTtcblxuICAgIH0gZWxzZSBpZiAoY291bnQgPD0gMTApIHtcbiAgICAgIHNlbmRfY29kZShzLCBSRVBaXzNfMTAsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAzLCAzKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICBzZW5kX2NvZGUocywgUkVQWl8xMV8xMzgsIHMuYmxfdHJlZSk7XG4gICAgICBzZW5kX2JpdHMocywgY291bnQgLSAxMSwgNyk7XG4gICAgfVxuXG4gICAgY291bnQgPSAwO1xuICAgIHByZXZsZW4gPSBjdXJsZW47XG4gICAgaWYgKG5leHRsZW4gPT09IDApIHtcbiAgICAgIG1heF9jb3VudCA9IDEzODtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2UgaWYgKGN1cmxlbiA9PT0gbmV4dGxlbikge1xuICAgICAgbWF4X2NvdW50ID0gNjtcbiAgICAgIG1pbl9jb3VudCA9IDM7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgbWF4X2NvdW50ID0gNztcbiAgICAgIG1pbl9jb3VudCA9IDQ7XG4gICAgfVxuICB9XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29uc3RydWN0IHRoZSBIdWZmbWFuIHRyZWUgZm9yIHRoZSBiaXQgbGVuZ3RocyBhbmQgcmV0dXJuIHRoZSBpbmRleCBpblxuICogYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gKi9cbmNvbnN0IGJ1aWxkX2JsX3RyZWUgPSAocykgPT4ge1xuXG4gIGxldCBtYXhfYmxpbmRleDsgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBEZXRlcm1pbmUgdGhlIGJpdCBsZW5ndGggZnJlcXVlbmNpZXMgZm9yIGxpdGVyYWwgYW5kIGRpc3RhbmNlIHRyZWVzICovXG4gIHNjYW5fdHJlZShzLCBzLmR5bl9sdHJlZSwgcy5sX2Rlc2MubWF4X2NvZGUpO1xuICBzY2FuX3RyZWUocywgcy5keW5fZHRyZWUsIHMuZF9kZXNjLm1heF9jb2RlKTtcblxuICAvKiBCdWlsZCB0aGUgYml0IGxlbmd0aCB0cmVlOiAqL1xuICBidWlsZF90cmVlKHMsIHMuYmxfZGVzYyk7XG4gIC8qIG9wdF9sZW4gbm93IGluY2x1ZGVzIHRoZSBsZW5ndGggb2YgdGhlIHRyZWUgcmVwcmVzZW50YXRpb25zLCBleGNlcHRcbiAgICogdGhlIGxlbmd0aHMgb2YgdGhlIGJpdCBsZW5ndGhzIGNvZGVzIGFuZCB0aGUgNSs1KzQgYml0cyBmb3IgdGhlIGNvdW50cy5cbiAgICovXG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBudW1iZXIgb2YgYml0IGxlbmd0aCBjb2RlcyB0byBzZW5kLiBUaGUgcGt6aXAgZm9ybWF0XG4gICAqIHJlcXVpcmVzIHRoYXQgYXQgbGVhc3QgNCBiaXQgbGVuZ3RoIGNvZGVzIGJlIHNlbnQuIChhcHBub3RlLnR4dCBzYXlzXG4gICAqIDMgYnV0IHRoZSBhY3R1YWwgdmFsdWUgdXNlZCBpcyA0LilcbiAgICovXG4gIGZvciAobWF4X2JsaW5kZXggPSBCTF9DT0RFUyQxIC0gMTsgbWF4X2JsaW5kZXggPj0gMzsgbWF4X2JsaW5kZXgtLSkge1xuICAgIGlmIChzLmJsX3RyZWVbYmxfb3JkZXJbbWF4X2JsaW5kZXhdICogMiArIDFdLyouTGVuKi8gIT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICAvKiBVcGRhdGUgb3B0X2xlbiB0byBpbmNsdWRlIHRoZSBiaXQgbGVuZ3RoIHRyZWUgYW5kIGNvdW50cyAqL1xuICBzLm9wdF9sZW4gKz0gMyAqIChtYXhfYmxpbmRleCArIDEpICsgNSArIDUgKyA0O1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmR5biB0cmVlczogZHluICVsZCwgc3RhdCAlbGRcIixcbiAgLy8gICAgICAgIHMtPm9wdF9sZW4sIHMtPnN0YXRpY19sZW4pKTtcblxuICByZXR1cm4gbWF4X2JsaW5kZXg7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCB0aGUgaGVhZGVyIGZvciBhIGJsb2NrIHVzaW5nIGR5bmFtaWMgSHVmZm1hbiB0cmVlczogdGhlIGNvdW50cywgdGhlXG4gKiBsZW5ndGhzIG9mIHRoZSBiaXQgbGVuZ3RoIGNvZGVzLCB0aGUgbGl0ZXJhbCB0cmVlIGFuZCB0aGUgZGlzdGFuY2UgdHJlZS5cbiAqIElOIGFzc2VydGlvbjogbGNvZGVzID49IDI1NywgZGNvZGVzID49IDEsIGJsY29kZXMgPj0gNC5cbiAqL1xuY29uc3Qgc2VuZF9hbGxfdHJlZXMgPSAocywgbGNvZGVzLCBkY29kZXMsIGJsY29kZXMpID0+XG4vLyAgICBkZWZsYXRlX3N0YXRlICpzO1xuLy8gICAgaW50IGxjb2RlcywgZGNvZGVzLCBibGNvZGVzOyAvKiBudW1iZXIgb2YgY29kZXMgZm9yIGVhY2ggdHJlZSAqL1xue1xuICBsZXQgcmFuazsgICAgICAgICAgICAgICAgICAgIC8qIGluZGV4IGluIGJsX29yZGVyICovXG5cbiAgLy9Bc3NlcnQgKGxjb2RlcyA+PSAyNTcgJiYgZGNvZGVzID49IDEgJiYgYmxjb2RlcyA+PSA0LCBcIm5vdCBlbm91Z2ggY29kZXNcIik7XG4gIC8vQXNzZXJ0IChsY29kZXMgPD0gTF9DT0RFUyAmJiBkY29kZXMgPD0gRF9DT0RFUyAmJiBibGNvZGVzIDw9IEJMX0NPREVTLFxuICAvLyAgICAgICAgXCJ0b28gbWFueSBjb2Rlc1wiKTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCBjb3VudHM6IFwiKSk7XG4gIHNlbmRfYml0cyhzLCBsY29kZXMgLSAyNTcsIDUpOyAvKiBub3QgKzI1NSBhcyBzdGF0ZWQgaW4gYXBwbm90ZS50eHQgKi9cbiAgc2VuZF9iaXRzKHMsIGRjb2RlcyAtIDEsICAgNSk7XG4gIHNlbmRfYml0cyhzLCBibGNvZGVzIC0gNCwgIDQpOyAvKiBub3QgLTMgYXMgc3RhdGVkIGluIGFwcG5vdGUudHh0ICovXG4gIGZvciAocmFuayA9IDA7IHJhbmsgPCBibGNvZGVzOyByYW5rKyspIHtcbiAgICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmJsIGNvZGUgJTJkIFwiLCBibF9vcmRlcltyYW5rXSkpO1xuICAgIHNlbmRfYml0cyhzLCBzLmJsX3RyZWVbYmxfb3JkZXJbcmFua10gKiAyICsgMV0vKi5MZW4qLywgMyk7XG4gIH1cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5ibCB0cmVlOiBzZW50ICVsZFwiLCBzLT5iaXRzX3NlbnQpKTtcblxuICBzZW5kX3RyZWUocywgcy5keW5fbHRyZWUsIGxjb2RlcyAtIDEpOyAvKiBsaXRlcmFsIHRyZWUgKi9cbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG5cbiAgc2VuZF90cmVlKHMsIHMuZHluX2R0cmVlLCBkY29kZXMgLSAxKTsgLyogZGlzdGFuY2UgdHJlZSAqL1xuICAvL1RyYWNldigoc3RkZXJyLCBcIlxcbmRpc3QgdHJlZTogc2VudCAlbGRcIiwgcy0+Yml0c19zZW50KSk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ2hlY2sgaWYgdGhlIGRhdGEgdHlwZSBpcyBURVhUIG9yIEJJTkFSWSwgdXNpbmcgdGhlIGZvbGxvd2luZyBhbGdvcml0aG06XG4gKiAtIFRFWFQgaWYgdGhlIHR3byBjb25kaXRpb25zIGJlbG93IGFyZSBzYXRpc2ZpZWQ6XG4gKiAgICBhKSBUaGVyZSBhcmUgbm8gbm9uLXBvcnRhYmxlIGNvbnRyb2wgY2hhcmFjdGVycyBiZWxvbmdpbmcgdG8gdGhlXG4gKiAgICAgICBcImJsYWNrIGxpc3RcIiAoMC4uNiwgMTQuLjI1LCAyOC4uMzEpLlxuICogICAgYikgVGhlcmUgaXMgYXQgbGVhc3Qgb25lIHByaW50YWJsZSBjaGFyYWN0ZXIgYmVsb25naW5nIHRvIHRoZVxuICogICAgICAgXCJ3aGl0ZSBsaXN0XCIgKDkge1RBQn0sIDEwIHtMRn0sIDEzIHtDUn0sIDMyLi4yNTUpLlxuICogLSBCSU5BUlkgb3RoZXJ3aXNlLlxuICogLSBUaGUgZm9sbG93aW5nIHBhcnRpYWxseS1wb3J0YWJsZSBjb250cm9sIGNoYXJhY3RlcnMgZm9ybSBhXG4gKiAgIFwiZ3JheSBsaXN0XCIgdGhhdCBpcyBpZ25vcmVkIGluIHRoaXMgZGV0ZWN0aW9uIGFsZ29yaXRobTpcbiAqICAgKDcge0JFTH0sIDgge0JTfSwgMTEge1ZUfSwgMTIge0ZGfSwgMjYge1NVQn0sIDI3IHtFU0N9KS5cbiAqIElOIGFzc2VydGlvbjogdGhlIGZpZWxkcyBGcmVxIG9mIGR5bl9sdHJlZSBhcmUgc2V0LlxuICovXG5jb25zdCBkZXRlY3RfZGF0YV90eXBlID0gKHMpID0+IHtcbiAgLyogYmxhY2tfbWFzayBpcyB0aGUgYml0IG1hc2sgb2YgYmxhY2stbGlzdGVkIGJ5dGVzXG4gICAqIHNldCBiaXRzIDAuLjYsIDE0Li4yNSwgYW5kIDI4Li4zMVxuICAgKiAweGYzZmZjMDdmID0gYmluYXJ5IDExMTEwMDExMTExMTExMTExMTAwMDAwMDAxMTExMTExXG4gICAqL1xuICBsZXQgYmxhY2tfbWFzayA9IDB4ZjNmZmMwN2Y7XG4gIGxldCBuO1xuXG4gIC8qIENoZWNrIGZvciBub24tdGV4dHVhbCAoXCJibGFjay1saXN0ZWRcIikgYnl0ZXMuICovXG4gIGZvciAobiA9IDA7IG4gPD0gMzE7IG4rKywgYmxhY2tfbWFzayA+Pj49IDEpIHtcbiAgICBpZiAoKGJsYWNrX21hc2sgJiAxKSAmJiAocy5keW5fbHRyZWVbbiAqIDJdLyouRnJlcSovICE9PSAwKSkge1xuICAgICAgcmV0dXJuIFpfQklOQVJZO1xuICAgIH1cbiAgfVxuXG4gIC8qIENoZWNrIGZvciB0ZXh0dWFsIChcIndoaXRlLWxpc3RlZFwiKSBieXRlcy4gKi9cbiAgaWYgKHMuZHluX2x0cmVlWzkgKiAyXS8qLkZyZXEqLyAhPT0gMCB8fCBzLmR5bl9sdHJlZVsxMCAqIDJdLyouRnJlcSovICE9PSAwIHx8XG4gICAgICBzLmR5bl9sdHJlZVsxMyAqIDJdLyouRnJlcSovICE9PSAwKSB7XG4gICAgcmV0dXJuIFpfVEVYVDtcbiAgfVxuICBmb3IgKG4gPSAzMjsgbiA8IExJVEVSQUxTJDE7IG4rKykge1xuICAgIGlmIChzLmR5bl9sdHJlZVtuICogMl0vKi5GcmVxKi8gIT09IDApIHtcbiAgICAgIHJldHVybiBaX1RFWFQ7XG4gICAgfVxuICB9XG5cbiAgLyogVGhlcmUgYXJlIG5vIFwiYmxhY2stbGlzdGVkXCIgb3IgXCJ3aGl0ZS1saXN0ZWRcIiBieXRlczpcbiAgICogdGhpcyBzdHJlYW0gZWl0aGVyIGlzIGVtcHR5IG9yIGhhcyB0b2xlcmF0ZWQgKFwiZ3JheS1saXN0ZWRcIikgYnl0ZXMgb25seS5cbiAgICovXG4gIHJldHVybiBaX0JJTkFSWTtcbn07XG5cblxubGV0IHN0YXRpY19pbml0X2RvbmUgPSBmYWxzZTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplIHRoZSB0cmVlIGRhdGEgc3RydWN0dXJlcyBmb3IgYSBuZXcgemxpYiBzdHJlYW0uXG4gKi9cbmNvbnN0IF90cl9pbml0JDEgPSAocykgPT5cbntcblxuICBpZiAoIXN0YXRpY19pbml0X2RvbmUpIHtcbiAgICB0cl9zdGF0aWNfaW5pdCgpO1xuICAgIHN0YXRpY19pbml0X2RvbmUgPSB0cnVlO1xuICB9XG5cbiAgcy5sX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2x0cmVlLCBzdGF0aWNfbF9kZXNjKTtcbiAgcy5kX2Rlc2MgID0gbmV3IFRyZWVEZXNjKHMuZHluX2R0cmVlLCBzdGF0aWNfZF9kZXNjKTtcbiAgcy5ibF9kZXNjID0gbmV3IFRyZWVEZXNjKHMuYmxfdHJlZSwgc3RhdGljX2JsX2Rlc2MpO1xuXG4gIHMuYmlfYnVmID0gMDtcbiAgcy5iaV92YWxpZCA9IDA7XG5cbiAgLyogSW5pdGlhbGl6ZSB0aGUgZmlyc3QgYmxvY2sgb2YgdGhlIGZpcnN0IGZpbGU6ICovXG4gIGluaXRfYmxvY2socyk7XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2VuZCBhIHN0b3JlZCBibG9ja1xuICovXG5jb25zdCBfdHJfc3RvcmVkX2Jsb2NrJDEgPSAocywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KSA9PlxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrICovXG4vL3VsZyBzdG9yZWRfbGVuOyAgIC8qIGxlbmd0aCBvZiBpbnB1dCBibG9jayAqL1xuLy9pbnQgbGFzdDsgICAgICAgICAvKiBvbmUgaWYgdGhpcyBpcyB0aGUgbGFzdCBibG9jayBmb3IgYSBmaWxlICovXG57XG4gIHNlbmRfYml0cyhzLCAoU1RPUkVEX0JMT0NLIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpOyAgICAvKiBzZW5kIGJsb2NrIHR5cGUgKi9cbiAgY29weV9ibG9jayhzLCBidWYsIHN0b3JlZF9sZW4sIHRydWUpOyAvKiB3aXRoIGhlYWRlciAqL1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFNlbmQgb25lIGVtcHR5IHN0YXRpYyBibG9jayB0byBnaXZlIGVub3VnaCBsb29rYWhlYWQgZm9yIGluZmxhdGUuXG4gKiBUaGlzIHRha2VzIDEwIGJpdHMsIG9mIHdoaWNoIDcgbWF5IHJlbWFpbiBpbiB0aGUgYml0IGJ1ZmZlci5cbiAqL1xuY29uc3QgX3RyX2FsaWduJDEgPSAocykgPT4ge1xuICBzZW5kX2JpdHMocywgU1RBVElDX1RSRUVTIDw8IDEsIDMpO1xuICBzZW5kX2NvZGUocywgRU5EX0JMT0NLLCBzdGF0aWNfbHRyZWUpO1xuICBiaV9mbHVzaChzKTtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBEZXRlcm1pbmUgdGhlIGJlc3QgZW5jb2RpbmcgZm9yIHRoZSBjdXJyZW50IGJsb2NrOiBkeW5hbWljIHRyZWVzLCBzdGF0aWNcbiAqIHRyZWVzIG9yIHN0b3JlLCBhbmQgb3V0cHV0IHRoZSBlbmNvZGVkIGJsb2NrIHRvIHRoZSB6aXAgZmlsZS5cbiAqL1xuY29uc3QgX3RyX2ZsdXNoX2Jsb2NrJDEgPSAocywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KSA9PlxuLy9EZWZsYXRlU3RhdGUgKnM7XG4vL2NoYXJmICpidWY7ICAgICAgIC8qIGlucHV0IGJsb2NrLCBvciBOVUxMIGlmIHRvbyBvbGQgKi9cbi8vdWxnIHN0b3JlZF9sZW47ICAgLyogbGVuZ3RoIG9mIGlucHV0IGJsb2NrICovXG4vL2ludCBsYXN0OyAgICAgICAgIC8qIG9uZSBpZiB0aGlzIGlzIHRoZSBsYXN0IGJsb2NrIGZvciBhIGZpbGUgKi9cbntcbiAgbGV0IG9wdF9sZW5iLCBzdGF0aWNfbGVuYjsgIC8qIG9wdF9sZW4gYW5kIHN0YXRpY19sZW4gaW4gYnl0ZXMgKi9cbiAgbGV0IG1heF9ibGluZGV4ID0gMDsgICAgICAgIC8qIGluZGV4IG9mIGxhc3QgYml0IGxlbmd0aCBjb2RlIG9mIG5vbiB6ZXJvIGZyZXEgKi9cblxuICAvKiBCdWlsZCB0aGUgSHVmZm1hbiB0cmVlcyB1bmxlc3MgYSBzdG9yZWQgYmxvY2sgaXMgZm9yY2VkICovXG4gIGlmIChzLmxldmVsID4gMCkge1xuXG4gICAgLyogQ2hlY2sgaWYgdGhlIGZpbGUgaXMgYmluYXJ5IG9yIHRleHQgKi9cbiAgICBpZiAocy5zdHJtLmRhdGFfdHlwZSA9PT0gWl9VTktOT1dOJDEpIHtcbiAgICAgIHMuc3RybS5kYXRhX3R5cGUgPSBkZXRlY3RfZGF0YV90eXBlKHMpO1xuICAgIH1cblxuICAgIC8qIENvbnN0cnVjdCB0aGUgbGl0ZXJhbCBhbmQgZGlzdGFuY2UgdHJlZXMgKi9cbiAgICBidWlsZF90cmVlKHMsIHMubF9kZXNjKTtcbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5saXQgZGF0YTogZHluICVsZCwgc3RhdCAlbGRcIiwgcy0+b3B0X2xlbixcbiAgICAvLyAgICAgICAgcy0+c3RhdGljX2xlbikpO1xuXG4gICAgYnVpbGRfdHJlZShzLCBzLmRfZGVzYyk7XG4gICAgLy8gVHJhY2V2KChzdGRlcnIsIFwiXFxuZGlzdCBkYXRhOiBkeW4gJWxkLCBzdGF0ICVsZFwiLCBzLT5vcHRfbGVuLFxuICAgIC8vICAgICAgICBzLT5zdGF0aWNfbGVuKSk7XG4gICAgLyogQXQgdGhpcyBwb2ludCwgb3B0X2xlbiBhbmQgc3RhdGljX2xlbiBhcmUgdGhlIHRvdGFsIGJpdCBsZW5ndGhzIG9mXG4gICAgICogdGhlIGNvbXByZXNzZWQgYmxvY2sgZGF0YSwgZXhjbHVkaW5nIHRoZSB0cmVlIHJlcHJlc2VudGF0aW9ucy5cbiAgICAgKi9cblxuICAgIC8qIEJ1aWxkIHRoZSBiaXQgbGVuZ3RoIHRyZWUgZm9yIHRoZSBhYm92ZSB0d28gdHJlZXMsIGFuZCBnZXQgdGhlIGluZGV4XG4gICAgICogaW4gYmxfb3JkZXIgb2YgdGhlIGxhc3QgYml0IGxlbmd0aCBjb2RlIHRvIHNlbmQuXG4gICAgICovXG4gICAgbWF4X2JsaW5kZXggPSBidWlsZF9ibF90cmVlKHMpO1xuXG4gICAgLyogRGV0ZXJtaW5lIHRoZSBiZXN0IGVuY29kaW5nLiBDb21wdXRlIHRoZSBibG9jayBsZW5ndGhzIGluIGJ5dGVzLiAqL1xuICAgIG9wdF9sZW5iID0gKHMub3B0X2xlbiArIDMgKyA3KSA+Pj4gMztcbiAgICBzdGF0aWNfbGVuYiA9IChzLnN0YXRpY19sZW4gKyAzICsgNykgPj4+IDM7XG5cbiAgICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJcXG5vcHQgJWx1KCVsdSkgc3RhdCAlbHUoJWx1KSBzdG9yZWQgJWx1IGxpdCAldSBcIixcbiAgICAvLyAgICAgICAgb3B0X2xlbmIsIHMtPm9wdF9sZW4sIHN0YXRpY19sZW5iLCBzLT5zdGF0aWNfbGVuLCBzdG9yZWRfbGVuLFxuICAgIC8vICAgICAgICBzLT5sYXN0X2xpdCkpO1xuXG4gICAgaWYgKHN0YXRpY19sZW5iIDw9IG9wdF9sZW5iKSB7IG9wdF9sZW5iID0gc3RhdGljX2xlbmI7IH1cblxuICB9IGVsc2Uge1xuICAgIC8vIEFzc2VydChidWYgIT0gKGNoYXIqKTAsIFwibG9zdCBidWZcIik7XG4gICAgb3B0X2xlbmIgPSBzdGF0aWNfbGVuYiA9IHN0b3JlZF9sZW4gKyA1OyAvKiBmb3JjZSBhIHN0b3JlZCBibG9jayAqL1xuICB9XG5cbiAgaWYgKChzdG9yZWRfbGVuICsgNCA8PSBvcHRfbGVuYikgJiYgKGJ1ZiAhPT0gLTEpKSB7XG4gICAgLyogNDogdHdvIHdvcmRzIGZvciB0aGUgbGVuZ3RocyAqL1xuXG4gICAgLyogVGhlIHRlc3QgYnVmICE9IE5VTEwgaXMgb25seSBuZWNlc3NhcnkgaWYgTElUX0JVRlNJWkUgPiBXU0laRS5cbiAgICAgKiBPdGhlcndpc2Ugd2UgY2FuJ3QgaGF2ZSBwcm9jZXNzZWQgbW9yZSB0aGFuIFdTSVpFIGlucHV0IGJ5dGVzIHNpbmNlXG4gICAgICogdGhlIGxhc3QgYmxvY2sgZmx1c2gsIGJlY2F1c2UgY29tcHJlc3Npb24gd291bGQgaGF2ZSBiZWVuXG4gICAgICogc3VjY2Vzc2Z1bC4gSWYgTElUX0JVRlNJWkUgPD0gV1NJWkUsIGl0IGlzIG5ldmVyIHRvbyBsYXRlIHRvXG4gICAgICogdHJhbnNmb3JtIGEgYmxvY2sgaW50byBhIHN0b3JlZCBibG9jay5cbiAgICAgKi9cbiAgICBfdHJfc3RvcmVkX2Jsb2NrJDEocywgYnVmLCBzdG9yZWRfbGVuLCBsYXN0KTtcblxuICB9IGVsc2UgaWYgKHMuc3RyYXRlZ3kgPT09IFpfRklYRUQkMSB8fCBzdGF0aWNfbGVuYiA9PT0gb3B0X2xlbmIpIHtcblxuICAgIHNlbmRfYml0cyhzLCAoU1RBVElDX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHN0YXRpY19sdHJlZSwgc3RhdGljX2R0cmVlKTtcblxuICB9IGVsc2Uge1xuICAgIHNlbmRfYml0cyhzLCAoRFlOX1RSRUVTIDw8IDEpICsgKGxhc3QgPyAxIDogMCksIDMpO1xuICAgIHNlbmRfYWxsX3RyZWVzKHMsIHMubF9kZXNjLm1heF9jb2RlICsgMSwgcy5kX2Rlc2MubWF4X2NvZGUgKyAxLCBtYXhfYmxpbmRleCArIDEpO1xuICAgIGNvbXByZXNzX2Jsb2NrKHMsIHMuZHluX2x0cmVlLCBzLmR5bl9kdHJlZSk7XG4gIH1cbiAgLy8gQXNzZXJ0IChzLT5jb21wcmVzc2VkX2xlbiA9PSBzLT5iaXRzX3NlbnQsIFwiYmFkIGNvbXByZXNzZWQgc2l6ZVwiKTtcbiAgLyogVGhlIGFib3ZlIGNoZWNrIGlzIG1hZGUgbW9kIDJeMzIsIGZvciBmaWxlcyBsYXJnZXIgdGhhbiA1MTIgTUJcbiAgICogYW5kIHVMb25nIGltcGxlbWVudGVkIG9uIDMyIGJpdHMuXG4gICAqL1xuICBpbml0X2Jsb2NrKHMpO1xuXG4gIGlmIChsYXN0KSB7XG4gICAgYmlfd2luZHVwKHMpO1xuICB9XG4gIC8vIFRyYWNldigoc3RkZXJyLFwiXFxuY29tcHJsZW4gJWx1KCVsdSkgXCIsIHMtPmNvbXByZXNzZWRfbGVuPj4zLFxuICAvLyAgICAgICBzLT5jb21wcmVzc2VkX2xlbi03Kmxhc3QpKTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2F2ZSB0aGUgbWF0Y2ggaW5mbyBhbmQgdGFsbHkgdGhlIGZyZXF1ZW5jeSBjb3VudHMuIFJldHVybiB0cnVlIGlmXG4gKiB0aGUgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQuXG4gKi9cbmNvbnN0IF90cl90YWxseSQxID0gKHMsIGRpc3QsIGxjKSA9PlxuLy8gICAgZGVmbGF0ZV9zdGF0ZSAqcztcbi8vICAgIHVuc2lnbmVkIGRpc3Q7ICAvKiBkaXN0YW5jZSBvZiBtYXRjaGVkIHN0cmluZyAqL1xuLy8gICAgdW5zaWduZWQgbGM7ICAgIC8qIG1hdGNoIGxlbmd0aC1NSU5fTUFUQ0ggb3IgdW5tYXRjaGVkIGNoYXIgKGlmIGRpc3Q9PTApICovXG57XG4gIC8vbGV0IG91dF9sZW5ndGgsIGluX2xlbmd0aCwgZGNvZGU7XG5cbiAgcy5wZW5kaW5nX2J1ZltzLmRfYnVmICsgcy5sYXN0X2xpdCAqIDJdICAgICA9IChkaXN0ID4+PiA4KSAmIDB4ZmY7XG4gIHMucGVuZGluZ19idWZbcy5kX2J1ZiArIHMubGFzdF9saXQgKiAyICsgMV0gPSBkaXN0ICYgMHhmZjtcblxuICBzLnBlbmRpbmdfYnVmW3MubF9idWYgKyBzLmxhc3RfbGl0XSA9IGxjICYgMHhmZjtcbiAgcy5sYXN0X2xpdCsrO1xuXG4gIGlmIChkaXN0ID09PSAwKSB7XG4gICAgLyogbGMgaXMgdGhlIHVubWF0Y2hlZCBjaGFyICovXG4gICAgcy5keW5fbHRyZWVbbGMgKiAyXS8qLkZyZXEqLysrO1xuICB9IGVsc2Uge1xuICAgIHMubWF0Y2hlcysrO1xuICAgIC8qIEhlcmUsIGxjIGlzIHRoZSBtYXRjaCBsZW5ndGggLSBNSU5fTUFUQ0ggKi9cbiAgICBkaXN0LS07ICAgICAgICAgICAgIC8qIGRpc3QgPSBtYXRjaCBkaXN0YW5jZSAtIDEgKi9cbiAgICAvL0Fzc2VydCgodXNoKWRpc3QgPCAodXNoKU1BWF9ESVNUKHMpICYmXG4gICAgLy8gICAgICAgKHVzaClsYyA8PSAodXNoKShNQVhfTUFUQ0gtTUlOX01BVENIKSAmJlxuICAgIC8vICAgICAgICh1c2gpZF9jb2RlKGRpc3QpIDwgKHVzaClEX0NPREVTLCAgXCJfdHJfdGFsbHk6IGJhZCBtYXRjaFwiKTtcblxuICAgIHMuZHluX2x0cmVlWyhfbGVuZ3RoX2NvZGVbbGNdICsgTElURVJBTFMkMSArIDEpICogMl0vKi5GcmVxKi8rKztcbiAgICBzLmR5bl9kdHJlZVtkX2NvZGUoZGlzdCkgKiAyXS8qLkZyZXEqLysrO1xuICB9XG5cbi8vICghKSBUaGlzIGJsb2NrIGlzIGRpc2FibGVkIGluIHpsaWIgZGVmYXVsdHMsXG4vLyBkb24ndCBlbmFibGUgaXQgZm9yIGJpbmFyeSBjb21wYXRpYmlsaXR5XG5cbi8vI2lmZGVmIFRSVU5DQVRFX0JMT0NLXG4vLyAgLyogVHJ5IHRvIGd1ZXNzIGlmIGl0IGlzIHByb2ZpdGFibGUgdG8gc3RvcCB0aGUgY3VycmVudCBibG9jayBoZXJlICovXG4vLyAgaWYgKChzLmxhc3RfbGl0ICYgMHgxZmZmKSA9PT0gMCAmJiBzLmxldmVsID4gMikge1xuLy8gICAgLyogQ29tcHV0ZSBhbiB1cHBlciBib3VuZCBmb3IgdGhlIGNvbXByZXNzZWQgbGVuZ3RoICovXG4vLyAgICBvdXRfbGVuZ3RoID0gcy5sYXN0X2xpdCo4O1xuLy8gICAgaW5fbGVuZ3RoID0gcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQ7XG4vL1xuLy8gICAgZm9yIChkY29kZSA9IDA7IGRjb2RlIDwgRF9DT0RFUzsgZGNvZGUrKykge1xuLy8gICAgICBvdXRfbGVuZ3RoICs9IHMuZHluX2R0cmVlW2Rjb2RlKjJdLyouRnJlcSovICogKDUgKyBleHRyYV9kYml0c1tkY29kZV0pO1xuLy8gICAgfVxuLy8gICAgb3V0X2xlbmd0aCA+Pj49IDM7XG4vLyAgICAvL1RyYWNldigoc3RkZXJyLFwiXFxubGFzdF9saXQgJXUsIGluICVsZCwgb3V0IH4lbGQoJWxkJSUpIFwiLFxuLy8gICAgLy8gICAgICAgcy0+bGFzdF9saXQsIGluX2xlbmd0aCwgb3V0X2xlbmd0aCxcbi8vICAgIC8vICAgICAgIDEwMEwgLSBvdXRfbGVuZ3RoKjEwMEwvaW5fbGVuZ3RoKSk7XG4vLyAgICBpZiAocy5tYXRjaGVzIDwgKHMubGFzdF9saXQ+PjEpLyppbnQgLzIqLyAmJiBvdXRfbGVuZ3RoIDwgKGluX2xlbmd0aD4+MSkvKmludCAvMiovKSB7XG4vLyAgICAgIHJldHVybiB0cnVlO1xuLy8gICAgfVxuLy8gIH1cbi8vI2VuZGlmXG5cbiAgcmV0dXJuIChzLmxhc3RfbGl0ID09PSBzLmxpdF9idWZzaXplIC0gMSk7XG4gIC8qIFdlIGF2b2lkIGVxdWFsaXR5IHdpdGggbGl0X2J1ZnNpemUgYmVjYXVzZSBvZiB3cmFwYXJvdW5kIGF0IDY0S1xuICAgKiBvbiAxNiBiaXQgbWFjaGluZXMgYW5kIGJlY2F1c2Ugc3RvcmVkIGJsb2NrcyBhcmUgcmVzdHJpY3RlZCB0b1xuICAgKiA2NEstMSBieXRlcy5cbiAgICovXG59O1xuXG52YXIgX3RyX2luaXRfMSAgPSBfdHJfaW5pdCQxO1xudmFyIF90cl9zdG9yZWRfYmxvY2tfMSA9IF90cl9zdG9yZWRfYmxvY2skMTtcbnZhciBfdHJfZmx1c2hfYmxvY2tfMSAgPSBfdHJfZmx1c2hfYmxvY2skMTtcbnZhciBfdHJfdGFsbHlfMSA9IF90cl90YWxseSQxO1xudmFyIF90cl9hbGlnbl8xID0gX3RyX2FsaWduJDE7XG5cbnZhciB0cmVlcyA9IHtcblx0X3RyX2luaXQ6IF90cl9pbml0XzEsXG5cdF90cl9zdG9yZWRfYmxvY2s6IF90cl9zdG9yZWRfYmxvY2tfMSxcblx0X3RyX2ZsdXNoX2Jsb2NrOiBfdHJfZmx1c2hfYmxvY2tfMSxcblx0X3RyX3RhbGx5OiBfdHJfdGFsbHlfMSxcblx0X3RyX2FsaWduOiBfdHJfYWxpZ25fMVxufTtcblxuLy8gTm90ZTogYWRsZXIzMiB0YWtlcyAxMiUgZm9yIGxldmVsIDAgYW5kIDIlIGZvciBsZXZlbCA2LlxuLy8gSXQgaXNuJ3Qgd29ydGggaXQgdG8gbWFrZSBhZGRpdGlvbmFsIG9wdGltaXphdGlvbnMgYXMgaW4gb3JpZ2luYWwuXG4vLyBTbWFsbCBzaXplIGlzIHByZWZlcmFibGUuXG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuY29uc3QgYWRsZXIzMiA9IChhZGxlciwgYnVmLCBsZW4sIHBvcykgPT4ge1xuICBsZXQgczEgPSAoYWRsZXIgJiAweGZmZmYpIHwwLFxuICAgICAgczIgPSAoKGFkbGVyID4+PiAxNikgJiAweGZmZmYpIHwwLFxuICAgICAgbiA9IDA7XG5cbiAgd2hpbGUgKGxlbiAhPT0gMCkge1xuICAgIC8vIFNldCBsaW1pdCB+IHR3aWNlIGxlc3MgdGhhbiA1NTUyLCB0byBrZWVwXG4gICAgLy8gczIgaW4gMzEtYml0cywgYmVjYXVzZSB3ZSBmb3JjZSBzaWduZWQgaW50cy5cbiAgICAvLyBpbiBvdGhlciBjYXNlICU9IHdpbGwgZmFpbC5cbiAgICBuID0gbGVuID4gMjAwMCA/IDIwMDAgOiBsZW47XG4gICAgbGVuIC09IG47XG5cbiAgICBkbyB7XG4gICAgICBzMSA9IChzMSArIGJ1Zltwb3MrK10pIHwwO1xuICAgICAgczIgPSAoczIgKyBzMSkgfDA7XG4gICAgfSB3aGlsZSAoLS1uKTtcblxuICAgIHMxICU9IDY1NTIxO1xuICAgIHMyICU9IDY1NTIxO1xuICB9XG5cbiAgcmV0dXJuIChzMSB8IChzMiA8PCAxNikpIHwwO1xufTtcblxuXG52YXIgYWRsZXIzMl8xID0gYWRsZXIzMjtcblxuLy8gTm90ZTogd2UgY2FuJ3QgZ2V0IHNpZ25pZmljYW50IHNwZWVkIGJvb3N0IGhlcmUuXG4vLyBTbyB3cml0ZSBjb2RlIHRvIG1pbmltaXplIHNpemUgLSBubyBwcmVnZW5lcmF0ZWQgdGFibGVzXG4vLyBhbmQgYXJyYXkgdG9vbHMgZGVwZW5kZW5jaWVzLlxuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFVzZSBvcmRpbmFyeSBhcnJheSwgc2luY2UgdW50eXBlZCBtYWtlcyBubyBib29zdCBoZXJlXG5jb25zdCBtYWtlVGFibGUgPSAoKSA9PiB7XG4gIGxldCBjLCB0YWJsZSA9IFtdO1xuXG4gIGZvciAodmFyIG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBjID0gbjtcbiAgICBmb3IgKHZhciBrID0gMDsgayA8IDg7IGsrKykge1xuICAgICAgYyA9ICgoYyAmIDEpID8gKDB4RURCODgzMjAgXiAoYyA+Pj4gMSkpIDogKGMgPj4+IDEpKTtcbiAgICB9XG4gICAgdGFibGVbbl0gPSBjO1xuICB9XG5cbiAgcmV0dXJuIHRhYmxlO1xufTtcblxuLy8gQ3JlYXRlIHRhYmxlIG9uIGxvYWQuIEp1c3QgMjU1IHNpZ25lZCBsb25ncy4gTm90IGEgcHJvYmxlbS5cbmNvbnN0IGNyY1RhYmxlID0gbmV3IFVpbnQzMkFycmF5KG1ha2VUYWJsZSgpKTtcblxuXG5jb25zdCBjcmMzMiA9IChjcmMsIGJ1ZiwgbGVuLCBwb3MpID0+IHtcbiAgY29uc3QgdCA9IGNyY1RhYmxlO1xuICBjb25zdCBlbmQgPSBwb3MgKyBsZW47XG5cbiAgY3JjIF49IC0xO1xuXG4gIGZvciAobGV0IGkgPSBwb3M7IGkgPCBlbmQ7IGkrKykge1xuICAgIGNyYyA9IChjcmMgPj4+IDgpIF4gdFsoY3JjIF4gYnVmW2ldKSAmIDB4RkZdO1xuICB9XG5cbiAgcmV0dXJuIChjcmMgXiAoLTEpKTsgLy8gPj4+IDA7XG59O1xuXG5cbnZhciBjcmMzMl8xID0gY3JjMzI7XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxudmFyIG1lc3NhZ2VzID0ge1xuICAyOiAgICAgICduZWVkIGRpY3Rpb25hcnknLCAgICAgLyogWl9ORUVEX0RJQ1QgICAgICAgMiAgKi9cbiAgMTogICAgICAnc3RyZWFtIGVuZCcsICAgICAgICAgIC8qIFpfU1RSRUFNX0VORCAgICAgIDEgICovXG4gIDA6ICAgICAgJycsICAgICAgICAgICAgICAgICAgICAvKiBaX09LICAgICAgICAgICAgICAwICAqL1xuICAnLTEnOiAgICdmaWxlIGVycm9yJywgICAgICAgICAgLyogWl9FUlJOTyAgICAgICAgICgtMSkgKi9cbiAgJy0yJzogICAnc3RyZWFtIGVycm9yJywgICAgICAgIC8qIFpfU1RSRUFNX0VSUk9SICAoLTIpICovXG4gICctMyc6ICAgJ2RhdGEgZXJyb3InLCAgICAgICAgICAvKiBaX0RBVEFfRVJST1IgICAgKC0zKSAqL1xuICAnLTQnOiAgICdpbnN1ZmZpY2llbnQgbWVtb3J5JywgLyogWl9NRU1fRVJST1IgICAgICgtNCkgKi9cbiAgJy01JzogICAnYnVmZmVyIGVycm9yJywgICAgICAgIC8qIFpfQlVGX0VSUk9SICAgICAoLTUpICovXG4gICctNic6ICAgJ2luY29tcGF0aWJsZSB2ZXJzaW9uJyAvKiBaX1ZFUlNJT05fRVJST1IgKC02KSAqL1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG52YXIgY29uc3RhbnRzJDIgPSB7XG5cbiAgLyogQWxsb3dlZCBmbHVzaCB2YWx1ZXM7IHNlZSBkZWZsYXRlKCkgYW5kIGluZmxhdGUoKSBiZWxvdyBmb3IgZGV0YWlscyAqL1xuICBaX05PX0ZMVVNIOiAgICAgICAgIDAsXG4gIFpfUEFSVElBTF9GTFVTSDogICAgMSxcbiAgWl9TWU5DX0ZMVVNIOiAgICAgICAyLFxuICBaX0ZVTExfRkxVU0g6ICAgICAgIDMsXG4gIFpfRklOSVNIOiAgICAgICAgICAgNCxcbiAgWl9CTE9DSzogICAgICAgICAgICA1LFxuICBaX1RSRUVTOiAgICAgICAgICAgIDYsXG5cbiAgLyogUmV0dXJuIGNvZGVzIGZvciB0aGUgY29tcHJlc3Npb24vZGVjb21wcmVzc2lvbiBmdW5jdGlvbnMuIE5lZ2F0aXZlIHZhbHVlc1xuICAqIGFyZSBlcnJvcnMsIHBvc2l0aXZlIHZhbHVlcyBhcmUgdXNlZCBmb3Igc3BlY2lhbCBidXQgbm9ybWFsIGV2ZW50cy5cbiAgKi9cbiAgWl9PSzogICAgICAgICAgICAgICAwLFxuICBaX1NUUkVBTV9FTkQ6ICAgICAgIDEsXG4gIFpfTkVFRF9ESUNUOiAgICAgICAgMixcbiAgWl9FUlJOTzogICAgICAgICAgIC0xLFxuICBaX1NUUkVBTV9FUlJPUjogICAgLTIsXG4gIFpfREFUQV9FUlJPUjogICAgICAtMyxcbiAgWl9NRU1fRVJST1I6ICAgICAgIC00LFxuICBaX0JVRl9FUlJPUjogICAgICAgLTUsXG4gIC8vWl9WRVJTSU9OX0VSUk9SOiAtNixcblxuICAvKiBjb21wcmVzc2lvbiBsZXZlbHMgKi9cbiAgWl9OT19DT01QUkVTU0lPTjogICAgICAgICAwLFxuICBaX0JFU1RfU1BFRUQ6ICAgICAgICAgICAgIDEsXG4gIFpfQkVTVF9DT01QUkVTU0lPTjogICAgICAgOSxcbiAgWl9ERUZBVUxUX0NPTVBSRVNTSU9OOiAgIC0xLFxuXG5cbiAgWl9GSUxURVJFRDogICAgICAgICAgICAgICAxLFxuICBaX0hVRkZNQU5fT05MWTogICAgICAgICAgIDIsXG4gIFpfUkxFOiAgICAgICAgICAgICAgICAgICAgMyxcbiAgWl9GSVhFRDogICAgICAgICAgICAgICAgICA0LFxuICBaX0RFRkFVTFRfU1RSQVRFR1k6ICAgICAgIDAsXG5cbiAgLyogUG9zc2libGUgdmFsdWVzIG9mIHRoZSBkYXRhX3R5cGUgZmllbGQgKHRob3VnaCBzZWUgaW5mbGF0ZSgpKSAqL1xuICBaX0JJTkFSWTogICAgICAgICAgICAgICAgIDAsXG4gIFpfVEVYVDogICAgICAgICAgICAgICAgICAgMSxcbiAgLy9aX0FTQ0lJOiAgICAgICAgICAgICAgICAxLCAvLyA9IFpfVEVYVCAoZGVwcmVjYXRlZClcbiAgWl9VTktOT1dOOiAgICAgICAgICAgICAgICAyLFxuXG4gIC8qIFRoZSBkZWZsYXRlIGNvbXByZXNzaW9uIG1ldGhvZCAqL1xuICBaX0RFRkxBVEVEOiAgICAgICAgICAgICAgIDhcbiAgLy9aX05VTEw6ICAgICAgICAgICAgICAgICBudWxsIC8vIFVzZSAtMSBvciBudWxsIGlubGluZSwgZGVwZW5kaW5nIG9uIHZhciB0eXBlXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmNvbnN0IHsgX3RyX2luaXQsIF90cl9zdG9yZWRfYmxvY2ssIF90cl9mbHVzaF9ibG9jaywgX3RyX3RhbGx5LCBfdHJfYWxpZ24gfSA9IHRyZWVzO1xuXG5cblxuXG4vKiBQdWJsaWMgY29uc3RhbnRzID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuY29uc3Qge1xuICBaX05PX0ZMVVNIOiBaX05PX0ZMVVNIJDIsIFpfUEFSVElBTF9GTFVTSCwgWl9GVUxMX0ZMVVNIOiBaX0ZVTExfRkxVU0gkMSwgWl9GSU5JU0g6IFpfRklOSVNIJDMsIFpfQkxPQ0s6IFpfQkxPQ0skMSxcbiAgWl9PSzogWl9PSyQzLCBaX1NUUkVBTV9FTkQ6IFpfU1RSRUFNX0VORCQzLCBaX1NUUkVBTV9FUlJPUjogWl9TVFJFQU1fRVJST1IkMiwgWl9EQVRBX0VSUk9SOiBaX0RBVEFfRVJST1IkMiwgWl9CVUZfRVJST1I6IFpfQlVGX0VSUk9SJDEsXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTjogWl9ERUZBVUxUX0NPTVBSRVNTSU9OJDEsXG4gIFpfRklMVEVSRUQsIFpfSFVGRk1BTl9PTkxZLCBaX1JMRSwgWl9GSVhFRCwgWl9ERUZBVUxUX1NUUkFURUdZOiBaX0RFRkFVTFRfU1RSQVRFR1kkMSxcbiAgWl9VTktOT1dOLFxuICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDJcbn0gPSBjb25zdGFudHMkMjtcblxuLyo9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCBNQVhfTUVNX0xFVkVMID0gOTtcbi8qIE1heGltdW0gdmFsdWUgZm9yIG1lbUxldmVsIGluIGRlZmxhdGVJbml0MiAqL1xuY29uc3QgTUFYX1dCSVRTJDEgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xuY29uc3QgREVGX01FTV9MRVZFTCA9IDg7XG5cblxuY29uc3QgTEVOR1RIX0NPREVTICA9IDI5O1xuLyogbnVtYmVyIG9mIGxlbmd0aCBjb2Rlcywgbm90IGNvdW50aW5nIHRoZSBzcGVjaWFsIEVORF9CTE9DSyBjb2RlICovXG5jb25zdCBMSVRFUkFMUyAgICAgID0gMjU2O1xuLyogbnVtYmVyIG9mIGxpdGVyYWwgYnl0ZXMgMC4uMjU1ICovXG5jb25zdCBMX0NPREVTICAgICAgID0gTElURVJBTFMgKyAxICsgTEVOR1RIX0NPREVTO1xuLyogbnVtYmVyIG9mIExpdGVyYWwgb3IgTGVuZ3RoIGNvZGVzLCBpbmNsdWRpbmcgdGhlIEVORF9CTE9DSyBjb2RlICovXG5jb25zdCBEX0NPREVTICAgICAgID0gMzA7XG4vKiBudW1iZXIgb2YgZGlzdGFuY2UgY29kZXMgKi9cbmNvbnN0IEJMX0NPREVTICAgICAgPSAxOTtcbi8qIG51bWJlciBvZiBjb2RlcyB1c2VkIHRvIHRyYW5zZmVyIHRoZSBiaXQgbGVuZ3RocyAqL1xuY29uc3QgSEVBUF9TSVpFICAgICA9IDIgKiBMX0NPREVTICsgMTtcbi8qIG1heGltdW0gaGVhcCBzaXplICovXG5jb25zdCBNQVhfQklUUyAgPSAxNTtcbi8qIEFsbCBjb2RlcyBtdXN0IG5vdCBleGNlZWQgTUFYX0JJVFMgYml0cyAqL1xuXG5jb25zdCBNSU5fTUFUQ0ggPSAzO1xuY29uc3QgTUFYX01BVENIID0gMjU4O1xuY29uc3QgTUlOX0xPT0tBSEVBRCA9IChNQVhfTUFUQ0ggKyBNSU5fTUFUQ0ggKyAxKTtcblxuY29uc3QgUFJFU0VUX0RJQ1QgPSAweDIwO1xuXG5jb25zdCBJTklUX1NUQVRFID0gNDI7XG5jb25zdCBFWFRSQV9TVEFURSA9IDY5O1xuY29uc3QgTkFNRV9TVEFURSA9IDczO1xuY29uc3QgQ09NTUVOVF9TVEFURSA9IDkxO1xuY29uc3QgSENSQ19TVEFURSA9IDEwMztcbmNvbnN0IEJVU1lfU1RBVEUgPSAxMTM7XG5jb25zdCBGSU5JU0hfU1RBVEUgPSA2NjY7XG5cbmNvbnN0IEJTX05FRURfTU9SRSAgICAgID0gMTsgLyogYmxvY2sgbm90IGNvbXBsZXRlZCwgbmVlZCBtb3JlIGlucHV0IG9yIG1vcmUgb3V0cHV0ICovXG5jb25zdCBCU19CTE9DS19ET05FICAgICA9IDI7IC8qIGJsb2NrIGZsdXNoIHBlcmZvcm1lZCAqL1xuY29uc3QgQlNfRklOSVNIX1NUQVJURUQgPSAzOyAvKiBmaW5pc2ggc3RhcnRlZCwgbmVlZCBvbmx5IG1vcmUgb3V0cHV0IGF0IG5leHQgZGVmbGF0ZSAqL1xuY29uc3QgQlNfRklOSVNIX0RPTkUgICAgPSA0OyAvKiBmaW5pc2ggZG9uZSwgYWNjZXB0IG5vIG1vcmUgaW5wdXQgb3Igb3V0cHV0ICovXG5cbmNvbnN0IE9TX0NPREUgPSAweDAzOyAvLyBVbml4IDopIC4gRG9uJ3QgZGV0ZWN0LCB1c2UgdGhpcyBkZWZhdWx0LlxuXG5jb25zdCBlcnIgPSAoc3RybSwgZXJyb3JDb2RlKSA9PiB7XG4gIHN0cm0ubXNnID0gbWVzc2FnZXNbZXJyb3JDb2RlXTtcbiAgcmV0dXJuIGVycm9yQ29kZTtcbn07XG5cbmNvbnN0IHJhbmsgPSAoZikgPT4ge1xuICByZXR1cm4gKChmKSA8PCAxKSAtICgoZikgPiA0ID8gOSA6IDApO1xufTtcblxuY29uc3QgemVybyA9IChidWYpID0+IHtcbiAgbGV0IGxlbiA9IGJ1Zi5sZW5ndGg7IHdoaWxlICgtLWxlbiA+PSAwKSB7IGJ1ZltsZW5dID0gMDsgfVxufTtcblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuZXctY2FwICovXG5sZXQgSEFTSF9aTElCID0gKHMsIHByZXYsIGRhdGEpID0+ICgocHJldiA8PCBzLmhhc2hfc2hpZnQpIF4gZGF0YSkgJiBzLmhhc2hfbWFzaztcbi8vIFRoaXMgaGFzaCBjYXVzZXMgbGVzcyBjb2xsaXNpb25zLCBodHRwczovL2dpdGh1Yi5jb20vbm9kZWNhL3Bha28vaXNzdWVzLzEzNVxuLy8gQnV0IGJyZWFrcyBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy9sZXQgSEFTSF9GQVNUID0gKHMsIHByZXYsIGRhdGEpID0+ICgocHJldiA8PCA4KSArIChwcmV2ID4+IDgpICsgKGRhdGEgPDwgNCkpICYgcy5oYXNoX21hc2s7XG5sZXQgSEFTSCA9IEhBU0hfWkxJQjtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRmx1c2ggYXMgbXVjaCBwZW5kaW5nIG91dHB1dCBhcyBwb3NzaWJsZS4gQWxsIGRlZmxhdGUoKSBvdXRwdXQgZ29lc1xuICogdGhyb3VnaCB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdFxuICogdG8gYXZvaWQgYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPm91dHB1dCBidWZmZXIgYW5kIGNvcHlpbmcgaW50byBpdC5cbiAqIChTZWUgYWxzbyByZWFkX2J1ZigpKS5cbiAqL1xuY29uc3QgZmx1c2hfcGVuZGluZyA9IChzdHJtKSA9PiB7XG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuXG4gIC8vX3RyX2ZsdXNoX2JpdHMocyk7XG4gIGxldCBsZW4gPSBzLnBlbmRpbmc7XG4gIGlmIChsZW4gPiBzdHJtLmF2YWlsX291dCkge1xuICAgIGxlbiA9IHN0cm0uYXZhaWxfb3V0O1xuICB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgc3RybS5vdXRwdXQuc2V0KHMucGVuZGluZ19idWYuc3ViYXJyYXkocy5wZW5kaW5nX291dCwgcy5wZW5kaW5nX291dCArIGxlbiksIHN0cm0ubmV4dF9vdXQpO1xuICBzdHJtLm5leHRfb3V0ICs9IGxlbjtcbiAgcy5wZW5kaW5nX291dCArPSBsZW47XG4gIHN0cm0udG90YWxfb3V0ICs9IGxlbjtcbiAgc3RybS5hdmFpbF9vdXQgLT0gbGVuO1xuICBzLnBlbmRpbmcgLT0gbGVuO1xuICBpZiAocy5wZW5kaW5nID09PSAwKSB7XG4gICAgcy5wZW5kaW5nX291dCA9IDA7XG4gIH1cbn07XG5cblxuY29uc3QgZmx1c2hfYmxvY2tfb25seSA9IChzLCBsYXN0KSA9PiB7XG4gIF90cl9mbHVzaF9ibG9jayhzLCAocy5ibG9ja19zdGFydCA+PSAwID8gcy5ibG9ja19zdGFydCA6IC0xKSwgcy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQsIGxhc3QpO1xuICBzLmJsb2NrX3N0YXJ0ID0gcy5zdHJzdGFydDtcbiAgZmx1c2hfcGVuZGluZyhzLnN0cm0pO1xufTtcblxuXG5jb25zdCBwdXRfYnl0ZSA9IChzLCBiKSA9PiB7XG4gIHMucGVuZGluZ19idWZbcy5wZW5kaW5nKytdID0gYjtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogUHV0IGEgc2hvcnQgaW4gdGhlIHBlbmRpbmcgYnVmZmVyLiBUaGUgMTYtYml0IHZhbHVlIGlzIHB1dCBpbiBNU0Igb3JkZXIuXG4gKiBJTiBhc3NlcnRpb246IHRoZSBzdHJlYW0gc3RhdGUgaXMgY29ycmVjdCBhbmQgdGhlcmUgaXMgZW5vdWdoIHJvb20gaW5cbiAqIHBlbmRpbmdfYnVmLlxuICovXG5jb25zdCBwdXRTaG9ydE1TQiA9IChzLCBiKSA9PiB7XG5cbiAgLy8gIHB1dF9ieXRlKHMsIChCeXRlKShiID4+IDgpKTtcbi8vICBwdXRfYnl0ZShzLCAoQnl0ZSkoYiAmIDB4ZmYpKTtcbiAgcy5wZW5kaW5nX2J1ZltzLnBlbmRpbmcrK10gPSAoYiA+Pj4gOCkgJiAweGZmO1xuICBzLnBlbmRpbmdfYnVmW3MucGVuZGluZysrXSA9IGIgJiAweGZmO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIFJlYWQgYSBuZXcgYnVmZmVyIGZyb20gdGhlIGN1cnJlbnQgaW5wdXQgc3RyZWFtLCB1cGRhdGUgdGhlIGFkbGVyMzJcbiAqIGFuZCB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgcmVhZC4gIEFsbCBkZWZsYXRlKCkgaW5wdXQgZ29lcyB0aHJvdWdoXG4gKiB0aGlzIGZ1bmN0aW9uIHNvIHNvbWUgYXBwbGljYXRpb25zIG1heSB3aXNoIHRvIG1vZGlmeSBpdCB0byBhdm9pZFxuICogYWxsb2NhdGluZyBhIGxhcmdlIHN0cm0tPmlucHV0IGJ1ZmZlciBhbmQgY29weWluZyBmcm9tIGl0LlxuICogKFNlZSBhbHNvIGZsdXNoX3BlbmRpbmcoKSkuXG4gKi9cbmNvbnN0IHJlYWRfYnVmID0gKHN0cm0sIGJ1Ziwgc3RhcnQsIHNpemUpID0+IHtcblxuICBsZXQgbGVuID0gc3RybS5hdmFpbF9pbjtcblxuICBpZiAobGVuID4gc2l6ZSkgeyBsZW4gPSBzaXplOyB9XG4gIGlmIChsZW4gPT09IDApIHsgcmV0dXJuIDA7IH1cblxuICBzdHJtLmF2YWlsX2luIC09IGxlbjtcblxuICAvLyB6bWVtY3B5KGJ1Ziwgc3RybS0+bmV4dF9pbiwgbGVuKTtcbiAgYnVmLnNldChzdHJtLmlucHV0LnN1YmFycmF5KHN0cm0ubmV4dF9pbiwgc3RybS5uZXh0X2luICsgbGVuKSwgc3RhcnQpO1xuICBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAxKSB7XG4gICAgc3RybS5hZGxlciA9IGFkbGVyMzJfMShzdHJtLmFkbGVyLCBidWYsIGxlbiwgc3RhcnQpO1xuICB9XG5cbiAgZWxzZSBpZiAoc3RybS5zdGF0ZS53cmFwID09PSAyKSB7XG4gICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgYnVmLCBsZW4sIHN0YXJ0KTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiArPSBsZW47XG4gIHN0cm0udG90YWxfaW4gKz0gbGVuO1xuXG4gIHJldHVybiBsZW47XG59O1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2V0IG1hdGNoX3N0YXJ0IHRvIHRoZSBsb25nZXN0IG1hdGNoIHN0YXJ0aW5nIGF0IHRoZSBnaXZlbiBzdHJpbmcgYW5kXG4gKiByZXR1cm4gaXRzIGxlbmd0aC4gTWF0Y2hlcyBzaG9ydGVyIG9yIGVxdWFsIHRvIHByZXZfbGVuZ3RoIGFyZSBkaXNjYXJkZWQsXG4gKiBpbiB3aGljaCBjYXNlIHRoZSByZXN1bHQgaXMgZXF1YWwgdG8gcHJldl9sZW5ndGggYW5kIG1hdGNoX3N0YXJ0IGlzXG4gKiBnYXJiYWdlLlxuICogSU4gYXNzZXJ0aW9uczogY3VyX21hdGNoIGlzIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluIGZvciB0aGUgY3VycmVudFxuICogICBzdHJpbmcgKHN0cnN0YXJ0KSBhbmQgaXRzIGRpc3RhbmNlIGlzIDw9IE1BWF9ESVNULCBhbmQgcHJldl9sZW5ndGggPj0gMVxuICogT1VUIGFzc2VydGlvbjogdGhlIG1hdGNoIGxlbmd0aCBpcyBub3QgZ3JlYXRlciB0aGFuIHMtPmxvb2thaGVhZC5cbiAqL1xuY29uc3QgbG9uZ2VzdF9tYXRjaCA9IChzLCBjdXJfbWF0Y2gpID0+IHtcblxuICBsZXQgY2hhaW5fbGVuZ3RoID0gcy5tYXhfY2hhaW5fbGVuZ3RoOyAgICAgIC8qIG1heCBoYXNoIGNoYWluIGxlbmd0aCAqL1xuICBsZXQgc2NhbiA9IHMuc3Ryc3RhcnQ7IC8qIGN1cnJlbnQgc3RyaW5nICovXG4gIGxldCBtYXRjaDsgICAgICAgICAgICAgICAgICAgICAgIC8qIG1hdGNoZWQgc3RyaW5nICovXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIG9mIGN1cnJlbnQgbWF0Y2ggKi9cbiAgbGV0IGJlc3RfbGVuID0gcy5wcmV2X2xlbmd0aDsgICAgICAgICAgICAgIC8qIGJlc3QgbWF0Y2ggbGVuZ3RoIHNvIGZhciAqL1xuICBsZXQgbmljZV9tYXRjaCA9IHMubmljZV9tYXRjaDsgICAgICAgICAgICAgLyogc3RvcCBpZiBtYXRjaCBsb25nIGVub3VnaCAqL1xuICBjb25zdCBsaW1pdCA9IChzLnN0cnN0YXJ0ID4gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpID9cbiAgICAgIHMuc3Ryc3RhcnQgLSAocy53X3NpemUgLSBNSU5fTE9PS0FIRUFEKSA6IDAvKk5JTCovO1xuXG4gIGNvbnN0IF93aW4gPSBzLndpbmRvdzsgLy8gc2hvcnRjdXRcblxuICBjb25zdCB3bWFzayA9IHMud19tYXNrO1xuICBjb25zdCBwcmV2ICA9IHMucHJldjtcblxuICAvKiBTdG9wIHdoZW4gY3VyX21hdGNoIGJlY29tZXMgPD0gbGltaXQuIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLFxuICAgKiB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nIG9mIHdpbmRvdyBpbmRleCAwLlxuICAgKi9cblxuICBjb25zdCBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICBsZXQgc2Nhbl9lbmQxICA9IF93aW5bc2NhbiArIGJlc3RfbGVuIC0gMV07XG4gIGxldCBzY2FuX2VuZCAgID0gX3dpbltzY2FuICsgYmVzdF9sZW5dO1xuXG4gIC8qIFRoZSBjb2RlIGlzIG9wdGltaXplZCBmb3IgSEFTSF9CSVRTID49IDggYW5kIE1BWF9NQVRDSC0yIG11bHRpcGxlIG9mIDE2LlxuICAgKiBJdCBpcyBlYXN5IHRvIGdldCByaWQgb2YgdGhpcyBvcHRpbWl6YXRpb24gaWYgbmVjZXNzYXJ5LlxuICAgKi9cbiAgLy8gQXNzZXJ0KHMtPmhhc2hfYml0cyA+PSA4ICYmIE1BWF9NQVRDSCA9PSAyNTgsIFwiQ29kZSB0b28gY2xldmVyXCIpO1xuXG4gIC8qIERvIG5vdCB3YXN0ZSB0b28gbXVjaCB0aW1lIGlmIHdlIGFscmVhZHkgaGF2ZSBhIGdvb2QgbWF0Y2g6ICovXG4gIGlmIChzLnByZXZfbGVuZ3RoID49IHMuZ29vZF9tYXRjaCkge1xuICAgIGNoYWluX2xlbmd0aCA+Pj0gMjtcbiAgfVxuICAvKiBEbyBub3QgbG9vayBmb3IgbWF0Y2hlcyBiZXlvbmQgdGhlIGVuZCBvZiB0aGUgaW5wdXQuIFRoaXMgaXMgbmVjZXNzYXJ5XG4gICAqIHRvIG1ha2UgZGVmbGF0ZSBkZXRlcm1pbmlzdGljLlxuICAgKi9cbiAgaWYgKG5pY2VfbWF0Y2ggPiBzLmxvb2thaGVhZCkgeyBuaWNlX21hdGNoID0gcy5sb29rYWhlYWQ7IH1cblxuICAvLyBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZS1NSU5fTE9PS0FIRUFELCBcIm5lZWQgbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICAvLyBBc3NlcnQoY3VyX21hdGNoIDwgcy0+c3Ryc3RhcnQsIFwibm8gZnV0dXJlXCIpO1xuICAgIG1hdGNoID0gY3VyX21hdGNoO1xuXG4gICAgLyogU2tpcCB0byBuZXh0IG1hdGNoIGlmIHRoZSBtYXRjaCBsZW5ndGggY2Fubm90IGluY3JlYXNlXG4gICAgICogb3IgaWYgdGhlIG1hdGNoIGxlbmd0aCBpcyBsZXNzIHRoYW4gMi4gIE5vdGUgdGhhdCB0aGUgY2hlY2tzIGJlbG93XG4gICAgICogZm9yIGluc3VmZmljaWVudCBsb29rYWhlYWQgb25seSBvY2N1ciBvY2Nhc2lvbmFsbHkgZm9yIHBlcmZvcm1hbmNlXG4gICAgICogcmVhc29ucy4gIFRoZXJlZm9yZSB1bmluaXRpYWxpemVkIG1lbW9yeSB3aWxsIGJlIGFjY2Vzc2VkLCBhbmRcbiAgICAgKiBjb25kaXRpb25hbCBqdW1wcyB3aWxsIGJlIG1hZGUgdGhhdCBkZXBlbmQgb24gdGhvc2UgdmFsdWVzLlxuICAgICAqIEhvd2V2ZXIgdGhlIGxlbmd0aCBvZiB0aGUgbWF0Y2ggaXMgbGltaXRlZCB0byB0aGUgbG9va2FoZWFkLCBzb1xuICAgICAqIHRoZSBvdXRwdXQgb2YgZGVmbGF0ZSBpcyBub3QgYWZmZWN0ZWQgYnkgdGhlIHVuaW5pdGlhbGl6ZWQgdmFsdWVzLlxuICAgICAqL1xuXG4gICAgaWYgKF93aW5bbWF0Y2ggKyBiZXN0X2xlbl0gICAgICE9PSBzY2FuX2VuZCAgfHxcbiAgICAgICAgX3dpblttYXRjaCArIGJlc3RfbGVuIC0gMV0gIT09IHNjYW5fZW5kMSB8fFxuICAgICAgICBfd2luW21hdGNoXSAgICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuXSB8fFxuICAgICAgICBfd2luWysrbWF0Y2hdICAgICAgICAgICAgICAhPT0gX3dpbltzY2FuICsgMV0pIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIC8qIFRoZSBjaGVjayBhdCBiZXN0X2xlbi0xIGNhbiBiZSByZW1vdmVkIGJlY2F1c2UgaXQgd2lsbCBiZSBtYWRlXG4gICAgICogYWdhaW4gbGF0ZXIuIChUaGlzIGhldXJpc3RpYyBpcyBub3QgYWx3YXlzIGEgd2luLilcbiAgICAgKiBJdCBpcyBub3QgbmVjZXNzYXJ5IHRvIGNvbXBhcmUgc2NhblsyXSBhbmQgbWF0Y2hbMl0gc2luY2UgdGhleVxuICAgICAqIGFyZSBhbHdheXMgZXF1YWwgd2hlbiB0aGUgb3RoZXIgYnl0ZXMgbWF0Y2gsIGdpdmVuIHRoYXRcbiAgICAgKiB0aGUgaGFzaCBrZXlzIGFyZSBlcXVhbCBhbmQgdGhhdCBIQVNIX0JJVFMgPj0gOC5cbiAgICAgKi9cbiAgICBzY2FuICs9IDI7XG4gICAgbWF0Y2grKztcbiAgICAvLyBBc3NlcnQoKnNjYW4gPT0gKm1hdGNoLCBcIm1hdGNoWzJdP1wiKTtcblxuICAgIC8qIFdlIGNoZWNrIGZvciBpbnN1ZmZpY2llbnQgbG9va2FoZWFkIG9ubHkgZXZlcnkgOHRoIGNvbXBhcmlzb247XG4gICAgICogdGhlIDI1NnRoIGNoZWNrIHdpbGwgYmUgbWFkZSBhdCBzdHJzdGFydCsyNTguXG4gICAgICovXG4gICAgZG8ge1xuICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgfSB3aGlsZSAoX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJiBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiZcbiAgICAgICAgICAgICBfd2luWysrc2Nhbl0gPT09IF93aW5bKyttYXRjaF0gJiYgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmXG4gICAgICAgICAgICAgX3dpblsrK3NjYW5dID09PSBfd2luWysrbWF0Y2hdICYmIF93aW5bKytzY2FuXSA9PT0gX3dpblsrK21hdGNoXSAmJlxuICAgICAgICAgICAgIHNjYW4gPCBzdHJlbmQpO1xuXG4gICAgLy8gQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1bnNpZ25lZCkocy0+d2luZG93X3NpemUtMSksIFwid2lsZCBzY2FuXCIpO1xuXG4gICAgbGVuID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgIHNjYW4gPSBzdHJlbmQgLSBNQVhfTUFUQ0g7XG5cbiAgICBpZiAobGVuID4gYmVzdF9sZW4pIHtcbiAgICAgIHMubWF0Y2hfc3RhcnQgPSBjdXJfbWF0Y2g7XG4gICAgICBiZXN0X2xlbiA9IGxlbjtcbiAgICAgIGlmIChsZW4gPj0gbmljZV9tYXRjaCkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICAgIHNjYW5fZW5kMSAgPSBfd2luW3NjYW4gKyBiZXN0X2xlbiAtIDFdO1xuICAgICAgc2Nhbl9lbmQgICA9IF93aW5bc2NhbiArIGJlc3RfbGVuXTtcbiAgICB9XG4gIH0gd2hpbGUgKChjdXJfbWF0Y2ggPSBwcmV2W2N1cl9tYXRjaCAmIHdtYXNrXSkgPiBsaW1pdCAmJiAtLWNoYWluX2xlbmd0aCAhPT0gMCk7XG5cbiAgaWYgKGJlc3RfbGVuIDw9IHMubG9va2FoZWFkKSB7XG4gICAgcmV0dXJuIGJlc3RfbGVuO1xuICB9XG4gIHJldHVybiBzLmxvb2thaGVhZDtcbn07XG5cblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBGaWxsIHRoZSB3aW5kb3cgd2hlbiB0aGUgbG9va2FoZWFkIGJlY29tZXMgaW5zdWZmaWNpZW50LlxuICogVXBkYXRlcyBzdHJzdGFydCBhbmQgbG9va2FoZWFkLlxuICpcbiAqIElOIGFzc2VydGlvbjogbG9va2FoZWFkIDwgTUlOX0xPT0tBSEVBRFxuICogT1VUIGFzc2VydGlvbnM6IHN0cnN0YXJ0IDw9IHdpbmRvd19zaXplLU1JTl9MT09LQUhFQURcbiAqICAgIEF0IGxlYXN0IG9uZSBieXRlIGhhcyBiZWVuIHJlYWQsIG9yIGF2YWlsX2luID09IDA7IHJlYWRzIGFyZVxuICogICAgcGVyZm9ybWVkIGZvciBhdCBsZWFzdCB0d28gYnl0ZXMgKHJlcXVpcmVkIGZvciB0aGUgemlwIHRyYW5zbGF0ZV9lb2xcbiAqICAgIG9wdGlvbiAtLSBub3Qgc3VwcG9ydGVkIGhlcmUpLlxuICovXG5jb25zdCBmaWxsX3dpbmRvdyA9IChzKSA9PiB7XG5cbiAgY29uc3QgX3dfc2l6ZSA9IHMud19zaXplO1xuICBsZXQgcCwgbiwgbSwgbW9yZSwgc3RyO1xuXG4gIC8vQXNzZXJ0KHMtPmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQsIFwiYWxyZWFkeSBlbm91Z2ggbG9va2FoZWFkXCIpO1xuXG4gIGRvIHtcbiAgICBtb3JlID0gcy53aW5kb3dfc2l6ZSAtIHMubG9va2FoZWFkIC0gcy5zdHJzdGFydDtcblxuICAgIC8vIEpTIGludHMgaGF2ZSAzMiBiaXQsIGJsb2NrIGJlbG93IG5vdCBuZWVkZWRcbiAgICAvKiBEZWFsIHdpdGggIUAjJCUgNjRLIGxpbWl0OiAqL1xuICAgIC8vaWYgKHNpemVvZihpbnQpIDw9IDIpIHtcbiAgICAvLyAgICBpZiAobW9yZSA9PSAwICYmIHMtPnN0cnN0YXJ0ID09IDAgJiYgcy0+bG9va2FoZWFkID09IDApIHtcbiAgICAvLyAgICAgICAgbW9yZSA9IHdzaXplO1xuICAgIC8vXG4gICAgLy8gIH0gZWxzZSBpZiAobW9yZSA9PSAodW5zaWduZWQpKC0xKSkge1xuICAgIC8vICAgICAgICAvKiBWZXJ5IHVubGlrZWx5LCBidXQgcG9zc2libGUgb24gMTYgYml0IG1hY2hpbmUgaWZcbiAgICAvLyAgICAgICAgICogc3Ryc3RhcnQgPT0gMCAmJiBsb29rYWhlYWQgPT0gMSAoaW5wdXQgZG9uZSBhIGJ5dGUgYXQgdGltZSlcbiAgICAvLyAgICAgICAgICovXG4gICAgLy8gICAgICAgIG1vcmUtLTtcbiAgICAvLyAgICB9XG4gICAgLy99XG5cblxuICAgIC8qIElmIHRoZSB3aW5kb3cgaXMgYWxtb3N0IGZ1bGwgYW5kIHRoZXJlIGlzIGluc3VmZmljaWVudCBsb29rYWhlYWQsXG4gICAgICogbW92ZSB0aGUgdXBwZXIgaGFsZiB0byB0aGUgbG93ZXIgb25lIHRvIG1ha2Ugcm9vbSBpbiB0aGUgdXBwZXIgaGFsZi5cbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCA+PSBfd19zaXplICsgKF93X3NpemUgLSBNSU5fTE9PS0FIRUFEKSkge1xuXG4gICAgICBzLndpbmRvdy5zZXQocy53aW5kb3cuc3ViYXJyYXkoX3dfc2l6ZSwgX3dfc2l6ZSArIF93X3NpemUpLCAwKTtcbiAgICAgIHMubWF0Y2hfc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIHMuc3Ryc3RhcnQgLT0gX3dfc2l6ZTtcbiAgICAgIC8qIHdlIG5vdyBoYXZlIHN0cnN0YXJ0ID49IE1BWF9ESVNUICovXG4gICAgICBzLmJsb2NrX3N0YXJ0IC09IF93X3NpemU7XG5cbiAgICAgIC8qIFNsaWRlIHRoZSBoYXNoIHRhYmxlIChjb3VsZCBiZSBhdm9pZGVkIHdpdGggMzIgYml0IHZhbHVlc1xuICAgICAgIGF0IHRoZSBleHBlbnNlIG9mIG1lbW9yeSB1c2FnZSkuIFdlIHNsaWRlIGV2ZW4gd2hlbiBsZXZlbCA9PSAwXG4gICAgICAgdG8ga2VlcCB0aGUgaGFzaCB0YWJsZSBjb25zaXN0ZW50IGlmIHdlIHN3aXRjaCBiYWNrIHRvIGxldmVsID4gMFxuICAgICAgIGxhdGVyLiAoVXNpbmcgbGV2ZWwgMCBwZXJtYW5lbnRseSBpcyBub3QgYW4gb3B0aW1hbCB1c2FnZSBvZlxuICAgICAgIHpsaWIsIHNvIHdlIGRvbid0IGNhcmUgYWJvdXQgdGhpcyBwYXRob2xvZ2ljYWwgY2FzZS4pXG4gICAgICAgKi9cblxuICAgICAgbiA9IHMuaGFzaF9zaXplO1xuICAgICAgcCA9IG47XG5cbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMuaGVhZFstLXBdO1xuICAgICAgICBzLmhlYWRbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgIH0gd2hpbGUgKC0tbik7XG5cbiAgICAgIG4gPSBfd19zaXplO1xuICAgICAgcCA9IG47XG5cbiAgICAgIGRvIHtcbiAgICAgICAgbSA9IHMucHJldlstLXBdO1xuICAgICAgICBzLnByZXZbcF0gPSAobSA+PSBfd19zaXplID8gbSAtIF93X3NpemUgOiAwKTtcbiAgICAgICAgLyogSWYgbiBpcyBub3Qgb24gYW55IGhhc2ggY2hhaW4sIHByZXZbbl0gaXMgZ2FyYmFnZSBidXRcbiAgICAgICAgICogaXRzIHZhbHVlIHdpbGwgbmV2ZXIgYmUgdXNlZC5cbiAgICAgICAgICovXG4gICAgICB9IHdoaWxlICgtLW4pO1xuXG4gICAgICBtb3JlICs9IF93X3NpemU7XG4gICAgfVxuICAgIGlmIChzLnN0cm0uYXZhaWxfaW4gPT09IDApIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cblxuICAgIC8qIElmIHRoZXJlIHdhcyBubyBzbGlkaW5nOlxuICAgICAqICAgIHN0cnN0YXJ0IDw9IFdTSVpFK01BWF9ESVNULTEgJiYgbG9va2FoZWFkIDw9IE1JTl9MT09LQUhFQUQgLSAxICYmXG4gICAgICogICAgbW9yZSA9PSB3aW5kb3dfc2l6ZSAtIGxvb2thaGVhZCAtIHN0cnN0YXJ0XG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIChNSU5fTE9PS0FIRUFELTEgKyBXU0laRSArIE1BWF9ESVNULTEpXG4gICAgICogPT4gbW9yZSA+PSB3aW5kb3dfc2l6ZSAtIDIqV1NJWkUgKyAyXG4gICAgICogSW4gdGhlIEJJR19NRU0gb3IgTU1BUCBjYXNlIChub3QgeWV0IHN1cHBvcnRlZCksXG4gICAgICogICB3aW5kb3dfc2l6ZSA9PSBpbnB1dF9zaXplICsgTUlOX0xPT0tBSEVBRCAgJiZcbiAgICAgKiAgIHN0cnN0YXJ0ICsgcy0+bG9va2FoZWFkIDw9IGlucHV0X3NpemUgPT4gbW9yZSA+PSBNSU5fTE9PS0FIRUFELlxuICAgICAqIE90aGVyd2lzZSwgd2luZG93X3NpemUgPT0gMipXU0laRSBzbyBtb3JlID49IDIuXG4gICAgICogSWYgdGhlcmUgd2FzIHNsaWRpbmcsIG1vcmUgPj0gV1NJWkUuIFNvIGluIGFsbCBjYXNlcywgbW9yZSA+PSAyLlxuICAgICAqL1xuICAgIC8vQXNzZXJ0KG1vcmUgPj0gMiwgXCJtb3JlIDwgMlwiKTtcbiAgICBuID0gcmVhZF9idWYocy5zdHJtLCBzLndpbmRvdywgcy5zdHJzdGFydCArIHMubG9va2FoZWFkLCBtb3JlKTtcbiAgICBzLmxvb2thaGVhZCArPSBuO1xuXG4gICAgLyogSW5pdGlhbGl6ZSB0aGUgaGFzaCB2YWx1ZSBub3cgdGhhdCB3ZSBoYXZlIHNvbWUgaW5wdXQ6ICovXG4gICAgaWYgKHMubG9va2FoZWFkICsgcy5pbnNlcnQgPj0gTUlOX01BVENIKSB7XG4gICAgICBzdHIgPSBzLnN0cnN0YXJ0IC0gcy5pbnNlcnQ7XG4gICAgICBzLmluc19oID0gcy53aW5kb3dbc3RyXTtcblxuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyAxXSk7ICovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzdHIgKyAxXSk7XG4vLyNpZiBNSU5fTUFUQ0ggIT0gM1xuLy8gICAgICAgIENhbGwgdXBkYXRlX2hhc2goKSBNSU5fTUFUQ0gtMyBtb3JlIHRpbWVzXG4vLyNlbmRpZlxuICAgICAgd2hpbGUgKHMuaW5zZXJ0KSB7XG4gICAgICAgIC8qIFVQREFURV9IQVNIKHMsIHMtPmluc19oLCBzLT53aW5kb3dbc3RyICsgTUlOX01BVENILTFdKTsgKi9cbiAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pO1xuXG4gICAgICAgIHMucHJldltzdHIgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHN0cjtcbiAgICAgICAgc3RyKys7XG4gICAgICAgIHMuaW5zZXJ0LS07XG4gICAgICAgIGlmIChzLmxvb2thaGVhZCArIHMuaW5zZXJ0IDwgTUlOX01BVENIKSB7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlIHdob2xlIGlucHV0IGhhcyBsZXNzIHRoYW4gTUlOX01BVENIIGJ5dGVzLCBpbnNfaCBpcyBnYXJiYWdlLFxuICAgICAqIGJ1dCB0aGlzIGlzIG5vdCBpbXBvcnRhbnQgc2luY2Ugb25seSBsaXRlcmFsIGJ5dGVzIHdpbGwgYmUgZW1pdHRlZC5cbiAgICAgKi9cblxuICB9IHdoaWxlIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgcy5zdHJtLmF2YWlsX2luICE9PSAwKTtcblxuICAvKiBJZiB0aGUgV0lOX0lOSVQgYnl0ZXMgYWZ0ZXIgdGhlIGVuZCBvZiB0aGUgY3VycmVudCBkYXRhIGhhdmUgbmV2ZXIgYmVlblxuICAgKiB3cml0dGVuLCB0aGVuIHplcm8gdGhvc2UgYnl0ZXMgaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHJlcG9ydHMgb2ZcbiAgICogdGhlIHVzZSBvZiB1bmluaXRpYWxpemVkIChvciB1bmluaXRpYWxpc2VkIGFzIEp1bGlhbiB3cml0ZXMpIGJ5dGVzIGJ5XG4gICAqIHRoZSBsb25nZXN0IG1hdGNoIHJvdXRpbmVzLiAgVXBkYXRlIHRoZSBoaWdoIHdhdGVyIG1hcmsgZm9yIHRoZSBuZXh0XG4gICAqIHRpbWUgdGhyb3VnaCBoZXJlLiAgV0lOX0lOSVQgaXMgc2V0IHRvIE1BWF9NQVRDSCBzaW5jZSB0aGUgbG9uZ2VzdCBtYXRjaFxuICAgKiByb3V0aW5lcyBhbGxvdyBzY2FubmluZyB0byBzdHJzdGFydCArIE1BWF9NQVRDSCwgaWdub3JpbmcgbG9va2FoZWFkLlxuICAgKi9cbi8vICBpZiAocy5oaWdoX3dhdGVyIDwgcy53aW5kb3dfc2l6ZSkge1xuLy8gICAgY29uc3QgY3VyciA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZDtcbi8vICAgIGxldCBpbml0ID0gMDtcbi8vXG4vLyAgICBpZiAocy5oaWdoX3dhdGVyIDwgY3Vycikge1xuLy8gICAgICAvKiBQcmV2aW91cyBoaWdoIHdhdGVyIG1hcmsgYmVsb3cgY3VycmVudCBkYXRhIC0tIHplcm8gV0lOX0lOSVRcbi8vICAgICAgICogYnl0ZXMgb3IgdXAgdG8gZW5kIG9mIHdpbmRvdywgd2hpY2hldmVyIGlzIGxlc3MuXG4vLyAgICAgICAqL1xuLy8gICAgICBpbml0ID0gcy53aW5kb3dfc2l6ZSAtIGN1cnI7XG4vLyAgICAgIGlmIChpbml0ID4gV0lOX0lOSVQpXG4vLyAgICAgICAgaW5pdCA9IFdJTl9JTklUO1xuLy8gICAgICB6bWVtemVybyhzLT53aW5kb3cgKyBjdXJyLCAodW5zaWduZWQpaW5pdCk7XG4vLyAgICAgIHMtPmhpZ2hfd2F0ZXIgPSBjdXJyICsgaW5pdDtcbi8vICAgIH1cbi8vICAgIGVsc2UgaWYgKHMtPmhpZ2hfd2F0ZXIgPCAodWxnKWN1cnIgKyBXSU5fSU5JVCkge1xuLy8gICAgICAvKiBIaWdoIHdhdGVyIG1hcmsgYXQgb3IgYWJvdmUgY3VycmVudCBkYXRhLCBidXQgYmVsb3cgY3VycmVudCBkYXRhXG4vLyAgICAgICAqIHBsdXMgV0lOX0lOSVQgLS0gemVybyBvdXQgdG8gY3VycmVudCBkYXRhIHBsdXMgV0lOX0lOSVQsIG9yIHVwXG4vLyAgICAgICAqIHRvIGVuZCBvZiB3aW5kb3csIHdoaWNoZXZlciBpcyBsZXNzLlxuLy8gICAgICAgKi9cbi8vICAgICAgaW5pdCA9ICh1bGcpY3VyciArIFdJTl9JTklUIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgaWYgKGluaXQgPiBzLT53aW5kb3dfc2l6ZSAtIHMtPmhpZ2hfd2F0ZXIpXG4vLyAgICAgICAgaW5pdCA9IHMtPndpbmRvd19zaXplIC0gcy0+aGlnaF93YXRlcjtcbi8vICAgICAgem1lbXplcm8ocy0+d2luZG93ICsgcy0+aGlnaF93YXRlciwgKHVuc2lnbmVkKWluaXQpO1xuLy8gICAgICBzLT5oaWdoX3dhdGVyICs9IGluaXQ7XG4vLyAgICB9XG4vLyAgfVxuLy9cbi8vICBBc3NlcnQoKHVsZylzLT5zdHJzdGFydCA8PSBzLT53aW5kb3dfc2l6ZSAtIE1JTl9MT09LQUhFQUQsXG4vLyAgICBcIm5vdCBlbm91Z2ggcm9vbSBmb3Igc2VhcmNoXCIpO1xufTtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBDb3B5IHdpdGhvdXQgY29tcHJlc3Npb24gYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVyblxuICogdGhlIGN1cnJlbnQgYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IGluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgZGljdGlvbmFyeSBzaW5jZVxuICogdW5jb21wcmVzc2libGUgZGF0YSBpcyBwcm9iYWJseSBub3QgdXNlZnVsLiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWRcbiAqIG9ubHkgZm9yIHRoZSBsZXZlbD0wIGNvbXByZXNzaW9uIG9wdGlvbi5cbiAqIE5PVEU6IHRoaXMgZnVuY3Rpb24gc2hvdWxkIGJlIG9wdGltaXplZCB0byBhdm9pZCBleHRyYSBjb3B5aW5nIGZyb21cbiAqIHdpbmRvdyB0byBwZW5kaW5nX2J1Zi5cbiAqL1xuY29uc3QgZGVmbGF0ZV9zdG9yZWQgPSAocywgZmx1c2gpID0+IHtcblxuICAvKiBTdG9yZWQgYmxvY2tzIGFyZSBsaW1pdGVkIHRvIDB4ZmZmZiBieXRlcywgcGVuZGluZ19idWYgaXMgbGltaXRlZFxuICAgKiB0byBwZW5kaW5nX2J1Zl9zaXplLCBhbmQgZWFjaCBzdG9yZWQgYmxvY2sgaGFzIGEgNSBieXRlIGhlYWRlcjpcbiAgICovXG4gIGxldCBtYXhfYmxvY2tfc2l6ZSA9IDB4ZmZmZjtcblxuICBpZiAobWF4X2Jsb2NrX3NpemUgPiBzLnBlbmRpbmdfYnVmX3NpemUgLSA1KSB7XG4gICAgbWF4X2Jsb2NrX3NpemUgPSBzLnBlbmRpbmdfYnVmX3NpemUgLSA1O1xuICB9XG5cbiAgLyogQ29weSBhcyBtdWNoIGFzIHBvc3NpYmxlIGZyb20gaW5wdXQgdG8gb3V0cHV0OiAqL1xuICBmb3IgKDs7KSB7XG4gICAgLyogRmlsbCB0aGUgd2luZG93IGFzIG11Y2ggYXMgcG9zc2libGU6ICovXG4gICAgaWYgKHMubG9va2FoZWFkIDw9IDEpIHtcblxuICAgICAgLy9Bc3NlcnQocy0+c3Ryc3RhcnQgPCBzLT53X3NpemUrTUFYX0RJU1QocykgfHxcbiAgICAgIC8vICBzLT5ibG9ja19zdGFydCA+PSAobG9uZylzLT53X3NpemUsIFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIGlmICghKHMuc3Ryc3RhcnQgPCBzLndfc2l6ZSArIChzLndfc2l6ZSAtIE1JTl9MT09LQUhFQUQpIHx8XG4vLyAgICAgICAgcy5ibG9ja19zdGFydCA+PSBzLndfc2l6ZSkpIHtcbi8vICAgICAgICB0aHJvdyAgbmV3IEVycm9yKFwic2xpZGUgdG9vIGxhdGVcIik7XG4vLyAgICAgIH1cblxuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDAgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gkMikge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuXG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgICAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgIH1cbiAgICAvL0Fzc2VydChzLT5ibG9ja19zdGFydCA+PSAwTCwgXCJibG9jayBnb25lXCIpO1xuLy8gICAgaWYgKHMuYmxvY2tfc3RhcnQgPCAwKSB0aHJvdyBuZXcgRXJyb3IoXCJibG9jayBnb25lXCIpO1xuXG4gICAgcy5zdHJzdGFydCArPSBzLmxvb2thaGVhZDtcbiAgICBzLmxvb2thaGVhZCA9IDA7XG5cbiAgICAvKiBFbWl0IGEgc3RvcmVkIGJsb2NrIGlmIHBlbmRpbmdfYnVmIHdpbGwgYmUgZnVsbDogKi9cbiAgICBjb25zdCBtYXhfc3RhcnQgPSBzLmJsb2NrX3N0YXJ0ICsgbWF4X2Jsb2NrX3NpemU7XG5cbiAgICBpZiAocy5zdHJzdGFydCA9PT0gMCB8fCBzLnN0cnN0YXJ0ID49IG1heF9zdGFydCkge1xuICAgICAgLyogc3Ryc3RhcnQgPT0gMCBpcyBwb3NzaWJsZSB3aGVuIHdyYXBhcm91bmQgb24gMTYtYml0IG1hY2hpbmUgKi9cbiAgICAgIHMubG9va2FoZWFkID0gcy5zdHJzdGFydCAtIG1heF9zdGFydDtcbiAgICAgIHMuc3Ryc3RhcnQgPSBtYXhfc3RhcnQ7XG4gICAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDApOyAqKiovXG4gICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICAvKioqL1xuXG5cbiAgICB9XG4gICAgLyogRmx1c2ggaWYgd2UgbWF5IGhhdmUgdG8gc2xpZGUsIG90aGVyd2lzZSBibG9ja19zdGFydCBtYXkgYmVjb21lXG4gICAgICogbmVnYXRpdmUgYW5kIHRoZSBkYXRhIHdpbGwgYmUgZ29uZTpcbiAgICAgKi9cbiAgICBpZiAocy5zdHJzdGFydCAtIHMuYmxvY2tfc3RhcnQgPj0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpIHtcbiAgICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICAgIH1cbiAgICAgIC8qKiovXG4gICAgfVxuICB9XG5cbiAgcy5pbnNlcnQgPSAwO1xuXG4gIGlmIChmbHVzaCA9PT0gWl9GSU5JU0gkMykge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMSk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIHRydWUpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfRklOSVNIX1NUQVJURUQ7XG4gICAgfVxuICAgIC8qKiovXG4gICAgcmV0dXJuIEJTX0ZJTklTSF9ET05FO1xuICB9XG5cbiAgaWYgKHMuc3Ryc3RhcnQgPiBzLmJsb2NrX3N0YXJ0KSB7XG4gICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgIGZsdXNoX2Jsb2NrX29ubHkocywgZmFsc2UpO1xuICAgIGlmIChzLnN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgIH1cbiAgICAvKioqL1xuICB9XG5cbiAgcmV0dXJuIEJTX05FRURfTU9SRTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogQ29tcHJlc3MgYXMgbXVjaCBhcyBwb3NzaWJsZSBmcm9tIHRoZSBpbnB1dCBzdHJlYW0sIHJldHVybiB0aGUgY3VycmVudFxuICogYmxvY2sgc3RhdGUuXG4gKiBUaGlzIGZ1bmN0aW9uIGRvZXMgbm90IHBlcmZvcm0gbGF6eSBldmFsdWF0aW9uIG9mIG1hdGNoZXMgYW5kIGluc2VydHNcbiAqIG5ldyBzdHJpbmdzIGluIHRoZSBkaWN0aW9uYXJ5IG9ubHkgZm9yIHVubWF0Y2hlZCBzdHJpbmdzIG9yIGZvciBzaG9ydFxuICogbWF0Y2hlcy4gSXQgaXMgdXNlZCBvbmx5IGZvciB0aGUgZmFzdCBjb21wcmVzc2lvbiBvcHRpb25zLlxuICovXG5jb25zdCBkZWZsYXRlX2Zhc3QgPSAocywgZmx1c2gpID0+IHtcblxuICBsZXQgaGFzaF9oZWFkOyAgICAgICAgLyogaGVhZCBvZiB0aGUgaGFzaCBjaGFpbiAqL1xuICBsZXQgYmZsdXNoOyAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gkMikge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgIGJyZWFrOyAvKiBmbHVzaCB0aGUgY3VycmVudCBibG9jayAqL1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEluc2VydCB0aGUgc3RyaW5nIHdpbmRvd1tzdHJzdGFydCAuLiBzdHJzdGFydCsyXSBpbiB0aGVcbiAgICAgKiBkaWN0aW9uYXJ5LCBhbmQgc2V0IGhhc2hfaGVhZCB0byB0aGUgaGVhZCBvZiB0aGUgaGFzaCBjaGFpbjpcbiAgICAgKi9cbiAgICBoYXNoX2hlYWQgPSAwLypOSUwqLztcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAvKioqIElOU0VSVF9TVFJJTkcocywgcy5zdHJzdGFydCwgaGFzaF9oZWFkKTsgKioqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKTtcbiAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgcy5oZWFkW3MuaW5zX2hdID0gcy5zdHJzdGFydDtcbiAgICAgIC8qKiovXG4gICAgfVxuXG4gICAgLyogRmluZCB0aGUgbG9uZ2VzdCBtYXRjaCwgZGlzY2FyZGluZyB0aG9zZSA8PSBwcmV2X2xlbmd0aC5cbiAgICAgKiBBdCB0aGlzIHBvaW50IHdlIGhhdmUgYWx3YXlzIG1hdGNoX2xlbmd0aCA8IE1JTl9NQVRDSFxuICAgICAqL1xuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmICgocy5zdHJzdGFydCAtIGhhc2hfaGVhZCkgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkpKSB7XG4gICAgICAvKiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgd2UgcHJldmVudCBtYXRjaGVzIHdpdGggdGhlIHN0cmluZ1xuICAgICAgICogb2Ygd2luZG93IGluZGV4IDAgKGluIHBhcnRpY3VsYXIgd2UgaGF2ZSB0byBhdm9pZCBhIG1hdGNoXG4gICAgICAgKiBvZiB0aGUgc3RyaW5nIHdpdGggaXRzZWxmIGF0IHRoZSBzdGFydCBvZiB0aGUgaW5wdXQgZmlsZSkuXG4gICAgICAgKi9cbiAgICAgIHMubWF0Y2hfbGVuZ3RoID0gbG9uZ2VzdF9tYXRjaChzLCBoYXNoX2hlYWQpO1xuICAgICAgLyogbG9uZ2VzdF9tYXRjaCgpIHNldHMgbWF0Y2hfc3RhcnQgKi9cbiAgICB9XG4gICAgaWYgKHMubWF0Y2hfbGVuZ3RoID49IE1JTl9NQVRDSCkge1xuICAgICAgLy8gY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGgpOyAvLyBmb3IgZGVidWcgb25seVxuXG4gICAgICAvKioqIF90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSBzLm1hdGNoX3N0YXJ0LFxuICAgICAgICAgICAgICAgICAgICAgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gsIGJmbHVzaCk7ICoqKi9cbiAgICAgIGJmbHVzaCA9IF90cl90YWxseShzLCBzLnN0cnN0YXJ0IC0gcy5tYXRjaF9zdGFydCwgcy5tYXRjaF9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuXG4gICAgICBzLmxvb2thaGVhZCAtPSBzLm1hdGNoX2xlbmd0aDtcblxuICAgICAgLyogSW5zZXJ0IG5ldyBzdHJpbmdzIGluIHRoZSBoYXNoIHRhYmxlIG9ubHkgaWYgdGhlIG1hdGNoIGxlbmd0aFxuICAgICAgICogaXMgbm90IHRvbyBsYXJnZS4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICAgICAqL1xuICAgICAgaWYgKHMubWF0Y2hfbGVuZ3RoIDw9IHMubWF4X2xhenlfbWF0Y2gvKm1heF9pbnNlcnRfbGVuZ3RoKi8gJiYgcy5sb29rYWhlYWQgPj0gTUlOX01BVENIKSB7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoLS07IC8qIHN0cmluZyBhdCBzdHJzdGFydCBhbHJlYWR5IGluIHRhYmxlICovXG4gICAgICAgIGRvIHtcbiAgICAgICAgICBzLnN0cnN0YXJ0Kys7XG4gICAgICAgICAgLyoqKiBJTlNFUlRfU1RSSU5HKHMsIHMuc3Ryc3RhcnQsIGhhc2hfaGVhZCk7ICoqKi9cbiAgICAgICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pO1xuICAgICAgICAgIGhhc2hfaGVhZCA9IHMucHJldltzLnN0cnN0YXJ0ICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuICAgICAgICAgIHMuaGVhZFtzLmluc19oXSA9IHMuc3Ryc3RhcnQ7XG4gICAgICAgICAgLyoqKi9cbiAgICAgICAgICAvKiBzdHJzdGFydCBuZXZlciBleGNlZWRzIFdTSVpFLU1BWF9NQVRDSCwgc28gdGhlcmUgYXJlXG4gICAgICAgICAgICogYWx3YXlzIE1JTl9NQVRDSCBieXRlcyBhaGVhZC5cbiAgICAgICAgICAgKi9cbiAgICAgICAgfSB3aGlsZSAoLS1zLm1hdGNoX2xlbmd0aCAhPT0gMCk7XG4gICAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIH0gZWxzZVxuICAgICAge1xuICAgICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgICBzLm1hdGNoX2xlbmd0aCA9IDA7XG4gICAgICAgIHMuaW5zX2ggPSBzLndpbmRvd1tzLnN0cnN0YXJ0XTtcbiAgICAgICAgLyogVVBEQVRFX0hBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCsxXSk7ICovXG4gICAgICAgIHMuaW5zX2ggPSBIQVNIKHMsIHMuaW5zX2gsIHMud2luZG93W3Muc3Ryc3RhcnQgKyAxXSk7XG5cbi8vI2lmIE1JTl9NQVRDSCAhPSAzXG4vLyAgICAgICAgICAgICAgICBDYWxsIFVQREFURV9IQVNIKCkgTUlOX01BVENILTMgbW9yZSB0aW1lc1xuLy8jZW5kaWZcbiAgICAgICAgLyogSWYgbG9va2FoZWFkIDwgTUlOX01BVENILCBpbnNfaCBpcyBnYXJiYWdlLCBidXQgaXQgZG9lcyBub3RcbiAgICAgICAgICogbWF0dGVyIHNpbmNlIGl0IHdpbGwgYmUgcmVjb21wdXRlZCBhdCBuZXh0IGRlZmxhdGUgY2FsbC5cbiAgICAgICAgICovXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8qIE5vIG1hdGNoLCBvdXRwdXQgYSBsaXRlcmFsIGJ5dGUgKi9cbiAgICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy53aW5kb3dbcy5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAoKHMuc3Ryc3RhcnQgPCAoTUlOX01BVENIIC0gMSkpID8gcy5zdHJzdGFydCA6IE1JTl9NQVRDSCAtIDEpO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogU2FtZSBhcyBhYm92ZSwgYnV0IGFjaGlldmVzIGJldHRlciBjb21wcmVzc2lvbi4gV2UgdXNlIGEgbGF6eVxuICogZXZhbHVhdGlvbiBmb3IgbWF0Y2hlczogYSBtYXRjaCBpcyBmaW5hbGx5IGFkb3B0ZWQgb25seSBpZiB0aGVyZSBpc1xuICogbm8gYmV0dGVyIG1hdGNoIGF0IHRoZSBuZXh0IHdpbmRvdyBwb3NpdGlvbi5cbiAqL1xuY29uc3QgZGVmbGF0ZV9zbG93ID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGhhc2hfaGVhZDsgICAgICAgICAgLyogaGVhZCBvZiBoYXNoIGNoYWluICovXG4gIGxldCBiZmx1c2g7ICAgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cblxuICBsZXQgbWF4X2luc2VydDtcblxuICAvKiBQcm9jZXNzIHRoZSBpbnB1dCBibG9jay4gKi9cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBuZXh0IG1hdGNoLCBwbHVzIE1JTl9NQVRDSCBieXRlcyB0byBpbnNlcnQgdGhlXG4gICAgICogc3RyaW5nIGZvbGxvd2luZyB0aGUgbmV4dCBtYXRjaC5cbiAgICAgKi9cbiAgICBpZiAocy5sb29rYWhlYWQgPCBNSU5fTE9PS0FIRUFEKSB7XG4gICAgICBmaWxsX3dpbmRvdyhzKTtcbiAgICAgIGlmIChzLmxvb2thaGVhZCA8IE1JTl9MT09LQUhFQUQgJiYgZmx1c2ggPT09IFpfTk9fRkxVU0gkMikge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7IGJyZWFrOyB9IC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgfVxuXG4gICAgLyogSW5zZXJ0IHRoZSBzdHJpbmcgd2luZG93W3N0cnN0YXJ0IC4uIHN0cnN0YXJ0KzJdIGluIHRoZVxuICAgICAqIGRpY3Rpb25hcnksIGFuZCBzZXQgaGFzaF9oZWFkIHRvIHRoZSBoZWFkIG9mIHRoZSBoYXNoIGNoYWluOlxuICAgICAqL1xuICAgIGhhc2hfaGVhZCA9IDAvKk5JTCovO1xuICAgIGlmIChzLmxvb2thaGVhZCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICBzLmluc19oID0gSEFTSChzLCBzLmluc19oLCBzLndpbmRvd1tzLnN0cnN0YXJ0ICsgTUlOX01BVENIIC0gMV0pO1xuICAgICAgaGFzaF9oZWFkID0gcy5wcmV2W3Muc3Ryc3RhcnQgJiBzLndfbWFza10gPSBzLmhlYWRbcy5pbnNfaF07XG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgLyoqKi9cbiAgICB9XG5cbiAgICAvKiBGaW5kIHRoZSBsb25nZXN0IG1hdGNoLCBkaXNjYXJkaW5nIHRob3NlIDw9IHByZXZfbGVuZ3RoLlxuICAgICAqL1xuICAgIHMucHJldl9sZW5ndGggPSBzLm1hdGNoX2xlbmd0aDtcbiAgICBzLnByZXZfbWF0Y2ggPSBzLm1hdGNoX3N0YXJ0O1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcblxuICAgIGlmIChoYXNoX2hlYWQgIT09IDAvKk5JTCovICYmIHMucHJldl9sZW5ndGggPCBzLm1heF9sYXp5X21hdGNoICYmXG4gICAgICAgIHMuc3Ryc3RhcnQgLSBoYXNoX2hlYWQgPD0gKHMud19zaXplIC0gTUlOX0xPT0tBSEVBRCkvKk1BWF9ESVNUKHMpKi8pIHtcbiAgICAgIC8qIFRvIHNpbXBsaWZ5IHRoZSBjb2RlLCB3ZSBwcmV2ZW50IG1hdGNoZXMgd2l0aCB0aGUgc3RyaW5nXG4gICAgICAgKiBvZiB3aW5kb3cgaW5kZXggMCAoaW4gcGFydGljdWxhciB3ZSBoYXZlIHRvIGF2b2lkIGEgbWF0Y2hcbiAgICAgICAqIG9mIHRoZSBzdHJpbmcgd2l0aCBpdHNlbGYgYXQgdGhlIHN0YXJ0IG9mIHRoZSBpbnB1dCBmaWxlKS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSBsb25nZXN0X21hdGNoKHMsIGhhc2hfaGVhZCk7XG4gICAgICAvKiBsb25nZXN0X21hdGNoKCkgc2V0cyBtYXRjaF9zdGFydCAqL1xuXG4gICAgICBpZiAocy5tYXRjaF9sZW5ndGggPD0gNSAmJlxuICAgICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfRklMVEVSRUQgfHwgKHMubWF0Y2hfbGVuZ3RoID09PSBNSU5fTUFUQ0ggJiYgcy5zdHJzdGFydCAtIHMubWF0Y2hfc3RhcnQgPiA0MDk2LypUT09fRkFSKi8pKSkge1xuXG4gICAgICAgIC8qIElmIHByZXZfbWF0Y2ggaXMgYWxzbyBNSU5fTUFUQ0gsIG1hdGNoX3N0YXJ0IGlzIGdhcmJhZ2VcbiAgICAgICAgICogYnV0IHdlIHdpbGwgaWdub3JlIHRoZSBjdXJyZW50IG1hdGNoIGFueXdheS5cbiAgICAgICAgICovXG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUlOX01BVENIIC0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgLyogSWYgdGhlcmUgd2FzIGEgbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHN0ZXAgYW5kIHRoZSBjdXJyZW50XG4gICAgICogbWF0Y2ggaXMgbm90IGJldHRlciwgb3V0cHV0IHRoZSBwcmV2aW91cyBtYXRjaDpcbiAgICAgKi9cbiAgICBpZiAocy5wcmV2X2xlbmd0aCA+PSBNSU5fTUFUQ0ggJiYgcy5tYXRjaF9sZW5ndGggPD0gcy5wcmV2X2xlbmd0aCkge1xuICAgICAgbWF4X2luc2VydCA9IHMuc3Ryc3RhcnQgKyBzLmxvb2thaGVhZCAtIE1JTl9NQVRDSDtcbiAgICAgIC8qIERvIG5vdCBpbnNlcnQgc3RyaW5ncyBpbiBoYXNoIHRhYmxlIGJleW9uZCB0aGlzLiAqL1xuXG4gICAgICAvL2NoZWNrX21hdGNoKHMsIHMuc3Ryc3RhcnQtMSwgcy5wcmV2X21hdGNoLCBzLnByZXZfbGVuZ3RoKTtcblxuICAgICAgLyoqKl90cl90YWxseV9kaXN0KHMsIHMuc3Ryc3RhcnQgLSAxIC0gcy5wcmV2X21hdGNoLFxuICAgICAgICAgICAgICAgICAgICAgcy5wcmV2X2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgcy5zdHJzdGFydCAtIDEgLSBzLnByZXZfbWF0Y2gsIHMucHJldl9sZW5ndGggLSBNSU5fTUFUQ0gpO1xuICAgICAgLyogSW5zZXJ0IGluIGhhc2ggdGFibGUgYWxsIHN0cmluZ3MgdXAgdG8gdGhlIGVuZCBvZiB0aGUgbWF0Y2guXG4gICAgICAgKiBzdHJzdGFydC0xIGFuZCBzdHJzdGFydCBhcmUgYWxyZWFkeSBpbnNlcnRlZC4gSWYgdGhlcmUgaXMgbm90XG4gICAgICAgKiBlbm91Z2ggbG9va2FoZWFkLCB0aGUgbGFzdCB0d28gc3RyaW5ncyBhcmUgbm90IGluc2VydGVkIGluXG4gICAgICAgKiB0aGUgaGFzaCB0YWJsZS5cbiAgICAgICAqL1xuICAgICAgcy5sb29rYWhlYWQgLT0gcy5wcmV2X2xlbmd0aCAtIDE7XG4gICAgICBzLnByZXZfbGVuZ3RoIC09IDI7XG4gICAgICBkbyB7XG4gICAgICAgIGlmICgrK3Muc3Ryc3RhcnQgPD0gbWF4X2luc2VydCkge1xuICAgICAgICAgIC8qKiogSU5TRVJUX1NUUklORyhzLCBzLnN0cnN0YXJ0LCBoYXNoX2hlYWQpOyAqKiovXG4gICAgICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbcy5zdHJzdGFydCArIE1JTl9NQVRDSCAtIDFdKTtcbiAgICAgICAgICBoYXNoX2hlYWQgPSBzLnByZXZbcy5zdHJzdGFydCAmIHMud19tYXNrXSA9IHMuaGVhZFtzLmluc19oXTtcbiAgICAgICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzLnN0cnN0YXJ0O1xuICAgICAgICAgIC8qKiovXG4gICAgICAgIH1cbiAgICAgIH0gd2hpbGUgKC0tcy5wcmV2X2xlbmd0aCAhPT0gMCk7XG4gICAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gICAgICBzLm1hdGNoX2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gICAgICBzLnN0cnN0YXJ0Kys7XG5cbiAgICAgIGlmIChiZmx1c2gpIHtcbiAgICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgaWYgKHMuc3RybS5hdmFpbF9vdXQgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIC8qKiovXG4gICAgICB9XG5cbiAgICB9IGVsc2UgaWYgKHMubWF0Y2hfYXZhaWxhYmxlKSB7XG4gICAgICAvKiBJZiB0aGVyZSB3YXMgbm8gbWF0Y2ggYXQgdGhlIHByZXZpb3VzIHBvc2l0aW9uLCBvdXRwdXQgYVxuICAgICAgICogc2luZ2xlIGxpdGVyYWwuIElmIHRoZXJlIHdhcyBhIG1hdGNoIGJ1dCB0aGUgY3VycmVudCBtYXRjaFxuICAgICAgICogaXMgbG9uZ2VyLCB0cnVuY2F0ZSB0aGUgcHJldmlvdXMgbWF0Y2ggdG8gYSBzaW5nbGUgbGl0ZXJhbC5cbiAgICAgICAqL1xuICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsXCIlY1wiLCBzLT53aW5kb3dbcy0+c3Ryc3RhcnQtMV0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgICBiZmx1c2ggPSBfdHJfdGFsbHkocywgMCwgcy53aW5kb3dbcy5zdHJzdGFydCAtIDFdKTtcblxuICAgICAgaWYgKGJmbHVzaCkge1xuICAgICAgICAvKioqIEZMVVNIX0JMT0NLX09OTFkocywgMCkgKioqL1xuICAgICAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICAgICAgLyoqKi9cbiAgICAgIH1cbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICAgIHMubG9va2FoZWFkLS07XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvKiBUaGVyZSBpcyBubyBwcmV2aW91cyBtYXRjaCB0byBjb21wYXJlIHdpdGgsIHdhaXQgZm9yXG4gICAgICAgKiB0aGUgbmV4dCBzdGVwIHRvIGRlY2lkZS5cbiAgICAgICAqL1xuICAgICAgcy5tYXRjaF9hdmFpbGFibGUgPSAxO1xuICAgICAgcy5zdHJzdGFydCsrO1xuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICB9XG4gIH1cbiAgLy9Bc3NlcnQgKGZsdXNoICE9IFpfTk9fRkxVU0gsIFwibm8gZmx1c2g/XCIpO1xuICBpZiAocy5tYXRjaF9hdmFpbGFibGUpIHtcbiAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydC0xXSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0LTFdLCBiZmx1c2gpOyAqKiovXG4gICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnQgLSAxXSk7XG5cbiAgICBzLm1hdGNoX2F2YWlsYWJsZSA9IDA7XG4gIH1cbiAgcy5pbnNlcnQgPSBzLnN0cnN0YXJ0IDwgTUlOX01BVENIIC0gMSA/IHMuc3Ryc3RhcnQgOiBNSU5fTUFUQ0ggLSAxO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuXG4gIHJldHVybiBCU19CTE9DS19ET05FO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiAqIEZvciBaX1JMRSwgc2ltcGx5IGxvb2sgZm9yIHJ1bnMgb2YgYnl0ZXMsIGdlbmVyYXRlIG1hdGNoZXMgb25seSBvZiBkaXN0YW5jZVxuICogb25lLiAgRG8gbm90IG1haW50YWluIGEgaGFzaCB0YWJsZS4gIChJdCB3aWxsIGJlIHJlZ2VuZXJhdGVkIGlmIHRoaXMgcnVuIG9mXG4gKiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBaX1JMRS4pXG4gKi9cbmNvbnN0IGRlZmxhdGVfcmxlID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgICAvKiBzZXQgaWYgY3VycmVudCBibG9jayBtdXN0IGJlIGZsdXNoZWQgKi9cbiAgbGV0IHByZXY7ICAgICAgICAgICAgICAvKiBieXRlIGF0IGRpc3RhbmNlIG9uZSB0byBtYXRjaCAqL1xuICBsZXQgc2Nhbiwgc3RyZW5kOyAgICAgIC8qIHNjYW4gZ29lcyB1cCB0byBzdHJlbmQgZm9yIGxlbmd0aCBvZiBydW4gKi9cblxuICBjb25zdCBfd2luID0gcy53aW5kb3c7XG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGFsd2F5cyBoYXZlIGVub3VnaCBsb29rYWhlYWQsIGV4Y2VwdFxuICAgICAqIGF0IHRoZSBlbmQgb2YgdGhlIGlucHV0IGZpbGUuIFdlIG5lZWQgTUFYX01BVENIIGJ5dGVzXG4gICAgICogZm9yIHRoZSBsb25nZXN0IHJ1biwgcGx1cyBvbmUgZm9yIHRoZSB1bnJvbGxlZCBsb29wLlxuICAgICAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA8PSBNQVhfTUFUQ0gpIHtcbiAgICAgIGZpbGxfd2luZG93KHMpO1xuICAgICAgaWYgKHMubG9va2FoZWFkIDw9IE1BWF9NQVRDSCAmJiBmbHVzaCA9PT0gWl9OT19GTFVTSCQyKSB7XG4gICAgICAgIHJldHVybiBCU19ORUVEX01PUkU7XG4gICAgICB9XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHsgYnJlYWs7IH0gLyogZmx1c2ggdGhlIGN1cnJlbnQgYmxvY2sgKi9cbiAgICB9XG5cbiAgICAvKiBTZWUgaG93IG1hbnkgdGltZXMgdGhlIHByZXZpb3VzIGJ5dGUgcmVwZWF0cyAqL1xuICAgIHMubWF0Y2hfbGVuZ3RoID0gMDtcbiAgICBpZiAocy5sb29rYWhlYWQgPj0gTUlOX01BVENIICYmIHMuc3Ryc3RhcnQgPiAwKSB7XG4gICAgICBzY2FuID0gcy5zdHJzdGFydCAtIDE7XG4gICAgICBwcmV2ID0gX3dpbltzY2FuXTtcbiAgICAgIGlmIChwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSkge1xuICAgICAgICBzdHJlbmQgPSBzLnN0cnN0YXJ0ICsgTUFYX01BVENIO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgLypqc2hpbnQgbm9lbXB0eTpmYWxzZSovXG4gICAgICAgIH0gd2hpbGUgKHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmIHByZXYgPT09IF93aW5bKytzY2FuXSAmJlxuICAgICAgICAgICAgICAgICBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiYgcHJldiA9PT0gX3dpblsrK3NjYW5dICYmXG4gICAgICAgICAgICAgICAgIHByZXYgPT09IF93aW5bKytzY2FuXSAmJiBwcmV2ID09PSBfd2luWysrc2Nhbl0gJiZcbiAgICAgICAgICAgICAgICAgc2NhbiA8IHN0cmVuZCk7XG4gICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gTUFYX01BVENIIC0gKHN0cmVuZCAtIHNjYW4pO1xuICAgICAgICBpZiAocy5tYXRjaF9sZW5ndGggPiBzLmxvb2thaGVhZCkge1xuICAgICAgICAgIHMubWF0Y2hfbGVuZ3RoID0gcy5sb29rYWhlYWQ7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vQXNzZXJ0KHNjYW4gPD0gcy0+d2luZG93Kyh1SW50KShzLT53aW5kb3dfc2l6ZS0xKSwgXCJ3aWxkIHNjYW5cIik7XG4gICAgfVxuXG4gICAgLyogRW1pdCBtYXRjaCBpZiBoYXZlIHJ1biBvZiBNSU5fTUFUQ0ggb3IgbG9uZ2VyLCBlbHNlIGVtaXQgbGl0ZXJhbCAqL1xuICAgIGlmIChzLm1hdGNoX2xlbmd0aCA+PSBNSU5fTUFUQ0gpIHtcbiAgICAgIC8vY2hlY2tfbWF0Y2gocywgcy5zdHJzdGFydCwgcy5zdHJzdGFydCAtIDEsIHMubWF0Y2hfbGVuZ3RoKTtcblxuICAgICAgLyoqKiBfdHJfdGFsbHlfZGlzdChzLCAxLCBzLm1hdGNoX2xlbmd0aCAtIE1JTl9NQVRDSCwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDEsIHMubWF0Y2hfbGVuZ3RoIC0gTUlOX01BVENIKTtcblxuICAgICAgcy5sb29rYWhlYWQgLT0gcy5tYXRjaF9sZW5ndGg7XG4gICAgICBzLnN0cnN0YXJ0ICs9IHMubWF0Y2hfbGVuZ3RoO1xuICAgICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIH0gZWxzZSB7XG4gICAgICAvKiBObyBtYXRjaCwgb3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgICAvL1RyYWNldnYoKHN0ZGVycixcIiVjXCIsIHMtPndpbmRvd1tzLT5zdHJzdGFydF0pKTtcbiAgICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgICAgYmZsdXNoID0gX3RyX3RhbGx5KHMsIDAsIHMud2luZG93W3Muc3Ryc3RhcnRdKTtcblxuICAgICAgcy5sb29rYWhlYWQtLTtcbiAgICAgIHMuc3Ryc3RhcnQrKztcbiAgICB9XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogRm9yIFpfSFVGRk1BTl9PTkxZLCBkbyBub3QgbG9vayBmb3IgbWF0Y2hlcy4gIERvIG5vdCBtYWludGFpbiBhIGhhc2ggdGFibGUuXG4gKiAoSXQgd2lsbCBiZSByZWdlbmVyYXRlZCBpZiB0aGlzIHJ1biBvZiBkZWZsYXRlIHN3aXRjaGVzIGF3YXkgZnJvbSBIdWZmbWFuLilcbiAqL1xuY29uc3QgZGVmbGF0ZV9odWZmID0gKHMsIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJmbHVzaDsgICAgICAgICAgICAgLyogc2V0IGlmIGN1cnJlbnQgYmxvY2sgbXVzdCBiZSBmbHVzaGVkICovXG5cbiAgZm9yICg7Oykge1xuICAgIC8qIE1ha2Ugc3VyZSB0aGF0IHdlIGhhdmUgYSBsaXRlcmFsIHRvIHdyaXRlLiAqL1xuICAgIGlmIChzLmxvb2thaGVhZCA9PT0gMCkge1xuICAgICAgZmlsbF93aW5kb3cocyk7XG4gICAgICBpZiAocy5sb29rYWhlYWQgPT09IDApIHtcbiAgICAgICAgaWYgKGZsdXNoID09PSBaX05PX0ZMVVNIJDIpIHtcbiAgICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgICB9XG4gICAgICAgIGJyZWFrOyAgICAgIC8qIGZsdXNoIHRoZSBjdXJyZW50IGJsb2NrICovXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogT3V0cHV0IGEgbGl0ZXJhbCBieXRlICovXG4gICAgcy5tYXRjaF9sZW5ndGggPSAwO1xuICAgIC8vVHJhY2V2digoc3RkZXJyLFwiJWNcIiwgcy0+d2luZG93W3MtPnN0cnN0YXJ0XSkpO1xuICAgIC8qKiogX3RyX3RhbGx5X2xpdChzLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSwgYmZsdXNoKTsgKioqL1xuICAgIGJmbHVzaCA9IF90cl90YWxseShzLCAwLCBzLndpbmRvd1tzLnN0cnN0YXJ0XSk7XG4gICAgcy5sb29rYWhlYWQtLTtcbiAgICBzLnN0cnN0YXJ0Kys7XG4gICAgaWYgKGJmbHVzaCkge1xuICAgICAgLyoqKiBGTFVTSF9CTE9DSyhzLCAwKTsgKioqL1xuICAgICAgZmx1c2hfYmxvY2tfb25seShzLCBmYWxzZSk7XG4gICAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gQlNfTkVFRF9NT1JFO1xuICAgICAgfVxuICAgICAgLyoqKi9cbiAgICB9XG4gIH1cbiAgcy5pbnNlcnQgPSAwO1xuICBpZiAoZmx1c2ggPT09IFpfRklOSVNIJDMpIHtcbiAgICAvKioqIEZMVVNIX0JMT0NLKHMsIDEpOyAqKiovXG4gICAgZmx1c2hfYmxvY2tfb25seShzLCB0cnVlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX0ZJTklTSF9TVEFSVEVEO1xuICAgIH1cbiAgICAvKioqL1xuICAgIHJldHVybiBCU19GSU5JU0hfRE9ORTtcbiAgfVxuICBpZiAocy5sYXN0X2xpdCkge1xuICAgIC8qKiogRkxVU0hfQkxPQ0socywgMCk7ICoqKi9cbiAgICBmbHVzaF9ibG9ja19vbmx5KHMsIGZhbHNlKTtcbiAgICBpZiAocy5zdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgcmV0dXJuIEJTX05FRURfTU9SRTtcbiAgICB9XG4gICAgLyoqKi9cbiAgfVxuICByZXR1cm4gQlNfQkxPQ0tfRE9ORTtcbn07XG5cbi8qIFZhbHVlcyBmb3IgbWF4X2xhenlfbWF0Y2gsIGdvb2RfbWF0Y2ggYW5kIG1heF9jaGFpbl9sZW5ndGgsIGRlcGVuZGluZyBvblxuICogdGhlIGRlc2lyZWQgcGFjayBsZXZlbCAoMC4uOSkuIFRoZSB2YWx1ZXMgZ2l2ZW4gYmVsb3cgaGF2ZSBiZWVuIHR1bmVkIHRvXG4gKiBleGNsdWRlIHdvcnN0IGNhc2UgcGVyZm9ybWFuY2UgZm9yIHBhdGhvbG9naWNhbCBmaWxlcy4gQmV0dGVyIHZhbHVlcyBtYXkgYmVcbiAqIGZvdW5kIGZvciBzcGVjaWZpYyBmaWxlcy5cbiAqL1xuZnVuY3Rpb24gQ29uZmlnKGdvb2RfbGVuZ3RoLCBtYXhfbGF6eSwgbmljZV9sZW5ndGgsIG1heF9jaGFpbiwgZnVuYykge1xuXG4gIHRoaXMuZ29vZF9sZW5ndGggPSBnb29kX2xlbmd0aDtcbiAgdGhpcy5tYXhfbGF6eSA9IG1heF9sYXp5O1xuICB0aGlzLm5pY2VfbGVuZ3RoID0gbmljZV9sZW5ndGg7XG4gIHRoaXMubWF4X2NoYWluID0gbWF4X2NoYWluO1xuICB0aGlzLmZ1bmMgPSBmdW5jO1xufVxuXG5jb25zdCBjb25maWd1cmF0aW9uX3RhYmxlID0gW1xuICAvKiAgICAgIGdvb2QgbGF6eSBuaWNlIGNoYWluICovXG4gIG5ldyBDb25maWcoMCwgMCwgMCwgMCwgZGVmbGF0ZV9zdG9yZWQpLCAgICAgICAgICAvKiAwIHN0b3JlIG9ubHkgKi9cbiAgbmV3IENvbmZpZyg0LCA0LCA4LCA0LCBkZWZsYXRlX2Zhc3QpLCAgICAgICAgICAgIC8qIDEgbWF4IHNwZWVkLCBubyBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg0LCA1LCAxNiwgOCwgZGVmbGF0ZV9mYXN0KSwgICAgICAgICAgIC8qIDIgKi9cbiAgbmV3IENvbmZpZyg0LCA2LCAzMiwgMzIsIGRlZmxhdGVfZmFzdCksICAgICAgICAgIC8qIDMgKi9cblxuICBuZXcgQ29uZmlnKDQsIDQsIDE2LCAxNiwgZGVmbGF0ZV9zbG93KSwgICAgICAgICAgLyogNCBsYXp5IG1hdGNoZXMgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMzIsIDMyLCBkZWZsYXRlX3Nsb3cpLCAgICAgICAgIC8qIDUgKi9cbiAgbmV3IENvbmZpZyg4LCAxNiwgMTI4LCAxMjgsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDYgKi9cbiAgbmV3IENvbmZpZyg4LCAzMiwgMTI4LCAyNTYsIGRlZmxhdGVfc2xvdyksICAgICAgIC8qIDcgKi9cbiAgbmV3IENvbmZpZygzMiwgMTI4LCAyNTgsIDEwMjQsIGRlZmxhdGVfc2xvdyksICAgIC8qIDggKi9cbiAgbmV3IENvbmZpZygzMiwgMjU4LCAyNTgsIDQwOTYsIGRlZmxhdGVfc2xvdykgICAgIC8qIDkgbWF4IGNvbXByZXNzaW9uICovXG5dO1xuXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuICogSW5pdGlhbGl6ZSB0aGUgXCJsb25nZXN0IG1hdGNoXCIgcm91dGluZXMgZm9yIGEgbmV3IHpsaWIgc3RyZWFtXG4gKi9cbmNvbnN0IGxtX2luaXQgPSAocykgPT4ge1xuXG4gIHMud2luZG93X3NpemUgPSAyICogcy53X3NpemU7XG5cbiAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovXG4gIHplcm8ocy5oZWFkKTsgLy8gRmlsbCB3aXRoIE5JTCAoPSAwKTtcblxuICAvKiBTZXQgdGhlIGRlZmF1bHQgY29uZmlndXJhdGlvbiBwYXJhbWV0ZXJzOlxuICAgKi9cbiAgcy5tYXhfbGF6eV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2xhenk7XG4gIHMuZ29vZF9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0uZ29vZF9sZW5ndGg7XG4gIHMubmljZV9tYXRjaCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubmljZV9sZW5ndGg7XG4gIHMubWF4X2NoYWluX2xlbmd0aCA9IGNvbmZpZ3VyYXRpb25fdGFibGVbcy5sZXZlbF0ubWF4X2NoYWluO1xuXG4gIHMuc3Ryc3RhcnQgPSAwO1xuICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgcy5sb29rYWhlYWQgPSAwO1xuICBzLmluc2VydCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgcy5pbnNfaCA9IDA7XG59O1xuXG5cbmZ1bmN0aW9uIERlZmxhdGVTdGF0ZSgpIHtcbiAgdGhpcy5zdHJtID0gbnVsbDsgICAgICAgICAgICAvKiBwb2ludGVyIGJhY2sgdG8gdGhpcyB6bGliIHN0cmVhbSAqL1xuICB0aGlzLnN0YXR1cyA9IDA7ICAgICAgICAgICAgLyogYXMgdGhlIG5hbWUgaW1wbGllcyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmID0gbnVsbDsgICAgICAvKiBvdXRwdXQgc3RpbGwgcGVuZGluZyAqL1xuICB0aGlzLnBlbmRpbmdfYnVmX3NpemUgPSAwOyAgLyogc2l6ZSBvZiBwZW5kaW5nX2J1ZiAqL1xuICB0aGlzLnBlbmRpbmdfb3V0ID0gMDsgICAgICAgLyogbmV4dCBwZW5kaW5nIGJ5dGUgdG8gb3V0cHV0IHRvIHRoZSBzdHJlYW0gKi9cbiAgdGhpcy5wZW5kaW5nID0gMDsgICAgICAgICAgIC8qIG5iIG9mIGJ5dGVzIGluIHRoZSBwZW5kaW5nIGJ1ZmZlciAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmd6aGVhZCA9IG51bGw7ICAgICAgICAgLyogZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gdG8gd3JpdGUgKi9cbiAgdGhpcy5nemluZGV4ID0gMDsgICAgICAgICAgIC8qIHdoZXJlIGluIGV4dHJhLCBuYW1lLCBvciBjb21tZW50ICovXG4gIHRoaXMubWV0aG9kID0gWl9ERUZMQVRFRCQyOyAvKiBjYW4gb25seSBiZSBERUZMQVRFRCAqL1xuICB0aGlzLmxhc3RfZmx1c2ggPSAtMTsgICAvKiB2YWx1ZSBvZiBmbHVzaCBwYXJhbSBmb3IgcHJldmlvdXMgZGVmbGF0ZSBjYWxsICovXG5cbiAgdGhpcy53X3NpemUgPSAwOyAgLyogTFo3NyB3aW5kb3cgc2l6ZSAoMzJLIGJ5IGRlZmF1bHQpICovXG4gIHRoaXMud19iaXRzID0gMDsgIC8qIGxvZzIod19zaXplKSAgKDguLjE2KSAqL1xuICB0aGlzLndfbWFzayA9IDA7ICAvKiB3X3NpemUgLSAxICovXG5cbiAgdGhpcy53aW5kb3cgPSBudWxsO1xuICAvKiBTbGlkaW5nIHdpbmRvdy4gSW5wdXQgYnl0ZXMgYXJlIHJlYWQgaW50byB0aGUgc2Vjb25kIGhhbGYgb2YgdGhlIHdpbmRvdyxcbiAgICogYW5kIG1vdmUgdG8gdGhlIGZpcnN0IGhhbGYgbGF0ZXIgdG8ga2VlcCBhIGRpY3Rpb25hcnkgb2YgYXQgbGVhc3Qgd1NpemVcbiAgICogYnl0ZXMuIFdpdGggdGhpcyBvcmdhbml6YXRpb24sIG1hdGNoZXMgYXJlIGxpbWl0ZWQgdG8gYSBkaXN0YW5jZSBvZlxuICAgKiB3U2l6ZS1NQVhfTUFUQ0ggYnl0ZXMsIGJ1dCB0aGlzIGVuc3VyZXMgdGhhdCBJTyBpcyBhbHdheXNcbiAgICogcGVyZm9ybWVkIHdpdGggYSBsZW5ndGggbXVsdGlwbGUgb2YgdGhlIGJsb2NrIHNpemUuXG4gICAqL1xuXG4gIHRoaXMud2luZG93X3NpemUgPSAwO1xuICAvKiBBY3R1YWwgc2l6ZSBvZiB3aW5kb3c6IDIqd1NpemUsIGV4Y2VwdCB3aGVuIHRoZSB1c2VyIGlucHV0IGJ1ZmZlclxuICAgKiBpcyBkaXJlY3RseSB1c2VkIGFzIHNsaWRpbmcgd2luZG93LlxuICAgKi9cblxuICB0aGlzLnByZXYgPSBudWxsO1xuICAvKiBMaW5rIHRvIG9sZGVyIHN0cmluZyB3aXRoIHNhbWUgaGFzaCBpbmRleC4gVG8gbGltaXQgdGhlIHNpemUgb2YgdGhpc1xuICAgKiBhcnJheSB0byA2NEssIHRoaXMgbGluayBpcyBtYWludGFpbmVkIG9ubHkgZm9yIHRoZSBsYXN0IDMySyBzdHJpbmdzLlxuICAgKiBBbiBpbmRleCBpbiB0aGlzIGFycmF5IGlzIHRodXMgYSB3aW5kb3cgaW5kZXggbW9kdWxvIDMySy5cbiAgICovXG5cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAvKiBIZWFkcyBvZiB0aGUgaGFzaCBjaGFpbnMgb3IgTklMLiAqL1xuXG4gIHRoaXMuaW5zX2ggPSAwOyAgICAgICAvKiBoYXNoIGluZGV4IG9mIHN0cmluZyB0byBiZSBpbnNlcnRlZCAqL1xuICB0aGlzLmhhc2hfc2l6ZSA9IDA7ICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIGhhc2ggdGFibGUgKi9cbiAgdGhpcy5oYXNoX2JpdHMgPSAwOyAgIC8qIGxvZzIoaGFzaF9zaXplKSAqL1xuICB0aGlzLmhhc2hfbWFzayA9IDA7ICAgLyogaGFzaF9zaXplLTEgKi9cblxuICB0aGlzLmhhc2hfc2hpZnQgPSAwO1xuICAvKiBOdW1iZXIgb2YgYml0cyBieSB3aGljaCBpbnNfaCBtdXN0IGJlIHNoaWZ0ZWQgYXQgZWFjaCBpbnB1dFxuICAgKiBzdGVwLiBJdCBtdXN0IGJlIHN1Y2ggdGhhdCBhZnRlciBNSU5fTUFUQ0ggc3RlcHMsIHRoZSBvbGRlc3RcbiAgICogYnl0ZSBubyBsb25nZXIgdGFrZXMgcGFydCBpbiB0aGUgaGFzaCBrZXksIHRoYXQgaXM6XG4gICAqICAgaGFzaF9zaGlmdCAqIE1JTl9NQVRDSCA+PSBoYXNoX2JpdHNcbiAgICovXG5cbiAgdGhpcy5ibG9ja19zdGFydCA9IDA7XG4gIC8qIFdpbmRvdyBwb3NpdGlvbiBhdCB0aGUgYmVnaW5uaW5nIG9mIHRoZSBjdXJyZW50IG91dHB1dCBibG9jay4gR2V0c1xuICAgKiBuZWdhdGl2ZSB3aGVuIHRoZSB3aW5kb3cgaXMgbW92ZWQgYmFja3dhcmRzLlxuICAgKi9cblxuICB0aGlzLm1hdGNoX2xlbmd0aCA9IDA7ICAgICAgLyogbGVuZ3RoIG9mIGJlc3QgbWF0Y2ggKi9cbiAgdGhpcy5wcmV2X21hdGNoID0gMDsgICAgICAgIC8qIHByZXZpb3VzIG1hdGNoICovXG4gIHRoaXMubWF0Y2hfYXZhaWxhYmxlID0gMDsgICAvKiBzZXQgaWYgcHJldmlvdXMgbWF0Y2ggZXhpc3RzICovXG4gIHRoaXMuc3Ryc3RhcnQgPSAwOyAgICAgICAgICAvKiBzdGFydCBvZiBzdHJpbmcgdG8gaW5zZXJ0ICovXG4gIHRoaXMubWF0Y2hfc3RhcnQgPSAwOyAgICAgICAvKiBzdGFydCBvZiBtYXRjaGluZyBzdHJpbmcgKi9cbiAgdGhpcy5sb29rYWhlYWQgPSAwOyAgICAgICAgIC8qIG51bWJlciBvZiB2YWxpZCBieXRlcyBhaGVhZCBpbiB3aW5kb3cgKi9cblxuICB0aGlzLnByZXZfbGVuZ3RoID0gMDtcbiAgLyogTGVuZ3RoIG9mIHRoZSBiZXN0IG1hdGNoIGF0IHByZXZpb3VzIHN0ZXAuIE1hdGNoZXMgbm90IGdyZWF0ZXIgdGhhbiB0aGlzXG4gICAqIGFyZSBkaXNjYXJkZWQuIFRoaXMgaXMgdXNlZCBpbiB0aGUgbGF6eSBtYXRjaCBldmFsdWF0aW9uLlxuICAgKi9cblxuICB0aGlzLm1heF9jaGFpbl9sZW5ndGggPSAwO1xuICAvKiBUbyBzcGVlZCB1cCBkZWZsYXRpb24sIGhhc2ggY2hhaW5zIGFyZSBuZXZlciBzZWFyY2hlZCBiZXlvbmQgdGhpc1xuICAgKiBsZW5ndGguICBBIGhpZ2hlciBsaW1pdCBpbXByb3ZlcyBjb21wcmVzc2lvbiByYXRpbyBidXQgZGVncmFkZXMgdGhlXG4gICAqIHNwZWVkLlxuICAgKi9cblxuICB0aGlzLm1heF9sYXp5X21hdGNoID0gMDtcbiAgLyogQXR0ZW1wdCB0byBmaW5kIGEgYmV0dGVyIG1hdGNoIG9ubHkgd2hlbiB0aGUgY3VycmVudCBtYXRjaCBpcyBzdHJpY3RseVxuICAgKiBzbWFsbGVyIHRoYW4gdGhpcyB2YWx1ZS4gVGhpcyBtZWNoYW5pc20gaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvblxuICAgKiBsZXZlbHMgPj0gNC5cbiAgICovXG4gIC8vIFRoYXQncyBhbGlhcyB0byBtYXhfbGF6eV9tYXRjaCwgZG9uJ3QgdXNlIGRpcmVjdGx5XG4gIC8vdGhpcy5tYXhfaW5zZXJ0X2xlbmd0aCA9IDA7XG4gIC8qIEluc2VydCBuZXcgc3RyaW5ncyBpbiB0aGUgaGFzaCB0YWJsZSBvbmx5IGlmIHRoZSBtYXRjaCBsZW5ndGggaXMgbm90XG4gICAqIGdyZWF0ZXIgdGhhbiB0aGlzIGxlbmd0aC4gVGhpcyBzYXZlcyB0aW1lIGJ1dCBkZWdyYWRlcyBjb21wcmVzc2lvbi5cbiAgICogbWF4X2luc2VydF9sZW5ndGggaXMgdXNlZCBvbmx5IGZvciBjb21wcmVzc2lvbiBsZXZlbHMgPD0gMy5cbiAgICovXG5cbiAgdGhpcy5sZXZlbCA9IDA7ICAgICAvKiBjb21wcmVzc2lvbiBsZXZlbCAoMS4uOSkgKi9cbiAgdGhpcy5zdHJhdGVneSA9IDA7ICAvKiBmYXZvciBvciBmb3JjZSBIdWZmbWFuIGNvZGluZyovXG5cbiAgdGhpcy5nb29kX21hdGNoID0gMDtcbiAgLyogVXNlIGEgZmFzdGVyIHNlYXJjaCB3aGVuIHRoZSBwcmV2aW91cyBtYXRjaCBpcyBsb25nZXIgdGhhbiB0aGlzICovXG5cbiAgdGhpcy5uaWNlX21hdGNoID0gMDsgLyogU3RvcCBzZWFyY2hpbmcgd2hlbiBjdXJyZW50IG1hdGNoIGV4Y2VlZHMgdGhpcyAqL1xuXG4gICAgICAgICAgICAgIC8qIHVzZWQgYnkgdHJlZXMuYzogKi9cblxuICAvKiBEaWRuJ3QgdXNlIGN0X2RhdGEgdHlwZWRlZiBiZWxvdyB0byBzdXBwcmVzcyBjb21waWxlciB3YXJuaW5nICovXG5cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBkeW5fbHRyZWVbSEVBUF9TSVpFXTsgICAvKiBsaXRlcmFsIGFuZCBsZW5ndGggdHJlZSAqL1xuICAvLyBzdHJ1Y3QgY3RfZGF0YV9zIGR5bl9kdHJlZVsyKkRfQ09ERVMrMV07IC8qIGRpc3RhbmNlIHRyZWUgKi9cbiAgLy8gc3RydWN0IGN0X2RhdGFfcyBibF90cmVlWzIqQkxfQ09ERVMrMV07ICAvKiBIdWZmbWFuIHRyZWUgZm9yIGJpdCBsZW5ndGhzICovXG5cbiAgLy8gVXNlIGZsYXQgYXJyYXkgb2YgRE9VQkxFIHNpemUsIHdpdGggaW50ZXJsZWF2ZWQgZmF0YSxcbiAgLy8gYmVjYXVzZSBKUyBkb2VzIG5vdCBzdXBwb3J0IGVmZmVjdGl2ZVxuICB0aGlzLmR5bl9sdHJlZSAgPSBuZXcgVWludDE2QXJyYXkoSEVBUF9TSVpFICogMik7XG4gIHRoaXMuZHluX2R0cmVlICA9IG5ldyBVaW50MTZBcnJheSgoMiAqIERfQ09ERVMgKyAxKSAqIDIpO1xuICB0aGlzLmJsX3RyZWUgICAgPSBuZXcgVWludDE2QXJyYXkoKDIgKiBCTF9DT0RFUyArIDEpICogMik7XG4gIHplcm8odGhpcy5keW5fbHRyZWUpO1xuICB6ZXJvKHRoaXMuZHluX2R0cmVlKTtcbiAgemVybyh0aGlzLmJsX3RyZWUpO1xuXG4gIHRoaXMubF9kZXNjICAgPSBudWxsOyAgICAgICAgIC8qIGRlc2MuIGZvciBsaXRlcmFsIHRyZWUgKi9cbiAgdGhpcy5kX2Rlc2MgICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGRpc3RhbmNlIHRyZWUgKi9cbiAgdGhpcy5ibF9kZXNjICA9IG51bGw7ICAgICAgICAgLyogZGVzYy4gZm9yIGJpdCBsZW5ndGggdHJlZSAqL1xuXG4gIC8vdXNoIGJsX2NvdW50W01BWF9CSVRTKzFdO1xuICB0aGlzLmJsX2NvdW50ID0gbmV3IFVpbnQxNkFycmF5KE1BWF9CSVRTICsgMSk7XG4gIC8qIG51bWJlciBvZiBjb2RlcyBhdCBlYWNoIGJpdCBsZW5ndGggZm9yIGFuIG9wdGltYWwgdHJlZSAqL1xuXG4gIC8vaW50IGhlYXBbMipMX0NPREVTKzFdOyAgICAgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB0aGlzLmhlYXAgPSBuZXcgVWludDE2QXJyYXkoMiAqIExfQ09ERVMgKyAxKTsgIC8qIGhlYXAgdXNlZCB0byBidWlsZCB0aGUgSHVmZm1hbiB0cmVlcyAqL1xuICB6ZXJvKHRoaXMuaGVhcCk7XG5cbiAgdGhpcy5oZWFwX2xlbiA9IDA7ICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGVsZW1lbnRzIGluIHRoZSBoZWFwICovXG4gIHRoaXMuaGVhcF9tYXggPSAwOyAgICAgICAgICAgICAgIC8qIGVsZW1lbnQgb2YgbGFyZ2VzdCBmcmVxdWVuY3kgKi9cbiAgLyogVGhlIHNvbnMgb2YgaGVhcFtuXSBhcmUgaGVhcFsyKm5dIGFuZCBoZWFwWzIqbisxXS4gaGVhcFswXSBpcyBub3QgdXNlZC5cbiAgICogVGhlIHNhbWUgaGVhcCBhcnJheSBpcyB1c2VkIHRvIGJ1aWxkIGFsbCB0cmVlcy5cbiAgICovXG5cbiAgdGhpcy5kZXB0aCA9IG5ldyBVaW50MTZBcnJheSgyICogTF9DT0RFUyArIDEpOyAvL3VjaCBkZXB0aFsyKkxfQ09ERVMrMV07XG4gIHplcm8odGhpcy5kZXB0aCk7XG4gIC8qIERlcHRoIG9mIGVhY2ggc3VidHJlZSB1c2VkIGFzIHRpZSBicmVha2VyIGZvciB0cmVlcyBvZiBlcXVhbCBmcmVxdWVuY3lcbiAgICovXG5cbiAgdGhpcy5sX2J1ZiA9IDA7ICAgICAgICAgIC8qIGJ1ZmZlciBpbmRleCBmb3IgbGl0ZXJhbHMgb3IgbGVuZ3RocyAqL1xuXG4gIHRoaXMubGl0X2J1ZnNpemUgPSAwO1xuICAvKiBTaXplIG9mIG1hdGNoIGJ1ZmZlciBmb3IgbGl0ZXJhbHMvbGVuZ3Rocy4gIFRoZXJlIGFyZSA0IHJlYXNvbnMgZm9yXG4gICAqIGxpbWl0aW5nIGxpdF9idWZzaXplIHRvIDY0SzpcbiAgICogICAtIGZyZXF1ZW5jaWVzIGNhbiBiZSBrZXB0IGluIDE2IGJpdCBjb3VudGVyc1xuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIHRoZSBmaXJzdCBibG9jaywgYWxsIGlucHV0XG4gICAqICAgICBkYXRhIGlzIHN0aWxsIGluIHRoZSB3aW5kb3cgc28gd2UgY2FuIHN0aWxsIGVtaXQgYSBzdG9yZWQgYmxvY2sgZXZlblxuICAgKiAgICAgd2hlbiBpbnB1dCBjb21lcyBmcm9tIHN0YW5kYXJkIGlucHV0LiAgKFRoaXMgY2FuIGFsc28gYmUgZG9uZSBmb3JcbiAgICogICAgIGFsbCBibG9ja3MgaWYgbGl0X2J1ZnNpemUgaXMgbm90IGdyZWF0ZXIgdGhhbiAzMksuKVxuICAgKiAgIC0gaWYgY29tcHJlc3Npb24gaXMgbm90IHN1Y2Nlc3NmdWwgZm9yIGEgZmlsZSBzbWFsbGVyIHRoYW4gNjRLLCB3ZSBjYW5cbiAgICogICAgIGV2ZW4gZW1pdCBhIHN0b3JlZCBmaWxlIGluc3RlYWQgb2YgYSBzdG9yZWQgYmxvY2sgKHNhdmluZyA1IGJ5dGVzKS5cbiAgICogICAgIFRoaXMgaXMgYXBwbGljYWJsZSBvbmx5IGZvciB6aXAgKG5vdCBnemlwIG9yIHpsaWIpLlxuICAgKiAgIC0gY3JlYXRpbmcgbmV3IEh1ZmZtYW4gdHJlZXMgbGVzcyBmcmVxdWVudGx5IG1heSBub3QgcHJvdmlkZSBmYXN0XG4gICAqICAgICBhZGFwdGF0aW9uIHRvIGNoYW5nZXMgaW4gdGhlIGlucHV0IGRhdGEgc3RhdGlzdGljcy4gKFRha2UgZm9yXG4gICAqICAgICBleGFtcGxlIGEgYmluYXJ5IGZpbGUgd2l0aCBwb29ybHkgY29tcHJlc3NpYmxlIGNvZGUgZm9sbG93ZWQgYnlcbiAgICogICAgIGEgaGlnaGx5IGNvbXByZXNzaWJsZSBzdHJpbmcgdGFibGUuKSBTbWFsbGVyIGJ1ZmZlciBzaXplcyBnaXZlXG4gICAqICAgICBmYXN0IGFkYXB0YXRpb24gYnV0IGhhdmUgb2YgY291cnNlIHRoZSBvdmVyaGVhZCBvZiB0cmFuc21pdHRpbmdcbiAgICogICAgIHRyZWVzIG1vcmUgZnJlcXVlbnRseS5cbiAgICogICAtIEkgY2FuJ3QgY291bnQgYWJvdmUgNFxuICAgKi9cblxuICB0aGlzLmxhc3RfbGl0ID0gMDsgICAgICAvKiBydW5uaW5nIGluZGV4IGluIGxfYnVmICovXG5cbiAgdGhpcy5kX2J1ZiA9IDA7XG4gIC8qIEJ1ZmZlciBpbmRleCBmb3IgZGlzdGFuY2VzLiBUbyBzaW1wbGlmeSB0aGUgY29kZSwgZF9idWYgYW5kIGxfYnVmIGhhdmVcbiAgICogdGhlIHNhbWUgbnVtYmVyIG9mIGVsZW1lbnRzLiBUbyB1c2UgZGlmZmVyZW50IGxlbmd0aHMsIGFuIGV4dHJhIGZsYWdcbiAgICogYXJyYXkgd291bGQgYmUgbmVjZXNzYXJ5LlxuICAgKi9cblxuICB0aGlzLm9wdF9sZW4gPSAwOyAgICAgICAvKiBiaXQgbGVuZ3RoIG9mIGN1cnJlbnQgYmxvY2sgd2l0aCBvcHRpbWFsIHRyZWVzICovXG4gIHRoaXMuc3RhdGljX2xlbiA9IDA7ICAgIC8qIGJpdCBsZW5ndGggb2YgY3VycmVudCBibG9jayB3aXRoIHN0YXRpYyB0cmVlcyAqL1xuICB0aGlzLm1hdGNoZXMgPSAwOyAgICAgICAvKiBudW1iZXIgb2Ygc3RyaW5nIG1hdGNoZXMgaW4gY3VycmVudCBibG9jayAqL1xuICB0aGlzLmluc2VydCA9IDA7ICAgICAgICAvKiBieXRlcyBhdCBlbmQgb2Ygd2luZG93IGxlZnQgdG8gaW5zZXJ0ICovXG5cblxuICB0aGlzLmJpX2J1ZiA9IDA7XG4gIC8qIE91dHB1dCBidWZmZXIuIGJpdHMgYXJlIGluc2VydGVkIHN0YXJ0aW5nIGF0IHRoZSBib3R0b20gKGxlYXN0XG4gICAqIHNpZ25pZmljYW50IGJpdHMpLlxuICAgKi9cbiAgdGhpcy5iaV92YWxpZCA9IDA7XG4gIC8qIE51bWJlciBvZiB2YWxpZCBiaXRzIGluIGJpX2J1Zi4gIEFsbCBiaXRzIGFib3ZlIHRoZSBsYXN0IHZhbGlkIGJpdFxuICAgKiBhcmUgYWx3YXlzIHplcm8uXG4gICAqL1xuXG4gIC8vIFVzZWQgZm9yIHdpbmRvdyBtZW1vcnkgaW5pdC4gV2Ugc2FmZWx5IGlnbm9yZSBpdCBmb3IgSlMuIFRoYXQgbWFrZXNcbiAgLy8gc2Vuc2Ugb25seSBmb3IgcG9pbnRlcnMgYW5kIG1lbW9yeSBjaGVjayB0b29scy5cbiAgLy90aGlzLmhpZ2hfd2F0ZXIgPSAwO1xuICAvKiBIaWdoIHdhdGVyIG1hcmsgb2Zmc2V0IGluIHdpbmRvdyBmb3IgaW5pdGlhbGl6ZWQgYnl0ZXMgLS0gYnl0ZXMgYWJvdmVcbiAgICogdGhpcyBhcmUgc2V0IHRvIHplcm8gaW4gb3JkZXIgdG8gYXZvaWQgbWVtb3J5IGNoZWNrIHdhcm5pbmdzIHdoZW5cbiAgICogbG9uZ2VzdCBtYXRjaCByb3V0aW5lcyBhY2Nlc3MgYnl0ZXMgcGFzdCB0aGUgaW5wdXQuICBUaGlzIGlzIHRoZW5cbiAgICogdXBkYXRlZCB0byB0aGUgbmV3IGhpZ2ggd2F0ZXIgbWFyay5cbiAgICovXG59XG5cblxuY29uc3QgZGVmbGF0ZVJlc2V0S2VlcCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUiQyKTtcbiAgfVxuXG4gIHN0cm0udG90YWxfaW4gPSBzdHJtLnRvdGFsX291dCA9IDA7XG4gIHN0cm0uZGF0YV90eXBlID0gWl9VTktOT1dOO1xuXG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuICBzLnBlbmRpbmcgPSAwO1xuICBzLnBlbmRpbmdfb3V0ID0gMDtcblxuICBpZiAocy53cmFwIDwgMCkge1xuICAgIHMud3JhcCA9IC1zLndyYXA7XG4gICAgLyogd2FzIG1hZGUgbmVnYXRpdmUgYnkgZGVmbGF0ZSguLi4sIFpfRklOSVNIKTsgKi9cbiAgfVxuICBzLnN0YXR1cyA9IChzLndyYXAgPyBJTklUX1NUQVRFIDogQlVTWV9TVEFURSk7XG4gIHN0cm0uYWRsZXIgPSAocy53cmFwID09PSAyKSA/XG4gICAgMCAgLy8gY3JjMzIoMCwgWl9OVUxMLCAwKVxuICA6XG4gICAgMTsgLy8gYWRsZXIzMigwLCBaX05VTEwsIDApXG4gIHMubGFzdF9mbHVzaCA9IFpfTk9fRkxVU0gkMjtcbiAgX3RyX2luaXQocyk7XG4gIHJldHVybiBaX09LJDM7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVSZXNldCA9IChzdHJtKSA9PiB7XG5cbiAgY29uc3QgcmV0ID0gZGVmbGF0ZVJlc2V0S2VlcChzdHJtKTtcbiAgaWYgKHJldCA9PT0gWl9PSyQzKSB7XG4gICAgbG1faW5pdChzdHJtLnN0YXRlKTtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcblxuXG5jb25zdCBkZWZsYXRlU2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDI7IH1cbiAgaWYgKHN0cm0uc3RhdGUud3JhcCAhPT0gMikgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMjsgfVxuICBzdHJtLnN0YXRlLmd6aGVhZCA9IGhlYWQ7XG4gIHJldHVybiBaX09LJDM7XG59O1xuXG5cbmNvbnN0IGRlZmxhdGVJbml0MiA9IChzdHJtLCBsZXZlbCwgbWV0aG9kLCB3aW5kb3dCaXRzLCBtZW1MZXZlbCwgc3RyYXRlZ3kpID0+IHtcblxuICBpZiAoIXN0cm0pIHsgLy8gPT09IFpfTlVMTFxuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQyO1xuICB9XG4gIGxldCB3cmFwID0gMTtcblxuICBpZiAobGV2ZWwgPT09IFpfREVGQVVMVF9DT01QUkVTU0lPTiQxKSB7XG4gICAgbGV2ZWwgPSA2O1xuICB9XG5cbiAgaWYgKHdpbmRvd0JpdHMgPCAwKSB7IC8qIHN1cHByZXNzIHpsaWIgd3JhcHBlciAqL1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKHdpbmRvd0JpdHMgPiAxNSkge1xuICAgIHdyYXAgPSAyOyAgICAgICAgICAgLyogd3JpdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgKi9cbiAgICB3aW5kb3dCaXRzIC09IDE2O1xuICB9XG5cblxuICBpZiAobWVtTGV2ZWwgPCAxIHx8IG1lbUxldmVsID4gTUFYX01FTV9MRVZFTCB8fCBtZXRob2QgIT09IFpfREVGTEFURUQkMiB8fFxuICAgIHdpbmRvd0JpdHMgPCA4IHx8IHdpbmRvd0JpdHMgPiAxNSB8fCBsZXZlbCA8IDAgfHwgbGV2ZWwgPiA5IHx8XG4gICAgc3RyYXRlZ3kgPCAwIHx8IHN0cmF0ZWd5ID4gWl9GSVhFRCkge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9TVFJFQU1fRVJST1IkMik7XG4gIH1cblxuXG4gIGlmICh3aW5kb3dCaXRzID09PSA4KSB7XG4gICAgd2luZG93Qml0cyA9IDk7XG4gIH1cbiAgLyogdW50aWwgMjU2LWJ5dGUgd2luZG93IGJ1ZyBmaXhlZCAqL1xuXG4gIGNvbnN0IHMgPSBuZXcgRGVmbGF0ZVN0YXRlKCk7XG5cbiAgc3RybS5zdGF0ZSA9IHM7XG4gIHMuc3RybSA9IHN0cm07XG5cbiAgcy53cmFwID0gd3JhcDtcbiAgcy5nemhlYWQgPSBudWxsO1xuICBzLndfYml0cyA9IHdpbmRvd0JpdHM7XG4gIHMud19zaXplID0gMSA8PCBzLndfYml0cztcbiAgcy53X21hc2sgPSBzLndfc2l6ZSAtIDE7XG5cbiAgcy5oYXNoX2JpdHMgPSBtZW1MZXZlbCArIDc7XG4gIHMuaGFzaF9zaXplID0gMSA8PCBzLmhhc2hfYml0cztcbiAgcy5oYXNoX21hc2sgPSBzLmhhc2hfc2l6ZSAtIDE7XG4gIHMuaGFzaF9zaGlmdCA9IH5+KChzLmhhc2hfYml0cyArIE1JTl9NQVRDSCAtIDEpIC8gTUlOX01BVENIKTtcblxuICBzLndpbmRvdyA9IG5ldyBVaW50OEFycmF5KHMud19zaXplICogMik7XG4gIHMuaGVhZCA9IG5ldyBVaW50MTZBcnJheShzLmhhc2hfc2l6ZSk7XG4gIHMucHJldiA9IG5ldyBVaW50MTZBcnJheShzLndfc2l6ZSk7XG5cbiAgLy8gRG9uJ3QgbmVlZCBtZW0gaW5pdCBtYWdpYyBmb3IgSlMuXG4gIC8vcy5oaWdoX3dhdGVyID0gMDsgIC8qIG5vdGhpbmcgd3JpdHRlbiB0byBzLT53aW5kb3cgeWV0ICovXG5cbiAgcy5saXRfYnVmc2l6ZSA9IDEgPDwgKG1lbUxldmVsICsgNik7IC8qIDE2SyBlbGVtZW50cyBieSBkZWZhdWx0ICovXG5cbiAgcy5wZW5kaW5nX2J1Zl9zaXplID0gcy5saXRfYnVmc2l6ZSAqIDQ7XG5cbiAgLy9vdmVybGF5ID0gKHVzaGYgKikgWkFMTE9DKHN0cm0sIHMtPmxpdF9idWZzaXplLCBzaXplb2YodXNoKSsyKTtcbiAgLy9zLT5wZW5kaW5nX2J1ZiA9ICh1Y2hmICopIG92ZXJsYXk7XG4gIHMucGVuZGluZ19idWYgPSBuZXcgVWludDhBcnJheShzLnBlbmRpbmdfYnVmX3NpemUpO1xuXG4gIC8vIEl0IGlzIG9mZnNldCBmcm9tIGBzLnBlbmRpbmdfYnVmYCAoc2l6ZSBpcyBgcy5saXRfYnVmc2l6ZSAqIDJgKVxuICAvL3MtPmRfYnVmID0gb3ZlcmxheSArIHMtPmxpdF9idWZzaXplL3NpemVvZih1c2gpO1xuICBzLmRfYnVmID0gMSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgLy9zLT5sX2J1ZiA9IHMtPnBlbmRpbmdfYnVmICsgKDErc2l6ZW9mKHVzaCkpKnMtPmxpdF9idWZzaXplO1xuICBzLmxfYnVmID0gKDEgKyAyKSAqIHMubGl0X2J1ZnNpemU7XG5cbiAgcy5sZXZlbCA9IGxldmVsO1xuICBzLnN0cmF0ZWd5ID0gc3RyYXRlZ3k7XG4gIHMubWV0aG9kID0gbWV0aG9kO1xuXG4gIHJldHVybiBkZWZsYXRlUmVzZXQoc3RybSk7XG59O1xuXG5jb25zdCBkZWZsYXRlSW5pdCA9IChzdHJtLCBsZXZlbCkgPT4ge1xuXG4gIHJldHVybiBkZWZsYXRlSW5pdDIoc3RybSwgbGV2ZWwsIFpfREVGTEFURUQkMiwgTUFYX1dCSVRTJDEsIERFRl9NRU1fTEVWRUwsIFpfREVGQVVMVF9TVFJBVEVHWSQxKTtcbn07XG5cblxuY29uc3QgZGVmbGF0ZSQyID0gKHN0cm0sIGZsdXNoKSA9PiB7XG5cbiAgbGV0IGJlZywgdmFsOyAvLyBmb3IgZ3ppcCBoZWFkZXIgd3JpdGUgb25seVxuXG4gIGlmICghc3RybSB8fCAhc3RybS5zdGF0ZSB8fFxuICAgIGZsdXNoID4gWl9CTE9DSyQxIHx8IGZsdXNoIDwgMCkge1xuICAgIHJldHVybiBzdHJtID8gZXJyKHN0cm0sIFpfU1RSRUFNX0VSUk9SJDIpIDogWl9TVFJFQU1fRVJST1IkMjtcbiAgfVxuXG4gIGNvbnN0IHMgPSBzdHJtLnN0YXRlO1xuXG4gIGlmICghc3RybS5vdXRwdXQgfHxcbiAgICAgICghc3RybS5pbnB1dCAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB8fFxuICAgICAgKHMuc3RhdHVzID09PSBGSU5JU0hfU1RBVEUgJiYgZmx1c2ggIT09IFpfRklOSVNIJDMpKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCAoc3RybS5hdmFpbF9vdXQgPT09IDApID8gWl9CVUZfRVJST1IkMSA6IFpfU1RSRUFNX0VSUk9SJDIpO1xuICB9XG5cbiAgcy5zdHJtID0gc3RybTsgLyoganVzdCBpbiBjYXNlICovXG4gIGNvbnN0IG9sZF9mbHVzaCA9IHMubGFzdF9mbHVzaDtcbiAgcy5sYXN0X2ZsdXNoID0gZmx1c2g7XG5cbiAgLyogV3JpdGUgdGhlIGhlYWRlciAqL1xuICBpZiAocy5zdGF0dXMgPT09IElOSVRfU1RBVEUpIHtcblxuICAgIGlmIChzLndyYXAgPT09IDIpIHsgLy8gR1pJUCBoZWFkZXJcbiAgICAgIHN0cm0uYWRsZXIgPSAwOyAgLy9jcmMzMigwTCwgWl9OVUxMLCAwKTtcbiAgICAgIHB1dF9ieXRlKHMsIDMxKTtcbiAgICAgIHB1dF9ieXRlKHMsIDEzOSk7XG4gICAgICBwdXRfYnl0ZShzLCA4KTtcbiAgICAgIGlmICghcy5nemhlYWQpIHsgLy8gcy0+Z3poZWFkID09IFpfTlVMTFxuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIDApO1xuICAgICAgICBwdXRfYnl0ZShzLCAwKTtcbiAgICAgICAgcHV0X2J5dGUocywgMCk7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgT1NfQ09ERSk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGV4dCA/IDEgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzLmd6aGVhZC5oY3JjID8gMiA6IDApICtcbiAgICAgICAgICAgICAgICAgICAgKCFzLmd6aGVhZC5leHRyYSA/IDAgOiA0KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQubmFtZSA/IDAgOiA4KSArXG4gICAgICAgICAgICAgICAgICAgICghcy5nemhlYWQuY29tbWVudCA/IDAgOiAxNilcbiAgICAgICAgKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQudGltZSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiA4KSAmIDB4ZmYpO1xuICAgICAgICBwdXRfYnl0ZShzLCAocy5nemhlYWQudGltZSA+PiAxNikgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHMuZ3poZWFkLnRpbWUgPj4gMjQpICYgMHhmZik7XG4gICAgICAgIHB1dF9ieXRlKHMsIHMubGV2ZWwgPT09IDkgPyAyIDpcbiAgICAgICAgICAgICAgICAgICAgKHMuc3RyYXRlZ3kgPj0gWl9IVUZGTUFOX09OTFkgfHwgcy5sZXZlbCA8IDIgP1xuICAgICAgICAgICAgICAgICAgICAgNCA6IDApKTtcbiAgICAgICAgcHV0X2J5dGUocywgcy5nemhlYWQub3MgJiAweGZmKTtcbiAgICAgICAgaWYgKHMuZ3poZWFkLmV4dHJhICYmIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCkge1xuICAgICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmYpO1xuICAgICAgICAgIHB1dF9ieXRlKHMsIChzLmd6aGVhZC5leHRyYS5sZW5ndGggPj4gOCkgJiAweGZmKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAocy5nemhlYWQuaGNyYykge1xuICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZywgMCk7XG4gICAgICAgIH1cbiAgICAgICAgcy5nemluZGV4ID0gMDtcbiAgICAgICAgcy5zdGF0dXMgPSBFWFRSQV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSAvLyBERUZMQVRFIGhlYWRlclxuICAgIHtcbiAgICAgIGxldCBoZWFkZXIgPSAoWl9ERUZMQVRFRCQyICsgKChzLndfYml0cyAtIDgpIDw8IDQpKSA8PCA4O1xuICAgICAgbGV0IGxldmVsX2ZsYWdzID0gLTE7XG5cbiAgICAgIGlmIChzLnN0cmF0ZWd5ID49IFpfSFVGRk1BTl9PTkxZIHx8IHMubGV2ZWwgPCAyKSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMDtcbiAgICAgIH0gZWxzZSBpZiAocy5sZXZlbCA8IDYpIHtcbiAgICAgICAgbGV2ZWxfZmxhZ3MgPSAxO1xuICAgICAgfSBlbHNlIGlmIChzLmxldmVsID09PSA2KSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldmVsX2ZsYWdzID0gMztcbiAgICAgIH1cbiAgICAgIGhlYWRlciB8PSAobGV2ZWxfZmxhZ3MgPDwgNik7XG4gICAgICBpZiAocy5zdHJzdGFydCAhPT0gMCkgeyBoZWFkZXIgfD0gUFJFU0VUX0RJQ1Q7IH1cbiAgICAgIGhlYWRlciArPSAzMSAtIChoZWFkZXIgJSAzMSk7XG5cbiAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIHB1dFNob3J0TVNCKHMsIGhlYWRlcik7XG5cbiAgICAgIC8qIFNhdmUgdGhlIGFkbGVyMzIgb2YgdGhlIHByZXNldCBkaWN0aW9uYXJ5OiAqL1xuICAgICAgaWYgKHMuc3Ryc3RhcnQgIT09IDApIHtcbiAgICAgICAgcHV0U2hvcnRNU0Iocywgc3RybS5hZGxlciA+Pj4gMTYpO1xuICAgICAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgICAgIH1cbiAgICAgIHN0cm0uYWRsZXIgPSAxOyAvLyBhZGxlcjMyKDBMLCBaX05VTEwsIDApO1xuICAgIH1cbiAgfVxuXG4vLyNpZmRlZiBHWklQXG4gIGlmIChzLnN0YXR1cyA9PT0gRVhUUkFfU1RBVEUpIHtcbiAgICBpZiAocy5nemhlYWQuZXh0cmEvKiAhPSBaX05VTEwqLykge1xuICAgICAgYmVnID0gcy5wZW5kaW5nOyAgLyogc3RhcnQgb2YgYnl0ZXMgdG8gdXBkYXRlIGNyYyAqL1xuXG4gICAgICB3aGlsZSAocy5nemluZGV4IDwgKHMuZ3poZWFkLmV4dHJhLmxlbmd0aCAmIDB4ZmZmZikpIHtcbiAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgaWYgKHMuZ3poZWFkLmhjcmMgJiYgcy5wZW5kaW5nID4gYmVnKSB7XG4gICAgICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgICAgICAgYmVnID0gcy5wZW5kaW5nO1xuICAgICAgICAgIGlmIChzLnBlbmRpbmcgPT09IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHB1dF9ieXRlKHMsIHMuZ3poZWFkLmV4dHJhW3MuZ3ppbmRleF0gJiAweGZmKTtcbiAgICAgICAgcy5nemluZGV4Kys7XG4gICAgICB9XG4gICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgc3RybS5hZGxlciA9IGNyYzMyXzEoc3RybS5hZGxlciwgcy5wZW5kaW5nX2J1Ziwgcy5wZW5kaW5nIC0gYmVnLCBiZWcpO1xuICAgICAgfVxuICAgICAgaWYgKHMuZ3ppbmRleCA9PT0gcy5nemhlYWQuZXh0cmEubGVuZ3RoKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gTkFNRV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IE5BTUVfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gTkFNRV9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5uYW1lLyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5uYW1lLmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLm5hbWUuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuZ3ppbmRleCA9IDA7XG4gICAgICAgIHMuc3RhdHVzID0gQ09NTUVOVF9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IENPTU1FTlRfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gQ09NTUVOVF9TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5jb21tZW50LyogIT0gWl9OVUxMKi8pIHtcbiAgICAgIGJlZyA9IHMucGVuZGluZzsgIC8qIHN0YXJ0IG9mIGJ5dGVzIHRvIHVwZGF0ZSBjcmMgKi9cbiAgICAgIC8vaW50IHZhbDtcblxuICAgICAgZG8ge1xuICAgICAgICBpZiAocy5wZW5kaW5nID09PSBzLnBlbmRpbmdfYnVmX3NpemUpIHtcbiAgICAgICAgICBpZiAocy5nemhlYWQuaGNyYyAmJiBzLnBlbmRpbmcgPiBiZWcpIHtcbiAgICAgICAgICAgIHN0cm0uYWRsZXIgPSBjcmMzMl8xKHN0cm0uYWRsZXIsIHMucGVuZGluZ19idWYsIHMucGVuZGluZyAtIGJlZywgYmVnKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgICAgICBiZWcgPSBzLnBlbmRpbmc7XG4gICAgICAgICAgaWYgKHMucGVuZGluZyA9PT0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgICAgICB2YWwgPSAxO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIEpTIHNwZWNpZmljOiBsaXR0bGUgbWFnaWMgdG8gYWRkIHplcm8gdGVybWluYXRvciB0byBlbmQgb2Ygc3RyaW5nXG4gICAgICAgIGlmIChzLmd6aW5kZXggPCBzLmd6aGVhZC5jb21tZW50Lmxlbmd0aCkge1xuICAgICAgICAgIHZhbCA9IHMuZ3poZWFkLmNvbW1lbnQuY2hhckNvZGVBdChzLmd6aW5kZXgrKykgJiAweGZmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhbCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgcHV0X2J5dGUocywgdmFsKTtcbiAgICAgIH0gd2hpbGUgKHZhbCAhPT0gMCk7XG5cbiAgICAgIGlmIChzLmd6aGVhZC5oY3JjICYmIHMucGVuZGluZyA+IGJlZykge1xuICAgICAgICBzdHJtLmFkbGVyID0gY3JjMzJfMShzdHJtLmFkbGVyLCBzLnBlbmRpbmdfYnVmLCBzLnBlbmRpbmcgLSBiZWcsIGJlZyk7XG4gICAgICB9XG4gICAgICBpZiAodmFsID09PSAwKSB7XG4gICAgICAgIHMuc3RhdHVzID0gSENSQ19TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEhDUkNfU1RBVEU7XG4gICAgfVxuICB9XG4gIGlmIChzLnN0YXR1cyA9PT0gSENSQ19TVEFURSkge1xuICAgIGlmIChzLmd6aGVhZC5oY3JjKSB7XG4gICAgICBpZiAocy5wZW5kaW5nICsgMiA+IHMucGVuZGluZ19idWZfc2l6ZSkge1xuICAgICAgICBmbHVzaF9wZW5kaW5nKHN0cm0pO1xuICAgICAgfVxuICAgICAgaWYgKHMucGVuZGluZyArIDIgPD0gcy5wZW5kaW5nX2J1Zl9zaXplKSB7XG4gICAgICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICAgICAgcHV0X2J5dGUocywgKHN0cm0uYWRsZXIgPj4gOCkgJiAweGZmKTtcbiAgICAgICAgc3RybS5hZGxlciA9IDA7IC8vY3JjMzIoMEwsIFpfTlVMTCwgMCk7XG4gICAgICAgIHMuc3RhdHVzID0gQlVTWV9TVEFURTtcbiAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBzLnN0YXR1cyA9IEJVU1lfU1RBVEU7XG4gICAgfVxuICB9XG4vLyNlbmRpZlxuXG4gIC8qIEZsdXNoIGFzIG11Y2ggcGVuZGluZyBvdXRwdXQgYXMgcG9zc2libGUgKi9cbiAgaWYgKHMucGVuZGluZyAhPT0gMCkge1xuICAgIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICAvKiBTaW5jZSBhdmFpbF9vdXQgaXMgMCwgZGVmbGF0ZSB3aWxsIGJlIGNhbGxlZCBhZ2FpbiB3aXRoXG4gICAgICAgKiBtb3JlIG91dHB1dCBzcGFjZSwgYnV0IHBvc3NpYmx5IHdpdGggYm90aCBwZW5kaW5nIGFuZFxuICAgICAgICogYXZhaWxfaW4gZXF1YWwgdG8gemVyby4gVGhlcmUgd29uJ3QgYmUgYW55dGhpbmcgdG8gZG8sXG4gICAgICAgKiBidXQgdGhpcyBpcyBub3QgYW4gZXJyb3Igc2l0dWF0aW9uIHNvIG1ha2Ugc3VyZSB3ZVxuICAgICAgICogcmV0dXJuIE9LIGluc3RlYWQgb2YgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCBvZiBkZWZsYXRlOlxuICAgICAgICovXG4gICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgIHJldHVybiBaX09LJDM7XG4gICAgfVxuXG4gICAgLyogTWFrZSBzdXJlIHRoZXJlIGlzIHNvbWV0aGluZyB0byBkbyBhbmQgYXZvaWQgZHVwbGljYXRlIGNvbnNlY3V0aXZlXG4gICAgICogZmx1c2hlcy4gRm9yIHJlcGVhdGVkIGFuZCB1c2VsZXNzIGNhbGxzIHdpdGggWl9GSU5JU0gsIHdlIGtlZXBcbiAgICAgKiByZXR1cm5pbmcgWl9TVFJFQU1fRU5EIGluc3RlYWQgb2YgWl9CVUZfRVJST1IuXG4gICAgICovXG4gIH0gZWxzZSBpZiAoc3RybS5hdmFpbF9pbiA9PT0gMCAmJiByYW5rKGZsdXNoKSA8PSByYW5rKG9sZF9mbHVzaCkgJiZcbiAgICBmbHVzaCAhPT0gWl9GSU5JU0gkMykge1xuICAgIHJldHVybiBlcnIoc3RybSwgWl9CVUZfRVJST1IkMSk7XG4gIH1cblxuICAvKiBVc2VyIG11c3Qgbm90IHByb3ZpZGUgbW9yZSBpbnB1dCBhZnRlciB0aGUgZmlyc3QgRklOSVNIOiAqL1xuICBpZiAocy5zdGF0dXMgPT09IEZJTklTSF9TVEFURSAmJiBzdHJtLmF2YWlsX2luICE9PSAwKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX0JVRl9FUlJPUiQxKTtcbiAgfVxuXG4gIC8qIFN0YXJ0IGEgbmV3IGJsb2NrIG9yIGNvbnRpbnVlIHRoZSBjdXJyZW50IG9uZS5cbiAgICovXG4gIGlmIChzdHJtLmF2YWlsX2luICE9PSAwIHx8IHMubG9va2FoZWFkICE9PSAwIHx8XG4gICAgKGZsdXNoICE9PSBaX05PX0ZMVVNIJDIgJiYgcy5zdGF0dXMgIT09IEZJTklTSF9TVEFURSkpIHtcbiAgICBsZXQgYnN0YXRlID0gKHMuc3RyYXRlZ3kgPT09IFpfSFVGRk1BTl9PTkxZKSA/IGRlZmxhdGVfaHVmZihzLCBmbHVzaCkgOlxuICAgICAgKHMuc3RyYXRlZ3kgPT09IFpfUkxFID8gZGVmbGF0ZV9ybGUocywgZmx1c2gpIDpcbiAgICAgICAgY29uZmlndXJhdGlvbl90YWJsZVtzLmxldmVsXS5mdW5jKHMsIGZsdXNoKSk7XG5cbiAgICBpZiAoYnN0YXRlID09PSBCU19GSU5JU0hfU1RBUlRFRCB8fCBic3RhdGUgPT09IEJTX0ZJTklTSF9ET05FKSB7XG4gICAgICBzLnN0YXR1cyA9IEZJTklTSF9TVEFURTtcbiAgICB9XG4gICAgaWYgKGJzdGF0ZSA9PT0gQlNfTkVFRF9NT1JFIHx8IGJzdGF0ZSA9PT0gQlNfRklOSVNIX1NUQVJURUQpIHtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTtcbiAgICAgICAgLyogYXZvaWQgQlVGX0VSUk9SIG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICB9XG4gICAgICByZXR1cm4gWl9PSyQzO1xuICAgICAgLyogSWYgZmx1c2ggIT0gWl9OT19GTFVTSCAmJiBhdmFpbF9vdXQgPT0gMCwgdGhlIG5leHQgY2FsbFxuICAgICAgICogb2YgZGVmbGF0ZSBzaG91bGQgdXNlIHRoZSBzYW1lIGZsdXNoIHBhcmFtZXRlciB0byBtYWtlIHN1cmVcbiAgICAgICAqIHRoYXQgdGhlIGZsdXNoIGlzIGNvbXBsZXRlLiBTbyB3ZSBkb24ndCBoYXZlIHRvIG91dHB1dCBhblxuICAgICAgICogZW1wdHkgYmxvY2sgaGVyZSwgdGhpcyB3aWxsIGJlIGRvbmUgYXQgbmV4dCBjYWxsLiBUaGlzIGFsc29cbiAgICAgICAqIGVuc3VyZXMgdGhhdCBmb3IgYSB2ZXJ5IHNtYWxsIG91dHB1dCBidWZmZXIsIHdlIGVtaXQgYXQgbW9zdFxuICAgICAgICogb25lIGVtcHR5IGJsb2NrLlxuICAgICAgICovXG4gICAgfVxuICAgIGlmIChic3RhdGUgPT09IEJTX0JMT0NLX0RPTkUpIHtcbiAgICAgIGlmIChmbHVzaCA9PT0gWl9QQVJUSUFMX0ZMVVNIKSB7XG4gICAgICAgIF90cl9hbGlnbihzKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGZsdXNoICE9PSBaX0JMT0NLJDEpIHsgLyogRlVMTF9GTFVTSCBvciBTWU5DX0ZMVVNIICovXG5cbiAgICAgICAgX3RyX3N0b3JlZF9ibG9jayhzLCAwLCAwLCBmYWxzZSk7XG4gICAgICAgIC8qIEZvciBhIGZ1bGwgZmx1c2gsIHRoaXMgZW1wdHkgYmxvY2sgd2lsbCBiZSByZWNvZ25pemVkXG4gICAgICAgICAqIGFzIGEgc3BlY2lhbCBtYXJrZXIgYnkgaW5mbGF0ZV9zeW5jKCkuXG4gICAgICAgICAqL1xuICAgICAgICBpZiAoZmx1c2ggPT09IFpfRlVMTF9GTFVTSCQxKSB7XG4gICAgICAgICAgLyoqKiBDTEVBUl9IQVNIKHMpOyAqKiovICAgICAgICAgICAgIC8qIGZvcmdldCBoaXN0b3J5ICovXG4gICAgICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuXG4gICAgICAgICAgaWYgKHMubG9va2FoZWFkID09PSAwKSB7XG4gICAgICAgICAgICBzLnN0cnN0YXJ0ID0gMDtcbiAgICAgICAgICAgIHMuYmxvY2tfc3RhcnQgPSAwO1xuICAgICAgICAgICAgcy5pbnNlcnQgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZmx1c2hfcGVuZGluZyhzdHJtKTtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgICBzLmxhc3RfZmx1c2ggPSAtMTsgLyogYXZvaWQgQlVGX0VSUk9SIGF0IG5leHQgY2FsbCwgc2VlIGFib3ZlICovXG4gICAgICAgIHJldHVybiBaX09LJDM7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vQXNzZXJ0KHN0cm0tPmF2YWlsX291dCA+IDAsIFwiYnVnMlwiKTtcbiAgLy9pZiAoc3RybS5hdmFpbF9vdXQgPD0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJidWcyXCIpO31cblxuICBpZiAoZmx1c2ggIT09IFpfRklOSVNIJDMpIHsgcmV0dXJuIFpfT0skMzsgfVxuICBpZiAocy53cmFwIDw9IDApIHsgcmV0dXJuIFpfU1RSRUFNX0VORCQzOyB9XG5cbiAgLyogV3JpdGUgdGhlIHRyYWlsZXIgKi9cbiAgaWYgKHMud3JhcCA9PT0gMikge1xuICAgIHB1dF9ieXRlKHMsIHN0cm0uYWRsZXIgJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS5hZGxlciA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLmFkbGVyID4+IDI0KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIHN0cm0udG90YWxfaW4gJiAweGZmKTtcbiAgICBwdXRfYnl0ZShzLCAoc3RybS50b3RhbF9pbiA+PiA4KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDE2KSAmIDB4ZmYpO1xuICAgIHB1dF9ieXRlKHMsIChzdHJtLnRvdGFsX2luID4+IDI0KSAmIDB4ZmYpO1xuICB9XG4gIGVsc2VcbiAge1xuICAgIHB1dFNob3J0TVNCKHMsIHN0cm0uYWRsZXIgPj4+IDE2KTtcbiAgICBwdXRTaG9ydE1TQihzLCBzdHJtLmFkbGVyICYgMHhmZmZmKTtcbiAgfVxuXG4gIGZsdXNoX3BlbmRpbmcoc3RybSk7XG4gIC8qIElmIGF2YWlsX291dCBpcyB6ZXJvLCB0aGUgYXBwbGljYXRpb24gd2lsbCBjYWxsIGRlZmxhdGUgYWdhaW5cbiAgICogdG8gZmx1c2ggdGhlIHJlc3QuXG4gICAqL1xuICBpZiAocy53cmFwID4gMCkgeyBzLndyYXAgPSAtcy53cmFwOyB9XG4gIC8qIHdyaXRlIHRoZSB0cmFpbGVyIG9ubHkgb25jZSEgKi9cbiAgcmV0dXJuIHMucGVuZGluZyAhPT0gMCA/IFpfT0skMyA6IFpfU1RSRUFNX0VORCQzO1xufTtcblxuXG5jb25zdCBkZWZsYXRlRW5kID0gKHN0cm0pID0+IHtcblxuICBpZiAoIXN0cm0vKj09IFpfTlVMTCovIHx8ICFzdHJtLnN0YXRlLyo9PSBaX05VTEwqLykge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQyO1xuICB9XG5cbiAgY29uc3Qgc3RhdHVzID0gc3RybS5zdGF0ZS5zdGF0dXM7XG4gIGlmIChzdGF0dXMgIT09IElOSVRfU1RBVEUgJiZcbiAgICBzdGF0dXMgIT09IEVYVFJBX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBOQU1FX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBDT01NRU5UX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBIQ1JDX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBCVVNZX1NUQVRFICYmXG4gICAgc3RhdHVzICE9PSBGSU5JU0hfU1RBVEVcbiAgKSB7XG4gICAgcmV0dXJuIGVycihzdHJtLCBaX1NUUkVBTV9FUlJPUiQyKTtcbiAgfVxuXG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuXG4gIHJldHVybiBzdGF0dXMgPT09IEJVU1lfU1RBVEUgPyBlcnIoc3RybSwgWl9EQVRBX0VSUk9SJDIpIDogWl9PSyQzO1xufTtcblxuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4gKiBJbml0aWFsaXplcyB0aGUgY29tcHJlc3Npb24gZGljdGlvbmFyeSBmcm9tIHRoZSBnaXZlbiBieXRlXG4gKiBzZXF1ZW5jZSB3aXRob3V0IHByb2R1Y2luZyBhbnkgY29tcHJlc3NlZCBvdXRwdXQuXG4gKi9cbmNvbnN0IGRlZmxhdGVTZXREaWN0aW9uYXJ5ID0gKHN0cm0sIGRpY3Rpb25hcnkpID0+IHtcblxuICBsZXQgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIGlmICghc3RybS8qPT0gWl9OVUxMKi8gfHwgIXN0cm0uc3RhdGUvKj09IFpfTlVMTCovKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDI7XG4gIH1cblxuICBjb25zdCBzID0gc3RybS5zdGF0ZTtcbiAgY29uc3Qgd3JhcCA9IHMud3JhcDtcblxuICBpZiAod3JhcCA9PT0gMiB8fCAod3JhcCA9PT0gMSAmJiBzLnN0YXR1cyAhPT0gSU5JVF9TVEFURSkgfHwgcy5sb29rYWhlYWQpIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMjtcbiAgfVxuXG4gIC8qIHdoZW4gdXNpbmcgemxpYiB3cmFwcGVycywgY29tcHV0ZSBBZGxlci0zMiBmb3IgcHJvdmlkZWQgZGljdGlvbmFyeSAqL1xuICBpZiAod3JhcCA9PT0gMSkge1xuICAgIC8qIGFkbGVyMzIoc3RybS0+YWRsZXIsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIHN0cm0uYWRsZXIgPSBhZGxlcjMyXzEoc3RybS5hZGxlciwgZGljdGlvbmFyeSwgZGljdExlbmd0aCwgMCk7XG4gIH1cblxuICBzLndyYXAgPSAwOyAgIC8qIGF2b2lkIGNvbXB1dGluZyBBZGxlci0zMiBpbiByZWFkX2J1ZiAqL1xuXG4gIC8qIGlmIGRpY3Rpb25hcnkgd291bGQgZmlsbCB3aW5kb3csIGp1c3QgcmVwbGFjZSB0aGUgaGlzdG9yeSAqL1xuICBpZiAoZGljdExlbmd0aCA+PSBzLndfc2l6ZSkge1xuICAgIGlmICh3cmFwID09PSAwKSB7ICAgICAgICAgICAgLyogYWxyZWFkeSBlbXB0eSBvdGhlcndpc2UgKi9cbiAgICAgIC8qKiogQ0xFQVJfSEFTSChzKTsgKioqL1xuICAgICAgemVybyhzLmhlYWQpOyAvLyBGaWxsIHdpdGggTklMICg9IDApO1xuICAgICAgcy5zdHJzdGFydCA9IDA7XG4gICAgICBzLmJsb2NrX3N0YXJ0ID0gMDtcbiAgICAgIHMuaW5zZXJ0ID0gMDtcbiAgICB9XG4gICAgLyogdXNlIHRoZSB0YWlsICovXG4gICAgLy8gZGljdGlvbmFyeSA9IGRpY3Rpb25hcnkuc2xpY2UoZGljdExlbmd0aCAtIHMud19zaXplKTtcbiAgICBsZXQgdG1wRGljdCA9IG5ldyBVaW50OEFycmF5KHMud19zaXplKTtcbiAgICB0bXBEaWN0LnNldChkaWN0aW9uYXJ5LnN1YmFycmF5KGRpY3RMZW5ndGggLSBzLndfc2l6ZSwgZGljdExlbmd0aCksIDApO1xuICAgIGRpY3Rpb25hcnkgPSB0bXBEaWN0O1xuICAgIGRpY3RMZW5ndGggPSBzLndfc2l6ZTtcbiAgfVxuICAvKiBpbnNlcnQgZGljdGlvbmFyeSBpbnRvIHdpbmRvdyBhbmQgaGFzaCAqL1xuICBjb25zdCBhdmFpbCA9IHN0cm0uYXZhaWxfaW47XG4gIGNvbnN0IG5leHQgPSBzdHJtLm5leHRfaW47XG4gIGNvbnN0IGlucHV0ID0gc3RybS5pbnB1dDtcbiAgc3RybS5hdmFpbF9pbiA9IGRpY3RMZW5ndGg7XG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uaW5wdXQgPSBkaWN0aW9uYXJ5O1xuICBmaWxsX3dpbmRvdyhzKTtcbiAgd2hpbGUgKHMubG9va2FoZWFkID49IE1JTl9NQVRDSCkge1xuICAgIGxldCBzdHIgPSBzLnN0cnN0YXJ0O1xuICAgIGxldCBuID0gcy5sb29rYWhlYWQgLSAoTUlOX01BVENIIC0gMSk7XG4gICAgZG8ge1xuICAgICAgLyogVVBEQVRFX0hBU0gocywgcy0+aW5zX2gsIHMtPndpbmRvd1tzdHIgKyBNSU5fTUFUQ0gtMV0pOyAqL1xuICAgICAgcy5pbnNfaCA9IEhBU0gocywgcy5pbnNfaCwgcy53aW5kb3dbc3RyICsgTUlOX01BVENIIC0gMV0pO1xuXG4gICAgICBzLnByZXZbc3RyICYgcy53X21hc2tdID0gcy5oZWFkW3MuaW5zX2hdO1xuXG4gICAgICBzLmhlYWRbcy5pbnNfaF0gPSBzdHI7XG4gICAgICBzdHIrKztcbiAgICB9IHdoaWxlICgtLW4pO1xuICAgIHMuc3Ryc3RhcnQgPSBzdHI7XG4gICAgcy5sb29rYWhlYWQgPSBNSU5fTUFUQ0ggLSAxO1xuICAgIGZpbGxfd2luZG93KHMpO1xuICB9XG4gIHMuc3Ryc3RhcnQgKz0gcy5sb29rYWhlYWQ7XG4gIHMuYmxvY2tfc3RhcnQgPSBzLnN0cnN0YXJ0O1xuICBzLmluc2VydCA9IHMubG9va2FoZWFkO1xuICBzLmxvb2thaGVhZCA9IDA7XG4gIHMubWF0Y2hfbGVuZ3RoID0gcy5wcmV2X2xlbmd0aCA9IE1JTl9NQVRDSCAtIDE7XG4gIHMubWF0Y2hfYXZhaWxhYmxlID0gMDtcbiAgc3RybS5uZXh0X2luID0gbmV4dDtcbiAgc3RybS5pbnB1dCA9IGlucHV0O1xuICBzdHJtLmF2YWlsX2luID0gYXZhaWw7XG4gIHMud3JhcCA9IHdyYXA7XG4gIHJldHVybiBaX09LJDM7XG59O1xuXG5cbnZhciBkZWZsYXRlSW5pdF8xID0gZGVmbGF0ZUluaXQ7XG52YXIgZGVmbGF0ZUluaXQyXzEgPSBkZWZsYXRlSW5pdDI7XG52YXIgZGVmbGF0ZVJlc2V0XzEgPSBkZWZsYXRlUmVzZXQ7XG52YXIgZGVmbGF0ZVJlc2V0S2VlcF8xID0gZGVmbGF0ZVJlc2V0S2VlcDtcbnZhciBkZWZsYXRlU2V0SGVhZGVyXzEgPSBkZWZsYXRlU2V0SGVhZGVyO1xudmFyIGRlZmxhdGVfMiQxID0gZGVmbGF0ZSQyO1xudmFyIGRlZmxhdGVFbmRfMSA9IGRlZmxhdGVFbmQ7XG52YXIgZGVmbGF0ZVNldERpY3Rpb25hcnlfMSA9IGRlZmxhdGVTZXREaWN0aW9uYXJ5O1xudmFyIGRlZmxhdGVJbmZvID0gJ3Bha28gZGVmbGF0ZSAoZnJvbSBOb2RlY2EgcHJvamVjdCknO1xuXG4vKiBOb3QgaW1wbGVtZW50ZWRcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVCb3VuZCA9IGRlZmxhdGVCb3VuZDtcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVDb3B5ID0gZGVmbGF0ZUNvcHk7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUGFyYW1zID0gZGVmbGF0ZVBhcmFtcztcbm1vZHVsZS5leHBvcnRzLmRlZmxhdGVQZW5kaW5nID0gZGVmbGF0ZVBlbmRpbmc7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlUHJpbWUgPSBkZWZsYXRlUHJpbWU7XG5tb2R1bGUuZXhwb3J0cy5kZWZsYXRlVHVuZSA9IGRlZmxhdGVUdW5lO1xuKi9cblxudmFyIGRlZmxhdGVfMSQyID0ge1xuXHRkZWZsYXRlSW5pdDogZGVmbGF0ZUluaXRfMSxcblx0ZGVmbGF0ZUluaXQyOiBkZWZsYXRlSW5pdDJfMSxcblx0ZGVmbGF0ZVJlc2V0OiBkZWZsYXRlUmVzZXRfMSxcblx0ZGVmbGF0ZVJlc2V0S2VlcDogZGVmbGF0ZVJlc2V0S2VlcF8xLFxuXHRkZWZsYXRlU2V0SGVhZGVyOiBkZWZsYXRlU2V0SGVhZGVyXzEsXG5cdGRlZmxhdGU6IGRlZmxhdGVfMiQxLFxuXHRkZWZsYXRlRW5kOiBkZWZsYXRlRW5kXzEsXG5cdGRlZmxhdGVTZXREaWN0aW9uYXJ5OiBkZWZsYXRlU2V0RGljdGlvbmFyeV8xLFxuXHRkZWZsYXRlSW5mbzogZGVmbGF0ZUluZm9cbn07XG5cbmNvbnN0IF9oYXMgPSAob2JqLCBrZXkpID0+IHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSk7XG59O1xuXG52YXIgYXNzaWduID0gZnVuY3Rpb24gKG9iaiAvKmZyb20xLCBmcm9tMiwgZnJvbTMsIC4uLiovKSB7XG4gIGNvbnN0IHNvdXJjZXMgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuICB3aGlsZSAoc291cmNlcy5sZW5ndGgpIHtcbiAgICBjb25zdCBzb3VyY2UgPSBzb3VyY2VzLnNoaWZ0KCk7XG4gICAgaWYgKCFzb3VyY2UpIHsgY29udGludWU7IH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihzb3VyY2UgKyAnbXVzdCBiZSBub24tb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgZm9yIChjb25zdCBwIGluIHNvdXJjZSkge1xuICAgICAgaWYgKF9oYXMoc291cmNlLCBwKSkge1xuICAgICAgICBvYmpbcF0gPSBzb3VyY2VbcF07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG9iajtcbn07XG5cblxuLy8gSm9pbiBhcnJheSBvZiBjaHVua3MgdG8gc2luZ2xlIGFycmF5LlxudmFyIGZsYXR0ZW5DaHVua3MgPSAoY2h1bmtzKSA9PiB7XG4gIC8vIGNhbGN1bGF0ZSBkYXRhIGxlbmd0aFxuICBsZXQgbGVuID0gMDtcblxuICBmb3IgKGxldCBpID0gMCwgbCA9IGNodW5rcy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBsZW4gKz0gY2h1bmtzW2ldLmxlbmd0aDtcbiAgfVxuXG4gIC8vIGpvaW4gY2h1bmtzXG4gIGNvbnN0IHJlc3VsdCA9IG5ldyBVaW50OEFycmF5KGxlbik7XG5cbiAgZm9yIChsZXQgaSA9IDAsIHBvcyA9IDAsIGwgPSBjaHVua3MubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgbGV0IGNodW5rID0gY2h1bmtzW2ldO1xuICAgIHJlc3VsdC5zZXQoY2h1bmssIHBvcyk7XG4gICAgcG9zICs9IGNodW5rLmxlbmd0aDtcbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG52YXIgY29tbW9uID0ge1xuXHRhc3NpZ246IGFzc2lnbixcblx0ZmxhdHRlbkNodW5rczogZmxhdHRlbkNodW5rc1xufTtcblxuLy8gU3RyaW5nIGVuY29kZS9kZWNvZGUgaGVscGVyc1xuXG5cbi8vIFF1aWNrIGNoZWNrIGlmIHdlIGNhbiB1c2UgZmFzdCBhcnJheSB0byBiaW4gc3RyaW5nIGNvbnZlcnNpb25cbi8vXG4vLyAtIGFwcGx5KEFycmF5KSBjYW4gZmFpbCBvbiBBbmRyb2lkIDIuMlxuLy8gLSBhcHBseShVaW50OEFycmF5KSBjYW4gZmFpbCBvbiBpT1MgNS4xIFNhZmFyaVxuLy9cbmxldCBTVFJfQVBQTFlfVUlBX09LID0gdHJ1ZTtcblxudHJ5IHsgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBuZXcgVWludDhBcnJheSgxKSk7IH0gY2F0Y2ggKF9fKSB7IFNUUl9BUFBMWV9VSUFfT0sgPSBmYWxzZTsgfVxuXG5cbi8vIFRhYmxlIHdpdGggdXRmOCBsZW5ndGhzIChjYWxjdWxhdGVkIGJ5IGZpcnN0IGJ5dGUgb2Ygc2VxdWVuY2UpXG4vLyBOb3RlLCB0aGF0IDUgJiA2LWJ5dGUgdmFsdWVzIGFuZCBzb21lIDQtYnl0ZSB2YWx1ZXMgY2FuIG5vdCBiZSByZXByZXNlbnRlZCBpbiBKUyxcbi8vIGJlY2F1c2UgbWF4IHBvc3NpYmxlIGNvZGVwb2ludCBpcyAweDEwZmZmZlxuY29uc3QgX3V0ZjhsZW4gPSBuZXcgVWludDhBcnJheSgyNTYpO1xuZm9yIChsZXQgcSA9IDA7IHEgPCAyNTY7IHErKykge1xuICBfdXRmOGxlbltxXSA9IChxID49IDI1MiA/IDYgOiBxID49IDI0OCA/IDUgOiBxID49IDI0MCA/IDQgOiBxID49IDIyNCA/IDMgOiBxID49IDE5MiA/IDIgOiAxKTtcbn1cbl91dGY4bGVuWzI1NF0gPSBfdXRmOGxlblsyNTRdID0gMTsgLy8gSW52YWxpZCBzZXF1ZW5jZSBzdGFydFxuXG5cbi8vIGNvbnZlcnQgc3RyaW5nIHRvIGFycmF5ICh0eXBlZCwgd2hlbiBwb3NzaWJsZSlcbnZhciBzdHJpbmcyYnVmID0gKHN0cikgPT4ge1xuICBpZiAodHlwZW9mIFRleHRFbmNvZGVyID09PSAnZnVuY3Rpb24nICYmIFRleHRFbmNvZGVyLnByb3RvdHlwZS5lbmNvZGUpIHtcbiAgICByZXR1cm4gbmV3IFRleHRFbmNvZGVyKCkuZW5jb2RlKHN0cik7XG4gIH1cblxuICBsZXQgYnVmLCBjLCBjMiwgbV9wb3MsIGksIHN0cl9sZW4gPSBzdHIubGVuZ3RoLCBidWZfbGVuID0gMDtcblxuICAvLyBjb3VudCBiaW5hcnkgc2l6ZVxuICBmb3IgKG1fcG9zID0gMDsgbV9wb3MgPCBzdHJfbGVuOyBtX3BvcysrKSB7XG4gICAgYyA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zKTtcbiAgICBpZiAoKGMgJiAweGZjMDApID09PSAweGQ4MDAgJiYgKG1fcG9zICsgMSA8IHN0cl9sZW4pKSB7XG4gICAgICBjMiA9IHN0ci5jaGFyQ29kZUF0KG1fcG9zICsgMSk7XG4gICAgICBpZiAoKGMyICYgMHhmYzAwKSA9PT0gMHhkYzAwKSB7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKChjIC0gMHhkODAwKSA8PCAxMCkgKyAoYzIgLSAweGRjMDApO1xuICAgICAgICBtX3BvcysrO1xuICAgICAgfVxuICAgIH1cbiAgICBidWZfbGVuICs9IGMgPCAweDgwID8gMSA6IGMgPCAweDgwMCA/IDIgOiBjIDwgMHgxMDAwMCA/IDMgOiA0O1xuICB9XG5cbiAgLy8gYWxsb2NhdGUgYnVmZmVyXG4gIGJ1ZiA9IG5ldyBVaW50OEFycmF5KGJ1Zl9sZW4pO1xuXG4gIC8vIGNvbnZlcnRcbiAgZm9yIChpID0gMCwgbV9wb3MgPSAwOyBpIDwgYnVmX2xlbjsgbV9wb3MrKykge1xuICAgIGMgPSBzdHIuY2hhckNvZGVBdChtX3Bvcyk7XG4gICAgaWYgKChjICYgMHhmYzAwKSA9PT0gMHhkODAwICYmIChtX3BvcyArIDEgPCBzdHJfbGVuKSkge1xuICAgICAgYzIgPSBzdHIuY2hhckNvZGVBdChtX3BvcyArIDEpO1xuICAgICAgaWYgKChjMiAmIDB4ZmMwMCkgPT09IDB4ZGMwMCkge1xuICAgICAgICBjID0gMHgxMDAwMCArICgoYyAtIDB4ZDgwMCkgPDwgMTApICsgKGMyIC0gMHhkYzAwKTtcbiAgICAgICAgbV9wb3MrKztcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGMgPCAweDgwKSB7XG4gICAgICAvKiBvbmUgYnl0ZSAqL1xuICAgICAgYnVmW2krK10gPSBjO1xuICAgIH0gZWxzZSBpZiAoYyA8IDB4ODAwKSB7XG4gICAgICAvKiB0d28gYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhDMCB8IChjID4+PiA2KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfSBlbHNlIGlmIChjIDwgMHgxMDAwMCkge1xuICAgICAgLyogdGhyZWUgYnl0ZXMgKi9cbiAgICAgIGJ1ZltpKytdID0gMHhFMCB8IChjID4+PiAxMik7XG4gICAgICBidWZbaSsrXSA9IDB4ODAgfCAoYyA+Pj4gNiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgJiAweDNmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogZm91ciBieXRlcyAqL1xuICAgICAgYnVmW2krK10gPSAweGYwIHwgKGMgPj4+IDE4KTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjID4+PiAxMiAmIDB4M2YpO1xuICAgICAgYnVmW2krK10gPSAweDgwIHwgKGMgPj4+IDYgJiAweDNmKTtcbiAgICAgIGJ1ZltpKytdID0gMHg4MCB8IChjICYgMHgzZik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJ1Zjtcbn07XG5cbi8vIEhlbHBlclxuY29uc3QgYnVmMmJpbnN0cmluZyA9IChidWYsIGxlbikgPT4ge1xuICAvLyBPbiBDaHJvbWUsIHRoZSBhcmd1bWVudHMgaW4gYSBmdW5jdGlvbiBjYWxsIHRoYXQgYXJlIGFsbG93ZWQgaXMgYDY1NTM0YC5cbiAgLy8gSWYgdGhlIGxlbmd0aCBvZiB0aGUgYnVmZmVyIGlzIHNtYWxsZXIgdGhhbiB0aGF0LCB3ZSBjYW4gdXNlIHRoaXMgb3B0aW1pemF0aW9uLFxuICAvLyBvdGhlcndpc2Ugd2Ugd2lsbCB0YWtlIGEgc2xvd2VyIHBhdGguXG4gIGlmIChsZW4gPCA2NTUzNCkge1xuICAgIGlmIChidWYuc3ViYXJyYXkgJiYgU1RSX0FQUExZX1VJQV9PSykge1xuICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgYnVmLmxlbmd0aCA9PT0gbGVuID8gYnVmIDogYnVmLnN1YmFycmF5KDAsIGxlbikpO1xuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSAnJztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgIHJlc3VsdCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cblxuLy8gY29udmVydCBhcnJheSB0byBzdHJpbmdcbnZhciBidWYyc3RyaW5nID0gKGJ1ZiwgbWF4KSA9PiB7XG4gIGNvbnN0IGxlbiA9IG1heCB8fCBidWYubGVuZ3RoO1xuXG4gIGlmICh0eXBlb2YgVGV4dERlY29kZXIgPT09ICdmdW5jdGlvbicgJiYgVGV4dERlY29kZXIucHJvdG90eXBlLmRlY29kZSkge1xuICAgIHJldHVybiBuZXcgVGV4dERlY29kZXIoKS5kZWNvZGUoYnVmLnN1YmFycmF5KDAsIG1heCkpO1xuICB9XG5cbiAgbGV0IGksIG91dDtcblxuICAvLyBSZXNlcnZlIG1heCBwb3NzaWJsZSBsZW5ndGggKDIgd29yZHMgcGVyIGNoYXIpXG4gIC8vIE5COiBieSB1bmtub3duIHJlYXNvbnMsIEFycmF5IGlzIHNpZ25pZmljYW50bHkgZmFzdGVyIGZvclxuICAvLyAgICAgU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseSB0aGFuIFVpbnQxNkFycmF5LlxuICBjb25zdCB1dGYxNmJ1ZiA9IG5ldyBBcnJheShsZW4gKiAyKTtcblxuICBmb3IgKG91dCA9IDAsIGkgPSAwOyBpIDwgbGVuOykge1xuICAgIGxldCBjID0gYnVmW2krK107XG4gICAgLy8gcXVpY2sgcHJvY2VzcyBhc2NpaVxuICAgIGlmIChjIDwgMHg4MCkgeyB1dGYxNmJ1ZltvdXQrK10gPSBjOyBjb250aW51ZTsgfVxuXG4gICAgbGV0IGNfbGVuID0gX3V0ZjhsZW5bY107XG4gICAgLy8gc2tpcCA1ICYgNiBieXRlIGNvZGVzXG4gICAgaWYgKGNfbGVuID4gNCkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGkgKz0gY19sZW4gLSAxOyBjb250aW51ZTsgfVxuXG4gICAgLy8gYXBwbHkgbWFzayBvbiBmaXJzdCBieXRlXG4gICAgYyAmPSBjX2xlbiA9PT0gMiA/IDB4MWYgOiBjX2xlbiA9PT0gMyA/IDB4MGYgOiAweDA3O1xuICAgIC8vIGpvaW4gdGhlIHJlc3RcbiAgICB3aGlsZSAoY19sZW4gPiAxICYmIGkgPCBsZW4pIHtcbiAgICAgIGMgPSAoYyA8PCA2KSB8IChidWZbaSsrXSAmIDB4M2YpO1xuICAgICAgY19sZW4tLTtcbiAgICB9XG5cbiAgICAvLyB0ZXJtaW5hdGVkIGJ5IGVuZCBvZiBzdHJpbmc/XG4gICAgaWYgKGNfbGVuID4gMSkgeyB1dGYxNmJ1ZltvdXQrK10gPSAweGZmZmQ7IGNvbnRpbnVlOyB9XG5cbiAgICBpZiAoYyA8IDB4MTAwMDApIHtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IGM7XG4gICAgfSBlbHNlIHtcbiAgICAgIGMgLT0gMHgxMDAwMDtcbiAgICAgIHV0ZjE2YnVmW291dCsrXSA9IDB4ZDgwMCB8ICgoYyA+PiAxMCkgJiAweDNmZik7XG4gICAgICB1dGYxNmJ1ZltvdXQrK10gPSAweGRjMDAgfCAoYyAmIDB4M2ZmKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnVmMmJpbnN0cmluZyh1dGYxNmJ1Ziwgb3V0KTtcbn07XG5cblxuLy8gQ2FsY3VsYXRlIG1heCBwb3NzaWJsZSBwb3NpdGlvbiBpbiB1dGY4IGJ1ZmZlcixcbi8vIHRoYXQgd2lsbCBub3QgYnJlYWsgc2VxdWVuY2UuIElmIHRoYXQncyBub3QgcG9zc2libGVcbi8vIC0gKHZlcnkgc21hbGwgbGltaXRzKSByZXR1cm4gbWF4IHNpemUgYXMgaXMuXG4vL1xuLy8gYnVmW10gLSB1dGY4IGJ5dGVzIGFycmF5XG4vLyBtYXggICAtIGxlbmd0aCBsaW1pdCAobWFuZGF0b3J5KTtcbnZhciB1dGY4Ym9yZGVyID0gKGJ1ZiwgbWF4KSA9PiB7XG5cbiAgbWF4ID0gbWF4IHx8IGJ1Zi5sZW5ndGg7XG4gIGlmIChtYXggPiBidWYubGVuZ3RoKSB7IG1heCA9IGJ1Zi5sZW5ndGg7IH1cblxuICAvLyBnbyBiYWNrIGZyb20gbGFzdCBwb3NpdGlvbiwgdW50aWwgc3RhcnQgb2Ygc2VxdWVuY2UgZm91bmRcbiAgbGV0IHBvcyA9IG1heCAtIDE7XG4gIHdoaWxlIChwb3MgPj0gMCAmJiAoYnVmW3Bvc10gJiAweEMwKSA9PT0gMHg4MCkgeyBwb3MtLTsgfVxuXG4gIC8vIFZlcnkgc21hbGwgYW5kIGJyb2tlbiBzZXF1ZW5jZSxcbiAgLy8gcmV0dXJuIG1heCwgYmVjYXVzZSB3ZSBzaG91bGQgcmV0dXJuIHNvbWV0aGluZyBhbnl3YXkuXG4gIGlmIChwb3MgPCAwKSB7IHJldHVybiBtYXg7IH1cblxuICAvLyBJZiB3ZSBjYW1lIHRvIHN0YXJ0IG9mIGJ1ZmZlciAtIHRoYXQgbWVhbnMgYnVmZmVyIGlzIHRvbyBzbWFsbCxcbiAgLy8gcmV0dXJuIG1heCB0b28uXG4gIGlmIChwb3MgPT09IDApIHsgcmV0dXJuIG1heDsgfVxuXG4gIHJldHVybiAocG9zICsgX3V0ZjhsZW5bYnVmW3Bvc11dID4gbWF4KSA/IHBvcyA6IG1heDtcbn07XG5cbnZhciBzdHJpbmdzID0ge1xuXHRzdHJpbmcyYnVmOiBzdHJpbmcyYnVmLFxuXHRidWYyc3RyaW5nOiBidWYyc3RyaW5nLFxuXHR1dGY4Ym9yZGVyOiB1dGY4Ym9yZGVyXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbmZ1bmN0aW9uIFpTdHJlYW0oKSB7XG4gIC8qIG5leHQgaW5wdXQgYnl0ZSAqL1xuICB0aGlzLmlucHV0ID0gbnVsbDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuICB0aGlzLm5leHRfaW4gPSAwO1xuICAvKiBudW1iZXIgb2YgYnl0ZXMgYXZhaWxhYmxlIGF0IGlucHV0ICovXG4gIHRoaXMuYXZhaWxfaW4gPSAwO1xuICAvKiB0b3RhbCBudW1iZXIgb2YgaW5wdXQgYnl0ZXMgcmVhZCBzbyBmYXIgKi9cbiAgdGhpcy50b3RhbF9pbiA9IDA7XG4gIC8qIG5leHQgb3V0cHV0IGJ5dGUgc2hvdWxkIGJlIHB1dCB0aGVyZSAqL1xuICB0aGlzLm91dHB1dCA9IG51bGw7IC8vIEpTIHNwZWNpZmljLCBiZWNhdXNlIHdlIGhhdmUgbm8gcG9pbnRlcnNcbiAgdGhpcy5uZXh0X291dCA9IDA7XG4gIC8qIHJlbWFpbmluZyBmcmVlIHNwYWNlIGF0IG91dHB1dCAqL1xuICB0aGlzLmF2YWlsX291dCA9IDA7XG4gIC8qIHRvdGFsIG51bWJlciBvZiBieXRlcyBvdXRwdXQgc28gZmFyICovXG4gIHRoaXMudG90YWxfb3V0ID0gMDtcbiAgLyogbGFzdCBlcnJvciBtZXNzYWdlLCBOVUxMIGlmIG5vIGVycm9yICovXG4gIHRoaXMubXNnID0gJycvKlpfTlVMTCovO1xuICAvKiBub3QgdmlzaWJsZSBieSBhcHBsaWNhdGlvbnMgKi9cbiAgdGhpcy5zdGF0ZSA9IG51bGw7XG4gIC8qIGJlc3QgZ3Vlc3MgYWJvdXQgdGhlIGRhdGEgdHlwZTogYmluYXJ5IG9yIHRleHQgKi9cbiAgdGhpcy5kYXRhX3R5cGUgPSAyLypaX1VOS05PV04qLztcbiAgLyogYWRsZXIzMiB2YWx1ZSBvZiB0aGUgdW5jb21wcmVzc2VkIGRhdGEgKi9cbiAgdGhpcy5hZGxlciA9IDA7XG59XG5cbnZhciB6c3RyZWFtID0gWlN0cmVhbTtcblxuY29uc3QgdG9TdHJpbmckMSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5jb25zdCB7XG4gIFpfTk9fRkxVU0g6IFpfTk9fRkxVU0gkMSwgWl9TWU5DX0ZMVVNILCBaX0ZVTExfRkxVU0gsIFpfRklOSVNIOiBaX0ZJTklTSCQyLFxuICBaX09LOiBaX09LJDIsIFpfU1RSRUFNX0VORDogWl9TVFJFQU1fRU5EJDIsXG4gIFpfREVGQVVMVF9DT01QUkVTU0lPTixcbiAgWl9ERUZBVUxUX1NUUkFURUdZLFxuICBaX0RFRkxBVEVEOiBaX0RFRkxBVEVEJDFcbn0gPSBjb25zdGFudHMkMjtcblxuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG4vKipcbiAqIGNsYXNzIERlZmxhdGVcbiAqXG4gKiBHZW5lcmljIEpTLXN0eWxlIHdyYXBwZXIgZm9yIHpsaWIgY2FsbHMuIElmIHlvdSBkb24ndCBuZWVkXG4gKiBzdHJlYW1pbmcgYmVoYXZpb3VyIC0gdXNlIG1vcmUgc2ltcGxlIGZ1bmN0aW9uczogW1tkZWZsYXRlXV0sXG4gKiBbW2RlZmxhdGVSYXddXSBhbmQgW1tnemlwXV0uXG4gKiovXG5cbi8qIGludGVybmFsXG4gKiBEZWZsYXRlLmNodW5rcyAtPiBBcnJheVxuICpcbiAqIENodW5rcyBvZiBvdXRwdXQgZGF0YSwgaWYgW1tEZWZsYXRlI29uRGF0YV1dIG5vdCBvdmVycmlkZGVuLlxuICoqL1xuXG4vKipcbiAqIERlZmxhdGUucmVzdWx0IC0+IFVpbnQ4QXJyYXlcbiAqXG4gKiBDb21wcmVzc2VkIHJlc3VsdCwgZ2VuZXJhdGVkIGJ5IGRlZmF1bHQgW1tEZWZsYXRlI29uRGF0YV1dXG4gKiBhbmQgW1tEZWZsYXRlI29uRW5kXV0gaGFuZGxlcnMuIEZpbGxlZCBhZnRlciB5b3UgcHVzaCBsYXN0IGNodW5rXG4gKiAoY2FsbCBbW0RlZmxhdGUjcHVzaF1dIHdpdGggYFpfRklOSVNIYCAvIGB0cnVlYCBwYXJhbSkuXG4gKiovXG5cbi8qKlxuICogRGVmbGF0ZS5lcnIgLT4gTnVtYmVyXG4gKlxuICogRXJyb3IgY29kZSBhZnRlciBkZWZsYXRlIGZpbmlzaGVkLiAwIChaX09LKSBvbiBzdWNjZXNzLlxuICogWW91IHdpbGwgbm90IG5lZWQgaXQgaW4gcmVhbCBsaWZlLCBiZWNhdXNlIGRlZmxhdGUgZXJyb3JzXG4gKiBhcmUgcG9zc2libGUgb25seSBvbiB3cm9uZyBvcHRpb25zIG9yIGJhZCBgb25EYXRhYCAvIGBvbkVuZGBcbiAqIGN1c3RvbSBoYW5kbGVycy5cbiAqKi9cblxuLyoqXG4gKiBEZWZsYXRlLm1zZyAtPiBTdHJpbmdcbiAqXG4gKiBFcnJvciBtZXNzYWdlLCBpZiBbW0RlZmxhdGUuZXJyXV0gIT0gMFxuICoqL1xuXG5cbi8qKlxuICogbmV3IERlZmxhdGUob3B0aW9ucylcbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ3JlYXRlcyBuZXcgZGVmbGF0b3IgaW5zdGFuY2Ugd2l0aCBzcGVjaWZpZWQgcGFyYW1zLiBUaHJvd3MgZXhjZXB0aW9uXG4gKiBvbiBiYWQgcGFyYW1zLiBTdXBwb3J0ZWQgb3B0aW9uczpcbiAqXG4gKiAtIGBsZXZlbGBcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBtZW1MZXZlbGBcbiAqIC0gYHN0cmF0ZWd5YFxuICogLSBgZGljdGlvbmFyeWBcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBBZGRpdGlvbmFsIG9wdGlvbnMsIGZvciBpbnRlcm5hbCBuZWVkczpcbiAqXG4gKiAtIGBjaHVua1NpemVgIC0gc2l6ZSBvZiBnZW5lcmF0ZWQgZGF0YSBjaHVua3MgKDE2SyBieSBkZWZhdWx0KVxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBkbyByYXcgZGVmbGF0ZVxuICogLSBgZ3ppcGAgKEJvb2xlYW4pIC0gY3JlYXRlIGd6aXAgd3JhcHBlclxuICogLSBgaGVhZGVyYCAoT2JqZWN0KSAtIGN1c3RvbSBoZWFkZXIgZm9yIGd6aXBcbiAqICAgLSBgdGV4dGAgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBjb21wcmVzc2VkIGRhdGEgYmVsaWV2ZWQgdG8gYmUgdGV4dFxuICogICAtIGB0aW1lYCAoTnVtYmVyKSAtIG1vZGlmaWNhdGlvbiB0aW1lLCB1bml4IHRpbWVzdGFtcFxuICogICAtIGBvc2AgKE51bWJlcikgLSBvcGVyYXRpb24gc3lzdGVtIGNvZGVcbiAqICAgLSBgZXh0cmFgIChBcnJheSkgLSBhcnJheSBvZiBieXRlcyB3aXRoIGV4dHJhIGRhdGEgKG1heCA2NTUzNilcbiAqICAgLSBgbmFtZWAgKFN0cmluZykgLSBmaWxlIG5hbWUgKGJpbmFyeSBzdHJpbmcpXG4gKiAgIC0gYGNvbW1lbnRgIChTdHJpbmcpIC0gY29tbWVudCAoYmluYXJ5IHN0cmluZylcbiAqICAgLSBgaGNyY2AgKEJvb2xlYW4pIC0gdHJ1ZSBpZiBoZWFkZXIgY3JjIHNob3VsZCBiZSBhZGRlZFxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKVxuICogICAsIGNodW5rMSA9IG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pXG4gKiAgICwgY2h1bmsyID0gbmV3IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogY29uc3QgZGVmbGF0ZSA9IG5ldyBwYWtvLkRlZmxhdGUoeyBsZXZlbDogM30pO1xuICpcbiAqIGRlZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTtcbiAqIGRlZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG4gKlxuICogaWYgKGRlZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihkZWZsYXRlLmVycik7IH1cbiAqXG4gKiBjb25zb2xlLmxvZyhkZWZsYXRlLnJlc3VsdCk7XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIERlZmxhdGUkMShvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IGNvbW1vbi5hc3NpZ24oe1xuICAgIGxldmVsOiBaX0RFRkFVTFRfQ09NUFJFU1NJT04sXG4gICAgbWV0aG9kOiBaX0RFRkxBVEVEJDEsXG4gICAgY2h1bmtTaXplOiAxNjM4NCxcbiAgICB3aW5kb3dCaXRzOiAxNSxcbiAgICBtZW1MZXZlbDogOCxcbiAgICBzdHJhdGVneTogWl9ERUZBVUxUX1NUUkFURUdZXG4gIH0sIG9wdGlvbnMgfHwge30pO1xuXG4gIGxldCBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgaWYgKG9wdC5yYXcgJiYgKG9wdC53aW5kb3dCaXRzID4gMCkpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgfVxuXG4gIGVsc2UgaWYgKG9wdC5nemlwICYmIChvcHQud2luZG93Qml0cyA+IDApICYmIChvcHQud2luZG93Qml0cyA8IDE2KSkge1xuICAgIG9wdC53aW5kb3dCaXRzICs9IDE2O1xuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtID0gbmV3IHpzdHJlYW0oKTtcbiAgdGhpcy5zdHJtLmF2YWlsX291dCA9IDA7XG5cbiAgbGV0IHN0YXR1cyA9IGRlZmxhdGVfMSQyLmRlZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LmxldmVsLFxuICAgIG9wdC5tZXRob2QsXG4gICAgb3B0LndpbmRvd0JpdHMsXG4gICAgb3B0Lm1lbUxldmVsLFxuICAgIG9wdC5zdHJhdGVneVxuICApO1xuXG4gIGlmIChzdGF0dXMgIT09IFpfT0skMikge1xuICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlc1tzdGF0dXNdKTtcbiAgfVxuXG4gIGlmIChvcHQuaGVhZGVyKSB7XG4gICAgZGVmbGF0ZV8xJDIuZGVmbGF0ZVNldEhlYWRlcih0aGlzLnN0cm0sIG9wdC5oZWFkZXIpO1xuICB9XG5cbiAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7XG4gICAgbGV0IGRpY3Q7XG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAvLyBJZiB3ZSBuZWVkIHRvIGNvbXByZXNzIHRleHQsIGNoYW5nZSBlbmNvZGluZyB0byB1dGY4LlxuICAgICAgZGljdCA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIGlmICh0b1N0cmluZyQxLmNhbGwob3B0LmRpY3Rpb25hcnkpID09PSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nKSB7XG4gICAgICBkaWN0ID0gbmV3IFVpbnQ4QXJyYXkob3B0LmRpY3Rpb25hcnkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkaWN0ID0gb3B0LmRpY3Rpb25hcnk7XG4gICAgfVxuXG4gICAgc3RhdHVzID0gZGVmbGF0ZV8xJDIuZGVmbGF0ZVNldERpY3Rpb25hcnkodGhpcy5zdHJtLCBkaWN0KTtcblxuICAgIGlmIChzdGF0dXMgIT09IFpfT0skMikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzW3N0YXR1c10pO1xuICAgIH1cblxuICAgIHRoaXMuX2RpY3Rfc2V0ID0gdHJ1ZTtcbiAgfVxufVxuXG4vKipcbiAqIERlZmxhdGUjcHVzaChkYXRhWywgZmx1c2hfbW9kZV0pIC0+IEJvb2xlYW5cbiAqIC0gZGF0YSAoVWludDhBcnJheXxBcnJheUJ1ZmZlcnxTdHJpbmcpOiBpbnB1dCBkYXRhLiBTdHJpbmdzIHdpbGwgYmVcbiAqICAgY29udmVydGVkIHRvIHV0ZjggYnl0ZSBzZXF1ZW5jZS5cbiAqIC0gZmx1c2hfbW9kZSAoTnVtYmVyfEJvb2xlYW4pOiAwLi42IGZvciBjb3JyZXNwb25kaW5nIFpfTk9fRkxVU0guLlpfVFJFRSBtb2Rlcy5cbiAqICAgU2VlIGNvbnN0YW50cy4gU2tpcHBlZCBvciBgZmFsc2VgIG1lYW5zIFpfTk9fRkxVU0gsIGB0cnVlYCBtZWFucyBaX0ZJTklTSC5cbiAqXG4gKiBTZW5kcyBpbnB1dCBkYXRhIHRvIGRlZmxhdGUgcGlwZSwgZ2VuZXJhdGluZyBbW0RlZmxhdGUjb25EYXRhXV0gY2FsbHMgd2l0aFxuICogbmV3IGNvbXByZXNzZWQgY2h1bmtzLiBSZXR1cm5zIGB0cnVlYCBvbiBzdWNjZXNzLiBUaGUgbGFzdCBkYXRhIGJsb2NrIG11c3RcbiAqIGhhdmUgYGZsdXNoX21vZGVgIFpfRklOSVNIIChvciBgdHJ1ZWApLiBUaGF0IHdpbGwgZmx1c2ggaW50ZXJuYWwgcGVuZGluZ1xuICogYnVmZmVycyBhbmQgY2FsbCBbW0RlZmxhdGUjb25FbmRdXS5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tEZWZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuRGVmbGF0ZSQxLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIGZsdXNoX21vZGUpIHtcbiAgY29uc3Qgc3RybSA9IHRoaXMuc3RybTtcbiAgY29uc3QgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgbGV0IHN0YXR1cywgX2ZsdXNoX21vZGU7XG5cbiAgaWYgKHRoaXMuZW5kZWQpIHsgcmV0dXJuIGZhbHNlOyB9XG5cbiAgaWYgKGZsdXNoX21vZGUgPT09IH5+Zmx1c2hfbW9kZSkgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlO1xuICBlbHNlIF9mbHVzaF9tb2RlID0gZmx1c2hfbW9kZSA9PT0gdHJ1ZSA/IFpfRklOSVNIJDIgOiBaX05PX0ZMVVNIJDE7XG5cbiAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgLy8gSWYgd2UgbmVlZCB0byBjb21wcmVzcyB0ZXh0LCBjaGFuZ2UgZW5jb2RpbmcgdG8gdXRmOC5cbiAgICBzdHJtLmlucHV0ID0gc3RyaW5ncy5zdHJpbmcyYnVmKGRhdGEpO1xuICB9IGVsc2UgaWYgKHRvU3RyaW5nJDEuY2FsbChkYXRhKSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgIHN0cm0uaW5wdXQgPSBuZXcgVWludDhBcnJheShkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICBzdHJtLmlucHV0ID0gZGF0YTtcbiAgfVxuXG4gIHN0cm0ubmV4dF9pbiA9IDA7XG4gIHN0cm0uYXZhaWxfaW4gPSBzdHJtLmlucHV0Lmxlbmd0aDtcblxuICBmb3IgKDs7KSB7XG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICBzdHJtLm91dHB1dCA9IG5ldyBVaW50OEFycmF5KGNodW5rU2l6ZSk7XG4gICAgICBzdHJtLm5leHRfb3V0ID0gMDtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gY2h1bmtTaXplO1xuICAgIH1cblxuICAgIC8vIE1ha2Ugc3VyZSBhdmFpbF9vdXQgPiA2IHRvIGF2b2lkIHJlcGVhdGluZyBtYXJrZXJzXG4gICAgaWYgKChfZmx1c2hfbW9kZSA9PT0gWl9TWU5DX0ZMVVNIIHx8IF9mbHVzaF9tb2RlID09PSBaX0ZVTExfRkxVU0gpICYmIHN0cm0uYXZhaWxfb3V0IDw9IDYpIHtcbiAgICAgIHRoaXMub25EYXRhKHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgIHN0cm0uYXZhaWxfb3V0ID0gMDtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH1cblxuICAgIHN0YXR1cyA9IGRlZmxhdGVfMSQyLmRlZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuXG4gICAgLy8gRW5kZWQgPT4gZmx1c2ggYW5kIGZpbmlzaFxuICAgIGlmIChzdGF0dXMgPT09IFpfU1RSRUFNX0VORCQyKSB7XG4gICAgICBpZiAoc3RybS5uZXh0X291dCA+IDApIHtcbiAgICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgfVxuICAgICAgc3RhdHVzID0gZGVmbGF0ZV8xJDIuZGVmbGF0ZUVuZCh0aGlzLnN0cm0pO1xuICAgICAgdGhpcy5vbkVuZChzdGF0dXMpO1xuICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gc3RhdHVzID09PSBaX09LJDI7XG4gICAgfVxuXG4gICAgLy8gRmx1c2ggaWYgb3V0IGJ1ZmZlciBmdWxsXG4gICAgaWYgKHN0cm0uYXZhaWxfb3V0ID09PSAwKSB7XG4gICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dCk7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG5cbiAgICAvLyBGbHVzaCBpZiByZXF1ZXN0ZWQgYW5kIGhhcyBkYXRhXG4gICAgaWYgKF9mbHVzaF9tb2RlID4gMCAmJiBzdHJtLm5leHRfb3V0ID4gMCkge1xuICAgICAgdGhpcy5vbkRhdGEoc3RybS5vdXRwdXQuc3ViYXJyYXkoMCwgc3RybS5uZXh0X291dCkpO1xuICAgICAgc3RybS5hdmFpbF9vdXQgPSAwO1xuICAgICAgY29udGludWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogRGVmbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXkpOiBvdXRwdXQgZGF0YS5cbiAqXG4gKiBCeSBkZWZhdWx0LCBzdG9yZXMgZGF0YSBibG9ja3MgaW4gYGNodW5rc1tdYCBwcm9wZXJ0eSBhbmQgZ2x1ZVxuICogdGhvc2UgaW4gYG9uRW5kYC4gT3ZlcnJpZGUgdGhpcyBoYW5kbGVyLCBpZiB5b3UgbmVlZCBhbm90aGVyIGJlaGF2aW91ci5cbiAqKi9cbkRlZmxhdGUkMS5wcm90b3R5cGUub25EYXRhID0gZnVuY3Rpb24gKGNodW5rKSB7XG4gIHRoaXMuY2h1bmtzLnB1c2goY2h1bmspO1xufTtcblxuXG4vKipcbiAqIERlZmxhdGUjb25FbmQoc3RhdHVzKSAtPiBWb2lkXG4gKiAtIHN0YXR1cyAoTnVtYmVyKTogZGVmbGF0ZSBzdGF0dXMuIDAgKFpfT0spIG9uIHN1Y2Nlc3MsXG4gKiAgIG90aGVyIGlmIG5vdC5cbiAqXG4gKiBDYWxsZWQgb25jZSBhZnRlciB5b3UgdGVsbCBkZWZsYXRlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBpc1xuICogY29tcGxldGUgKFpfRklOSVNIKS4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5EZWZsYXRlJDEucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LJDIpIHtcbiAgICB0aGlzLnJlc3VsdCA9IGNvbW1vbi5mbGF0dGVuQ2h1bmtzKHRoaXMuY2h1bmtzKTtcbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGRlZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogQ29tcHJlc3MgYGRhdGFgIHdpdGggZGVmbGF0ZSBhbGdvcml0aG0gYW5kIGBvcHRpb25zYC5cbiAqXG4gKiBTdXBwb3J0ZWQgb3B0aW9ucyBhcmU6XG4gKlxuICogLSBsZXZlbFxuICogLSB3aW5kb3dCaXRzXG4gKiAtIG1lbUxldmVsXG4gKiAtIHN0cmF0ZWd5XG4gKiAtIGRpY3Rpb25hcnlcbiAqXG4gKiBbaHR0cDovL3psaWIubmV0L21hbnVhbC5odG1sI0FkdmFuY2VkXShodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWQpXG4gKiBmb3IgbW9yZSBpbmZvcm1hdGlvbiBvbiB0aGVzZS5cbiAqXG4gKiBTdWdhciAob3B0aW9ucyk6XG4gKlxuICogLSBgcmF3YCAoQm9vbGVhbikgLSBzYXkgdGhhdCB3ZSB3b3JrIHdpdGggcmF3IHN0cmVhbSwgaWYgeW91IGRvbid0IHdpc2ggdG8gc3BlY2lmeVxuICogICBuZWdhdGl2ZSB3aW5kb3dCaXRzIGltcGxpY2l0bHkuXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkoWzEsMiwzLDQsNSw2LDcsOCw5XSk7XG4gKlxuICogY29uc29sZS5sb2cocGFrby5kZWZsYXRlKGRhdGEpKTtcbiAqIGBgYFxuICoqL1xuZnVuY3Rpb24gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKSB7XG4gIGNvbnN0IGRlZmxhdG9yID0gbmV3IERlZmxhdGUkMShvcHRpb25zKTtcblxuICBkZWZsYXRvci5wdXNoKGlucHV0LCB0cnVlKTtcblxuICAvLyBUaGF0IHdpbGwgbmV2ZXIgaGFwcGVucywgaWYgeW91IGRvbid0IGNoZWF0IHdpdGggb3B0aW9ucyA6KVxuICBpZiAoZGVmbGF0b3IuZXJyKSB7IHRocm93IGRlZmxhdG9yLm1zZyB8fCBtZXNzYWdlc1tkZWZsYXRvci5lcnJdOyB9XG5cbiAgcmV0dXJuIGRlZmxhdG9yLnJlc3VsdDtcbn1cblxuXG4vKipcbiAqIGRlZmxhdGVSYXcoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tkZWZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGRlZmxhdGVSYXckMShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIGd6aXAoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5XG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXl8U3RyaW5nKTogaW5wdXQgZGF0YSB0byBjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBkZWZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tkZWZsYXRlXV0sIGJ1dCBjcmVhdGUgZ3ppcCB3cmFwcGVyIGluc3RlYWQgb2ZcbiAqIGRlZmxhdGUgb25lLlxuICoqL1xuZnVuY3Rpb24gZ3ppcCQxKGlucHV0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBvcHRpb25zLmd6aXAgPSB0cnVlO1xuICByZXR1cm4gZGVmbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG52YXIgRGVmbGF0ZV8xJDEgPSBEZWZsYXRlJDE7XG52YXIgZGVmbGF0ZV8yID0gZGVmbGF0ZSQxO1xudmFyIGRlZmxhdGVSYXdfMSQxID0gZGVmbGF0ZVJhdyQxO1xudmFyIGd6aXBfMSQxID0gZ3ppcCQxO1xudmFyIGNvbnN0YW50cyQxID0gY29uc3RhbnRzJDI7XG5cbnZhciBkZWZsYXRlXzEkMSA9IHtcblx0RGVmbGF0ZTogRGVmbGF0ZV8xJDEsXG5cdGRlZmxhdGU6IGRlZmxhdGVfMixcblx0ZGVmbGF0ZVJhdzogZGVmbGF0ZVJhd18xJDEsXG5cdGd6aXA6IGd6aXBfMSQxLFxuXHRjb25zdGFudHM6IGNvbnN0YW50cyQxXG59O1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cbi8vIFNlZSBzdGF0ZSBkZWZzIGZyb20gaW5mbGF0ZS5qc1xuY29uc3QgQkFEJDEgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgVFlQRSQxID0gMTI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuXG4vKlxuICAgRGVjb2RlIGxpdGVyYWwsIGxlbmd0aCwgYW5kIGRpc3RhbmNlIGNvZGVzIGFuZCB3cml0ZSBvdXQgdGhlIHJlc3VsdGluZ1xuICAgbGl0ZXJhbCBhbmQgbWF0Y2ggYnl0ZXMgdW50aWwgZWl0aGVyIG5vdCBlbm91Z2ggaW5wdXQgb3Igb3V0cHV0IGlzXG4gICBhdmFpbGFibGUsIGFuIGVuZC1vZi1ibG9jayBpcyBlbmNvdW50ZXJlZCwgb3IgYSBkYXRhIGVycm9yIGlzIGVuY291bnRlcmVkLlxuICAgV2hlbiBsYXJnZSBlbm91Z2ggaW5wdXQgYW5kIG91dHB1dCBidWZmZXJzIGFyZSBzdXBwbGllZCB0byBpbmZsYXRlKCksIGZvclxuICAgZXhhbXBsZSwgYSAxNksgaW5wdXQgYnVmZmVyIGFuZCBhIDY0SyBvdXRwdXQgYnVmZmVyLCBtb3JlIHRoYW4gOTUlIG9mIHRoZVxuICAgaW5mbGF0ZSBleGVjdXRpb24gdGltZSBpcyBzcGVudCBpbiB0aGlzIHJvdXRpbmUuXG5cbiAgIEVudHJ5IGFzc3VtcHRpb25zOlxuXG4gICAgICAgIHN0YXRlLm1vZGUgPT09IExFTlxuICAgICAgICBzdHJtLmF2YWlsX2luID49IDZcbiAgICAgICAgc3RybS5hdmFpbF9vdXQgPj0gMjU4XG4gICAgICAgIHN0YXJ0ID49IHN0cm0uYXZhaWxfb3V0XG4gICAgICAgIHN0YXRlLmJpdHMgPCA4XG5cbiAgIE9uIHJldHVybiwgc3RhdGUubW9kZSBpcyBvbmUgb2Y6XG5cbiAgICAgICAgTEVOIC0tIHJhbiBvdXQgb2YgZW5vdWdoIG91dHB1dCBzcGFjZSBvciBlbm91Z2ggYXZhaWxhYmxlIGlucHV0XG4gICAgICAgIFRZUEUgLS0gcmVhY2hlZCBlbmQgb2YgYmxvY2sgY29kZSwgaW5mbGF0ZSgpIHRvIGludGVycHJldCBuZXh0IGJsb2NrXG4gICAgICAgIEJBRCAtLSBlcnJvciBpbiBibG9jayBkYXRhXG5cbiAgIE5vdGVzOlxuXG4gICAgLSBUaGUgbWF4aW11bSBpbnB1dCBiaXRzIHVzZWQgYnkgYSBsZW5ndGgvZGlzdGFuY2UgcGFpciBpcyAxNSBiaXRzIGZvciB0aGVcbiAgICAgIGxlbmd0aCBjb2RlLCA1IGJpdHMgZm9yIHRoZSBsZW5ndGggZXh0cmEsIDE1IGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBjb2RlLFxuICAgICAgYW5kIDEzIGJpdHMgZm9yIHRoZSBkaXN0YW5jZSBleHRyYS4gIFRoaXMgdG90YWxzIDQ4IGJpdHMsIG9yIHNpeCBieXRlcy5cbiAgICAgIFRoZXJlZm9yZSBpZiBzdHJtLmF2YWlsX2luID49IDYsIHRoZW4gdGhlcmUgaXMgZW5vdWdoIGlucHV0IHRvIGF2b2lkXG4gICAgICBjaGVja2luZyBmb3IgYXZhaWxhYmxlIGlucHV0IHdoaWxlIGRlY29kaW5nLlxuXG4gICAgLSBUaGUgbWF4aW11bSBieXRlcyB0aGF0IGEgc2luZ2xlIGxlbmd0aC9kaXN0YW5jZSBwYWlyIGNhbiBvdXRwdXQgaXMgMjU4XG4gICAgICBieXRlcywgd2hpY2ggaXMgdGhlIG1heGltdW0gbGVuZ3RoIHRoYXQgY2FuIGJlIGNvZGVkLiAgaW5mbGF0ZV9mYXN0KClcbiAgICAgIHJlcXVpcmVzIHN0cm0uYXZhaWxfb3V0ID49IDI1OCBmb3IgZWFjaCBsb29wIHRvIGF2b2lkIGNoZWNraW5nIGZvclxuICAgICAgb3V0cHV0IHNwYWNlLlxuICovXG52YXIgaW5mZmFzdCA9IGZ1bmN0aW9uIGluZmxhdGVfZmFzdChzdHJtLCBzdGFydCkge1xuICBsZXQgX2luOyAgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5pbnB1dCAqL1xuICBsZXQgbGFzdDsgICAgICAgICAgICAgICAgICAgLyogaGF2ZSBlbm91Z2ggaW5wdXQgd2hpbGUgaW4gPCBsYXN0ICovXG4gIGxldCBfb3V0OyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgYmVnOyAgICAgICAgICAgICAgICAgICAgLyogaW5mbGF0ZSgpJ3MgaW5pdGlhbCBzdHJtLm91dHB1dCAqL1xuICBsZXQgZW5kOyAgICAgICAgICAgICAgICAgICAgLyogd2hpbGUgb3V0IDwgZW5kLCBlbm91Z2ggc3BhY2UgYXZhaWxhYmxlICovXG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICBsZXQgZG1heDsgICAgICAgICAgICAgICAgICAgLyogbWF4aW11bSBkaXN0YW5jZSBmcm9tIHpsaWIgaGVhZGVyICovXG4vLyNlbmRpZlxuICBsZXQgd3NpemU7ICAgICAgICAgICAgICAgICAgLyogd2luZG93IHNpemUgb3IgemVybyBpZiBub3QgdXNpbmcgd2luZG93ICovXG4gIGxldCB3aGF2ZTsgICAgICAgICAgICAgICAgICAvKiB2YWxpZCBieXRlcyBpbiB0aGUgd2luZG93ICovXG4gIGxldCB3bmV4dDsgICAgICAgICAgICAgICAgICAvKiB3aW5kb3cgd3JpdGUgaW5kZXggKi9cbiAgLy8gVXNlIGBzX3dpbmRvd2AgaW5zdGVhZCBgd2luZG93YCwgYXZvaWQgY29uZmxpY3Qgd2l0aCBpbnN0cnVtZW50YXRpb24gdG9vbHNcbiAgbGV0IHNfd2luZG93OyAgICAgICAgICAgICAgIC8qIGFsbG9jYXRlZCBzbGlkaW5nIHdpbmRvdywgaWYgd3NpemUgIT0gMCAqL1xuICBsZXQgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5ob2xkICovXG4gIGxldCBiaXRzOyAgICAgICAgICAgICAgICAgICAvKiBsb2NhbCBzdHJtLmJpdHMgKi9cbiAgbGV0IGxjb2RlOyAgICAgICAgICAgICAgICAgIC8qIGxvY2FsIHN0cm0ubGVuY29kZSAqL1xuICBsZXQgZGNvZGU7ICAgICAgICAgICAgICAgICAgLyogbG9jYWwgc3RybS5kaXN0Y29kZSAqL1xuICBsZXQgbG1hc2s7ICAgICAgICAgICAgICAgICAgLyogbWFzayBmb3IgZmlyc3QgbGV2ZWwgb2YgbGVuZ3RoIGNvZGVzICovXG4gIGxldCBkbWFzazsgICAgICAgICAgICAgICAgICAvKiBtYXNrIGZvciBmaXJzdCBsZXZlbCBvZiBkaXN0YW5jZSBjb2RlcyAqL1xuICBsZXQgaGVyZTsgICAgICAgICAgICAgICAgICAgLyogcmV0cmlldmVkIHRhYmxlIGVudHJ5ICovXG4gIGxldCBvcDsgICAgICAgICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMsIG9wZXJhdGlvbiwgZXh0cmEgYml0cywgb3IgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qICB3aW5kb3cgcG9zaXRpb24sIHdpbmRvdyBieXRlcyB0byBjb3B5ICovXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBtYXRjaCBsZW5ndGgsIHVudXNlZCBieXRlcyAqL1xuICBsZXQgZGlzdDsgICAgICAgICAgICAgICAgICAgLyogbWF0Y2ggZGlzdGFuY2UgKi9cbiAgbGV0IGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggZnJvbSAqL1xuICBsZXQgZnJvbV9zb3VyY2U7XG5cblxuICBsZXQgaW5wdXQsIG91dHB1dDsgLy8gSlMgc3BlY2lmaWMsIGJlY2F1c2Ugd2UgaGF2ZSBubyBwb2ludGVyc1xuXG4gIC8qIGNvcHkgc3RhdGUgdG8gbG9jYWwgdmFyaWFibGVzICovXG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgLy9oZXJlID0gc3RhdGUuaGVyZTtcbiAgX2luID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGxhc3QgPSBfaW4gKyAoc3RybS5hdmFpbF9pbiAtIDUpO1xuICBfb3V0ID0gc3RybS5uZXh0X291dDtcbiAgb3V0cHV0ID0gc3RybS5vdXRwdXQ7XG4gIGJlZyA9IF9vdXQgLSAoc3RhcnQgLSBzdHJtLmF2YWlsX291dCk7XG4gIGVuZCA9IF9vdXQgKyAoc3RybS5hdmFpbF9vdXQgLSAyNTcpO1xuLy8jaWZkZWYgSU5GTEFURV9TVFJJQ1RcbiAgZG1heCA9IHN0YXRlLmRtYXg7XG4vLyNlbmRpZlxuICB3c2l6ZSA9IHN0YXRlLndzaXplO1xuICB3aGF2ZSA9IHN0YXRlLndoYXZlO1xuICB3bmV4dCA9IHN0YXRlLnduZXh0O1xuICBzX3dpbmRvdyA9IHN0YXRlLndpbmRvdztcbiAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gIGJpdHMgPSBzdGF0ZS5iaXRzO1xuICBsY29kZSA9IHN0YXRlLmxlbmNvZGU7XG4gIGRjb2RlID0gc3RhdGUuZGlzdGNvZGU7XG4gIGxtYXNrID0gKDEgPDwgc3RhdGUubGVuYml0cykgLSAxO1xuICBkbWFzayA9ICgxIDw8IHN0YXRlLmRpc3RiaXRzKSAtIDE7XG5cblxuICAvKiBkZWNvZGUgbGl0ZXJhbHMgYW5kIGxlbmd0aC9kaXN0YW5jZXMgdW50aWwgZW5kLW9mLWJsb2NrIG9yIG5vdCBlbm91Z2hcbiAgICAgaW5wdXQgZGF0YSBvciBvdXRwdXQgc3BhY2UgKi9cblxuICB0b3A6XG4gIGRvIHtcbiAgICBpZiAoYml0cyA8IDE1KSB7XG4gICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgYml0cyArPSA4O1xuICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgIGJpdHMgKz0gODtcbiAgICB9XG5cbiAgICBoZXJlID0gbGNvZGVbaG9sZCAmIGxtYXNrXTtcblxuICAgIGRvbGVuOlxuICAgIGZvciAoOzspIHsgLy8gR290byBlbXVsYXRpb25cbiAgICAgIG9wID0gaGVyZSA+Pj4gMjQvKmhlcmUuYml0cyovO1xuICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgYml0cyAtPSBvcDtcbiAgICAgIG9wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmYvKmhlcmUub3AqLztcbiAgICAgIGlmIChvcCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbGl0ZXJhbCAqL1xuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgaGVyZS52YWwgPj0gMHgyMCAmJiBoZXJlLnZhbCA8IDB4N2YgP1xuICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgLy8gICAgICAgIFwiaW5mbGF0ZTogICAgICAgICBsaXRlcmFsIDB4JTAyeFxcblwiLCBoZXJlLnZhbCkpO1xuICAgICAgICBvdXRwdXRbX291dCsrXSA9IGhlcmUgJiAweGZmZmYvKmhlcmUudmFsKi87XG4gICAgICB9XG4gICAgICBlbHNlIGlmIChvcCAmIDE2KSB7ICAgICAgICAgICAgICAgICAgICAgLyogbGVuZ3RoIGJhc2UgKi9cbiAgICAgICAgbGVuID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgb3AgJj0gMTU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgaWYgKG9wKSB7XG4gICAgICAgICAgaWYgKGJpdHMgPCBvcCkge1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgbGVuICs9IGhvbGQgJiAoKDEgPDwgb3ApIC0gMSk7XG4gICAgICAgICAgaG9sZCA+Pj49IG9wO1xuICAgICAgICAgIGJpdHMgLT0gb3A7XG4gICAgICAgIH1cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBsZW5ndGggJXVcXG5cIiwgbGVuKSk7XG4gICAgICAgIGlmIChiaXRzIDwgMTUpIHtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICBob2xkICs9IGlucHV0W19pbisrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICBoZXJlID0gZGNvZGVbaG9sZCAmIGRtYXNrXTtcblxuICAgICAgICBkb2Rpc3Q6XG4gICAgICAgIGZvciAoOzspIHsgLy8gZ290byBlbXVsYXRpb25cbiAgICAgICAgICBvcCA9IGhlcmUgPj4+IDI0LypoZXJlLmJpdHMqLztcbiAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgYml0cyAtPSBvcDtcbiAgICAgICAgICBvcCA9IChoZXJlID4+PiAxNikgJiAweGZmLypoZXJlLm9wKi87XG5cbiAgICAgICAgICBpZiAob3AgJiAxNikgeyAgICAgICAgICAgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYXNlICovXG4gICAgICAgICAgICBkaXN0ID0gaGVyZSAmIDB4ZmZmZi8qaGVyZS52YWwqLztcbiAgICAgICAgICAgIG9wICY9IDE1OyAgICAgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGV4dHJhIGJpdHMgKi9cbiAgICAgICAgICAgIGlmIChiaXRzIDwgb3ApIHtcbiAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICBpZiAoYml0cyA8IG9wKSB7XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtfaW4rK10gPDwgYml0cztcbiAgICAgICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGRpc3QgKz0gaG9sZCAmICgoMSA8PCBvcCkgLSAxKTtcbi8vI2lmZGVmIElORkxBVEVfU1RSSUNUXG4gICAgICAgICAgICBpZiAoZGlzdCA+IGRtYXgpIHtcbiAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEJDE7XG4gICAgICAgICAgICAgIGJyZWFrIHRvcDtcbiAgICAgICAgICAgIH1cbi8vI2VuZGlmXG4gICAgICAgICAgICBob2xkID4+Pj0gb3A7XG4gICAgICAgICAgICBiaXRzIC09IG9wO1xuICAgICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBkaXN0YW5jZSAldVxcblwiLCBkaXN0KSk7XG4gICAgICAgICAgICBvcCA9IF9vdXQgLSBiZWc7ICAgICAgICAgICAgICAgIC8qIG1heCBkaXN0YW5jZSBpbiBvdXRwdXQgKi9cbiAgICAgICAgICAgIGlmIChkaXN0ID4gb3ApIHsgICAgICAgICAgICAgICAgLyogc2VlIGlmIGNvcHkgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgb3AgPSBkaXN0IC0gb3A7ICAgICAgICAgICAgICAgLyogZGlzdGFuY2UgYmFjayBpbiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgaWYgKG9wID4gd2hhdmUpIHtcbiAgICAgICAgICAgICAgICBpZiAoc3RhdGUuc2FuZSkge1xuICAgICAgICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyIGJhY2snO1xuICAgICAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgICAgICAgIH1cblxuLy8gKCEpIFRoaXMgYmxvY2sgaXMgZGlzYWJsZWQgaW4gemxpYiBkZWZhdWx0cyxcbi8vIGRvbid0IGVuYWJsZSBpdCBmb3IgYmluYXJ5IGNvbXBhdGliaWxpdHlcbi8vI2lmZGVmIElORkxBVEVfQUxMT1dfSU5WQUxJRF9ESVNUQU5DRV9UT09GQVJfQVJSUlxuLy8gICAgICAgICAgICAgICAgaWYgKGxlbiA8PSBvcCAtIHdoYXZlKSB7XG4vLyAgICAgICAgICAgICAgICAgIGRvIHtcbi8vICAgICAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IDA7XG4vLyAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tbGVuKTtcbi8vICAgICAgICAgICAgICAgICAgY29udGludWUgdG9wO1xuLy8gICAgICAgICAgICAgICAgfVxuLy8gICAgICAgICAgICAgICAgbGVuIC09IG9wIC0gd2hhdmU7XG4vLyAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gMDtcbi8vICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3AgPiB3aGF2ZSk7XG4vLyAgICAgICAgICAgICAgICBpZiAob3AgPT09IDApIHtcbi8vICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0O1xuLy8gICAgICAgICAgICAgICAgICBkbyB7XG4vLyAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbi8vICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1sZW4pO1xuLy8gICAgICAgICAgICAgICAgICBjb250aW51ZSB0b3A7XG4vLyAgICAgICAgICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGZyb20gPSAwOyAvLyB3aW5kb3cgaW5kZXhcbiAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBzX3dpbmRvdztcbiAgICAgICAgICAgICAgaWYgKHduZXh0ID09PSAwKSB7ICAgICAgICAgICAvKiB2ZXJ5IGNvbW1vbiBjYXNlICovXG4gICAgICAgICAgICAgICAgZnJvbSArPSB3c2l6ZSAtIG9wO1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgIGxlbiAtPSBvcDtcbiAgICAgICAgICAgICAgICAgIGRvIHtcbiAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgfSB3aGlsZSAoLS1vcCk7XG4gICAgICAgICAgICAgICAgICBmcm9tID0gX291dCAtIGRpc3Q7ICAvKiByZXN0IGZyb20gb3V0cHV0ICovXG4gICAgICAgICAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgZWxzZSBpZiAod25leHQgPCBvcCkgeyAgICAgIC8qIHdyYXAgYXJvdW5kIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd3NpemUgKyB3bmV4dCAtIG9wO1xuICAgICAgICAgICAgICAgIG9wIC09IHduZXh0O1xuICAgICAgICAgICAgICAgIGlmIChvcCA8IGxlbikgeyAgICAgICAgIC8qIHNvbWUgZnJvbSBlbmQgb2Ygd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IDA7XG4gICAgICAgICAgICAgICAgICBpZiAod25leHQgPCBsZW4pIHsgIC8qIHNvbWUgZnJvbSBzdGFydCBvZiB3aW5kb3cgKi9cbiAgICAgICAgICAgICAgICAgICAgb3AgPSB3bmV4dDtcbiAgICAgICAgICAgICAgICAgICAgbGVuIC09IG9wO1xuICAgICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBzX3dpbmRvd1tmcm9tKytdO1xuICAgICAgICAgICAgICAgICAgICB9IHdoaWxlICgtLW9wKTtcbiAgICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgICAgIC8qIHJlc3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAvKiBjb250aWd1b3VzIGluIHdpbmRvdyAqL1xuICAgICAgICAgICAgICAgIGZyb20gKz0gd25leHQgLSBvcDtcbiAgICAgICAgICAgICAgICBpZiAob3AgPCBsZW4pIHsgICAgICAgICAvKiBzb21lIGZyb20gd2luZG93ICovXG4gICAgICAgICAgICAgICAgICBsZW4gLT0gb3A7XG4gICAgICAgICAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gc193aW5kb3dbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICAgIH0gd2hpbGUgKC0tb3ApO1xuICAgICAgICAgICAgICAgICAgZnJvbSA9IF9vdXQgLSBkaXN0OyAgLyogcmVzdCBmcm9tIG91dHB1dCAqL1xuICAgICAgICAgICAgICAgICAgZnJvbV9zb3VyY2UgPSBvdXRwdXQ7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHdoaWxlIChsZW4gPiAyKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IGZyb21fc291cmNlW2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgaWYgKGxlbikge1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBmcm9tX3NvdXJjZVtmcm9tKytdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIGZyb20gPSBfb3V0IC0gZGlzdDsgICAgICAgICAgLyogY29weSBkaXJlY3QgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICAgICAgZG8geyAgICAgICAgICAgICAgICAgICAgICAgIC8qIG1pbmltdW0gbGVuZ3RoIGlzIHRocmVlICovXG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBvdXRwdXRbX291dCsrXSA9IG91dHB1dFtmcm9tKytdO1xuICAgICAgICAgICAgICAgIG91dHB1dFtfb3V0KytdID0gb3V0cHV0W2Zyb20rK107XG4gICAgICAgICAgICAgICAgbGVuIC09IDM7XG4gICAgICAgICAgICAgIH0gd2hpbGUgKGxlbiA+IDIpO1xuICAgICAgICAgICAgICBpZiAobGVuKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICBpZiAobGVuID4gMSkge1xuICAgICAgICAgICAgICAgICAgb3V0cHV0W19vdXQrK10gPSBvdXRwdXRbZnJvbSsrXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSBpZiAoKG9wICYgNjQpID09PSAwKSB7ICAgICAgICAgIC8qIDJuZCBsZXZlbCBkaXN0YW5jZSBjb2RlICovXG4gICAgICAgICAgICBoZXJlID0gZGNvZGVbKGhlcmUgJiAweGZmZmYpLypoZXJlLnZhbCovICsgKGhvbGQgJiAoKDEgPDwgb3ApIC0gMSkpXTtcbiAgICAgICAgICAgIGNvbnRpbnVlIGRvZGlzdDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGRpc3RhbmNlIGNvZGUnO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICAgICAgYnJlYWsgdG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKChvcCAmIDY0KSA9PT0gMCkgeyAgICAgICAgICAgICAgLyogMm5kIGxldmVsIGxlbmd0aCBjb2RlICovXG4gICAgICAgIGhlcmUgPSBsY29kZVsoaGVyZSAmIDB4ZmZmZikvKmhlcmUudmFsKi8gKyAoaG9sZCAmICgoMSA8PCBvcCkgLSAxKSldO1xuICAgICAgICBjb250aW51ZSBkb2xlbjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKG9wICYgMzIpIHsgICAgICAgICAgICAgICAgICAgICAvKiBlbmQtb2YtYmxvY2sgKi9cbiAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRSQxO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJztcbiAgICAgICAgc3RhdGUubW9kZSA9IEJBRCQxO1xuICAgICAgICBicmVhayB0b3A7XG4gICAgICB9XG5cbiAgICAgIGJyZWFrOyAvLyBuZWVkIHRvIGVtdWxhdGUgZ290byB2aWEgXCJjb250aW51ZVwiXG4gICAgfVxuICB9IHdoaWxlIChfaW4gPCBsYXN0ICYmIF9vdXQgPCBlbmQpO1xuXG4gIC8qIHJldHVybiB1bnVzZWQgYnl0ZXMgKG9uIGVudHJ5LCBiaXRzIDwgOCwgc28gaW4gd29uJ3QgZ28gdG9vIGZhciBiYWNrKSAqL1xuICBsZW4gPSBiaXRzID4+IDM7XG4gIF9pbiAtPSBsZW47XG4gIGJpdHMgLT0gbGVuIDw8IDM7XG4gIGhvbGQgJj0gKDEgPDwgYml0cykgLSAxO1xuXG4gIC8qIHVwZGF0ZSBzdGF0ZSBhbmQgcmV0dXJuICovXG4gIHN0cm0ubmV4dF9pbiA9IF9pbjtcbiAgc3RybS5uZXh0X291dCA9IF9vdXQ7XG4gIHN0cm0uYXZhaWxfaW4gPSAoX2luIDwgbGFzdCA/IDUgKyAobGFzdCAtIF9pbikgOiA1IC0gKF9pbiAtIGxhc3QpKTtcbiAgc3RybS5hdmFpbF9vdXQgPSAoX291dCA8IGVuZCA/IDI1NyArIChlbmQgLSBfb3V0KSA6IDI1NyAtIChfb3V0IC0gZW5kKSk7XG4gIHN0YXRlLmhvbGQgPSBob2xkO1xuICBzdGF0ZS5iaXRzID0gYml0cztcbiAgcmV0dXJuO1xufTtcblxuLy8gKEMpIDE5OTUtMjAxMyBKZWFuLWxvdXAgR2FpbGx5IGFuZCBNYXJrIEFkbGVyXG4vLyAoQykgMjAxNC0yMDE3IFZpdGFseSBQdXpyaW4gYW5kIEFuZHJleSBUdXBpdHNpblxuLy9cbi8vIFRoaXMgc29mdHdhcmUgaXMgcHJvdmlkZWQgJ2FzLWlzJywgd2l0aG91dCBhbnkgZXhwcmVzcyBvciBpbXBsaWVkXG4vLyB3YXJyYW50eS4gSW4gbm8gZXZlbnQgd2lsbCB0aGUgYXV0aG9ycyBiZSBoZWxkIGxpYWJsZSBmb3IgYW55IGRhbWFnZXNcbi8vIGFyaXNpbmcgZnJvbSB0aGUgdXNlIG9mIHRoaXMgc29mdHdhcmUuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBncmFudGVkIHRvIGFueW9uZSB0byB1c2UgdGhpcyBzb2Z0d2FyZSBmb3IgYW55IHB1cnBvc2UsXG4vLyBpbmNsdWRpbmcgY29tbWVyY2lhbCBhcHBsaWNhdGlvbnMsIGFuZCB0byBhbHRlciBpdCBhbmQgcmVkaXN0cmlidXRlIGl0XG4vLyBmcmVlbHksIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyByZXN0cmljdGlvbnM6XG4vL1xuLy8gMS4gVGhlIG9yaWdpbiBvZiB0aGlzIHNvZnR3YXJlIG11c3Qgbm90IGJlIG1pc3JlcHJlc2VudGVkOyB5b3UgbXVzdCBub3Rcbi8vICAgY2xhaW0gdGhhdCB5b3Ugd3JvdGUgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLiBJZiB5b3UgdXNlIHRoaXMgc29mdHdhcmVcbi8vICAgaW4gYSBwcm9kdWN0LCBhbiBhY2tub3dsZWRnbWVudCBpbiB0aGUgcHJvZHVjdCBkb2N1bWVudGF0aW9uIHdvdWxkIGJlXG4vLyAgIGFwcHJlY2lhdGVkIGJ1dCBpcyBub3QgcmVxdWlyZWQuXG4vLyAyLiBBbHRlcmVkIHNvdXJjZSB2ZXJzaW9ucyBtdXN0IGJlIHBsYWlubHkgbWFya2VkIGFzIHN1Y2gsIGFuZCBtdXN0IG5vdCBiZVxuLy8gICBtaXNyZXByZXNlbnRlZCBhcyBiZWluZyB0aGUgb3JpZ2luYWwgc29mdHdhcmUuXG4vLyAzLiBUaGlzIG5vdGljZSBtYXkgbm90IGJlIHJlbW92ZWQgb3IgYWx0ZXJlZCBmcm9tIGFueSBzb3VyY2UgZGlzdHJpYnV0aW9uLlxuXG5jb25zdCBNQVhCSVRTID0gMTU7XG5jb25zdCBFTk9VR0hfTEVOUyQxID0gODUyO1xuY29uc3QgRU5PVUdIX0RJU1RTJDEgPSA1OTI7XG4vL2NvbnN0IEVOT1VHSCA9IChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG5jb25zdCBDT0RFUyQxID0gMDtcbmNvbnN0IExFTlMkMSA9IDE7XG5jb25zdCBESVNUUyQxID0gMjtcblxuY29uc3QgbGJhc2UgPSBuZXcgVWludDE2QXJyYXkoWyAvKiBMZW5ndGggY29kZXMgMjU3Li4yODUgYmFzZSAqL1xuICAzLCA0LCA1LCA2LCA3LCA4LCA5LCAxMCwgMTEsIDEzLCAxNSwgMTcsIDE5LCAyMywgMjcsIDMxLFxuICAzNSwgNDMsIDUxLCA1OSwgNjcsIDgzLCA5OSwgMTE1LCAxMzEsIDE2MywgMTk1LCAyMjcsIDI1OCwgMCwgMFxuXSk7XG5cbmNvbnN0IGxleHQgPSBuZXcgVWludDhBcnJheShbIC8qIExlbmd0aCBjb2RlcyAyNTcuLjI4NSBleHRyYSAqL1xuICAxNiwgMTYsIDE2LCAxNiwgMTYsIDE2LCAxNiwgMTYsIDE3LCAxNywgMTcsIDE3LCAxOCwgMTgsIDE4LCAxOCxcbiAgMTksIDE5LCAxOSwgMTksIDIwLCAyMCwgMjAsIDIwLCAyMSwgMjEsIDIxLCAyMSwgMTYsIDcyLCA3OFxuXSk7XG5cbmNvbnN0IGRiYXNlID0gbmV3IFVpbnQxNkFycmF5KFsgLyogRGlzdGFuY2UgY29kZXMgMC4uMjkgYmFzZSAqL1xuICAxLCAyLCAzLCA0LCA1LCA3LCA5LCAxMywgMTcsIDI1LCAzMywgNDksIDY1LCA5NywgMTI5LCAxOTMsXG4gIDI1NywgMzg1LCA1MTMsIDc2OSwgMTAyNSwgMTUzNywgMjA0OSwgMzA3MywgNDA5NywgNjE0NSxcbiAgODE5MywgMTIyODksIDE2Mzg1LCAyNDU3NywgMCwgMFxuXSk7XG5cbmNvbnN0IGRleHQgPSBuZXcgVWludDhBcnJheShbIC8qIERpc3RhbmNlIGNvZGVzIDAuLjI5IGV4dHJhICovXG4gIDE2LCAxNiwgMTYsIDE2LCAxNywgMTcsIDE4LCAxOCwgMTksIDE5LCAyMCwgMjAsIDIxLCAyMSwgMjIsIDIyLFxuICAyMywgMjMsIDI0LCAyNCwgMjUsIDI1LCAyNiwgMjYsIDI3LCAyNyxcbiAgMjgsIDI4LCAyOSwgMjksIDY0LCA2NFxuXSk7XG5cbmNvbnN0IGluZmxhdGVfdGFibGUgPSAodHlwZSwgbGVucywgbGVuc19pbmRleCwgY29kZXMsIHRhYmxlLCB0YWJsZV9pbmRleCwgd29yaywgb3B0cykgPT5cbntcbiAgY29uc3QgYml0cyA9IG9wdHMuYml0cztcbiAgICAgIC8vaGVyZSA9IG9wdHMuaGVyZTsgLyogdGFibGUgZW50cnkgZm9yIGR1cGxpY2F0aW9uICovXG5cbiAgbGV0IGxlbiA9IDA7ICAgICAgICAgICAgICAgLyogYSBjb2RlJ3MgbGVuZ3RoIGluIGJpdHMgKi9cbiAgbGV0IHN5bSA9IDA7ICAgICAgICAgICAgICAgLyogaW5kZXggb2YgY29kZSBzeW1ib2xzICovXG4gIGxldCBtaW4gPSAwLCBtYXggPSAwOyAgICAgICAgICAvKiBtaW5pbXVtIGFuZCBtYXhpbXVtIGNvZGUgbGVuZ3RocyAqL1xuICBsZXQgcm9vdCA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3Igcm9vdCB0YWJsZSAqL1xuICBsZXQgY3VyciA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgaW5kZXggYml0cyBmb3IgY3VycmVudCB0YWJsZSAqL1xuICBsZXQgZHJvcCA9IDA7ICAgICAgICAgICAgICAvKiBjb2RlIGJpdHMgdG8gZHJvcCBmb3Igc3ViLXRhYmxlICovXG4gIGxldCBsZWZ0ID0gMDsgICAgICAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIHByZWZpeCBjb2RlcyBhdmFpbGFibGUgKi9cbiAgbGV0IHVzZWQgPSAwOyAgICAgICAgICAgICAgLyogY29kZSBlbnRyaWVzIGluIHRhYmxlIHVzZWQgKi9cbiAgbGV0IGh1ZmYgPSAwOyAgICAgICAgICAgICAgLyogSHVmZm1hbiBjb2RlICovXG4gIGxldCBpbmNyOyAgICAgICAgICAgICAgLyogZm9yIGluY3JlbWVudGluZyBjb2RlLCBpbmRleCAqL1xuICBsZXQgZmlsbDsgICAgICAgICAgICAgIC8qIGluZGV4IGZvciByZXBsaWNhdGluZyBlbnRyaWVzICovXG4gIGxldCBsb3c7ICAgICAgICAgICAgICAgLyogbG93IGJpdHMgZm9yIGN1cnJlbnQgcm9vdCBlbnRyeSAqL1xuICBsZXQgbWFzazsgICAgICAgICAgICAgIC8qIG1hc2sgZm9yIGxvdyByb290IGJpdHMgKi9cbiAgbGV0IG5leHQ7ICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIHRhYmxlICovXG4gIGxldCBiYXNlID0gbnVsbDsgICAgIC8qIGJhc2UgdmFsdWUgdGFibGUgdG8gdXNlICovXG4gIGxldCBiYXNlX2luZGV4ID0gMDtcbi8vICBsZXQgc2hvZXh0cmE7ICAgIC8qIGV4dHJhIGJpdHMgdGFibGUgdG8gdXNlICovXG4gIGxldCBlbmQ7ICAgICAgICAgICAgICAgICAgICAvKiB1c2UgYmFzZSBhbmQgZXh0cmEgZm9yIHN5bWJvbCA+IGVuZCAqL1xuICBjb25zdCBjb3VudCA9IG5ldyBVaW50MTZBcnJheShNQVhCSVRTICsgMSk7IC8vW01BWEJJVFMrMV07ICAgIC8qIG51bWJlciBvZiBjb2RlcyBvZiBlYWNoIGxlbmd0aCAqL1xuICBjb25zdCBvZmZzID0gbmV3IFVpbnQxNkFycmF5KE1BWEJJVFMgKyAxKTsgLy9bTUFYQklUUysxXTsgICAgIC8qIG9mZnNldHMgaW4gdGFibGUgZm9yIGVhY2ggbGVuZ3RoICovXG4gIGxldCBleHRyYSA9IG51bGw7XG4gIGxldCBleHRyYV9pbmRleCA9IDA7XG5cbiAgbGV0IGhlcmVfYml0cywgaGVyZV9vcCwgaGVyZV92YWw7XG5cbiAgLypcbiAgIFByb2Nlc3MgYSBzZXQgb2YgY29kZSBsZW5ndGhzIHRvIGNyZWF0ZSBhIGNhbm9uaWNhbCBIdWZmbWFuIGNvZGUuICBUaGVcbiAgIGNvZGUgbGVuZ3RocyBhcmUgbGVuc1swLi5jb2Rlcy0xXS4gIEVhY2ggbGVuZ3RoIGNvcnJlc3BvbmRzIHRvIHRoZVxuICAgc3ltYm9scyAwLi5jb2Rlcy0xLiAgVGhlIEh1ZmZtYW4gY29kZSBpcyBnZW5lcmF0ZWQgYnkgZmlyc3Qgc29ydGluZyB0aGVcbiAgIHN5bWJvbHMgYnkgbGVuZ3RoIGZyb20gc2hvcnQgdG8gbG9uZywgYW5kIHJldGFpbmluZyB0aGUgc3ltYm9sIG9yZGVyXG4gICBmb3IgY29kZXMgd2l0aCBlcXVhbCBsZW5ndGhzLiAgVGhlbiB0aGUgY29kZSBzdGFydHMgd2l0aCBhbGwgemVybyBiaXRzXG4gICBmb3IgdGhlIGZpcnN0IGNvZGUgb2YgdGhlIHNob3J0ZXN0IGxlbmd0aCwgYW5kIHRoZSBjb2RlcyBhcmUgaW50ZWdlclxuICAgaW5jcmVtZW50cyBmb3IgdGhlIHNhbWUgbGVuZ3RoLCBhbmQgemVyb3MgYXJlIGFwcGVuZGVkIGFzIHRoZSBsZW5ndGhcbiAgIGluY3JlYXNlcy4gIEZvciB0aGUgZGVmbGF0ZSBmb3JtYXQsIHRoZXNlIGJpdHMgYXJlIHN0b3JlZCBiYWNrd2FyZHNcbiAgIGZyb20gdGhlaXIgbW9yZSBuYXR1cmFsIGludGVnZXIgaW5jcmVtZW50IG9yZGVyaW5nLCBhbmQgc28gd2hlbiB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcyBhcmUgYnVpbHQgaW4gdGhlIGxhcmdlIGxvb3AgYmVsb3csIHRoZSBpbnRlZ2VyIGNvZGVzXG4gICBhcmUgaW5jcmVtZW50ZWQgYmFja3dhcmRzLlxuXG4gICBUaGlzIHJvdXRpbmUgYXNzdW1lcywgYnV0IGRvZXMgbm90IGNoZWNrLCB0aGF0IGFsbCBvZiB0aGUgZW50cmllcyBpblxuICAgbGVuc1tdIGFyZSBpbiB0aGUgcmFuZ2UgMC4uTUFYQklUUy4gIFRoZSBjYWxsZXIgbXVzdCBhc3N1cmUgdGhpcy5cbiAgIDEuLk1BWEJJVFMgaXMgaW50ZXJwcmV0ZWQgYXMgdGhhdCBjb2RlIGxlbmd0aC4gIHplcm8gbWVhbnMgdGhhdCB0aGF0XG4gICBzeW1ib2wgZG9lcyBub3Qgb2NjdXIgaW4gdGhpcyBjb2RlLlxuXG4gICBUaGUgY29kZXMgYXJlIHNvcnRlZCBieSBjb21wdXRpbmcgYSBjb3VudCBvZiBjb2RlcyBmb3IgZWFjaCBsZW5ndGgsXG4gICBjcmVhdGluZyBmcm9tIHRoYXQgYSB0YWJsZSBvZiBzdGFydGluZyBpbmRpY2VzIGZvciBlYWNoIGxlbmd0aCBpbiB0aGVcbiAgIHNvcnRlZCB0YWJsZSwgYW5kIHRoZW4gZW50ZXJpbmcgdGhlIHN5bWJvbHMgaW4gb3JkZXIgaW4gdGhlIHNvcnRlZFxuICAgdGFibGUuICBUaGUgc29ydGVkIHRhYmxlIGlzIHdvcmtbXSwgd2l0aCB0aGF0IHNwYWNlIGJlaW5nIHByb3ZpZGVkIGJ5XG4gICB0aGUgY2FsbGVyLlxuXG4gICBUaGUgbGVuZ3RoIGNvdW50cyBhcmUgdXNlZCBmb3Igb3RoZXIgcHVycG9zZXMgYXMgd2VsbCwgaS5lLiBmaW5kaW5nXG4gICB0aGUgbWluaW11bSBhbmQgbWF4aW11bSBsZW5ndGggY29kZXMsIGRldGVybWluaW5nIGlmIHRoZXJlIGFyZSBhbnlcbiAgIGNvZGVzIGF0IGFsbCwgY2hlY2tpbmcgZm9yIGEgdmFsaWQgc2V0IG9mIGxlbmd0aHMsIGFuZCBsb29raW5nIGFoZWFkXG4gICBhdCBsZW5ndGggY291bnRzIHRvIGRldGVybWluZSBzdWItdGFibGUgc2l6ZXMgd2hlbiBidWlsZGluZyB0aGVcbiAgIGRlY29kaW5nIHRhYmxlcy5cbiAgICovXG5cbiAgLyogYWNjdW11bGF0ZSBsZW5ndGhzIGZvciBjb2RlcyAoYXNzdW1lcyBsZW5zW10gYWxsIGluIDAuLk1BWEJJVFMpICovXG4gIGZvciAobGVuID0gMDsgbGVuIDw9IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgY291bnRbbGVuXSA9IDA7XG4gIH1cbiAgZm9yIChzeW0gPSAwOyBzeW0gPCBjb2Rlczsgc3ltKyspIHtcbiAgICBjb3VudFtsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrO1xuICB9XG5cbiAgLyogYm91bmQgY29kZSBsZW5ndGhzLCBmb3JjZSByb290IHRvIGJlIHdpdGhpbiBjb2RlIGxlbmd0aHMgKi9cbiAgcm9vdCA9IGJpdHM7XG4gIGZvciAobWF4ID0gTUFYQklUUzsgbWF4ID49IDE7IG1heC0tKSB7XG4gICAgaWYgKGNvdW50W21heF0gIT09IDApIHsgYnJlYWs7IH1cbiAgfVxuICBpZiAocm9vdCA+IG1heCkge1xuICAgIHJvb3QgPSBtYXg7XG4gIH1cbiAgaWYgKG1heCA9PT0gMCkgeyAgICAgICAgICAgICAgICAgICAgIC8qIG5vIHN5bWJvbHMgdG8gY29kZSBhdCBhbGwgKi9cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7ICAvL2hlcmUub3AgPSAodmFyIGNoYXIpNjQ7ICAgIC8qIGludmFsaWQgY29kZSBtYXJrZXIgKi9cbiAgICAvL3RhYmxlLmJpdHNbb3B0cy50YWJsZV9pbmRleF0gPSAxOyAgIC8vaGVyZS5iaXRzID0gKHZhciBjaGFyKTE7XG4gICAgLy90YWJsZS52YWxbb3B0cy50YWJsZV9pbmRleCsrXSA9IDA7ICAgLy9oZXJlLnZhbCA9ICh2YXIgc2hvcnQpMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG5cbiAgICAvL3RhYmxlLm9wW29wdHMudGFibGVfaW5kZXhdID0gNjQ7XG4gICAgLy90YWJsZS5iaXRzW29wdHMudGFibGVfaW5kZXhdID0gMTtcbiAgICAvL3RhYmxlLnZhbFtvcHRzLnRhYmxlX2luZGV4KytdID0gMDtcbiAgICB0YWJsZVt0YWJsZV9pbmRleCsrXSA9ICgxIDw8IDI0KSB8ICg2NCA8PCAxNikgfCAwO1xuXG4gICAgb3B0cy5iaXRzID0gMTtcbiAgICByZXR1cm4gMDsgICAgIC8qIG5vIHN5bWJvbHMsIGJ1dCB3YWl0IGZvciBkZWNvZGluZyB0byByZXBvcnQgZXJyb3IgKi9cbiAgfVxuICBmb3IgKG1pbiA9IDE7IG1pbiA8IG1heDsgbWluKyspIHtcbiAgICBpZiAoY291bnRbbWluXSAhPT0gMCkgeyBicmVhazsgfVxuICB9XG4gIGlmIChyb290IDwgbWluKSB7XG4gICAgcm9vdCA9IG1pbjtcbiAgfVxuXG4gIC8qIGNoZWNrIGZvciBhbiBvdmVyLXN1YnNjcmliZWQgb3IgaW5jb21wbGV0ZSBzZXQgb2YgbGVuZ3RocyAqL1xuICBsZWZ0ID0gMTtcbiAgZm9yIChsZW4gPSAxOyBsZW4gPD0gTUFYQklUUzsgbGVuKyspIHtcbiAgICBsZWZ0IDw8PSAxO1xuICAgIGxlZnQgLT0gY291bnRbbGVuXTtcbiAgICBpZiAobGVmdCA8IDApIHtcbiAgICAgIHJldHVybiAtMTtcbiAgICB9ICAgICAgICAvKiBvdmVyLXN1YnNjcmliZWQgKi9cbiAgfVxuICBpZiAobGVmdCA+IDAgJiYgKHR5cGUgPT09IENPREVTJDEgfHwgbWF4ICE9PSAxKSkge1xuICAgIHJldHVybiAtMTsgICAgICAgICAgICAgICAgICAgICAgLyogaW5jb21wbGV0ZSBzZXQgKi9cbiAgfVxuXG4gIC8qIGdlbmVyYXRlIG9mZnNldHMgaW50byBzeW1ib2wgdGFibGUgZm9yIGVhY2ggbGVuZ3RoIGZvciBzb3J0aW5nICovXG4gIG9mZnNbMV0gPSAwO1xuICBmb3IgKGxlbiA9IDE7IGxlbiA8IE1BWEJJVFM7IGxlbisrKSB7XG4gICAgb2Zmc1tsZW4gKyAxXSA9IG9mZnNbbGVuXSArIGNvdW50W2xlbl07XG4gIH1cblxuICAvKiBzb3J0IHN5bWJvbHMgYnkgbGVuZ3RoLCBieSBzeW1ib2wgb3JkZXIgd2l0aGluIGVhY2ggbGVuZ3RoICovXG4gIGZvciAoc3ltID0gMDsgc3ltIDwgY29kZXM7IHN5bSsrKSB7XG4gICAgaWYgKGxlbnNbbGVuc19pbmRleCArIHN5bV0gIT09IDApIHtcbiAgICAgIHdvcmtbb2Zmc1tsZW5zW2xlbnNfaW5kZXggKyBzeW1dXSsrXSA9IHN5bTtcbiAgICB9XG4gIH1cblxuICAvKlxuICAgQ3JlYXRlIGFuZCBmaWxsIGluIGRlY29kaW5nIHRhYmxlcy4gIEluIHRoaXMgbG9vcCwgdGhlIHRhYmxlIGJlaW5nXG4gICBmaWxsZWQgaXMgYXQgbmV4dCBhbmQgaGFzIGN1cnIgaW5kZXggYml0cy4gIFRoZSBjb2RlIGJlaW5nIHVzZWQgaXMgaHVmZlxuICAgd2l0aCBsZW5ndGggbGVuLiAgVGhhdCBjb2RlIGlzIGNvbnZlcnRlZCB0byBhbiBpbmRleCBieSBkcm9wcGluZyBkcm9wXG4gICBiaXRzIG9mZiBvZiB0aGUgYm90dG9tLiAgRm9yIGNvZGVzIHdoZXJlIGxlbiBpcyBsZXNzIHRoYW4gZHJvcCArIGN1cnIsXG4gICB0aG9zZSB0b3AgZHJvcCArIGN1cnIgLSBsZW4gYml0cyBhcmUgaW5jcmVtZW50ZWQgdGhyb3VnaCBhbGwgdmFsdWVzIHRvXG4gICBmaWxsIHRoZSB0YWJsZSB3aXRoIHJlcGxpY2F0ZWQgZW50cmllcy5cblxuICAgcm9vdCBpcyB0aGUgbnVtYmVyIG9mIGluZGV4IGJpdHMgZm9yIHRoZSByb290IHRhYmxlLiAgV2hlbiBsZW4gZXhjZWVkc1xuICAgcm9vdCwgc3ViLXRhYmxlcyBhcmUgY3JlYXRlZCBwb2ludGVkIHRvIGJ5IHRoZSByb290IGVudHJ5IHdpdGggYW4gaW5kZXhcbiAgIG9mIHRoZSBsb3cgcm9vdCBiaXRzIG9mIGh1ZmYuICBUaGlzIGlzIHNhdmVkIGluIGxvdyB0byBjaGVjayBmb3Igd2hlbiBhXG4gICBuZXcgc3ViLXRhYmxlIHNob3VsZCBiZSBzdGFydGVkLiAgZHJvcCBpcyB6ZXJvIHdoZW4gdGhlIHJvb3QgdGFibGUgaXNcbiAgIGJlaW5nIGZpbGxlZCwgYW5kIGRyb3AgaXMgcm9vdCB3aGVuIHN1Yi10YWJsZXMgYXJlIGJlaW5nIGZpbGxlZC5cblxuICAgV2hlbiBhIG5ldyBzdWItdGFibGUgaXMgbmVlZGVkLCBpdCBpcyBuZWNlc3NhcnkgdG8gbG9vayBhaGVhZCBpbiB0aGVcbiAgIGNvZGUgbGVuZ3RocyB0byBkZXRlcm1pbmUgd2hhdCBzaXplIHN1Yi10YWJsZSBpcyBuZWVkZWQuICBUaGUgbGVuZ3RoXG4gICBjb3VudHMgYXJlIHVzZWQgZm9yIHRoaXMsIGFuZCBzbyBjb3VudFtdIGlzIGRlY3JlbWVudGVkIGFzIGNvZGVzIGFyZVxuICAgZW50ZXJlZCBpbiB0aGUgdGFibGVzLlxuXG4gICB1c2VkIGtlZXBzIHRyYWNrIG9mIGhvdyBtYW55IHRhYmxlIGVudHJpZXMgaGF2ZSBiZWVuIGFsbG9jYXRlZCBmcm9tIHRoZVxuICAgcHJvdmlkZWQgKnRhYmxlIHNwYWNlLiAgSXQgaXMgY2hlY2tlZCBmb3IgTEVOUyBhbmQgRElTVCB0YWJsZXMgYWdhaW5zdFxuICAgdGhlIGNvbnN0YW50cyBFTk9VR0hfTEVOUyBhbmQgRU5PVUdIX0RJU1RTIHRvIGd1YXJkIGFnYWluc3QgY2hhbmdlcyBpblxuICAgdGhlIGluaXRpYWwgcm9vdCB0YWJsZSBzaXplIGNvbnN0YW50cy4gIFNlZSB0aGUgY29tbWVudHMgaW4gaW5mdHJlZXMuaFxuICAgZm9yIG1vcmUgaW5mb3JtYXRpb24uXG5cbiAgIHN5bSBpbmNyZW1lbnRzIHRocm91Z2ggYWxsIHN5bWJvbHMsIGFuZCB0aGUgbG9vcCB0ZXJtaW5hdGVzIHdoZW5cbiAgIGFsbCBjb2RlcyBvZiBsZW5ndGggbWF4LCBpLmUuIGFsbCBjb2RlcywgaGF2ZSBiZWVuIHByb2Nlc3NlZC4gIFRoaXNcbiAgIHJvdXRpbmUgcGVybWl0cyBpbmNvbXBsZXRlIGNvZGVzLCBzbyBhbm90aGVyIGxvb3AgYWZ0ZXIgdGhpcyBvbmUgZmlsbHNcbiAgIGluIHRoZSByZXN0IG9mIHRoZSBkZWNvZGluZyB0YWJsZXMgd2l0aCBpbnZhbGlkIGNvZGUgbWFya2Vycy5cbiAgICovXG5cbiAgLyogc2V0IHVwIGZvciBjb2RlIHR5cGUgKi9cbiAgLy8gcG9vciBtYW4gb3B0aW1pemF0aW9uIC0gdXNlIGlmLWVsc2UgaW5zdGVhZCBvZiBzd2l0Y2gsXG4gIC8vIHRvIGF2b2lkIGRlb3B0cyBpbiBvbGQgdjhcbiAgaWYgKHR5cGUgPT09IENPREVTJDEpIHtcbiAgICBiYXNlID0gZXh0cmEgPSB3b3JrOyAgICAvKiBkdW1teSB2YWx1ZS0tbm90IHVzZWQgKi9cbiAgICBlbmQgPSAxOTtcblxuICB9IGVsc2UgaWYgKHR5cGUgPT09IExFTlMkMSkge1xuICAgIGJhc2UgPSBsYmFzZTtcbiAgICBiYXNlX2luZGV4IC09IDI1NztcbiAgICBleHRyYSA9IGxleHQ7XG4gICAgZXh0cmFfaW5kZXggLT0gMjU3O1xuICAgIGVuZCA9IDI1NjtcblxuICB9IGVsc2UgeyAgICAgICAgICAgICAgICAgICAgLyogRElTVFMgKi9cbiAgICBiYXNlID0gZGJhc2U7XG4gICAgZXh0cmEgPSBkZXh0O1xuICAgIGVuZCA9IC0xO1xuICB9XG5cbiAgLyogaW5pdGlhbGl6ZSBvcHRzIGZvciBsb29wICovXG4gIGh1ZmYgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlICovXG4gIHN5bSA9IDA7ICAgICAgICAgICAgICAgICAgICAvKiBzdGFydGluZyBjb2RlIHN5bWJvbCAqL1xuICBsZW4gPSBtaW47ICAgICAgICAgICAgICAgICAgLyogc3RhcnRpbmcgY29kZSBsZW5ndGggKi9cbiAgbmV4dCA9IHRhYmxlX2luZGV4OyAgICAgICAgICAgICAgLyogY3VycmVudCB0YWJsZSB0byBmaWxsIGluICovXG4gIGN1cnIgPSByb290OyAgICAgICAgICAgICAgICAvKiBjdXJyZW50IHRhYmxlIGluZGV4IGJpdHMgKi9cbiAgZHJvcCA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGN1cnJlbnQgYml0cyB0byBkcm9wIGZyb20gY29kZSBmb3IgaW5kZXggKi9cbiAgbG93ID0gLTE7ICAgICAgICAgICAgICAgICAgIC8qIHRyaWdnZXIgbmV3IHN1Yi10YWJsZSB3aGVuIGxlbiA+IHJvb3QgKi9cbiAgdXNlZCA9IDEgPDwgcm9vdDsgICAgICAgICAgLyogdXNlIHJvb3QgdGFibGUgZW50cmllcyAqL1xuICBtYXNrID0gdXNlZCAtIDE7ICAgICAgICAgICAgLyogbWFzayBmb3IgY29tcGFyaW5nIGxvdyAqL1xuXG4gIC8qIGNoZWNrIGF2YWlsYWJsZSB0YWJsZSBzcGFjZSAqL1xuICBpZiAoKHR5cGUgPT09IExFTlMkMSAmJiB1c2VkID4gRU5PVUdIX0xFTlMkMSkgfHxcbiAgICAodHlwZSA9PT0gRElTVFMkMSAmJiB1c2VkID4gRU5PVUdIX0RJU1RTJDEpKSB7XG4gICAgcmV0dXJuIDE7XG4gIH1cblxuICAvKiBwcm9jZXNzIGFsbCBjb2RlcyBhbmQgbWFrZSB0YWJsZSBlbnRyaWVzICovXG4gIGZvciAoOzspIHtcbiAgICAvKiBjcmVhdGUgdGFibGUgZW50cnkgKi9cbiAgICBoZXJlX2JpdHMgPSBsZW4gLSBkcm9wO1xuICAgIGlmICh3b3JrW3N5bV0gPCBlbmQpIHtcbiAgICAgIGhlcmVfb3AgPSAwO1xuICAgICAgaGVyZV92YWwgPSB3b3JrW3N5bV07XG4gICAgfVxuICAgIGVsc2UgaWYgKHdvcmtbc3ltXSA+IGVuZCkge1xuICAgICAgaGVyZV9vcCA9IGV4dHJhW2V4dHJhX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICAgIGhlcmVfdmFsID0gYmFzZVtiYXNlX2luZGV4ICsgd29ya1tzeW1dXTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICBoZXJlX29wID0gMzIgKyA2NDsgICAgICAgICAvKiBlbmQgb2YgYmxvY2sgKi9cbiAgICAgIGhlcmVfdmFsID0gMDtcbiAgICB9XG5cbiAgICAvKiByZXBsaWNhdGUgZm9yIHRob3NlIGluZGljZXMgd2l0aCBsb3cgbGVuIGJpdHMgZXF1YWwgdG8gaHVmZiAqL1xuICAgIGluY3IgPSAxIDw8IChsZW4gLSBkcm9wKTtcbiAgICBmaWxsID0gMSA8PCBjdXJyO1xuICAgIG1pbiA9IGZpbGw7ICAgICAgICAgICAgICAgICAvKiBzYXZlIG9mZnNldCB0byBuZXh0IHRhYmxlICovXG4gICAgZG8ge1xuICAgICAgZmlsbCAtPSBpbmNyO1xuICAgICAgdGFibGVbbmV4dCArIChodWZmID4+IGRyb3ApICsgZmlsbF0gPSAoaGVyZV9iaXRzIDw8IDI0KSB8IChoZXJlX29wIDw8IDE2KSB8IGhlcmVfdmFsIHwwO1xuICAgIH0gd2hpbGUgKGZpbGwgIT09IDApO1xuXG4gICAgLyogYmFja3dhcmRzIGluY3JlbWVudCB0aGUgbGVuLWJpdCBjb2RlIGh1ZmYgKi9cbiAgICBpbmNyID0gMSA8PCAobGVuIC0gMSk7XG4gICAgd2hpbGUgKGh1ZmYgJiBpbmNyKSB7XG4gICAgICBpbmNyID4+PSAxO1xuICAgIH1cbiAgICBpZiAoaW5jciAhPT0gMCkge1xuICAgICAgaHVmZiAmPSBpbmNyIC0gMTtcbiAgICAgIGh1ZmYgKz0gaW5jcjtcbiAgICB9IGVsc2Uge1xuICAgICAgaHVmZiA9IDA7XG4gICAgfVxuXG4gICAgLyogZ28gdG8gbmV4dCBzeW1ib2wsIHVwZGF0ZSBjb3VudCwgbGVuICovXG4gICAgc3ltKys7XG4gICAgaWYgKC0tY291bnRbbGVuXSA9PT0gMCkge1xuICAgICAgaWYgKGxlbiA9PT0gbWF4KSB7IGJyZWFrOyB9XG4gICAgICBsZW4gPSBsZW5zW2xlbnNfaW5kZXggKyB3b3JrW3N5bV1dO1xuICAgIH1cblxuICAgIC8qIGNyZWF0ZSBuZXcgc3ViLXRhYmxlIGlmIG5lZWRlZCAqL1xuICAgIGlmIChsZW4gPiByb290ICYmIChodWZmICYgbWFzaykgIT09IGxvdykge1xuICAgICAgLyogaWYgZmlyc3QgdGltZSwgdHJhbnNpdGlvbiB0byBzdWItdGFibGVzICovXG4gICAgICBpZiAoZHJvcCA9PT0gMCkge1xuICAgICAgICBkcm9wID0gcm9vdDtcbiAgICAgIH1cblxuICAgICAgLyogaW5jcmVtZW50IHBhc3QgbGFzdCB0YWJsZSAqL1xuICAgICAgbmV4dCArPSBtaW47ICAgICAgICAgICAgLyogaGVyZSBtaW4gaXMgMSA8PCBjdXJyICovXG5cbiAgICAgIC8qIGRldGVybWluZSBsZW5ndGggb2YgbmV4dCB0YWJsZSAqL1xuICAgICAgY3VyciA9IGxlbiAtIGRyb3A7XG4gICAgICBsZWZ0ID0gMSA8PCBjdXJyO1xuICAgICAgd2hpbGUgKGN1cnIgKyBkcm9wIDwgbWF4KSB7XG4gICAgICAgIGxlZnQgLT0gY291bnRbY3VyciArIGRyb3BdO1xuICAgICAgICBpZiAobGVmdCA8PSAwKSB7IGJyZWFrOyB9XG4gICAgICAgIGN1cnIrKztcbiAgICAgICAgbGVmdCA8PD0gMTtcbiAgICAgIH1cblxuICAgICAgLyogY2hlY2sgZm9yIGVub3VnaCBzcGFjZSAqL1xuICAgICAgdXNlZCArPSAxIDw8IGN1cnI7XG4gICAgICBpZiAoKHR5cGUgPT09IExFTlMkMSAmJiB1c2VkID4gRU5PVUdIX0xFTlMkMSkgfHxcbiAgICAgICAgKHR5cGUgPT09IERJU1RTJDEgJiYgdXNlZCA+IEVOT1VHSF9ESVNUUyQxKSkge1xuICAgICAgICByZXR1cm4gMTtcbiAgICAgIH1cblxuICAgICAgLyogcG9pbnQgZW50cnkgaW4gcm9vdCB0YWJsZSB0byBzdWItdGFibGUgKi9cbiAgICAgIGxvdyA9IGh1ZmYgJiBtYXNrO1xuICAgICAgLyp0YWJsZS5vcFtsb3ddID0gY3VycjtcbiAgICAgIHRhYmxlLmJpdHNbbG93XSA9IHJvb3Q7XG4gICAgICB0YWJsZS52YWxbbG93XSA9IG5leHQgLSBvcHRzLnRhYmxlX2luZGV4OyovXG4gICAgICB0YWJsZVtsb3ddID0gKHJvb3QgPDwgMjQpIHwgKGN1cnIgPDwgMTYpIHwgKG5leHQgLSB0YWJsZV9pbmRleCkgfDA7XG4gICAgfVxuICB9XG5cbiAgLyogZmlsbCBpbiByZW1haW5pbmcgdGFibGUgZW50cnkgaWYgY29kZSBpcyBpbmNvbXBsZXRlIChndWFyYW50ZWVkIHRvIGhhdmVcbiAgIGF0IG1vc3Qgb25lIHJlbWFpbmluZyBlbnRyeSwgc2luY2UgaWYgdGhlIGNvZGUgaXMgaW5jb21wbGV0ZSwgdGhlXG4gICBtYXhpbXVtIGNvZGUgbGVuZ3RoIHRoYXQgd2FzIGFsbG93ZWQgdG8gZ2V0IHRoaXMgZmFyIGlzIG9uZSBiaXQpICovXG4gIGlmIChodWZmICE9PSAwKSB7XG4gICAgLy90YWJsZS5vcFtuZXh0ICsgaHVmZl0gPSA2NDsgICAgICAgICAgICAvKiBpbnZhbGlkIGNvZGUgbWFya2VyICovXG4gICAgLy90YWJsZS5iaXRzW25leHQgKyBodWZmXSA9IGxlbiAtIGRyb3A7XG4gICAgLy90YWJsZS52YWxbbmV4dCArIGh1ZmZdID0gMDtcbiAgICB0YWJsZVtuZXh0ICsgaHVmZl0gPSAoKGxlbiAtIGRyb3ApIDw8IDI0KSB8ICg2NCA8PCAxNikgfDA7XG4gIH1cblxuICAvKiBzZXQgcmV0dXJuIHBhcmFtZXRlcnMgKi9cbiAgLy9vcHRzLnRhYmxlX2luZGV4ICs9IHVzZWQ7XG4gIG9wdHMuYml0cyA9IHJvb3Q7XG4gIHJldHVybiAwO1xufTtcblxuXG52YXIgaW5mdHJlZXMgPSBpbmZsYXRlX3RhYmxlO1xuXG4vLyAoQykgMTk5NS0yMDEzIEplYW4tbG91cCBHYWlsbHkgYW5kIE1hcmsgQWRsZXJcbi8vIChDKSAyMDE0LTIwMTcgVml0YWx5IFB1enJpbiBhbmQgQW5kcmV5IFR1cGl0c2luXG4vL1xuLy8gVGhpcyBzb2Z0d2FyZSBpcyBwcm92aWRlZCAnYXMtaXMnLCB3aXRob3V0IGFueSBleHByZXNzIG9yIGltcGxpZWRcbi8vIHdhcnJhbnR5LiBJbiBubyBldmVudCB3aWxsIHRoZSBhdXRob3JzIGJlIGhlbGQgbGlhYmxlIGZvciBhbnkgZGFtYWdlc1xuLy8gYXJpc2luZyBmcm9tIHRoZSB1c2Ugb2YgdGhpcyBzb2Z0d2FyZS5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGdyYW50ZWQgdG8gYW55b25lIHRvIHVzZSB0aGlzIHNvZnR3YXJlIGZvciBhbnkgcHVycG9zZSxcbi8vIGluY2x1ZGluZyBjb21tZXJjaWFsIGFwcGxpY2F0aW9ucywgYW5kIHRvIGFsdGVyIGl0IGFuZCByZWRpc3RyaWJ1dGUgaXRcbi8vIGZyZWVseSwgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIHJlc3RyaWN0aW9uczpcbi8vXG4vLyAxLiBUaGUgb3JpZ2luIG9mIHRoaXMgc29mdHdhcmUgbXVzdCBub3QgYmUgbWlzcmVwcmVzZW50ZWQ7IHlvdSBtdXN0IG5vdFxuLy8gICBjbGFpbSB0aGF0IHlvdSB3cm90ZSB0aGUgb3JpZ2luYWwgc29mdHdhcmUuIElmIHlvdSB1c2UgdGhpcyBzb2Z0d2FyZVxuLy8gICBpbiBhIHByb2R1Y3QsIGFuIGFja25vd2xlZGdtZW50IGluIHRoZSBwcm9kdWN0IGRvY3VtZW50YXRpb24gd291bGQgYmVcbi8vICAgYXBwcmVjaWF0ZWQgYnV0IGlzIG5vdCByZXF1aXJlZC5cbi8vIDIuIEFsdGVyZWQgc291cmNlIHZlcnNpb25zIG11c3QgYmUgcGxhaW5seSBtYXJrZWQgYXMgc3VjaCwgYW5kIG11c3Qgbm90IGJlXG4vLyAgIG1pc3JlcHJlc2VudGVkIGFzIGJlaW5nIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS5cbi8vIDMuIFRoaXMgbm90aWNlIG1heSBub3QgYmUgcmVtb3ZlZCBvciBhbHRlcmVkIGZyb20gYW55IHNvdXJjZSBkaXN0cmlidXRpb24uXG5cblxuXG5cblxuXG5jb25zdCBDT0RFUyA9IDA7XG5jb25zdCBMRU5TID0gMTtcbmNvbnN0IERJU1RTID0gMjtcblxuLyogUHVibGljIGNvbnN0YW50cyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cbmNvbnN0IHtcbiAgWl9GSU5JU0g6IFpfRklOSVNIJDEsIFpfQkxPQ0ssIFpfVFJFRVMsXG4gIFpfT0s6IFpfT0skMSwgWl9TVFJFQU1fRU5EOiBaX1NUUkVBTV9FTkQkMSwgWl9ORUVEX0RJQ1Q6IFpfTkVFRF9ESUNUJDEsIFpfU1RSRUFNX0VSUk9SOiBaX1NUUkVBTV9FUlJPUiQxLCBaX0RBVEFfRVJST1I6IFpfREFUQV9FUlJPUiQxLCBaX01FTV9FUlJPUjogWl9NRU1fRVJST1IkMSwgWl9CVUZfRVJST1IsXG4gIFpfREVGTEFURURcbn0gPSBjb25zdGFudHMkMjtcblxuXG4vKiBTVEFURVMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuLyogPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09Ki9cblxuXG5jb25zdCAgICBIRUFEID0gMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbWFnaWMgaGVhZGVyICovXG5jb25zdCAgICBGTEFHUyA9IDI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgbWV0aG9kIGFuZCBmbGFncyAoZ3ppcCkgKi9cbmNvbnN0ICAgIFRJTUUgPSAzOyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBtb2RpZmljYXRpb24gdGltZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIE9TID0gNDsgICAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBmbGFncyBhbmQgb3BlcmF0aW5nIHN5c3RlbSAoZ3ppcCkgKi9cbmNvbnN0ICAgIEVYTEVOID0gNTsgICAgICAvKiBpOiB3YWl0aW5nIGZvciBleHRyYSBsZW5ndGggKGd6aXApICovXG5jb25zdCAgICBFWFRSQSA9IDY7ICAgICAgLyogaTogd2FpdGluZyBmb3IgZXh0cmEgYnl0ZXMgKGd6aXApICovXG5jb25zdCAgICBOQU1FID0gNzsgICAgICAgLyogaTogd2FpdGluZyBmb3IgZW5kIG9mIGZpbGUgbmFtZSAoZ3ppcCkgKi9cbmNvbnN0ICAgIENPTU1FTlQgPSA4OyAgICAvKiBpOiB3YWl0aW5nIGZvciBlbmQgb2YgY29tbWVudCAoZ3ppcCkgKi9cbmNvbnN0ICAgIEhDUkMgPSA5OyAgICAgICAvKiBpOiB3YWl0aW5nIGZvciBoZWFkZXIgY3JjIChnemlwKSAqL1xuY29uc3QgICAgRElDVElEID0gMTA7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpY3Rpb25hcnkgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIERJQ1QgPSAxMTsgICAgICAvKiB3YWl0aW5nIGZvciBpbmZsYXRlU2V0RGljdGlvbmFyeSgpIGNhbGwgKi9cbmNvbnN0ICAgICAgICBUWVBFID0gMTI7ICAgICAgLyogaTogd2FpdGluZyBmb3IgdHlwZSBiaXRzLCBpbmNsdWRpbmcgbGFzdC1mbGFnIGJpdCAqL1xuY29uc3QgICAgICAgIFRZUEVETyA9IDEzOyAgICAvKiBpOiBzYW1lLCBidXQgc2tpcCBjaGVjayB0byBleGl0IGluZmxhdGUgb24gbmV3IGJsb2NrICovXG5jb25zdCAgICAgICAgU1RPUkVEID0gMTQ7ICAgIC8qIGk6IHdhaXRpbmcgZm9yIHN0b3JlZCBzaXplIChsZW5ndGggYW5kIGNvbXBsZW1lbnQpICovXG5jb25zdCAgICAgICAgQ09QWV8gPSAxNTsgICAgIC8qIGkvbzogc2FtZSBhcyBDT1BZIGJlbG93LCBidXQgb25seSBmaXJzdCB0aW1lIGluICovXG5jb25zdCAgICAgICAgQ09QWSA9IDE2OyAgICAgIC8qIGkvbzogd2FpdGluZyBmb3IgaW5wdXQgb3Igb3V0cHV0IHRvIGNvcHkgc3RvcmVkIGJsb2NrICovXG5jb25zdCAgICAgICAgVEFCTEUgPSAxNzsgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGR5bmFtaWMgYmxvY2sgdGFibGUgbGVuZ3RocyAqL1xuY29uc3QgICAgICAgIExFTkxFTlMgPSAxODsgICAvKiBpOiB3YWl0aW5nIGZvciBjb2RlIGxlbmd0aCBjb2RlIGxlbmd0aHMgKi9cbmNvbnN0ICAgICAgICBDT0RFTEVOUyA9IDE5OyAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdCBhbmQgZGlzdGFuY2UgY29kZSBsZW5ndGhzICovXG5jb25zdCAgICAgICAgICAgIExFTl8gPSAyMDsgICAgICAvKiBpOiBzYW1lIGFzIExFTiBiZWxvdywgYnV0IG9ubHkgZmlyc3QgdGltZSBpbiAqL1xuY29uc3QgICAgICAgICAgICBMRU4gPSAyMTsgICAgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoL2xpdC9lb2IgY29kZSAqL1xuY29uc3QgICAgICAgICAgICBMRU5FWFQgPSAyMjsgICAgLyogaTogd2FpdGluZyBmb3IgbGVuZ3RoIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVCA9IDIzOyAgICAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGNvZGUgKi9cbmNvbnN0ICAgICAgICAgICAgRElTVEVYVCA9IDI0OyAgIC8qIGk6IHdhaXRpbmcgZm9yIGRpc3RhbmNlIGV4dHJhIGJpdHMgKi9cbmNvbnN0ICAgICAgICAgICAgTUFUQ0ggPSAyNTsgICAgIC8qIG86IHdhaXRpbmcgZm9yIG91dHB1dCBzcGFjZSB0byBjb3B5IHN0cmluZyAqL1xuY29uc3QgICAgICAgICAgICBMSVQgPSAyNjsgICAgICAgLyogbzogd2FpdGluZyBmb3Igb3V0cHV0IHNwYWNlIHRvIHdyaXRlIGxpdGVyYWwgKi9cbmNvbnN0ICAgIENIRUNLID0gMjc7ICAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgY2hlY2sgdmFsdWUgKi9cbmNvbnN0ICAgIExFTkdUSCA9IDI4OyAgICAvKiBpOiB3YWl0aW5nIGZvciAzMi1iaXQgbGVuZ3RoIChnemlwKSAqL1xuY29uc3QgICAgRE9ORSA9IDI5OyAgICAgIC8qIGZpbmlzaGVkIGNoZWNrLCBkb25lIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBCQUQgPSAzMDsgICAgICAgLyogZ290IGEgZGF0YSBlcnJvciAtLSByZW1haW4gaGVyZSB1bnRpbCByZXNldCAqL1xuY29uc3QgICAgTUVNID0gMzE7ICAgICAgIC8qIGdvdCBhbiBpbmZsYXRlKCkgbWVtb3J5IGVycm9yIC0tIHJlbWFpbiBoZXJlIHVudGlsIHJlc2V0ICovXG5jb25zdCAgICBTWU5DID0gMzI7ICAgICAgLyogbG9va2luZyBmb3Igc3luY2hyb25pemF0aW9uIGJ5dGVzIHRvIHJlc3RhcnQgaW5mbGF0ZSgpICovXG5cbi8qID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG5cblxuXG5jb25zdCBFTk9VR0hfTEVOUyA9IDg1MjtcbmNvbnN0IEVOT1VHSF9ESVNUUyA9IDU5Mjtcbi8vY29uc3QgRU5PVUdIID0gIChFTk9VR0hfTEVOUytFTk9VR0hfRElTVFMpO1xuXG5jb25zdCBNQVhfV0JJVFMgPSAxNTtcbi8qIDMySyBMWjc3IHdpbmRvdyAqL1xuY29uc3QgREVGX1dCSVRTID0gTUFYX1dCSVRTO1xuXG5cbmNvbnN0IHpzd2FwMzIgPSAocSkgPT4ge1xuXG4gIHJldHVybiAgKCgocSA+Pj4gMjQpICYgMHhmZikgK1xuICAgICAgICAgICgocSA+Pj4gOCkgJiAweGZmMDApICtcbiAgICAgICAgICAoKHEgJiAweGZmMDApIDw8IDgpICtcbiAgICAgICAgICAoKHEgJiAweGZmKSA8PCAyNCkpO1xufTtcblxuXG5mdW5jdGlvbiBJbmZsYXRlU3RhdGUoKSB7XG4gIHRoaXMubW9kZSA9IDA7ICAgICAgICAgICAgIC8qIGN1cnJlbnQgaW5mbGF0ZSBtb2RlICovXG4gIHRoaXMubGFzdCA9IGZhbHNlOyAgICAgICAgICAvKiB0cnVlIGlmIHByb2Nlc3NpbmcgbGFzdCBibG9jayAqL1xuICB0aGlzLndyYXAgPSAwOyAgICAgICAgICAgICAgLyogYml0IDAgdHJ1ZSBmb3IgemxpYiwgYml0IDEgdHJ1ZSBmb3IgZ3ppcCAqL1xuICB0aGlzLmhhdmVkaWN0ID0gZmFsc2U7ICAgICAgLyogdHJ1ZSBpZiBkaWN0aW9uYXJ5IHByb3ZpZGVkICovXG4gIHRoaXMuZmxhZ3MgPSAwOyAgICAgICAgICAgICAvKiBnemlwIGhlYWRlciBtZXRob2QgYW5kIGZsYWdzICgwIGlmIHpsaWIpICovXG4gIHRoaXMuZG1heCA9IDA7ICAgICAgICAgICAgICAvKiB6bGliIGhlYWRlciBtYXggZGlzdGFuY2UgKElORkxBVEVfU1RSSUNUKSAqL1xuICB0aGlzLmNoZWNrID0gMDsgICAgICAgICAgICAgLyogcHJvdGVjdGVkIGNvcHkgb2YgY2hlY2sgdmFsdWUgKi9cbiAgdGhpcy50b3RhbCA9IDA7ICAgICAgICAgICAgIC8qIHByb3RlY3RlZCBjb3B5IG9mIG91dHB1dCBjb3VudCAqL1xuICAvLyBUT0RPOiBtYXkgYmUge31cbiAgdGhpcy5oZWFkID0gbnVsbDsgICAgICAgICAgIC8qIHdoZXJlIHRvIHNhdmUgZ3ppcCBoZWFkZXIgaW5mb3JtYXRpb24gKi9cblxuICAvKiBzbGlkaW5nIHdpbmRvdyAqL1xuICB0aGlzLndiaXRzID0gMDsgICAgICAgICAgICAgLyogbG9nIGJhc2UgMiBvZiByZXF1ZXN0ZWQgd2luZG93IHNpemUgKi9cbiAgdGhpcy53c2l6ZSA9IDA7ICAgICAgICAgICAgIC8qIHdpbmRvdyBzaXplIG9yIHplcm8gaWYgbm90IHVzaW5nIHdpbmRvdyAqL1xuICB0aGlzLndoYXZlID0gMDsgICAgICAgICAgICAgLyogdmFsaWQgYnl0ZXMgaW4gdGhlIHdpbmRvdyAqL1xuICB0aGlzLnduZXh0ID0gMDsgICAgICAgICAgICAgLyogd2luZG93IHdyaXRlIGluZGV4ICovXG4gIHRoaXMud2luZG93ID0gbnVsbDsgICAgICAgICAvKiBhbGxvY2F0ZWQgc2xpZGluZyB3aW5kb3csIGlmIG5lZWRlZCAqL1xuXG4gIC8qIGJpdCBhY2N1bXVsYXRvciAqL1xuICB0aGlzLmhvbGQgPSAwOyAgICAgICAgICAgICAgLyogaW5wdXQgYml0IGFjY3VtdWxhdG9yICovXG4gIHRoaXMuYml0cyA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgYml0cyBpbiBcImluXCIgKi9cblxuICAvKiBmb3Igc3RyaW5nIGFuZCBzdG9yZWQgYmxvY2sgY29weWluZyAqL1xuICB0aGlzLmxlbmd0aCA9IDA7ICAgICAgICAgICAgLyogbGl0ZXJhbCBvciBsZW5ndGggb2YgZGF0YSB0byBjb3B5ICovXG4gIHRoaXMub2Zmc2V0ID0gMDsgICAgICAgICAgICAvKiBkaXN0YW5jZSBiYWNrIHRvIGNvcHkgc3RyaW5nIGZyb20gKi9cblxuICAvKiBmb3IgdGFibGUgYW5kIGNvZGUgZGVjb2RpbmcgKi9cbiAgdGhpcy5leHRyYSA9IDA7ICAgICAgICAgICAgIC8qIGV4dHJhIGJpdHMgbmVlZGVkICovXG5cbiAgLyogZml4ZWQgYW5kIGR5bmFtaWMgY29kZSB0YWJsZXMgKi9cbiAgdGhpcy5sZW5jb2RlID0gbnVsbDsgICAgICAgICAgLyogc3RhcnRpbmcgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzICovXG4gIHRoaXMuZGlzdGNvZGUgPSBudWxsOyAgICAgICAgIC8qIHN0YXJ0aW5nIHRhYmxlIGZvciBkaXN0YW5jZSBjb2RlcyAqL1xuICB0aGlzLmxlbmJpdHMgPSAwOyAgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgbGVuY29kZSAqL1xuICB0aGlzLmRpc3RiaXRzID0gMDsgICAgICAgICAgLyogaW5kZXggYml0cyBmb3IgZGlzdGNvZGUgKi9cblxuICAvKiBkeW5hbWljIHRhYmxlIGJ1aWxkaW5nICovXG4gIHRoaXMubmNvZGUgPSAwOyAgICAgICAgICAgICAvKiBudW1iZXIgb2YgY29kZSBsZW5ndGggY29kZSBsZW5ndGhzICovXG4gIHRoaXMubmxlbiA9IDA7ICAgICAgICAgICAgICAvKiBudW1iZXIgb2YgbGVuZ3RoIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLm5kaXN0ID0gMDsgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGRpc3RhbmNlIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLmhhdmUgPSAwOyAgICAgICAgICAgICAgLyogbnVtYmVyIG9mIGNvZGUgbGVuZ3RocyBpbiBsZW5zW10gKi9cbiAgdGhpcy5uZXh0ID0gbnVsbDsgICAgICAgICAgICAgIC8qIG5leHQgYXZhaWxhYmxlIHNwYWNlIGluIGNvZGVzW10gKi9cblxuICB0aGlzLmxlbnMgPSBuZXcgVWludDE2QXJyYXkoMzIwKTsgLyogdGVtcG9yYXJ5IHN0b3JhZ2UgZm9yIGNvZGUgbGVuZ3RocyAqL1xuICB0aGlzLndvcmsgPSBuZXcgVWludDE2QXJyYXkoMjg4KTsgLyogd29yayBhcmVhIGZvciBjb2RlIHRhYmxlIGJ1aWxkaW5nICovXG5cbiAgLypcbiAgIGJlY2F1c2Ugd2UgZG9uJ3QgaGF2ZSBwb2ludGVycyBpbiBqcywgd2UgdXNlIGxlbmNvZGUgYW5kIGRpc3Rjb2RlIGRpcmVjdGx5XG4gICBhcyBidWZmZXJzIHNvIHdlIGRvbid0IG5lZWQgY29kZXNcbiAgKi9cbiAgLy90aGlzLmNvZGVzID0gbmV3IEludDMyQXJyYXkoRU5PVUdIKTsgICAgICAgLyogc3BhY2UgZm9yIGNvZGUgdGFibGVzICovXG4gIHRoaXMubGVuZHluID0gbnVsbDsgICAgICAgICAgICAgIC8qIGR5bmFtaWMgdGFibGUgZm9yIGxlbmd0aC9saXRlcmFsIGNvZGVzIChKUyBzcGVjaWZpYykgKi9cbiAgdGhpcy5kaXN0ZHluID0gbnVsbDsgICAgICAgICAgICAgLyogZHluYW1pYyB0YWJsZSBmb3IgZGlzdGFuY2UgY29kZXMgKEpTIHNwZWNpZmljKSAqL1xuICB0aGlzLnNhbmUgPSAwOyAgICAgICAgICAgICAgICAgICAvKiBpZiBmYWxzZSwgYWxsb3cgaW52YWxpZCBkaXN0YW5jZSB0b28gZmFyICovXG4gIHRoaXMuYmFjayA9IDA7ICAgICAgICAgICAgICAgICAgIC8qIGJpdHMgYmFjayBvZiBsYXN0IHVucHJvY2Vzc2VkIGxlbmd0aC9saXQgKi9cbiAgdGhpcy53YXMgPSAwOyAgICAgICAgICAgICAgICAgICAgLyogaW5pdGlhbCBsZW5ndGggb2YgbWF0Y2ggKi9cbn1cblxuXG5jb25zdCBpbmZsYXRlUmVzZXRLZWVwID0gKHN0cm0pID0+IHtcblxuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBzdHJtLnRvdGFsX2luID0gc3RybS50b3RhbF9vdXQgPSBzdGF0ZS50b3RhbCA9IDA7XG4gIHN0cm0ubXNnID0gJyc7IC8qWl9OVUxMKi9cbiAgaWYgKHN0YXRlLndyYXApIHsgICAgICAgLyogdG8gc3VwcG9ydCBpbGwtY29uY2VpdmVkIEphdmEgdGVzdCBzdWl0ZSAqL1xuICAgIHN0cm0uYWRsZXIgPSBzdGF0ZS53cmFwICYgMTtcbiAgfVxuICBzdGF0ZS5tb2RlID0gSEVBRDtcbiAgc3RhdGUubGFzdCA9IDA7XG4gIHN0YXRlLmhhdmVkaWN0ID0gMDtcbiAgc3RhdGUuZG1heCA9IDMyNzY4O1xuICBzdGF0ZS5oZWFkID0gbnVsbC8qWl9OVUxMKi87XG4gIHN0YXRlLmhvbGQgPSAwO1xuICBzdGF0ZS5iaXRzID0gMDtcbiAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUuZGlzdGNvZGUgPSBzdGF0ZS5uZXh0ID0gc3RhdGUuY29kZXM7XG4gIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW4gPSBuZXcgSW50MzJBcnJheShFTk9VR0hfTEVOUyk7XG4gIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUuZGlzdGR5biA9IG5ldyBJbnQzMkFycmF5KEVOT1VHSF9ESVNUUyk7XG5cbiAgc3RhdGUuc2FuZSA9IDE7XG4gIHN0YXRlLmJhY2sgPSAtMTtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiByZXNldFxcblwiKSk7XG4gIHJldHVybiBaX09LJDE7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVSZXNldCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcbiAgc3RhdGUud3NpemUgPSAwO1xuICBzdGF0ZS53aGF2ZSA9IDA7XG4gIHN0YXRlLnduZXh0ID0gMDtcbiAgcmV0dXJuIGluZmxhdGVSZXNldEtlZXAoc3RybSk7XG5cbn07XG5cblxuY29uc3QgaW5mbGF0ZVJlc2V0MiA9IChzdHJtLCB3aW5kb3dCaXRzKSA9PiB7XG4gIGxldCB3cmFwO1xuXG4gIC8qIGdldCB0aGUgc3RhdGUgKi9cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gIGNvbnN0IHN0YXRlID0gc3RybS5zdGF0ZTtcblxuICAvKiBleHRyYWN0IHdyYXAgcmVxdWVzdCBmcm9tIHdpbmRvd0JpdHMgcGFyYW1ldGVyICovXG4gIGlmICh3aW5kb3dCaXRzIDwgMCkge1xuICAgIHdyYXAgPSAwO1xuICAgIHdpbmRvd0JpdHMgPSAtd2luZG93Qml0cztcbiAgfVxuICBlbHNlIHtcbiAgICB3cmFwID0gKHdpbmRvd0JpdHMgPj4gNCkgKyAxO1xuICAgIGlmICh3aW5kb3dCaXRzIDwgNDgpIHtcbiAgICAgIHdpbmRvd0JpdHMgJj0gMTU7XG4gICAgfVxuICB9XG5cbiAgLyogc2V0IG51bWJlciBvZiB3aW5kb3cgYml0cywgZnJlZSB3aW5kb3cgaWYgZGlmZmVyZW50ICovXG4gIGlmICh3aW5kb3dCaXRzICYmICh3aW5kb3dCaXRzIDwgOCB8fCB3aW5kb3dCaXRzID4gMTUpKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gIH1cbiAgaWYgKHN0YXRlLndpbmRvdyAhPT0gbnVsbCAmJiBzdGF0ZS53Yml0cyAhPT0gd2luZG93Qml0cykge1xuICAgIHN0YXRlLndpbmRvdyA9IG51bGw7XG4gIH1cblxuICAvKiB1cGRhdGUgc3RhdGUgYW5kIHJlc2V0IHRoZSByZXN0IG9mIGl0ICovXG4gIHN0YXRlLndyYXAgPSB3cmFwO1xuICBzdGF0ZS53Yml0cyA9IHdpbmRvd0JpdHM7XG4gIHJldHVybiBpbmZsYXRlUmVzZXQoc3RybSk7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVJbml0MiA9IChzdHJtLCB3aW5kb3dCaXRzKSA9PiB7XG5cbiAgaWYgKCFzdHJtKSB7IHJldHVybiBaX1NUUkVBTV9FUlJPUiQxOyB9XG4gIC8vc3RybS5tc2cgPSBaX05VTEw7ICAgICAgICAgICAgICAgICAvKiBpbiBjYXNlIHdlIHJldHVybiBhbiBlcnJvciAqL1xuXG4gIGNvbnN0IHN0YXRlID0gbmV3IEluZmxhdGVTdGF0ZSgpO1xuXG4gIC8vaWYgKHN0YXRlID09PSBaX05VTEwpIHJldHVybiBaX01FTV9FUlJPUjtcbiAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiBhbGxvY2F0ZWRcXG5cIikpO1xuICBzdHJtLnN0YXRlID0gc3RhdGU7XG4gIHN0YXRlLndpbmRvdyA9IG51bGwvKlpfTlVMTCovO1xuICBjb25zdCByZXQgPSBpbmZsYXRlUmVzZXQyKHN0cm0sIHdpbmRvd0JpdHMpO1xuICBpZiAocmV0ICE9PSBaX09LJDEpIHtcbiAgICBzdHJtLnN0YXRlID0gbnVsbC8qWl9OVUxMKi87XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuY29uc3QgaW5mbGF0ZUluaXQgPSAoc3RybSkgPT4ge1xuXG4gIHJldHVybiBpbmZsYXRlSW5pdDIoc3RybSwgREVGX1dCSVRTKTtcbn07XG5cblxuLypcbiBSZXR1cm4gc3RhdGUgd2l0aCBsZW5ndGggYW5kIGRpc3RhbmNlIGRlY29kaW5nIHRhYmxlcyBhbmQgaW5kZXggc2l6ZXMgc2V0IHRvXG4gZml4ZWQgY29kZSBkZWNvZGluZy4gIE5vcm1hbGx5IHRoaXMgcmV0dXJucyBmaXhlZCB0YWJsZXMgZnJvbSBpbmZmaXhlZC5oLlxuIElmIEJVSUxERklYRUQgaXMgZGVmaW5lZCwgdGhlbiBpbnN0ZWFkIHRoaXMgcm91dGluZSBidWlsZHMgdGhlIHRhYmxlcyB0aGVcbiBmaXJzdCB0aW1lIGl0J3MgY2FsbGVkLCBhbmQgcmV0dXJucyB0aG9zZSB0YWJsZXMgdGhlIGZpcnN0IHRpbWUgYW5kXG4gdGhlcmVhZnRlci4gIFRoaXMgcmVkdWNlcyB0aGUgc2l6ZSBvZiB0aGUgY29kZSBieSBhYm91dCAySyBieXRlcywgaW5cbiBleGNoYW5nZSBmb3IgYSBsaXR0bGUgZXhlY3V0aW9uIHRpbWUuICBIb3dldmVyLCBCVUlMREZJWEVEIHNob3VsZCBub3QgYmVcbiB1c2VkIGZvciB0aHJlYWRlZCBhcHBsaWNhdGlvbnMsIHNpbmNlIHRoZSByZXdyaXRpbmcgb2YgdGhlIHRhYmxlcyBhbmQgdmlyZ2luXG4gbWF5IG5vdCBiZSB0aHJlYWQtc2FmZS5cbiAqL1xubGV0IHZpcmdpbiA9IHRydWU7XG5cbmxldCBsZW5maXgsIGRpc3RmaXg7IC8vIFdlIGhhdmUgbm8gcG9pbnRlcnMgaW4gSlMsIHNvIGtlZXAgdGFibGVzIHNlcGFyYXRlXG5cblxuY29uc3QgZml4ZWR0YWJsZXMgPSAoc3RhdGUpID0+IHtcblxuICAvKiBidWlsZCBmaXhlZCBodWZmbWFuIHRhYmxlcyBpZiBmaXJzdCBjYWxsIChtYXkgbm90IGJlIHRocmVhZCBzYWZlKSAqL1xuICBpZiAodmlyZ2luKSB7XG4gICAgbGVuZml4ID0gbmV3IEludDMyQXJyYXkoNTEyKTtcbiAgICBkaXN0Zml4ID0gbmV3IEludDMyQXJyYXkoMzIpO1xuXG4gICAgLyogbGl0ZXJhbC9sZW5ndGggdGFibGUgKi9cbiAgICBsZXQgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMTQ0KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuICAgIHdoaWxlIChzeW0gPCAyNTYpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA5OyB9XG4gICAgd2hpbGUgKHN5bSA8IDI4MCkgeyBzdGF0ZS5sZW5zW3N5bSsrXSA9IDc7IH1cbiAgICB3aGlsZSAoc3ltIDwgMjg4KSB7IHN0YXRlLmxlbnNbc3ltKytdID0gODsgfVxuXG4gICAgaW5mdHJlZXMoTEVOUywgIHN0YXRlLmxlbnMsIDAsIDI4OCwgbGVuZml4LCAgIDAsIHN0YXRlLndvcmssIHsgYml0czogOSB9KTtcblxuICAgIC8qIGRpc3RhbmNlIHRhYmxlICovXG4gICAgc3ltID0gMDtcbiAgICB3aGlsZSAoc3ltIDwgMzIpIHsgc3RhdGUubGVuc1tzeW0rK10gPSA1OyB9XG5cbiAgICBpbmZ0cmVlcyhESVNUUywgc3RhdGUubGVucywgMCwgMzIsICAgZGlzdGZpeCwgMCwgc3RhdGUud29yaywgeyBiaXRzOiA1IH0pO1xuXG4gICAgLyogZG8gdGhpcyBqdXN0IG9uY2UgKi9cbiAgICB2aXJnaW4gPSBmYWxzZTtcbiAgfVxuXG4gIHN0YXRlLmxlbmNvZGUgPSBsZW5maXg7XG4gIHN0YXRlLmxlbmJpdHMgPSA5O1xuICBzdGF0ZS5kaXN0Y29kZSA9IGRpc3RmaXg7XG4gIHN0YXRlLmRpc3RiaXRzID0gNTtcbn07XG5cblxuLypcbiBVcGRhdGUgdGhlIHdpbmRvdyB3aXRoIHRoZSBsYXN0IHdzaXplIChub3JtYWxseSAzMkspIGJ5dGVzIHdyaXR0ZW4gYmVmb3JlXG4gcmV0dXJuaW5nLiAgSWYgd2luZG93IGRvZXMgbm90IGV4aXN0IHlldCwgY3JlYXRlIGl0LiAgVGhpcyBpcyBvbmx5IGNhbGxlZFxuIHdoZW4gYSB3aW5kb3cgaXMgYWxyZWFkeSBpbiB1c2UsIG9yIHdoZW4gb3V0cHV0IGhhcyBiZWVuIHdyaXR0ZW4gZHVyaW5nIHRoaXNcbiBpbmZsYXRlIGNhbGwsIGJ1dCB0aGUgZW5kIG9mIHRoZSBkZWZsYXRlIHN0cmVhbSBoYXMgbm90IGJlZW4gcmVhY2hlZCB5ZXQuXG4gSXQgaXMgYWxzbyBjYWxsZWQgdG8gY3JlYXRlIGEgd2luZG93IGZvciBkaWN0aW9uYXJ5IGRhdGEgd2hlbiBhIGRpY3Rpb25hcnlcbiBpcyBsb2FkZWQuXG5cbiBQcm92aWRpbmcgb3V0cHV0IGJ1ZmZlcnMgbGFyZ2VyIHRoYW4gMzJLIHRvIGluZmxhdGUoKSBzaG91bGQgcHJvdmlkZSBhIHNwZWVkXG4gYWR2YW50YWdlLCBzaW5jZSBvbmx5IHRoZSBsYXN0IDMySyBvZiBvdXRwdXQgaXMgY29waWVkIHRvIHRoZSBzbGlkaW5nIHdpbmRvd1xuIHVwb24gcmV0dXJuIGZyb20gaW5mbGF0ZSgpLCBhbmQgc2luY2UgYWxsIGRpc3RhbmNlcyBhZnRlciB0aGUgZmlyc3QgMzJLIG9mXG4gb3V0cHV0IHdpbGwgZmFsbCBpbiB0aGUgb3V0cHV0IGRhdGEsIG1ha2luZyBtYXRjaCBjb3BpZXMgc2ltcGxlciBhbmQgZmFzdGVyLlxuIFRoZSBhZHZhbnRhZ2UgbWF5IGJlIGRlcGVuZGVudCBvbiB0aGUgc2l6ZSBvZiB0aGUgcHJvY2Vzc29yJ3MgZGF0YSBjYWNoZXMuXG4gKi9cbmNvbnN0IHVwZGF0ZXdpbmRvdyA9IChzdHJtLCBzcmMsIGVuZCwgY29weSkgPT4ge1xuXG4gIGxldCBkaXN0O1xuICBjb25zdCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgLyogaWYgaXQgaGFzbid0IGJlZW4gZG9uZSBhbHJlYWR5LCBhbGxvY2F0ZSBzcGFjZSBmb3IgdGhlIHdpbmRvdyAqL1xuICBpZiAoc3RhdGUud2luZG93ID09PSBudWxsKSB7XG4gICAgc3RhdGUud3NpemUgPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgIHN0YXRlLnduZXh0ID0gMDtcbiAgICBzdGF0ZS53aGF2ZSA9IDA7XG5cbiAgICBzdGF0ZS53aW5kb3cgPSBuZXcgVWludDhBcnJheShzdGF0ZS53c2l6ZSk7XG4gIH1cblxuICAvKiBjb3B5IHN0YXRlLT53c2l6ZSBvciBsZXNzIG91dHB1dCBieXRlcyBpbnRvIHRoZSBjaXJjdWxhciB3aW5kb3cgKi9cbiAgaWYgKGNvcHkgPj0gc3RhdGUud3NpemUpIHtcbiAgICBzdGF0ZS53aW5kb3cuc2V0KHNyYy5zdWJhcnJheShlbmQgLSBzdGF0ZS53c2l6ZSwgZW5kKSwgMCk7XG4gICAgc3RhdGUud25leHQgPSAwO1xuICAgIHN0YXRlLndoYXZlID0gc3RhdGUud3NpemU7XG4gIH1cbiAgZWxzZSB7XG4gICAgZGlzdCA9IHN0YXRlLndzaXplIC0gc3RhdGUud25leHQ7XG4gICAgaWYgKGRpc3QgPiBjb3B5KSB7XG4gICAgICBkaXN0ID0gY29weTtcbiAgICB9XG4gICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3cgKyBzdGF0ZS0+d25leHQsIGVuZCAtIGNvcHksIGRpc3QpO1xuICAgIHN0YXRlLndpbmRvdy5zZXQoc3JjLnN1YmFycmF5KGVuZCAtIGNvcHksIGVuZCAtIGNvcHkgKyBkaXN0KSwgc3RhdGUud25leHQpO1xuICAgIGNvcHkgLT0gZGlzdDtcbiAgICBpZiAoY29weSkge1xuICAgICAgLy96bWVtY3B5KHN0YXRlLT53aW5kb3csIGVuZCAtIGNvcHksIGNvcHkpO1xuICAgICAgc3RhdGUud2luZG93LnNldChzcmMuc3ViYXJyYXkoZW5kIC0gY29weSwgZW5kKSwgMCk7XG4gICAgICBzdGF0ZS53bmV4dCA9IGNvcHk7XG4gICAgICBzdGF0ZS53aGF2ZSA9IHN0YXRlLndzaXplO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHN0YXRlLnduZXh0ICs9IGRpc3Q7XG4gICAgICBpZiAoc3RhdGUud25leHQgPT09IHN0YXRlLndzaXplKSB7IHN0YXRlLnduZXh0ID0gMDsgfVxuICAgICAgaWYgKHN0YXRlLndoYXZlIDwgc3RhdGUud3NpemUpIHsgc3RhdGUud2hhdmUgKz0gZGlzdDsgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gMDtcbn07XG5cblxuY29uc3QgaW5mbGF0ZSQyID0gKHN0cm0sIGZsdXNoKSA9PiB7XG5cbiAgbGV0IHN0YXRlO1xuICBsZXQgaW5wdXQsIG91dHB1dDsgICAgICAgICAgLy8gaW5wdXQvb3V0cHV0IGJ1ZmZlcnNcbiAgbGV0IG5leHQ7ICAgICAgICAgICAgICAgICAgIC8qIG5leHQgaW5wdXQgSU5ERVggKi9cbiAgbGV0IHB1dDsgICAgICAgICAgICAgICAgICAgIC8qIG5leHQgb3V0cHV0IElOREVYICovXG4gIGxldCBoYXZlLCBsZWZ0OyAgICAgICAgICAgICAvKiBhdmFpbGFibGUgaW5wdXQgYW5kIG91dHB1dCAqL1xuICBsZXQgaG9sZDsgICAgICAgICAgICAgICAgICAgLyogYml0IGJ1ZmZlciAqL1xuICBsZXQgYml0czsgICAgICAgICAgICAgICAgICAgLyogYml0cyBpbiBiaXQgYnVmZmVyICovXG4gIGxldCBfaW4sIF9vdXQ7ICAgICAgICAgICAgICAvKiBzYXZlIHN0YXJ0aW5nIGF2YWlsYWJsZSBpbnB1dCBhbmQgb3V0cHV0ICovXG4gIGxldCBjb3B5OyAgICAgICAgICAgICAgICAgICAvKiBudW1iZXIgb2Ygc3RvcmVkIG9yIG1hdGNoIGJ5dGVzIHRvIGNvcHkgKi9cbiAgbGV0IGZyb207ICAgICAgICAgICAgICAgICAgIC8qIHdoZXJlIHRvIGNvcHkgbWF0Y2ggYnl0ZXMgZnJvbSAqL1xuICBsZXQgZnJvbV9zb3VyY2U7XG4gIGxldCBoZXJlID0gMDsgICAgICAgICAgICAgICAvKiBjdXJyZW50IGRlY29kaW5nIHRhYmxlIGVudHJ5ICovXG4gIGxldCBoZXJlX2JpdHMsIGhlcmVfb3AsIGhlcmVfdmFsOyAvLyBwYWtlZCBcImhlcmVcIiBkZW5vcm1hbGl6ZWQgKEpTIHNwZWNpZmljKVxuICAvL2xldCBsYXN0OyAgICAgICAgICAgICAgICAgICAvKiBwYXJlbnQgdGFibGUgZW50cnkgKi9cbiAgbGV0IGxhc3RfYml0cywgbGFzdF9vcCwgbGFzdF92YWw7IC8vIHBha2VkIFwibGFzdFwiIGRlbm9ybWFsaXplZCAoSlMgc3BlY2lmaWMpXG4gIGxldCBsZW47ICAgICAgICAgICAgICAgICAgICAvKiBsZW5ndGggdG8gY29weSBmb3IgcmVwZWF0cywgYml0cyB0byBkcm9wICovXG4gIGxldCByZXQ7ICAgICAgICAgICAgICAgICAgICAvKiByZXR1cm4gY29kZSAqL1xuICBjb25zdCBoYnVmID0gbmV3IFVpbnQ4QXJyYXkoNCk7ICAgIC8qIGJ1ZmZlciBmb3IgZ3ppcCBoZWFkZXIgY3JjIGNhbGN1bGF0aW9uICovXG4gIGxldCBvcHRzO1xuXG4gIGxldCBuOyAvLyB0ZW1wb3JhcnkgdmFyaWFibGUgZm9yIE5FRURfQklUU1xuXG4gIGNvbnN0IG9yZGVyID0gLyogcGVybXV0YXRpb24gb2YgY29kZSBsZW5ndGhzICovXG4gICAgbmV3IFVpbnQ4QXJyYXkoWyAxNiwgMTcsIDE4LCAwLCA4LCA3LCA5LCA2LCAxMCwgNSwgMTEsIDQsIDEyLCAzLCAxMywgMiwgMTQsIDEsIDE1IF0pO1xuXG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIHx8ICFzdHJtLm91dHB1dCB8fFxuICAgICAgKCFzdHJtLmlucHV0ICYmIHN0cm0uYXZhaWxfaW4gIT09IDApKSB7XG4gICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gIH1cblxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7IHN0YXRlLm1vZGUgPSBUWVBFRE87IH0gICAgLyogc2tpcCBjaGVjayAqL1xuXG5cbiAgLy8tLS0gTE9BRCgpIC0tLVxuICBwdXQgPSBzdHJtLm5leHRfb3V0O1xuICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgbGVmdCA9IHN0cm0uYXZhaWxfb3V0O1xuICBuZXh0ID0gc3RybS5uZXh0X2luO1xuICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gIGhhdmUgPSBzdHJtLmF2YWlsX2luO1xuICBob2xkID0gc3RhdGUuaG9sZDtcbiAgYml0cyA9IHN0YXRlLmJpdHM7XG4gIC8vLS0tXG5cbiAgX2luID0gaGF2ZTtcbiAgX291dCA9IGxlZnQ7XG4gIHJldCA9IFpfT0skMTtcblxuICBpbmZfbGVhdmU6IC8vIGdvdG8gZW11bGF0aW9uXG4gIGZvciAoOzspIHtcbiAgICBzd2l0Y2ggKHN0YXRlLm1vZGUpIHtcbiAgICAgIGNhc2UgSEVBRDpcbiAgICAgICAgaWYgKHN0YXRlLndyYXAgPT09IDApIHtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRURPO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDE2KTtcbiAgICAgICAgd2hpbGUgKGJpdHMgPCAxNikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKHN0YXRlLndyYXAgJiAyKSAmJiBob2xkID09PSAweDhiMWYpIHsgIC8qIGd6aXAgaGVhZGVyICovXG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSAwLypjcmMzMigwTCwgWl9OVUxMLCAwKSovO1xuICAgICAgICAgIC8vPT09IENSQzIoc3RhdGUuY2hlY2ssIGhvbGQpO1xuICAgICAgICAgIGhidWZbMF0gPSBob2xkICYgMHhmZjtcbiAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDIsIDApO1xuICAgICAgICAgIC8vPT09Ly9cblxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBGTEFHUztcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5mbGFncyA9IDA7ICAgICAgICAgICAvKiBleHBlY3QgemxpYiBoZWFkZXIgKi9cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmRvbmUgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIShzdGF0ZS53cmFwICYgMSkgfHwgICAvKiBjaGVjayBpZiB6bGliIGhlYWRlciBhbGxvd2VkICovXG4gICAgICAgICAgKCgoaG9sZCAmIDB4ZmYpLypCSVRTKDgpKi8gPDwgOCkgKyAoaG9sZCA+PiA4KSkgJSAzMSkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2luY29ycmVjdCBoZWFkZXIgY2hlY2snO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChob2xkICYgMHgwZikvKkJJVFMoNCkqLyAhPT0gWl9ERUZMQVRFRCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3Vua25vd24gY29tcHJlc3Npb24gbWV0aG9kJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDQpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA0O1xuICAgICAgICBiaXRzIC09IDQ7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgbGVuID0gKGhvbGQgJiAweDBmKS8qQklUUyg0KSovICsgODtcbiAgICAgICAgaWYgKHN0YXRlLndiaXRzID09PSAwKSB7XG4gICAgICAgICAgc3RhdGUud2JpdHMgPSBsZW47XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAobGVuID4gc3RhdGUud2JpdHMpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHdpbmRvdyBzaXplJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gISEhIHBha28gcGF0Y2guIEZvcmNlIHVzZSBgb3B0aW9ucy53aW5kb3dCaXRzYCBpZiBwYXNzZWQuXG4gICAgICAgIC8vIFJlcXVpcmVkIHRvIGFsd2F5cyB1c2UgbWF4IHdpbmRvdyBzaXplIGJ5IGRlZmF1bHQuXG4gICAgICAgIHN0YXRlLmRtYXggPSAxIDw8IHN0YXRlLndiaXRzO1xuICAgICAgICAvL3N0YXRlLmRtYXggPSAxIDw8IGxlbjtcblxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgemxpYiBoZWFkZXIgb2tcXG5cIikpO1xuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBob2xkICYgMHgyMDAgPyBESUNUSUQgOiBUWVBFO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIEZMQUdTOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNik7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUuZmxhZ3MgPSBob2xkO1xuICAgICAgICBpZiAoKHN0YXRlLmZsYWdzICYgMHhmZikgIT09IFpfREVGTEFURUQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCc7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweGUwMDApIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICd1bmtub3duIGhlYWRlciBmbGFncyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLnRleHQgPSAoKGhvbGQgPj4gOCkgJiAxKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBUSU1FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRJTUU6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQudGltZSA9IGhvbGQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gQ1JDNChzdGF0ZS5jaGVjaywgaG9sZClcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsyXSA9IChob2xkID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhidWZbM10gPSAoaG9sZCA+Pj4gMjQpICYgMHhmZjtcbiAgICAgICAgICBzdGF0ZS5jaGVjayA9IGNyYzMyXzEoc3RhdGUuY2hlY2ssIGhidWYsIDQsIDApO1xuICAgICAgICAgIC8vPT09XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBPUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBPUzpcbiAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICB3aGlsZSAoYml0cyA8IDE2KSB7XG4gICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgfVxuICAgICAgICAvLz09PS8vXG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC54ZmxhZ3MgPSAoaG9sZCAmIDB4ZmYpO1xuICAgICAgICAgIHN0YXRlLmhlYWQub3MgPSAoaG9sZCA+PiA4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAvLz09PSBDUkMyKHN0YXRlLmNoZWNrLCBob2xkKTtcbiAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgaGJ1ZlsxXSA9IChob2xkID4+PiA4KSAmIDB4ZmY7XG4gICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBoYnVmLCAyLCAwKTtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgIGJpdHMgPSAwO1xuICAgICAgICAvLz09PS8vXG4gICAgICAgIHN0YXRlLm1vZGUgPSBFWExFTjtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBFWExFTjpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwNDAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggPSBob2xkO1xuICAgICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhX2xlbiA9IGhvbGQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgLy89PT0gQ1JDMihzdGF0ZS5jaGVjaywgaG9sZCk7XG4gICAgICAgICAgICBoYnVmWzBdID0gaG9sZCAmIDB4ZmY7XG4gICAgICAgICAgICBoYnVmWzFdID0gKGhvbGQgPj4+IDgpICYgMHhmZjtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaGJ1ZiwgMiwgMCk7XG4gICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHN0YXRlLmhlYWQpIHtcbiAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhID0gbnVsbC8qWl9OVUxMKi87XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEVYVFJBO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIEVYVFJBOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA0MDApIHtcbiAgICAgICAgICBjb3B5ID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICAgIGlmIChjb3B5ID4gaGF2ZSkgeyBjb3B5ID0gaGF2ZTsgfVxuICAgICAgICAgIGlmIChjb3B5KSB7XG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgICAgICBsZW4gPSBzdGF0ZS5oZWFkLmV4dHJhX2xlbiAtIHN0YXRlLmxlbmd0aDtcbiAgICAgICAgICAgICAgaWYgKCFzdGF0ZS5oZWFkLmV4dHJhKSB7XG4gICAgICAgICAgICAgICAgLy8gVXNlIHVudHlwZWQgYXJyYXkgZm9yIG1vcmUgY29udmVuaWVudCBwcm9jZXNzaW5nIGxhdGVyXG4gICAgICAgICAgICAgICAgc3RhdGUuaGVhZC5leHRyYSA9IG5ldyBVaW50OEFycmF5KHN0YXRlLmhlYWQuZXh0cmFfbGVuKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBzdGF0ZS5oZWFkLmV4dHJhLnNldChcbiAgICAgICAgICAgICAgICBpbnB1dC5zdWJhcnJheShcbiAgICAgICAgICAgICAgICAgIG5leHQsXG4gICAgICAgICAgICAgICAgICAvLyBleHRyYSBmaWVsZCBpcyBsaW1pdGVkIHRvIDY1NTM2IGJ5dGVzXG4gICAgICAgICAgICAgICAgICAvLyAtIG5vIG5lZWQgZm9yIGFkZGl0aW9uYWwgc2l6ZSBjaGVja1xuICAgICAgICAgICAgICAgICAgbmV4dCArIGNvcHlcbiAgICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICAgIC8qbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuID8gc3RhdGUuaGVhZC5leHRyYV9tYXggOiBjb3B5LCovXG4gICAgICAgICAgICAgICAgbGVuXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIC8vem1lbWNweShzdGF0ZS5oZWFkLmV4dHJhICsgbGVuLCBuZXh0LFxuICAgICAgICAgICAgICAvLyAgICAgICAgbGVuICsgY29weSA+IHN0YXRlLmhlYWQuZXh0cmFfbWF4ID9cbiAgICAgICAgICAgICAgLy8gICAgICAgIHN0YXRlLmhlYWQuZXh0cmFfbWF4IC0gbGVuIDogY29weSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTkFNRTtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBOQU1FOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDA4MDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICAvLyBUT0RPOiAyIG9yIDEgYnl0ZXM/XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLm5hbWVfbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQubmFtZSArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcblxuICAgICAgICAgIGlmIChzdGF0ZS5mbGFncyAmIDB4MDIwMCkge1xuICAgICAgICAgICAgc3RhdGUuY2hlY2sgPSBjcmMzMl8xKHN0YXRlLmNoZWNrLCBpbnB1dCwgY29weSwgbmV4dCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGhhdmUgLT0gY29weTtcbiAgICAgICAgICBuZXh0ICs9IGNvcHk7XG4gICAgICAgICAgaWYgKGxlbikgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5uYW1lID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICBzdGF0ZS5sZW5ndGggPSAwO1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09NTUVOVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT01NRU5UOlxuICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDEwMDApIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBjb3B5ID0gMDtcbiAgICAgICAgICBkbyB7XG4gICAgICAgICAgICBsZW4gPSBpbnB1dFtuZXh0ICsgY29weSsrXTtcbiAgICAgICAgICAgIC8qIHVzZSBjb25zdGFudCBsaW1pdCBiZWNhdXNlIGluIGpzIHdlIHNob3VsZCBub3QgcHJlYWxsb2NhdGUgbWVtb3J5ICovXG4gICAgICAgICAgICBpZiAoc3RhdGUuaGVhZCAmJiBsZW4gJiZcbiAgICAgICAgICAgICAgICAoc3RhdGUubGVuZ3RoIDwgNjU1MzYgLypzdGF0ZS5oZWFkLmNvbW1fbWF4Ki8pKSB7XG4gICAgICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGxlbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSB3aGlsZSAobGVuICYmIGNvcHkgPCBoYXZlKTtcbiAgICAgICAgICBpZiAoc3RhdGUuZmxhZ3MgJiAweDAyMDApIHtcbiAgICAgICAgICAgIHN0YXRlLmNoZWNrID0gY3JjMzJfMShzdGF0ZS5jaGVjaywgaW5wdXQsIGNvcHksIG5leHQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGlmIChsZW4pIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoc3RhdGUuaGVhZCkge1xuICAgICAgICAgIHN0YXRlLmhlYWQuY29tbWVudCA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgc3RhdGUubW9kZSA9IEhDUkM7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgSENSQzpcbiAgICAgICAgaWYgKHN0YXRlLmZsYWdzICYgMHgwMjAwKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoMTYpOyAqL1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgMTYpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBpZiAoaG9sZCAhPT0gKHN0YXRlLmNoZWNrICYgMHhmZmZmKSkge1xuICAgICAgICAgICAgc3RybS5tc2cgPSAnaGVhZGVyIGNyYyBtaXNtYXRjaCc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICB9XG4gICAgICAgIGlmIChzdGF0ZS5oZWFkKSB7XG4gICAgICAgICAgc3RhdGUuaGVhZC5oY3JjID0gKChzdGF0ZS5mbGFncyA+PiA5KSAmIDEpO1xuICAgICAgICAgIHN0YXRlLmhlYWQuZG9uZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID0gMDtcbiAgICAgICAgc3RhdGUubW9kZSA9IFRZUEU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBESUNUSUQ6XG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSB6c3dhcDMyKGhvbGQpO1xuICAgICAgICAvLz09PSBJTklUQklUUygpO1xuICAgICAgICBob2xkID0gMDtcbiAgICAgICAgYml0cyA9IDA7XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubW9kZSA9IERJQ1Q7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgRElDVDpcbiAgICAgICAgaWYgKHN0YXRlLmhhdmVkaWN0ID09PSAwKSB7XG4gICAgICAgICAgLy8tLS0gUkVTVE9SRSgpIC0tLVxuICAgICAgICAgIHN0cm0ubmV4dF9vdXQgPSBwdXQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICAgICAgICAgIHN0cm0ubmV4dF9pbiA9IG5leHQ7XG4gICAgICAgICAgc3RybS5hdmFpbF9pbiA9IGhhdmU7XG4gICAgICAgICAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gICAgICAgICAgc3RhdGUuYml0cyA9IGJpdHM7XG4gICAgICAgICAgLy8tLS1cbiAgICAgICAgICByZXR1cm4gWl9ORUVEX0RJQ1QkMTtcbiAgICAgICAgfVxuICAgICAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAxLyphZGxlcjMyKDBMLCBaX05VTEwsIDApKi87XG4gICAgICAgIHN0YXRlLm1vZGUgPSBUWVBFO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIFRZUEU6XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9CTE9DSyB8fCBmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBUWVBFRE86XG4gICAgICAgIGlmIChzdGF0ZS5sYXN0KSB7XG4gICAgICAgICAgLy8tLS0gQllURUJJVFMoKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBiaXRzICYgNztcbiAgICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQ0hFQ0s7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0gTkVFREJJVFMoMyk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMykge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5sYXN0ID0gKGhvbGQgJiAweDAxKS8qQklUUygxKSovO1xuICAgICAgICAvLy0tLSBEUk9QQklUUygxKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gMTtcbiAgICAgICAgYml0cyAtPSAxO1xuICAgICAgICAvLy0tLS8vXG5cbiAgICAgICAgc3dpdGNoICgoaG9sZCAmIDB4MDMpLypCSVRTKDIpKi8pIHtcbiAgICAgICAgICBjYXNlIDA6ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvKiBzdG9yZWQgYmxvY2sgKi9cbiAgICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgIHN0b3JlZCBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFNUT1JFRDtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMTogICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGZpeGVkIGJsb2NrICovXG4gICAgICAgICAgICBmaXhlZHRhYmxlcyhzdGF0ZSk7XG4gICAgICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICBmaXhlZCBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IExFTl87ICAgICAgICAgICAgIC8qIGRlY29kZSBjb2RlcyAqL1xuICAgICAgICAgICAgaWYgKGZsdXNoID09PSBaX1RSRUVTKSB7XG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKDIpIC0tLS8vXG4gICAgICAgICAgICAgIGhvbGQgPj4+PSAyO1xuICAgICAgICAgICAgICBiaXRzIC09IDI7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgYnJlYWsgaW5mX2xlYXZlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAyOiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLyogZHluYW1pYyBibG9jayAqL1xuICAgICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgZHluYW1pYyBjb2RlcyBibG9jayVzXFxuXCIsXG4gICAgICAgICAgICAvLyAgICAgICAgc3RhdGUubGFzdCA/IFwiIChsYXN0KVwiIDogXCJcIikpO1xuICAgICAgICAgICAgc3RhdGUubW9kZSA9IFRBQkxFO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBibG9jayB0eXBlJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoMikgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDI7XG4gICAgICAgIGJpdHMgLT0gMjtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgU1RPUkVEOlxuICAgICAgICAvLy0tLSBCWVRFQklUUygpIC0tLS8vIC8qIGdvIHRvIGJ5dGUgYm91bmRhcnkgKi9cbiAgICAgICAgaG9sZCA+Pj49IGJpdHMgJiA3O1xuICAgICAgICBiaXRzIC09IGJpdHMgJiA3O1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTsgKi9cbiAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgIH1cbiAgICAgICAgLy89PT0vL1xuICAgICAgICBpZiAoKGhvbGQgJiAweGZmZmYpICE9PSAoKGhvbGQgPj4+IDE2KSBeIDB4ZmZmZikpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIHN0b3JlZCBibG9jayBsZW5ndGhzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmxlbmd0aCA9IGhvbGQgJiAweGZmZmY7XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgc3RvcmVkIGxlbmd0aCAldVxcblwiLFxuICAgICAgICAvLyAgICAgICAgc3RhdGUubGVuZ3RoKSk7XG4gICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgIGhvbGQgPSAwO1xuICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgLy89PT0vL1xuICAgICAgICBzdGF0ZS5tb2RlID0gQ09QWV87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT1BZXzpcbiAgICAgICAgc3RhdGUubW9kZSA9IENPUFk7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgQ09QWTpcbiAgICAgICAgY29weSA9IHN0YXRlLmxlbmd0aDtcbiAgICAgICAgaWYgKGNvcHkpIHtcbiAgICAgICAgICBpZiAoY29weSA+IGhhdmUpIHsgY29weSA9IGhhdmU7IH1cbiAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbiAgICAgICAgICBpZiAoY29weSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAvLy0tLSB6bWVtY3B5KHB1dCwgbmV4dCwgY29weSk7IC0tLVxuICAgICAgICAgIG91dHB1dC5zZXQoaW5wdXQuc3ViYXJyYXkobmV4dCwgbmV4dCArIGNvcHkpLCBwdXQpO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBoYXZlIC09IGNvcHk7XG4gICAgICAgICAgbmV4dCArPSBjb3B5O1xuICAgICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgICBwdXQgKz0gY29weTtcbiAgICAgICAgICBzdGF0ZS5sZW5ndGggLT0gY29weTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHN0b3JlZCBlbmRcXG5cIikpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIFRBQkxFOlxuICAgICAgICAvLz09PSBORUVEQklUUygxNCk7ICovXG4gICAgICAgIHdoaWxlIChiaXRzIDwgMTQpIHtcbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICB9XG4gICAgICAgIC8vPT09Ly9cbiAgICAgICAgc3RhdGUubmxlbiA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDI1NztcbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoNSkgLS0tLy9cbiAgICAgICAgaG9sZCA+Pj49IDU7XG4gICAgICAgIGJpdHMgLT0gNTtcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5uZGlzdCA9IChob2xkICYgMHgxZikvKkJJVFMoNSkqLyArIDE7XG4gICAgICAgIC8vLS0tIERST1BCSVRTKDUpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSA1O1xuICAgICAgICBiaXRzIC09IDU7XG4gICAgICAgIC8vLS0tLy9cbiAgICAgICAgc3RhdGUubmNvZGUgPSAoaG9sZCAmIDB4MGYpLypCSVRTKDQpKi8gKyA0O1xuICAgICAgICAvLy0tLSBEUk9QQklUUyg0KSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gNDtcbiAgICAgICAgYml0cyAtPSA0O1xuICAgICAgICAvLy0tLS8vXG4vLyNpZm5kZWYgUEtaSVBfQlVHX1dPUktBUk9VTkRcbiAgICAgICAgaWYgKHN0YXRlLm5sZW4gPiAyODYgfHwgc3RhdGUubmRpc3QgPiAzMCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ3RvbyBtYW55IGxlbmd0aCBvciBkaXN0YW5jZSBzeW1ib2xzJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldigoc3RkZXJyLCBcImluZmxhdGU6ICAgICAgIHRhYmxlIHNpemVzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5MRU5TO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkxFTlM6XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgc3RhdGUubmNvZGUpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMpIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gKGhvbGQgJiAweDA3KTsvL0JJVFMoMyk7XG4gICAgICAgICAgLy8tLS0gRFJPUEJJVFMoMykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICBiaXRzIC09IDM7XG4gICAgICAgICAgLy8tLS0vL1xuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChzdGF0ZS5oYXZlIDwgMTkpIHtcbiAgICAgICAgICBzdGF0ZS5sZW5zW29yZGVyW3N0YXRlLmhhdmUrK11dID0gMDtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvL3N0YXRlLm5leHQgPSBzdGF0ZS5jb2RlcztcbiAgICAgICAgLy9zdGF0ZS5sZW5jb2RlID0gc3RhdGUubmV4dDtcbiAgICAgICAgLy8gU3dpdGNoIHRvIHVzZSBkeW5hbWljIHRhYmxlXG4gICAgICAgIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5sZW5keW47XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSA3O1xuXG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmxlbmJpdHMgfTtcbiAgICAgICAgcmV0ID0gaW5mdHJlZXMoQ09ERVMsIHN0YXRlLmxlbnMsIDAsIDE5LCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgc3RhdGUubGVuYml0cyA9IG9wdHMuYml0cztcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIGxlbmd0aHMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgY29kZSBsZW5ndGhzIG9rXFxuXCIpKTtcbiAgICAgICAgc3RhdGUuaGF2ZSA9IDA7XG4gICAgICAgIHN0YXRlLm1vZGUgPSBDT0RFTEVOUztcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBDT0RFTEVOUzpcbiAgICAgICAgd2hpbGUgKHN0YXRlLmhhdmUgPCBzdGF0ZS5ubGVuICsgc3RhdGUubmRpc3QpIHtcbiAgICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgICBoZXJlID0gc3RhdGUubGVuY29kZVtob2xkICYgKCgxIDw8IHN0YXRlLmxlbmJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChoZXJlX3ZhbCA8IDE2KSB7XG4gICAgICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICBzdGF0ZS5sZW5zW3N0YXRlLmhhdmUrK10gPSBoZXJlX3ZhbDtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoaGVyZV92YWwgPT09IDE2KSB7XG4gICAgICAgICAgICAgIC8vPT09IE5FRURCSVRTKGhlcmUuYml0cyArIDIpO1xuICAgICAgICAgICAgICBuID0gaGVyZV9iaXRzICsgMjtcbiAgICAgICAgICAgICAgd2hpbGUgKGJpdHMgPCBuKSB7XG4gICAgICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgICAgIC8vLS0tIERST1BCSVRTKGhlcmUuYml0cykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgYml0cyAtPSBoZXJlX2JpdHM7XG4gICAgICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgPT09IDApIHtcbiAgICAgICAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGJpdCBsZW5ndGggcmVwZWF0JztcbiAgICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGxlbiA9IHN0YXRlLmxlbnNbc3RhdGUuaGF2ZSAtIDFdO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwMyk7Ly9CSVRTKDIpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygyKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMjtcbiAgICAgICAgICAgICAgYml0cyAtPSAyO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmIChoZXJlX3ZhbCA9PT0gMTcpIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgMyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyAzO1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMyArIChob2xkICYgMHgwNyk7Ly9CSVRTKDMpO1xuICAgICAgICAgICAgICAvLy0tLSBEUk9QQklUUygzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gMztcbiAgICAgICAgICAgICAgYml0cyAtPSAzO1xuICAgICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgLy89PT0gTkVFREJJVFMoaGVyZS5iaXRzICsgNyk7XG4gICAgICAgICAgICAgIG4gPSBoZXJlX2JpdHMgKyA3O1xuICAgICAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgICBsZW4gPSAwO1xuICAgICAgICAgICAgICBjb3B5ID0gMTEgKyAoaG9sZCAmIDB4N2YpOy8vQklUUyg3KTtcbiAgICAgICAgICAgICAgLy8tLS0gRFJPUEJJVFMoNykgLS0tLy9cbiAgICAgICAgICAgICAgaG9sZCA+Pj49IDc7XG4gICAgICAgICAgICAgIGJpdHMgLT0gNztcbiAgICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHN0YXRlLmhhdmUgKyBjb3B5ID4gc3RhdGUubmxlbiArIHN0YXRlLm5kaXN0KSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgYml0IGxlbmd0aCByZXBlYXQnO1xuICAgICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHdoaWxlIChjb3B5LS0pIHtcbiAgICAgICAgICAgICAgc3RhdGUubGVuc1tzdGF0ZS5oYXZlKytdID0gbGVuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGhhbmRsZSBlcnJvciBicmVha3MgaW4gd2hpbGUgKi9cbiAgICAgICAgaWYgKHN0YXRlLm1vZGUgPT09IEJBRCkgeyBicmVhazsgfVxuXG4gICAgICAgIC8qIGNoZWNrIGZvciBlbmQtb2YtYmxvY2sgY29kZSAoYmV0dGVyIGhhdmUgb25lKSAqL1xuICAgICAgICBpZiAoc3RhdGUubGVuc1syNTZdID09PSAwKSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBjb2RlIC0tIG1pc3NpbmcgZW5kLW9mLWJsb2NrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG5cbiAgICAgICAgLyogYnVpbGQgY29kZSB0YWJsZXMgLS0gbm90ZTogZG8gbm90IGNoYW5nZSB0aGUgbGVuYml0cyBvciBkaXN0Yml0c1xuICAgICAgICAgICB2YWx1ZXMgaGVyZSAoOSBhbmQgNikgd2l0aG91dCByZWFkaW5nIHRoZSBjb21tZW50cyBpbiBpbmZ0cmVlcy5oXG4gICAgICAgICAgIGNvbmNlcm5pbmcgdGhlIEVOT1VHSCBjb25zdGFudHMsIHdoaWNoIGRlcGVuZCBvbiB0aG9zZSB2YWx1ZXMgKi9cbiAgICAgICAgc3RhdGUubGVuYml0cyA9IDk7XG5cbiAgICAgICAgb3B0cyA9IHsgYml0czogc3RhdGUubGVuYml0cyB9O1xuICAgICAgICByZXQgPSBpbmZ0cmVlcyhMRU5TLCBzdGF0ZS5sZW5zLCAwLCBzdGF0ZS5ubGVuLCBzdGF0ZS5sZW5jb2RlLCAwLCBzdGF0ZS53b3JrLCBvcHRzKTtcbiAgICAgICAgLy8gV2UgaGF2ZSBzZXBhcmF0ZSB0YWJsZXMgJiBubyBwb2ludGVycy4gMiBjb21tZW50ZWQgbGluZXMgYmVsb3cgbm90IG5lZWRlZC5cbiAgICAgICAgLy8gc3RhdGUubmV4dF9pbmRleCA9IG9wdHMudGFibGVfaW5kZXg7XG4gICAgICAgIHN0YXRlLmxlbmJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmxlbmNvZGUgPSBzdGF0ZS5uZXh0O1xuXG4gICAgICAgIGlmIChyZXQpIHtcbiAgICAgICAgICBzdHJtLm1zZyA9ICdpbnZhbGlkIGxpdGVyYWwvbGVuZ3RocyBzZXQnO1xuICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICBzdGF0ZS5kaXN0Yml0cyA9IDY7XG4gICAgICAgIC8vc3RhdGUuZGlzdGNvZGUuY29weShzdGF0ZS5jb2Rlcyk7XG4gICAgICAgIC8vIFN3aXRjaCB0byB1c2UgZHluYW1pYyB0YWJsZVxuICAgICAgICBzdGF0ZS5kaXN0Y29kZSA9IHN0YXRlLmRpc3RkeW47XG4gICAgICAgIG9wdHMgPSB7IGJpdHM6IHN0YXRlLmRpc3RiaXRzIH07XG4gICAgICAgIHJldCA9IGluZnRyZWVzKERJU1RTLCBzdGF0ZS5sZW5zLCBzdGF0ZS5ubGVuLCBzdGF0ZS5uZGlzdCwgc3RhdGUuZGlzdGNvZGUsIDAsIHN0YXRlLndvcmssIG9wdHMpO1xuICAgICAgICAvLyBXZSBoYXZlIHNlcGFyYXRlIHRhYmxlcyAmIG5vIHBvaW50ZXJzLiAyIGNvbW1lbnRlZCBsaW5lcyBiZWxvdyBub3QgbmVlZGVkLlxuICAgICAgICAvLyBzdGF0ZS5uZXh0X2luZGV4ID0gb3B0cy50YWJsZV9pbmRleDtcbiAgICAgICAgc3RhdGUuZGlzdGJpdHMgPSBvcHRzLmJpdHM7XG4gICAgICAgIC8vIHN0YXRlLmRpc3Rjb2RlID0gc3RhdGUubmV4dDtcblxuICAgICAgICBpZiAocmV0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZXMgc2V0JztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIC8vVHJhY2V2KChzdGRlcnIsICdpbmZsYXRlOiAgICAgICBjb2RlcyBva1xcbicpKTtcbiAgICAgICAgc3RhdGUubW9kZSA9IExFTl87XG4gICAgICAgIGlmIChmbHVzaCA9PT0gWl9UUkVFUykgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBMRU5fOlxuICAgICAgICBzdGF0ZS5tb2RlID0gTEVOO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTjpcbiAgICAgICAgaWYgKGhhdmUgPj0gNiAmJiBsZWZ0ID49IDI1OCkge1xuICAgICAgICAgIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gcHV0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfb3V0ID0gbGVmdDtcbiAgICAgICAgICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICAgICAgICAgIHN0cm0uYXZhaWxfaW4gPSBoYXZlO1xuICAgICAgICAgIHN0YXRlLmhvbGQgPSBob2xkO1xuICAgICAgICAgIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAgICAgICAgIC8vLS0tXG4gICAgICAgICAgaW5mZmFzdChzdHJtLCBfb3V0KTtcbiAgICAgICAgICAvLy0tLSBMT0FEKCkgLS0tXG4gICAgICAgICAgcHV0ID0gc3RybS5uZXh0X291dDtcbiAgICAgICAgICBvdXRwdXQgPSBzdHJtLm91dHB1dDtcbiAgICAgICAgICBsZWZ0ID0gc3RybS5hdmFpbF9vdXQ7XG4gICAgICAgICAgbmV4dCA9IHN0cm0ubmV4dF9pbjtcbiAgICAgICAgICBpbnB1dCA9IHN0cm0uaW5wdXQ7XG4gICAgICAgICAgaGF2ZSA9IHN0cm0uYXZhaWxfaW47XG4gICAgICAgICAgaG9sZCA9IHN0YXRlLmhvbGQ7XG4gICAgICAgICAgYml0cyA9IHN0YXRlLmJpdHM7XG4gICAgICAgICAgLy8tLS1cblxuICAgICAgICAgIGlmIChzdGF0ZS5tb2RlID09PSBUWVBFKSB7XG4gICAgICAgICAgICBzdGF0ZS5iYWNrID0gLTE7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmJhY2sgPSAwO1xuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbaG9sZCAmICgoMSA8PCBzdGF0ZS5sZW5iaXRzKSAtIDEpXTsgIC8qQklUUyhzdGF0ZS5sZW5iaXRzKSovXG4gICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgaGVyZV9vcCA9IChoZXJlID4+PiAxNikgJiAweGZmO1xuICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgIGlmIChoZXJlX2JpdHMgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmJiAoaGVyZV9vcCAmIDB4ZjApID09PSAwKSB7XG4gICAgICAgICAgbGFzdF9iaXRzID0gaGVyZV9iaXRzO1xuICAgICAgICAgIGxhc3Rfb3AgPSBoZXJlX29wO1xuICAgICAgICAgIGxhc3RfdmFsID0gaGVyZV92YWw7XG4gICAgICAgICAgZm9yICg7Oykge1xuICAgICAgICAgICAgaGVyZSA9IHN0YXRlLmxlbmNvZGVbbGFzdF92YWwgK1xuICAgICAgICAgICAgICAgICAgICAoKGhvbGQgJiAoKDEgPDwgKGxhc3RfYml0cyArIGxhc3Rfb3ApKSAtIDEpKS8qQklUUyhsYXN0LmJpdHMgKyBsYXN0Lm9wKSovID4+IGxhc3RfYml0cyldO1xuICAgICAgICAgICAgaGVyZV9iaXRzID0gaGVyZSA+Pj4gMjQ7XG4gICAgICAgICAgICBoZXJlX29wID0gKGhlcmUgPj4+IDE2KSAmIDB4ZmY7XG4gICAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICAgIGlmICgobGFzdF9iaXRzICsgaGVyZV9iaXRzKSA8PSBiaXRzKSB7IGJyZWFrOyB9XG4gICAgICAgICAgICAvLy0tLSBQVUxMQllURSgpIC0tLS8vXG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgICAgLy8tLS0vL1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhsYXN0LmJpdHMpIC0tLS8vXG4gICAgICAgICAgaG9sZCA+Pj49IGxhc3RfYml0cztcbiAgICAgICAgICBiaXRzIC09IGxhc3RfYml0cztcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBsYXN0X2JpdHM7XG4gICAgICAgIH1cbiAgICAgICAgLy8tLS0gRFJPUEJJVFMoaGVyZS5iaXRzKSAtLS0vL1xuICAgICAgICBob2xkID4+Pj0gaGVyZV9iaXRzO1xuICAgICAgICBiaXRzIC09IGhlcmVfYml0cztcbiAgICAgICAgLy8tLS0vL1xuICAgICAgICBzdGF0ZS5iYWNrICs9IGhlcmVfYml0cztcbiAgICAgICAgc3RhdGUubGVuZ3RoID0gaGVyZV92YWw7XG4gICAgICAgIGlmIChoZXJlX29wID09PSAwKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIGhlcmUudmFsID49IDB4MjAgJiYgaGVyZS52YWwgPCAweDdmID9cbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgJyVjJ1xcblwiIDpcbiAgICAgICAgICAvLyAgICAgICAgXCJpbmZsYXRlOiAgICAgICAgIGxpdGVyYWwgMHglMDJ4XFxuXCIsIGhlcmUudmFsKSk7XG4gICAgICAgICAgc3RhdGUubW9kZSA9IExJVDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDMyKSB7XG4gICAgICAgICAgLy9UcmFjZXZ2KChzdGRlcnIsIFwiaW5mbGF0ZTogICAgICAgICBlbmQgb2YgYmxvY2tcXG5cIikpO1xuICAgICAgICAgIHN0YXRlLmJhY2sgPSAtMTtcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gVFlQRTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBsaXRlcmFsL2xlbmd0aCBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLmV4dHJhID0gaGVyZV9vcCAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gTEVORVhUO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIExFTkVYVDpcbiAgICAgICAgaWYgKHN0YXRlLmV4dHJhKSB7XG4gICAgICAgICAgLy89PT0gTkVFREJJVFMoc3RhdGUuZXh0cmEpO1xuICAgICAgICAgIG4gPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IG4pIHtcbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09Ly9cbiAgICAgICAgICBzdGF0ZS5sZW5ndGggKz0gaG9sZCAmICgoMSA8PCBzdGF0ZS5leHRyYSkgLSAxKS8qQklUUyhzdGF0ZS5leHRyYSkqLztcbiAgICAgICAgICAvLy0tLSBEUk9QQklUUyhzdGF0ZS5leHRyYSkgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gc3RhdGUuZXh0cmE7XG4gICAgICAgICAgYml0cyAtPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgc3RhdGUuYmFjayArPSBzdGF0ZS5leHRyYTtcbiAgICAgICAgfVxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGxlbmd0aCAldVxcblwiLCBzdGF0ZS5sZW5ndGgpKTtcbiAgICAgICAgc3RhdGUud2FzID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNUOlxuICAgICAgICBmb3IgKDs7KSB7XG4gICAgICAgICAgaGVyZSA9IHN0YXRlLmRpc3Rjb2RlW2hvbGQgJiAoKDEgPDwgc3RhdGUuZGlzdGJpdHMpIC0gMSldOy8qQklUUyhzdGF0ZS5kaXN0Yml0cykqL1xuICAgICAgICAgIGhlcmVfYml0cyA9IGhlcmUgPj4+IDI0O1xuICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICBoZXJlX3ZhbCA9IGhlcmUgJiAweGZmZmY7XG5cbiAgICAgICAgICBpZiAoKGhlcmVfYml0cykgPD0gYml0cykgeyBicmVhazsgfVxuICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgfVxuICAgICAgICBpZiAoKGhlcmVfb3AgJiAweGYwKSA9PT0gMCkge1xuICAgICAgICAgIGxhc3RfYml0cyA9IGhlcmVfYml0cztcbiAgICAgICAgICBsYXN0X29wID0gaGVyZV9vcDtcbiAgICAgICAgICBsYXN0X3ZhbCA9IGhlcmVfdmFsO1xuICAgICAgICAgIGZvciAoOzspIHtcbiAgICAgICAgICAgIGhlcmUgPSBzdGF0ZS5kaXN0Y29kZVtsYXN0X3ZhbCArXG4gICAgICAgICAgICAgICAgICAgICgoaG9sZCAmICgoMSA8PCAobGFzdF9iaXRzICsgbGFzdF9vcCkpIC0gMSkpLypCSVRTKGxhc3QuYml0cyArIGxhc3Qub3ApKi8gPj4gbGFzdF9iaXRzKV07XG4gICAgICAgICAgICBoZXJlX2JpdHMgPSBoZXJlID4+PiAyNDtcbiAgICAgICAgICAgIGhlcmVfb3AgPSAoaGVyZSA+Pj4gMTYpICYgMHhmZjtcbiAgICAgICAgICAgIGhlcmVfdmFsID0gaGVyZSAmIDB4ZmZmZjtcblxuICAgICAgICAgICAgaWYgKChsYXN0X2JpdHMgKyBoZXJlX2JpdHMpIDw9IGJpdHMpIHsgYnJlYWs7IH1cbiAgICAgICAgICAgIC8vLS0tIFBVTExCWVRFKCkgLS0tLy9cbiAgICAgICAgICAgIGlmIChoYXZlID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICAgICAgaGF2ZS0tO1xuICAgICAgICAgICAgaG9sZCArPSBpbnB1dFtuZXh0KytdIDw8IGJpdHM7XG4gICAgICAgICAgICBiaXRzICs9IDg7XG4gICAgICAgICAgICAvLy0tLS8vXG4gICAgICAgICAgfVxuICAgICAgICAgIC8vLS0tIERST1BCSVRTKGxhc3QuYml0cykgLS0tLy9cbiAgICAgICAgICBob2xkID4+Pj0gbGFzdF9iaXRzO1xuICAgICAgICAgIGJpdHMgLT0gbGFzdF9iaXRzO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IGxhc3RfYml0cztcbiAgICAgICAgfVxuICAgICAgICAvLy0tLSBEUk9QQklUUyhoZXJlLmJpdHMpIC0tLS8vXG4gICAgICAgIGhvbGQgPj4+PSBoZXJlX2JpdHM7XG4gICAgICAgIGJpdHMgLT0gaGVyZV9iaXRzO1xuICAgICAgICAvLy0tLS8vXG4gICAgICAgIHN0YXRlLmJhY2sgKz0gaGVyZV9iaXRzO1xuICAgICAgICBpZiAoaGVyZV9vcCAmIDY0KSB7XG4gICAgICAgICAgc3RybS5tc2cgPSAnaW52YWxpZCBkaXN0YW5jZSBjb2RlJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm9mZnNldCA9IGhlcmVfdmFsO1xuICAgICAgICBzdGF0ZS5leHRyYSA9IChoZXJlX29wKSAmIDE1O1xuICAgICAgICBzdGF0ZS5tb2RlID0gRElTVEVYVDtcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgY2FzZSBESVNURVhUOlxuICAgICAgICBpZiAoc3RhdGUuZXh0cmEpIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUyhzdGF0ZS5leHRyYSk7XG4gICAgICAgICAgbiA9IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIHdoaWxlIChiaXRzIDwgbikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICBob2xkICs9IGlucHV0W25leHQrK10gPDwgYml0cztcbiAgICAgICAgICAgIGJpdHMgKz0gODtcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIHN0YXRlLm9mZnNldCArPSBob2xkICYgKCgxIDw8IHN0YXRlLmV4dHJhKSAtIDEpLypCSVRTKHN0YXRlLmV4dHJhKSovO1xuICAgICAgICAgIC8vLS0tIERST1BCSVRTKHN0YXRlLmV4dHJhKSAtLS0vL1xuICAgICAgICAgIGhvbGQgPj4+PSBzdGF0ZS5leHRyYTtcbiAgICAgICAgICBiaXRzIC09IHN0YXRlLmV4dHJhO1xuICAgICAgICAgIC8vLS0tLy9cbiAgICAgICAgICBzdGF0ZS5iYWNrICs9IHN0YXRlLmV4dHJhO1xuICAgICAgICB9XG4vLyNpZmRlZiBJTkZMQVRFX1NUUklDVFxuICAgICAgICBpZiAoc3RhdGUub2Zmc2V0ID4gc3RhdGUuZG1heCkge1xuICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4vLyNlbmRpZlxuICAgICAgICAvL1RyYWNldnYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgICAgICAgIGRpc3RhbmNlICV1XFxuXCIsIHN0YXRlLm9mZnNldCkpO1xuICAgICAgICBzdGF0ZS5tb2RlID0gTUFUQ0g7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTUFUQ0g6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBjb3B5ID0gX291dCAtIGxlZnQ7XG4gICAgICAgIGlmIChzdGF0ZS5vZmZzZXQgPiBjb3B5KSB7ICAgICAgICAgLyogY29weSBmcm9tIHdpbmRvdyAqL1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5vZmZzZXQgLSBjb3B5O1xuICAgICAgICAgIGlmIChjb3B5ID4gc3RhdGUud2hhdmUpIHtcbiAgICAgICAgICAgIGlmIChzdGF0ZS5zYW5lKSB7XG4gICAgICAgICAgICAgIHN0cm0ubXNnID0gJ2ludmFsaWQgZGlzdGFuY2UgdG9vIGZhciBiYWNrJztcbiAgICAgICAgICAgICAgc3RhdGUubW9kZSA9IEJBRDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4vLyAoISkgVGhpcyBibG9jayBpcyBkaXNhYmxlZCBpbiB6bGliIGRlZmF1bHRzLFxuLy8gZG9uJ3QgZW5hYmxlIGl0IGZvciBiaW5hcnkgY29tcGF0aWJpbGl0eVxuLy8jaWZkZWYgSU5GTEFURV9BTExPV19JTlZBTElEX0RJU1RBTkNFX1RPT0ZBUl9BUlJSXG4vLyAgICAgICAgICBUcmFjZSgoc3RkZXJyLCBcImluZmxhdGUuYyB0b28gZmFyXFxuXCIpKTtcbi8vICAgICAgICAgIGNvcHkgLT0gc3RhdGUud2hhdmU7XG4vLyAgICAgICAgICBpZiAoY29weSA+IHN0YXRlLmxlbmd0aCkgeyBjb3B5ID0gc3RhdGUubGVuZ3RoOyB9XG4vLyAgICAgICAgICBpZiAoY29weSA+IGxlZnQpIHsgY29weSA9IGxlZnQ7IH1cbi8vICAgICAgICAgIGxlZnQgLT0gY29weTtcbi8vICAgICAgICAgIHN0YXRlLmxlbmd0aCAtPSBjb3B5O1xuLy8gICAgICAgICAgZG8ge1xuLy8gICAgICAgICAgICBvdXRwdXRbcHV0KytdID0gMDtcbi8vICAgICAgICAgIH0gd2hpbGUgKC0tY29weSk7XG4vLyAgICAgICAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSB7IHN0YXRlLm1vZGUgPSBMRU47IH1cbi8vICAgICAgICAgIGJyZWFrO1xuLy8jZW5kaWZcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS53bmV4dCkge1xuICAgICAgICAgICAgY29weSAtPSBzdGF0ZS53bmV4dDtcbiAgICAgICAgICAgIGZyb20gPSBzdGF0ZS53c2l6ZSAtIGNvcHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgZnJvbSA9IHN0YXRlLnduZXh0IC0gY29weTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGNvcHkgPiBzdGF0ZS5sZW5ndGgpIHsgY29weSA9IHN0YXRlLmxlbmd0aDsgfVxuICAgICAgICAgIGZyb21fc291cmNlID0gc3RhdGUud2luZG93O1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8qIGNvcHkgZnJvbSBvdXRwdXQgKi9cbiAgICAgICAgICBmcm9tX3NvdXJjZSA9IG91dHB1dDtcbiAgICAgICAgICBmcm9tID0gcHV0IC0gc3RhdGUub2Zmc2V0O1xuICAgICAgICAgIGNvcHkgPSBzdGF0ZS5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNvcHkgPiBsZWZ0KSB7IGNvcHkgPSBsZWZ0OyB9XG4gICAgICAgIGxlZnQgLT0gY29weTtcbiAgICAgICAgc3RhdGUubGVuZ3RoIC09IGNvcHk7XG4gICAgICAgIGRvIHtcbiAgICAgICAgICBvdXRwdXRbcHV0KytdID0gZnJvbV9zb3VyY2VbZnJvbSsrXTtcbiAgICAgICAgfSB3aGlsZSAoLS1jb3B5KTtcbiAgICAgICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgeyBzdGF0ZS5tb2RlID0gTEVOOyB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBMSVQ6XG4gICAgICAgIGlmIChsZWZ0ID09PSAwKSB7IGJyZWFrIGluZl9sZWF2ZTsgfVxuICAgICAgICBvdXRwdXRbcHV0KytdID0gc3RhdGUubGVuZ3RoO1xuICAgICAgICBsZWZ0LS07XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU47XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBDSEVDSzpcbiAgICAgICAgaWYgKHN0YXRlLndyYXApIHtcbiAgICAgICAgICAvLz09PSBORUVEQklUUygzMik7XG4gICAgICAgICAgd2hpbGUgKGJpdHMgPCAzMikge1xuICAgICAgICAgICAgaWYgKGhhdmUgPT09IDApIHsgYnJlYWsgaW5mX2xlYXZlOyB9XG4gICAgICAgICAgICBoYXZlLS07XG4gICAgICAgICAgICAvLyBVc2UgJ3wnIGluc3RlYWQgb2YgJysnIHRvIG1ha2Ugc3VyZSB0aGF0IHJlc3VsdCBpcyBzaWduZWRcbiAgICAgICAgICAgIGhvbGQgfD0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgX291dCAtPSBsZWZ0O1xuICAgICAgICAgIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gICAgICAgICAgc3RhdGUudG90YWwgKz0gX291dDtcbiAgICAgICAgICBpZiAoX291dCkge1xuICAgICAgICAgICAgc3RybS5hZGxlciA9IHN0YXRlLmNoZWNrID1cbiAgICAgICAgICAgICAgICAvKlVQREFURShzdGF0ZS5jaGVjaywgcHV0IC0gX291dCwgX291dCk7Ki9cbiAgICAgICAgICAgICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpIDogYWRsZXIzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHB1dCAtIF9vdXQpKTtcblxuICAgICAgICAgIH1cbiAgICAgICAgICBfb3V0ID0gbGVmdDtcbiAgICAgICAgICAvLyBOQjogY3JjMzIgc3RvcmVkIGFzIHNpZ25lZCAzMi1iaXQgaW50LCB6c3dhcDMyIHJldHVybnMgc2lnbmVkIHRvb1xuICAgICAgICAgIGlmICgoc3RhdGUuZmxhZ3MgPyBob2xkIDogenN3YXAzMihob2xkKSkgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgZGF0YSBjaGVjayc7XG4gICAgICAgICAgICBzdGF0ZS5tb2RlID0gQkFEO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vPT09IElOSVRCSVRTKCk7XG4gICAgICAgICAgaG9sZCA9IDA7XG4gICAgICAgICAgYml0cyA9IDA7XG4gICAgICAgICAgLy89PT0vL1xuICAgICAgICAgIC8vVHJhY2V2KChzdGRlcnIsIFwiaW5mbGF0ZTogICBjaGVjayBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBMRU5HVEg7XG4gICAgICAgIC8qIGZhbGxzIHRocm91Z2ggKi9cbiAgICAgIGNhc2UgTEVOR1RIOlxuICAgICAgICBpZiAoc3RhdGUud3JhcCAmJiBzdGF0ZS5mbGFncykge1xuICAgICAgICAgIC8vPT09IE5FRURCSVRTKDMyKTtcbiAgICAgICAgICB3aGlsZSAoYml0cyA8IDMyKSB7XG4gICAgICAgICAgICBpZiAoaGF2ZSA9PT0gMCkgeyBicmVhayBpbmZfbGVhdmU7IH1cbiAgICAgICAgICAgIGhhdmUtLTtcbiAgICAgICAgICAgIGhvbGQgKz0gaW5wdXRbbmV4dCsrXSA8PCBiaXRzO1xuICAgICAgICAgICAgYml0cyArPSA4O1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgaWYgKGhvbGQgIT09IChzdGF0ZS50b3RhbCAmIDB4ZmZmZmZmZmYpKSB7XG4gICAgICAgICAgICBzdHJtLm1zZyA9ICdpbmNvcnJlY3QgbGVuZ3RoIGNoZWNrJztcbiAgICAgICAgICAgIHN0YXRlLm1vZGUgPSBCQUQ7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgLy89PT0gSU5JVEJJVFMoKTtcbiAgICAgICAgICBob2xkID0gMDtcbiAgICAgICAgICBiaXRzID0gMDtcbiAgICAgICAgICAvLz09PS8vXG4gICAgICAgICAgLy9UcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGxlbmd0aCBtYXRjaGVzIHRyYWlsZXJcXG5cIikpO1xuICAgICAgICB9XG4gICAgICAgIHN0YXRlLm1vZGUgPSBET05FO1xuICAgICAgICAvKiBmYWxscyB0aHJvdWdoICovXG4gICAgICBjYXNlIERPTkU6XG4gICAgICAgIHJldCA9IFpfU1RSRUFNX0VORCQxO1xuICAgICAgICBicmVhayBpbmZfbGVhdmU7XG4gICAgICBjYXNlIEJBRDpcbiAgICAgICAgcmV0ID0gWl9EQVRBX0VSUk9SJDE7XG4gICAgICAgIGJyZWFrIGluZl9sZWF2ZTtcbiAgICAgIGNhc2UgTUVNOlxuICAgICAgICByZXR1cm4gWl9NRU1fRVJST1IkMTtcbiAgICAgIGNhc2UgU1lOQzpcbiAgICAgICAgLyogZmFsbHMgdGhyb3VnaCAqL1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5mX2xlYXZlIDwtIGhlcmUgaXMgcmVhbCBwbGFjZSBmb3IgXCJnb3RvIGluZl9sZWF2ZVwiLCBlbXVsYXRlZCB2aWEgXCJicmVhayBpbmZfbGVhdmVcIlxuXG4gIC8qXG4gICAgIFJldHVybiBmcm9tIGluZmxhdGUoKSwgdXBkYXRpbmcgdGhlIHRvdGFsIGNvdW50cyBhbmQgdGhlIGNoZWNrIHZhbHVlLlxuICAgICBJZiB0aGVyZSB3YXMgbm8gcHJvZ3Jlc3MgZHVyaW5nIHRoZSBpbmZsYXRlKCkgY2FsbCwgcmV0dXJuIGEgYnVmZmVyXG4gICAgIGVycm9yLiAgQ2FsbCB1cGRhdGV3aW5kb3coKSB0byBjcmVhdGUgYW5kL29yIHVwZGF0ZSB0aGUgd2luZG93IHN0YXRlLlxuICAgICBOb3RlOiBhIG1lbW9yeSBlcnJvciBmcm9tIGluZmxhdGUoKSBpcyBub24tcmVjb3ZlcmFibGUuXG4gICAqL1xuXG4gIC8vLS0tIFJFU1RPUkUoKSAtLS1cbiAgc3RybS5uZXh0X291dCA9IHB1dDtcbiAgc3RybS5hdmFpbF9vdXQgPSBsZWZ0O1xuICBzdHJtLm5leHRfaW4gPSBuZXh0O1xuICBzdHJtLmF2YWlsX2luID0gaGF2ZTtcbiAgc3RhdGUuaG9sZCA9IGhvbGQ7XG4gIHN0YXRlLmJpdHMgPSBiaXRzO1xuICAvLy0tLVxuXG4gIGlmIChzdGF0ZS53c2l6ZSB8fCAoX291dCAhPT0gc3RybS5hdmFpbF9vdXQgJiYgc3RhdGUubW9kZSA8IEJBRCAmJlxuICAgICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlIDwgQ0hFQ0sgfHwgZmx1c2ggIT09IFpfRklOSVNIJDEpKSkge1xuICAgIGlmICh1cGRhdGV3aW5kb3coc3RybSwgc3RybS5vdXRwdXQsIHN0cm0ubmV4dF9vdXQsIF9vdXQgLSBzdHJtLmF2YWlsX291dCkpIDtcbiAgfVxuICBfaW4gLT0gc3RybS5hdmFpbF9pbjtcbiAgX291dCAtPSBzdHJtLmF2YWlsX291dDtcbiAgc3RybS50b3RhbF9pbiArPSBfaW47XG4gIHN0cm0udG90YWxfb3V0ICs9IF9vdXQ7XG4gIHN0YXRlLnRvdGFsICs9IF9vdXQ7XG4gIGlmIChzdGF0ZS53cmFwICYmIF9vdXQpIHtcbiAgICBzdHJtLmFkbGVyID0gc3RhdGUuY2hlY2sgPSAvKlVQREFURShzdGF0ZS5jaGVjaywgc3RybS5uZXh0X291dCAtIF9vdXQsIF9vdXQpOyovXG4gICAgICAoc3RhdGUuZmxhZ3MgPyBjcmMzMl8xKHN0YXRlLmNoZWNrLCBvdXRwdXQsIF9vdXQsIHN0cm0ubmV4dF9vdXQgLSBfb3V0KSA6IGFkbGVyMzJfMShzdGF0ZS5jaGVjaywgb3V0cHV0LCBfb3V0LCBzdHJtLm5leHRfb3V0IC0gX291dCkpO1xuICB9XG4gIHN0cm0uZGF0YV90eXBlID0gc3RhdGUuYml0cyArIChzdGF0ZS5sYXN0ID8gNjQgOiAwKSArXG4gICAgICAgICAgICAgICAgICAgIChzdGF0ZS5tb2RlID09PSBUWVBFID8gMTI4IDogMCkgK1xuICAgICAgICAgICAgICAgICAgICAoc3RhdGUubW9kZSA9PT0gTEVOXyB8fCBzdGF0ZS5tb2RlID09PSBDT1BZXyA/IDI1NiA6IDApO1xuICBpZiAoKChfaW4gPT09IDAgJiYgX291dCA9PT0gMCkgfHwgZmx1c2ggPT09IFpfRklOSVNIJDEpICYmIHJldCA9PT0gWl9PSyQxKSB7XG4gICAgcmV0ID0gWl9CVUZfRVJST1I7XG4gIH1cbiAgcmV0dXJuIHJldDtcbn07XG5cblxuY29uc3QgaW5mbGF0ZUVuZCA9IChzdHJtKSA9PiB7XG5cbiAgaWYgKCFzdHJtIHx8ICFzdHJtLnN0YXRlIC8qfHwgc3RybS0+emZyZWUgPT0gKGZyZWVfZnVuYykwKi8pIHtcbiAgICByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTtcbiAgfVxuXG4gIGxldCBzdGF0ZSA9IHN0cm0uc3RhdGU7XG4gIGlmIChzdGF0ZS53aW5kb3cpIHtcbiAgICBzdGF0ZS53aW5kb3cgPSBudWxsO1xuICB9XG4gIHN0cm0uc3RhdGUgPSBudWxsO1xuICByZXR1cm4gWl9PSyQxO1xufTtcblxuXG5jb25zdCBpbmZsYXRlR2V0SGVhZGVyID0gKHN0cm0sIGhlYWQpID0+IHtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gfHwgIXN0cm0uc3RhdGUpIHsgcmV0dXJuIFpfU1RSRUFNX0VSUk9SJDE7IH1cbiAgY29uc3Qgc3RhdGUgPSBzdHJtLnN0YXRlO1xuICBpZiAoKHN0YXRlLndyYXAgJiAyKSA9PT0gMCkgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuXG4gIC8qIHNhdmUgaGVhZGVyIHN0cnVjdHVyZSAqL1xuICBzdGF0ZS5oZWFkID0gaGVhZDtcbiAgaGVhZC5kb25lID0gZmFsc2U7XG4gIHJldHVybiBaX09LJDE7XG59O1xuXG5cbmNvbnN0IGluZmxhdGVTZXREaWN0aW9uYXJ5ID0gKHN0cm0sIGRpY3Rpb25hcnkpID0+IHtcbiAgY29uc3QgZGljdExlbmd0aCA9IGRpY3Rpb25hcnkubGVuZ3RoO1xuXG4gIGxldCBzdGF0ZTtcbiAgbGV0IGRpY3RpZDtcbiAgbGV0IHJldDtcblxuICAvKiBjaGVjayBzdGF0ZSAqL1xuICBpZiAoIXN0cm0gLyogPT0gWl9OVUxMICovIHx8ICFzdHJtLnN0YXRlIC8qID09IFpfTlVMTCAqLykgeyByZXR1cm4gWl9TVFJFQU1fRVJST1IkMTsgfVxuICBzdGF0ZSA9IHN0cm0uc3RhdGU7XG5cbiAgaWYgKHN0YXRlLndyYXAgIT09IDAgJiYgc3RhdGUubW9kZSAhPT0gRElDVCkge1xuICAgIHJldHVybiBaX1NUUkVBTV9FUlJPUiQxO1xuICB9XG5cbiAgLyogY2hlY2sgZm9yIGNvcnJlY3QgZGljdGlvbmFyeSBpZGVudGlmaWVyICovXG4gIGlmIChzdGF0ZS5tb2RlID09PSBESUNUKSB7XG4gICAgZGljdGlkID0gMTsgLyogYWRsZXIzMigwLCBudWxsLCAwKSovXG4gICAgLyogZGljdGlkID0gYWRsZXIzMihkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgpOyAqL1xuICAgIGRpY3RpZCA9IGFkbGVyMzJfMShkaWN0aWQsIGRpY3Rpb25hcnksIGRpY3RMZW5ndGgsIDApO1xuICAgIGlmIChkaWN0aWQgIT09IHN0YXRlLmNoZWNrKSB7XG4gICAgICByZXR1cm4gWl9EQVRBX0VSUk9SJDE7XG4gICAgfVxuICB9XG4gIC8qIGNvcHkgZGljdGlvbmFyeSB0byB3aW5kb3cgdXNpbmcgdXBkYXRld2luZG93KCksIHdoaWNoIHdpbGwgYW1lbmQgdGhlXG4gICBleGlzdGluZyBkaWN0aW9uYXJ5IGlmIGFwcHJvcHJpYXRlICovXG4gIHJldCA9IHVwZGF0ZXdpbmRvdyhzdHJtLCBkaWN0aW9uYXJ5LCBkaWN0TGVuZ3RoLCBkaWN0TGVuZ3RoKTtcbiAgaWYgKHJldCkge1xuICAgIHN0YXRlLm1vZGUgPSBNRU07XG4gICAgcmV0dXJuIFpfTUVNX0VSUk9SJDE7XG4gIH1cbiAgc3RhdGUuaGF2ZWRpY3QgPSAxO1xuICAvLyBUcmFjZXYoKHN0ZGVyciwgXCJpbmZsYXRlOiAgIGRpY3Rpb25hcnkgc2V0XFxuXCIpKTtcbiAgcmV0dXJuIFpfT0skMTtcbn07XG5cblxudmFyIGluZmxhdGVSZXNldF8xID0gaW5mbGF0ZVJlc2V0O1xudmFyIGluZmxhdGVSZXNldDJfMSA9IGluZmxhdGVSZXNldDI7XG52YXIgaW5mbGF0ZVJlc2V0S2VlcF8xID0gaW5mbGF0ZVJlc2V0S2VlcDtcbnZhciBpbmZsYXRlSW5pdF8xID0gaW5mbGF0ZUluaXQ7XG52YXIgaW5mbGF0ZUluaXQyXzEgPSBpbmZsYXRlSW5pdDI7XG52YXIgaW5mbGF0ZV8yJDEgPSBpbmZsYXRlJDI7XG52YXIgaW5mbGF0ZUVuZF8xID0gaW5mbGF0ZUVuZDtcbnZhciBpbmZsYXRlR2V0SGVhZGVyXzEgPSBpbmZsYXRlR2V0SGVhZGVyO1xudmFyIGluZmxhdGVTZXREaWN0aW9uYXJ5XzEgPSBpbmZsYXRlU2V0RGljdGlvbmFyeTtcbnZhciBpbmZsYXRlSW5mbyA9ICdwYWtvIGluZmxhdGUgKGZyb20gTm9kZWNhIHByb2plY3QpJztcblxuLyogTm90IGltcGxlbWVudGVkXG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlQ29weSA9IGluZmxhdGVDb3B5O1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZUdldERpY3Rpb25hcnkgPSBpbmZsYXRlR2V0RGljdGlvbmFyeTtcbm1vZHVsZS5leHBvcnRzLmluZmxhdGVNYXJrID0gaW5mbGF0ZU1hcms7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlUHJpbWUgPSBpbmZsYXRlUHJpbWU7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlU3luYyA9IGluZmxhdGVTeW5jO1xubW9kdWxlLmV4cG9ydHMuaW5mbGF0ZVN5bmNQb2ludCA9IGluZmxhdGVTeW5jUG9pbnQ7XG5tb2R1bGUuZXhwb3J0cy5pbmZsYXRlVW5kZXJtaW5lID0gaW5mbGF0ZVVuZGVybWluZTtcbiovXG5cbnZhciBpbmZsYXRlXzEkMiA9IHtcblx0aW5mbGF0ZVJlc2V0OiBpbmZsYXRlUmVzZXRfMSxcblx0aW5mbGF0ZVJlc2V0MjogaW5mbGF0ZVJlc2V0Ml8xLFxuXHRpbmZsYXRlUmVzZXRLZWVwOiBpbmZsYXRlUmVzZXRLZWVwXzEsXG5cdGluZmxhdGVJbml0OiBpbmZsYXRlSW5pdF8xLFxuXHRpbmZsYXRlSW5pdDI6IGluZmxhdGVJbml0Ml8xLFxuXHRpbmZsYXRlOiBpbmZsYXRlXzIkMSxcblx0aW5mbGF0ZUVuZDogaW5mbGF0ZUVuZF8xLFxuXHRpbmZsYXRlR2V0SGVhZGVyOiBpbmZsYXRlR2V0SGVhZGVyXzEsXG5cdGluZmxhdGVTZXREaWN0aW9uYXJ5OiBpbmZsYXRlU2V0RGljdGlvbmFyeV8xLFxuXHRpbmZsYXRlSW5mbzogaW5mbGF0ZUluZm9cbn07XG5cbi8vIChDKSAxOTk1LTIwMTMgSmVhbi1sb3VwIEdhaWxseSBhbmQgTWFyayBBZGxlclxuLy8gKEMpIDIwMTQtMjAxNyBWaXRhbHkgUHV6cmluIGFuZCBBbmRyZXkgVHVwaXRzaW5cbi8vXG4vLyBUaGlzIHNvZnR3YXJlIGlzIHByb3ZpZGVkICdhcy1pcycsIHdpdGhvdXQgYW55IGV4cHJlc3Mgb3IgaW1wbGllZFxuLy8gd2FycmFudHkuIEluIG5vIGV2ZW50IHdpbGwgdGhlIGF1dGhvcnMgYmUgaGVsZCBsaWFibGUgZm9yIGFueSBkYW1hZ2VzXG4vLyBhcmlzaW5nIGZyb20gdGhlIHVzZSBvZiB0aGlzIHNvZnR3YXJlLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgZ3JhbnRlZCB0byBhbnlvbmUgdG8gdXNlIHRoaXMgc29mdHdhcmUgZm9yIGFueSBwdXJwb3NlLFxuLy8gaW5jbHVkaW5nIGNvbW1lcmNpYWwgYXBwbGljYXRpb25zLCBhbmQgdG8gYWx0ZXIgaXQgYW5kIHJlZGlzdHJpYnV0ZSBpdFxuLy8gZnJlZWx5LCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgcmVzdHJpY3Rpb25zOlxuLy9cbi8vIDEuIFRoZSBvcmlnaW4gb2YgdGhpcyBzb2Z0d2FyZSBtdXN0IG5vdCBiZSBtaXNyZXByZXNlbnRlZDsgeW91IG11c3Qgbm90XG4vLyAgIGNsYWltIHRoYXQgeW91IHdyb3RlIHRoZSBvcmlnaW5hbCBzb2Z0d2FyZS4gSWYgeW91IHVzZSB0aGlzIHNvZnR3YXJlXG4vLyAgIGluIGEgcHJvZHVjdCwgYW4gYWNrbm93bGVkZ21lbnQgaW4gdGhlIHByb2R1Y3QgZG9jdW1lbnRhdGlvbiB3b3VsZCBiZVxuLy8gICBhcHByZWNpYXRlZCBidXQgaXMgbm90IHJlcXVpcmVkLlxuLy8gMi4gQWx0ZXJlZCBzb3VyY2UgdmVyc2lvbnMgbXVzdCBiZSBwbGFpbmx5IG1hcmtlZCBhcyBzdWNoLCBhbmQgbXVzdCBub3QgYmVcbi8vICAgbWlzcmVwcmVzZW50ZWQgYXMgYmVpbmcgdGhlIG9yaWdpbmFsIHNvZnR3YXJlLlxuLy8gMy4gVGhpcyBub3RpY2UgbWF5IG5vdCBiZSByZW1vdmVkIG9yIGFsdGVyZWQgZnJvbSBhbnkgc291cmNlIGRpc3RyaWJ1dGlvbi5cblxuZnVuY3Rpb24gR1poZWFkZXIoKSB7XG4gIC8qIHRydWUgaWYgY29tcHJlc3NlZCBkYXRhIGJlbGlldmVkIHRvIGJlIHRleHQgKi9cbiAgdGhpcy50ZXh0ICAgICAgID0gMDtcbiAgLyogbW9kaWZpY2F0aW9uIHRpbWUgKi9cbiAgdGhpcy50aW1lICAgICAgID0gMDtcbiAgLyogZXh0cmEgZmxhZ3MgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy54ZmxhZ3MgICAgID0gMDtcbiAgLyogb3BlcmF0aW5nIHN5c3RlbSAqL1xuICB0aGlzLm9zICAgICAgICAgPSAwO1xuICAvKiBwb2ludGVyIHRvIGV4dHJhIGZpZWxkIG9yIFpfTlVMTCBpZiBub25lICovXG4gIHRoaXMuZXh0cmEgICAgICA9IG51bGw7XG4gIC8qIGV4dHJhIGZpZWxkIGxlbmd0aCAodmFsaWQgaWYgZXh0cmEgIT0gWl9OVUxMKSAqL1xuICB0aGlzLmV4dHJhX2xlbiAgPSAwOyAvLyBBY3R1YWxseSwgd2UgZG9uJ3QgbmVlZCBpdCBpbiBKUyxcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gYnV0IGxlYXZlIGZvciBmZXcgY29kZSBtb2RpZmljYXRpb25zXG5cbiAgLy9cbiAgLy8gU2V0dXAgbGltaXRzIGlzIG5vdCBuZWNlc3NhcnkgYmVjYXVzZSBpbiBqcyB3ZSBzaG91bGQgbm90IHByZWFsbG9jYXRlIG1lbW9yeVxuICAvLyBmb3IgaW5mbGF0ZSB1c2UgY29uc3RhbnQgbGltaXQgaW4gNjU1MzYgYnl0ZXNcbiAgLy9cblxuICAvKiBzcGFjZSBhdCBleHRyYSAob25seSB3aGVuIHJlYWRpbmcgaGVhZGVyKSAqL1xuICAvLyB0aGlzLmV4dHJhX21heCAgPSAwO1xuICAvKiBwb2ludGVyIHRvIHplcm8tdGVybWluYXRlZCBmaWxlIG5hbWUgb3IgWl9OVUxMICovXG4gIHRoaXMubmFtZSAgICAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBuYW1lIChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMubmFtZV9tYXggICA9IDA7XG4gIC8qIHBvaW50ZXIgdG8gemVyby10ZXJtaW5hdGVkIGNvbW1lbnQgb3IgWl9OVUxMICovXG4gIHRoaXMuY29tbWVudCAgICA9ICcnO1xuICAvKiBzcGFjZSBhdCBjb21tZW50IChvbmx5IHdoZW4gcmVhZGluZyBoZWFkZXIpICovXG4gIC8vIHRoaXMuY29tbV9tYXggICA9IDA7XG4gIC8qIHRydWUgaWYgdGhlcmUgd2FzIG9yIHdpbGwgYmUgYSBoZWFkZXIgY3JjICovXG4gIHRoaXMuaGNyYyAgICAgICA9IDA7XG4gIC8qIHRydWUgd2hlbiBkb25lIHJlYWRpbmcgZ3ppcCBoZWFkZXIgKG5vdCB1c2VkIHdoZW4gd3JpdGluZyBhIGd6aXAgZmlsZSkgKi9cbiAgdGhpcy5kb25lICAgICAgID0gZmFsc2U7XG59XG5cbnZhciBnemhlYWRlciA9IEdaaGVhZGVyO1xuXG5jb25zdCB0b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbi8qIFB1YmxpYyBjb25zdGFudHMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PSovXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5jb25zdCB7XG4gIFpfTk9fRkxVU0gsIFpfRklOSVNILFxuICBaX09LLCBaX1NUUkVBTV9FTkQsIFpfTkVFRF9ESUNULCBaX1NUUkVBTV9FUlJPUiwgWl9EQVRBX0VSUk9SLCBaX01FTV9FUlJPUlxufSA9IGNvbnN0YW50cyQyO1xuXG4vKiA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0qL1xuXG5cbi8qKlxuICogY2xhc3MgSW5mbGF0ZVxuICpcbiAqIEdlbmVyaWMgSlMtc3R5bGUgd3JhcHBlciBmb3IgemxpYiBjYWxscy4gSWYgeW91IGRvbid0IG5lZWRcbiAqIHN0cmVhbWluZyBiZWhhdmlvdXIgLSB1c2UgbW9yZSBzaW1wbGUgZnVuY3Rpb25zOiBbW2luZmxhdGVdXVxuICogYW5kIFtbaW5mbGF0ZVJhd11dLlxuICoqL1xuXG4vKiBpbnRlcm5hbFxuICogaW5mbGF0ZS5jaHVua3MgLT4gQXJyYXlcbiAqXG4gKiBDaHVua3Mgb2Ygb3V0cHV0IGRhdGEsIGlmIFtbSW5mbGF0ZSNvbkRhdGFdXSBub3Qgb3ZlcnJpZGRlbi5cbiAqKi9cblxuLyoqXG4gKiBJbmZsYXRlLnJlc3VsdCAtPiBVaW50OEFycmF5fFN0cmluZ1xuICpcbiAqIFVuY29tcHJlc3NlZCByZXN1bHQsIGdlbmVyYXRlZCBieSBkZWZhdWx0IFtbSW5mbGF0ZSNvbkRhdGFdXVxuICogYW5kIFtbSW5mbGF0ZSNvbkVuZF1dIGhhbmRsZXJzLiBGaWxsZWQgYWZ0ZXIgeW91IHB1c2ggbGFzdCBjaHVua1xuICogKGNhbGwgW1tJbmZsYXRlI3B1c2hdXSB3aXRoIGBaX0ZJTklTSGAgLyBgdHJ1ZWAgcGFyYW0pLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUuZXJyIC0+IE51bWJlclxuICpcbiAqIEVycm9yIGNvZGUgYWZ0ZXIgaW5mbGF0ZSBmaW5pc2hlZC4gMCAoWl9PSykgb24gc3VjY2Vzcy5cbiAqIFNob3VsZCBiZSBjaGVja2VkIGlmIGJyb2tlbiBkYXRhIHBvc3NpYmxlLlxuICoqL1xuXG4vKipcbiAqIEluZmxhdGUubXNnIC0+IFN0cmluZ1xuICpcbiAqIEVycm9yIG1lc3NhZ2UsIGlmIFtbSW5mbGF0ZS5lcnJdXSAhPSAwXG4gKiovXG5cblxuLyoqXG4gKiBuZXcgSW5mbGF0ZShvcHRpb25zKVxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBDcmVhdGVzIG5ldyBpbmZsYXRvciBpbnN0YW5jZSB3aXRoIHNwZWNpZmllZCBwYXJhbXMuIFRocm93cyBleGNlcHRpb25cbiAqIG9uIGJhZCBwYXJhbXMuIFN1cHBvcnRlZCBvcHRpb25zOlxuICpcbiAqIC0gYHdpbmRvd0JpdHNgXG4gKiAtIGBkaWN0aW9uYXJ5YFxuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHRoZXNlLlxuICpcbiAqIEFkZGl0aW9uYWwgb3B0aW9ucywgZm9yIGludGVybmFsIG5lZWRzOlxuICpcbiAqIC0gYGNodW5rU2l6ZWAgLSBzaXplIG9mIGdlbmVyYXRlZCBkYXRhIGNodW5rcyAoMTZLIGJ5IGRlZmF1bHQpXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIGRvIHJhdyBpbmZsYXRlXG4gKiAtIGB0b2AgKFN0cmluZykgLSBpZiBlcXVhbCB0byAnc3RyaW5nJywgdGhlbiByZXN1bHQgd2lsbCBiZSBjb252ZXJ0ZWRcbiAqICAgZnJvbSB1dGY4IHRvIHV0ZjE2IChqYXZhc2NyaXB0KSBzdHJpbmcuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG4gKiAgIGNodW5rIGxlbmd0aCBjYW4gZGlmZmVyIGZyb20gYGNodW5rU2l6ZWAsIGRlcGVuZGluZyBvbiBjb250ZW50LlxuICpcbiAqIEJ5IGRlZmF1bHQsIHdoZW4gbm8gb3B0aW9ucyBzZXQsIGF1dG9kZXRlY3QgZGVmbGF0ZS9nemlwIGRhdGEgZm9ybWF0IHZpYVxuICogd3JhcHBlciBoZWFkZXIuXG4gKlxuICogIyMjIyMgRXhhbXBsZTpcbiAqXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBwYWtvID0gcmVxdWlyZSgncGFrbycpXG4gKiBjb25zdCBjaHVuazEgPSBuZXcgVWludDhBcnJheShbMSwyLDMsNCw1LDYsNyw4LDldKVxuICogY29uc3QgY2h1bmsyID0gbmV3IFVpbnQ4QXJyYXkoWzEwLDExLDEyLDEzLDE0LDE1LDE2LDE3LDE4LDE5XSk7XG4gKlxuICogY29uc3QgaW5mbGF0ZSA9IG5ldyBwYWtvLkluZmxhdGUoeyBsZXZlbDogM30pO1xuICpcbiAqIGluZmxhdGUucHVzaChjaHVuazEsIGZhbHNlKTtcbiAqIGluZmxhdGUucHVzaChjaHVuazIsIHRydWUpOyAgLy8gdHJ1ZSAtPiBsYXN0IGNodW5rXG4gKlxuICogaWYgKGluZmxhdGUuZXJyKSB7IHRocm93IG5ldyBFcnJvcihpbmZsYXRlLmVycik7IH1cbiAqXG4gKiBjb25zb2xlLmxvZyhpbmZsYXRlLnJlc3VsdCk7XG4gKiBgYGBcbiAqKi9cbmZ1bmN0aW9uIEluZmxhdGUkMShvcHRpb25zKSB7XG4gIHRoaXMub3B0aW9ucyA9IGNvbW1vbi5hc3NpZ24oe1xuICAgIGNodW5rU2l6ZTogMTAyNCAqIDY0LFxuICAgIHdpbmRvd0JpdHM6IDE1LFxuICAgIHRvOiAnJ1xuICB9LCBvcHRpb25zIHx8IHt9KTtcblxuICBjb25zdCBvcHQgPSB0aGlzLm9wdGlvbnM7XG5cbiAgLy8gRm9yY2Ugd2luZG93IHNpemUgZm9yIGByYXdgIGRhdGEsIGlmIG5vdCBzZXQgZGlyZWN0bHksXG4gIC8vIGJlY2F1c2Ugd2UgaGF2ZSBubyBoZWFkZXIgZm9yIGF1dG9kZXRlY3QuXG4gIGlmIChvcHQucmF3ICYmIChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikpIHtcbiAgICBvcHQud2luZG93Qml0cyA9IC1vcHQud2luZG93Qml0cztcbiAgICBpZiAob3B0LndpbmRvd0JpdHMgPT09IDApIHsgb3B0LndpbmRvd0JpdHMgPSAtMTU7IH1cbiAgfVxuXG4gIC8vIElmIGB3aW5kb3dCaXRzYCBub3QgZGVmaW5lZCAoYW5kIG1vZGUgbm90IHJhdykgLSBzZXQgYXV0b2RldGVjdCBmbGFnIGZvciBnemlwL2RlZmxhdGVcbiAgaWYgKChvcHQud2luZG93Qml0cyA+PSAwKSAmJiAob3B0LndpbmRvd0JpdHMgPCAxNikgJiZcbiAgICAgICEob3B0aW9ucyAmJiBvcHRpb25zLndpbmRvd0JpdHMpKSB7XG4gICAgb3B0LndpbmRvd0JpdHMgKz0gMzI7XG4gIH1cblxuICAvLyBHemlwIGhlYWRlciBoYXMgbm8gaW5mbyBhYm91dCB3aW5kb3dzIHNpemUsIHdlIGNhbiBkbyBhdXRvZGV0ZWN0IG9ubHlcbiAgLy8gZm9yIGRlZmxhdGUuIFNvLCBpZiB3aW5kb3cgc2l6ZSBub3Qgc2V0LCBmb3JjZSBpdCB0byBtYXggd2hlbiBnemlwIHBvc3NpYmxlXG4gIGlmICgob3B0LndpbmRvd0JpdHMgPiAxNSkgJiYgKG9wdC53aW5kb3dCaXRzIDwgNDgpKSB7XG4gICAgLy8gYml0IDMgKDE2KSAtPiBnemlwcGVkIGRhdGFcbiAgICAvLyBiaXQgNCAoMzIpIC0+IGF1dG9kZXRlY3QgZ3ppcC9kZWZsYXRlXG4gICAgaWYgKChvcHQud2luZG93Qml0cyAmIDE1KSA9PT0gMCkge1xuICAgICAgb3B0LndpbmRvd0JpdHMgfD0gMTU7XG4gICAgfVxuICB9XG5cbiAgdGhpcy5lcnIgICAgPSAwOyAgICAgIC8vIGVycm9yIGNvZGUsIGlmIGhhcHBlbnMgKDAgPSBaX09LKVxuICB0aGlzLm1zZyAgICA9ICcnOyAgICAgLy8gZXJyb3IgbWVzc2FnZVxuICB0aGlzLmVuZGVkICA9IGZhbHNlOyAgLy8gdXNlZCB0byBhdm9pZCBtdWx0aXBsZSBvbkVuZCgpIGNhbGxzXG4gIHRoaXMuY2h1bmtzID0gW107ICAgICAvLyBjaHVua3Mgb2YgY29tcHJlc3NlZCBkYXRhXG5cbiAgdGhpcy5zdHJtICAgPSBuZXcgenN0cmVhbSgpO1xuICB0aGlzLnN0cm0uYXZhaWxfb3V0ID0gMDtcblxuICBsZXQgc3RhdHVzICA9IGluZmxhdGVfMSQyLmluZmxhdGVJbml0MihcbiAgICB0aGlzLnN0cm0sXG4gICAgb3B0LndpbmRvd0JpdHNcbiAgKTtcblxuICBpZiAoc3RhdHVzICE9PSBaX09LKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzW3N0YXR1c10pO1xuICB9XG5cbiAgdGhpcy5oZWFkZXIgPSBuZXcgZ3poZWFkZXIoKTtcblxuICBpbmZsYXRlXzEkMi5pbmZsYXRlR2V0SGVhZGVyKHRoaXMuc3RybSwgdGhpcy5oZWFkZXIpO1xuXG4gIC8vIFNldHVwIGRpY3Rpb25hcnlcbiAgaWYgKG9wdC5kaWN0aW9uYXJ5KSB7XG4gICAgLy8gQ29udmVydCBkYXRhIGlmIG5lZWRlZFxuICAgIGlmICh0eXBlb2Ygb3B0LmRpY3Rpb25hcnkgPT09ICdzdHJpbmcnKSB7XG4gICAgICBvcHQuZGljdGlvbmFyeSA9IHN0cmluZ3Muc3RyaW5nMmJ1ZihvcHQuZGljdGlvbmFyeSk7XG4gICAgfSBlbHNlIGlmICh0b1N0cmluZy5jYWxsKG9wdC5kaWN0aW9uYXJ5KSA9PT0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJykge1xuICAgICAgb3B0LmRpY3Rpb25hcnkgPSBuZXcgVWludDhBcnJheShvcHQuZGljdGlvbmFyeSk7XG4gICAgfVxuICAgIGlmIChvcHQucmF3KSB7IC8vSW4gcmF3IG1vZGUgd2UgbmVlZCB0byBzZXQgdGhlIGRpY3Rpb25hcnkgZWFybHlcbiAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGVTZXREaWN0aW9uYXJ5KHRoaXMuc3RybSwgb3B0LmRpY3Rpb25hcnkpO1xuICAgICAgaWYgKHN0YXR1cyAhPT0gWl9PSykge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZXNbc3RhdHVzXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogSW5mbGF0ZSNwdXNoKGRhdGFbLCBmbHVzaF9tb2RlXSkgLT4gQm9vbGVhblxuICogLSBkYXRhIChVaW50OEFycmF5fEFycmF5QnVmZmVyKTogaW5wdXQgZGF0YVxuICogLSBmbHVzaF9tb2RlIChOdW1iZXJ8Qm9vbGVhbik6IDAuLjYgZm9yIGNvcnJlc3BvbmRpbmcgWl9OT19GTFVTSC4uWl9UUkVFXG4gKiAgIGZsdXNoIG1vZGVzLiBTZWUgY29uc3RhbnRzLiBTa2lwcGVkIG9yIGBmYWxzZWAgbWVhbnMgWl9OT19GTFVTSCxcbiAqICAgYHRydWVgIG1lYW5zIFpfRklOSVNILlxuICpcbiAqIFNlbmRzIGlucHV0IGRhdGEgdG8gaW5mbGF0ZSBwaXBlLCBnZW5lcmF0aW5nIFtbSW5mbGF0ZSNvbkRhdGFdXSBjYWxscyB3aXRoXG4gKiBuZXcgb3V0cHV0IGNodW5rcy4gUmV0dXJucyBgdHJ1ZWAgb24gc3VjY2Vzcy4gSWYgZW5kIG9mIHN0cmVhbSBkZXRlY3RlZCxcbiAqIFtbSW5mbGF0ZSNvbkVuZF1dIHdpbGwgYmUgY2FsbGVkLlxuICpcbiAqIGBmbHVzaF9tb2RlYCBpcyBub3QgbmVlZGVkIGZvciBub3JtYWwgb3BlcmF0aW9uLCBiZWNhdXNlIGVuZCBvZiBzdHJlYW1cbiAqIGRldGVjdGVkIGF1dG9tYXRpY2FsbHkuIFlvdSBtYXkgdHJ5IHRvIHVzZSBpdCBmb3IgYWR2YW5jZWQgdGhpbmdzLCBidXRcbiAqIHRoaXMgZnVuY3Rpb25hbGl0eSB3YXMgbm90IHRlc3RlZC5cbiAqXG4gKiBPbiBmYWlsIGNhbGwgW1tJbmZsYXRlI29uRW5kXV0gd2l0aCBlcnJvciBjb2RlIGFuZCByZXR1cm4gZmFsc2UuXG4gKlxuICogIyMjIyMgRXhhbXBsZVxuICpcbiAqIGBgYGphdmFzY3JpcHRcbiAqIHB1c2goY2h1bmssIGZhbHNlKTsgLy8gcHVzaCBvbmUgb2YgZGF0YSBjaHVua3NcbiAqIC4uLlxuICogcHVzaChjaHVuaywgdHJ1ZSk7ICAvLyBwdXNoIGxhc3QgY2h1bmtcbiAqIGBgYFxuICoqL1xuSW5mbGF0ZSQxLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGRhdGEsIGZsdXNoX21vZGUpIHtcbiAgY29uc3Qgc3RybSA9IHRoaXMuc3RybTtcbiAgY29uc3QgY2h1bmtTaXplID0gdGhpcy5vcHRpb25zLmNodW5rU2l6ZTtcbiAgY29uc3QgZGljdGlvbmFyeSA9IHRoaXMub3B0aW9ucy5kaWN0aW9uYXJ5O1xuICBsZXQgc3RhdHVzLCBfZmx1c2hfbW9kZSwgbGFzdF9hdmFpbF9vdXQ7XG5cbiAgaWYgKHRoaXMuZW5kZWQpIHJldHVybiBmYWxzZTtcblxuICBpZiAoZmx1c2hfbW9kZSA9PT0gfn5mbHVzaF9tb2RlKSBfZmx1c2hfbW9kZSA9IGZsdXNoX21vZGU7XG4gIGVsc2UgX2ZsdXNoX21vZGUgPSBmbHVzaF9tb2RlID09PSB0cnVlID8gWl9GSU5JU0ggOiBaX05PX0ZMVVNIO1xuXG4gIC8vIENvbnZlcnQgZGF0YSBpZiBuZWVkZWRcbiAgaWYgKHRvU3RyaW5nLmNhbGwoZGF0YSkgPT09ICdbb2JqZWN0IEFycmF5QnVmZmVyXScpIHtcbiAgICBzdHJtLmlucHV0ID0gbmV3IFVpbnQ4QXJyYXkoZGF0YSk7XG4gIH0gZWxzZSB7XG4gICAgc3RybS5pbnB1dCA9IGRhdGE7XG4gIH1cblxuICBzdHJtLm5leHRfaW4gPSAwO1xuICBzdHJtLmF2YWlsX2luID0gc3RybS5pbnB1dC5sZW5ndGg7XG5cbiAgZm9yICg7Oykge1xuICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCkge1xuICAgICAgc3RybS5vdXRwdXQgPSBuZXcgVWludDhBcnJheShjaHVua1NpemUpO1xuICAgICAgc3RybS5uZXh0X291dCA9IDA7XG4gICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZTtcbiAgICB9XG5cbiAgICBzdGF0dXMgPSBpbmZsYXRlXzEkMi5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcblxuICAgIGlmIChzdGF0dXMgPT09IFpfTkVFRF9ESUNUICYmIGRpY3Rpb25hcnkpIHtcbiAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGVTZXREaWN0aW9uYXJ5KHN0cm0sIGRpY3Rpb25hcnkpO1xuXG4gICAgICBpZiAoc3RhdHVzID09PSBaX09LKSB7XG4gICAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGUoc3RybSwgX2ZsdXNoX21vZGUpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFpfREFUQV9FUlJPUikge1xuICAgICAgICAvLyBSZXBsYWNlIGNvZGUgd2l0aCBtb3JlIHZlcmJvc2VcbiAgICAgICAgc3RhdHVzID0gWl9ORUVEX0RJQ1Q7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gU2tpcCBzbnljIG1hcmtlcnMgaWYgbW9yZSBkYXRhIGZvbGxvd3MgYW5kIG5vdCByYXcgbW9kZVxuICAgIHdoaWxlIChzdHJtLmF2YWlsX2luID4gMCAmJlxuICAgICAgICAgICBzdGF0dXMgPT09IFpfU1RSRUFNX0VORCAmJlxuICAgICAgICAgICBzdHJtLnN0YXRlLndyYXAgPiAwICYmXG4gICAgICAgICAgIGRhdGFbc3RybS5uZXh0X2luXSAhPT0gMClcbiAgICB7XG4gICAgICBpbmZsYXRlXzEkMi5pbmZsYXRlUmVzZXQoc3RybSk7XG4gICAgICBzdGF0dXMgPSBpbmZsYXRlXzEkMi5pbmZsYXRlKHN0cm0sIF9mbHVzaF9tb2RlKTtcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHN0YXR1cykge1xuICAgICAgY2FzZSBaX1NUUkVBTV9FUlJPUjpcbiAgICAgIGNhc2UgWl9EQVRBX0VSUk9SOlxuICAgICAgY2FzZSBaX05FRURfRElDVDpcbiAgICAgIGNhc2UgWl9NRU1fRVJST1I6XG4gICAgICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICAgICAgdGhpcy5lbmRlZCA9IHRydWU7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICAvLyBSZW1lbWJlciByZWFsIGBhdmFpbF9vdXRgIHZhbHVlLCBiZWNhdXNlIHdlIG1heSBwYXRjaCBvdXQgYnVmZmVyIGNvbnRlbnRcbiAgICAvLyB0byBhbGlnbiB1dGY4IHN0cmluZ3MgYm91bmRhcmllcy5cbiAgICBsYXN0X2F2YWlsX291dCA9IHN0cm0uYXZhaWxfb3V0O1xuXG4gICAgaWYgKHN0cm0ubmV4dF9vdXQpIHtcbiAgICAgIGlmIChzdHJtLmF2YWlsX291dCA9PT0gMCB8fCBzdGF0dXMgPT09IFpfU1RSRUFNX0VORCkge1xuXG4gICAgICAgIGlmICh0aGlzLm9wdGlvbnMudG8gPT09ICdzdHJpbmcnKSB7XG5cbiAgICAgICAgICBsZXQgbmV4dF9vdXRfdXRmOCA9IHN0cmluZ3MudXRmOGJvcmRlcihzdHJtLm91dHB1dCwgc3RybS5uZXh0X291dCk7XG5cbiAgICAgICAgICBsZXQgdGFpbCA9IHN0cm0ubmV4dF9vdXQgLSBuZXh0X291dF91dGY4O1xuICAgICAgICAgIGxldCB1dGY4c3RyID0gc3RyaW5ncy5idWYyc3RyaW5nKHN0cm0ub3V0cHV0LCBuZXh0X291dF91dGY4KTtcblxuICAgICAgICAgIC8vIG1vdmUgdGFpbCAmIHJlYWxpZ24gY291bnRlcnNcbiAgICAgICAgICBzdHJtLm5leHRfb3V0ID0gdGFpbDtcbiAgICAgICAgICBzdHJtLmF2YWlsX291dCA9IGNodW5rU2l6ZSAtIHRhaWw7XG4gICAgICAgICAgaWYgKHRhaWwpIHN0cm0ub3V0cHV0LnNldChzdHJtLm91dHB1dC5zdWJhcnJheShuZXh0X291dF91dGY4LCBuZXh0X291dF91dGY4ICsgdGFpbCksIDApO1xuXG4gICAgICAgICAgdGhpcy5vbkRhdGEodXRmOHN0cik7XG5cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLm9uRGF0YShzdHJtLm91dHB1dC5sZW5ndGggPT09IHN0cm0ubmV4dF9vdXQgPyBzdHJtLm91dHB1dCA6IHN0cm0ub3V0cHV0LnN1YmFycmF5KDAsIHN0cm0ubmV4dF9vdXQpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIE11c3QgcmVwZWF0IGl0ZXJhdGlvbiBpZiBvdXQgYnVmZmVyIGlzIGZ1bGxcbiAgICBpZiAoc3RhdHVzID09PSBaX09LICYmIGxhc3RfYXZhaWxfb3V0ID09PSAwKSBjb250aW51ZTtcblxuICAgIC8vIEZpbmFsaXplIGlmIGVuZCBvZiBzdHJlYW0gcmVhY2hlZC5cbiAgICBpZiAoc3RhdHVzID09PSBaX1NUUkVBTV9FTkQpIHtcbiAgICAgIHN0YXR1cyA9IGluZmxhdGVfMSQyLmluZmxhdGVFbmQodGhpcy5zdHJtKTtcbiAgICAgIHRoaXMub25FbmQoc3RhdHVzKTtcbiAgICAgIHRoaXMuZW5kZWQgPSB0cnVlO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKHN0cm0uYXZhaWxfaW4gPT09IDApIGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIHRydWU7XG59O1xuXG5cbi8qKlxuICogSW5mbGF0ZSNvbkRhdGEoY2h1bmspIC0+IFZvaWRcbiAqIC0gY2h1bmsgKFVpbnQ4QXJyYXl8U3RyaW5nKTogb3V0cHV0IGRhdGEuIFdoZW4gc3RyaW5nIG91dHB1dCByZXF1ZXN0ZWQsXG4gKiAgIGVhY2ggY2h1bmsgd2lsbCBiZSBzdHJpbmcuXG4gKlxuICogQnkgZGVmYXVsdCwgc3RvcmVzIGRhdGEgYmxvY2tzIGluIGBjaHVua3NbXWAgcHJvcGVydHkgYW5kIGdsdWVcbiAqIHRob3NlIGluIGBvbkVuZGAuIE92ZXJyaWRlIHRoaXMgaGFuZGxlciwgaWYgeW91IG5lZWQgYW5vdGhlciBiZWhhdmlvdXIuXG4gKiovXG5JbmZsYXRlJDEucHJvdG90eXBlLm9uRGF0YSA9IGZ1bmN0aW9uIChjaHVuaykge1xuICB0aGlzLmNodW5rcy5wdXNoKGNodW5rKTtcbn07XG5cblxuLyoqXG4gKiBJbmZsYXRlI29uRW5kKHN0YXR1cykgLT4gVm9pZFxuICogLSBzdGF0dXMgKE51bWJlcik6IGluZmxhdGUgc3RhdHVzLiAwIChaX09LKSBvbiBzdWNjZXNzLFxuICogICBvdGhlciBpZiBub3QuXG4gKlxuICogQ2FsbGVkIGVpdGhlciBhZnRlciB5b3UgdGVsbCBpbmZsYXRlIHRoYXQgdGhlIGlucHV0IHN0cmVhbSBpc1xuICogY29tcGxldGUgKFpfRklOSVNIKS4gQnkgZGVmYXVsdCAtIGpvaW4gY29sbGVjdGVkIGNodW5rcyxcbiAqIGZyZWUgbWVtb3J5IGFuZCBmaWxsIGByZXN1bHRzYCAvIGBlcnJgIHByb3BlcnRpZXMuXG4gKiovXG5JbmZsYXRlJDEucHJvdG90eXBlLm9uRW5kID0gZnVuY3Rpb24gKHN0YXR1cykge1xuICAvLyBPbiBzdWNjZXNzIC0gam9pblxuICBpZiAoc3RhdHVzID09PSBaX09LKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy50byA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gdGhpcy5jaHVua3Muam9pbignJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMucmVzdWx0ID0gY29tbW9uLmZsYXR0ZW5DaHVua3ModGhpcy5jaHVua3MpO1xuICAgIH1cbiAgfVxuICB0aGlzLmNodW5rcyA9IFtdO1xuICB0aGlzLmVyciA9IHN0YXR1cztcbiAgdGhpcy5tc2cgPSB0aGlzLnN0cm0ubXNnO1xufTtcblxuXG4vKipcbiAqIGluZmxhdGUoZGF0YVssIG9wdGlvbnNdKSAtPiBVaW50OEFycmF5fFN0cmluZ1xuICogLSBkYXRhIChVaW50OEFycmF5KTogaW5wdXQgZGF0YSB0byBkZWNvbXByZXNzLlxuICogLSBvcHRpb25zIChPYmplY3QpOiB6bGliIGluZmxhdGUgb3B0aW9ucy5cbiAqXG4gKiBEZWNvbXByZXNzIGBkYXRhYCB3aXRoIGluZmxhdGUvdW5nemlwIGFuZCBgb3B0aW9uc2AuIEF1dG9kZXRlY3RcbiAqIGZvcm1hdCB2aWEgd3JhcHBlciBoZWFkZXIgYnkgZGVmYXVsdC4gVGhhdCdzIHdoeSB3ZSBkb24ndCBwcm92aWRlXG4gKiBzZXBhcmF0ZSBgdW5nemlwYCBtZXRob2QuXG4gKlxuICogU3VwcG9ydGVkIG9wdGlvbnMgYXJlOlxuICpcbiAqIC0gd2luZG93Qml0c1xuICpcbiAqIFtodHRwOi8vemxpYi5uZXQvbWFudWFsLmh0bWwjQWR2YW5jZWRdKGh0dHA6Ly96bGliLm5ldC9tYW51YWwuaHRtbCNBZHZhbmNlZClcbiAqIGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICpcbiAqIFN1Z2FyIChvcHRpb25zKTpcbiAqXG4gKiAtIGByYXdgIChCb29sZWFuKSAtIHNheSB0aGF0IHdlIHdvcmsgd2l0aCByYXcgc3RyZWFtLCBpZiB5b3UgZG9uJ3Qgd2lzaCB0byBzcGVjaWZ5XG4gKiAgIG5lZ2F0aXZlIHdpbmRvd0JpdHMgaW1wbGljaXRseS5cbiAqIC0gYHRvYCAoU3RyaW5nKSAtIGlmIGVxdWFsIHRvICdzdHJpbmcnLCB0aGVuIHJlc3VsdCB3aWxsIGJlIGNvbnZlcnRlZFxuICogICBmcm9tIHV0ZjggdG8gdXRmMTYgKGphdmFzY3JpcHQpIHN0cmluZy4gV2hlbiBzdHJpbmcgb3V0cHV0IHJlcXVlc3RlZCxcbiAqICAgY2h1bmsgbGVuZ3RoIGNhbiBkaWZmZXIgZnJvbSBgY2h1bmtTaXplYCwgZGVwZW5kaW5nIG9uIGNvbnRlbnQuXG4gKlxuICpcbiAqICMjIyMjIEV4YW1wbGU6XG4gKlxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGFrbyA9IHJlcXVpcmUoJ3Bha28nKTtcbiAqIGNvbnN0IGlucHV0ID0gcGFrby5kZWZsYXRlKG5ldyBVaW50OEFycmF5KFsxLDIsMyw0LDUsNiw3LDgsOV0pKTtcbiAqIGxldCBvdXRwdXQ7XG4gKlxuICogdHJ5IHtcbiAqICAgb3V0cHV0ID0gcGFrby5pbmZsYXRlKGlucHV0KTtcbiAqIH0gY2F0Y2ggKGVycikge1xuICogICBjb25zb2xlLmxvZyhlcnIpO1xuICogfVxuICogYGBgXG4gKiovXG5mdW5jdGlvbiBpbmZsYXRlJDEoaW5wdXQsIG9wdGlvbnMpIHtcbiAgY29uc3QgaW5mbGF0b3IgPSBuZXcgSW5mbGF0ZSQxKG9wdGlvbnMpO1xuXG4gIGluZmxhdG9yLnB1c2goaW5wdXQpO1xuXG4gIC8vIFRoYXQgd2lsbCBuZXZlciBoYXBwZW5zLCBpZiB5b3UgZG9uJ3QgY2hlYXQgd2l0aCBvcHRpb25zIDopXG4gIGlmIChpbmZsYXRvci5lcnIpIHRocm93IGluZmxhdG9yLm1zZyB8fCBtZXNzYWdlc1tpbmZsYXRvci5lcnJdO1xuXG4gIHJldHVybiBpbmZsYXRvci5yZXN1bHQ7XG59XG5cblxuLyoqXG4gKiBpbmZsYXRlUmF3KGRhdGFbLCBvcHRpb25zXSkgLT4gVWludDhBcnJheXxTdHJpbmdcbiAqIC0gZGF0YSAoVWludDhBcnJheSk6IGlucHV0IGRhdGEgdG8gZGVjb21wcmVzcy5cbiAqIC0gb3B0aW9ucyAoT2JqZWN0KTogemxpYiBpbmZsYXRlIG9wdGlvbnMuXG4gKlxuICogVGhlIHNhbWUgYXMgW1tpbmZsYXRlXV0sIGJ1dCBjcmVhdGVzIHJhdyBkYXRhLCB3aXRob3V0IHdyYXBwZXJcbiAqIChoZWFkZXIgYW5kIGFkbGVyMzIgY3JjKS5cbiAqKi9cbmZ1bmN0aW9uIGluZmxhdGVSYXckMShpbnB1dCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgb3B0aW9ucy5yYXcgPSB0cnVlO1xuICByZXR1cm4gaW5mbGF0ZSQxKGlucHV0LCBvcHRpb25zKTtcbn1cblxuXG4vKipcbiAqIHVuZ3ppcChkYXRhWywgb3B0aW9uc10pIC0+IFVpbnQ4QXJyYXl8U3RyaW5nXG4gKiAtIGRhdGEgKFVpbnQ4QXJyYXkpOiBpbnB1dCBkYXRhIHRvIGRlY29tcHJlc3MuXG4gKiAtIG9wdGlvbnMgKE9iamVjdCk6IHpsaWIgaW5mbGF0ZSBvcHRpb25zLlxuICpcbiAqIEp1c3Qgc2hvcnRjdXQgdG8gW1tpbmZsYXRlXV0sIGJlY2F1c2UgaXQgYXV0b2RldGVjdHMgZm9ybWF0XG4gKiBieSBoZWFkZXIuY29udGVudC4gRG9uZSBmb3IgY29udmVuaWVuY2UuXG4gKiovXG5cblxudmFyIEluZmxhdGVfMSQxID0gSW5mbGF0ZSQxO1xudmFyIGluZmxhdGVfMiA9IGluZmxhdGUkMTtcbnZhciBpbmZsYXRlUmF3XzEkMSA9IGluZmxhdGVSYXckMTtcbnZhciB1bmd6aXAkMSA9IGluZmxhdGUkMTtcbnZhciBjb25zdGFudHMgPSBjb25zdGFudHMkMjtcblxudmFyIGluZmxhdGVfMSQxID0ge1xuXHRJbmZsYXRlOiBJbmZsYXRlXzEkMSxcblx0aW5mbGF0ZTogaW5mbGF0ZV8yLFxuXHRpbmZsYXRlUmF3OiBpbmZsYXRlUmF3XzEkMSxcblx0dW5nemlwOiB1bmd6aXAkMSxcblx0Y29uc3RhbnRzOiBjb25zdGFudHNcbn07XG5cbmNvbnN0IHsgRGVmbGF0ZSwgZGVmbGF0ZSwgZGVmbGF0ZVJhdywgZ3ppcCB9ID0gZGVmbGF0ZV8xJDE7XG5cbmNvbnN0IHsgSW5mbGF0ZSwgaW5mbGF0ZSwgaW5mbGF0ZVJhdywgdW5nemlwIH0gPSBpbmZsYXRlXzEkMTtcblxuXG5cbnZhciBEZWZsYXRlXzEgPSBEZWZsYXRlO1xudmFyIGRlZmxhdGVfMSA9IGRlZmxhdGU7XG52YXIgZGVmbGF0ZVJhd18xID0gZGVmbGF0ZVJhdztcbnZhciBnemlwXzEgPSBnemlwO1xudmFyIEluZmxhdGVfMSA9IEluZmxhdGU7XG52YXIgaW5mbGF0ZV8xID0gaW5mbGF0ZTtcbnZhciBpbmZsYXRlUmF3XzEgPSBpbmZsYXRlUmF3O1xudmFyIHVuZ3ppcF8xID0gdW5nemlwO1xudmFyIGNvbnN0YW50c18xID0gY29uc3RhbnRzJDI7XG5cbnZhciBwYWtvID0ge1xuXHREZWZsYXRlOiBEZWZsYXRlXzEsXG5cdGRlZmxhdGU6IGRlZmxhdGVfMSxcblx0ZGVmbGF0ZVJhdzogZGVmbGF0ZVJhd18xLFxuXHRnemlwOiBnemlwXzEsXG5cdEluZmxhdGU6IEluZmxhdGVfMSxcblx0aW5mbGF0ZTogaW5mbGF0ZV8xLFxuXHRpbmZsYXRlUmF3OiBpbmZsYXRlUmF3XzEsXG5cdHVuZ3ppcDogdW5nemlwXzEsXG5cdGNvbnN0YW50czogY29uc3RhbnRzXzFcbn07XG5cbmV4cG9ydCB7IERlZmxhdGVfMSBhcyBEZWZsYXRlLCBJbmZsYXRlXzEgYXMgSW5mbGF0ZSwgY29uc3RhbnRzXzEgYXMgY29uc3RhbnRzLCBwYWtvIGFzIGRlZmF1bHQsIGRlZmxhdGVfMSBhcyBkZWZsYXRlLCBkZWZsYXRlUmF3XzEgYXMgZGVmbGF0ZVJhdywgZ3ppcF8xIGFzIGd6aXAsIGluZmxhdGVfMSBhcyBpbmZsYXRlLCBpbmZsYXRlUmF3XzEgYXMgaW5mbGF0ZVJhdywgdW5nemlwXzEgYXMgdW5nemlwIH07XG4iLCJleHBvcnQgY29uc3QgcG5nU2lnbmF0dXJlID0gWzEzNywgODAsIDc4LCA3MSwgMTMsIDEwLCAyNiwgMTBdO1xuY29uc3QgY3JjVGFibGUgPSBbXTtcbmZvciAobGV0IG4gPSAwOyBuIDwgMjU2OyBuKyspIHtcbiAgICBsZXQgYyA9IG47XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCA4OyBrKyspIHtcbiAgICAgICAgaWYgKGMgJiAxKSB7XG4gICAgICAgICAgICBjID0gMHhlZGI4ODMyMCBeIChjID4+PiAxKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGMgPSBjID4+PiAxO1xuICAgICAgICB9XG4gICAgfVxuICAgIGNyY1RhYmxlW25dID0gYztcbn1cbmNvbnN0IGluaXRpYWxDcmMgPSAweGZmZmZmZmZmO1xuZnVuY3Rpb24gdXBkYXRlQ3JjKGN1cnJlbnRDcmMsIGRhdGEsIGxlbmd0aCkge1xuICAgIGxldCBjID0gY3VycmVudENyYztcbiAgICBmb3IgKGxldCBuID0gMDsgbiA8IGxlbmd0aDsgbisrKSB7XG4gICAgICAgIGMgPSBjcmNUYWJsZVsoYyBeIGRhdGFbbl0pICYgMHhmZl0gXiAoYyA+Pj4gOCk7XG4gICAgfVxuICAgIHJldHVybiBjO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyYyhkYXRhLCBsZW5ndGgpIHtcbiAgICByZXR1cm4gKHVwZGF0ZUNyYyhpbml0aWFsQ3JjLCBkYXRhLCBsZW5ndGgpIF4gaW5pdGlhbENyYykgPj4+IDA7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21tb24uanMubWFwIiwiZXhwb3J0IHZhciBDb2xvclR5cGU7XG4oZnVuY3Rpb24gKENvbG9yVHlwZSkge1xuICAgIENvbG9yVHlwZVtDb2xvclR5cGVbXCJVTktOT1dOXCJdID0gLTFdID0gXCJVTktOT1dOXCI7XG4gICAgQ29sb3JUeXBlW0NvbG9yVHlwZVtcIkdSRVlTQ0FMRVwiXSA9IDBdID0gXCJHUkVZU0NBTEVcIjtcbiAgICBDb2xvclR5cGVbQ29sb3JUeXBlW1wiVFJVRUNPTE9VUlwiXSA9IDJdID0gXCJUUlVFQ09MT1VSXCI7XG4gICAgQ29sb3JUeXBlW0NvbG9yVHlwZVtcIklOREVYRURfQ09MT1VSXCJdID0gM10gPSBcIklOREVYRURfQ09MT1VSXCI7XG4gICAgQ29sb3JUeXBlW0NvbG9yVHlwZVtcIkdSRVlTQ0FMRV9BTFBIQVwiXSA9IDRdID0gXCJHUkVZU0NBTEVfQUxQSEFcIjtcbiAgICBDb2xvclR5cGVbQ29sb3JUeXBlW1wiVFJVRUNPTE9VUl9BTFBIQVwiXSA9IDZdID0gXCJUUlVFQ09MT1VSX0FMUEhBXCI7XG59KShDb2xvclR5cGUgfHwgKENvbG9yVHlwZSA9IHt9KSk7XG5leHBvcnQgdmFyIENvbXByZXNzaW9uTWV0aG9kO1xuKGZ1bmN0aW9uIChDb21wcmVzc2lvbk1ldGhvZCkge1xuICAgIENvbXByZXNzaW9uTWV0aG9kW0NvbXByZXNzaW9uTWV0aG9kW1wiVU5LTk9XTlwiXSA9IC0xXSA9IFwiVU5LTk9XTlwiO1xuICAgIENvbXByZXNzaW9uTWV0aG9kW0NvbXByZXNzaW9uTWV0aG9kW1wiREVGTEFURVwiXSA9IDBdID0gXCJERUZMQVRFXCI7XG59KShDb21wcmVzc2lvbk1ldGhvZCB8fCAoQ29tcHJlc3Npb25NZXRob2QgPSB7fSkpO1xuZXhwb3J0IHZhciBGaWx0ZXJNZXRob2Q7XG4oZnVuY3Rpb24gKEZpbHRlck1ldGhvZCkge1xuICAgIEZpbHRlck1ldGhvZFtGaWx0ZXJNZXRob2RbXCJVTktOT1dOXCJdID0gLTFdID0gXCJVTktOT1dOXCI7XG4gICAgRmlsdGVyTWV0aG9kW0ZpbHRlck1ldGhvZFtcIkFEQVBUSVZFXCJdID0gMF0gPSBcIkFEQVBUSVZFXCI7XG59KShGaWx0ZXJNZXRob2QgfHwgKEZpbHRlck1ldGhvZCA9IHt9KSk7XG5leHBvcnQgdmFyIEludGVybGFjZU1ldGhvZDtcbihmdW5jdGlvbiAoSW50ZXJsYWNlTWV0aG9kKSB7XG4gICAgSW50ZXJsYWNlTWV0aG9kW0ludGVybGFjZU1ldGhvZFtcIlVOS05PV05cIl0gPSAtMV0gPSBcIlVOS05PV05cIjtcbiAgICBJbnRlcmxhY2VNZXRob2RbSW50ZXJsYWNlTWV0aG9kW1wiTk9fSU5URVJMQUNFXCJdID0gMF0gPSBcIk5PX0lOVEVSTEFDRVwiO1xuICAgIEludGVybGFjZU1ldGhvZFtJbnRlcmxhY2VNZXRob2RbXCJBREFNN1wiXSA9IDFdID0gXCJBREFNN1wiO1xufSkoSW50ZXJsYWNlTWV0aG9kIHx8IChJbnRlcmxhY2VNZXRob2QgPSB7fSkpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW50ZXJuYWxUeXBlcy5qcy5tYXAiLCJpbXBvcnQgeyBJT0J1ZmZlciB9IGZyb20gJ2lvYnVmZmVyJztcbmltcG9ydCB7IEluZmxhdGUgYXMgSW5mbGF0b3IgfSBmcm9tICdwYWtvJztcbmltcG9ydCB7IHBuZ1NpZ25hdHVyZSwgY3JjIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgQ29sb3JUeXBlLCBDb21wcmVzc2lvbk1ldGhvZCwgRmlsdGVyTWV0aG9kLCBJbnRlcmxhY2VNZXRob2QsIH0gZnJvbSAnLi9pbnRlcm5hbFR5cGVzJztcbmNvbnN0IGVtcHR5ID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG5jb25zdCBOVUxMID0gJ1xcMCc7XG5jb25zdCB1aW50MTYgPSBuZXcgVWludDE2QXJyYXkoWzB4MDBmZl0pO1xuY29uc3QgdWludDggPSBuZXcgVWludDhBcnJheSh1aW50MTYuYnVmZmVyKTtcbmNvbnN0IG9zSXNMaXR0bGVFbmRpYW4gPSB1aW50OFswXSA9PT0gMHhmZjtcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFBOR0RlY29kZXIgZXh0ZW5kcyBJT0J1ZmZlciB7XG4gICAgY29uc3RydWN0b3IoZGF0YSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgICAgIHN1cGVyKGRhdGEpO1xuICAgICAgICBjb25zdCB7IGNoZWNrQ3JjID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gICAgICAgIHRoaXMuX2NoZWNrQ3JjID0gY2hlY2tDcmM7XG4gICAgICAgIHRoaXMuX2luZmxhdG9yID0gbmV3IEluZmxhdG9yKCk7XG4gICAgICAgIHRoaXMuX3BuZyA9IHtcbiAgICAgICAgICAgIHdpZHRoOiAtMSxcbiAgICAgICAgICAgIGhlaWdodDogLTEsXG4gICAgICAgICAgICBjaGFubmVsczogLTEsXG4gICAgICAgICAgICBkYXRhOiBuZXcgVWludDhBcnJheSgwKSxcbiAgICAgICAgICAgIGRlcHRoOiAxLFxuICAgICAgICAgICAgdGV4dDoge30sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuX2VuZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9oYXNQYWxldHRlID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3BhbGV0dGUgPSBbXTtcbiAgICAgICAgdGhpcy5fY29tcHJlc3Npb25NZXRob2QgPSBDb21wcmVzc2lvbk1ldGhvZC5VTktOT1dOO1xuICAgICAgICB0aGlzLl9maWx0ZXJNZXRob2QgPSBGaWx0ZXJNZXRob2QuVU5LTk9XTjtcbiAgICAgICAgdGhpcy5faW50ZXJsYWNlTWV0aG9kID0gSW50ZXJsYWNlTWV0aG9kLlVOS05PV047XG4gICAgICAgIHRoaXMuX2NvbG9yVHlwZSA9IC0xO1xuICAgICAgICAvLyBQTkcgaXMgYWx3YXlzIGJpZyBlbmRpYW5cbiAgICAgICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jN0ludGVnZXJzLWFuZC1ieXRlLW9yZGVyXG4gICAgICAgIHRoaXMuc2V0QmlnRW5kaWFuKCk7XG4gICAgfVxuICAgIGRlY29kZSgpIHtcbiAgICAgICAgdGhpcy5kZWNvZGVTaWduYXR1cmUoKTtcbiAgICAgICAgd2hpbGUgKCF0aGlzLl9lbmQpIHtcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlQ2h1bmsoKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmRlY29kZUltYWdlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9wbmc7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzVQTkctZmlsZS1zaWduYXR1cmVcbiAgICBkZWNvZGVTaWduYXR1cmUoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG5nU2lnbmF0dXJlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5yZWFkVWludDgoKSAhPT0gcG5nU2lnbmF0dXJlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB3cm9uZyBQTkcgc2lnbmF0dXJlLiBCeXRlIGF0ICR7aX0gc2hvdWxkIGJlICR7cG5nU2lnbmF0dXJlW2ldfS5gKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyM1Q2h1bmstbGF5b3V0XG4gICAgZGVjb2RlQ2h1bmsoKSB7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHRoaXMucmVhZFVpbnQzMigpO1xuICAgICAgICBjb25zdCB0eXBlID0gdGhpcy5yZWFkQ2hhcnMoNCk7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub2Zmc2V0O1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIC8vIDExLjIgQ3JpdGljYWwgY2h1bmtzXG4gICAgICAgICAgICBjYXNlICdJSERSJzogLy8gMTEuMi4yIElIRFIgSW1hZ2UgaGVhZGVyXG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvZGVJSERSKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdQTFRFJzogLy8gMTEuMi4zIFBMVEUgUGFsZXR0ZVxuICAgICAgICAgICAgICAgIHRoaXMuZGVjb2RlUExURShsZW5ndGgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnSURBVCc6IC8vIDExLjIuNCBJREFUIEltYWdlIGRhdGFcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZUlEQVQobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ0lFTkQnOiAvLyAxMS4yLjUgSUVORCBJbWFnZSB0cmFpbGVyXG4gICAgICAgICAgICAgICAgdGhpcy5fZW5kID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIDExLjMgQW5jaWxsYXJ5IGNodW5rc1xuICAgICAgICAgICAgY2FzZSAndFJOUyc6IC8vIDExLjMuMi4xIHRSTlMgVHJhbnNwYXJlbmN5XG4gICAgICAgICAgICAgICAgdGhpcy5kZWNvZGV0Uk5TKGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd0RVh0JzogLy8gMTEuMy40LjMgdEVYdCBUZXh0dWFsIGRhdGFcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZXRFWHQobGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3BIWXMnOiAvLyAxMS4zLjUuMyBwSFlzIFBoeXNpY2FsIHBpeGVsIGRpbWVuc2lvbnNcbiAgICAgICAgICAgICAgICB0aGlzLmRlY29kZXBIWXMoKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgdGhpcy5za2lwKGxlbmd0aCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0IC0gb2Zmc2V0ICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgTGVuZ3RoIG1pc21hdGNoIHdoaWxlIGRlY29kaW5nIGNodW5rICR7dHlwZX1gKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5fY2hlY2tDcmMpIHtcbiAgICAgICAgICAgIGNvbnN0IGV4cGVjdGVkQ3JjID0gdGhpcy5yZWFkVWludDMyKCk7XG4gICAgICAgICAgICBjb25zdCBjcmNMZW5ndGggPSBsZW5ndGggKyA0OyAvLyBpbmNsdWRlcyB0eXBlXG4gICAgICAgICAgICBjb25zdCBhY3R1YWxDcmMgPSBjcmMobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMub2Zmc2V0IC0gY3JjTGVuZ3RoIC0gNCwgY3JjTGVuZ3RoKSwgY3JjTGVuZ3RoKTsgLy8gXCItIDRcIiBiZWNhdXNlIHdlIGFscmVhZHkgYWR2YW5jZWQgYnkgcmVhZGluZyB0aGUgQ1JDXG4gICAgICAgICAgICBpZiAoYWN0dWFsQ3JjICE9PSBleHBlY3RlZENyYykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ1JDIG1pc21hdGNoIGZvciBjaHVuayAke3R5cGV9LiBFeHBlY3RlZCAke2V4cGVjdGVkQ3JjfSwgZm91bmQgJHthY3R1YWxDcmN9YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNraXAoNCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jMTFJSERSXG4gICAgZGVjb2RlSUhEUigpIHtcbiAgICAgICAgY29uc3QgaW1hZ2UgPSB0aGlzLl9wbmc7XG4gICAgICAgIGltYWdlLndpZHRoID0gdGhpcy5yZWFkVWludDMyKCk7XG4gICAgICAgIGltYWdlLmhlaWdodCA9IHRoaXMucmVhZFVpbnQzMigpO1xuICAgICAgICBpbWFnZS5kZXB0aCA9IGNoZWNrQml0RGVwdGgodGhpcy5yZWFkVWludDgoKSk7XG4gICAgICAgIGNvbnN0IGNvbG9yVHlwZSA9IHRoaXMucmVhZFVpbnQ4KCk7XG4gICAgICAgIHRoaXMuX2NvbG9yVHlwZSA9IGNvbG9yVHlwZTtcbiAgICAgICAgbGV0IGNoYW5uZWxzO1xuICAgICAgICBzd2l0Y2ggKGNvbG9yVHlwZSkge1xuICAgICAgICAgICAgY2FzZSBDb2xvclR5cGUuR1JFWVNDQUxFOlxuICAgICAgICAgICAgICAgIGNoYW5uZWxzID0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29sb3JUeXBlLlRSVUVDT0xPVVI6XG4gICAgICAgICAgICAgICAgY2hhbm5lbHMgPSAzO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb2xvclR5cGUuSU5ERVhFRF9DT0xPVVI6XG4gICAgICAgICAgICAgICAgY2hhbm5lbHMgPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBDb2xvclR5cGUuR1JFWVNDQUxFX0FMUEhBOlxuICAgICAgICAgICAgICAgIGNoYW5uZWxzID0gMjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgQ29sb3JUeXBlLlRSVUVDT0xPVVJfQUxQSEE6XG4gICAgICAgICAgICAgICAgY2hhbm5lbHMgPSA0O1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVua25vd24gY29sb3IgdHlwZTogJHtjb2xvclR5cGV9YCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcG5nLmNoYW5uZWxzID0gY2hhbm5lbHM7XG4gICAgICAgIHRoaXMuX2NvbXByZXNzaW9uTWV0aG9kID0gdGhpcy5yZWFkVWludDgoKTtcbiAgICAgICAgaWYgKHRoaXMuX2NvbXByZXNzaW9uTWV0aG9kICE9PSBDb21wcmVzc2lvbk1ldGhvZC5ERUZMQVRFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGNvbXByZXNzaW9uIG1ldGhvZDogJHt0aGlzLl9jb21wcmVzc2lvbk1ldGhvZH1gKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9maWx0ZXJNZXRob2QgPSB0aGlzLnJlYWRVaW50OCgpO1xuICAgICAgICB0aGlzLl9pbnRlcmxhY2VNZXRob2QgPSB0aGlzLnJlYWRVaW50OCgpO1xuICAgIH1cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyMxMVBMVEVcbiAgICBkZWNvZGVQTFRFKGxlbmd0aCkge1xuICAgICAgICBpZiAobGVuZ3RoICUgMyAhPT0gMCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYFBMVEUgZmllbGQgbGVuZ3RoIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAzLiBHb3QgJHtsZW5ndGh9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgbCA9IGxlbmd0aCAvIDM7XG4gICAgICAgIHRoaXMuX2hhc1BhbGV0dGUgPSB0cnVlO1xuICAgICAgICBjb25zdCBwYWxldHRlID0gW107XG4gICAgICAgIHRoaXMuX3BhbGV0dGUgPSBwYWxldHRlO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgcGFsZXR0ZS5wdXNoKFt0aGlzLnJlYWRVaW50OCgpLCB0aGlzLnJlYWRVaW50OCgpLCB0aGlzLnJlYWRVaW50OCgpXSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jMTFJREFUXG4gICAgZGVjb2RlSURBVChsZW5ndGgpIHtcbiAgICAgICAgdGhpcy5faW5mbGF0b3IucHVzaChuZXcgVWludDhBcnJheSh0aGlzLmJ1ZmZlciwgdGhpcy5vZmZzZXQgKyB0aGlzLmJ5dGVPZmZzZXQsIGxlbmd0aCkpO1xuICAgICAgICB0aGlzLnNraXAobGVuZ3RoKTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jMTF0Uk5TXG4gICAgZGVjb2RldFJOUyhsZW5ndGgpIHtcbiAgICAgICAgLy8gVE9ETzogc3VwcG9ydCBvdGhlciBjb2xvciB0eXBlcy5cbiAgICAgICAgaWYgKHRoaXMuX2NvbG9yVHlwZSA9PT0gMykge1xuICAgICAgICAgICAgaWYgKGxlbmd0aCA+IHRoaXMuX3BhbGV0dGUubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGB0Uk5TIGNodW5rIGNvbnRhaW5zIG1vcmUgYWxwaGEgdmFsdWVzIHRoYW4gdGhlcmUgYXJlIHBhbGV0dGUgY29sb3JzICgke2xlbmd0aH0gdnMgJHt0aGlzLl9wYWxldHRlLmxlbmd0aH0pYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBsZXQgaSA9IDA7XG4gICAgICAgICAgICBmb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYWxwaGEgPSB0aGlzLnJlYWRCeXRlKCk7XG4gICAgICAgICAgICAgICAgdGhpcy5fcGFsZXR0ZVtpXS5wdXNoKGFscGhhKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZvciAoOyBpIDwgdGhpcy5fcGFsZXR0ZS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXMuX3BhbGV0dGVbaV0ucHVzaCgyNTUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzExdEVYdFxuICAgIGRlY29kZXRFWHQobGVuZ3RoKSB7XG4gICAgICAgIGxldCBrZXl3b3JkID0gJyc7XG4gICAgICAgIGxldCBjaGFyO1xuICAgICAgICB3aGlsZSAoKGNoYXIgPSB0aGlzLnJlYWRDaGFyKCkpICE9PSBOVUxMKSB7XG4gICAgICAgICAgICBrZXl3b3JkICs9IGNoYXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fcG5nLnRleHRba2V5d29yZF0gPSB0aGlzLnJlYWRDaGFycyhsZW5ndGggLSBrZXl3b3JkLmxlbmd0aCAtIDEpO1xuICAgIH1cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyMxMXBIWXNcbiAgICBkZWNvZGVwSFlzKCkge1xuICAgICAgICBjb25zdCBwcHVYID0gdGhpcy5yZWFkVWludDMyKCk7XG4gICAgICAgIGNvbnN0IHBwdVkgPSB0aGlzLnJlYWRVaW50MzIoKTtcbiAgICAgICAgY29uc3QgdW5pdFNwZWNpZmllciA9IHRoaXMucmVhZEJ5dGUoKTtcbiAgICAgICAgdGhpcy5fcG5nLnJlc29sdXRpb24gPSB7IHg6IHBwdVgsIHk6IHBwdVksIHVuaXQ6IHVuaXRTcGVjaWZpZXIgfTtcbiAgICB9XG4gICAgZGVjb2RlSW1hZ2UoKSB7XG4gICAgICAgIGlmICh0aGlzLl9pbmZsYXRvci5lcnIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgRXJyb3Igd2hpbGUgZGVjb21wcmVzc2luZyB0aGUgZGF0YTogJHt0aGlzLl9pbmZsYXRvci5lcnJ9YCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZGF0YSA9IHRoaXMuX2luZmxhdG9yLnJlc3VsdDtcbiAgICAgICAgaWYgKHRoaXMuX2ZpbHRlck1ldGhvZCAhPT0gRmlsdGVyTWV0aG9kLkFEQVBUSVZFKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEZpbHRlciBtZXRob2QgJHt0aGlzLl9maWx0ZXJNZXRob2R9IG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faW50ZXJsYWNlTWV0aG9kID09PSBJbnRlcmxhY2VNZXRob2QuTk9fSU5URVJMQUNFKSB7XG4gICAgICAgICAgICB0aGlzLmRlY29kZUludGVybGFjZU51bGwoZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYEludGVybGFjZSBtZXRob2QgJHt0aGlzLl9pbnRlcmxhY2VNZXRob2R9IG5vdCBzdXBwb3J0ZWRgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBkZWNvZGVJbnRlcmxhY2VOdWxsKGRhdGEpIHtcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gdGhpcy5fcG5nLmhlaWdodDtcbiAgICAgICAgY29uc3QgYnl0ZXNQZXJQaXhlbCA9ICh0aGlzLl9wbmcuY2hhbm5lbHMgKiB0aGlzLl9wbmcuZGVwdGgpIC8gODtcbiAgICAgICAgY29uc3QgYnl0ZXNQZXJMaW5lID0gdGhpcy5fcG5nLndpZHRoICogYnl0ZXNQZXJQaXhlbDtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBVaW50OEFycmF5KHRoaXMuX3BuZy5oZWlnaHQgKiBieXRlc1BlckxpbmUpO1xuICAgICAgICBsZXQgcHJldkxpbmUgPSBlbXB0eTtcbiAgICAgICAgbGV0IG9mZnNldCA9IDA7XG4gICAgICAgIGxldCBjdXJyZW50TGluZTtcbiAgICAgICAgbGV0IG5ld0xpbmU7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGVpZ2h0OyBpKyspIHtcbiAgICAgICAgICAgIGN1cnJlbnRMaW5lID0gZGF0YS5zdWJhcnJheShvZmZzZXQgKyAxLCBvZmZzZXQgKyAxICsgYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgICAgIG5ld0xpbmUgPSBuZXdEYXRhLnN1YmFycmF5KGkgKiBieXRlc1BlckxpbmUsIChpICsgMSkgKiBieXRlc1BlckxpbmUpO1xuICAgICAgICAgICAgc3dpdGNoIChkYXRhW29mZnNldF0pIHtcbiAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgIHVuZmlsdGVyTm9uZShjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgICAgICAgICB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICB1bmZpbHRlclVwKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lKTtcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICB1bmZpbHRlckF2ZXJhZ2UoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgICAgICAgICAgIHVuZmlsdGVyUGFldGgoY3VycmVudExpbmUsIG5ld0xpbmUsIHByZXZMaW5lLCBieXRlc1BlckxpbmUsIGJ5dGVzUGVyUGl4ZWwpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuc3VwcG9ydGVkIGZpbHRlcjogJHtkYXRhW29mZnNldF19YCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwcmV2TGluZSA9IG5ld0xpbmU7XG4gICAgICAgICAgICBvZmZzZXQgKz0gYnl0ZXNQZXJMaW5lICsgMTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5faGFzUGFsZXR0ZSkge1xuICAgICAgICAgICAgdGhpcy5fcG5nLnBhbGV0dGUgPSB0aGlzLl9wYWxldHRlO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLl9wbmcuZGVwdGggPT09IDE2KSB7XG4gICAgICAgICAgICBjb25zdCB1aW50MTZEYXRhID0gbmV3IFVpbnQxNkFycmF5KG5ld0RhdGEuYnVmZmVyKTtcbiAgICAgICAgICAgIGlmIChvc0lzTGl0dGxlRW5kaWFuKSB7XG4gICAgICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB1aW50MTZEYXRhLmxlbmd0aDsgaysrKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFBORyBpcyBhbHdheXMgYmlnIGVuZGlhbi4gU3dhcCB0aGUgYnl0ZXMuXG4gICAgICAgICAgICAgICAgICAgIHVpbnQxNkRhdGFba10gPSBzd2FwMTYodWludDE2RGF0YVtrXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fcG5nLmRhdGEgPSB1aW50MTZEYXRhO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcG5nLmRhdGEgPSBuZXdEYXRhO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdW5maWx0ZXJOb25lKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBieXRlc1BlckxpbmUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgIG5ld0xpbmVbaV0gPSBjdXJyZW50TGluZVtpXTtcbiAgICB9XG59XG5mdW5jdGlvbiB1bmZpbHRlclN1YihjdXJyZW50TGluZSwgbmV3TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgIC8vIGp1c3QgY29weSBmaXJzdCBieXRlc1xuICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgfVxuICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgfVxufVxuZnVuY3Rpb24gdW5maWx0ZXJVcChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIGp1c3QgY29weSBieXRlcyBmb3IgZmlyc3QgbGluZVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJMaW5lOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSAoY3VycmVudExpbmVbaV0gKyBwcmV2TGluZVtpXSkgJiAweGZmO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdW5maWx0ZXJBdmVyYWdlKGN1cnJlbnRMaW5lLCBuZXdMaW5lLCBwcmV2TGluZSwgYnl0ZXNQZXJMaW5lLCBieXRlc1BlclBpeGVsKSB7XG4gICAgbGV0IGkgPSAwO1xuICAgIGlmIChwcmV2TGluZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlclBpeGVsOyBpKyspIHtcbiAgICAgICAgICAgIG5ld0xpbmVbaV0gPSBjdXJyZW50TGluZVtpXTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgKG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdID4+IDEpKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgKHByZXZMaW5lW2ldID4+IDEpKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9XG4gICAgICAgICAgICAgICAgKGN1cnJlbnRMaW5lW2ldICsgKChuZXdMaW5lW2kgLSBieXRlc1BlclBpeGVsXSArIHByZXZMaW5lW2ldKSA+PiAxKSkgJlxuICAgICAgICAgICAgICAgICAgICAweGZmO1xuICAgICAgICB9XG4gICAgfVxufVxuZnVuY3Rpb24gdW5maWx0ZXJQYWV0aChjdXJyZW50TGluZSwgbmV3TGluZSwgcHJldkxpbmUsIGJ5dGVzUGVyTGluZSwgYnl0ZXNQZXJQaXhlbCkge1xuICAgIGxldCBpID0gMDtcbiAgICBpZiAocHJldkxpbmUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gY3VycmVudExpbmVbaV07XG4gICAgICAgIH1cbiAgICAgICAgZm9yICg7IGkgPCBieXRlc1BlckxpbmU7IGkrKykge1xuICAgICAgICAgICAgbmV3TGluZVtpXSA9IChjdXJyZW50TGluZVtpXSArIG5ld0xpbmVbaSAtIGJ5dGVzUGVyUGl4ZWxdKSAmIDB4ZmY7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIGZvciAoOyBpIDwgYnl0ZXNQZXJQaXhlbDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID0gKGN1cnJlbnRMaW5lW2ldICsgcHJldkxpbmVbaV0pICYgMHhmZjtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKDsgaSA8IGJ5dGVzUGVyTGluZTsgaSsrKSB7XG4gICAgICAgICAgICBuZXdMaW5lW2ldID1cbiAgICAgICAgICAgICAgICAoY3VycmVudExpbmVbaV0gK1xuICAgICAgICAgICAgICAgICAgICBwYWV0aFByZWRpY3RvcihuZXdMaW5lW2kgLSBieXRlc1BlclBpeGVsXSwgcHJldkxpbmVbaV0sIHByZXZMaW5lW2kgLSBieXRlc1BlclBpeGVsXSkpICZcbiAgICAgICAgICAgICAgICAgICAgMHhmZjtcbiAgICAgICAgfVxuICAgIH1cbn1cbmZ1bmN0aW9uIHBhZXRoUHJlZGljdG9yKGEsIGIsIGMpIHtcbiAgICBjb25zdCBwID0gYSArIGIgLSBjO1xuICAgIGNvbnN0IHBhID0gTWF0aC5hYnMocCAtIGEpO1xuICAgIGNvbnN0IHBiID0gTWF0aC5hYnMocCAtIGIpO1xuICAgIGNvbnN0IHBjID0gTWF0aC5hYnMocCAtIGMpO1xuICAgIGlmIChwYSA8PSBwYiAmJiBwYSA8PSBwYylcbiAgICAgICAgcmV0dXJuIGE7XG4gICAgZWxzZSBpZiAocGIgPD0gcGMpXG4gICAgICAgIHJldHVybiBiO1xuICAgIGVsc2VcbiAgICAgICAgcmV0dXJuIGM7XG59XG5mdW5jdGlvbiBzd2FwMTYodmFsKSB7XG4gICAgcmV0dXJuICgodmFsICYgMHhmZikgPDwgOCkgfCAoKHZhbCA+PiA4KSAmIDB4ZmYpO1xufVxuZnVuY3Rpb24gY2hlY2tCaXREZXB0aCh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSAhPT0gMSAmJlxuICAgICAgICB2YWx1ZSAhPT0gMiAmJlxuICAgICAgICB2YWx1ZSAhPT0gNCAmJlxuICAgICAgICB2YWx1ZSAhPT0gOCAmJlxuICAgICAgICB2YWx1ZSAhPT0gMTYpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBpbnZhbGlkIGJpdCBkZXB0aDogJHt2YWx1ZX1gKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UE5HRGVjb2Rlci5qcy5tYXAiLCJpbXBvcnQgeyBJT0J1ZmZlciB9IGZyb20gJ2lvYnVmZmVyJztcbmltcG9ydCB7IGRlZmxhdGUgfSBmcm9tICdwYWtvJztcbmltcG9ydCB7IHBuZ1NpZ25hdHVyZSwgY3JjIH0gZnJvbSAnLi9jb21tb24nO1xuaW1wb3J0IHsgQ29sb3JUeXBlLCBDb21wcmVzc2lvbk1ldGhvZCwgRmlsdGVyTWV0aG9kLCBJbnRlcmxhY2VNZXRob2QsIH0gZnJvbSAnLi9pbnRlcm5hbFR5cGVzJztcbmNvbnN0IGRlZmF1bHRabGliT3B0aW9ucyA9IHtcbiAgICBsZXZlbDogMyxcbn07XG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQTkdFbmNvZGVyIGV4dGVuZHMgSU9CdWZmZXIge1xuICAgIGNvbnN0cnVjdG9yKGRhdGEsIG9wdGlvbnMgPSB7fSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLl9jb2xvclR5cGUgPSBDb2xvclR5cGUuVU5LTk9XTjtcbiAgICAgICAgdGhpcy5femxpYk9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0WmxpYk9wdGlvbnMsIG9wdGlvbnMuemxpYik7XG4gICAgICAgIHRoaXMuX3BuZyA9IHRoaXMuX2NoZWNrRGF0YShkYXRhKTtcbiAgICAgICAgdGhpcy5zZXRCaWdFbmRpYW4oKTtcbiAgICB9XG4gICAgZW5jb2RlKCkge1xuICAgICAgICB0aGlzLmVuY29kZVNpZ25hdHVyZSgpO1xuICAgICAgICB0aGlzLmVuY29kZUlIRFIoKTtcbiAgICAgICAgdGhpcy5lbmNvZGVEYXRhKCk7XG4gICAgICAgIHRoaXMuZW5jb2RlSUVORCgpO1xuICAgICAgICByZXR1cm4gdGhpcy50b0FycmF5KCk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzVQTkctZmlsZS1zaWduYXR1cmVcbiAgICBlbmNvZGVTaWduYXR1cmUoKSB7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlcyhwbmdTaWduYXR1cmUpO1xuICAgIH1cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvUE5HLyMxMUlIRFJcbiAgICBlbmNvZGVJSERSKCkge1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKDEzKTtcbiAgICAgICAgdGhpcy53cml0ZUNoYXJzKCdJSERSJyk7XG4gICAgICAgIHRoaXMud3JpdGVVaW50MzIodGhpcy5fcG5nLndpZHRoKTtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQzMih0aGlzLl9wbmcuaGVpZ2h0KTtcbiAgICAgICAgdGhpcy53cml0ZUJ5dGUodGhpcy5fcG5nLmRlcHRoKTtcbiAgICAgICAgdGhpcy53cml0ZUJ5dGUodGhpcy5fY29sb3JUeXBlKTtcbiAgICAgICAgdGhpcy53cml0ZUJ5dGUoQ29tcHJlc3Npb25NZXRob2QuREVGTEFURSk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlKEZpbHRlck1ldGhvZC5BREFQVElWRSk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlKEludGVybGFjZU1ldGhvZC5OT19JTlRFUkxBQ0UpO1xuICAgICAgICB0aGlzLndyaXRlQ3JjKDE3KTtcbiAgICB9XG4gICAgLy8gaHR0cHM6Ly93d3cudzMub3JnL1RSL1BORy8jMTFJRU5EXG4gICAgZW5jb2RlSUVORCgpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQzMigwKTtcbiAgICAgICAgdGhpcy53cml0ZUNoYXJzKCdJRU5EJyk7XG4gICAgICAgIHRoaXMud3JpdGVDcmMoNCk7XG4gICAgfVxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9QTkcvIzExSURBVFxuICAgIGVuY29kZUlEQVQoZGF0YSkge1xuICAgICAgICB0aGlzLndyaXRlVWludDMyKGRhdGEubGVuZ3RoKTtcbiAgICAgICAgdGhpcy53cml0ZUNoYXJzKCdJREFUJyk7XG4gICAgICAgIHRoaXMud3JpdGVCeXRlcyhkYXRhKTtcbiAgICAgICAgdGhpcy53cml0ZUNyYyhkYXRhLmxlbmd0aCArIDQpO1xuICAgIH1cbiAgICBlbmNvZGVEYXRhKCkge1xuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQsIGNoYW5uZWxzLCBkZXB0aCwgZGF0YSB9ID0gdGhpcy5fcG5nO1xuICAgICAgICBjb25zdCBzbG90c1BlckxpbmUgPSBjaGFubmVscyAqIHdpZHRoO1xuICAgICAgICBjb25zdCBuZXdEYXRhID0gbmV3IElPQnVmZmVyKCkuc2V0QmlnRW5kaWFuKCk7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7XG4gICAgICAgICAgICBuZXdEYXRhLndyaXRlQnl0ZSgwKTsgLy8gbm8gZmlsdGVyXG4gICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgICAgICAgaWYgKGRlcHRoID09PSA4KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gd3JpdGVEYXRhQnl0ZXMoZGF0YSwgbmV3RGF0YSwgc2xvdHNQZXJMaW5lLCBvZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoZGVwdGggPT09IDE2KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gd3JpdGVEYXRhVWludDE2KGRhdGEsIG5ld0RhdGEsIHNsb3RzUGVyTGluZSwgb2Zmc2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXdEYXRhLnRvQXJyYXkoKTtcbiAgICAgICAgY29uc3QgY29tcHJlc3NlZCA9IGRlZmxhdGUoYnVmZmVyLCB0aGlzLl96bGliT3B0aW9ucyk7XG4gICAgICAgIHRoaXMuZW5jb2RlSURBVChjb21wcmVzc2VkKTtcbiAgICB9XG4gICAgX2NoZWNrRGF0YShkYXRhKSB7XG4gICAgICAgIGNvbnN0IHsgY29sb3JUeXBlLCBjaGFubmVscywgZGVwdGggfSA9IGdldENvbG9yVHlwZShkYXRhKTtcbiAgICAgICAgY29uc3QgcG5nID0ge1xuICAgICAgICAgICAgd2lkdGg6IGNoZWNrSW50ZWdlcihkYXRhLndpZHRoLCAnd2lkdGgnKSxcbiAgICAgICAgICAgIGhlaWdodDogY2hlY2tJbnRlZ2VyKGRhdGEuaGVpZ2h0LCAnaGVpZ2h0JyksXG4gICAgICAgICAgICBjaGFubmVsczogY2hhbm5lbHMsXG4gICAgICAgICAgICBkYXRhOiBkYXRhLmRhdGEsXG4gICAgICAgICAgICBkZXB0aDogZGVwdGgsXG4gICAgICAgICAgICB0ZXh0OiB7fSxcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5fY29sb3JUeXBlID0gY29sb3JUeXBlO1xuICAgICAgICBjb25zdCBleHBlY3RlZFNpemUgPSBwbmcud2lkdGggKiBwbmcuaGVpZ2h0ICogY2hhbm5lbHM7XG4gICAgICAgIGlmIChwbmcuZGF0YS5sZW5ndGggIT09IGV4cGVjdGVkU2l6ZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYHdyb25nIGRhdGEgc2l6ZS4gRm91bmQgJHtwbmcuZGF0YS5sZW5ndGh9LCBleHBlY3RlZCAke2V4cGVjdGVkU2l6ZX1gKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcG5nO1xuICAgIH1cbiAgICB3cml0ZUNyYyhsZW5ndGgpIHtcbiAgICAgICAgdGhpcy53cml0ZVVpbnQzMihjcmMobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIsIHRoaXMuYnl0ZU9mZnNldCArIHRoaXMub2Zmc2V0IC0gbGVuZ3RoLCBsZW5ndGgpLCBsZW5ndGgpKTtcbiAgICB9XG59XG5mdW5jdGlvbiBjaGVja0ludGVnZXIodmFsdWUsIG5hbWUpIHtcbiAgICBpZiAoTnVtYmVyLmlzSW50ZWdlcih2YWx1ZSkgJiYgdmFsdWUgPiAwKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgJHtuYW1lfSBtdXN0IGJlIGEgcG9zaXRpdmUgaW50ZWdlcmApO1xufVxuZnVuY3Rpb24gZ2V0Q29sb3JUeXBlKGRhdGEpIHtcbiAgICBjb25zdCB7IGNoYW5uZWxzID0gNCwgZGVwdGggPSA4IH0gPSBkYXRhO1xuICAgIGlmIChjaGFubmVscyAhPT0gNCAmJiBjaGFubmVscyAhPT0gMyAmJiBjaGFubmVscyAhPT0gMiAmJiBjaGFubmVscyAhPT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihgdW5zdXBwb3J0ZWQgbnVtYmVyIG9mIGNoYW5uZWxzOiAke2NoYW5uZWxzfWApO1xuICAgIH1cbiAgICBpZiAoZGVwdGggIT09IDggJiYgZGVwdGggIT09IDE2KSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1bnN1cHBvcnRlZCBiaXQgZGVwdGg6ICR7ZGVwdGh9YCk7XG4gICAgfVxuICAgIGNvbnN0IHJldHVyblZhbHVlID0geyBjaGFubmVscywgZGVwdGgsIGNvbG9yVHlwZTogQ29sb3JUeXBlLlVOS05PV04gfTtcbiAgICBzd2l0Y2ggKGNoYW5uZWxzKSB7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIHJldHVyblZhbHVlLmNvbG9yVHlwZSA9IENvbG9yVHlwZS5UUlVFQ09MT1VSX0FMUEhBO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICAgIHJldHVyblZhbHVlLmNvbG9yVHlwZSA9IENvbG9yVHlwZS5UUlVFQ09MT1VSO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgIHJldHVyblZhbHVlLmNvbG9yVHlwZSA9IENvbG9yVHlwZS5HUkVZU0NBTEU7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuVmFsdWUuY29sb3JUeXBlID0gQ29sb3JUeXBlLkdSRVlTQ0FMRV9BTFBIQTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCd1bnN1cHBvcnRlZCBudW1iZXIgb2YgY2hhbm5lbHMnKTtcbiAgICB9XG4gICAgcmV0dXJuIHJldHVyblZhbHVlO1xufVxuZnVuY3Rpb24gd3JpdGVEYXRhQnl0ZXMoZGF0YSwgbmV3RGF0YSwgc2xvdHNQZXJMaW5lLCBvZmZzZXQpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHNsb3RzUGVyTGluZTsgaisrKSB7XG4gICAgICAgIG5ld0RhdGEud3JpdGVCeXRlKGRhdGFbb2Zmc2V0KytdKTtcbiAgICB9XG4gICAgcmV0dXJuIG9mZnNldDtcbn1cbmZ1bmN0aW9uIHdyaXRlRGF0YVVpbnQxNihkYXRhLCBuZXdEYXRhLCBzbG90c1BlckxpbmUsIG9mZnNldCkge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2xvdHNQZXJMaW5lOyBqKyspIHtcbiAgICAgICAgbmV3RGF0YS53cml0ZVVpbnQxNihkYXRhW29mZnNldCsrXSk7XG4gICAgfVxuICAgIHJldHVybiBvZmZzZXQ7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QTkdFbmNvZGVyLmpzLm1hcCIsImV4cG9ydCB2YXIgUmVzb2x1dGlvblVuaXRTcGVjaWZpZXI7XG4oZnVuY3Rpb24gKFJlc29sdXRpb25Vbml0U3BlY2lmaWVyKSB7XG4gICAgLyoqXG4gICAgICogVW5pdCBpcyB1bmtub3duXG4gICAgICovXG4gICAgUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbUmVzb2x1dGlvblVuaXRTcGVjaWZpZXJbXCJVTktOT1dOXCJdID0gMF0gPSBcIlVOS05PV05cIjtcbiAgICAvKipcbiAgICAgKiBVbml0IGlzIHRoZSBtZXRyZVxuICAgICAqL1xuICAgIFJlc29sdXRpb25Vbml0U3BlY2lmaWVyW1Jlc29sdXRpb25Vbml0U3BlY2lmaWVyW1wiTUVUUkVcIl0gPSAxXSA9IFwiTUVUUkVcIjtcbn0pKFJlc29sdXRpb25Vbml0U3BlY2lmaWVyIHx8IChSZXNvbHV0aW9uVW5pdFNwZWNpZmllciA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD10eXBlcy5qcy5tYXAiLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG5cbmxldCBjaGFycyA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJztcblxuLy8gVXNlIGEgbG9va3VwIHRhYmxlIHRvIGZpbmQgdGhlIGluZGV4LlxubGV0IGxvb2t1cCA9IG5ldyBVaW50OEFycmF5KDI1Nik7XG5mb3IgKGxldCBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gIGxvb2t1cFtjaGFycy5jaGFyQ29kZUF0KGkpXSA9IGk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoYnl0ZXMpIHtcbiAgbGV0IGk7XG4gIGxldCBsZW4gPSBieXRlcy5sZW5ndGg7XG4gIGxldCBiYXNlNjQgPSAnJztcblxuICBmb3IgKGkgPSAwOyBpIDwgbGVuOyBpICs9IDMpIHtcbiAgICBiYXNlNjQgKz0gY2hhcnNbYnl0ZXNbaV0gPj4gMl07XG4gICAgYmFzZTY0ICs9IGNoYXJzWygoYnl0ZXNbaV0gJiAzKSA8PCA0KSB8IChieXRlc1tpICsgMV0gPj4gNCldO1xuICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpICsgMl0gJiA2M107XG4gIH1cblxuICBpZiAobGVuICUgMyA9PT0gMikge1xuICAgIGJhc2U2NCA9IGAke2Jhc2U2NC5zdWJzdHJpbmcoMCwgYmFzZTY0Lmxlbmd0aCAtIDEpfT1gO1xuICB9IGVsc2UgaWYgKGxlbiAlIDMgPT09IDEpIHtcbiAgICBiYXNlNjQgPSBgJHtiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAyKX09PWA7XG4gIH1cblxuICByZXR1cm4gYmFzZTY0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGJhc2U2NCkge1xuICBsZXQgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzU7XG4gIGxldCBsZW4gPSBiYXNlNjQubGVuZ3RoO1xuICBsZXQgcCA9IDA7XG4gIGxldCBlbmNvZGVkMSwgZW5jb2RlZDIsIGVuY29kZWQzLCBlbmNvZGVkNDtcblxuICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gJz0nKSB7XG4gICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09ICc9Jykge1xuICAgICAgYnVmZmVyTGVuZ3RoLS07XG4gICAgfVxuICB9XG5cbiAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShidWZmZXJMZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpICs9IDQpIHtcbiAgICBlbmNvZGVkMSA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpKV07XG4gICAgZW5jb2RlZDIgPSBsb29rdXBbYmFzZTY0LmNoYXJDb2RlQXQoaSArIDEpXTtcbiAgICBlbmNvZGVkMyA9IGxvb2t1cFtiYXNlNjQuY2hhckNvZGVBdChpICsgMildO1xuICAgIGVuY29kZWQ0ID0gbG9va3VwW2Jhc2U2NC5jaGFyQ29kZUF0KGkgKyAzKV07XG5cbiAgICBieXRlc1twKytdID0gKGVuY29kZWQxIDw8IDIpIHwgKGVuY29kZWQyID4+IDQpO1xuICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQyICYgMTUpIDw8IDQpIHwgKGVuY29kZWQzID4+IDIpO1xuICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gIH1cblxuICByZXR1cm4gYnl0ZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0b0Jhc2U2NFVSTCh1OCwgdHlwZSkge1xuICBjb25zdCBiYXNlNjQgPSBlbmNvZGUodTgpO1xuICByZXR1cm4gYGRhdGE6JHt0eXBlfTtiYXNlNjQsJHtiYXNlNjR9YDtcbn1cbiIsImNvbnN0IGVudiA9ICdicm93c2VyJztcbmNvbnN0IEltYWdlRGF0YSA9IHNlbGYuSW1hZ2VEYXRhO1xuY29uc3QgRE9NSW1hZ2UgPSBzZWxmLkltYWdlO1xuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ2FudmFzKHdpZHRoLCBoZWlnaHQpIHtcbiAgbGV0IGNhbnZhcyA9IHNlbGYuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnY2FudmFzJyk7XG4gIGNhbnZhcy53aWR0aCA9IHdpZHRoO1xuICBjYW52YXMuaGVpZ2h0ID0gaGVpZ2h0O1xuICByZXR1cm4gY2FudmFzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZmV0Y2hCaW5hcnkodXJsLCB7IHdpdGhDcmVkZW50aWFscyA9IGZhbHNlIH0gPSB7fSkge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCB4aHIgPSBuZXcgc2VsZi5YTUxIdHRwUmVxdWVzdCgpO1xuICAgIHhoci5vcGVuKCdHRVQnLCB1cmwsIHRydWUpO1xuICAgIHhoci5yZXNwb25zZVR5cGUgPSAnYXJyYXlidWZmZXInO1xuICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB3aXRoQ3JlZGVudGlhbHM7XG5cbiAgICB4aHIub25sb2FkID0gZnVuY3Rpb24gKGUpIHtcbiAgICAgIGlmICh0aGlzLnN0YXR1cyAhPT0gMjAwKSByZWplY3QoZSk7XG4gICAgICBlbHNlIHJlc29sdmUodGhpcy5yZXNwb25zZSk7XG4gICAgfTtcbiAgICB4aHIub25lcnJvciA9IHJlamVjdDtcbiAgICB4aHIuc2VuZCgpO1xuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVdyaXRlU3RyZWFtKCkge1xuICB0aHJvdyBuZXcgRXJyb3IoJ2NyZWF0ZVdyaXRlU3RyZWFtIGRvZXMgbm90IGV4aXN0IGluIHRoZSBicm93c2VyJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZUZpbGUoKSB7XG4gIHRocm93IG5ldyBFcnJvcignd3JpdGVGaWxlIGRvZXMgbm90IGV4aXN0IGluIHRoZSBicm93c2VyJyk7XG59XG5cbmV4cG9ydCB7IGVudiwgSW1hZ2VEYXRhLCBET01JbWFnZSB9O1xuIiwiaW1wb3J0IHsgY2FudmFzVG9CbG9iIH0gZnJvbSAnYmxvYi11dGlsJztcbmltcG9ydCB7IGVuY29kZSBhcyBlbmNvZGVCbXAgfSBmcm9tICdmYXN0LWJtcCc7XG5pbXBvcnQgeyBlbmNvZGUgYXMgcmVhbEVuY29kZVBuZyB9IGZyb20gJ2Zhc3QtcG5nJztcbmltcG9ydCB7IGVuY29kZSBhcyByZWFsRW5jb2RlSnBlZyB9IGZyb20gJ2pwZWctanMnO1xuXG5pbXBvcnQgeyB0b0Jhc2U2NFVSTCB9IGZyb20gJy4uLy4uL3V0aWwvYmFzZTY0JztcblxuaW1wb3J0IHtcbiAgSW1hZ2VEYXRhLFxuICBjcmVhdGVDYW52YXMsXG4gIGNyZWF0ZVdyaXRlU3RyZWFtLFxuICB3cml0ZUZpbGUsXG59IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuaW1wb3J0IHsgZ2V0VHlwZSB9IGZyb20gJy4vbWVkaWFUeXBlcyc7XG5cbmZ1bmN0aW9uIGVuY29kZUpwZWcoaW1hZ2UsIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCBkYXRhID0ge1xuICAgIHdpZHRoOiBpbWFnZS53aWR0aCxcbiAgICBoZWlnaHQ6IGltYWdlLmhlaWdodCxcbiAgICBkYXRhOiBpbWFnZS5nZXRSR0JBRGF0YSgpLFxuICB9O1xuICByZXR1cm4gcmVhbEVuY29kZUpwZWcoZGF0YSwgb3B0aW9ucy5xdWFsaXR5KS5kYXRhO1xufVxuXG5mdW5jdGlvbiBlbmNvZGVQbmcoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgY29uc3QgZGF0YSA9IHtcbiAgICB3aWR0aDogaW1hZ2Uud2lkdGgsXG4gICAgaGVpZ2h0OiBpbWFnZS5oZWlnaHQsXG4gICAgY2hhbm5lbHM6IGltYWdlLmNoYW5uZWxzLFxuICAgIGRlcHRoOiBpbWFnZS5iaXREZXB0aCxcbiAgICBkYXRhOiBpbWFnZS5kYXRhLFxuICB9O1xuXG4gIGlmIChkYXRhLmRlcHRoID09PSAxIHx8IGRhdGEuZGVwdGggPT09IDMyKSB7XG4gICAgZGF0YS5kZXB0aCA9IDg7XG4gICAgZGF0YS5jaGFubmVscyA9IDQ7XG4gICAgZGF0YS5kYXRhID0gaW1hZ2UuZ2V0UkdCQURhdGEoKTtcbiAgfVxuXG4gIHJldHVybiByZWFsRW5jb2RlUG5nKGRhdGEsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBleHBvcnRNZXRob2RzID0ge1xuICAvKipcbiAgICogU2F2ZSB0aGUgaW1hZ2UgdG8gZGlzayAoTm9kZS5qcyBvbmx5KVxuICAgKiBAbWVtYmVyb2YgSW1hZ2VcbiAgICogQGluc3RhbmNlXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmZvcm1hdF0gLSBPbmUgb2Y6IHBuZywganBnLCBibXAgKGxpbWl0ZWQgc3VwcG9ydCBmb3IgYm1wKS4gSWYgbm90IHNwZWNpZmllZCB3aWxsIHRyeSB0byBpbmZlciBmcm9tIGZpbGVuYW1lXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlQ2FudmFzPWZhbHNlXSAtIEZvcmNlIHVzZSBvZiB0aGUgY2FudmFzIEFQSSB0byBzYXZlIHRoZSBpbWFnZSBpbnN0ZWFkIG9mIGEgSmF2YVNjcmlwdCBpbXBsZW1lbnRhdGlvblxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuZW5jb2Rlcl0gLSBTcGVjaWZ5IG9wdGlvbnMgZm9yIHRoZSBlbmNvZGVyIGlmIGFwcGxpY2FibGUuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9IC0gUmVzb2x2ZXMgd2hlbiB0aGUgZmlsZSBpcyBmdWxseSB3cml0dGVuXG4gICAqL1xuICBzYXZlKHBhdGgsIG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgdXNlQ2FudmFzID0gZmFsc2UsIGVuY29kZXI6IGVuY29kZXJPcHRpb25zID0gdW5kZWZpbmVkIH0gPSBvcHRpb25zO1xuXG4gICAgbGV0IHsgZm9ybWF0IH0gPSBvcHRpb25zO1xuICAgIGlmICghZm9ybWF0KSB7XG4gICAgICAvLyB0cnkgdG8gaW5mZXIgZm9ybWF0IGZyb20gZmlsZW5hbWVcbiAgICAgIGNvbnN0IG0gPSAvXFwuKD88Zm9ybWF0PlthLXpBLVpdKykkLy5leGVjKHBhdGgpO1xuICAgICAgaWYgKG0pIHtcbiAgICAgICAgZm9ybWF0ID0gbS5ncm91cHMuZm9ybWF0LnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghZm9ybWF0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ZpbGUgZm9ybWF0IG5vdCBwcm92aWRlZCcpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHN0cmVhbSwgYnVmZmVyO1xuICAgICAgc3dpdGNoIChmb3JtYXQudG9Mb3dlckNhc2UoKSkge1xuICAgICAgICBjYXNlICdwbmcnOiB7XG4gICAgICAgICAgaWYgKHVzZUNhbnZhcykge1xuICAgICAgICAgICAgc3RyZWFtID0gdGhpcy5nZXRDYW52YXMoKS5wbmdTdHJlYW0oKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyID0gZW5jb2RlUG5nKHRoaXMsIGVuY29kZXJPcHRpb25zKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnanBnJzpcbiAgICAgICAgY2FzZSAnanBlZyc6XG4gICAgICAgICAgaWYgKHVzZUNhbnZhcykge1xuICAgICAgICAgICAgc3RyZWFtID0gdGhpcy5nZXRDYW52YXMoKS5qcGVnU3RyZWFtKCk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJ1ZmZlciA9IGVuY29kZUpwZWcodGhpcywgZW5jb2Rlck9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAnYm1wJzpcbiAgICAgICAgICBidWZmZXIgPSBlbmNvZGVCbXAodGhpcywgZW5jb2Rlck9wdGlvbnMpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBpbnZhbGlkIG91dHB1dCBmb3JtYXQ6ICR7Zm9ybWF0fWApO1xuICAgICAgfVxuICAgICAgaWYgKHN0cmVhbSkge1xuICAgICAgICBsZXQgb3V0ID0gY3JlYXRlV3JpdGVTdHJlYW0ocGF0aCk7XG4gICAgICAgIG91dC5vbignZmluaXNoJywgcmVzb2x2ZSk7XG4gICAgICAgIG91dC5vbignZXJyb3InLCByZWplY3QpO1xuICAgICAgICBzdHJlYW0ucGlwZShvdXQpO1xuICAgICAgfSBlbHNlIGlmIChidWZmZXIpIHtcbiAgICAgICAgd3JpdGVGaWxlKHBhdGgsIGJ1ZmZlciwgKGVycikgPT4ge1xuICAgICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAgIHJlamVjdChlcnIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXNvbHZlKCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgZGF0YVVSTCBzdHJpbmcgZnJvbSB0aGUgaW1hZ2UuXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPSdpbWFnZS9wbmcnXVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMudXNlQ2FudmFzPWZhbHNlXSAtIEZvcmNlIHVzZSBvZiB0aGUgY2FudmFzIEFQSSB0byBzYXZlIHRoZSBpbWFnZSBpbnN0ZWFkIG9mIEphdmFTY3JpcHQgaW1wbGVtZW50YXRpb24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5lbmNvZGVyXSAtIFNwZWNpZnkgb3B0aW9ucyBmb3IgdGhlIGVuY29kZXIgaWYgYXBwbGljYWJsZS5cbiAgICogQHJldHVybiB7c3RyaW5nfFByb21pc2U8c3RyaW5nPn1cbiAgICovXG4gIHRvRGF0YVVSTCh0eXBlID0gJ2ltYWdlL3BuZycsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgdHlwZSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG9wdGlvbnMgPSB0eXBlO1xuICAgICAgdHlwZSA9ICdpbWFnZS9wbmcnO1xuICAgIH1cbiAgICBjb25zdCB7IHVzZUNhbnZhcyA9IGZhbHNlLCBlbmNvZGVyOiBlbmNvZGVyT3B0aW9ucyA9IHVuZGVmaW5lZCB9ID0gb3B0aW9ucztcbiAgICB0eXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgICBmdW5jdGlvbiBkYXRhVXJsKGVuY29kZXIsIGN0eCkge1xuICAgICAgY29uc3QgdTggPSBlbmNvZGVyKGN0eCwgZW5jb2Rlck9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRvQmFzZTY0VVJMKHU4LCB0eXBlKTtcbiAgICB9XG4gICAgaWYgKHR5cGUgPT09ICdpbWFnZS9ibXAnKSB7XG4gICAgICByZXR1cm4gZGF0YVVybChlbmNvZGVCbXAsIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ2ltYWdlL3BuZycgJiYgIXVzZUNhbnZhcykge1xuICAgICAgcmV0dXJuIGRhdGFVcmwoZW5jb2RlUG5nLCB0aGlzKTtcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdpbWFnZS9qcGVnJyAmJiAhdXNlQ2FudmFzKSB7XG4gICAgICByZXR1cm4gZGF0YVVybChlbmNvZGVKcGVnLCB0aGlzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHRoaXMuZ2V0Q2FudmFzKCkudG9EYXRhVVJMKHR5cGUpO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogRW5jb2RlcyB0aGUgaW1hZ2UgYW5kIHJldHVybnMgYSBidWZmZXJcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5mb3JtYXQ9J3BuZyddXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5lbmNvZGVyXSAtIFNwZWNpZnkgb3B0aW9ucyBmb3IgdGhlIGVuY29kZXIgaWYgYXBwbGljYWJsZS5cbiAgICogQHJldHVybiB7VWludDhBcnJheX1cbiAgICovXG4gIHRvQnVmZmVyKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgZm9ybWF0ID0gJ3BuZycsIGVuY29kZXI6IGVuY29kZXJPcHRpb25zID0gdW5kZWZpbmVkIH0gPSBvcHRpb25zO1xuICAgIHN3aXRjaCAoZm9ybWF0LnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgIGNhc2UgJ3BuZyc6XG4gICAgICAgIHJldHVybiBlbmNvZGVQbmcodGhpcywgZW5jb2Rlck9wdGlvbnMpO1xuICAgICAgY2FzZSAnanBlZyc6XG4gICAgICBjYXNlICdqcGcnOlxuICAgICAgICByZXR1cm4gZW5jb2RlSnBlZyh0aGlzLCBlbmNvZGVyT3B0aW9ucyk7XG4gICAgICBjYXNlICdibXAnOlxuICAgICAgICByZXR1cm4gZW5jb2RlQm1wKHRoaXMsIGVuY29kZXJPcHRpb25zKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGBpbnZhbGlkIG91dHB1dCBmb3JtYXQ6ICR7Zm9ybWF0fWApO1xuICAgIH1cbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIGJhc2U2NCBzdHJpbmcgZnJvbSB0aGUgaW1hZ2UuXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlPSdpbWFnZS9wbmcnXVxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gU2FtZSBvcHRpb25zIGFzIHRvRGF0YVVSTFxuICAgKiBAcmV0dXJuIHtzdHJpbmd8UHJvbWlzZTxzdHJpbmc+fVxuICAgKi9cbiAgdG9CYXNlNjQodHlwZSA9ICdpbWFnZS9wbmcnLCBvcHRpb25zID0ge30pIHtcbiAgICBpZiAob3B0aW9ucy5hc3luYykge1xuICAgICAgcmV0dXJuIHRoaXMudG9EYXRhVVJMKHR5cGUsIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKGRhdGFVUkwpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFVUkwuc3Vic3RyaW5nKGRhdGFVUkwuaW5kZXhPZignLCcpICsgMSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZGF0YVVSTCA9IHRoaXMudG9EYXRhVVJMKHR5cGUsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIGRhdGFVUkwuc3Vic3RyaW5nKGRhdGFVUkwuaW5kZXhPZignLCcpICsgMSk7XG4gICAgfVxuICB9LFxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgYmxvYiBmcm9tIHRoZSBpbWFnZSBhbmQgcmV0dXJuIGEgUHJvbWlzZS5cbiAgICogVGhpcyBmdW5jdGlvbiBpcyBvbmx5IGF2YWlsYWJsZSBpbiB0aGUgYnJvd3Nlci5cbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGU9J2ltYWdlL3BuZyddIEEgU3RyaW5nIGluZGljYXRpbmcgdGhlIGltYWdlIGZvcm1hdC4gVGhlIGRlZmF1bHQgdHlwZSBpcyBpbWFnZS9wbmcuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbcXVhbGl0eT0wLjhdIEEgTnVtYmVyIGJldHdlZW4gMCBhbmQgMSBpbmRpY2F0aW5nIGltYWdlIHF1YWxpdHkgaWYgdGhlIHJlcXVlc3RlZCB0eXBlIGlzIGltYWdlL2pwZWcgb3IgaW1hZ2Uvd2VicC4gSWYgdGhpcyBhcmd1bWVudCBpcyBhbnl0aGluZyBlbHNlLCB0aGUgZGVmYXVsdCB2YWx1ZSBmb3IgaW1hZ2UgcXVhbGl0eSBpcyB1c2VkLiBPdGhlciBhcmd1bWVudHMgYXJlIGlnbm9yZWQuXG4gICAqIEByZXR1cm4ge1Byb21pc2V9XG4gICAqL1xuICB0b0Jsb2IodHlwZSA9ICdpbWFnZS9wbmcnLCBxdWFsaXR5ID0gMC44KSB7XG4gICAgcmV0dXJuIGNhbnZhc1RvQmxvYih0aGlzLmdldENhbnZhcygpLCB0eXBlLCBxdWFsaXR5KTtcbiAgfSxcblxuICAvKipcbiAgICogQ3JlYXRlcyBhIG5ldyBjYW52YXMgZWxlbWVudCBhbmQgZHJhdyB0aGUgaW1hZ2UgaW5zaWRlIGl0XG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHJldHVybiB7Q2FudmFzfVxuICAgKi9cbiAgZ2V0Q2FudmFzKCkge1xuICAgIGNvbnN0IGRhdGEgPSBuZXcgSW1hZ2VEYXRhKFxuICAgICAgdGhpcy5nZXRSR0JBRGF0YSh7IGNsYW1wZWQ6IHRydWUgfSksXG4gICAgICB0aGlzLndpZHRoLFxuICAgICAgdGhpcy5oZWlnaHQsXG4gICAgKTtcbiAgICBsZXQgY2FudmFzID0gY3JlYXRlQ2FudmFzKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KTtcbiAgICBsZXQgY3R4ID0gY2FudmFzLmdldENvbnRleHQoJzJkJyk7XG4gICAgY3R4LnB1dEltYWdlRGF0YShkYXRhLCAwLCAwKTtcbiAgICByZXR1cm4gY2FudmFzO1xuICB9LFxufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0RXhwb3J0TWV0aG9kcyhJbWFnZSkge1xuICBmb3IgKGNvbnN0IGkgaW4gZXhwb3J0TWV0aG9kcykge1xuICAgIEltYWdlLnByb3RvdHlwZVtpXSA9IGV4cG9ydE1ldGhvZHNbaV07XG4gIH1cbn1cbiIsImltcG9ydCBQTkdEZWNvZGVyIGZyb20gJy4vUE5HRGVjb2Rlcic7XG5pbXBvcnQgUE5HRW5jb2RlciBmcm9tICcuL1BOR0VuY29kZXInO1xuZXhwb3J0ICogZnJvbSAnLi90eXBlcyc7XG5mdW5jdGlvbiBkZWNvZGVQTkcoZGF0YSwgb3B0aW9ucykge1xuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgUE5HRGVjb2RlcihkYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoKTtcbn1cbmZ1bmN0aW9uIGVuY29kZVBORyhwbmcsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFBOR0VuY29kZXIocG5nLCBvcHRpb25zKTtcbiAgICByZXR1cm4gZW5jb2Rlci5lbmNvZGUoKTtcbn1cbmV4cG9ydCB7IGRlY29kZVBORyBhcyBkZWNvZGUsIGVuY29kZVBORyBhcyBlbmNvZGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRUeXBlKHR5cGUpIHtcbiAgaWYgKCF0eXBlLmluY2x1ZGVzKCcvJykpIHtcbiAgICB0eXBlID0gYGltYWdlLyR7dHlwZX1gO1xuICB9XG4gIHJldHVybiB0eXBlO1xufVxuIiwiaW1wb3J0IGhhc093biBmcm9tICdoYXMtb3duJztcblxuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxubGV0IGNvbXB1dGVkUHJvcGVydHlEZXNjcmlwdG9yID0ge1xuICBjb25maWd1cmFibGU6IHRydWUsXG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICBnZXQ6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRNZXRob2QobmFtZSwgbWV0aG9kLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgaW5QbGFjZSA9IGZhbHNlLCByZXR1cm5UaGlzID0gdHJ1ZSwgcGFydGlhbEFyZ3MgPSBbXSB9ID0gb3B0aW9ucztcblxuICBpZiAoaW5QbGFjZSkge1xuICAgIEltYWdlLnByb3RvdHlwZVtuYW1lXSA9IGZ1bmN0aW9uICguLi5hcmdzKSB7XG4gICAgICAvLyByZW1vdmUgY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICAgdGhpcy5jb21wdXRlZCA9IG51bGw7XG4gICAgICBsZXQgcmVzdWx0ID0gbWV0aG9kLmFwcGx5KHRoaXMsIFsuLi5wYXJ0aWFsQXJncywgLi4uYXJnc10pO1xuICAgICAgaWYgKHJldHVyblRoaXMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgSW1hZ2UucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgIHJldHVybiBtZXRob2QuYXBwbHkodGhpcywgWy4uLnBhcnRpYWxBcmdzLCAuLi5hcmdzXSk7XG4gICAgfTtcbiAgfVxuICByZXR1cm4gSW1hZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBleHRlbmRQcm9wZXJ0eShuYW1lLCBtZXRob2QsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBwYXJ0aWFsQXJncyA9IFtdIH0gPSBvcHRpb25zO1xuXG4gIGNvbXB1dGVkUHJvcGVydHlEZXNjcmlwdG9yLmdldCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodGhpcy5jb21wdXRlZCA9PT0gbnVsbCkge1xuICAgICAgdGhpcy5jb21wdXRlZCA9IHt9O1xuICAgIH0gZWxzZSBpZiAoaGFzT3duKG5hbWUsIHRoaXMuY29tcHV0ZWQpKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb21wdXRlZFtuYW1lXTtcbiAgICB9XG4gICAgbGV0IHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBwYXJ0aWFsQXJncyk7XG4gICAgdGhpcy5jb21wdXRlZFtuYW1lXSA9IHJlc3VsdDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoSW1hZ2UucHJvdG90eXBlLCBuYW1lLCBjb21wdXRlZFByb3BlcnR5RGVzY3JpcHRvcik7XG4gIHJldHVybiBJbWFnZTtcbn1cbiIsIi8qKlxuICogQ29sb3IgbW9kZWwgb2YgYW4gaW1hZ2VcbiAqIEB0eXBlZGVmIHsoJ0dSRVknfCdSR0InfCdIU0wnfCdIU1YnfCdDTVlLJyl9IENvbG9yTW9kZWxcbiAqL1xuXG5leHBvcnQgY29uc3QgR1JFWSA9ICdHUkVZJztcbmV4cG9ydCBjb25zdCBSR0IgPSAnUkdCJztcbmV4cG9ydCBjb25zdCBIU0wgPSAnSFNMJztcbmV4cG9ydCBjb25zdCBIU1YgPSAnSFNWJztcbmV4cG9ydCBjb25zdCBDTVlLID0gJ0NNWUsnO1xuIiwiLy8gU2hvcnRjdXRzIGZvciBjb21tb24gaW1hZ2Uga2luZHNcblxuZXhwb3J0IGNvbnN0IEJJTkFSWSA9ICdCSU5BUlknO1xuZXhwb3J0IGNvbnN0IEdSRVkgPSAnR1JFWSc7XG5leHBvcnQgY29uc3QgR1JFWUEgPSAnR1JFWUEnO1xuZXhwb3J0IGNvbnN0IFJHQiA9ICdSR0InO1xuZXhwb3J0IGNvbnN0IFJHQkEgPSAnUkdCQSc7XG5leHBvcnQgY29uc3QgQ01ZSyA9ICdDTVlLJztcbmV4cG9ydCBjb25zdCBDTVlLQSA9ICdDTVlLQSc7XG4iLCJpbXBvcnQgKiBhcyBDb2xvck1vZGVsIGZyb20gJy4uL21vZGVsL21vZGVsJztcblxuaW1wb3J0ICogYXMgS2luZCBmcm9tICcuL2tpbmROYW1lcyc7XG5cbmNvbnN0IGtpbmRzID0ge307XG5cbmtpbmRzW0tpbmQuQklOQVJZXSA9IHtcbiAgY29tcG9uZW50czogMSxcbiAgYWxwaGE6IDAsXG4gIGJpdERlcHRoOiAxLFxuICBjb2xvck1vZGVsOiBDb2xvck1vZGVsLkdSRVksXG59O1xuXG5raW5kc1tLaW5kLkdSRVlBXSA9IHtcbiAgY29tcG9uZW50czogMSxcbiAgYWxwaGE6IDEsXG4gIGJpdERlcHRoOiA4LFxuICBjb2xvck1vZGVsOiBDb2xvck1vZGVsLkdSRVksXG59O1xuXG5raW5kc1tLaW5kLkdSRVldID0ge1xuICBjb21wb25lbnRzOiAxLFxuICBhbHBoYTogMCxcbiAgYml0RGVwdGg6IDgsXG4gIGNvbG9yTW9kZWw6IENvbG9yTW9kZWwuR1JFWSxcbn07XG5cbmtpbmRzW0tpbmQuUkdCQV0gPSB7XG4gIGNvbXBvbmVudHM6IDMsXG4gIGFscGhhOiAxLFxuICBiaXREZXB0aDogOCxcbiAgY29sb3JNb2RlbDogQ29sb3JNb2RlbC5SR0IsXG59O1xuXG5raW5kc1tLaW5kLlJHQl0gPSB7XG4gIGNvbXBvbmVudHM6IDMsXG4gIGFscGhhOiAwLFxuICBiaXREZXB0aDogOCxcbiAgY29sb3JNb2RlbDogQ29sb3JNb2RlbC5SR0IsXG59O1xuXG5raW5kc1tLaW5kLkNNWUtdID0ge1xuICBjb21wb25lbnRzOiA0LFxuICBhbHBoYTogMCxcbiAgYml0RGVwdGg6IDgsXG4gIGNvbG9yTW9kZWw6IENvbG9yTW9kZWwuQ01ZSyxcbn07XG5cbmtpbmRzW0tpbmQuQ01ZS0FdID0ge1xuICBjb21wb25lbnRzOiA0LFxuICBhbHBoYTogMSxcbiAgYml0RGVwdGg6IDgsXG4gIGNvbG9yTW9kZWw6IENvbG9yTW9kZWwuQ01ZSyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRLaW5kKGtpbmQpIHtcbiAgY29uc3QgcmVzdWx0ID0ga2luZHNba2luZF07XG4gIGlmICghcmVzdWx0KSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGludmFsaWQgaW1hZ2Uga2luZDogJHtraW5kfWApO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5jb25zdCB2YWxpZEJpdERlcHRoID0gWzEsIDgsIDE2LCAzMl07XG5leHBvcnQgZnVuY3Rpb24gdmVyaWZ5S2luZERlZmluaXRpb24oZGVmaW5pdGlvbikge1xuICBjb25zdCB7IGNvbXBvbmVudHMsIGFscGhhLCBiaXREZXB0aCwgY29sb3JNb2RlbCB9ID0gZGVmaW5pdGlvbjtcbiAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGNvbXBvbmVudHMpIHx8IGNvbXBvbmVudHMgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYGludmFsaWQgY29tcG9uZW50czogJHtjb21wb25lbnRzfS4gTXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXJgLFxuICAgICk7XG4gIH1cbiAgaWYgKGFscGhhICE9PSAwICYmIGFscGhhICE9PSAxICYmIHR5cGVvZiBhbHBoYSAhPT0gJ2Jvb2xlYW4nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihgaW52YWxpZCBhbHBoYTogJHthbHBoYX06IG11c3QgYmUgYSBib29sZWFuLCAwIG9yIDFgKTtcbiAgfVxuICBpZiAoIXZhbGlkQml0RGVwdGguaW5jbHVkZXMoYml0RGVwdGgpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgaW52YWxpZCBiaXREZXB0aDogJHtiaXREZXB0aH0uIE11c3QgYmUgb25lIG9mICR7dmFsaWRCaXREZXB0aC5qb2luKFxuICAgICAgICAnLCAnLFxuICAgICAgKX1gLFxuICAgICk7XG4gIH1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGltcG9ydC9uYW1lc3BhY2VcbiAgaWYgKCFDb2xvck1vZGVsW2NvbG9yTW9kZWxdKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgaW52YWxpZCBjb2xvck1vZGVsOiAke2NvbG9yTW9kZWx9LiBNdXN0IGJlIG9uZSBvZiAke09iamVjdC5rZXlzKFxuICAgICAgICBDb2xvck1vZGVsLFxuICAgICAgKS5qb2luKCcsICcpfWAsXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhlb3JldGljYWxQaXhlbEFycmF5U2l6ZShzaXplLCBjaGFubmVscywgYml0RGVwdGgpIHtcbiAgbGV0IGxlbmd0aCA9IGNoYW5uZWxzICogc2l6ZTtcbiAgaWYgKGJpdERlcHRoID09PSAxKSB7XG4gICAgbGVuZ3RoID0gTWF0aC5jZWlsKGxlbmd0aCAvIDgpO1xuICB9XG4gIHJldHVybiBsZW5ndGg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVQaXhlbEFycmF5KFxuICBzaXplLFxuICBjb21wb25lbnRzLFxuICBhbHBoYSxcbiAgY2hhbm5lbHMsXG4gIGJpdERlcHRoLFxuICBtYXhWYWx1ZSxcbikge1xuICBjb25zdCBsZW5ndGggPSBjaGFubmVscyAqIHNpemU7XG4gIGxldCBhcnI7XG4gIHN3aXRjaCAoYml0RGVwdGgpIHtcbiAgICBjYXNlIDE6XG4gICAgICBhcnIgPSBuZXcgVWludDhBcnJheShNYXRoLmNlaWwobGVuZ3RoIC8gOCkpO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA4OlxuICAgICAgYXJyID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTY6XG4gICAgICBhcnIgPSBuZXcgVWludDE2QXJyYXkobGVuZ3RoKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzI6XG4gICAgICBhcnIgPSBuZXcgRmxvYXQzMkFycmF5KGxlbmd0aCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY3JlYXRlIHBpeGVsIGFycmF5IGZvciBiaXQgZGVwdGggJHtiaXREZXB0aH1gKTtcbiAgfVxuXG4gIC8vIGFscGhhIGNoYW5uZWwgaXMgMTAwJSBieSBkZWZhdWx0XG4gIGlmIChhbHBoYSkge1xuICAgIGZvciAobGV0IGkgPSBjb21wb25lbnRzOyBpIDwgYXJyLmxlbmd0aDsgaSArPSBjaGFubmVscykge1xuICAgICAgYXJyW2ldID0gbWF4VmFsdWU7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFycjtcbn1cbiIsIi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBpbXBvcnQvbm8tdW5hc3NpZ25lZC1pbXBvcnRcclxuaW1wb3J0ICcuL3RleHQtZW5jb2RpbmctcG9seWZpbGwnO1xyXG5jb25zdCBkZWNvZGVyID0gbmV3IFRleHREZWNvZGVyKCd1dGYtOCcpO1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb2RlKGJ5dGVzKSB7XHJcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUoYnl0ZXMpO1xyXG59XHJcbmNvbnN0IGVuY29kZXIgPSBuZXcgVGV4dEVuY29kZXIoKTtcclxuZXhwb3J0IGZ1bmN0aW9uIGVuY29kZShzdHIpIHtcclxuICAgIHJldHVybiBlbmNvZGVyLmVuY29kZShzdHIpO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0ZjguYnJvd3Nlci5qcy5tYXAiLCJpbXBvcnQgeyBkZWNvZGUsIGVuY29kZSB9IGZyb20gJy4vdXRmOCc7XHJcbmNvbnN0IGRlZmF1bHRCeXRlTGVuZ3RoID0gMTAyNCAqIDg7XHJcbmV4cG9ydCBjbGFzcyBJT0J1ZmZlciB7XHJcbiAgICAvKipcclxuICAgICAqIEBwYXJhbSBkYXRhIC0gVGhlIGRhdGEgdG8gY29uc3RydWN0IHRoZSBJT0J1ZmZlciB3aXRoLlxyXG4gICAgICogSWYgZGF0YSBpcyBhIG51bWJlciwgaXQgd2lsbCBiZSB0aGUgbmV3IGJ1ZmZlcidzIGxlbmd0aDxicj5cclxuICAgICAqIElmIGRhdGEgaXMgYHVuZGVmaW5lZGAsIHRoZSBidWZmZXIgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIGEgZGVmYXVsdCBsZW5ndGggb2YgOEtiPGJyPlxyXG4gICAgICogSWYgZGF0YSBpcyBhbiBBcnJheUJ1ZmZlciwgU2hhcmVkQXJyYXlCdWZmZXIsIGFuIEFycmF5QnVmZmVyVmlldyAoVHlwZWQgQXJyYXkpLCBhbiBJT0J1ZmZlciBpbnN0YW5jZSxcclxuICAgICAqIG9yIGEgTm9kZS5qcyBCdWZmZXIsIGEgdmlldyB3aWxsIGJlIGNyZWF0ZWQgb3ZlciB0aGUgdW5kZXJseWluZyBBcnJheUJ1ZmZlci5cclxuICAgICAqIEBwYXJhbSBvcHRpb25zXHJcbiAgICAgKi9cclxuICAgIGNvbnN0cnVjdG9yKGRhdGEgPSBkZWZhdWx0Qnl0ZUxlbmd0aCwgb3B0aW9ucyA9IHt9KSB7XHJcbiAgICAgICAgbGV0IGRhdGFJc0dpdmVuID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBkYXRhID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICBkYXRhID0gbmV3IEFycmF5QnVmZmVyKGRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgZGF0YUlzR2l2ZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3RXcml0dGVuQnl0ZSA9IGRhdGEuYnl0ZUxlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQgPyBvcHRpb25zLm9mZnNldCA+Pj4gMCA6IDA7XHJcbiAgICAgICAgY29uc3QgYnl0ZUxlbmd0aCA9IGRhdGEuYnl0ZUxlbmd0aCAtIG9mZnNldDtcclxuICAgICAgICBsZXQgZHZPZmZzZXQgPSBvZmZzZXQ7XHJcbiAgICAgICAgaWYgKEFycmF5QnVmZmVyLmlzVmlldyhkYXRhKSB8fCBkYXRhIGluc3RhbmNlb2YgSU9CdWZmZXIpIHtcclxuICAgICAgICAgICAgaWYgKGRhdGEuYnl0ZUxlbmd0aCAhPT0gZGF0YS5idWZmZXIuYnl0ZUxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgZHZPZmZzZXQgPSBkYXRhLmJ5dGVPZmZzZXQgKyBvZmZzZXQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZGF0YSA9IGRhdGEuYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGF0YUlzR2l2ZW4pIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0V3JpdHRlbkJ5dGUgPSBieXRlTGVuZ3RoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0V3JpdHRlbkJ5dGUgPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmJ1ZmZlciA9IGRhdGE7XHJcbiAgICAgICAgdGhpcy5sZW5ndGggPSBieXRlTGVuZ3RoO1xyXG4gICAgICAgIHRoaXMuYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGg7XHJcbiAgICAgICAgdGhpcy5ieXRlT2Zmc2V0ID0gZHZPZmZzZXQ7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgPSAwO1xyXG4gICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gdHJ1ZTtcclxuICAgICAgICB0aGlzLl9kYXRhID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyLCBkdk9mZnNldCwgYnl0ZUxlbmd0aCk7XHJcbiAgICAgICAgdGhpcy5fbWFyayA9IDA7XHJcbiAgICAgICAgdGhpcy5fbWFya3MgPSBbXTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2tzIGlmIHRoZSBtZW1vcnkgYWxsb2NhdGVkIHRvIHRoZSBidWZmZXIgaXMgc3VmZmljaWVudCB0byBzdG9yZSBtb3JlXHJcbiAgICAgKiBieXRlcyBhZnRlciB0aGUgb2Zmc2V0LlxyXG4gICAgICogQHBhcmFtIGJ5dGVMZW5ndGggLSBUaGUgbmVlZGVkIG1lbW9yeSBpbiBieXRlcy5cclxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiB0aGVyZSBpcyBzdWZmaWNpZW50IHNwYWNlIGFuZCBgZmFsc2VgIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgYXZhaWxhYmxlKGJ5dGVMZW5ndGggPSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMub2Zmc2V0ICsgYnl0ZUxlbmd0aCA8PSB0aGlzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogQ2hlY2sgaWYgbGl0dGxlLWVuZGlhbiBtb2RlIGlzIHVzZWQgZm9yIHJlYWRpbmcgYW5kIHdyaXRpbmcgbXVsdGktYnl0ZVxyXG4gICAgICogdmFsdWVzLlxyXG4gICAgICogQHJldHVybnMgYHRydWVgIGlmIGxpdHRsZS1lbmRpYW4gbW9kZSBpcyB1c2VkLCBgZmFsc2VgIG90aGVyd2lzZS5cclxuICAgICAqL1xyXG4gICAgaXNMaXR0bGVFbmRpYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMubGl0dGxlRW5kaWFuO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBTZXQgbGl0dGxlLWVuZGlhbiBtb2RlIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIG11bHRpLWJ5dGUgdmFsdWVzLlxyXG4gICAgICovXHJcbiAgICBzZXRMaXR0bGVFbmRpYW4oKSB7XHJcbiAgICAgICAgdGhpcy5saXR0bGVFbmRpYW4gPSB0cnVlO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBDaGVjayBpZiBiaWctZW5kaWFuIG1vZGUgaXMgdXNlZCBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBtdWx0aS1ieXRlIHZhbHVlcy5cclxuICAgICAqIEByZXR1cm5zIGB0cnVlYCBpZiBiaWctZW5kaWFuIG1vZGUgaXMgdXNlZCwgYGZhbHNlYCBvdGhlcndpc2UuXHJcbiAgICAgKi9cclxuICAgIGlzQmlnRW5kaWFuKCkge1xyXG4gICAgICAgIHJldHVybiAhdGhpcy5saXR0bGVFbmRpYW47XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFN3aXRjaGVzIHRvIGJpZy1lbmRpYW4gbW9kZSBmb3IgcmVhZGluZyBhbmQgd3JpdGluZyBtdWx0aS1ieXRlIHZhbHVlcy5cclxuICAgICAqL1xyXG4gICAgc2V0QmlnRW5kaWFuKCkge1xyXG4gICAgICAgIHRoaXMubGl0dGxlRW5kaWFuID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgbiBieXRlcyBmb3J3YXJkLlxyXG4gICAgICogQHBhcmFtIG4gLSBOdW1iZXIgb2YgYnl0ZXMgdG8gc2tpcC5cclxuICAgICAqL1xyXG4gICAgc2tpcChuID0gMSkge1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IG47XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgdG8gdGhlIGdpdmVuIG9mZnNldC5cclxuICAgICAqIEBwYXJhbSBvZmZzZXRcclxuICAgICAqL1xyXG4gICAgc2VlayhvZmZzZXQpIHtcclxuICAgICAgICB0aGlzLm9mZnNldCA9IG9mZnNldDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogU3RvcmUgdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXQuXHJcbiAgICAgKiBAc2VlIHtAbGluayBJT0J1ZmZlciNyZXNldH1cclxuICAgICAqL1xyXG4gICAgbWFyaygpIHtcclxuICAgICAgICB0aGlzLl9tYXJrID0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgYmFjayB0byB0aGUgbGFzdCBwb2ludGVyIG9mZnNldCBzZXQgYnkgbWFyay5cclxuICAgICAqIEBzZWUge0BsaW5rIElPQnVmZmVyI21hcmt9XHJcbiAgICAgKi9cclxuICAgIHJlc2V0KCkge1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gdGhpcy5fbWFyaztcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUHVzaCB0aGUgY3VycmVudCBwb2ludGVyIG9mZnNldCB0byB0aGUgbWFyayBzdGFjay5cclxuICAgICAqIEBzZWUge0BsaW5rIElPQnVmZmVyI3BvcE1hcmt9XHJcbiAgICAgKi9cclxuICAgIHB1c2hNYXJrKCkge1xyXG4gICAgICAgIHRoaXMuX21hcmtzLnB1c2godGhpcy5vZmZzZXQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBQb3AgdGhlIGxhc3QgcG9pbnRlciBvZmZzZXQgZnJvbSB0aGUgbWFyayBzdGFjaywgYW5kIHNldCB0aGUgY3VycmVudFxyXG4gICAgICogcG9pbnRlciBvZmZzZXQgdG8gdGhlIHBvcHBlZCB2YWx1ZS5cclxuICAgICAqIEBzZWUge0BsaW5rIElPQnVmZmVyI3B1c2hNYXJrfVxyXG4gICAgICovXHJcbiAgICBwb3BNYXJrKCkge1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMuX21hcmtzLnBvcCgpO1xyXG4gICAgICAgIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01hcmsgc3RhY2sgZW1wdHknKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5zZWVrKG9mZnNldCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIE1vdmUgdGhlIHBvaW50ZXIgb2Zmc2V0IGJhY2sgdG8gMC5cclxuICAgICAqL1xyXG4gICAgcmV3aW5kKCkge1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ID0gMDtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogTWFrZSBzdXJlIHRoZSBidWZmZXIgaGFzIHN1ZmZpY2llbnQgbWVtb3J5IHRvIHdyaXRlIGEgZ2l2ZW4gYnl0ZUxlbmd0aCBhdFxyXG4gICAgICogdGhlIGN1cnJlbnQgcG9pbnRlciBvZmZzZXQuXHJcbiAgICAgKiBJZiB0aGUgYnVmZmVyJ3MgbWVtb3J5IGlzIGluc3VmZmljaWVudCwgdGhpcyBtZXRob2Qgd2lsbCBjcmVhdGUgYSBuZXdcclxuICAgICAqIGJ1ZmZlciAoYSBjb3B5KSB3aXRoIGEgbGVuZ3RoIHRoYXQgaXMgdHdpY2UgKGJ5dGVMZW5ndGggKyBjdXJyZW50IG9mZnNldCkuXHJcbiAgICAgKiBAcGFyYW0gYnl0ZUxlbmd0aFxyXG4gICAgICovXHJcbiAgICBlbnN1cmVBdmFpbGFibGUoYnl0ZUxlbmd0aCA9IDEpIHtcclxuICAgICAgICBpZiAoIXRoaXMuYXZhaWxhYmxlKGJ5dGVMZW5ndGgpKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbmd0aE5lZWRlZCA9IHRoaXMub2Zmc2V0ICsgYnl0ZUxlbmd0aDtcclxuICAgICAgICAgICAgY29uc3QgbmV3TGVuZ3RoID0gbGVuZ3RoTmVlZGVkICogMjtcclxuICAgICAgICAgICAgY29uc3QgbmV3QXJyYXkgPSBuZXcgVWludDhBcnJheShuZXdMZW5ndGgpO1xyXG4gICAgICAgICAgICBuZXdBcnJheS5zZXQobmV3IFVpbnQ4QXJyYXkodGhpcy5idWZmZXIpKTtcclxuICAgICAgICAgICAgdGhpcy5idWZmZXIgPSBuZXdBcnJheS5idWZmZXI7XHJcbiAgICAgICAgICAgIHRoaXMubGVuZ3RoID0gdGhpcy5ieXRlTGVuZ3RoID0gbmV3TGVuZ3RoO1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhID0gbmV3IERhdGFWaWV3KHRoaXMuYnVmZmVyKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSBieXRlIGFuZCByZXR1cm4gZmFsc2UgaWYgdGhlIGJ5dGUncyB2YWx1ZSBpcyAwLCBvciB0cnVlIG90aGVyd2lzZS5cclxuICAgICAqIE1vdmVzIHBvaW50ZXIgZm9yd2FyZCBieSBvbmUgYnl0ZS5cclxuICAgICAqL1xyXG4gICAgcmVhZEJvb2xlYW4oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZFVpbnQ4KCkgIT09IDA7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSBzaWduZWQgOC1iaXQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMSBieXRlLlxyXG4gICAgICovXHJcbiAgICByZWFkSW50OCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5fZGF0YS5nZXRJbnQ4KHRoaXMub2Zmc2V0KyspO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGFuIHVuc2lnbmVkIDgtYml0IGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDEgYnl0ZS5cclxuICAgICAqL1xyXG4gICAgcmVhZFVpbnQ4KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLl9kYXRhLmdldFVpbnQ4KHRoaXMub2Zmc2V0KyspO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBBbGlhcyBmb3Ige0BsaW5rIElPQnVmZmVyI3JlYWRVaW50OH0uXHJcbiAgICAgKi9cclxuICAgIHJlYWRCeXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRVaW50OCgpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGBuYCBieXRlcyBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgYG5gIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICByZWFkQnl0ZXMobiA9IDEpIHtcclxuICAgICAgICBjb25zdCBieXRlcyA9IG5ldyBVaW50OEFycmF5KG4pO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XHJcbiAgICAgICAgICAgIGJ5dGVzW2ldID0gdGhpcy5yZWFkQnl0ZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gYnl0ZXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSAxNi1iaXQgc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDIgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRJbnQxNigpIHtcclxuICAgICAgICBjb25zdCB2YWx1ZSA9IHRoaXMuX2RhdGEuZ2V0SW50MTYodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIDE2LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSAyIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICByZWFkVWludDE2KCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YS5nZXRVaW50MTYodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIDMyLWJpdCBzaWduZWQgaW50ZWdlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgNCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZEludDMyKCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YS5nZXRJbnQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgMzItYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDQgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRVaW50MzIoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhLmdldFVpbnQzMih0aGlzLm9mZnNldCwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIGEgMzItYml0IGZsb2F0aW5nIG51bWJlciBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgNCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgcmVhZEZsb2F0MzIoKSB7XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLl9kYXRhLmdldEZsb2F0MzIodGhpcy5vZmZzZXQsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xyXG4gICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogUmVhZCBhIDY0LWJpdCBmbG9hdGluZyBudW1iZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDggYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRGbG9hdDY0KCkge1xyXG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fZGF0YS5nZXRGbG9hdDY0KHRoaXMub2Zmc2V0LCB0aGlzLmxpdHRsZUVuZGlhbik7XHJcbiAgICAgICAgdGhpcy5vZmZzZXQgKz0gODtcclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYSAxLWJ5dGUgQVNDSUkgY2hhcmFjdGVyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSAxIGJ5dGUuXHJcbiAgICAgKi9cclxuICAgIHJlYWRDaGFyKCkge1xyXG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHRoaXMucmVhZEludDgoKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFJlYWQgYG5gIDEtYnl0ZSBBU0NJSSBjaGFyYWN0ZXJzIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSBgbmAgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRDaGFycyhuID0gMSkge1xyXG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICByZXN1bHQgKz0gdGhpcy5yZWFkQ2hhcigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBSZWFkIHRoZSBuZXh0IGBuYCBieXRlcywgcmV0dXJuIGEgVVRGLTggZGVjb2RlZCBzdHJpbmcgYW5kIG1vdmUgcG9pbnRlclxyXG4gICAgICogZm9yd2FyZCBieSBgbmAgYnl0ZXMuXHJcbiAgICAgKi9cclxuICAgIHJlYWRVdGY4KG4gPSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZSh0aGlzLnJlYWRCeXRlcyhuKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIDB4ZmYgaWYgdGhlIHBhc3NlZCB2YWx1ZSBpcyB0cnV0aHksIDB4MDAgb3RoZXJ3aXNlIGFuZCBtb3ZlIHBvaW50ZXJcclxuICAgICAqIGZvcndhcmQgYnkgMSBieXRlLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUJvb2xlYW4odmFsdWUpIHtcclxuICAgICAgICB0aGlzLndyaXRlVWludDgodmFsdWUgPyAweGZmIDogMHgwMCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYW4gOC1iaXQgc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDEgYnl0ZS5cclxuICAgICAqL1xyXG4gICAgd3JpdGVJbnQ4KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMSk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRJbnQ4KHRoaXMub2Zmc2V0KyssIHZhbHVlKTtcclxuICAgICAgICB0aGlzLl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogV3JpdGUgYHZhbHVlYCBhcyBhbiA4LWJpdCB1bnNpZ25lZCBpbnRlZ2VyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSAxXHJcbiAgICAgKiBieXRlLlxyXG4gICAgICovXHJcbiAgICB3cml0ZVVpbnQ4KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMSk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRVaW50OCh0aGlzLm9mZnNldCsrLCB2YWx1ZSk7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIEFuIGFsaWFzIGZvciB7QGxpbmsgSU9CdWZmZXIjd3JpdGVVaW50OH0uXHJcbiAgICAgKi9cclxuICAgIHdyaXRlQnl0ZSh2YWx1ZSkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndyaXRlVWludDgodmFsdWUpO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZSBhbGwgZWxlbWVudHMgb2YgYGJ5dGVzYCBhcyB1aW50OCB2YWx1ZXMgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5XHJcbiAgICAgKiBgYnl0ZXMubGVuZ3RoYCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgd3JpdGVCeXRlcyhieXRlcykge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKGJ5dGVzLmxlbmd0aCk7XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBieXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLl9kYXRhLnNldFVpbnQ4KHRoaXMub2Zmc2V0KyssIGJ5dGVzW2ldKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSAxNi1iaXQgc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDJcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUludDE2KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoMik7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRJbnQxNih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSAyO1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZSBgdmFsdWVgIGFzIGEgMTYtYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDJcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZVVpbnQxNih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDIpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDE2KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDI7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSAzMi1iaXQgc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDRcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUludDMyKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoNCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRJbnQzMih0aGlzLm9mZnNldCwgdmFsdWUsIHRoaXMubGl0dGxlRW5kaWFuKTtcclxuICAgICAgICB0aGlzLm9mZnNldCArPSA0O1xyXG4gICAgICAgIHRoaXMuX3VwZGF0ZUxhc3RXcml0dGVuQnl0ZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgLyoqXHJcbiAgICAgKiBXcml0ZSBgdmFsdWVgIGFzIGEgMzItYml0IHVuc2lnbmVkIGludGVnZXIgYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IDRcclxuICAgICAqIGJ5dGVzLlxyXG4gICAgICovXHJcbiAgICB3cml0ZVVpbnQzMih2YWx1ZSkge1xyXG4gICAgICAgIHRoaXMuZW5zdXJlQXZhaWxhYmxlKDQpO1xyXG4gICAgICAgIHRoaXMuX2RhdGEuc2V0VWludDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSAzMi1iaXQgZmxvYXRpbmcgbnVtYmVyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSA0XHJcbiAgICAgKiBieXRlcy5cclxuICAgICAqL1xyXG4gICAgd3JpdGVGbG9hdDMyKHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoNCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRGbG9hdDMyKHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDQ7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIGB2YWx1ZWAgYXMgYSA2NC1iaXQgZmxvYXRpbmcgbnVtYmVyIGFuZCBtb3ZlIHBvaW50ZXIgZm9yd2FyZCBieSA4XHJcbiAgICAgKiBieXRlcy5cclxuICAgICAqL1xyXG4gICAgd3JpdGVGbG9hdDY0KHZhbHVlKSB7XHJcbiAgICAgICAgdGhpcy5lbnN1cmVBdmFpbGFibGUoOCk7XHJcbiAgICAgICAgdGhpcy5fZGF0YS5zZXRGbG9hdDY0KHRoaXMub2Zmc2V0LCB2YWx1ZSwgdGhpcy5saXR0bGVFbmRpYW4pO1xyXG4gICAgICAgIHRoaXMub2Zmc2V0ICs9IDg7XHJcbiAgICAgICAgdGhpcy5fdXBkYXRlTGFzdFdyaXR0ZW5CeXRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIHRoZSBjaGFyQ29kZSBvZiBgc3RyYCdzIGZpcnN0IGNoYXJhY3RlciBhcyBhbiA4LWJpdCB1bnNpZ25lZCBpbnRlZ2VyXHJcbiAgICAgKiBhbmQgbW92ZSBwb2ludGVyIGZvcndhcmQgYnkgMSBieXRlLlxyXG4gICAgICovXHJcbiAgICB3cml0ZUNoYXIoc3RyKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMud3JpdGVVaW50OChzdHIuY2hhckNvZGVBdCgwKSk7XHJcbiAgICB9XHJcbiAgICAvKipcclxuICAgICAqIFdyaXRlIHRoZSBjaGFyQ29kZXMgb2YgYWxsIGBzdHJgJ3MgY2hhcmFjdGVycyBhcyA4LWJpdCB1bnNpZ25lZCBpbnRlZ2Vyc1xyXG4gICAgICogYW5kIG1vdmUgcG9pbnRlciBmb3J3YXJkIGJ5IGBzdHIubGVuZ3RoYCBieXRlcy5cclxuICAgICAqL1xyXG4gICAgd3JpdGVDaGFycyhzdHIpIHtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0ci5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICB0aGlzLndyaXRlVWludDgoc3RyLmNoYXJDb2RlQXQoaSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVVRGLTggZW5jb2RlIGFuZCB3cml0ZSBgc3RyYCB0byB0aGUgY3VycmVudCBwb2ludGVyIG9mZnNldCBhbmQgbW92ZSBwb2ludGVyXHJcbiAgICAgKiBmb3J3YXJkIGFjY29yZGluZyB0byB0aGUgZW5jb2RlZCBsZW5ndGguXHJcbiAgICAgKi9cclxuICAgIHdyaXRlVXRmOChzdHIpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy53cml0ZUJ5dGVzKGVuY29kZShzdHIpKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogRXhwb3J0IGEgVWludDhBcnJheSB2aWV3IG9mIHRoZSBpbnRlcm5hbCBidWZmZXIuXHJcbiAgICAgKiBUaGUgdmlldyBzdGFydHMgYXQgdGhlIGJ5dGUgb2Zmc2V0IGFuZCBpdHMgbGVuZ3RoXHJcbiAgICAgKiBpcyBjYWxjdWxhdGVkIHRvIHN0b3AgYXQgdGhlIGxhc3Qgd3JpdHRlbiBieXRlIG9yIHRoZSBvcmlnaW5hbCBsZW5ndGguXHJcbiAgICAgKi9cclxuICAgIHRvQXJyYXkoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHRoaXMuYnVmZmVyLCB0aGlzLmJ5dGVPZmZzZXQsIHRoaXMubGFzdFdyaXR0ZW5CeXRlKTtcclxuICAgIH1cclxuICAgIC8qKlxyXG4gICAgICogVXBkYXRlIHRoZSBsYXN0IHdyaXR0ZW4gYnl0ZSBvZmZzZXRcclxuICAgICAqIEBwcml2YXRlXHJcbiAgICAgKi9cclxuICAgIF91cGRhdGVMYXN0V3JpdHRlbkJ5dGUoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub2Zmc2V0ID4gdGhpcy5sYXN0V3JpdHRlbkJ5dGUpIHtcclxuICAgICAgICAgICAgdGhpcy5sYXN0V3JpdHRlbkJ5dGUgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9SU9CdWZmZXIuanMubWFwIiwiY29uc3QgdGFnc0J5SWQgPSB7XHJcbiAgICAweDgyOWE6ICdFeHBvc3VyZVRpbWUnLFxyXG4gICAgMHg4MjlkOiAnRk51bWJlcicsXHJcbiAgICAweDg4MjI6ICdFeHBvc3VyZVByb2dyYW0nLFxyXG4gICAgMHg4ODI0OiAnU3BlY3RyYWxTZW5zaXRpdml0eScsXHJcbiAgICAweDg4Mjc6ICdJU09TcGVlZFJhdGluZ3MnLFxyXG4gICAgMHg4ODI4OiAnT0VDRicsXHJcbiAgICAweDg4MzA6ICdTZW5zaXRpdml0eVR5cGUnLFxyXG4gICAgMHg4ODMxOiAnU3RhbmRhcmRPdXRwdXRTZW5zaXRpdml0eScsXHJcbiAgICAweDg4MzI6ICdSZWNvbW1lbmRlZEV4cG9zdXJlSW5kZXgnLFxyXG4gICAgMHg4ODMzOiAnSVNPU3BlZWQnLFxyXG4gICAgMHg4ODM0OiAnSVNPU3BlZWRMYXRpdHVkZXl5eScsXHJcbiAgICAweDg4MzU6ICdJU09TcGVlZExhdGl0dWRlenp6JyxcclxuICAgIDB4OTAwMDogJ0V4aWZWZXJzaW9uJyxcclxuICAgIDB4OTAwMzogJ0RhdGVUaW1lT3JpZ2luYWwnLFxyXG4gICAgMHg5MDA0OiAnRGF0ZVRpbWVEaWdpdGl6ZWQnLFxyXG4gICAgMHg5MTAxOiAnQ29tcG9uZW50c0NvbmZpZ3VyYXRpb24nLFxyXG4gICAgMHg5MTAyOiAnQ29tcHJlc3NlZEJpdHNQZXJQaXhlbCcsXHJcbiAgICAweDkyMDE6ICdTaHV0dGVyU3BlZWRWYWx1ZScsXHJcbiAgICAweDkyMDI6ICdBcGVydHVyZVZhbHVlJyxcclxuICAgIDB4OTIwMzogJ0JyaWdodG5lc3NWYWx1ZScsXHJcbiAgICAweDkyMDQ6ICdFeHBvc3VyZUJpYXNWYWx1ZScsXHJcbiAgICAweDkyMDU6ICdNYXhBcGVydHVyZVZhbHVlJyxcclxuICAgIDB4OTIwNjogJ1N1YmplY3REaXN0YW5jZScsXHJcbiAgICAweDkyMDc6ICdNZXRlcmluZ01vZGUnLFxyXG4gICAgMHg5MjA4OiAnTGlnaHRTb3VyY2UnLFxyXG4gICAgMHg5MjA5OiAnRmxhc2gnLFxyXG4gICAgMHg5MjBhOiAnRm9jYWxMZW5ndGgnLFxyXG4gICAgMHg5MjE0OiAnU3ViamVjdEFyZWEnLFxyXG4gICAgMHg5MjdjOiAnTWFrZXJOb3RlJyxcclxuICAgIDB4OTI4NjogJ1VzZXJDb21tZW50JyxcclxuICAgIDB4OTI5MDogJ1N1YnNlY1RpbWUnLFxyXG4gICAgMHg5MjkxOiAnU3Vic2VjVGltZU9yaWdpbmFsJyxcclxuICAgIDB4OTI5MjogJ1N1YnNlY1RpbWVEaWdpdGl6ZWQnLFxyXG4gICAgMHhhMDAwOiAnRmxhc2hwaXhWZXJzaW9uJyxcclxuICAgIDB4YTAwMTogJ0NvbG9yU3BhY2UnLFxyXG4gICAgMHhhMDAyOiAnUGl4ZWxYRGltZW5zaW9uJyxcclxuICAgIDB4YTAwMzogJ1BpeGVsWURpbWVuc2lvbicsXHJcbiAgICAweGEwMDQ6ICdSZWxhdGVkU291bmRGaWxlJyxcclxuICAgIDB4YTIwYjogJ0ZsYXNoRW5lcmd5JyxcclxuICAgIDB4YTIwYzogJ1NwYXRpYWxGcmVxdWVuY3lSZXNwb25zZScsXHJcbiAgICAweGEyMGU6ICdGb2NhbFBsYW5lWFJlc29sdXRpb24nLFxyXG4gICAgMHhhMjBmOiAnRm9jYWxQbGFuZVlSZXNvbHV0aW9uJyxcclxuICAgIDB4YTIxMDogJ0ZvY2FsUGxhbmVSZXNvbHV0aW9uVW5pdCcsXHJcbiAgICAweGEyMTQ6ICdTdWJqZWN0TG9jYXRpb24nLFxyXG4gICAgMHhhMjE1OiAnRXhwb3N1cmVJbmRleCcsXHJcbiAgICAweGEyMTc6ICdTZW5zaW5nTWV0aG9kJyxcclxuICAgIDB4YTMwMDogJ0ZpbGVTb3VyY2UnLFxyXG4gICAgMHhhMzAxOiAnU2NlbmVUeXBlJyxcclxuICAgIDB4YTMwMjogJ0NGQVBhdHRlcm4nLFxyXG4gICAgMHhhNDAxOiAnQ3VzdG9tUmVuZGVyZWQnLFxyXG4gICAgMHhhNDAyOiAnRXhwb3N1cmVNb2RlJyxcclxuICAgIDB4YTQwMzogJ1doaXRlQmFsYW5jZScsXHJcbiAgICAweGE0MDQ6ICdEaWdpdGFsWm9vbVJhdGlvJyxcclxuICAgIDB4YTQwNTogJ0ZvY2FsTGVuZ3RoSW4zNW1tRmlsbScsXHJcbiAgICAweGE0MDY6ICdTY2VuZUNhcHR1cmVUeXBlJyxcclxuICAgIDB4YTQwNzogJ0dhaW5Db250cm9sJyxcclxuICAgIDB4YTQwODogJ0NvbnRyYXN0JyxcclxuICAgIDB4YTQwOTogJ1NhdHVyYXRpb24nLFxyXG4gICAgMHhhNDBhOiAnU2hhcnBuZXNzJyxcclxuICAgIDB4YTQwYjogJ0RldmljZVNldHRpbmdEZXNjcmlwdGlvbicsXHJcbiAgICAweGE0MGM6ICdTdWJqZWN0RGlzdGFuY2VSYW5nZScsXHJcbiAgICAweGE0MjA6ICdJbWFnZVVuaXF1ZUlEJyxcclxuICAgIDB4YTQzMDogJ0NhbWVyYU93bmVyTmFtZScsXHJcbiAgICAweGE0MzE6ICdCb2R5U2VyaWFsTnVtYmVyJyxcclxuICAgIDB4YTQzMjogJ0xlbnNTcGVjaWZpY2F0aW9uJyxcclxuICAgIDB4YTQzMzogJ0xlbnNNYWtlJyxcclxuICAgIDB4YTQzNDogJ0xlbnNNb2RlbCcsXHJcbiAgICAweGE0MzU6ICdMZW5zU2VyaWFsTnVtYmVyJyxcclxuICAgIDB4YTUwMDogJ0dhbW1hJyxcclxufTtcclxuY29uc3QgdGFnc0J5TmFtZSA9IHt9O1xyXG5mb3IgKGxldCBpIGluIHRhZ3NCeUlkKSB7XHJcbiAgICB0YWdzQnlOYW1lW3RhZ3NCeUlkW2ldXSA9IE51bWJlcihpKTtcclxufVxyXG5leHBvcnQgeyB0YWdzQnlJZCwgdGFnc0J5TmFtZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1leGlmLmpzLm1hcCIsImNvbnN0IHRhZ3NCeUlkID0ge1xyXG4gICAgMHgwMDAwOiAnR1BTVmVyc2lvbklEJyxcclxuICAgIDB4MDAwMTogJ0dQU0xhdGl0dWRlUmVmJyxcclxuICAgIDB4MDAwMjogJ0dQU0xhdGl0dWRlJyxcclxuICAgIDB4MDAwMzogJ0dQU0xvbmdpdHVkZVJlZicsXHJcbiAgICAweDAwMDQ6ICdHUFNMb25naXR1ZGUnLFxyXG4gICAgMHgwMDA1OiAnR1BTQWx0aXR1ZGVSZWYnLFxyXG4gICAgMHgwMDA2OiAnR1BTQWx0aXR1ZGUnLFxyXG4gICAgMHgwMDA3OiAnR1BTVGltZVN0YW1wJyxcclxuICAgIDB4MDAwODogJ0dQU1NhdGVsbGl0ZXMnLFxyXG4gICAgMHgwMDA5OiAnR1BTU3RhdHVzJyxcclxuICAgIDB4MDAwYTogJ0dQU01lYXN1cmVNb2RlJyxcclxuICAgIDB4MDAwYjogJ0dQU0RPUCcsXHJcbiAgICAweDAwMGM6ICdHUFNTcGVlZFJlZicsXHJcbiAgICAweDAwMGQ6ICdHUFNTcGVlZCcsXHJcbiAgICAweDAwMGU6ICdHUFNUcmFja1JlZicsXHJcbiAgICAweDAwMGY6ICdHUFNUcmFjaycsXHJcbiAgICAweDAwMTA6ICdHUFNJbWdEaXJlY3Rpb25SZWYnLFxyXG4gICAgMHgwMDExOiAnR1BTSW1nRGlyZWN0aW9uJyxcclxuICAgIDB4MDAxMjogJ0dQU01hcERhdHVtJyxcclxuICAgIDB4MDAxMzogJ0dQU0Rlc3RMYXRpdHVkZVJlZicsXHJcbiAgICAweDAwMTQ6ICdHUFNEZXN0TGF0aXR1ZGUnLFxyXG4gICAgMHgwMDE1OiAnR1BTRGVzdExvbmdpdHVkZVJlZicsXHJcbiAgICAweDAwMTY6ICdHUFNEZXN0TG9uZ2l0dWRlJyxcclxuICAgIDB4MDAxNzogJ0dQU0Rlc3RCZWFyaW5nUmVmJyxcclxuICAgIDB4MDAxODogJ0dQU0Rlc3RCZWFyaW5nJyxcclxuICAgIDB4MDAxOTogJ0dQU0Rlc3REaXN0YW5jZVJlZicsXHJcbiAgICAweDAwMWE6ICdHUFNEZXN0RGlzdGFuY2UnLFxyXG4gICAgMHgwMDFiOiAnR1BTUHJvY2Vzc2luZ01ldGhvZCcsXHJcbiAgICAweDAwMWM6ICdHUFNBcmVhSW5mb3JtYXRpb24nLFxyXG4gICAgMHgwMDFkOiAnR1BTRGF0ZVN0YW1wJyxcclxuICAgIDB4MDAxZTogJ0dQU0RpZmZlcmVudGlhbCcsXHJcbiAgICAweDAwMWY6ICdHUFNIUG9zaXRpb25pbmdFcnJvcicsXHJcbn07XHJcbmNvbnN0IHRhZ3NCeU5hbWUgPSB7fTtcclxuZm9yIChsZXQgaSBpbiB0YWdzQnlJZCkge1xyXG4gICAgdGFnc0J5TmFtZVt0YWdzQnlJZFtpXV0gPSBOdW1iZXIoaSk7XHJcbn1cclxuZXhwb3J0IHsgdGFnc0J5SWQsIHRhZ3NCeU5hbWUgfTtcclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z3BzLmpzLm1hcCIsImNvbnN0IHRhZ3NCeUlkID0ge1xyXG4gICAgLy8gQmFzZWxpbmUgdGFnc1xyXG4gICAgMHgwMGZlOiAnTmV3U3ViZmlsZVR5cGUnLFxyXG4gICAgMHgwMGZmOiAnU3ViZmlsZVR5cGUnLFxyXG4gICAgMHgwMTAwOiAnSW1hZ2VXaWR0aCcsXHJcbiAgICAweDAxMDE6ICdJbWFnZUxlbmd0aCcsXHJcbiAgICAweDAxMDI6ICdCaXRzUGVyU2FtcGxlJyxcclxuICAgIDB4MDEwMzogJ0NvbXByZXNzaW9uJyxcclxuICAgIDB4MDEwNjogJ1Bob3RvbWV0cmljSW50ZXJwcmV0YXRpb24nLFxyXG4gICAgMHgwMTA3OiAnVGhyZXNoaG9sZGluZycsXHJcbiAgICAweDAxMDg6ICdDZWxsV2lkdGgnLFxyXG4gICAgMHgwMTA5OiAnQ2VsbExlbmd0aCcsXHJcbiAgICAweDAxMGE6ICdGaWxsT3JkZXInLFxyXG4gICAgMHgwMTBlOiAnSW1hZ2VEZXNjcmlwdGlvbicsXHJcbiAgICAweDAxMGY6ICdNYWtlJyxcclxuICAgIDB4MDExMDogJ01vZGVsJyxcclxuICAgIDB4MDExMTogJ1N0cmlwT2Zmc2V0cycsXHJcbiAgICAweDAxMTI6ICdPcmllbnRhdGlvbicsXHJcbiAgICAweDAxMTU6ICdTYW1wbGVzUGVyUGl4ZWwnLFxyXG4gICAgMHgwMTE2OiAnUm93c1BlclN0cmlwJyxcclxuICAgIDB4MDExNzogJ1N0cmlwQnl0ZUNvdW50cycsXHJcbiAgICAweDAxMTg6ICdNaW5TYW1wbGVWYWx1ZScsXHJcbiAgICAweDAxMTk6ICdNYXhTYW1wbGVWYWx1ZScsXHJcbiAgICAweDAxMWE6ICdYUmVzb2x1dGlvbicsXHJcbiAgICAweDAxMWI6ICdZUmVzb2x1dGlvbicsXHJcbiAgICAweDAxMWM6ICdQbGFuYXJDb25maWd1cmF0aW9uJyxcclxuICAgIDB4MDEyMDogJ0ZyZWVPZmZzZXRzJyxcclxuICAgIDB4MDEyMTogJ0ZyZWVCeXRlQ291bnRzJyxcclxuICAgIDB4MDEyMjogJ0dyYXlSZXNwb25zZVVuaXQnLFxyXG4gICAgMHgwMTIzOiAnR3JheVJlc3BvbnNlQ3VydmUnLFxyXG4gICAgMHgwMTI4OiAnUmVzb2x1dGlvblVuaXQnLFxyXG4gICAgMHgwMTMxOiAnU29mdHdhcmUnLFxyXG4gICAgMHgwMTMyOiAnRGF0ZVRpbWUnLFxyXG4gICAgMHgwMTNiOiAnQXJ0aXN0JyxcclxuICAgIDB4MDEzYzogJ0hvc3RDb21wdXRlcicsXHJcbiAgICAweDAxNDA6ICdDb2xvck1hcCcsXHJcbiAgICAweDAxNTI6ICdFeHRyYVNhbXBsZXMnLFxyXG4gICAgMHg4Mjk4OiAnQ29weXJpZ2h0JyxcclxuICAgIC8vIEV4dGVuc2lvbiB0YWdzXHJcbiAgICAweDAxMGQ6ICdEb2N1bWVudE5hbWUnLFxyXG4gICAgMHgwMTFkOiAnUGFnZU5hbWUnLFxyXG4gICAgMHgwMTFlOiAnWFBvc2l0aW9uJyxcclxuICAgIDB4MDExZjogJ1lQb3NpdGlvbicsXHJcbiAgICAweDAxMjQ6ICdUNE9wdGlvbnMnLFxyXG4gICAgMHgwMTI1OiAnVDZPcHRpb25zJyxcclxuICAgIDB4MDEyOTogJ1BhZ2VOdW1iZXInLFxyXG4gICAgMHgwMTJkOiAnVHJhbnNmZXJGdW5jdGlvbicsXHJcbiAgICAweDAxM2Q6ICdQcmVkaWN0b3InLFxyXG4gICAgMHgwMTNlOiAnV2hpdGVQb2ludCcsXHJcbiAgICAweDAxM2Y6ICdQcmltYXJ5Q2hyb21hdGljaXRpZXMnLFxyXG4gICAgMHgwMTQxOiAnSGFsZnRvbmVIaW50cycsXHJcbiAgICAweDAxNDI6ICdUaWxlV2lkdGgnLFxyXG4gICAgMHgwMTQzOiAnVGlsZUxlbmd0aCcsXHJcbiAgICAweDAxNDQ6ICdUaWxlT2Zmc2V0cycsXHJcbiAgICAweDAxNDU6ICdUaWxlQnl0ZUNvdW50cycsXHJcbiAgICAweDAxNDY6ICdCYWRGYXhMaW5lcycsXHJcbiAgICAweDAxNDc6ICdDbGVhbkZheERhdGEnLFxyXG4gICAgMHgwMTQ4OiAnQ29uc2VjdXRpdmVCYWRGYXhMaW5lcycsXHJcbiAgICAweDAxNGE6ICdTdWJJRkRzJyxcclxuICAgIDB4MDE0YzogJ0lua1NldCcsXHJcbiAgICAweDAxNGQ6ICdJbmtOYW1lcycsXHJcbiAgICAweDAxNGU6ICdOdW1iZXJPZklua3MnLFxyXG4gICAgMHgwMTUwOiAnRG90UmFuZ2UnLFxyXG4gICAgMHgwMTUxOiAnVGFyZ2V0UHJpbnRlcicsXHJcbiAgICAweDAxNTM6ICdTYW1wbGVGb3JtYXQnLFxyXG4gICAgMHgwMTU0OiAnU01pblNhbXBsZVZhbHVlJyxcclxuICAgIDB4MDE1NTogJ1NNYXhTYW1wbGVWYWx1ZScsXHJcbiAgICAweDAxNTY6ICdUcmFuc2ZlclJhbmdlJyxcclxuICAgIDB4MDE1NzogJ0NsaXBQYXRoJyxcclxuICAgIDB4MDE1ODogJ1hDbGlwUGF0aFVuaXRzJyxcclxuICAgIDB4MDE1OTogJ1lDbGlwUGF0aFVuaXRzJyxcclxuICAgIDB4MDE1YTogJ0luZGV4ZWQnLFxyXG4gICAgMHgwMTViOiAnSlBFR1RhYmxlcycsXHJcbiAgICAweDAxNWY6ICdPUElQcm94eScsXHJcbiAgICAweDAxOTA6ICdHbG9iYWxQYXJhbWV0ZXJzSUZEJyxcclxuICAgIDB4MDE5MTogJ1Byb2ZpbGVUeXBlJyxcclxuICAgIDB4MDE5MjogJ0ZheFByb2ZpbGUnLFxyXG4gICAgMHgwMTkzOiAnQ29kaW5nTWV0aG9kcycsXHJcbiAgICAweDAxOTQ6ICdWZXJzaW9uWWVhcicsXHJcbiAgICAweDAxOTU6ICdNb2RlTnVtYmVyJyxcclxuICAgIDB4MDFiMTogJ0RlY29kZScsXHJcbiAgICAweDAxYjI6ICdEZWZhdWx0SW1hZ2VDb2xvcicsXHJcbiAgICAweDAyMDA6ICdKUEVHUHJvYycsXHJcbiAgICAweDAyMDE6ICdKUEVHSW50ZXJjaGFuZ2VGb3JtYXQnLFxyXG4gICAgMHgwMjAyOiAnSlBFR0ludGVyY2hhbmdlRm9ybWF0TGVuZ3RoJyxcclxuICAgIDB4MDIwMzogJ0pQRUdSZXN0YXJ0SW50ZXJ2YWwnLFxyXG4gICAgMHgwMjA1OiAnSlBFR0xvc3NsZXNzUHJlZGljdG9ycycsXHJcbiAgICAweDAyMDY6ICdKUEVHUG9pbnRUcmFuc2Zvcm1zJyxcclxuICAgIDB4MDIwNzogJ0pQRUdRVGFibGVzJyxcclxuICAgIDB4MDIwODogJ0pQRUdEQ1RhYmxlcycsXHJcbiAgICAweDAyMDk6ICdKUEVHQUNUYWJsZXMnLFxyXG4gICAgMHgwMjExOiAnWUNiQ3JDb2VmZmljaWVudHMnLFxyXG4gICAgMHgwMjEyOiAnWUNiQ3JTdWJTYW1wbGluZycsXHJcbiAgICAweDAyMTM6ICdZQ2JDclBvc2l0aW9uaW5nJyxcclxuICAgIDB4MDIxNDogJ1JlZmVyZW5jZUJsYWNrV2hpdGUnLFxyXG4gICAgMHgwMjJmOiAnU3RyaXBSb3dDb3VudHMnLFxyXG4gICAgMHgwMmJjOiAnWE1QJyxcclxuICAgIDB4ODAwZDogJ0ltYWdlSUQnLFxyXG4gICAgMHg4N2FjOiAnSW1hZ2VMYXllcicsXHJcbiAgICAvLyBQcml2YXRlIHRhZ3NcclxuICAgIDB4ODBhNDogJ1dhbmdBbm5vdGF0aW8nLFxyXG4gICAgMHg4MmE1OiAnTURGaWxlVGFnJyxcclxuICAgIDB4ODJhNjogJ01EU2NhbGVQaXhlbCcsXHJcbiAgICAweDgyYTc6ICdNRENvbG9yVGFibGUnLFxyXG4gICAgMHg4MmE4OiAnTURMYWJOYW1lJyxcclxuICAgIDB4ODJhOTogJ01EU2FtcGxlSW5mbycsXHJcbiAgICAweDgyYWE6ICdNRFByZXBEYXRlJyxcclxuICAgIDB4ODJhYjogJ01EUHJlcFRpbWUnLFxyXG4gICAgMHg4MmFjOiAnTURGaWxlVW5pdHMnLFxyXG4gICAgMHg4MzBlOiAnTW9kZWxQaXhlbFNjYWxlVGFnJyxcclxuICAgIDB4ODNiYjogJ0lQVEMnLFxyXG4gICAgMHg4NDdlOiAnSU5HUlBhY2tldERhdGFUYWcnLFxyXG4gICAgMHg4NDdmOiAnSU5HUkZsYWdSZWdpc3RlcnMnLFxyXG4gICAgMHg4NDgwOiAnSXJhc0JUcmFuc2Zvcm1hdGlvbk1hdHJpeCcsXHJcbiAgICAweDg0ODI6ICdNb2RlbFRpZXBvaW50VGFnJyxcclxuICAgIDB4ODVkODogJ01vZGVsVHJhbnNmb3JtYXRpb25UYWcnLFxyXG4gICAgMHg4NjQ5OiAnUGhvdG9zaG9wJyxcclxuICAgIDB4ODc2OTogJ0V4aWZJRkQnLFxyXG4gICAgMHg4NzczOiAnSUNDUHJvZmlsZScsXHJcbiAgICAweDg3YWY6ICdHZW9LZXlEaXJlY3RvcnlUYWcnLFxyXG4gICAgMHg4N2IwOiAnR2VvRG91YmxlUGFyYW1zVGFnJyxcclxuICAgIDB4ODdiMTogJ0dlb0FzY2lpUGFyYW1zVGFnJyxcclxuICAgIDB4ODgyNTogJ0dQU0lGRCcsXHJcbiAgICAweDg4NWM6ICdIeWxhRkFYRmF4UmVjdlBhcmFtcycsXHJcbiAgICAweDg4NWQ6ICdIeWxhRkFYRmF4U3ViQWRkcmVzcycsXHJcbiAgICAweDg4NWU6ICdIeWxhRkFYRmF4UmVjdlRpbWUnLFxyXG4gICAgMHg5MzVjOiAnSW1hZ2VTb3VyY2VEYXRhJyxcclxuICAgIDB4YTAwNTogJ0ludGVyb3BlcmFiaWxpdHlJRkQnLFxyXG4gICAgMHhhNDgwOiAnR0RBTF9NRVRBREFUQScsXHJcbiAgICAweGE0ODE6ICdHREFMX05PREFUQScsXHJcbiAgICAweGM0Mjc6ICdPY2VTY2Fuam9iRGVzY3JpcHRpb24nLFxyXG4gICAgMHhjNDI4OiAnT2NlQXBwbGljYXRpb25TZWxlY3RvcicsXHJcbiAgICAweGM0Mjk6ICdPY2VJZGVudGlmaWNhdGlvbk51bWJlcicsXHJcbiAgICAweGM0MmE6ICdPY2VJbWFnZUxvZ2ljQ2hhcmFjdGVyaXN0aWNzJyxcclxuICAgIDB4YzYxMjogJ0ROR1ZlcnNpb24nLFxyXG4gICAgMHhjNjEzOiAnRE5HQmFja3dhcmRWZXJzaW9uJyxcclxuICAgIDB4YzYxNDogJ1VuaXF1ZUNhbWVyYU1vZGVsJyxcclxuICAgIDB4YzYxNTogJ0xvY2FsaXplZENhbWVyYU1vZGVsJyxcclxuICAgIDB4YzYxNjogJ0NGQVBsYW5lQ29sb3InLFxyXG4gICAgMHhjNjE3OiAnQ0ZBTGF5b3V0JyxcclxuICAgIDB4YzYxODogJ0xpbmVhcml6YXRpb25UYWJsZScsXHJcbiAgICAweGM2MTk6ICdCbGFja0xldmVsUmVwZWF0RGltJyxcclxuICAgIDB4YzYxYTogJ0JsYWNrTGV2ZWwnLFxyXG4gICAgMHhjNjFiOiAnQmxhY2tMZXZlbERlbHRhSCcsXHJcbiAgICAweGM2MWM6ICdCbGFja0xldmVsRGVsdGFWJyxcclxuICAgIDB4YzYxZDogJ1doaXRlTGV2ZWwnLFxyXG4gICAgMHhjNjFlOiAnRGVmYXVsdFNjYWxlJyxcclxuICAgIDB4YzYxZjogJ0RlZmF1bHRDcm9wT3JpZ2luJyxcclxuICAgIDB4YzYyMDogJ0RlZmF1bHRDcm9wU2l6ZScsXHJcbiAgICAweGM2MjE6ICdDb2xvck1hdHJpeDEnLFxyXG4gICAgMHhjNjIyOiAnQ29sb3JNYXRyaXgyJyxcclxuICAgIDB4YzYyMzogJ0NhbWVyYUNhbGlicmF0aW9uMScsXHJcbiAgICAweGM2MjQ6ICdDYW1lcmFDYWxpYnJhdGlvbjInLFxyXG4gICAgMHhjNjI1OiAnUmVkdWN0aW9uTWF0cml4MScsXHJcbiAgICAweGM2MjY6ICdSZWR1Y3Rpb25NYXRyaXgyJyxcclxuICAgIDB4YzYyNzogJ0FuYWxvZ0JhbGFuY2UnLFxyXG4gICAgMHhjNjI4OiAnQXNTaG90TmV1dHJhbCcsXHJcbiAgICAweGM2Mjk6ICdBc1Nob3RXaGl0ZVhZJyxcclxuICAgIDB4YzYyYTogJ0Jhc2VsaW5lRXhwb3N1cmUnLFxyXG4gICAgMHhjNjJiOiAnQmFzZWxpbmVOb2lzZScsXHJcbiAgICAweGM2MmM6ICdCYXNlbGluZVNoYXJwbmVzcycsXHJcbiAgICAweGM2MmQ6ICdCYXllckdyZWVuU3BsaXQnLFxyXG4gICAgMHhjNjJlOiAnTGluZWFyUmVzcG9uc2VMaW1pdCcsXHJcbiAgICAweGM2MmY6ICdDYW1lcmFTZXJpYWxOdW1iZXInLFxyXG4gICAgMHhjNjMwOiAnTGVuc0luZm8nLFxyXG4gICAgMHhjNjMxOiAnQ2hyb21hQmx1clJhZGl1cycsXHJcbiAgICAweGM2MzI6ICdBbnRpQWxpYXNTdHJlbmd0aCcsXHJcbiAgICAweGM2MzQ6ICdETkdQcml2YXRlRGF0YScsXHJcbiAgICAweGM2MzU6ICdNYWtlck5vdGVTYWZldHknLFxyXG4gICAgMHhjNjVhOiAnQ2FsaWJyYXRpb25JbGx1bWluYW50MScsXHJcbiAgICAweGM2NWI6ICdDYWxpYnJhdGlvbklsbHVtaW5hbnQyJyxcclxuICAgIDB4YzY1YzogJ0Jlc3RRdWFsaXR5U2NhbGUnLFxyXG4gICAgMHhjNjYwOiAnQWxpYXNMYXllck1ldGFkYXRhJyxcclxufTtcclxuY29uc3QgdGFnc0J5TmFtZSA9IHt9O1xyXG5mb3IgKGxldCBpIGluIHRhZ3NCeUlkKSB7XHJcbiAgICB0YWdzQnlOYW1lW3RhZ3NCeUlkW2ldXSA9IE51bWJlcihpKTtcclxufVxyXG5leHBvcnQgeyB0YWdzQnlJZCwgdGFnc0J5TmFtZSB9O1xyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1zdGFuZGFyZC5qcy5tYXAiLCJpbXBvcnQgKiBhcyBleGlmIGZyb20gJy4vdGFncy9leGlmJztcclxuaW1wb3J0ICogYXMgZ3BzIGZyb20gJy4vdGFncy9ncHMnO1xyXG5pbXBvcnQgKiBhcyBzdGFuZGFyZCBmcm9tICcuL3RhZ3Mvc3RhbmRhcmQnO1xyXG5jb25zdCB0YWdzID0ge1xyXG4gICAgc3RhbmRhcmQsXHJcbiAgICBleGlmLFxyXG4gICAgZ3BzLFxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJRkQge1xyXG4gICAgY29uc3RydWN0b3Ioa2luZCkge1xyXG4gICAgICAgIGlmICgha2luZCkge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ21pc3Npbmcga2luZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLmRhdGEgPSBuZXcgVWludDhBcnJheSgpO1xyXG4gICAgICAgIHRoaXMuZmllbGRzID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIHRoaXMua2luZCA9IGtpbmQ7XHJcbiAgICAgICAgdGhpcy5faGFzTWFwID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy5fbWFwID0ge307XHJcbiAgICB9XHJcbiAgICBnZXQodGFnKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB0YWcgPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZpZWxkcy5nZXQodGFnKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZmllbGRzLmdldCh0YWdzW3RoaXMua2luZF0udGFnc0J5TmFtZVt0YWddKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignZXhwZWN0ZWQgYSBudW1iZXIgb3Igc3RyaW5nJyk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0IG1hcCgpIHtcclxuICAgICAgICBpZiAoIXRoaXMuX2hhc01hcCkge1xyXG4gICAgICAgICAgICBjb25zdCB0YWdsaXN0ID0gdGFnc1t0aGlzLmtpbmRdLnRhZ3NCeUlkO1xyXG4gICAgICAgICAgICBmb3IgKGxldCBrZXkgb2YgdGhpcy5maWVsZHMua2V5cygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGFnbGlzdFtrZXldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fbWFwW3RhZ2xpc3Rba2V5XV0gPSB0aGlzLmZpZWxkcy5nZXQoa2V5KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLl9oYXNNYXAgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdGhpcy5fbWFwO1xyXG4gICAgfVxyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlmZC5qcy5tYXAiLCJsZXQgdHlwZXMgPSBuZXcgTWFwKFtcclxuICAgIFsxLCBbMSwgcmVhZEJ5dGVdXSxcclxuICAgIFsyLCBbMSwgcmVhZEFTQ0lJXV0sXHJcbiAgICBbMywgWzIsIHJlYWRTaG9ydF1dLFxyXG4gICAgWzQsIFs0LCByZWFkTG9uZ11dLFxyXG4gICAgWzUsIFs4LCByZWFkUmF0aW9uYWxdXSxcclxuICAgIFs2LCBbMSwgcmVhZFNCeXRlXV0sXHJcbiAgICBbNywgWzEsIHJlYWRCeXRlXV0sXHJcbiAgICBbOCwgWzIsIHJlYWRTU2hvcnRdXSxcclxuICAgIFs5LCBbNCwgcmVhZFNMb25nXV0sXHJcbiAgICBbMTAsIFs4LCByZWFkU1JhdGlvbmFsXV0sXHJcbiAgICBbMTEsIFs0LCByZWFkRmxvYXRdXSxcclxuICAgIFsxMiwgWzgsIHJlYWREb3VibGVdXSxcclxuXSk7XHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRCeXRlTGVuZ3RoKHR5cGUsIGNvdW50KSB7XHJcbiAgICBjb25zdCB2YWwgPSB0eXBlcy5nZXQodHlwZSk7XHJcbiAgICBpZiAoIXZhbClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHR5cGUgbm90IGZvdW5kOiAke3R5cGV9YCk7XHJcbiAgICByZXR1cm4gdmFsWzBdICogY291bnQ7XHJcbn1cclxuZXhwb3J0IGZ1bmN0aW9uIHJlYWREYXRhKGRlY29kZXIsIHR5cGUsIGNvdW50KSB7XHJcbiAgICBjb25zdCB2YWwgPSB0eXBlcy5nZXQodHlwZSk7XHJcbiAgICBpZiAoIXZhbClcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYHR5cGUgbm90IGZvdW5kOiAke3R5cGV9YCk7XHJcbiAgICByZXR1cm4gdmFsWzFdKGRlY29kZXIsIGNvdW50KTtcclxufVxyXG5mdW5jdGlvbiByZWFkQnl0ZShkZWNvZGVyLCBjb3VudCkge1xyXG4gICAgaWYgKGNvdW50ID09PSAxKVxyXG4gICAgICAgIHJldHVybiBkZWNvZGVyLnJlYWRVaW50OCgpO1xyXG4gICAgbGV0IGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoY291bnQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaV0gPSBkZWNvZGVyLnJlYWRVaW50OCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbmZ1bmN0aW9uIHJlYWRBU0NJSShkZWNvZGVyLCBjb3VudCkge1xyXG4gICAgbGV0IHN0cmluZ3MgPSBbXTtcclxuICAgIGxldCBjdXJyZW50U3RyaW5nID0gJyc7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBsZXQgY2hhciA9IFN0cmluZy5mcm9tQ2hhckNvZGUoZGVjb2Rlci5yZWFkVWludDgoKSk7XHJcbiAgICAgICAgaWYgKGNoYXIgPT09ICdcXDAnKSB7XHJcbiAgICAgICAgICAgIHN0cmluZ3MucHVzaChjdXJyZW50U3RyaW5nKTtcclxuICAgICAgICAgICAgY3VycmVudFN0cmluZyA9ICcnO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgY3VycmVudFN0cmluZyArPSBjaGFyO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGlmIChzdHJpbmdzLmxlbmd0aCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBzdHJpbmdzWzBdO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHN0cmluZ3M7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVhZFNob3J0KGRlY29kZXIsIGNvdW50KSB7XHJcbiAgICBpZiAoY291bnQgPT09IDEpXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIucmVhZFVpbnQxNigpO1xyXG4gICAgbGV0IGFycmF5ID0gbmV3IFVpbnQxNkFycmF5KGNvdW50KTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkVWludDE2KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZExvbmcoZGVjb2RlciwgY291bnQpIHtcclxuICAgIGlmIChjb3VudCA9PT0gMSlcclxuICAgICAgICByZXR1cm4gZGVjb2Rlci5yZWFkVWludDMyKCk7XHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgVWludDMyQXJyYXkoY291bnQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaV0gPSBkZWNvZGVyLnJlYWRVaW50MzIoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5mdW5jdGlvbiByZWFkUmF0aW9uYWwoZGVjb2RlciwgY291bnQpIHtcclxuICAgIGlmIChjb3VudCA9PT0gMSkge1xyXG4gICAgICAgIHJldHVybiBkZWNvZGVyLnJlYWRVaW50MzIoKSAvIGRlY29kZXIucmVhZFVpbnQzMigpO1xyXG4gICAgfVxyXG4gICAgbGV0IHJhdGlvbmFscyA9IG5ldyBBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICByYXRpb25hbHNbaV0gPSBkZWNvZGVyLnJlYWRVaW50MzIoKSAvIGRlY29kZXIucmVhZFVpbnQzMigpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJhdGlvbmFscztcclxufVxyXG5mdW5jdGlvbiByZWFkU0J5dGUoZGVjb2RlciwgY291bnQpIHtcclxuICAgIGlmIChjb3VudCA9PT0gMSlcclxuICAgICAgICByZXR1cm4gZGVjb2Rlci5yZWFkSW50OCgpO1xyXG4gICAgbGV0IGFycmF5ID0gbmV3IEludDhBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZEludDgoKTtcclxuICAgIH1cclxuICAgIHJldHVybiBhcnJheTtcclxufVxyXG5mdW5jdGlvbiByZWFkU1Nob3J0KGRlY29kZXIsIGNvdW50KSB7XHJcbiAgICBpZiAoY291bnQgPT09IDEpXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIucmVhZEludDE2KCk7XHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgSW50MTZBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZEludDE2KCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZFNMb25nKGRlY29kZXIsIGNvdW50KSB7XHJcbiAgICBpZiAoY291bnQgPT09IDEpXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIucmVhZEludDMyKCk7XHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgSW50MzJBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICBhcnJheVtpXSA9IGRlY29kZXIucmVhZEludDMyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZFNSYXRpb25hbChkZWNvZGVyLCBjb3VudCkge1xyXG4gICAgaWYgKGNvdW50ID09PSAxKSB7XHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIucmVhZEludDMyKCkgLyBkZWNvZGVyLnJlYWRJbnQzMigpO1xyXG4gICAgfVxyXG4gICAgbGV0IHJhdGlvbmFscyA9IG5ldyBBcnJheShjb3VudCk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcclxuICAgICAgICByYXRpb25hbHNbaV0gPSBkZWNvZGVyLnJlYWRJbnQzMigpIC8gZGVjb2Rlci5yZWFkSW50MzIoKTtcclxuICAgIH1cclxuICAgIHJldHVybiByYXRpb25hbHM7XHJcbn1cclxuZnVuY3Rpb24gcmVhZEZsb2F0KGRlY29kZXIsIGNvdW50KSB7XHJcbiAgICBpZiAoY291bnQgPT09IDEpXHJcbiAgICAgICAgcmV0dXJuIGRlY29kZXIucmVhZEZsb2F0MzIoKTtcclxuICAgIGxldCBhcnJheSA9IG5ldyBGbG9hdDMyQXJyYXkoY291bnQpO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XHJcbiAgICAgICAgYXJyYXlbaV0gPSBkZWNvZGVyLnJlYWRGbG9hdDMyKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXJyYXk7XHJcbn1cclxuZnVuY3Rpb24gcmVhZERvdWJsZShkZWNvZGVyLCBjb3VudCkge1xyXG4gICAgaWYgKGNvdW50ID09PSAxKVxyXG4gICAgICAgIHJldHVybiBkZWNvZGVyLnJlYWRGbG9hdDY0KCk7XHJcbiAgICBsZXQgYXJyYXkgPSBuZXcgRmxvYXQ2NEFycmF5KGNvdW50KTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xyXG4gICAgICAgIGFycmF5W2ldID0gZGVjb2Rlci5yZWFkRmxvYXQ2NCgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFycmF5O1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlmZFZhbHVlLmpzLm1hcCIsImltcG9ydCB7IElPQnVmZmVyIH0gZnJvbSAnaW9idWZmZXInO1xyXG5jb25zdCBDTEVBUl9DT0RFID0gMjU2O1xyXG5jb25zdCBFT0lfQ09ERSA9IDI1NztcclxuLy8gMC0yNTUgZnJvbSB0aGUgdGFibGUgKyAyNTYgZm9yIGNsZWFyIGNvZGUgKyAyNTcgZm9yIGVuZCBvZiBpbmZvcm1hdGlvbiBjb2RlLlxyXG5jb25zdCBUQUJMRV9TVEFSVCA9IDI1ODtcclxuY29uc3QgTUlOX0JJVF9MRU5HVEggPSA5O1xyXG5jb25zdCBzdHJpbmdUYWJsZSA9IFtdO1xyXG5mb3IgKGxldCBpID0gMDsgaSA8IDI1NjsgaSsrKSB7XHJcbiAgICBzdHJpbmdUYWJsZS5wdXNoKFtpXSk7XHJcbn1cclxuLy8gRmlsbCB0aGUgdGFibGUgd2l0aCBkdW1teSBkYXRhLlxyXG4vLyBFbGVtZW50cyBhdCBpbmRpY2VzID4gMjU3IHdpbGwgYmUgcmVwbGFjZWQgZHVyaW5nIGRlY29tcHJlc3Npb24uXHJcbmNvbnN0IGR1bW15U3RyaW5nID0gWzBdO1xyXG5mb3IgKGxldCBpID0gMjU2OyBpIDwgNDA5NjsgaSsrKSB7XHJcbiAgICBzdHJpbmdUYWJsZS5wdXNoKGR1bW15U3RyaW5nKTtcclxufVxyXG5jbGFzcyBMendEZWNvZGVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICB0aGlzLnN0cmlwQXJyYXkgPSBuZXcgVWludDhBcnJheShkYXRhLmJ1ZmZlciwgZGF0YS5ieXRlT2Zmc2V0LCBkYXRhLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIGNvbnN0IHRhYmxlID0gbmV3IE1hcCgpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgMjU2OyBpKyspIHtcclxuICAgICAgICAgICAgdGFibGUuc2V0KGksIFtpXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuY3VycmVudEJpdCA9IDA7XHJcbiAgICAgICAgdGhpcy50YWJsZUxlbmd0aCA9IFRBQkxFX1NUQVJUO1xyXG4gICAgICAgIHRoaXMuY3VycmVudEJpdExlbmd0aCA9IE1JTl9CSVRfTEVOR1RIO1xyXG4gICAgICAgIHRoaXMub3V0RGF0YSA9IG5ldyBJT0J1ZmZlcihkYXRhLmJ5dGVMZW5ndGgpO1xyXG4gICAgfVxyXG4gICAgZGVjb2RlKCkge1xyXG4gICAgICAgIGxldCBjb2RlID0gMDtcclxuICAgICAgICBsZXQgb2xkQ29kZSA9IDA7XHJcbiAgICAgICAgd2hpbGUgKChjb2RlID0gdGhpcy5nZXROZXh0Q29kZSgpKSAhPT0gRU9JX0NPREUpIHtcclxuICAgICAgICAgICAgaWYgKGNvZGUgPT09IENMRUFSX0NPREUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuaW5pdGlhbGl6ZVRhYmxlKCk7XHJcbiAgICAgICAgICAgICAgICBjb2RlID0gdGhpcy5nZXROZXh0Q29kZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNvZGUgPT09IEVPSV9DT0RFKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLndyaXRlU3RyaW5nKHRoaXMuc3RyaW5nRnJvbUNvZGUoY29kZSkpO1xyXG4gICAgICAgICAgICAgICAgb2xkQ29kZSA9IGNvZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSBpZiAodGhpcy5pc0luVGFibGUoY29kZSkpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVTdHJpbmcodGhpcy5zdHJpbmdGcm9tQ29kZShjb2RlKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmFkZFN0cmluZ1RvVGFibGUodGhpcy5zdHJpbmdGcm9tQ29kZShvbGRDb2RlKS5jb25jYXQodGhpcy5zdHJpbmdGcm9tQ29kZShjb2RlKVswXSkpO1xyXG4gICAgICAgICAgICAgICAgb2xkQ29kZSA9IGNvZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBvdXRTdHJpbmcgPSB0aGlzLnN0cmluZ0Zyb21Db2RlKG9sZENvZGUpLmNvbmNhdCh0aGlzLnN0cmluZ0Zyb21Db2RlKG9sZENvZGUpWzBdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMud3JpdGVTdHJpbmcob3V0U3RyaW5nKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuYWRkU3RyaW5nVG9UYWJsZShvdXRTdHJpbmcpO1xyXG4gICAgICAgICAgICAgICAgb2xkQ29kZSA9IGNvZGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3Qgb3V0QXJyYXkgPSB0aGlzLm91dERhdGEudG9BcnJheSgpO1xyXG4gICAgICAgIHJldHVybiBuZXcgRGF0YVZpZXcob3V0QXJyYXkuYnVmZmVyLCBvdXRBcnJheS5ieXRlT2Zmc2V0LCBvdXRBcnJheS5ieXRlTGVuZ3RoKTtcclxuICAgIH1cclxuICAgIGluaXRpYWxpemVUYWJsZSgpIHtcclxuICAgICAgICB0aGlzLnRhYmxlTGVuZ3RoID0gVEFCTEVfU1RBUlQ7XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Qml0TGVuZ3RoID0gTUlOX0JJVF9MRU5HVEg7XHJcbiAgICB9XHJcbiAgICB3cml0ZVN0cmluZyhzdHJpbmcpIHtcclxuICAgICAgICB0aGlzLm91dERhdGEud3JpdGVCeXRlcyhzdHJpbmcpO1xyXG4gICAgfVxyXG4gICAgc3RyaW5nRnJvbUNvZGUoY29kZSkge1xyXG4gICAgICAgIC8vIEF0IHRoaXMgcG9pbnQsIGBjb2RlYCBtdXN0IGJlIGRlZmluZWQgaW4gdGhlIHRhYmxlLlxyXG4gICAgICAgIHJldHVybiBzdHJpbmdUYWJsZVtjb2RlXTtcclxuICAgIH1cclxuICAgIGlzSW5UYWJsZShjb2RlKSB7XHJcbiAgICAgICAgcmV0dXJuIGNvZGUgPCB0aGlzLnRhYmxlTGVuZ3RoO1xyXG4gICAgfVxyXG4gICAgYWRkU3RyaW5nVG9UYWJsZShzdHJpbmcpIHtcclxuICAgICAgICBzdHJpbmdUYWJsZVt0aGlzLnRhYmxlTGVuZ3RoKytdID0gc3RyaW5nO1xyXG4gICAgICAgIGlmICh0aGlzLnRhYmxlTGVuZ3RoICsgMSA9PT0gMiAqKiB0aGlzLmN1cnJlbnRCaXRMZW5ndGgpIHtcclxuICAgICAgICAgICAgdGhpcy5jdXJyZW50Qml0TGVuZ3RoKys7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgZ2V0TmV4dENvZGUoKSB7XHJcbiAgICAgICAgY29uc3QgZCA9IHRoaXMuY3VycmVudEJpdCAlIDg7XHJcbiAgICAgICAgY29uc3QgYSA9IHRoaXMuY3VycmVudEJpdCA+Pj4gMztcclxuICAgICAgICBjb25zdCBkZSA9IDggLSBkO1xyXG4gICAgICAgIGNvbnN0IGVmID0gdGhpcy5jdXJyZW50Qml0ICsgdGhpcy5jdXJyZW50Qml0TGVuZ3RoIC0gKGEgKyAxKSAqIDg7XHJcbiAgICAgICAgbGV0IGZnID0gOCAqIChhICsgMikgLSAodGhpcy5jdXJyZW50Qml0ICsgdGhpcy5jdXJyZW50Qml0TGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBkZyA9IChhICsgMikgKiA4IC0gdGhpcy5jdXJyZW50Qml0O1xyXG4gICAgICAgIGZnID0gTWF0aC5tYXgoMCwgZmcpO1xyXG4gICAgICAgIGxldCBjaHVuazEgPSB0aGlzLnN0cmlwQXJyYXlbYV0gJiAoMiAqKiAoOCAtIGQpIC0gMSk7XHJcbiAgICAgICAgY2h1bmsxIDw8PSB0aGlzLmN1cnJlbnRCaXRMZW5ndGggLSBkZTtcclxuICAgICAgICBsZXQgY2h1bmtzID0gY2h1bmsxO1xyXG4gICAgICAgIGlmIChhICsgMSA8IHRoaXMuc3RyaXBBcnJheS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgbGV0IGNodW5rMiA9IHRoaXMuc3RyaXBBcnJheVthICsgMV0gPj4+IGZnO1xyXG4gICAgICAgICAgICBjaHVuazIgPDw9IE1hdGgubWF4KDAsIHRoaXMuY3VycmVudEJpdExlbmd0aCAtIGRnKTtcclxuICAgICAgICAgICAgY2h1bmtzICs9IGNodW5rMjtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGVmID4gOCAmJiBhICsgMiA8IHRoaXMuc3RyaXBBcnJheS5sZW5ndGgpIHtcclxuICAgICAgICAgICAgY29uc3QgaGkgPSAoYSArIDMpICogOCAtICh0aGlzLmN1cnJlbnRCaXQgKyB0aGlzLmN1cnJlbnRCaXRMZW5ndGgpO1xyXG4gICAgICAgICAgICBjb25zdCBjaHVuazMgPSB0aGlzLnN0cmlwQXJyYXlbYSArIDJdID4+PiBoaTtcclxuICAgICAgICAgICAgY2h1bmtzICs9IGNodW5rMztcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5jdXJyZW50Qml0ICs9IHRoaXMuY3VycmVudEJpdExlbmd0aDtcclxuICAgICAgICByZXR1cm4gY2h1bmtzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBkZWNvbXByZXNzTHp3KHN0cmlwRGF0YSkge1xyXG4gICAgcmV0dXJuIG5ldyBMendEZWNvZGVyKHN0cmlwRGF0YSkuZGVjb2RlKCk7XHJcbn1cclxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bHp3LmpzLm1hcCIsImltcG9ydCBJZmQgZnJvbSAnLi9pZmQnO1xyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJlZmVyLW5hbWVkLWNhcHR1cmUtZ3JvdXBcclxuY29uc3QgZGF0ZVRpbWVSZWdleCA9IC9eKFxcZHs0fSk6KFxcZHsyfSk6KFxcZHsyfSkgKFxcZHsyfSk6KFxcZHsyfSk6KFxcZHsyfSkkLztcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVGlmZklmZCBleHRlbmRzIElmZCB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcignc3RhbmRhcmQnKTtcclxuICAgIH1cclxuICAgIC8vIEN1c3RvbSBmaWVsZHNcclxuICAgIGdldCBzaXplKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLndpZHRoICogdGhpcy5oZWlnaHQ7XHJcbiAgICB9XHJcbiAgICBnZXQgd2lkdGgoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VXaWR0aDtcclxuICAgIH1cclxuICAgIGdldCBoZWlnaHQoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuaW1hZ2VMZW5ndGg7XHJcbiAgICB9XHJcbiAgICBnZXQgY29tcG9uZW50cygpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zYW1wbGVzUGVyUGl4ZWw7XHJcbiAgICB9XHJcbiAgICBnZXQgZGF0ZSgpIHtcclxuICAgICAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgbGV0IHJlc3VsdCA9IGRhdGVUaW1lUmVnZXguZXhlYyh0aGlzLmRhdGVUaW1lKTtcclxuICAgICAgICBpZiAocmVzdWx0ID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgaW52YWxpZCBkYXRlVGltZTogJHt0aGlzLmRhdGVUaW1lfWApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkYXRlLnNldEZ1bGxZZWFyKE51bWJlcihyZXN1bHRbMV0pLCBOdW1iZXIocmVzdWx0WzJdKSAtIDEsIE51bWJlcihyZXN1bHRbM10pKTtcclxuICAgICAgICBkYXRlLnNldEhvdXJzKE51bWJlcihyZXN1bHRbNF0pLCBOdW1iZXIocmVzdWx0WzVdKSwgTnVtYmVyKHJlc3VsdFs2XSkpO1xyXG4gICAgICAgIHJldHVybiBkYXRlO1xyXG4gICAgfVxyXG4gICAgLy8gSUZEIGZpZWxkc1xyXG4gICAgZ2V0IG5ld1N1YmZpbGVUeXBlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnTmV3U3ViZmlsZVR5cGUnKTtcclxuICAgIH1cclxuICAgIGdldCBpbWFnZVdpZHRoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnSW1hZ2VXaWR0aCcpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGltYWdlTGVuZ3RoKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnSW1hZ2VMZW5ndGgnKTtcclxuICAgIH1cclxuICAgIGdldCBiaXRzUGVyU2FtcGxlKCkge1xyXG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLmdldCgnQml0c1BlclNhbXBsZScpO1xyXG4gICAgICAgIGlmIChkYXRhICYmIHR5cGVvZiBkYXRhICE9PSAnbnVtYmVyJykge1xyXG4gICAgICAgICAgICByZXR1cm4gZGF0YVswXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGRhdGE7XHJcbiAgICB9XHJcbiAgICBnZXQgYWxwaGEoKSB7XHJcbiAgICAgICAgY29uc3QgZXh0cmFTYW1wbGVzID0gdGhpcy5leHRyYVNhbXBsZXM7XHJcbiAgICAgICAgaWYgKCFleHRyYVNhbXBsZXMpXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gZXh0cmFTYW1wbGVzWzBdICE9PSAwO1xyXG4gICAgfVxyXG4gICAgZ2V0IGFzc29jaWF0ZWRBbHBoYSgpIHtcclxuICAgICAgICBjb25zdCBleHRyYVNhbXBsZXMgPSB0aGlzLmV4dHJhU2FtcGxlcztcclxuICAgICAgICBpZiAoIWV4dHJhU2FtcGxlcylcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIHJldHVybiBleHRyYVNhbXBsZXNbMF0gPT09IDE7XHJcbiAgICB9XHJcbiAgICBnZXQgZXh0cmFTYW1wbGVzKCkge1xyXG4gICAgICAgIHJldHVybiBhbHdheXNBcnJheSh0aGlzLmdldCgnRXh0cmFTYW1wbGVzJykpO1xyXG4gICAgfVxyXG4gICAgZ2V0IGNvbXByZXNzaW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnQ29tcHJlc3Npb24nKSB8fCAxO1xyXG4gICAgfVxyXG4gICAgZ2V0IHR5cGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdQaG90b21ldHJpY0ludGVycHJldGF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgZmlsbE9yZGVyKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnRmlsbE9yZGVyJykgfHwgMTtcclxuICAgIH1cclxuICAgIGdldCBkb2N1bWVudE5hbWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdEb2N1bWVudE5hbWUnKTtcclxuICAgIH1cclxuICAgIGdldCBpbWFnZURlc2NyaXB0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnSW1hZ2VEZXNjcmlwdGlvbicpO1xyXG4gICAgfVxyXG4gICAgZ2V0IHN0cmlwT2Zmc2V0cygpIHtcclxuICAgICAgICByZXR1cm4gYWx3YXlzQXJyYXkodGhpcy5nZXQoJ1N0cmlwT2Zmc2V0cycpKTtcclxuICAgIH1cclxuICAgIGdldCBvcmllbnRhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ09yaWVudGF0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgc2FtcGxlc1BlclBpeGVsKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnU2FtcGxlc1BlclBpeGVsJykgfHwgMTtcclxuICAgIH1cclxuICAgIGdldCByb3dzUGVyU3RyaXAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdSb3dzUGVyU3RyaXAnKTtcclxuICAgIH1cclxuICAgIGdldCBzdHJpcEJ5dGVDb3VudHMoKSB7XHJcbiAgICAgICAgcmV0dXJuIGFsd2F5c0FycmF5KHRoaXMuZ2V0KCdTdHJpcEJ5dGVDb3VudHMnKSk7XHJcbiAgICB9XHJcbiAgICBnZXQgbWluU2FtcGxlVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdNaW5TYW1wbGVWYWx1ZScpIHx8IDA7XHJcbiAgICB9XHJcbiAgICBnZXQgbWF4U2FtcGxlVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdNYXhTYW1wbGVWYWx1ZScpIHx8IE1hdGgucG93KDIsIHRoaXMuYml0c1BlclNhbXBsZSkgLSAxO1xyXG4gICAgfVxyXG4gICAgZ2V0IHhSZXNvbHV0aW9uKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnWFJlc29sdXRpb24nKTtcclxuICAgIH1cclxuICAgIGdldCB5UmVzb2x1dGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ1lSZXNvbHV0aW9uJyk7XHJcbiAgICB9XHJcbiAgICBnZXQgcGxhbmFyQ29uZmlndXJhdGlvbigpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ1BsYW5hckNvbmZpZ3VyYXRpb24nKSB8fCAxO1xyXG4gICAgfVxyXG4gICAgZ2V0IHJlc29sdXRpb25Vbml0KCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnUmVzb2x1dGlvblVuaXQnKSB8fCAyO1xyXG4gICAgfVxyXG4gICAgZ2V0IGRhdGVUaW1lKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnRGF0ZVRpbWUnKTtcclxuICAgIH1cclxuICAgIGdldCBwcmVkaWN0b3IoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdQcmVkaWN0b3InKSB8fCAxO1xyXG4gICAgfVxyXG4gICAgZ2V0IHNhbXBsZUZvcm1hdCgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5nZXQoJ1NhbXBsZUZvcm1hdCcpIHx8IDE7XHJcbiAgICB9XHJcbiAgICBnZXQgc01pblNhbXBsZVZhbHVlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmdldCgnU01pblNhbXBsZVZhbHVlJykgfHwgdGhpcy5taW5TYW1wbGVWYWx1ZTtcclxuICAgIH1cclxuICAgIGdldCBzTWF4U2FtcGxlVmFsdWUoKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2V0KCdTTWF4U2FtcGxlVmFsdWUnKSB8fCB0aGlzLm1heFNhbXBsZVZhbHVlO1xyXG4gICAgfVxyXG4gICAgZ2V0IHBhbGV0dGUoKSB7XHJcbiAgICAgICAgY29uc3QgdG90YWxDb2xvcnMgPSAyICoqIHRoaXMuYml0c1BlclNhbXBsZTtcclxuICAgICAgICBjb25zdCBjb2xvck1hcCA9IHRoaXMuZ2V0KCdDb2xvck1hcCcpO1xyXG4gICAgICAgIGlmICghY29sb3JNYXApXHJcbiAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgaWYgKGNvbG9yTWFwLmxlbmd0aCAhPT0gMyAqIHRvdGFsQ29sb3JzKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ29sb3JNYXAgc2l6ZSBtdXN0IGJlICR7dG90YWxDb2xvcnN9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IHBhbGV0dGUgPSBbXTtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvdGFsQ29sb3JzOyBpKyspIHtcclxuICAgICAgICAgICAgcGFsZXR0ZS5wdXNoKFtcclxuICAgICAgICAgICAgICAgIGNvbG9yTWFwW2ldLFxyXG4gICAgICAgICAgICAgICAgY29sb3JNYXBbaSArIHRvdGFsQ29sb3JzXSxcclxuICAgICAgICAgICAgICAgIGNvbG9yTWFwW2kgKyAyICogdG90YWxDb2xvcnNdLFxyXG4gICAgICAgICAgICBdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHBhbGV0dGU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gYWx3YXlzQXJyYXkodmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKVxyXG4gICAgICAgIHJldHVybiBbdmFsdWVdO1xyXG4gICAgcmV0dXJuIHZhbHVlO1xyXG59XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRpZmZJZmQuanMubWFwIiwiaW1wb3J0IHsgaW5mbGF0ZSB9IGZyb20gJ3Bha28nO1xyXG5leHBvcnQgZnVuY3Rpb24gZGVjb21wcmVzc1psaWIoc3RyaXBEYXRhKSB7XHJcbiAgICBjb25zdCBzdHJpcFVpbnQ4ID0gbmV3IFVpbnQ4QXJyYXkoc3RyaXBEYXRhLmJ1ZmZlciwgc3RyaXBEYXRhLmJ5dGVPZmZzZXQsIHN0cmlwRGF0YS5ieXRlTGVuZ3RoKTtcclxuICAgIGNvbnN0IGluZmxhdGVkID0gaW5mbGF0ZShzdHJpcFVpbnQ4KTtcclxuICAgIHJldHVybiBuZXcgRGF0YVZpZXcoaW5mbGF0ZWQuYnVmZmVyLCBpbmZsYXRlZC5ieXRlT2Zmc2V0LCBpbmZsYXRlZC5ieXRlTGVuZ3RoKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD16bGliLmpzLm1hcCIsImltcG9ydCB7IElPQnVmZmVyIH0gZnJvbSAnaW9idWZmZXInO1xyXG5pbXBvcnQgeyBhcHBseUhvcml6b250YWxEaWZmZXJlbmNpbmc4Qml0LCBhcHBseUhvcml6b250YWxEaWZmZXJlbmNpbmcxNkJpdCwgfSBmcm9tICcuL2hvcml6b250YWxEaWZmZXJlbmNpbmcnO1xyXG5pbXBvcnQgSUZEIGZyb20gJy4vaWZkJztcclxuaW1wb3J0IHsgZ2V0Qnl0ZUxlbmd0aCwgcmVhZERhdGEgfSBmcm9tICcuL2lmZFZhbHVlJztcclxuaW1wb3J0IHsgZGVjb21wcmVzc0x6dyB9IGZyb20gJy4vbHp3JztcclxuaW1wb3J0IFRpZmZJZmQgZnJvbSAnLi90aWZmSWZkJztcclxuaW1wb3J0IHsgZGVjb21wcmVzc1psaWIgfSBmcm9tICcuL3psaWInO1xyXG5jb25zdCBkZWZhdWx0T3B0aW9ucyA9IHtcclxuICAgIGlnbm9yZUltYWdlRGF0YTogZmFsc2UsXHJcbiAgICBvbmx5Rmlyc3Q6IGZhbHNlLFxyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUSUZGRGVjb2RlciBleHRlbmRzIElPQnVmZmVyIHtcclxuICAgIGNvbnN0cnVjdG9yKGRhdGEpIHtcclxuICAgICAgICBzdXBlcihkYXRhKTtcclxuICAgICAgICB0aGlzLl9uZXh0SUZEID0gMDtcclxuICAgIH1cclxuICAgIGdldCBpc011bHRpUGFnZSgpIHtcclxuICAgICAgICBsZXQgYyA9IDA7XHJcbiAgICAgICAgdGhpcy5kZWNvZGVIZWFkZXIoKTtcclxuICAgICAgICB3aGlsZSAodGhpcy5fbmV4dElGRCkge1xyXG4gICAgICAgICAgICBjKys7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSUZEKHsgaWdub3JlSW1hZ2VEYXRhOiB0cnVlIH0sIHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoYyA9PT0gMikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPT09IDEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyB1bnN1cHBvcnRlZCgnaWZkQ291bnQnLCBjKTtcclxuICAgIH1cclxuICAgIGdldCBwYWdlQ291bnQoKSB7XHJcbiAgICAgICAgbGV0IGMgPSAwO1xyXG4gICAgICAgIHRoaXMuZGVjb2RlSGVhZGVyKCk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuX25leHRJRkQpIHtcclxuICAgICAgICAgICAgYysrO1xyXG4gICAgICAgICAgICB0aGlzLmRlY29kZUlGRCh7IGlnbm9yZUltYWdlRGF0YTogdHJ1ZSB9LCB0cnVlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGMgPiAwKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyB1bnN1cHBvcnRlZCgnaWZkQ291bnQnLCBjKTtcclxuICAgIH1cclxuICAgIGRlY29kZShvcHRpb25zID0ge30pIHtcclxuICAgICAgICBvcHRpb25zID0gT2JqZWN0LmFzc2lnbih7fSwgZGVmYXVsdE9wdGlvbnMsIG9wdGlvbnMpO1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IFtdO1xyXG4gICAgICAgIHRoaXMuZGVjb2RlSGVhZGVyKCk7XHJcbiAgICAgICAgd2hpbGUgKHRoaXMuX25leHRJRkQpIHtcclxuICAgICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5kZWNvZGVJRkQob3B0aW9ucywgdHJ1ZSkpO1xyXG4gICAgICAgICAgICBpZiAob3B0aW9ucy5vbmx5Rmlyc3QpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBbcmVzdWx0WzBdXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgfVxyXG4gICAgZGVjb2RlSGVhZGVyKCkge1xyXG4gICAgICAgIC8vIEJ5dGUgb2Zmc2V0XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSB0aGlzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICBpZiAodmFsdWUgPT09IDB4NDk0OSkge1xyXG4gICAgICAgICAgICB0aGlzLnNldExpdHRsZUVuZGlhbigpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmICh2YWx1ZSA9PT0gMHg0ZDRkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QmlnRW5kaWFuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgYnl0ZSBvcmRlcjogMHgke3ZhbHVlLnRvU3RyaW5nKDE2KX1gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gTWFnaWMgbnVtYmVyXHJcbiAgICAgICAgaWYgKHRoaXMucmVhZFVpbnQxNigpICE9PSA0Mikge1xyXG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ25vdCBhIFRJRkYgZmlsZScpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBPZmZzZXQgb2YgdGhlIGZpcnN0IElGRFxyXG4gICAgICAgIHRoaXMuX25leHRJRkQgPSB0aGlzLnJlYWRVaW50MzIoKTtcclxuICAgIH1cclxuICAgIGRlY29kZUlGRChvcHRpb25zLCB0aWZmKSB7XHJcbiAgICAgICAgdGhpcy5zZWVrKHRoaXMuX25leHRJRkQpO1xyXG4gICAgICAgIGxldCBpZmQ7XHJcbiAgICAgICAgaWYgKHRpZmYpIHtcclxuICAgICAgICAgICAgaWZkID0gbmV3IFRpZmZJZmQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5raW5kKSB7XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGtpbmQgaXMgbWlzc2luZ2ApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmZCA9IG5ldyBJRkQob3B0aW9ucy5raW5kKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgbnVtRW50cmllcyA9IHRoaXMucmVhZFVpbnQxNigpO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbnVtRW50cmllczsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZGVjb2RlSUZERW50cnkoaWZkKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmlnbm9yZUltYWdlRGF0YSkge1xyXG4gICAgICAgICAgICBpZiAoIShpZmQgaW5zdGFuY2VvZiBUaWZmSWZkKSkge1xyXG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdXN0IGJlIGEgdGlmZiBpZmQnKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmRlY29kZUltYWdlRGF0YShpZmQpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLl9uZXh0SUZEID0gdGhpcy5yZWFkVWludDMyKCk7XHJcbiAgICAgICAgcmV0dXJuIGlmZDtcclxuICAgIH1cclxuICAgIGRlY29kZUlGREVudHJ5KGlmZCkge1xyXG4gICAgICAgIGNvbnN0IG9mZnNldCA9IHRoaXMub2Zmc2V0O1xyXG4gICAgICAgIGNvbnN0IHRhZyA9IHRoaXMucmVhZFVpbnQxNigpO1xyXG4gICAgICAgIGNvbnN0IHR5cGUgPSB0aGlzLnJlYWRVaW50MTYoKTtcclxuICAgICAgICBjb25zdCBudW1WYWx1ZXMgPSB0aGlzLnJlYWRVaW50MzIoKTtcclxuICAgICAgICBpZiAodHlwZSA8IDEgfHwgdHlwZSA+IDEyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2tpcCg0KTsgLy8gdW5rbm93biB0eXBlLCBza2lwIHRoaXMgdmFsdWVcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB2YWx1ZUJ5dGVMZW5ndGggPSBnZXRCeXRlTGVuZ3RoKHR5cGUsIG51bVZhbHVlcyk7XHJcbiAgICAgICAgaWYgKHZhbHVlQnl0ZUxlbmd0aCA+IDQpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWVrKHRoaXMucmVhZFVpbnQzMigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgY29uc3QgdmFsdWUgPSByZWFkRGF0YSh0aGlzLCB0eXBlLCBudW1WYWx1ZXMpO1xyXG4gICAgICAgIGlmZC5maWVsZHMuc2V0KHRhZywgdmFsdWUpO1xyXG4gICAgICAgIC8vIFJlYWQgc3ViLUlGRHNcclxuICAgICAgICBpZiAodGFnID09PSAweDg3NjkgfHwgdGFnID09PSAweDg4MjUpIHtcclxuICAgICAgICAgICAgbGV0IGN1cnJlbnRPZmZzZXQgPSB0aGlzLm9mZnNldDtcclxuICAgICAgICAgICAgbGV0IGtpbmQgPSAnZXhpZic7XHJcbiAgICAgICAgICAgIGlmICh0YWcgPT09IDB4ODc2OSkge1xyXG4gICAgICAgICAgICAgICAga2luZCA9ICdleGlmJztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIGlmICh0YWcgPT09IDB4ODgyNSkge1xyXG4gICAgICAgICAgICAgICAga2luZCA9ICdncHMnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHRoaXMuX25leHRJRkQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgaWZkW2tpbmRdID0gdGhpcy5kZWNvZGVJRkQoe1xyXG4gICAgICAgICAgICAgICAga2luZCxcclxuICAgICAgICAgICAgICAgIGlnbm9yZUltYWdlRGF0YTogdHJ1ZSxcclxuICAgICAgICAgICAgfSwgZmFsc2UpO1xyXG4gICAgICAgICAgICB0aGlzLm9mZnNldCA9IGN1cnJlbnRPZmZzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIGdvIHRvIHRoZSBuZXh0IGVudHJ5XHJcbiAgICAgICAgdGhpcy5zZWVrKG9mZnNldCk7XHJcbiAgICAgICAgdGhpcy5za2lwKDEyKTtcclxuICAgIH1cclxuICAgIGRlY29kZUltYWdlRGF0YShpZmQpIHtcclxuICAgICAgICBjb25zdCBvcmllbnRhdGlvbiA9IGlmZC5vcmllbnRhdGlvbjtcclxuICAgICAgICBpZiAob3JpZW50YXRpb24gJiYgb3JpZW50YXRpb24gIT09IDEpIHtcclxuICAgICAgICAgICAgdGhyb3cgdW5zdXBwb3J0ZWQoJ29yaWVudGF0aW9uJywgb3JpZW50YXRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBzd2l0Y2ggKGlmZC50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgMDogLy8gV2hpdGVJc1plcm9cclxuICAgICAgICAgICAgY2FzZSAxOiAvLyBCbGFja0lzWmVyb1xyXG4gICAgICAgICAgICBjYXNlIDI6IC8vIFJHQlxyXG4gICAgICAgICAgICBjYXNlIDM6IC8vIFBhbGV0dGUgY29sb3JcclxuICAgICAgICAgICAgICAgIHRoaXMucmVhZFN0cmlwRGF0YShpZmQpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyB1bnN1cHBvcnRlZCgnaW1hZ2UgdHlwZScsIGlmZC50eXBlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5hcHBseVByZWRpY3RvcihpZmQpO1xyXG4gICAgICAgIHRoaXMuY29udmVydEFscGhhKGlmZCk7XHJcbiAgICAgICAgaWYgKGlmZC50eXBlID09PSAwKSB7XHJcbiAgICAgICAgICAgIC8vIFdoaXRlSXNaZXJvOiB3ZSBpbnZlcnQgdGhlIHZhbHVlc1xyXG4gICAgICAgICAgICBjb25zdCBiaXREZXB0aCA9IGlmZC5iaXRzUGVyU2FtcGxlO1xyXG4gICAgICAgICAgICBjb25zdCBtYXhWYWx1ZSA9IE1hdGgucG93KDIsIGJpdERlcHRoKSAtIDE7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaWZkLmRhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIGlmZC5kYXRhW2ldID0gbWF4VmFsdWUgLSBpZmQuZGF0YVtpXTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJlYWRTdHJpcERhdGEoaWZkKSB7XHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBpZmQud2lkdGg7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gaWZkLmhlaWdodDtcclxuICAgICAgICBjb25zdCBiaXREZXB0aCA9IGlmZC5iaXRzUGVyU2FtcGxlO1xyXG4gICAgICAgIGNvbnN0IHNhbXBsZUZvcm1hdCA9IGlmZC5zYW1wbGVGb3JtYXQ7XHJcbiAgICAgICAgY29uc3Qgc2l6ZSA9IHdpZHRoICogaGVpZ2h0ICogaWZkLnNhbXBsZXNQZXJQaXhlbDtcclxuICAgICAgICBjb25zdCBkYXRhID0gZ2V0RGF0YUFycmF5KHNpemUsIGJpdERlcHRoLCBzYW1wbGVGb3JtYXQpO1xyXG4gICAgICAgIGNvbnN0IHJvd3NQZXJTdHJpcCA9IGlmZC5yb3dzUGVyU3RyaXA7XHJcbiAgICAgICAgY29uc3QgbWF4UGl4ZWxzID0gcm93c1BlclN0cmlwICogd2lkdGggKiBpZmQuc2FtcGxlc1BlclBpeGVsO1xyXG4gICAgICAgIGNvbnN0IHN0cmlwT2Zmc2V0cyA9IGlmZC5zdHJpcE9mZnNldHM7XHJcbiAgICAgICAgY29uc3Qgc3RyaXBCeXRlQ291bnRzID0gaWZkLnN0cmlwQnl0ZUNvdW50cztcclxuICAgICAgICBsZXQgcmVtYWluaW5nUGl4ZWxzID0gc2l6ZTtcclxuICAgICAgICBsZXQgcGl4ZWwgPSAwO1xyXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaXBPZmZzZXRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBzdHJpcERhdGEgPSBuZXcgRGF0YVZpZXcodGhpcy5idWZmZXIsIHN0cmlwT2Zmc2V0c1tpXSwgc3RyaXBCeXRlQ291bnRzW2ldKTtcclxuICAgICAgICAgICAgLy8gTGFzdCBzdHJpcCBjYW4gYmUgc21hbGxlclxyXG4gICAgICAgICAgICBsZXQgbGVuZ3RoID0gcmVtYWluaW5nUGl4ZWxzID4gbWF4UGl4ZWxzID8gbWF4UGl4ZWxzIDogcmVtYWluaW5nUGl4ZWxzO1xyXG4gICAgICAgICAgICByZW1haW5pbmdQaXhlbHMgLT0gbGVuZ3RoO1xyXG4gICAgICAgICAgICBsZXQgZGF0YVRvRmlsbCA9IHN0cmlwRGF0YTtcclxuICAgICAgICAgICAgc3dpdGNoIChpZmQuY29tcHJlc3Npb24pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMToge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIE5vIGNvbXByZXNzaW9uLCBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBjYXNlIDU6IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBMWlcgY29tcHJlc3Npb25cclxuICAgICAgICAgICAgICAgICAgICBkYXRhVG9GaWxsID0gZGVjb21wcmVzc0x6dyhzdHJpcERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSA4OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gWmxpYiBjb21wcmVzc2lvblxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUb0ZpbGwgPSBkZWNvbXByZXNzWmxpYihzdHJpcERhdGEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY2FzZSAyOiAvLyBDQ0lUVCBHcm91cCAzIDEtRGltZW5zaW9uYWwgTW9kaWZpZWQgSHVmZm1hbiBydW4gbGVuZ3RoIGVuY29kaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdW5zdXBwb3J0ZWQoJ0NvbXByZXNzaW9uJywgJ0NDSVRUIEdyb3VwIDMnKTtcclxuICAgICAgICAgICAgICAgIGNhc2UgMzI3NzM6IC8vIFBhY2tCaXRzIGNvbXByZXNzaW9uXHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgdW5zdXBwb3J0ZWQoJ0NvbXByZXNzaW9uJywgJ1BhY2tCaXRzJyk7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIHRocm93IHVuc3VwcG9ydGVkKCdDb21wcmVzc2lvbicsIGlmZC5jb21wcmVzc2lvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcGl4ZWwgPSB0aGlzLmZpbGxVbmNvbXByZXNzZWQoYml0RGVwdGgsIHNhbXBsZUZvcm1hdCwgZGF0YSwgZGF0YVRvRmlsbCwgcGl4ZWwsIGxlbmd0aCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmZC5kYXRhID0gZGF0YTtcclxuICAgIH1cclxuICAgIGZpbGxVbmNvbXByZXNzZWQoYml0RGVwdGgsIHNhbXBsZUZvcm1hdCwgZGF0YSwgc3RyaXBEYXRhLCBwaXhlbCwgbGVuZ3RoKSB7XHJcbiAgICAgICAgaWYgKGJpdERlcHRoID09PSA4KSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmaWxsOGJpdChkYXRhLCBzdHJpcERhdGEsIHBpeGVsLCBsZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIGlmIChiaXREZXB0aCA9PT0gMTYpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbGwxNmJpdChkYXRhLCBzdHJpcERhdGEsIHBpeGVsLCBsZW5ndGgsIHRoaXMuaXNMaXR0bGVFbmRpYW4oKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2UgaWYgKGJpdERlcHRoID09PSAzMiAmJiBzYW1wbGVGb3JtYXQgPT09IDMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGZpbGxGbG9hdDMyKGRhdGEsIHN0cmlwRGF0YSwgcGl4ZWwsIGxlbmd0aCwgdGhpcy5pc0xpdHRsZUVuZGlhbigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIHRocm93IHVuc3VwcG9ydGVkKCdiaXREZXB0aCcsIGJpdERlcHRoKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICBhcHBseVByZWRpY3RvcihpZmQpIHtcclxuICAgICAgICBjb25zdCBiaXREZXB0aCA9IGlmZC5iaXRzUGVyU2FtcGxlO1xyXG4gICAgICAgIHN3aXRjaCAoaWZkLnByZWRpY3Rvcikge1xyXG4gICAgICAgICAgICBjYXNlIDE6IHtcclxuICAgICAgICAgICAgICAgIC8vIE5vIHByZWRpY3Rpb24gc2NoZW1lLCBub3RoaW5nIHRvIGRvXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBjYXNlIDI6IHtcclxuICAgICAgICAgICAgICAgIGlmIChiaXREZXB0aCA9PT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGFwcGx5SG9yaXpvbnRhbERpZmZlcmVuY2luZzhCaXQoaWZkLmRhdGEsIGlmZC53aWR0aCwgaWZkLmNvbXBvbmVudHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSBpZiAoYml0RGVwdGggPT09IDE2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwbHlIb3Jpem9udGFsRGlmZmVyZW5jaW5nMTZCaXQoaWZkLmRhdGEsIGlmZC53aWR0aCwgaWZkLmNvbXBvbmVudHMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBIb3Jpem9udGFsIGRpZmZlcmVuY2luZyBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgaW1hZ2VzIHdpdGggYSBiaXQgZGVwdGggb2YgJHtiaXREZXB0aH1gKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYGludmFsaWQgcHJlZGljdG9yOiAke2lmZC5wcmVkaWN0b3J9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29udmVydEFscGhhKGlmZCkge1xyXG4gICAgICAgIGlmIChpZmQuYWxwaGEgJiYgaWZkLmFzc29jaWF0ZWRBbHBoYSkge1xyXG4gICAgICAgICAgICBjb25zdCB7IGRhdGEsIGNvbXBvbmVudHMsIG1heFNhbXBsZVZhbHVlIH0gPSBpZmQ7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gY29tcG9uZW50cykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgYWxwaGFWYWx1ZSA9IGRhdGFbaSArIGNvbXBvbmVudHMgLSAxXTtcclxuICAgICAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgY29tcG9uZW50cyAtIDE7IGorKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFbaSArIGpdID0gTWF0aC5yb3VuZCgoZGF0YVtpICsgal0gKiBtYXhTYW1wbGVWYWx1ZSkgLyBhbHBoYVZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5mdW5jdGlvbiBnZXREYXRhQXJyYXkoc2l6ZSwgYml0RGVwdGgsIHNhbXBsZUZvcm1hdCkge1xyXG4gICAgaWYgKGJpdERlcHRoID09PSA4KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHNpemUpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoYml0RGVwdGggPT09IDE2KSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBVaW50MTZBcnJheShzaXplKTtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKGJpdERlcHRoID09PSAzMiAmJiBzYW1wbGVGb3JtYXQgPT09IDMpIHtcclxuICAgICAgICByZXR1cm4gbmV3IEZsb2F0MzJBcnJheShzaXplKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHRocm93IHVuc3VwcG9ydGVkKCdiaXQgZGVwdGggLyBzYW1wbGUgZm9ybWF0JywgYCR7Yml0RGVwdGh9IC8gJHtzYW1wbGVGb3JtYXR9YCk7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gZmlsbDhiaXQoZGF0YVRvLCBkYXRhRnJvbSwgaW5kZXgsIGxlbmd0aCkge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGRhdGFUb1tpbmRleCsrXSA9IGRhdGFGcm9tLmdldFVpbnQ4KGkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGluZGV4O1xyXG59XHJcbmZ1bmN0aW9uIGZpbGwxNmJpdChkYXRhVG8sIGRhdGFGcm9tLCBpbmRleCwgbGVuZ3RoLCBsaXR0bGVFbmRpYW4pIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoICogMjsgaSArPSAyKSB7XHJcbiAgICAgICAgZGF0YVRvW2luZGV4KytdID0gZGF0YUZyb20uZ2V0VWludDE2KGksIGxpdHRsZUVuZGlhbik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5kZXg7XHJcbn1cclxuZnVuY3Rpb24gZmlsbEZsb2F0MzIoZGF0YVRvLCBkYXRhRnJvbSwgaW5kZXgsIGxlbmd0aCwgbGl0dGxlRW5kaWFuKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aCAqIDQ7IGkgKz0gNCkge1xyXG4gICAgICAgIGRhdGFUb1tpbmRleCsrXSA9IGRhdGFGcm9tLmdldEZsb2F0MzIoaSwgbGl0dGxlRW5kaWFuKTtcclxuICAgIH1cclxuICAgIHJldHVybiBpbmRleDtcclxufVxyXG5mdW5jdGlvbiB1bnN1cHBvcnRlZCh0eXBlLCB2YWx1ZSkge1xyXG4gICAgcmV0dXJuIG5ldyBFcnJvcihgVW5zdXBwb3J0ZWQgJHt0eXBlfTogJHt2YWx1ZX1gKTtcclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD10aWZmRGVjb2Rlci5qcy5tYXAiLCIvLyBTZWN0aW9uIDE0OiBEaWZmZXJlbmNpbmcgUHJlZGljdG9yIChwLiA2NClcclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5SG9yaXpvbnRhbERpZmZlcmVuY2luZzhCaXQoZGF0YSwgd2lkdGgsIGNvbXBvbmVudHMpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIHdoaWxlIChpIDwgZGF0YS5sZW5ndGgpIHtcclxuICAgICAgICBmb3IgKGxldCBqID0gY29tcG9uZW50czsgaiA8IHdpZHRoICogY29tcG9uZW50czsgaiArPSBjb21wb25lbnRzKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgY29tcG9uZW50czsgaysrKSB7XHJcbiAgICAgICAgICAgICAgICBkYXRhW2kgKyBqICsga10gPVxyXG4gICAgICAgICAgICAgICAgICAgIChkYXRhW2kgKyBqICsga10gKyBkYXRhW2kgKyBqIC0gKGNvbXBvbmVudHMgLSBrKV0pICYgMjU1O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGkgKz0gd2lkdGggKiBjb21wb25lbnRzO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUhvcml6b250YWxEaWZmZXJlbmNpbmcxNkJpdChkYXRhLCB3aWR0aCwgY29tcG9uZW50cykge1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgd2hpbGUgKGkgPCBkYXRhLmxlbmd0aCkge1xyXG4gICAgICAgIGZvciAobGV0IGogPSBjb21wb25lbnRzOyBqIDwgd2lkdGggKiBjb21wb25lbnRzOyBqICs9IGNvbXBvbmVudHMpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBjb21wb25lbnRzOyBrKyspIHtcclxuICAgICAgICAgICAgICAgIGRhdGFbaSArIGogKyBrXSA9XHJcbiAgICAgICAgICAgICAgICAgICAgKGRhdGFbaSArIGogKyBrXSArIGRhdGFbaSArIGogLSAoY29tcG9uZW50cyAtIGspXSkgJiA2NTUzNTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpICs9IHdpZHRoICogY29tcG9uZW50cztcclxuICAgIH1cclxufVxyXG4vLyMgc291cmNlTWFwcGluZ1VSTD1ob3Jpem9udGFsRGlmZmVyZW5jaW5nLmpzLm1hcCIsImltcG9ydCBTdGFjayBmcm9tICcuLi9TdGFjayc7XG5cbi8vIFRPRE8gdGhpcyBjb2RlIHNlZW1zIGJ1Z2d5IGlmIGl0IGlzIG5vdCAwLDBcbi8qKlxuICogV2Ugd2lsbCB0cnkgdG8gbW92ZSBhIHNldCBvZiBpbWFnZXMgaW4gb3JkZXIgdG8gZ2V0IG9ubHkgdGhlIGJlc3QgY29tbW9uIHBhcnQgb2YgdGhlbS5cbiAqIEluIGEgc3RhY2ssIHdlIGNvbXBhcmUgMiBjb25zZWN1dGl2ZSBpbWFnZXMgb3IgZGlyZWN0bHkgdG8gYSBwYXJlbnQuXG4gKiBJZ25vcmluZyBib3JkZXIgbWF5IGJlIGRhbmdlcm91cyAhIElmIHRoZXJlIGlzIGEgc2hhcGUgb24gdGhlIHNpZGUgb2YgdGhlIGltYWdlIHRoZXJlIHdpbGwgYmUgYVxuICogY29udGludW91cyBzaGlmdCBpZiB5b3UgaWdub3JlIGJvcmRlci4gQnkgZGVmYXVsdCBpdCBpcyBiZXR0ZXIgdG8gbGVhdmUgaXQgdG8gMCwwXG4gKiBOb3cgaWYgdGhlIGJhY2tncm91bmQgaXMgbm90IGJsYWNrIHRoZXJlIHdpbGwgYWxzbyBiZSBubyB3YXkgdG8gc2hpZnQgLi4uXG4gKiBJdCBtYXkgdGhlcmVmb3JlIGJlIG11Y2ggYmV0dGVyIHRvIG1ha2UgYSBiYWNrZ3JvdW5kIGNvcnJlY3Rpb24gYmVmb3JlIHRyeWluZyB0byBtYXRjaCBhbmQgY3JvcC5cbiAqIEBtZW1iZXJvZiBTdGFja1xuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYWxnb3JpdGhtPSdtYXRjaFRvUHJldmlvdXMnXSAtIG1hdGNoVG9QcmV2aW91cyBvciBtYXRjaFRvRmlyc3RcbiAqIEBwYXJhbSB7bnVtYmVyW119IFtvcHRpb25zLmlnbm9yZUJvcmRlcj1bMCwgMF1dXG4gKiBAcmV0dXJuIHtTdGFja31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF0Y2hBbmRDcm9wKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBhbGdvcml0aG0gPSAnbWF0Y2hUb1ByZXZpb3VzJywgaWdub3JlQm9yZGVyID0gWzAsIDBdIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWF0Y2hBbmRDcm9wJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgbWF0Y2hUb1ByZXZpb3VzID0gYWxnb3JpdGhtID09PSAnbWF0Y2hUb1ByZXZpb3VzJztcblxuICBsZXQgcGFyZW50ID0gdGhpc1swXTtcbiAgbGV0IHJlc3VsdHMgPSBbXTtcbiAgcmVzdWx0c1swXSA9IHtcbiAgICBwb3NpdGlvbjogWzAsIDBdLFxuICAgIGltYWdlOiB0aGlzWzBdLFxuICB9O1xuXG4gIGxldCByZWxhdGl2ZVBvc2l0aW9uID0gWzAsIDBdO1xuXG4gIC8vIHdlIGNhbGN1bGF0ZSB0aGUgYmVzdCByZWxhdGl2ZSBwb3NpdGlvbiB0byB0aGUgcGFyZW50IGltYWdlXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBwb3NpdGlvbiA9IHBhcmVudC5nZXRCZXN0TWF0Y2godGhpc1tpXSwgeyBib3JkZXI6IGlnbm9yZUJvcmRlciB9KTtcblxuICAgIHJlc3VsdHNbaV0gPSB7XG4gICAgICBwb3NpdGlvbjogW1xuICAgICAgICBwb3NpdGlvblswXSArIHJlbGF0aXZlUG9zaXRpb25bMF0sXG4gICAgICAgIHBvc2l0aW9uWzFdICsgcmVsYXRpdmVQb3NpdGlvblsxXSxcbiAgICAgIF0sXG4gICAgICBpbWFnZTogdGhpc1tpXSxcbiAgICB9O1xuICAgIGlmIChtYXRjaFRvUHJldmlvdXMpIHtcbiAgICAgIHJlbGF0aXZlUG9zaXRpb25bMF0gKz0gcG9zaXRpb25bMF07XG4gICAgICByZWxhdGl2ZVBvc2l0aW9uWzFdICs9IHBvc2l0aW9uWzFdO1xuICAgICAgcGFyZW50ID0gdGhpc1tpXTtcbiAgICB9XG4gIH1cbiAgLy8gbm93IHdlIGNhbiBjYWxjdWxhdGUgdGhlIGNyb3BwaW5nIHRoYXQgd2UgbmVlZCB0byBkb1xuXG4gIGxldCBsZWZ0U2hpZnQgPSAwO1xuICBsZXQgcmlnaHRTaGlmdCA9IDA7XG4gIGxldCB0b3BTaGlmdCA9IDA7XG4gIGxldCBib3R0b21TaGlmdCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXN1bHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaV07XG4gICAgaWYgKHJlc3VsdC5wb3NpdGlvblswXSA+IGxlZnRTaGlmdCkge1xuICAgICAgbGVmdFNoaWZ0ID0gcmVzdWx0LnBvc2l0aW9uWzBdO1xuICAgIH1cbiAgICBpZiAocmVzdWx0LnBvc2l0aW9uWzBdIDwgcmlnaHRTaGlmdCkge1xuICAgICAgcmlnaHRTaGlmdCA9IHJlc3VsdC5wb3NpdGlvblswXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5wb3NpdGlvblsxXSA+IHRvcFNoaWZ0KSB7XG4gICAgICB0b3BTaGlmdCA9IHJlc3VsdC5wb3NpdGlvblsxXTtcbiAgICB9XG4gICAgaWYgKHJlc3VsdC5wb3NpdGlvblsxXSA8IGJvdHRvbVNoaWZ0KSB7XG4gICAgICBib3R0b21TaGlmdCA9IHJlc3VsdC5wb3NpdGlvblsxXTtcbiAgICB9XG4gIH1cbiAgcmlnaHRTaGlmdCA9IDAgLSByaWdodFNoaWZ0O1xuICBib3R0b21TaGlmdCA9IDAgLSBib3R0b21TaGlmdDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgcmVzdWx0ID0gcmVzdWx0c1tpXTtcblxuICAgIHJlc3VsdC5jcm9wID0gcmVzdWx0LmltYWdlLmNyb3Aoe1xuICAgICAgeDogbGVmdFNoaWZ0IC0gcmVzdWx0LnBvc2l0aW9uWzBdLFxuICAgICAgeTogdG9wU2hpZnQgLSByZXN1bHQucG9zaXRpb25bMV0sXG4gICAgICB3aWR0aDogcGFyZW50LndpZHRoIC0gcmlnaHRTaGlmdCAtIGxlZnRTaGlmdCxcbiAgICAgIGhlaWdodDogcGFyZW50LmhlaWdodCAtIGJvdHRvbVNoaWZ0IC0gdG9wU2hpZnQsXG4gICAgfSk7XG4gIH1cblxuICAvLyBmaW5hbGx5IHdlIGNyb3AgYW5kIGNyZWF0ZSBhIG5ldyBhcnJheSBvZiBpbWFnZXNcbiAgbGV0IG5ld0ltYWdlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc3VsdHMubGVuZ3RoOyBpKyspIHtcbiAgICBuZXdJbWFnZXNbaV0gPSByZXN1bHRzW2ldLmNyb3A7XG4gIH1cblxuICByZXR1cm4gbmV3IFN0YWNrKG5ld0ltYWdlcyk7XG59XG4iLCIvKipcbiAqIEBtZW1iZXJvZiBTdGFja1xuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluKCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ21pbicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgbGV0IG1pbiA9IHRoaXNbMF0ubWluO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1pbi5sZW5ndGg7IGorKykge1xuICAgICAgbWluW2pdID0gTWF0aC5taW4obWluW2pdLCB0aGlzW2ldLm1pbltqXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtaW47XG59XG4iLCIvKipcbiAqIEBtZW1iZXJvZiBTdGFja1xuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4KCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ21pbicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgbGV0IG1heCA9IHRoaXNbMF0ubWF4O1xuICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1heC5sZW5ndGg7IGorKykge1xuICAgICAgbWF4W2pdID0gTWF0aC5tYXgobWF4W2pdLCB0aGlzW2ldLm1heFtqXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBtYXg7XG59XG4iLCIvKipcbiAqIFJldHVybnMgdGhlIG1lZGlhbiBvZiBhbiBoaXN0b2dyYW1cbiAqIEBwYXJhbSB7bnVtYmVyW119IGhpc3RvZ3JhbVxuICogQHJldHVybiB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1lZGlhbihoaXN0b2dyYW0pIHtcbiAgbGV0IHRvdGFsID0gaGlzdG9ncmFtLnJlZHVjZSgoc3VtLCB4KSA9PiBzdW0gKyB4KTtcblxuICBpZiAodG90YWwgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gIH1cblxuICBsZXQgcG9zaXRpb24gPSAwO1xuICBsZXQgY3VycmVudFRvdGFsID0gMDtcbiAgbGV0IG1pZGRsZSA9IHRvdGFsIC8gMjtcbiAgbGV0IHByZXZpb3VzO1xuXG4gIHdoaWxlICh0cnVlKSB7XG4gICAgaWYgKGhpc3RvZ3JhbVtwb3NpdGlvbl0gPiAwKSB7XG4gICAgICBpZiAocHJldmlvdXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gKHByZXZpb3VzICsgcG9zaXRpb24pIC8gMjtcbiAgICAgIH1cbiAgICAgIGN1cnJlbnRUb3RhbCArPSBoaXN0b2dyYW1bcG9zaXRpb25dO1xuICAgICAgaWYgKGN1cnJlbnRUb3RhbCA+IG1pZGRsZSkge1xuICAgICAgICByZXR1cm4gcG9zaXRpb247XG4gICAgICB9IGVsc2UgaWYgKGN1cnJlbnRUb3RhbCA9PT0gbWlkZGxlKSB7XG4gICAgICAgIHByZXZpb3VzID0gcG9zaXRpb247XG4gICAgICB9XG4gICAgfVxuICAgIHBvc2l0aW9uKys7XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1bnMgdGhlIG1lYW4gb2YgYW4gaGlzdG9ncmFtXG4gKiBAcGFyYW0ge251bWJlcltdfSBoaXN0b2dyYW1cbiAqIEByZXR1cm4ge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtZWFuKGhpc3RvZ3JhbSkge1xuICBsZXQgdG90YWwgPSAwO1xuICBsZXQgc3VtID0gMDtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhpc3RvZ3JhbS5sZW5ndGg7IGkrKykge1xuICAgIHRvdGFsICs9IGhpc3RvZ3JhbVtpXTtcbiAgICBzdW0gKz0gaGlzdG9ncmFtW2ldICogaTtcbiAgfVxuXG4gIGlmICh0b3RhbCA9PT0gMCkge1xuICAgIHJldHVybiAwO1xuICB9XG5cbiAgcmV0dXJuIHN1bSAvIHRvdGFsO1xufVxuIiwiaW1wb3J0IHsgbWVkaWFuIGFzIG1lZGlhbkZyb21IaXN0b2dyYW0gfSBmcm9tICcuLi8uLi91dGlsL2hpc3RvZ3JhbSc7XG5cbi8qKlxuICogQG1lbWJlcm9mIFN0YWNrXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge251bWJlcltdfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtZWRpYW4oKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWVkaWFuJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgaGlzdG9ncmFtcyA9IHRoaXMuZ2V0SGlzdG9ncmFtcyh7IG1heFNsb3RzOiB0aGlzWzBdLm1heFZhbHVlICsgMSB9KTtcbiAgbGV0IHJlc3VsdCA9IG5ldyBBcnJheShoaXN0b2dyYW1zLmxlbmd0aCk7XG4gIGZvciAobGV0IGMgPSAwOyBjIDwgaGlzdG9ncmFtcy5sZW5ndGg7IGMrKykge1xuICAgIGxldCBoaXN0b2dyYW0gPSBoaXN0b2dyYW1zW2NdO1xuICAgIHJlc3VsdFtjXSA9IG1lZGlhbkZyb21IaXN0b2dyYW0oaGlzdG9ncmFtKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBAbWVtYmVyb2YgU3RhY2tcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7bnVtYmVyW119XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhpc3RvZ3JhbShvcHRpb25zKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWluJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgaGlzdG9ncmFtID0gdGhpc1swXS5nZXRIaXN0b2dyYW0ob3B0aW9ucyk7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBzZWNvbmRIaXN0b2dyYW0gPSB0aGlzW2ldLmdldEhpc3RvZ3JhbShvcHRpb25zKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGhpc3RvZ3JhbS5sZW5ndGg7IGorKykge1xuICAgICAgaGlzdG9ncmFtW2pdICs9IHNlY29uZEhpc3RvZ3JhbVtqXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGhpc3RvZ3JhbTtcbn1cbiIsIi8qKlxuICogQG1lbWJlcm9mIFN0YWNrXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBoaXN0b2dyYW1zKG9wdGlvbnMpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdtaW4nLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCBoaXN0b2dyYW1zID0gdGhpc1swXS5nZXRIaXN0b2dyYW1zKG9wdGlvbnMpO1xuICBsZXQgaGlzdG9ncmFtTGVuZ3RoID0gaGlzdG9ncmFtc1swXS5sZW5ndGg7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBzZWNvbmRIaXN0b2dyYW1zID0gdGhpc1tpXS5nZXRIaXN0b2dyYW1zKG9wdGlvbnMpO1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgaGlzdG9ncmFtcy5sZW5ndGg7IGMrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBoaXN0b2dyYW1MZW5ndGg7IGorKykge1xuICAgICAgICBoaXN0b2dyYW1zW2NdW2pdICs9IHNlY29uZEhpc3RvZ3JhbXNbY11bal07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBoaXN0b2dyYW1zO1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uLy4uL2ltYWdlL0ltYWdlJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgU3RhY2tcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGF2ZXJhZ2VJbWFnZSgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdhdmVyYWdlSW1hZ2UnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCBkYXRhID0gbmV3IFVpbnQzMkFycmF5KHRoaXNbMF0uZGF0YS5sZW5ndGgpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY3VycmVudCA9IHRoaXNbaV07XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzWzBdLmRhdGEubGVuZ3RoOyBqKyspIHtcbiAgICAgIGRhdGFbal0gKz0gY3VycmVudC5kYXRhW2pdO1xuICAgIH1cbiAgfVxuXG4gIGxldCBpbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20odGhpc1swXSk7XG4gIGxldCBuZXdEYXRhID0gaW1hZ2UuZGF0YTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXNbMF0uZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIG5ld0RhdGFbaV0gPSBkYXRhW2ldIC8gdGhpcy5sZW5ndGg7XG4gIH1cblxuICByZXR1cm4gaW1hZ2U7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vLi4vaW1hZ2UvSW1hZ2UnO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBTdGFja1xuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWF4SW1hZ2UoKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWF4Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgaW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXNbMF0pO1xuICBpbWFnZS5kYXRhLmZpbGwoMCk7XG4gIGZvciAoY29uc3QgY3VycmVudCBvZiB0aGlzKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBpbWFnZS5kYXRhLmxlbmd0aDsgaisrKSB7XG4gICAgICBpbWFnZS5kYXRhW2pdID0gTWF0aC5tYXgoY3VycmVudC5kYXRhW2pdLCBpbWFnZS5kYXRhW2pdKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW1hZ2U7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vLi4vaW1hZ2UvSW1hZ2UnO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBTdGFja1xuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluSW1hZ2UoKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWF4Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgaW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXNbMF0pO1xuICBpbWFnZS5kYXRhLmZpbGwoaW1hZ2UubWF4VmFsdWUpO1xuICBmb3IgKGNvbnN0IGN1cnJlbnQgb2YgdGhpcykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgaW1hZ2UuZGF0YS5sZW5ndGg7IGorKykge1xuICAgICAgaW1hZ2UuZGF0YVtqXSA9IE1hdGgubWluKGN1cnJlbnQuZGF0YVtqXSwgaW1hZ2UuZGF0YVtqXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGltYWdlO1xufVxuIiwiaW1wb3J0IGhhc093biBmcm9tICdoYXMtb3duJztcblxuaW1wb3J0IEltYWdlIGZyb20gJy4uL2ltYWdlL0ltYWdlJztcblxuaW1wb3J0IGV4dGVuZCBmcm9tICcuL2V4dGVuZCc7XG5cbmxldCBjb21wdXRlZFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgZ2V0OiB1bmRlZmluZWQsXG59O1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBzdGFjayBvZiBpbWFnZXNcbiAqIEBjbGFzcyBTdGFja1xuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBTdGFjayBleHRlbmRzIEFycmF5IHtcbiAgY29uc3RydWN0b3IoaW1hZ2VzKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaW1hZ2VzKSkge1xuICAgICAgc3VwZXIoaW1hZ2VzLmxlbmd0aCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0aGlzW2ldID0gaW1hZ2VzW2ldO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGltYWdlcyA9PT0gJ251bWJlcicpIHtcbiAgICAgIHN1cGVyKGltYWdlcyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN1cGVyKCk7XG4gICAgfVxuICAgIHRoaXMuY29tcHV0ZWQgPSBudWxsO1xuICB9XG5cbiAgc3RhdGljIGxvYWQodXJscykge1xuICAgIHJldHVybiBQcm9taXNlLmFsbCh1cmxzLm1hcChJbWFnZS5sb2FkKSkudGhlbihcbiAgICAgIChpbWFnZXMpID0+IG5ldyBTdGFjayhpbWFnZXMpLFxuICAgICk7XG4gIH1cblxuICBzdGF0aWMgZXh0ZW5kTWV0aG9kKG5hbWUsIG1ldGhvZCwgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsgaW5QbGFjZSA9IGZhbHNlLCByZXR1cm5UaGlzID0gdHJ1ZSwgcGFydGlhbEFyZ3MgPSBbXSB9ID0gb3B0aW9ucztcblxuICAgIGlmIChpblBsYWNlKSB7XG4gICAgICBTdGFjay5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuICAgICAgICAvLyByZW1vdmUgY29tcHV0ZWQgcHJvcGVydGllc1xuICAgICAgICB0aGlzLmNvbXB1dGVkID0gbnVsbDtcbiAgICAgICAgbGV0IHJlc3VsdCA9IG1ldGhvZC5hcHBseSh0aGlzLCBbLi4ucGFydGlhbEFyZ3MsIC4uLmFyZ3NdKTtcbiAgICAgICAgaWYgKHJldHVyblRoaXMpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgU3RhY2sucHJvdG90eXBlW25hbWVdID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgcmV0dXJuIG1ldGhvZC5hcHBseSh0aGlzLCBbLi4ucGFydGlhbEFyZ3MsIC4uLmFyZ3NdKTtcbiAgICAgIH07XG4gICAgfVxuICAgIHJldHVybiBTdGFjaztcbiAgfVxuXG4gIHN0YXRpYyBleHRlbmRQcm9wZXJ0eShuYW1lLCBtZXRob2QsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCB7IHBhcnRpYWxBcmdzID0gW10gfSA9IG9wdGlvbnM7XG5cbiAgICBjb21wdXRlZFByb3BlcnR5RGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAodGhpcy5jb21wdXRlZCA9PT0gbnVsbCkge1xuICAgICAgICB0aGlzLmNvbXB1dGVkID0ge307XG4gICAgICB9IGVsc2UgaWYgKGhhc093bihuYW1lLCB0aGlzLmNvbXB1dGVkKSkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wdXRlZFtuYW1lXTtcbiAgICAgIH1cbiAgICAgIGxldCByZXN1bHQgPSBtZXRob2QuYXBwbHkodGhpcywgcGFydGlhbEFyZ3MpO1xuICAgICAgdGhpcy5jb21wdXRlZFtuYW1lXSA9IHJlc3VsdDtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoU3RhY2sucHJvdG90eXBlLCBuYW1lLCBjb21wdXRlZFByb3BlcnR5RGVzY3JpcHRvcik7XG4gICAgcmV0dXJuIFN0YWNrO1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgcHJvY2VzcyBjYW4gYmUgYXBwbGllZCBvbiB0aGUgc3RhY2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NOYW1lXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHByaXZhdGVcbiAgICovXG4gIGNoZWNrUHJvY2Vzc2FibGUocHJvY2Vzc05hbWUsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICh0eXBlb2YgcHJvY2Vzc05hbWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnY2hlY2tQcm9jZXNzYWJsZSByZXF1aXJlcyBhcyBmaXJzdCBwYXJhbWV0ZXIgdGhlIHByb2Nlc3NOYW1lIChhIHN0cmluZyknLFxuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuc2l6ZSA9PT0gMCkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gbm90IGJlIGFwcGxpZWQgb24gYW4gZW1wdHkgc3RhY2tgLFxuICAgICAgKTtcbiAgICB9XG4gICAgdGhpc1swXS5jaGVja1Byb2Nlc3NhYmxlKHByb2Nlc3NOYW1lLCBvcHRpb25zKTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgKG9wdGlvbnMuc2FtZVNpemUgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnNhbWVTaXplKSAmJlxuICAgICAgICB0aGlzWzBdLndpZHRoICE9PSB0aGlzW2ldLndpZHRoXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBgVGhlIHByb2Nlc3M6ICR7cHJvY2Vzc05hbWV9IGNhbiBub3QgYmUgYXBwbGllZCBpZiB3aWR0aCBpcyBub3QgaWRlbnRpY2FsIGluIGFsbCBpbWFnZXNgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAob3B0aW9ucy5zYW1lU2l6ZSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuc2FtZVNpemUpICYmXG4gICAgICAgIHRoaXNbMF0uaGVpZ2h0ICE9PSB0aGlzW2ldLmhlaWdodFxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gbm90IGJlIGFwcGxpZWQgaWYgaGVpZ2h0IGlzIG5vdCBpZGVudGljYWwgaW4gYWxsIGltYWdlc2AsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIChvcHRpb25zLnNhbWVBbHBoYSA9PT0gdW5kZWZpbmVkIHx8IG9wdGlvbnMuc2FtZUFscGhhKSAmJlxuICAgICAgICB0aGlzWzBdLmFscGhhICE9PSB0aGlzW2ldLmFscGhhXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBgVGhlIHByb2Nlc3M6ICR7cHJvY2Vzc05hbWV9IGNhbiBub3QgYmUgYXBwbGllZCBpZiBhbHBoYSBpcyBub3QgaWRlbnRpY2FsIGluIGFsbCBpbWFnZXNgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAob3B0aW9ucy5zYW1lQml0RGVwdGggPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnNhbWVCaXREZXB0aCkgJiZcbiAgICAgICAgdGhpc1swXS5iaXREZXB0aCAhPT0gdGhpc1tpXS5iaXREZXB0aFxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gbm90IGJlIGFwcGxpZWQgaWYgYml0RGVwdGggaXMgbm90IGlkZW50aWNhbCBpbiBhbGwgaW1hZ2VzYCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgKG9wdGlvbnMuc2FtZUNvbG9yTW9kZWwgPT09IHVuZGVmaW5lZCB8fCBvcHRpb25zLnNhbWVDb2xvck1vZGVsKSAmJlxuICAgICAgICB0aGlzWzBdLmNvbG9yTW9kZWwgIT09IHRoaXNbaV0uY29sb3JNb2RlbFxuICAgICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgICAgYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gbm90IGJlIGFwcGxpZWQgaWYgY29sb3JNb2RlbCBpcyBub3QgaWRlbnRpY2FsIGluIGFsbCBpbWFnZXNgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICAob3B0aW9ucy5zYW1lTnVtYmVyQ2hhbm5lbHMgPT09IHVuZGVmaW5lZCB8fFxuICAgICAgICAgIG9wdGlvbnMuc2FtZU51bWJlckNoYW5uZWxzKSAmJlxuICAgICAgICB0aGlzWzBdLmNoYW5uZWxzICE9PSB0aGlzW2ldLmNoYW5uZWxzXG4gICAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBgVGhlIHByb2Nlc3M6ICR7cHJvY2Vzc05hbWV9IGNhbiBub3QgYmUgYXBwbGllZCBpZiBjaGFubmVscyBpcyBub3QgaWRlbnRpY2FsIGluIGFsbCBpbWFnZXNgLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5pZiAoIUFycmF5W1N5bWJvbC5zcGVjaWVzXSkge1xuICAvLyBzdXBwb3J0IG9sZCBlbmdpbmVzXG4gIFN0YWNrLnByb3RvdHlwZS5tYXAgPSBmdW5jdGlvbiAoY2IsIHRoaXNBcmcpIHtcbiAgICBpZiAodHlwZW9mIGNiICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGAke2NifSBpcyBub3QgYSBmdW5jdGlvbmApO1xuICAgIH1cbiAgICBsZXQgbmV3U3RhY2sgPSBuZXcgU3RhY2sodGhpcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgbmV3U3RhY2tbaV0gPSBjYi5jYWxsKHRoaXNBcmcsIHRoaXNbaV0sIGksIHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3U3RhY2s7XG4gIH07XG59XG5cbmV4dGVuZChTdGFjayk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBpbXBvcnQvb3JkZXIgKi9cbmltcG9ydCBtYXRjaEFuZENyb3AgZnJvbSAnLi90cmFuc2Zvcm0vbWF0Y2hBbmRDcm9wJztcblxuaW1wb3J0IG1pbiBmcm9tICcuL2NvbXB1dGUvbWluJztcbmltcG9ydCBtYXggZnJvbSAnLi9jb21wdXRlL21heCc7XG5pbXBvcnQgbWVkaWFuIGZyb20gJy4vY29tcHV0ZS9tZWRpYW4nO1xuaW1wb3J0IGhpc3RvZ3JhbSBmcm9tICcuL2NvbXB1dGUvaGlzdG9ncmFtJztcbmltcG9ydCBoaXN0b2dyYW1zIGZyb20gJy4vY29tcHV0ZS9oaXN0b2dyYW1zJztcblxuaW1wb3J0IGF2ZXJhZ2VJbWFnZSBmcm9tICcuL3V0aWxpdHkvYXZlcmFnZUltYWdlJztcbmltcG9ydCBtYXhJbWFnZSBmcm9tICcuL3V0aWxpdHkvbWF4SW1hZ2UnO1xuaW1wb3J0IG1pbkltYWdlIGZyb20gJy4vdXRpbGl0eS9taW5JbWFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGV4dGVuZChTdGFjaykge1xuICAvLyBsZXQgaW5QbGFjZSA9IHtpblBsYWNlOiB0cnVlfTtcbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdtYXRjaEFuZENyb3AnLCBtYXRjaEFuZENyb3ApO1xuXG4gIFN0YWNrLmV4dGVuZE1ldGhvZCgnZ2V0TWluJywgbWluKTtcbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdnZXRNYXgnLCBtYXgpO1xuICBTdGFjay5leHRlbmRNZXRob2QoJ2dldE1lZGlhbicsIG1lZGlhbik7XG4gIFN0YWNrLmV4dGVuZE1ldGhvZCgnZ2V0SGlzdG9ncmFtJywgaGlzdG9ncmFtKTtcbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdnZXRIaXN0b2dyYW1zJywgaGlzdG9ncmFtcyk7XG5cbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdnZXRBdmVyYWdlJywgYXZlcmFnZUltYWdlKTsgLy8gdG8gYmUgcmVtb3ZlZCBidXQgd2lsbCBiZSBhIGJyZWFraW5nIGNoYW5nZVxuXG4gIFN0YWNrLmV4dGVuZE1ldGhvZCgnZ2V0QXZlcmFnZUltYWdlJywgYXZlcmFnZUltYWdlKTtcbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdnZXRNYXhJbWFnZScsIG1heEltYWdlKTtcbiAgU3RhY2suZXh0ZW5kTWV0aG9kKCdnZXRNaW5JbWFnZScsIG1pbkltYWdlKTtcbn1cbiIsImltcG9ydCB7IGRlY29kZSBhcyBkZWNvZGVKcGVnRXhpZiB9IGZyb20gJ2Zhc3QtanBlZyc7XG5pbXBvcnQgeyBkZWNvZGUgYXMgZGVjb2RlUG5nIH0gZnJvbSAnZmFzdC1wbmcnO1xuaW1wb3J0IGltYWdlVHlwZSBmcm9tICdpbWFnZS10eXBlJztcbmltcG9ydCB7IGRlY29kZSBhcyBkZWNvZGVKcGVnIH0gZnJvbSAnanBlZy1qcyc7XG5pbXBvcnQgeyBkZWNvZGUgYXMgZGVjb2RlVGlmZiB9IGZyb20gJ3RpZmYnO1xuXG5pbXBvcnQgU3RhY2sgZnJvbSAnLi4vLi4vc3RhY2svU3RhY2snO1xuaW1wb3J0IHsgZGVjb2RlIGFzIGJhc2U2NERlY29kZSwgdG9CYXNlNjRVUkwgfSBmcm9tICcuLi8uLi91dGlsL2Jhc2U2NCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgR1JFWSwgUkdCIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWwnO1xuXG5pbXBvcnQgeyBmZXRjaEJpbmFyeSwgRE9NSW1hZ2UsIGNyZWF0ZUNhbnZhcyB9IGZyb20gJy4vZW52aXJvbm1lbnQnO1xuXG5jb25zdCBpc0RhdGFVUkwgPSAvXmRhdGE6W2Etel0rXFwvKD86W2Etel0rKTtiYXNlNjQsLztcblxuLyoqXG4gKiBMb2FkIGFuIGltYWdlXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBzdGF0aWNcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5QnVmZmVyfEJ1ZmZlcnxVaW50OEFycmF5fSBpbWFnZSAtIFVSTCBvZiB0aGUgaW1hZ2UgKGJyb3dzZXIsIGNhbiBiZSBhIGRhdGFVUkwpIG9yIHBhdGggKE5vZGUuanMpXG4gKiBvciBidWZmZXIgY29udGFpbmluZyB0aGUgYmluYXJ5IGRhdGFcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBJbiB0aGUgYnJvd3NlciwgdGhlIG9wdGlvbnMgb2JqZWN0IGlzIHBhc3NlZCB0byB0aGUgdW5kZXJseWluZyBgZmV0Y2hgIGNhbGwuXG4gKiBAcmV0dXJuIHtQcm9taXNlPEltYWdlPn1cbiAqIEBleGFtcGxlXG4gKiBjb25zdCBpbWFnZSA9IGF3YWl0IEltYWdlLmxvYWQoJ2h0dHBzOi8vZXhhbXBsZS5jb20vaW1hZ2UucG5nJyk7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGxvYWQoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgaWYgKHR5cGVvZiBpbWFnZSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gbG9hZFVSTChpbWFnZSwgb3B0aW9ucyk7XG4gIH0gZWxzZSBpZiAoaW1hZ2UgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobG9hZEJpbmFyeShuZXcgVWludDhBcnJheShpbWFnZSkpKTtcbiAgfSBlbHNlIGlmIChpbWFnZS5idWZmZXIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGxvYWRCaW5hcnkoaW1hZ2UpKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2FyZ3VtZW50IHRvIFwibG9hZFwiIG11c3QgYmUgYSBzdHJpbmcgb3IgYnVmZmVyLicpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRCaW5hcnkoaW1hZ2UsIGJhc2U2NFVybCkge1xuICBjb25zdCB0eXBlID0gaW1hZ2VUeXBlKGltYWdlKTtcbiAgaWYgKHR5cGUpIHtcbiAgICBzd2l0Y2ggKHR5cGUubWltZSkge1xuICAgICAgY2FzZSAnaW1hZ2UvcG5nJzpcbiAgICAgICAgcmV0dXJuIGxvYWRQTkcoaW1hZ2UpO1xuICAgICAgY2FzZSAnaW1hZ2UvanBlZyc6XG4gICAgICAgIHJldHVybiBsb2FkSlBFRyhpbWFnZSk7XG4gICAgICBjYXNlICdpbWFnZS90aWZmJzpcbiAgICAgICAgcmV0dXJuIGxvYWRUSUZGKGltYWdlKTtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2FkR2VuZXJpYyhnZXRCYXNlNjQodHlwZS5taW1lKSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBsb2FkR2VuZXJpYyhnZXRCYXNlNjQoJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScpKTtcbiAgZnVuY3Rpb24gZ2V0QmFzZTY0KHR5cGUpIHtcbiAgICBpZiAoYmFzZTY0VXJsKSB7XG4gICAgICByZXR1cm4gYmFzZTY0VXJsO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdG9CYXNlNjRVUkwoaW1hZ2UsIHR5cGUpO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBsb2FkVVJMKHVybCwgb3B0aW9ucykge1xuICBjb25zdCBkYXRhVVJMID0gdXJsLnNsaWNlKDAsIDY0KS5tYXRjaChpc0RhdGFVUkwpO1xuICBsZXQgYmluYXJ5RGF0YVA7XG4gIGlmIChkYXRhVVJMICE9PSBudWxsKSB7XG4gICAgYmluYXJ5RGF0YVAgPSBQcm9taXNlLnJlc29sdmUoYmFzZTY0RGVjb2RlKHVybC5zbGljZShkYXRhVVJMWzBdLmxlbmd0aCkpKTtcbiAgfSBlbHNlIHtcbiAgICBiaW5hcnlEYXRhUCA9IGZldGNoQmluYXJ5KHVybCwgb3B0aW9ucyk7XG4gIH1cbiAgcmV0dXJuIGJpbmFyeURhdGFQLnRoZW4oKGJpbmFyeURhdGEpID0+IHtcbiAgICBjb25zdCB1aW50OCA9IG5ldyBVaW50OEFycmF5KGJpbmFyeURhdGEpO1xuICAgIHJldHVybiBsb2FkQmluYXJ5KHVpbnQ4LCBkYXRhVVJMID8gdXJsIDogdW5kZWZpbmVkKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGxvYWRQTkcoZGF0YSkge1xuICBjb25zdCBwbmcgPSBkZWNvZGVQbmcoZGF0YSk7XG4gIGxldCBjaGFubmVscyA9IHBuZy5jaGFubmVscztcbiAgbGV0IGNvbXBvbmVudHM7XG4gIGxldCBhbHBoYSA9IDA7XG4gIGlmIChjaGFubmVscyA9PT0gMiB8fCBjaGFubmVscyA9PT0gNCkge1xuICAgIGNvbXBvbmVudHMgPSBjaGFubmVscyAtIDE7XG4gICAgYWxwaGEgPSAxO1xuICB9IGVsc2Uge1xuICAgIGNvbXBvbmVudHMgPSBjaGFubmVscztcbiAgfVxuICBpZiAocG5nLnBhbGV0dGUpIHtcbiAgICByZXR1cm4gbG9hZFBOR0Zyb21QYWxldHRlKHBuZyk7XG4gIH1cblxuICByZXR1cm4gbmV3IEltYWdlKHBuZy53aWR0aCwgcG5nLmhlaWdodCwgcG5nLmRhdGEsIHtcbiAgICBjb21wb25lbnRzLFxuICAgIGFscGhhLFxuICAgIGJpdERlcHRoOiBwbmcuZGVwdGgsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkUE5HRnJvbVBhbGV0dGUocG5nKSB7XG4gIGNvbnN0IHBpeGVscyA9IHBuZy53aWR0aCAqIHBuZy5oZWlnaHQ7XG4gIGNvbnN0IGNoYW5uZWxzID0gcG5nLnBhbGV0dGVbMF0ubGVuZ3RoO1xuICBjb25zdCBkYXRhID0gbmV3IFVpbnQ4QXJyYXkocGl4ZWxzICogY2hhbm5lbHMpO1xuICBjb25zdCBwaXhlbHNQZXJCeXRlID0gOCAvIHBuZy5kZXB0aDtcbiAgY29uc3QgZmFjdG9yID0gcG5nLmRlcHRoIDwgOCA/IHBpeGVsc1BlckJ5dGUgOiAxO1xuICBjb25zdCBtYXNrID0gcGFyc2VJbnQoJzEnLnJlcGVhdChwbmcuZGVwdGgpLCAyKTtcbiAgY29uc3QgaGFzQWxwaGEgPSBjaGFubmVscyA9PT0gNDtcbiAgbGV0IGRhdGFJbmRleCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwaXhlbHM7IGkrKykge1xuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihpIC8gZmFjdG9yKTtcbiAgICBsZXQgdmFsdWUgPSBwbmcuZGF0YVtpbmRleF07XG4gICAgaWYgKHBuZy5kZXB0aCA8IDgpIHtcbiAgICAgIHZhbHVlID1cbiAgICAgICAgKHZhbHVlID4+PiAocG5nLmRlcHRoICogKHBpeGVsc1BlckJ5dGUgLSAxIC0gKGkgJSBwaXhlbHNQZXJCeXRlKSkpKSAmXG4gICAgICAgIG1hc2s7XG4gICAgfVxuICAgIGNvbnN0IHBhbGV0dGVWYWx1ZSA9IHBuZy5wYWxldHRlW3ZhbHVlXTtcbiAgICBkYXRhW2RhdGFJbmRleCsrXSA9IHBhbGV0dGVWYWx1ZVswXTtcbiAgICBkYXRhW2RhdGFJbmRleCsrXSA9IHBhbGV0dGVWYWx1ZVsxXTtcbiAgICBkYXRhW2RhdGFJbmRleCsrXSA9IHBhbGV0dGVWYWx1ZVsyXTtcbiAgICBpZiAoaGFzQWxwaGEpIHtcbiAgICAgIGRhdGFbZGF0YUluZGV4KytdID0gcGFsZXR0ZVZhbHVlWzNdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXcgSW1hZ2UocG5nLndpZHRoLCBwbmcuaGVpZ2h0LCBkYXRhLCB7XG4gICAgY29tcG9uZW50czogMyxcbiAgICBhbHBoYTogaGFzQWxwaGEsXG4gICAgYml0RGVwdGg6IDgsXG4gIH0pO1xufVxuXG5mdW5jdGlvbiBsb2FkSlBFRyhkYXRhKSB7XG4gIGNvbnN0IGRlY29kZWRFeGlmID0gZGVjb2RlSnBlZ0V4aWYoZGF0YSk7XG4gIGxldCBtZXRhO1xuICBpZiAoZGVjb2RlZEV4aWYuZXhpZikge1xuICAgIG1ldGEgPSBnZXRNZXRhZGF0YShkZWNvZGVkRXhpZi5leGlmKTtcbiAgfVxuICBjb25zdCBqcGVnID0gZGVjb2RlSnBlZyhkYXRhLCB7IHVzZVRBcnJheTogdHJ1ZSwgbWF4TWVtb3J5VXNhZ2VJbk1COiAxMDI0IH0pO1xuICByZXR1cm4gbmV3IEltYWdlKGpwZWcud2lkdGgsIGpwZWcuaGVpZ2h0LCBqcGVnLmRhdGEsIHsgbWV0YSB9KTtcbn1cblxuZnVuY3Rpb24gbG9hZFRJRkYoZGF0YSkge1xuICBsZXQgcmVzdWx0ID0gZGVjb2RlVGlmZihkYXRhKTtcbiAgaWYgKHJlc3VsdC5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gZ2V0SW1hZ2VGcm9tSUZEKHJlc3VsdFswXSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBTdGFjayhyZXN1bHQubWFwKGdldEltYWdlRnJvbUlGRCkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdldE1ldGFkYXRhKGltYWdlKSB7XG4gIGNvbnN0IG1ldGFkYXRhID0ge1xuICAgIHRpZmY6IHtcbiAgICAgIGZpZWxkczogaW1hZ2UuZmllbGRzLFxuICAgICAgdGFnczogaW1hZ2UubWFwLFxuICAgIH0sXG4gIH07XG4gIGlmIChpbWFnZS5leGlmKSB7XG4gICAgbWV0YWRhdGEuZXhpZiA9IGltYWdlLmV4aWY7XG4gIH1cbiAgaWYgKGltYWdlLmdwcykge1xuICAgIG1ldGFkYXRhLmdwcyA9IGltYWdlLmdwcztcbiAgfVxuICByZXR1cm4gbWV0YWRhdGE7XG59XG5cbmZ1bmN0aW9uIGdldEltYWdlRnJvbUlGRChpbWFnZSkge1xuICBpZiAoaW1hZ2UudHlwZSA9PT0gMykge1xuICAgIC8vIFBhbGV0dGVcbiAgICBjb25zdCBkYXRhID0gbmV3IFVpbnQxNkFycmF5KDMgKiBpbWFnZS53aWR0aCAqIGltYWdlLmhlaWdodCk7XG4gICAgY29uc3QgcGFsZXR0ZSA9IGltYWdlLnBhbGV0dGU7XG4gICAgbGV0IHB0ciA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGltYWdlLmRhdGFbaV07XG4gICAgICBjb25zdCBjb2xvciA9IHBhbGV0dGVbaW5kZXhdO1xuICAgICAgZGF0YVtwdHIrK10gPSBjb2xvclswXTtcbiAgICAgIGRhdGFbcHRyKytdID0gY29sb3JbMV07XG4gICAgICBkYXRhW3B0cisrXSA9IGNvbG9yWzJdO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IEltYWdlKGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIGRhdGEsIHtcbiAgICAgIGNvbXBvbmVudHM6IDMsXG4gICAgICBhbHBoYTogaW1hZ2UuYWxwaGEsXG4gICAgICBjb2xvck1vZGVsOiBSR0IsXG4gICAgICBiaXREZXB0aDogMTYsXG4gICAgICBtZXRhOiBnZXRNZXRhZGF0YShpbWFnZSksXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5ldyBJbWFnZShpbWFnZS53aWR0aCwgaW1hZ2UuaGVpZ2h0LCBpbWFnZS5kYXRhLCB7XG4gICAgICBjb21wb25lbnRzOiBpbWFnZS50eXBlID09PSAyID8gMyA6IDEsXG4gICAgICBhbHBoYTogaW1hZ2UuYWxwaGEsXG4gICAgICBjb2xvck1vZGVsOiBpbWFnZS50eXBlID09PSAyID8gUkdCIDogR1JFWSxcbiAgICAgIGJpdERlcHRoOiBpbWFnZS5iaXRzUGVyU2FtcGxlLmxlbmd0aFxuICAgICAgICA/IGltYWdlLmJpdHNQZXJTYW1wbGVbMF1cbiAgICAgICAgOiBpbWFnZS5iaXRzUGVyU2FtcGxlLFxuICAgICAgbWV0YTogZ2V0TWV0YWRhdGEoaW1hZ2UpLFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGxvYWRHZW5lcmljKHVybCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcbiAgICBsZXQgaW1hZ2UgPSBuZXcgRE9NSW1hZ2UoKTtcbiAgICBpbWFnZS5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgdyA9IGltYWdlLndpZHRoO1xuICAgICAgbGV0IGggPSBpbWFnZS5oZWlnaHQ7XG4gICAgICBsZXQgY2FudmFzID0gY3JlYXRlQ2FudmFzKHcsIGgpO1xuICAgICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgICAgY3R4LmRyYXdJbWFnZShpbWFnZSwgMCwgMCwgdywgaCk7XG4gICAgICBsZXQgZGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdywgaCkuZGF0YTtcbiAgICAgIHJlc29sdmUobmV3IEltYWdlKHcsIGgsIGRhdGEsIG9wdGlvbnMpKTtcbiAgICB9O1xuICAgIGltYWdlLm9uZXJyb3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZWplY3QobmV3IEVycm9yKGBDb3VsZCBub3QgbG9hZCAke3VybH1gKSk7XG4gICAgfTtcbiAgICBpbWFnZS5zcmMgPSB1cmw7XG4gIH0pO1xufVxuIiwiaW1wb3J0IFRJRkZEZWNvZGVyIGZyb20gJy4vdGlmZkRlY29kZXInO1xyXG5mdW5jdGlvbiBkZWNvZGVUSUZGKGRhdGEsIG9wdGlvbnMpIHtcclxuICAgIGNvbnN0IGRlY29kZXIgPSBuZXcgVElGRkRlY29kZXIoZGF0YSk7XHJcbiAgICByZXR1cm4gZGVjb2Rlci5kZWNvZGUob3B0aW9ucyk7XHJcbn1cclxuZnVuY3Rpb24gaXNNdWx0aVBhZ2UoZGF0YSkge1xyXG4gICAgY29uc3QgZGVjb2RlciA9IG5ldyBUSUZGRGVjb2RlcihkYXRhKTtcclxuICAgIHJldHVybiBkZWNvZGVyLmlzTXVsdGlQYWdlO1xyXG59XHJcbmZ1bmN0aW9uIHBhZ2VDb3VudChkYXRhKSB7XHJcbiAgICBjb25zdCBkZWNvZGVyID0gbmV3IFRJRkZEZWNvZGVyKGRhdGEpO1xyXG4gICAgcmV0dXJuIGRlY29kZXIucGFnZUNvdW50O1xyXG59XHJcbmV4cG9ydCB7IGRlY29kZVRJRkYgYXMgZGVjb2RlLCBpc011bHRpUGFnZSwgcGFnZUNvdW50IH07XHJcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcCIsImNvbnN0IHZhbHVlTWV0aG9kcyA9IHtcbiAgLyoqXG4gICAqIEdldCB0aGUgdmFsdWUgb2Ygc3BlY2lmaWMgcGl4ZWwgY2hhbm5lbFxuICAgKiBAbWVtYmVyb2YgSW1hZ2VcbiAgICogQGluc3RhbmNlXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB4IC0geCBjb29yZGluYXRlICgwID0gbGVmdClcbiAgICogQHBhcmFtIHtudW1iZXJ9IHkgLSB5IGNvb3JkaW5hdGUgKDAgPSB0b3ApXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjaGFubmVsXG4gICAqIEByZXR1cm4ge251bWJlcn0gLSB0aGUgdmFsdWUgb2YgdGhpcyBwaXhlbCBjaGFubmVsXG4gICAqL1xuICBnZXRWYWx1ZVhZKHgsIHksIGNoYW5uZWwpIHtcbiAgICByZXR1cm4gdGhpcy5kYXRhWyh5ICogdGhpcy53aWR0aCArIHgpICogdGhpcy5jaGFubmVscyArIGNoYW5uZWxdO1xuICB9LFxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHZhbHVlIG9mIHNwZWNpZmljIHBpeGVsIGNoYW5uZWxcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHggY29vcmRpbmF0ZSAoMCA9IGxlZnQpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0geSBjb29yZGluYXRlICgwID0gdG9wKVxuICAgKiBAcGFyYW0ge251bWJlcn0gY2hhbm5lbFxuICAgKiBAcGFyYW0ge251bWJlcn0gdmFsdWUgLSB0aGUgbmV3IHZhbHVlIG9mIHRoaXMgcGl4ZWwgY2hhbm5lbFxuICAgKiBAcmV0dXJuIHt0aGlzfVxuICAgKi9cbiAgc2V0VmFsdWVYWSh4LCB5LCBjaGFubmVsLCB2YWx1ZSkge1xuICAgIHRoaXMuZGF0YVsoeSAqIHRoaXMud2lkdGggKyB4KSAqIHRoaXMuY2hhbm5lbHMgKyBjaGFubmVsXSA9IHZhbHVlO1xuICAgIHRoaXMuY29tcHV0ZWQgPSBudWxsO1xuICAgIHJldHVybiB0aGlzO1xuICB9LFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHZhbHVlIG9mIHNwZWNpZmljIHBpeGVsIGNoYW5uZWxcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSAxRCBpbmRleCBvZiB0aGUgcGl4ZWxcbiAgICogQHBhcmFtIHtudW1iZXJ9IGNoYW5uZWxcbiAgICogQHJldHVybiB7bnVtYmVyfSAtIHRoZSB2YWx1ZSBvZiB0aGlzIHBpeGVsIGNoYW5uZWxcbiAgICovXG4gIGdldFZhbHVlKGluZGV4LCBjaGFubmVsKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YVtpbmRleCAqIHRoaXMuY2hhbm5lbHMgKyBjaGFubmVsXTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiBzcGVjaWZpYyBwaXhlbCBjaGFubmVsXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IGluZGV4IC0gMUQgaW5kZXggb2YgdGhlIHBpeGVsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBjaGFubmVsXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHRoZSBuZXcgdmFsdWUgb2YgdGhpcyBwaXhlbCBjaGFubmVsXG4gICAqIEByZXR1cm4ge3RoaXN9XG4gICAqL1xuICBzZXRWYWx1ZShpbmRleCwgY2hhbm5lbCwgdmFsdWUpIHtcbiAgICB0aGlzLmRhdGFbaW5kZXggKiB0aGlzLmNoYW5uZWxzICsgY2hhbm5lbF0gPSB2YWx1ZTtcbiAgICB0aGlzLmNvbXB1dGVkID0gbnVsbDtcbiAgICByZXR1cm4gdGhpcztcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBlbnRpcmUgcGl4ZWxcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0geCAtIHggY29vcmRpbmF0ZSAoMCA9IGxlZnQpXG4gICAqIEBwYXJhbSB7bnVtYmVyfSB5IC0geSBjb29yZGluYXRlICgwID0gdG9wKVxuICAgKiBAcmV0dXJuIHtudW1iZXJbXX0gdGhlIHZhbHVlIG9mIHRoaXMgcGl4ZWxcbiAgICovXG4gIGdldFBpeGVsWFkoeCwgeSkge1xuICAgIHJldHVybiB0aGlzLmdldFBpeGVsKHkgKiB0aGlzLndpZHRoICsgeCk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIFNldCB0aGUgdmFsdWUgb2YgYW4gZW50aXJlIHBpeGVsXG4gICAqIEBtZW1iZXJvZiBJbWFnZVxuICAgKiBAaW5zdGFuY2VcbiAgICogQHBhcmFtIHtudW1iZXJ9IHggLSB4IGNvb3JkaW5hdGUgKDAgPSBsZWZ0KVxuICAgKiBAcGFyYW0ge251bWJlcn0geSAtIHkgY29vcmRpbmF0ZSAoMCA9IHRvcClcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gdmFsdWUgLSB0aGUgbmV3IHZhbHVlIG9mIHRoaXMgcGl4ZWxcbiAgICogQHJldHVybiB7dGhpc31cbiAgICovXG4gIHNldFBpeGVsWFkoeCwgeSwgdmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5zZXRQaXhlbCh5ICogdGhpcy53aWR0aCArIHgsIHZhbHVlKTtcbiAgfSxcblxuICAvKipcbiAgICogR2V0IHRoZSB2YWx1ZSBvZiBhbiBlbnRpcmUgcGl4ZWxcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSAxRCBpbmRleCBvZiB0aGUgcGl4ZWxcbiAgICogQHJldHVybiB7bnVtYmVyW119IHRoZSB2YWx1ZSBvZiB0aGlzIHBpeGVsXG4gICAqL1xuICBnZXRQaXhlbChpbmRleCkge1xuICAgIGNvbnN0IHZhbHVlID0gbmV3IEFycmF5KHRoaXMuY2hhbm5lbHMpO1xuICAgIGNvbnN0IHRhcmdldCA9IGluZGV4ICogdGhpcy5jaGFubmVscztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY2hhbm5lbHM7IGkrKykge1xuICAgICAgdmFsdWVbaV0gPSB0aGlzLmRhdGFbdGFyZ2V0ICsgaV07XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSxcblxuICAvKipcbiAgICogU2V0IHRoZSB2YWx1ZSBvZiBhbiBlbnRpcmUgcGl4ZWxcbiAgICogQG1lbWJlcm9mIEltYWdlXG4gICAqIEBpbnN0YW5jZVxuICAgKiBAcGFyYW0ge251bWJlcn0gaW5kZXggLSAxRCBpbmRleCBvZiB0aGUgcGl4ZWxcbiAgICogQHBhcmFtIHtudW1iZXJbXX0gdmFsdWUgLSB0aGUgbmV3IHZhbHVlIG9mIHRoaXMgcGl4ZWxcbiAgICogQHJldHVybiB7dGhpc31cbiAgICovXG4gIHNldFBpeGVsKGluZGV4LCB2YWx1ZSkge1xuICAgIGNvbnN0IHRhcmdldCA9IGluZGV4ICogdGhpcy5jaGFubmVscztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0aGlzLmRhdGFbdGFyZ2V0ICsgaV0gPSB2YWx1ZVtpXTtcbiAgICB9XG4gICAgdGhpcy5jb21wdXRlZCA9IG51bGw7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH0sXG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXRWYWx1ZU1ldGhvZHMoSW1hZ2UpIHtcbiAgZm9yIChjb25zdCBpIGluIHZhbHVlTWV0aG9kcykge1xuICAgIEltYWdlLnByb3RvdHlwZVtpXSA9IHZhbHVlTWV0aG9kc1tpXTtcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0SW1hZ2VQYXJhbWV0ZXJzKGltYWdlKSB7XG4gIHJldHVybiB7XG4gICAgd2lkdGg6IGltYWdlLndpZHRoLFxuICAgIGhlaWdodDogaW1hZ2UuaGVpZ2h0LFxuICAgIGNvbXBvbmVudHM6IGltYWdlLmNvbXBvbmVudHMsXG4gICAgYWxwaGE6IGltYWdlLmFscGhhLFxuICAgIGNvbG9yTW9kZWw6IGltYWdlLmNvbG9yTW9kZWwsXG4gICAgYml0RGVwdGg6IGltYWdlLmJpdERlcHRoLFxuICB9O1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuaW1wb3J0IGdldEltYWdlUGFyYW1ldGVycyBmcm9tICcuL2dldEltYWdlUGFyYW1ldGVycyc7XG5cbi8qKlxuICogVXNlIHRoaXMgZnVuY3Rpb24gdG8gc3VwcG9ydCBnZXR0aW5nIHRoZSBvdXRwdXQgaW1hZ2Ugb2YgYW4gYWxnb3JpdGhtIGZyb20gdXNlci1zdXBwbGllZFxuICogb3B0aW9ucy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ltYWdlfSB0aGlzSW1hZ2UgLSBPcmlnaW5hbCBpbWFnZSBvbiB3aGljaCB0aGUgYWxnb3JpdGhtIHdpbGwgYmUgYXBwbGllZFxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnMgLSBPcHRpb25zIG9iamVjdCByZWNlaXZlZCBieSB0aGUgYWxnb3JpdGhtXG4gKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5vdXRdIC0gSWYgc2V0LCBtdXN0IGJlIGFuIGltYWdlIGNvbXBhdGlibGUgd2l0aCB0aGUgYWxnb3JpdGhtXG4gKiBAcGFyYW0ge29iamVjdH0gbmV3UGFyYW1ldGVycyAtIFBhcmFtZXRlcnMgdGhhdCB3aWxsIGJlIGNvbWJpbmVkIHdpdGggdGhlIG9uZXMgZnJvbSBgdGhpc0ltYWdlYC5cbiAqIEBwYXJhbSB7b2JqZWN0fSBpbnRlcm5hbE9wdGlvbnMgLSBTb21lIGFkZGl0aW9uYWwgb3B0aW9ucyBvbiB0aGUgd2F5IHRvIGNyZWF0ZSB0aGUgb3V0cHV0IGltYWdlXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldE91dHB1dEltYWdlKFxuICB0aGlzSW1hZ2UsXG4gIG9wdGlvbnMsXG4gIG5ld1BhcmFtZXRlcnMsXG4gIGludGVybmFsT3B0aW9ucyA9IHt9LFxuKSB7XG4gIGNvbnN0IHsgb3V0IH0gPSBvcHRpb25zO1xuICBpZiAob3V0ID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoaW50ZXJuYWxPcHRpb25zLmNvcHkpIHtcbiAgICAgIHJldHVybiB0aGlzSW1hZ2UuY2xvbmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIEltYWdlLmNyZWF0ZUZyb20odGhpc0ltYWdlLCBuZXdQYXJhbWV0ZXJzKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKCFJbWFnZS5pc0ltYWdlKG91dCkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ291dCBtdXN0IGJlIGFuIEltYWdlIG9iamVjdCcpO1xuICAgIH1cbiAgICBjb25zdCByZXF1aXJlbWVudHMgPSBPYmplY3QuYXNzaWduKFxuICAgICAgZ2V0SW1hZ2VQYXJhbWV0ZXJzKHRoaXNJbWFnZSksXG4gICAgICBuZXdQYXJhbWV0ZXJzLFxuICAgICk7XG4gICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiByZXF1aXJlbWVudHMpIHtcbiAgICAgIGlmIChvdXRbcHJvcGVydHldICE9PSByZXF1aXJlbWVudHNbcHJvcGVydHldKSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAgIGBjYW5ub3QgdXNlIG91dC4gSXRzICR7cHJvcGVydHl9IG11c3QgYmUgXCIke3JlcXVpcmVtZW50c1twcm9wZXJ0eV19XCIgKGZvdW5kIFwiJHtvdXRbcHJvcGVydHldfVwiKWAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXQ7XG4gIH1cbn1cblxuLyoqXG4gKiBTYW1lIGFzIGdldE91dHB1dEltYWdlIGJ1dCBhbGxvd3MgZm9yIGFuIGBpblBsYWNlYCBvcHRpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtJbWFnZX0gdGhpc0ltYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pblBsYWNlPWZhbHNlXSAtIElmIHRydWUsIHRoaXNJbWFnZSBpcyByZXR1cm5lZFxuICogQHBhcmFtIHtJbWFnZX0gW29wdGlvbnMub3V0XVxuICogQHBhcmFtIHtvYmplY3R9IGludGVybmFsT3B0aW9ucyAtIEFkZGl0aW9uYWwgaW50ZXJuYWwgb3B0aW9ucyBvbiBob3cgdG8gY3JlYXRlIHRoZSBvdXRwdXQgaW1hZ2VcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2ludGVyYWxPcHRpb25zLmNvcHldIC0gSWYgdHJ1ZSB3aWxsIGNvcHkgdGhlIG9yaWdpbmFsIGltYWdlIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgZW1wdHkgaW1hZ2VcbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UodGhpc0ltYWdlLCBvcHRpb25zLCBpbnRlcm5hbE9wdGlvbnMpIHtcbiAgaWYgKG9wdGlvbnMuaW5QbGFjZSAhPT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvcHRpb25zLmluUGxhY2UgIT09ICdib29sZWFuJykge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2luUGxhY2Ugb3B0aW9uIG11c3QgYmUgYSBib29sZWFuJyk7XG4gIH1cbiAgaWYgKG9wdGlvbnMuaW5QbGFjZSkge1xuICAgIGlmIChvcHRpb25zLm91dCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAnb3V0IG9wdGlvbiBtdXN0IG5vdCBiZSBzZXQgaWYgaW5QbGFjZSBvcHRpb24gaXMgdHJ1ZScsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpc0ltYWdlO1xuICB9XG4gIHJldHVybiBnZXRPdXRwdXRJbWFnZSh0aGlzSW1hZ2UsIG9wdGlvbnMsIG51bGwsIGludGVybmFsT3B0aW9ucyk7XG59XG4iLCJpbXBvcnQgeyBnZXRPdXRwdXRJbWFnZU9ySW5QbGFjZSB9IGZyb20gJy4uL2ludGVybmFsL2dldE91dHB1dEltYWdlJztcblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGFic29sdXRlIHZhbHVlcyBvZiBhbiBpbWFnZS5cbiAqIE9ubHkgd29ya3Mgb24gMzItYml0IGltYWdlcy5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluUGxhY2U9ZmFsc2VdXG4gKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5vdXRdXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWJzKG9wdGlvbnMgPSB7fSkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2FicycsIHtcbiAgICBiaXREZXB0aDogWzMyXSxcbiAgfSk7XG4gIGNvbnN0IG91dCA9IGdldE91dHB1dEltYWdlT3JJblBsYWNlKHRoaXMsIG9wdGlvbnMpO1xuICBhYnNvbHV0ZSh0aGlzLCBvdXQpO1xuICByZXR1cm4gb3V0O1xufVxuXG5mdW5jdGlvbiBhYnNvbHV0ZShpbWFnZSwgb3V0KSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2UuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgIG91dC5kYXRhW2ldID0gTWF0aC5hYnMoaW1hZ2UuZGF0YVtpXSk7XG4gIH1cbn1cbiIsImltcG9ydCBjb3B5QWxwaGFDaGFubmVsIGZyb20gJy4uL2ludGVybmFsL2NvcHlBbHBoYUNoYW5uZWwnO1xuaW1wb3J0IHsgZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UgfSBmcm9tICcuLi9pbnRlcm5hbC9nZXRPdXRwdXRJbWFnZSc7XG5cbi8qKlxuICogSW52ZXJ0IHRoZSBjb2xvcnMgb2YgYW4gaW1hZ2VcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluUGxhY2U9ZmFsc2VdXG4gKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5vdXRdXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW52ZXJ0KG9wdGlvbnMgPSB7fSkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2ludmVydCcsIHtcbiAgICBiaXREZXB0aDogWzEsIDgsIDE2XSxcbiAgfSk7XG5cbiAgY29uc3Qgb3V0ID0gZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UodGhpcywgb3B0aW9ucyk7XG5cbiAgaWYgKHRoaXMuYml0RGVwdGggPT09IDEpIHtcbiAgICBpbnZlcnRCaW5hcnkodGhpcywgb3V0KTtcbiAgfSBlbHNlIHtcbiAgICBpbnZlcnRDb2xvcih0aGlzLCBvdXQpO1xuICAgIGlmICh0aGlzICE9PSBvdXQpIHtcbiAgICAgIGNvcHlBbHBoYUNoYW5uZWwodGhpcywgb3V0KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dDtcbn1cblxuZnVuY3Rpb24gaW52ZXJ0QmluYXJ5KGltYWdlLCBvdXQpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgb3V0LmRhdGFbaV0gPSB+aW1hZ2UuZGF0YVtpXTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbnZlcnRDb2xvcihpbWFnZSwgb3V0KSB7XG4gIGZvciAobGV0IHBpeGVsID0gMDsgcGl4ZWwgPCBpbWFnZS5kYXRhLmxlbmd0aDsgcGl4ZWwgKz0gaW1hZ2UuY2hhbm5lbHMpIHtcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IGltYWdlLmNvbXBvbmVudHM7IGMrKykge1xuICAgICAgb3V0LmRhdGFbcGl4ZWwgKyBjXSA9IGltYWdlLm1heFZhbHVlIC0gaW1hZ2UuZGF0YVtwaXhlbCArIGNdO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIGFscGhhIGNoYW5uZWwgZnJvbSBhbiBpbWFnZSB0byBhbm90aGVyLiBuby1vcCBpZiBvbmUgb2YgdGhlIGltYWdlcyBoYXMgbm8gYWxwaGFcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ltYWdlfSBmcm9tXG4gKiBAcGFyYW0ge0ltYWdlfSB0b1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb3B5QWxwaGFDaGFubmVsKGZyb20sIHRvKSB7XG4gIGlmIChmcm9tLmFscGhhID09PSAxICYmIHRvLmFscGhhID09PSAxKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcm9tLnNpemU7IGkrKykge1xuICAgICAgdG8uZGF0YVtpICogdG8uY2hhbm5lbHMgKyB0by5jb21wb25lbnRzXSA9XG4gICAgICAgIGZyb20uZGF0YVtpICogZnJvbS5jaGFubmVscyArIGZyb20uY29tcG9uZW50c107XG4gICAgfVxuICB9XG59XG4iLCIvKipcbiAqIEZsaXAgYW4gaW1hZ2UgaG9yaXpvbnRhbGx5LlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge3RoaXN9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsaXBYKCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2ZsaXBYJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICBsZXQgb2Zmc2V0WSA9IGkgKiB0aGlzLndpZHRoICogdGhpcy5jaGFubmVscztcblxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgTWF0aC5mbG9vcih0aGlzLndpZHRoIC8gMik7IGorKykge1xuICAgICAgbGV0IHBvc0N1cnJlbnQgPSBqICogdGhpcy5jaGFubmVscyArIG9mZnNldFk7XG4gICAgICBsZXQgcG9zT3Bwb3NpdGUgPSAodGhpcy53aWR0aCAtIGogLSAxKSAqIHRoaXMuY2hhbm5lbHMgKyBvZmZzZXRZO1xuXG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRoaXMuY2hhbm5lbHM7IGsrKykge1xuICAgICAgICBsZXQgdG1wID0gdGhpcy5kYXRhW3Bvc0N1cnJlbnQgKyBrXTtcbiAgICAgICAgdGhpcy5kYXRhW3Bvc0N1cnJlbnQgKyBrXSA9IHRoaXMuZGF0YVtwb3NPcHBvc2l0ZSArIGtdO1xuICAgICAgICB0aGlzLmRhdGFbcG9zT3Bwb3NpdGUgKyBrXSA9IHRtcDtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsIi8qKlxuICogRmxpcCBhbiBpbWFnZSB2ZXJ0aWNhbGx5LiBUaGUgaW1hZ2VcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHt0aGlzfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmbGlwWSgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdmbGlwWScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLmZsb29yKHRoaXMuaGVpZ2h0IC8gMik7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy53aWR0aDsgaisrKSB7XG4gICAgICBsZXQgcG9zQ3VycmVudCA9IGogKiB0aGlzLmNoYW5uZWxzICsgaSAqIHRoaXMud2lkdGggKiB0aGlzLmNoYW5uZWxzO1xuICAgICAgbGV0IHBvc09wcG9zaXRlID1cbiAgICAgICAgaiAqIHRoaXMuY2hhbm5lbHMgKyAodGhpcy5oZWlnaHQgLSAxIC0gaSkgKiB0aGlzLmNoYW5uZWxzICogdGhpcy53aWR0aDtcblxuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLmNoYW5uZWxzOyBrKyspIHtcbiAgICAgICAgbGV0IHRtcCA9IHRoaXMuZGF0YVtwb3NDdXJyZW50ICsga107XG4gICAgICAgIHRoaXMuZGF0YVtwb3NDdXJyZW50ICsga10gPSB0aGlzLmRhdGFbcG9zT3Bwb3NpdGUgKyBrXTtcbiAgICAgICAgdGhpcy5kYXRhW3Bvc09wcG9zaXRlICsga10gPSB0bXA7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCIvKipcbiAqIEJsdXJzIHRoZSBpbWFnZSBieSBhdmVyYWdpbmcgdGhlIG5laWdoYm9yaW5nIHBpeGVscy5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmFkaXVzPTFdIC0gTnVtYmVyIG9mIHBpeGVscyBhcm91bmQgdGhlIGN1cnJlbnQgcGl4ZWwgdG8gYXZlcmFnZVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJsdXJGaWx0ZXIob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHsgcmFkaXVzID0gMSB9ID0gb3B0aW9ucztcblxuICBpZiAocmFkaXVzIDwgMSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncmFkaXVzIG11c3QgYmUgZ3JlYXRlciB0aGFuIDEnKTtcbiAgfVxuXG4gIGNvbnN0IG4gPSAyICogcmFkaXVzICsgMTtcbiAgY29uc3Qga2VybmVsID0gbmV3IEFycmF5KG4pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgIGtlcm5lbFtpXSA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG47IGorKykge1xuICAgICAga2VybmVsW2ldW2pdID0gMSAvIChuICogbik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXMuY29udm9sdXRpb24oa2VybmVsKTtcbn1cbiIsImltcG9ydCAqIGFzIE1vZGVsIGZyb20gJy4uL2ltYWdlL21vZGVsL21vZGVsJztcblxuLyoqXG4gKiBTcGVjaWZ5IHdoaWNoIGNoYW5uZWxzIHNob3VsZCBiZSBwcm9jZXNzZWRcbiAqICogdW5kZWZpbmVkIDogd2UgdGFrZSBhbGwgdGhlIGNoYW5uZWxzIGJ1dCBhbHBoYVxuICogKiBudW1iZXIgOiB0aGlzIHNwZWNpZmljIGNoYW5uZWxcbiAqICogc3RyaW5nIDogY29udmVydGVkIHRvIGEgY2hhbm5lbCBiYXNlZCBvbiByZ2IsIGNteWssIGhzbCBvciBoc3YgKG9uZSBsZXR0ZXIgY29kZSlcbiAqICogW251bWJlcl0gOiBhcnJheSBvZiBjaGFubmVscyBhcyBudW1iZXJzXG4gKiAqIFtzdHJpbmddIDogYXJyYXkgb2YgY2hhbm5lbHMgYXMgb25lIGxldHRlciBzdHJpbmdcbiAqIEB0eXBlZGVmIHt1bmRlZmluZWR8bnVtYmVyfHN0cmluZ3xBcnJheTxudW1iZXI+fEFycmF5PHN0cmluZz59IFNlbGVjdGVkQ2hhbm5lbHNcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMoaW1hZ2UsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQge1xuICAgIGNoYW5uZWxzLFxuICAgIGFsbG93QWxwaGEsIC8vIGFyZSB3ZSBhbGxvd2luZyB0aGUgc2VsZWN0aW9uIG9mIGFuIGFscGhhIGNoYW5uZWwgP1xuICAgIGRlZmF1bHRBbHBoYSwgLy8gaWYgbm8gY2hhbm5lbHMgYXJlIHNlbGVjdGVkIHNob3VsZCB3ZSB0YWtlIHRoZSBhbHBoYSBjaGFubmVsID9cbiAgfSA9IG9wdGlvbnM7XG5cbiAgaWYgKHR5cGVvZiBhbGxvd0FscGhhICE9PSAnYm9vbGVhbicpIHtcbiAgICBhbGxvd0FscGhhID0gdHJ1ZTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgY2hhbm5lbHMgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIGFsbENoYW5uZWxzKGltYWdlLCBkZWZhdWx0QWxwaGEpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWxpZGF0ZUNoYW5uZWxzKGltYWdlLCBjaGFubmVscywgYWxsb3dBbHBoYSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsQ2hhbm5lbHMoaW1hZ2UsIGRlZmF1bHRBbHBoYSkge1xuICBsZXQgbGVuZ3RoID0gZGVmYXVsdEFscGhhID8gaW1hZ2UuY2hhbm5lbHMgOiBpbWFnZS5jb21wb25lbnRzO1xuICBsZXQgYXJyYXkgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgIGFycmF5W2ldID0gaTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmZ1bmN0aW9uIHZhbGlkYXRlQ2hhbm5lbHMoaW1hZ2UsIGNoYW5uZWxzLCBhbGxvd0FscGhhKSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShjaGFubmVscykpIHtcbiAgICBjaGFubmVscyA9IFtjaGFubmVsc107XG4gIH1cbiAgZm9yIChsZXQgYyA9IDA7IGMgPCBjaGFubmVscy5sZW5ndGg7IGMrKykge1xuICAgIGNoYW5uZWxzW2NdID0gdmFsaWRhdGVDaGFubmVsKGltYWdlLCBjaGFubmVsc1tjXSwgYWxsb3dBbHBoYSk7XG4gIH1cbiAgcmV0dXJuIGNoYW5uZWxzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVDaGFubmVsKGltYWdlLCBjaGFubmVsLCBhbGxvd0FscGhhID0gdHJ1ZSkge1xuICBpZiAoY2hhbm5lbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgdmFsaWRhdGVDaGFubmVsIDogdGhlIGNoYW5uZWwgaGFzIHRvIGJlID49MCBhbmQgPCR7aW1hZ2UuY2hhbm5lbHN9YCxcbiAgICApO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGFubmVsID09PSAnc3RyaW5nJykge1xuICAgIHN3aXRjaCAoaW1hZ2UuY29sb3JNb2RlbCkge1xuICAgICAgY2FzZSBNb2RlbC5HUkVZOlxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTW9kZWwuUkdCOlxuICAgICAgICBpZiAoJ3JnYicuaW5jbHVkZXMoY2hhbm5lbCkpIHtcbiAgICAgICAgICBzd2l0Y2ggKGNoYW5uZWwpIHtcbiAgICAgICAgICAgIGNhc2UgJ3InOlxuICAgICAgICAgICAgICBjaGFubmVsID0gMDtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdnJzpcbiAgICAgICAgICAgICAgY2hhbm5lbCA9IDE7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnYic6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSAyO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIE1vZGVsLkhTTDpcbiAgICAgICAgaWYgKCdoc2wnLmluY2x1ZGVzKGNoYW5uZWwpKSB7XG4gICAgICAgICAgc3dpdGNoIChjaGFubmVsKSB7XG4gICAgICAgICAgICBjYXNlICdoJzpcbiAgICAgICAgICAgICAgY2hhbm5lbCA9IDA7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAncyc6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSAxO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ2wnOlxuICAgICAgICAgICAgICBjaGFubmVsID0gMjtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAvLyBubyBkZWZhdWx0XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBNb2RlbC5IU1Y6XG4gICAgICAgIGlmICgnaHN2Jy5pbmNsdWRlcyhjaGFubmVsKSkge1xuICAgICAgICAgIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgICAgICAgICAgY2FzZSAnaCc6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3MnOlxuICAgICAgICAgICAgICBjaGFubmVsID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd2JzpcbiAgICAgICAgICAgICAgY2hhbm5lbCA9IDI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgLy8gbm8gZGVmYXVsdFxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgTW9kZWwuQ01ZSzpcbiAgICAgICAgaWYgKCdjbXlrJy5pbmNsdWRlcyhjaGFubmVsKSkge1xuICAgICAgICAgIHN3aXRjaCAoY2hhbm5lbCkge1xuICAgICAgICAgICAgY2FzZSAnYyc6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSAwO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ20nOlxuICAgICAgICAgICAgICBjaGFubmVsID0gMTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICd5JzpcbiAgICAgICAgICAgICAgY2hhbm5lbCA9IDI7XG4gICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnayc6XG4gICAgICAgICAgICAgIGNoYW5uZWwgPSAzO1xuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIC8vIG5vIGRlZmF1bHRcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFVuZXhwZWN0ZWQgY29sb3IgbW9kZWw6ICR7aW1hZ2UuY29sb3JNb2RlbH1gKTtcbiAgICB9XG5cbiAgICBpZiAoY2hhbm5lbCA9PT0gJ2EnKSB7XG4gICAgICBpZiAoIWltYWdlLmFscGhhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAndmFsaWRhdGVDaGFubmVsIDogdGhlIGltYWdlIGRvZXMgbm90IGNvbnRhaW4gYWxwaGEgY2hhbm5lbCcsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjaGFubmVsID0gaW1hZ2UuY29tcG9uZW50cztcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNoYW5uZWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYHZhbGlkYXRlQ2hhbm5lbCA6IHVuZGVmaW5lZCBjaGFubmVsOiAke2NoYW5uZWx9YCk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGNoYW5uZWwgPj0gaW1hZ2UuY2hhbm5lbHMpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGB2YWxpZGF0ZUNoYW5uZWwgOiB0aGUgY2hhbm5lbCBoYXMgdG8gYmUgPj0wIGFuZCA8JHtpbWFnZS5jaGFubmVsc31gLFxuICAgICk7XG4gIH1cblxuICBpZiAoIWFsbG93QWxwaGEgJiYgY2hhbm5lbCA+PSBpbWFnZS5jb21wb25lbnRzKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3ZhbGlkYXRlQ2hhbm5lbCA6IGFscGhhIGNoYW5uZWwgbWF5IG5vdCBiZSBzZWxlY3RlZCcpO1xuICB9XG5cbiAgcmV0dXJuIGNoYW5uZWw7XG59XG4iLCJpbXBvcnQgcXVpY2tTZWxlY3RNZWRpYW4gZnJvbSAnbWVkaWFuLXF1aWNrc2VsZWN0JztcblxuaW1wb3J0IHsgdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMgfSBmcm9tICcuLi8uLi91dGlsL2NoYW5uZWwnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuLyoqXG4gKiBFYWNoIHBpeGVsIG9mIHRoZSBpbWFnZSBiZWNvbWVzIHRoZSBtZWRpYW4gb2YgdGhlIG5laWdoYm9yIHBpeGVscy5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtTZWxlY3RlZENoYW5uZWxzfSBbb3B0aW9ucy5jaGFubmVsc10gLSBTcGVjaWZ5IHdoaWNoIGNoYW5uZWxzIHNob3VsZCBiZSBwcm9jZXNzZWQuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmFkaXVzPTFdIC0gRGlzdGFuY2Ugb2YgdGhlIHNxdWFyZSB0byB0YWtlIHRoZSBtZWFuIG9mLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmJvcmRlcj0nY29weSddIC0gQWxnb3JpdGhtIHRoYXQgd2lsbCBiZSBhcHBsaWVkIGFmdGVyIHRvIGRlYWwgd2l0aCBib3JkZXJzLlxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lZGlhbkZpbHRlcihvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgcmFkaXVzID0gMSwgYm9yZGVyID0gJ2NvcHknLCBjaGFubmVscyB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ21lZGlhbkZpbHRlcicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgaWYgKHJhZGl1cyA8IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3JhZGl1cyBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gIH1cblxuICBjaGFubmVscyA9IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzKHRoaXMsIGNoYW5uZWxzLCB0cnVlKTtcblxuICBsZXQga1dpZHRoID0gcmFkaXVzO1xuICBsZXQga0hlaWdodCA9IHJhZGl1cztcbiAgbGV0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzKTtcblxuICBsZXQgc2l6ZSA9IChrV2lkdGggKiAyICsgMSkgKiAoa0hlaWdodCAqIDIgKyAxKTtcbiAgbGV0IGtlcm5lbCA9IG5ldyBBcnJheShzaXplKTtcblxuICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IGNoYW5uZWxzLmxlbmd0aDsgY2hhbm5lbCsrKSB7XG4gICAgbGV0IGMgPSBjaGFubmVsc1tjaGFubmVsXTtcbiAgICBmb3IgKGxldCB5ID0ga0hlaWdodDsgeSA8IHRoaXMuaGVpZ2h0IC0ga0hlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0ga1dpZHRoOyB4IDwgdGhpcy53aWR0aCAtIGtXaWR0aDsgeCsrKSB7XG4gICAgICAgIGxldCBuID0gMDtcbiAgICAgICAgZm9yIChsZXQgaiA9IC1rSGVpZ2h0OyBqIDw9IGtIZWlnaHQ7IGorKykge1xuICAgICAgICAgIGZvciAobGV0IGkgPSAta1dpZHRoOyBpIDw9IGtXaWR0aDsgaSsrKSB7XG4gICAgICAgICAgICBsZXQgaW5kZXggPSAoKHkgKyBqKSAqIHRoaXMud2lkdGggKyB4ICsgaSkgKiB0aGlzLmNoYW5uZWxzICsgYztcbiAgICAgICAgICAgIGtlcm5lbFtuKytdID0gdGhpcy5kYXRhW2luZGV4XTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgaW5kZXggPSAoeSAqIHRoaXMud2lkdGggKyB4KSAqIHRoaXMuY2hhbm5lbHMgKyBjO1xuXG4gICAgICAgIG5ld0ltYWdlLmRhdGFbaW5kZXhdID0gcXVpY2tTZWxlY3RNZWRpYW4oa2VybmVsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHRoaXMuYWxwaGEgJiYgIWNoYW5uZWxzLmluY2x1ZGVzKHRoaXMuY2hhbm5lbHMpKSB7XG4gICAgZm9yIChsZXQgaSA9IHRoaXMuY29tcG9uZW50czsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkgPSBpICsgdGhpcy5jaGFubmVscykge1xuICAgICAgbmV3SW1hZ2UuZGF0YVtpXSA9IHRoaXMuZGF0YVtpXTtcbiAgICB9XG4gIH1cblxuICBuZXdJbWFnZS5zZXRCb3JkZXIoeyBzaXplOiBba1dpZHRoLCBrSGVpZ2h0XSwgYWxnb3JpdGhtOiBib3JkZXIgfSk7XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBBcHBseSBhIGdhdXNzaWFuIGZpbHRlciB0byB0aGUgaW1hZ2UuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yYWRpdXM9MV0gLSBOdW1iZXIgb2YgcGl4ZWxzIGFyb3VuZCB0aGUgY3VycmVudCBwaXhlbC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaWdtYV0gLSBTaWdtYSBwYXJhbWV0ZXIgZm9yIHRoZSBnYXVzc2lhbi5cbiAqIEBwYXJhbSB7bnVtYmVyW118c3RyaW5nW119IFtvcHRpb25zLmNoYW5uZWxzXSAtIFRvIHdoaWNoIGNoYW5uZWwgdG8gYXBwbHkgdGhlIGZpbHRlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ib3JkZXI9J2NvcHknXVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdhdXNzaWFuRmlsdGVyKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyByYWRpdXMgPSAxLCBzaWdtYSwgY2hhbm5lbHMsIGJvcmRlciA9ICdjb3B5JyB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2dhdXNzaWFuJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBjb25zdCBrZXJuZWwgPSBnZXRLZXJuZWwocmFkaXVzLCBzaWdtYSk7XG4gIHJldHVybiB0aGlzLmNvbnZvbHV0aW9uKFtrZXJuZWwsIGtlcm5lbF0sIHtcbiAgICBib3JkZXIsXG4gICAgY2hhbm5lbHMsXG4gICAgYWxnb3JpdGhtOiAnc2VwYXJhYmxlJyxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldEtlcm5lbChyYWRpdXMsIHNpZ21hKSB7XG4gIGNvbnN0IG4gPSByYWRpdXMgKiAyICsgMTtcbiAgY29uc3Qga2VybmVsID0gbmV3IEFycmF5KG4pO1xuICBjb25zdCBzaWdtYVggPSBzaWdtYSA/IHNpZ21hIDogKChuIC0gMSkgKiAwLjUgLSAxKSAqIDAuMyArIDAuODtcbiAgY29uc3Qgc2NhbGUyWCA9IC0wLjUgLyAoc2lnbWFYICogc2lnbWFYKTtcbiAgbGV0IHN1bSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAgY29uc3QgeCA9IGkgLSByYWRpdXM7XG4gICAgY29uc3QgdCA9IE1hdGguZXhwKHNjYWxlMlggKiB4ICogeCk7XG4gICAga2VybmVsW2ldID0gdDtcbiAgICBzdW0gKz0gdDtcbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgbjsgaSsrKSB7XG4gICAga2VybmVsW2ldIC89IHN1bTtcbiAgfVxuICByZXR1cm4ga2VybmVsO1xufVxuIiwiZXhwb3J0IGNvbnN0IERJU0NSRVRFX0xBUExBQ0VfNCA9IFtcbiAgWzAsIDEsIDBdLFxuICBbMSwgLTQsIDFdLFxuICBbMCwgMSwgMF0sXG5dO1xuXG5leHBvcnQgY29uc3QgRElTQ1JFVEVfTEFQTEFDRV84ID0gW1xuICBbMSwgMSwgMV0sXG4gIFsxLCAtOCwgMV0sXG4gIFsxLCAxLCAxXSxcbl07XG5cbmV4cG9ydCBjb25zdCBTT0JFTF9YID0gW1xuICBbLTEsIDAsICsxXSxcbiAgWy0yLCAwLCArMl0sXG4gIFstMSwgMCwgKzFdLFxuXTtcblxuZXhwb3J0IGNvbnN0IFNPQkVMX1kgPSBbXG4gIFstMSwgLTIsIC0xXSxcbiAgWzAsIDAsIDBdLFxuICBbKzEsICsyLCArMV0sXG5dO1xuXG5leHBvcnQgY29uc3QgU0NIQVJSX1ggPSBbXG4gIFszLCAwLCAtM10sXG4gIFsxMCwgMCwgLTEwXSxcbiAgWzMsIDAsIC0zXSxcbl07XG5cbmV4cG9ydCBjb25zdCBTQ0hBUlJfWSA9IFtcbiAgWzMsIDEwLCAzXSxcbiAgWzAsIDAsIDBdLFxuICBbLTMsIC0xMCwgLTNdLFxuXTtcblxuZXhwb3J0IGNvbnN0IFNFQ09ORF9ERVJJVkFUSVZFID0gW1xuICBbLTEsIC0yLCAwLCAyLCAxXSxcbiAgWy0yLCAtNCwgMCwgNCwgMl0sXG4gIFswLCAwLCAwLCAwLCAwXSxcbiAgWzEsIDIsIDAsIC0yLCAtMV0sXG4gIFsyLCA0LCAwLCAtNCwgLTJdLFxuXTtcblxuZXhwb3J0IGNvbnN0IFNFQ09ORF9ERVJJVkFUSVZFX0lOViA9IFtcbiAgWzEsIDIsIDAsIC0yLCAtMV0sXG4gIFsyLCA0LCAwLCAtNCwgLTJdLFxuICBbMCwgMCwgMCwgMCwgMF0sXG4gIFstMiwgLTQsIDAsIDQsIDJdLFxuICBbLTEsIC0yLCAwLCAyLCAxXSxcbl07XG4iLCJleHBvcnQgZnVuY3Rpb24gY2xhbXAodmFsdWUsIGltYWdlKSB7XG4gIHJldHVybiBNYXRoLnJvdW5kKE1hdGgubWluKE1hdGgubWF4KHZhbHVlLCAwKSwgaW1hZ2UubWF4VmFsdWUpKTtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpcmVjdENvbnZvbHV0aW9uKGlucHV0LCBrZXJuZWwsIG91dHB1dCkge1xuICAgIGlmIChvdXRwdXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSBpbnB1dC5sZW5ndGggKyBrZXJuZWwubGVuZ3RoIC0gMTtcbiAgICAgICAgb3V0cHV0ID0gbmV3IEFycmF5KGxlbmd0aCk7XG4gICAgfVxuICAgIGZpbGwob3V0cHV0KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGlucHV0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAodmFyIGogPSAwOyBqIDwga2VybmVsLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBvdXRwdXRbaSArIGpdICs9IGlucHV0W2ldICoga2VybmVsW2pdO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvdXRwdXQ7XG59XG5cbmZ1bmN0aW9uIGZpbGwoYXJyYXkpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGFycmF5W2ldID0gMDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBkaXJlY3RDb252b2x1dGlvbiB9IGZyb20gJ21sLWNvbnZvbHV0aW9uJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY29udm9sdXRpb25TZXBhcmFibGUoXG4gIGRhdGEsXG4gIHNlcGFyYXRlZEtlcm5lbCxcbiAgd2lkdGgsXG4gIGhlaWdodCxcbikge1xuICBjb25zdCByZXN1bHQgPSBuZXcgQXJyYXkoZGF0YS5sZW5ndGgpO1xuICBsZXQgdG1wLCBjb252LCBvZmZzZXQsIGtlcm5lbDtcblxuICBrZXJuZWwgPSBzZXBhcmF0ZWRLZXJuZWxbMV07XG4gIG9mZnNldCA9IChrZXJuZWwubGVuZ3RoIC0gMSkgLyAyO1xuICBjb252ID0gbmV3IEFycmF5KHdpZHRoICsga2VybmVsLmxlbmd0aCAtIDEpO1xuICB0bXAgPSBuZXcgQXJyYXkod2lkdGgpO1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICB0bXBbeF0gPSBkYXRhW3kgKiB3aWR0aCArIHhdO1xuICAgIH1cbiAgICBkaXJlY3RDb252b2x1dGlvbih0bXAsIGtlcm5lbCwgY29udik7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICByZXN1bHRbeSAqIHdpZHRoICsgeF0gPSBjb252W29mZnNldCArIHhdO1xuICAgIH1cbiAgfVxuXG4gIGtlcm5lbCA9IHNlcGFyYXRlZEtlcm5lbFswXTtcbiAgb2Zmc2V0ID0gKGtlcm5lbC5sZW5ndGggLSAxKSAvIDI7XG4gIGNvbnYgPSBuZXcgQXJyYXkoaGVpZ2h0ICsga2VybmVsLmxlbmd0aCAtIDEpO1xuICB0bXAgPSBuZXcgQXJyYXkoaGVpZ2h0KTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgdG1wW3ldID0gcmVzdWx0W3kgKiB3aWR0aCArIHhdO1xuICAgIH1cbiAgICBkaXJlY3RDb252b2x1dGlvbih0bXAsIGtlcm5lbCwgY29udik7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgcmVzdWx0W3kgKiB3aWR0aCArIHhdID0gY29udltvZmZzZXQgKyB5XTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IGRpcmVjdCwgZmZ0IH0gZnJvbSAnbWwtbWF0cml4LWNvbnZvbHV0aW9uJztcblxuaW1wb3J0IHsgdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMgfSBmcm9tICcuLi8uLi91dGlsL2NoYW5uZWwnO1xuaW1wb3J0IHsgdmFsaWRhdGVLZXJuZWwgfSBmcm9tICcuLi8uLi91dGlsL2tlcm5lbCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9pbnRlcm5hbC9jbGFtcCc7XG5cbmltcG9ydCBjb252b2x1dGlvblNlcGFyYWJsZSBmcm9tICcuL2NvbnZvbHV0aW9uU2VwYXJhYmxlJztcbmltcG9ydCBnZXRTZXBhcmF0ZWRLZXJuZWwgZnJvbSAnLi9nZXRTZXBhcmF0ZWRLZXJuZWwnO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBrZXJuZWxcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBvcHRpb25zXG4gKiBAcGFyYW0ge0FycmF5fSBbb3B0aW9ucy5jaGFubmVsc10gLSBBcnJheSBvZiBjaGFubmVscyB0byB0cmVhdC4gRGVmYXVsdHMgdG8gYWxsIGNoYW5uZWxzXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYml0RGVwdGg9dGhpcy5iaXREZXB0aF0gLSBBIG5ldyBiaXQgZGVwdGggY2FuIGJlIHNwZWNpZmllZC4gVGhpcyBhbGxvd3MgdG8gdXNlIDMyIGJpdHMgdG8gYXZvaWQgY2xhbXBpbmcgb2YgZmxvYXRpbmctcG9pbnQgbnVtYmVycy5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubm9ybWFsaXplPWZhbHNlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmRpdmlzb3I9MV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ib3JkZXI9J2NvcHknXVxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmFsZ29yaXRobT0nYXV0byddIC0gRWl0aGVyICdhdXRvJywgJ2RpcmVjdCcsICdmZnQnIG9yICdzZXBhcmFibGUnLiBmZnQgaXMgbXVjaCBmYXN0ZXIgZm9yIGxhcmdlIGtlcm5lbC5cbiAqIElmIHRoZSBzZXBhcmFibGUgYWxnb3JpdGhtIGlzIHVzZWQsIG9uZSBtdXN0IHByb3ZpZGUgYXMga2VybmVsIGFuIGFycmF5IG9mIHR3byAxRCBrZXJuZWxzLlxuICogVGhlICdhdXRvJyBvcHRpb24gd2lsbCB0cnkgdG8gc2VwYXJhdGUgdGhlIGtlcm5lbCBpZiB0aGF0IGlzIHBvc3NpYmxlLlxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbnZvbHV0aW9uKGtlcm5lbCwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAgY2hhbm5lbHMsXG4gICAgYml0RGVwdGgsXG4gICAgbm9ybWFsaXplID0gZmFsc2UsXG4gICAgZGl2aXNvciA9IDEsXG4gICAgYm9yZGVyID0gJ2NvcHknLFxuICAgIGFsZ29yaXRobSA9ICdhdXRvJyxcbiAgfSA9IG9wdGlvbnM7XG4gIGxldCBjcmVhdGVPcHRpb25zID0ge307XG4gIGlmIChiaXREZXB0aCkgY3JlYXRlT3B0aW9ucy5iaXREZXB0aCA9IGJpdERlcHRoO1xuICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIGNyZWF0ZU9wdGlvbnMpO1xuXG4gIGNoYW5uZWxzID0gdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHModGhpcywgY2hhbm5lbHMsIHRydWUpO1xuXG4gIGlmIChhbGdvcml0aG0gIT09ICdzZXBhcmFibGUnKSB7XG4gICAgKHsga2VybmVsIH0gPSB2YWxpZGF0ZUtlcm5lbChrZXJuZWwpKTtcbiAgfSBlbHNlIGlmICghQXJyYXkuaXNBcnJheShrZXJuZWwpIHx8IGtlcm5lbC5sZW5ndGggIT09IDIpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICdzZXBhcmFibGUgY29udm9sdXRpb24gcmVxdWlyZXMgdHdvIGFycmF5cyBvZiBudW1iZXJzIHRvIHJlcHJlc2VudCB0aGUga2VybmVsJyxcbiAgICApO1xuICB9XG5cbiAgaWYgKGFsZ29yaXRobSA9PT0gJ2F1dG8nKSB7XG4gICAgbGV0IHNlcGFyYXRlZEtlcm5lbCA9IGdldFNlcGFyYXRlZEtlcm5lbChrZXJuZWwpO1xuICAgIGlmIChzZXBhcmF0ZWRLZXJuZWwgIT09IG51bGwpIHtcbiAgICAgIGFsZ29yaXRobSA9ICdzZXBhcmFibGUnO1xuICAgICAga2VybmVsID0gc2VwYXJhdGVkS2VybmVsO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAoa2VybmVsLmxlbmd0aCA+IDkgfHwga2VybmVsWzBdLmxlbmd0aCA+IDkpICYmXG4gICAgICB0aGlzLndpZHRoIDw9IDQwOTYgJiZcbiAgICAgIHRoaXMuaGVpZ2h0IDw9IDQwOTZcbiAgICApIHtcbiAgICAgIGFsZ29yaXRobSA9ICdmZnQnO1xuICAgIH0gZWxzZSB7XG4gICAgICBhbGdvcml0aG0gPSAnZGlyZWN0JztcbiAgICB9XG4gIH1cblxuICBsZXQgaGFsZkhlaWdodCwgaGFsZldpZHRoO1xuICBpZiAoYWxnb3JpdGhtID09PSAnc2VwYXJhYmxlJykge1xuICAgIGhhbGZIZWlnaHQgPSBNYXRoLmZsb29yKGtlcm5lbFswXS5sZW5ndGggLyAyKTtcbiAgICBoYWxmV2lkdGggPSBNYXRoLmZsb29yKGtlcm5lbFsxXS5sZW5ndGggLyAyKTtcbiAgfSBlbHNlIHtcbiAgICBoYWxmSGVpZ2h0ID0gTWF0aC5mbG9vcihrZXJuZWwubGVuZ3RoIC8gMik7XG4gICAgaGFsZldpZHRoID0gTWF0aC5mbG9vcihrZXJuZWxbMF0ubGVuZ3RoIC8gMik7XG4gIH1cbiAgbGV0IGNsYW1wZWQgPSBuZXdJbWFnZS5pc0NsYW1wZWQ7XG5cbiAgbGV0IHRtcERhdGEgPSBuZXcgQXJyYXkodGhpcy5oZWlnaHQgKiB0aGlzLndpZHRoKTtcbiAgbGV0IGluZGV4LCB4LCB5LCBjaGFubmVsLCBjLCB0bXBSZXN1bHQ7XG4gIGZvciAoY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBjaGFubmVscy5sZW5ndGg7IGNoYW5uZWwrKykge1xuICAgIGMgPSBjaGFubmVsc1tjaGFubmVsXTtcbiAgICAvLyBDb3B5IHRoZSBjaGFubmVsIGluIGEgc2luZ2xlIGFycmF5XG4gICAgZm9yICh5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAoeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgaW5kZXggPSB5ICogdGhpcy53aWR0aCArIHg7XG4gICAgICAgIHRtcERhdGFbaW5kZXhdID0gdGhpcy5kYXRhW2luZGV4ICogdGhpcy5jaGFubmVscyArIGNdO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoYWxnb3JpdGhtID09PSAnZGlyZWN0Jykge1xuICAgICAgdG1wUmVzdWx0ID0gZGlyZWN0KHRtcERhdGEsIGtlcm5lbCwge1xuICAgICAgICByb3dzOiB0aGlzLmhlaWdodCxcbiAgICAgICAgY29sczogdGhpcy53aWR0aCxcbiAgICAgICAgbm9ybWFsaXplOiBub3JtYWxpemUsXG4gICAgICAgIGRpdmlzb3I6IGRpdmlzb3IsXG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKGFsZ29yaXRobSA9PT0gJ3NlcGFyYWJsZScpIHtcbiAgICAgIHRtcFJlc3VsdCA9IGNvbnZvbHV0aW9uU2VwYXJhYmxlKFxuICAgICAgICB0bXBEYXRhLFxuICAgICAgICBrZXJuZWwsXG4gICAgICAgIHRoaXMud2lkdGgsXG4gICAgICAgIHRoaXMuaGVpZ2h0LFxuICAgICAgKTtcbiAgICAgIGlmIChub3JtYWxpemUpIHtcbiAgICAgICAgZGl2aXNvciA9IDA7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwga2VybmVsWzBdLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBrZXJuZWxbMV0ubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGRpdmlzb3IgKz0ga2VybmVsWzBdW2ldICoga2VybmVsWzFdW2pdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGRpdmlzb3IgIT09IDEpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0bXBSZXN1bHQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0bXBSZXN1bHRbaV0gLz0gZGl2aXNvcjtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0bXBSZXN1bHQgPSBmZnQodG1wRGF0YSwga2VybmVsLCB7XG4gICAgICAgIHJvd3M6IHRoaXMuaGVpZ2h0LFxuICAgICAgICBjb2xzOiB0aGlzLndpZHRoLFxuICAgICAgICBub3JtYWxpemU6IG5vcm1hbGl6ZSxcbiAgICAgICAgZGl2aXNvcjogZGl2aXNvcixcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIENvcHkgdGhlIHJlc3VsdCB0byB0aGUgb3V0cHV0IGltYWdlXG4gICAgZm9yICh5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAoeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgaW5kZXggPSB5ICogdGhpcy53aWR0aCArIHg7XG4gICAgICAgIGlmIChjbGFtcGVkKSB7XG4gICAgICAgICAgbmV3SW1hZ2UuZGF0YVtpbmRleCAqIHRoaXMuY2hhbm5lbHMgKyBjXSA9IGNsYW1wKFxuICAgICAgICAgICAgdG1wUmVzdWx0W2luZGV4XSxcbiAgICAgICAgICAgIG5ld0ltYWdlLFxuICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbmV3SW1hZ2UuZGF0YVtpbmRleCAqIHRoaXMuY2hhbm5lbHMgKyBjXSA9IHRtcFJlc3VsdFtpbmRleF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gaWYgdGhlIGtlcm5lbCB3YXMgbm90IGFwcGxpZWQgb24gdGhlIGFscGhhIGNoYW5uZWwgd2UganVzdCBjb3B5IGl0XG4gIC8vIFRPRE86IGluIGdlbmVyYWwgd2Ugc2hvdWxkIGNvcHkgdGhlIGNoYW5uZWxzIHRoYXQgd2hlcmUgbm90IGNoYW5nZWRcbiAgLy8gVE9ETzogcHJvYmFibHkgd2Ugc2hvdWxkIGp1c3QgY29weSB0aGUgaW1hZ2UgYXQgdGhlIGJlZ2lubmluZyA/XG4gIGlmICh0aGlzLmFscGhhICYmICFjaGFubmVscy5pbmNsdWRlcyh0aGlzLmNoYW5uZWxzKSkge1xuICAgIGZvciAoeCA9IHRoaXMuY29tcG9uZW50czsgeCA8IHRoaXMuZGF0YS5sZW5ndGg7IHggPSB4ICsgdGhpcy5jaGFubmVscykge1xuICAgICAgbmV3SW1hZ2UuZGF0YVt4XSA9IHRoaXMuZGF0YVt4XTtcbiAgICB9XG4gIH1cblxuICAvLyBJIG9ubHkgY2FuIGhhdmUgMyB0eXBlcyBvZiBib3JkZXJzOlxuICAvLyAgMS4gQ29uc2lkZXJpbmcgdGhlIGltYWdlIGFzIHBlcmlvZGljOiBwZXJpb2RpY1xuICAvLyAgMi4gRXh0ZW5kIHRoZSBpbnRlcmlvciBib3JkZXJzOiBjb3B5XG4gIC8vICAzLiBmaWxsIHdpdGggYSBjb2xvcjogc2V0XG4gIGlmIChib3JkZXIgIT09ICdwZXJpb2RpYycpIHtcbiAgICBuZXdJbWFnZS5zZXRCb3JkZXIoeyBzaXplOiBbaGFsZldpZHRoLCBoYWxmSGVpZ2h0XSwgYWxnb3JpdGhtOiBib3JkZXIgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCJpbXBvcnQgaXNJbnRlZ2VyIGZyb20gJ2lzLWludGVnZXInO1xuXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVLZXJuZWwoa2VybmVsKSB7XG4gIGxldCBrSGVpZ2h0LCBrV2lkdGg7XG4gIGlmIChBcnJheS5pc0FycmF5KGtlcm5lbCkpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShrZXJuZWxbMF0pKSB7XG4gICAgICAvLyAyRCBhcnJheVxuICAgICAgaWYgKChrZXJuZWwubGVuZ3RoICYgMSkgPT09IDAgfHwgKGtlcm5lbFswXS5sZW5ndGggJiAxKSA9PT0gMCkge1xuICAgICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICAgICAndmFsaWRhdGVLZXJuZWw6IEtlcm5lbCByb3dzIGFuZCBjb2x1bW5zIHNob3VsZCBiZSBvZGQgbnVtYmVycycsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrSGVpZ2h0ID0gTWF0aC5mbG9vcihrZXJuZWwubGVuZ3RoIC8gMik7XG4gICAgICAgIGtXaWR0aCA9IE1hdGguZmxvb3Ioa2VybmVsWzBdLmxlbmd0aCAvIDIpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQga2VybmVsV2lkdGggPSBNYXRoLnNxcnQoa2VybmVsLmxlbmd0aCk7XG4gICAgICBpZiAoaXNJbnRlZ2VyKGtlcm5lbFdpZHRoKSkge1xuICAgICAgICBrV2lkdGggPSBrSGVpZ2h0ID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoa2VybmVsLmxlbmd0aCkgLyAyKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd2YWxpZGF0ZUtlcm5lbDogS2VybmVsIGFycmF5IHNob3VsZCBiZSBhIHNxdWFyZScpO1xuICAgICAgfVxuICAgICAgLy8gd2UgY29udmVydCB0aGUgYXJyYXkgdG8gYSBtYXRyaXhcbiAgICAgIGxldCBuZXdLZXJuZWwgPSBuZXcgQXJyYXkoa2VybmVsV2lkdGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXJuZWxXaWR0aDsgaSsrKSB7XG4gICAgICAgIG5ld0tlcm5lbFtpXSA9IG5ldyBBcnJheShrZXJuZWxXaWR0aCk7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwga2VybmVsV2lkdGg7IGorKykge1xuICAgICAgICAgIG5ld0tlcm5lbFtpXVtqXSA9IGtlcm5lbFtpICoga2VybmVsV2lkdGggKyBqXTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAga2VybmVsID0gbmV3S2VybmVsO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYHZhbGlkYXRlS2VybmVsOiBJbnZhbGlkIEtlcm5lbDogJHtrZXJuZWx9YCk7XG4gIH1cbiAgcmV0dXJuIHsga2VybmVsLCBrV2lkdGgsIGtIZWlnaHQgfTtcbn1cbiIsImltcG9ydCB7IFNWRCB9IGZyb20gJ21sLW1hdHJpeCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFNlcGFyYXRlZEtlcm5lbChrZXJuZWwpIHtcbiAgY29uc3Qgc3ZkID0gbmV3IFNWRChrZXJuZWwsIHsgYXV0b1RyYW5zcG9zZTogdHJ1ZSB9KTtcbiAgaWYgKHN2ZC5yYW5rICE9PSAxKSByZXR1cm4gbnVsbDtcbiAgY29uc3QgcyA9IE1hdGguc3FydChzdmQuc1swXSk7XG4gIGNvbnN0IHYgPSBzdmQuVS50bzJEQXJyYXkoKS5tYXAoKHYpID0+IHZbMF0gKiBzKTtcbiAgY29uc3QgaCA9IHN2ZC5WLnRvMkRBcnJheSgpLm1hcCgoaCkgPT4gaFswXSAqIHMpO1xuICByZXR1cm4gW3YsIGhdO1xufVxuIiwiaW1wb3J0IGNvbnZvbHV0aW9uIGZyb20gJy4uL29wZXJhdG9yL2NvbnZvbHV0aW9uJztcblxuLyoqXG4gKiBEaXJlY3Rpb24gb2YgYSBncmFkaWVudCBmaWx0ZXJcbiAqIEB0eXBlZGVmIHsoJ3gnfCd5J3wneHknKX0gR3JhZGllbnREaXJlY3Rpb25cbiAqL1xuXG4vKipcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0dyYWRpZW50RGlyZWN0aW9ufSBbb3B0aW9ucy5kaXJlY3Rpb25dXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbb3B0aW9ucy5rZXJuZWxYXVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gW29wdGlvbnMua2VybmVsWV1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ib3JkZXI9J2NvcHknXVxuICogQHBhcmFtIHsqfSBbb3B0aW9ucy5jaGFubmVsc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5iaXREZXB0aD10aGlzLmJpdERlcHRoXSBTcGVjaWZ5IHRoZSBiaXREZXB0aCBvZiB0aGUgcmVzdWx0aW5nIGltYWdlXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ3JhZGllbnRGaWx0ZXIob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAgZGlyZWN0aW9uID0gJ3h5JyxcbiAgICBib3JkZXIgPSAnY29weScsXG4gICAga2VybmVsWCxcbiAgICBrZXJuZWxZLFxuICAgIGNoYW5uZWxzLFxuICAgIGJpdERlcHRoID0gdGhpcy5iaXREZXB0aCxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdncmFkaWVudEZpbHRlcicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgc3dpdGNoIChkaXJlY3Rpb24pIHtcbiAgICBjYXNlICd4JzpcbiAgICAgIGlmICgha2VybmVsWCkgdGhyb3cgbmV3IEVycm9yKCdrZXJuZWxYIG9wdGlvbiBpcyBtaXNzaW5nJyk7XG4gICAgICByZXR1cm4gY29udm9sdXRpb24uY2FsbCh0aGlzLCBrZXJuZWxYLCB7XG4gICAgICAgIGNoYW5uZWxzOiBjaGFubmVscyxcbiAgICAgICAgYm9yZGVyOiBib3JkZXIsXG4gICAgICAgIGJpdERlcHRoLFxuICAgICAgfSk7XG4gICAgY2FzZSAneSc6XG4gICAgICBpZiAoIWtlcm5lbFkpIHRocm93IG5ldyBFcnJvcigna2VybmVsWSBvcHRpb24gaXMgbWlzc2luZycpO1xuICAgICAgcmV0dXJuIGNvbnZvbHV0aW9uLmNhbGwodGhpcywga2VybmVsWSwge1xuICAgICAgICBjaGFubmVsczogY2hhbm5lbHMsXG4gICAgICAgIGJvcmRlcjogYm9yZGVyLFxuICAgICAgICBiaXREZXB0aCxcbiAgICAgIH0pO1xuICAgIGNhc2UgJ3h5Jzoge1xuICAgICAgaWYgKCFrZXJuZWxYKSB0aHJvdyBuZXcgRXJyb3IoJ2tlcm5lbFggb3B0aW9uIGlzIG1pc3NpbmcnKTtcbiAgICAgIGlmICgha2VybmVsWSkgdGhyb3cgbmV3IEVycm9yKCdrZXJuZWxZIG9wdGlvbiBpcyBtaXNzaW5nJyk7XG4gICAgICBjb25zdCBnWCA9IGNvbnZvbHV0aW9uLmNhbGwodGhpcywga2VybmVsWCwge1xuICAgICAgICBjaGFubmVsczogY2hhbm5lbHMsXG4gICAgICAgIGJvcmRlcjogYm9yZGVyLFxuICAgICAgICBiaXREZXB0aDogMzIsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGdZID0gY29udm9sdXRpb24uY2FsbCh0aGlzLCBrZXJuZWxZLCB7XG4gICAgICAgIGNoYW5uZWxzOiBjaGFubmVscyxcbiAgICAgICAgYm9yZGVyOiBib3JkZXIsXG4gICAgICAgIGJpdERlcHRoOiAzMixcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuIGdYLmh5cG90ZW51c2UoZ1ksIHsgYml0RGVwdGgsIGNoYW5uZWxzOiBjaGFubmVscyB9KTtcbiAgICB9XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBwYXJhbWV0ZXIgZGlyZWN0aW9uOiAke2RpcmVjdGlvbn1gKTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgU09CRUxfWCwgU09CRUxfWSB9IGZyb20gJy4uLy4uL3V0aWwva2VybmVscyc7XG5cbmltcG9ydCBncmFkaWVudEZpbHRlciBmcm9tICcuL2dyYWRpZW50RmlsdGVyJztcblxuLyoqXG4gKiBBcHBsaWVzIHRoZSBTb2JlbCBvcGVyYXRvci5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0dyYWRpZW50RGlyZWN0aW9ufSBbb3B0aW9ucy5kaXJlY3Rpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYm9yZGVyPSdjb3B5J11cbiAqIEBwYXJhbSB7Kn0gW29wdGlvbnMuY2hhbm5lbHNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYml0RGVwdGg9dGhpcy5iaXREZXB0aF0gU3BlY2lmeSB0aGUgYml0RGVwdGggb2YgdGhlIHJlc3VsdGluZyBpbWFnZVxuICogQHJldHVybiB7SW1hZ2V9XG4gKiBAc2VlIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tb2JlbF9vcGVyYXRvcn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29iZWxGaWx0ZXIob3B0aW9ucykge1xuICByZXR1cm4gZ3JhZGllbnRGaWx0ZXIuY2FsbChcbiAgICB0aGlzLFxuICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHtcbiAgICAgIGtlcm5lbFg6IFNPQkVMX1gsXG4gICAgICBrZXJuZWxZOiBTT0JFTF9ZLFxuICAgIH0pLFxuICApO1xufVxuIiwiaW1wb3J0IHsgU0NIQVJSX1gsIFNDSEFSUl9ZIH0gZnJvbSAnLi4vLi4vdXRpbC9rZXJuZWxzJztcblxuaW1wb3J0IGdyYWRpZW50RmlsdGVyIGZyb20gJy4vZ3JhZGllbnRGaWx0ZXInO1xuXG4vKipcbiAqIEFwcGxpZXMgdGhlIFNjaGFyciBvcGVyYXRvci5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0dyYWRpZW50RGlyZWN0aW9ufSBbb3B0aW9ucy5kaXJlY3Rpb25dXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYm9yZGVyPSdjb3B5J11cbiAqIEBwYXJhbSB7Kn0gW29wdGlvbnMuY2hhbm5lbHNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYml0RGVwdGg9dGhpcy5iaXREZXB0aF0gU3BlY2lmeSB0aGUgYml0RGVwdGggb2YgdGhlIHJlc3VsdGluZyBpbWFnZVxuICogQHJldHVybiB7SW1hZ2V9XG4gKiBAc2VlIHtAbGluayBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Tb2JlbF9vcGVyYXRvciNBbHRlcm5hdGl2ZV9vcGVyYXRvcnN9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNjaGFyckZpbHRlcihvcHRpb25zKSB7XG4gIHJldHVybiBncmFkaWVudEZpbHRlci5jYWxsKFxuICAgIHRoaXMsXG4gICAgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywge1xuICAgICAga2VybmVsWDogU0NIQVJSX1gsXG4gICAgICBrZXJuZWxZOiBTQ0hBUlJfWSxcbiAgICB9KSxcbiAgKTtcbn1cbiIsImltcG9ydCBuZXdBcnJheSBmcm9tICduZXctYXJyYXknO1xuXG5pbXBvcnQgeyB2YWxpZGF0ZUFycmF5T2ZDaGFubmVscyB9IGZyb20gJy4uLy4uL3V0aWwvY2hhbm5lbCc7XG5cbi8qKlxuICogTGV2ZWwgdGhlIGltYWdlIGZvciBieSBkZWZhdWx0IGhhdmUgdGhlIG1pbmltYWwgYW5kIG1heGltYWwgdmFsdWVzLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbGdvcml0aG09J3JhbmdlJ11cbiAqIEBwYXJhbSB7U2VsZWN0ZWRDaGFubmVsc30gW29wdGlvbnMuY2hhbm5lbHNdIFNwZWNpZnkgd2hpY2ggY2hhbm5lbHMgc2hvdWxkIGJlIHByb2Nlc3NlZFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1pbj10aGlzLm1pbl0gbWluaW1hbCB2YWx1ZSBhZnRlciBsZXZlbGxpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXg9dGhpcy5tYXhdIG1heGltYWwgdmFsdWUgYWZ0ZXIgbGV2ZWxsaW5nXG4gKiBAcmV0dXJuIHt0aGlzfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsZXZlbChvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBhbGdvcml0aG0gPSAncmFuZ2UnLFxuICAgIGNoYW5uZWxzLFxuICAgIG1pbiA9IHRoaXMubWluLFxuICAgIG1heCA9IHRoaXMubWF4LFxuICB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2xldmVsJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTYsIDMyXSxcbiAgfSk7XG5cbiAgY2hhbm5lbHMgPSB2YWxpZGF0ZUFycmF5T2ZDaGFubmVscyh0aGlzLCB7IGNoYW5uZWxzOiBjaGFubmVscyB9KTtcblxuICBpZiAoY2hhbm5lbHMubGVuZ3RoICE9PSB0aGlzLmNoYW5uZWwpIHtcbiAgICAvLyBpZiB3ZSBwcm9jZXNzIG9ubHkgcGFydCBvZiB0aGUgY2hhbm5lbHMgYW5kIHRoZSBtaW4gb3IgbWF4IGxlbmd0aCBjb3JyZXNwb25kcyB0byB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzXG4gICAgLy8gd2UgbmVlZCB0byB0YWtlIHRoZSBjb3JyZXNwb25kaW5nIHZhbHVlc1xuICAgIGlmIChBcnJheS5pc0FycmF5KG1pbikgJiYgbWluLmxlbmd0aCA9PT0gdGhpcy5jaGFubmVscykge1xuICAgICAgbWluID0gbWluLmZpbHRlcigoYSwgaW5kZXgpID0+IGNoYW5uZWxzLmluY2x1ZGVzKGluZGV4KSk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG1heCkgJiYgbWF4Lmxlbmd0aCA9PT0gdGhpcy5jaGFubmVscykge1xuICAgICAgbWF4ID0gbWF4LmZpbHRlcigoYSwgaW5kZXgpID0+IGNoYW5uZWxzLmluY2x1ZGVzKGluZGV4KSk7XG4gICAgfVxuICB9XG5cbiAgc3dpdGNoIChhbGdvcml0aG0pIHtcbiAgICBjYXNlICdyYW5nZSc6XG4gICAgICBpZiAobWluIDwgMCkge1xuICAgICAgICBtaW4gPSAwO1xuICAgICAgfVxuICAgICAgaWYgKG1heCA+IHRoaXMubWF4VmFsdWUpIHtcbiAgICAgICAgbWF4ID0gdGhpcy5tYXhWYWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1pbikpIHtcbiAgICAgICAgbWluID0gbmV3QXJyYXkoY2hhbm5lbHMubGVuZ3RoLCBtaW4pO1xuICAgICAgfVxuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KG1heCkpIHtcbiAgICAgICAgbWF4ID0gbmV3QXJyYXkoY2hhbm5lbHMubGVuZ3RoLCBtYXgpO1xuICAgICAgfVxuXG4gICAgICBwcm9jZXNzSW1hZ2UodGhpcywgbWluLCBtYXgsIGNoYW5uZWxzKTtcbiAgICAgIGJyZWFrO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihgbGV2ZWw6IGFsZ29yaXRobSBub3QgaW1wbGVtZW50OiAke2FsZ29yaXRobX1gKTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzSW1hZ2UoaW1hZ2UsIG1pbiwgbWF4LCBjaGFubmVscykge1xuICBsZXQgZGVsdGEgPSAxZS01OyAvLyBzb3JyeSBubyBiZXR0ZXIgdmFsdWUgdGhhdCB0aGlzIFwiYmVzdCBndWVzc1wiXG4gIGxldCBmYWN0b3IgPSBuZXcgQXJyYXkoY2hhbm5lbHMubGVuZ3RoKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYW5uZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG1pbltpXSA9PT0gMCAmJiBtYXhbaV0gPT09IGltYWdlLm1heFZhbHVlKSB7XG4gICAgICBmYWN0b3JbaV0gPSAwO1xuICAgIH0gZWxzZSBpZiAobWF4W2ldID09PSBtaW5baV0pIHtcbiAgICAgIGZhY3RvcltpXSA9IDA7XG4gICAgfSBlbHNlIHtcbiAgICAgIGZhY3RvcltpXSA9IChpbWFnZS5tYXhWYWx1ZSArIDEgLSBkZWx0YSkgLyAobWF4W2ldIC0gbWluW2ldKTtcbiAgICB9XG4gICAgbWluW2ldICs9ICgwLjUgLSBkZWx0YSAvIDIpIC8gZmFjdG9yW2ldO1xuICB9XG5cbiAgLypcbiAgICAgTm90ZSBvbiBib3JkZXIgZWZmZWN0XG4gICAgIEZvciA4IGJpdHMgaW1hZ2VzIHdlIHNob3VsZCBjYWxjdWxhdGUgZm9yIHRoZSBzcGFjZSBiZXR3ZWVuIC0wLjUgYW5kIDI1NS41XG4gICAgIHNvIHRoYXQgYWZ0ZXIgcm9uZGluZyB0aGUgZmlyc3QgYW5kIGxhc3QgcG9pbnRzIHN0aWxsIGhhdmUgdGhlIHNhbWUgcG9wdWxhdGlvblxuICAgICBCdXQgZG9pbmcgdGhpcyB3ZSBuZWVkIHRvIGRlYWwgd2l0aCBNYXRoLnJvdW5kIHRoYXQgZ2l2ZXMgMjU2IGlmIHRoZSB2YWx1ZSBpcyAyNTUuNVxuICAgICAqL1xuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgY2hhbm5lbHMubGVuZ3RoOyBqKyspIHtcbiAgICBsZXQgYyA9IGNoYW5uZWxzW2pdO1xuICAgIGlmIChmYWN0b3Jbal0gIT09IDApIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2UuZGF0YS5sZW5ndGg7IGkgKz0gaW1hZ2UuY2hhbm5lbHMpIHtcbiAgICAgICAgaW1hZ2UuZGF0YVtpICsgY10gPSBNYXRoLm1pbihcbiAgICAgICAgICBNYXRoLm1heCgwLCAoKGltYWdlLmRhdGFbaSArIGNdIC0gbWluW2pdKSAqIGZhY3RvcltqXSArIDAuNSkgfCAwKSxcbiAgICAgICAgICBpbWFnZS5tYXhWYWx1ZSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBpc0FycmF5IGZyb20gJ2lzLWFycmF5LXR5cGUnO1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vaW1hZ2UvSW1hZ2UnO1xuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tOdW1iZXJBcnJheSh2YWx1ZSkge1xuICBpZiAoIWlzTmFOKHZhbHVlKSkge1xuICAgIGlmICh2YWx1ZSA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NoZWNrTnVtYmVyQXJyYXk6IHRoZSB2YWx1ZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwJyk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBJbWFnZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmRhdGE7XG4gICAgfVxuICAgIGlmICghaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ2NoZWNrTnVtYmVyQXJyYXk6IHRoZSB2YWx1ZSBzaG91bGQgYmUgZWl0aGVyIGEgbnVtYmVyLCBhcnJheSBvciBJbWFnZScsXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9jaGFubmVsJztcbmltcG9ydCB7IGNoZWNrTnVtYmVyQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL3ZhbHVlJztcblxuLyoqXG4gKiBBZGQgYSBzcGVjaWZpYyBpbnRlZ2VyIG9uIHRoZSBzcGVjaWZpZWQgcG9pbnRzIG9mIHRoZSBzcGVjaWZpZWQgY2hhbm5lbHNcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHt0aGlzfSBNb2RpZmllZCBjdXJyZW50IGltYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGFkZCh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGNoYW5uZWxzIH0gPSBvcHRpb25zO1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2FkZCcsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgY2hhbm5lbHMgPSB2YWxpZGF0ZUFycmF5T2ZDaGFubmVscyh0aGlzLCB7IGNoYW5uZWxzOiBjaGFubmVscyB9KTtcbiAgdmFsdWUgPSBjaGVja051bWJlckFycmF5KHZhbHVlKTtcblxuICAvLyB3ZSBhbGxvdyAzIGNhc2VzLCB0aGUgdmFsdWUgbWF5IGJlIGFuIGFycmF5ICgxRCksIGFuIGltYWdlIG9yIGEgc2luZ2xlIHZhbHVlXG4gIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGMgPSBjaGFubmVsc1tqXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICsgY10gPSBNYXRoLm1pbihcbiAgICAgICAgICB0aGlzLm1heFZhbHVlLFxuICAgICAgICAgICh0aGlzLmRhdGFbaSArIGNdICsgdmFsdWUpID4+IDAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignYWRkOiB0aGUgZGF0YSBzaXplIGlzIGRpZmZlcmVudCcpO1xuICAgIH1cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYW5uZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgYyA9IGNoYW5uZWxzW2pdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKyBjXSA9IE1hdGgubWF4KFxuICAgICAgICAgIDAsXG4gICAgICAgICAgTWF0aC5taW4odGhpcy5tYXhWYWx1ZSwgKHRoaXMuZGF0YVtpICsgY10gKyB2YWx1ZVtpICsgY10pID4+IDApLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IHsgdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMgfSBmcm9tICcuLi8uLi91dGlsL2NoYW5uZWwnO1xuaW1wb3J0IHsgY2hlY2tOdW1iZXJBcnJheSB9IGZyb20gJy4uLy4uL3V0aWwvdmFsdWUnO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHt0aGlzfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJ0cmFjdCh2YWx1ZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGNoYW5uZWxzIH0gPSBvcHRpb25zO1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3N1YnRyYWN0Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBjaGFubmVscyA9IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzKHRoaXMsIHsgY2hhbm5lbHM6IGNoYW5uZWxzIH0pO1xuICB2YWx1ZSA9IGNoZWNrTnVtYmVyQXJyYXkodmFsdWUpO1xuXG4gIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGMgPSBjaGFubmVsc1tqXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICsgY10gPSBNYXRoLm1heCgwLCAodGhpcy5kYXRhW2kgKyBjXSAtIHZhbHVlKSA+PiAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdzdWJ0cmFjdDogdGhlIGRhdGEgc2l6ZSBpcyBkaWZmZXJlbnQnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGMgPSBjaGFubmVsc1tqXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICsgY10gPSBNYXRoLm1heChcbiAgICAgICAgICAwLFxuICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4VmFsdWUsICh0aGlzLmRhdGFbaSArIGNdIC0gdmFsdWVbaSArIGNdKSA+PiAwKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9jaGFubmVsJztcblxuLyoqXG4gKiBDYWxjdWxhdGUgYSBuZXcgaW1hZ2UgdGhhdCBpcyB0aGUgc3VidHJhY3Rpb24gYmV0d2VlbiB0aGUgY3VycmVudCBpbWFnZSBhbmQgdGhlIG90aGVySW1hZ2UuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtJbWFnZX0gb3RoZXJJbWFnZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHBhcmFtIHtudW1iZXJbXXxzdHJpbmdbXX0gW29wdGlvbnMuY2hhbm5lbHNdIDogdG8gd2hpY2ggY2hhbm5lbCB0byBhcHBseSB0aGUgZmlsdGVyLiBCeSBkZWZhdWx0IGFsbCBidXQgYWxwaGEuXG4gKiBAcGFyYW0ge251bWJlcltdfHN0cmluZ1tdfSBbb3B0aW9ucy5hYnNvbHV0ZT1mYWxzZV0gOi50YWtlIHRoZSBhYnNvbHV0ZSB2YWx1ZSBvZiB0aGUgZGlmZmVyZW5jZSAoZGVmYXVsdCBtaW5pbXVtPTApXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3VidHJhY3RJbWFnZShvdGhlckltYWdlLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgY2hhbm5lbHMsIGFic29sdXRlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnc3VidHJhY3RJbWFnZScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG4gIGlmICh0aGlzLndpZHRoICE9PSBvdGhlckltYWdlLndpZHRoIHx8IHRoaXMuaGVpZ2h0ICE9PSBvdGhlckltYWdlLmhlaWdodCkge1xuICAgIHRocm93IG5ldyBFcnJvcignc3VidHJhY3RJbWFnZTogYm90aCBpbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIHNpemUnKTtcbiAgfVxuICBpZiAoXG4gICAgdGhpcy5hbHBoYSAhPT0gb3RoZXJJbWFnZS5hbHBoYSB8fFxuICAgIHRoaXMuYml0RGVwdGggIT09IG90aGVySW1hZ2UuYml0RGVwdGhcbiAgKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ3N1YnRyYWN0SW1hZ2U6IGJvdGggaW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBhbHBoYSBhbmQgYml0RGVwdGgnLFxuICAgICk7XG4gIH1cbiAgaWYgKHRoaXMuY2hhbm5lbHMgIT09IG90aGVySW1hZ2UuY2hhbm5lbHMpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnc3VidHJhY3RJbWFnZTogYm90aCBpbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBjaGFubmVscycsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBuZXdJbWFnZSA9IHRoaXMuY2xvbmUoKTtcblxuICBjaGFubmVscyA9IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzKHRoaXMsIHsgY2hhbm5lbHM6IGNoYW5uZWxzIH0pO1xuXG4gIGZvciAobGV0IGogPSAwOyBqIDwgY2hhbm5lbHMubGVuZ3RoOyBqKyspIHtcbiAgICBsZXQgYyA9IGNoYW5uZWxzW2pdO1xuICAgIGZvciAobGV0IGkgPSBjOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICBsZXQgdmFsdWUgPSB0aGlzLmRhdGFbaV0gLSBvdGhlckltYWdlLmRhdGFbaV07XG4gICAgICBpZiAoYWJzb2x1dGUpIHtcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVtpXSA9IE1hdGguYWJzKHZhbHVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5ld0ltYWdlLmRhdGFbaV0gPSBNYXRoLm1heCh2YWx1ZSwgMCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IHsgdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMgfSBmcm9tICcuLi8uLi91dGlsL2NoYW5uZWwnO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuLyoqXG4gKiBDYWxjdWxhdGUgYSBuZXcgaW1hZ2UgdGhhdCBpcyB0aGUgaHlwb3RlbnVzZSBiZXR3ZWVuIHRoZSBjdXJyZW50IGltYWdlIGFuZCB0aGUgb3RoZXJJbWFnZS5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0ltYWdlfSBvdGhlckltYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuYml0RGVwdGg9dGhpcy5iaXREZXB0aF1cbiAqIEBwYXJhbSB7bnVtYmVyW118c3RyaW5nW119IFtvcHRpb25zLmNoYW5uZWxzXSA6IHRvIHdoaWNoIGNoYW5uZWwgdG8gYXBwbHkgdGhlIGZpbHRlci4gQnkgZGVmYXVsdCBhbGwgYnV0IGFscGhhLlxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGh5cG90ZW51c2Uob3RoZXJJbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGJpdERlcHRoID0gdGhpcy5iaXREZXB0aCwgY2hhbm5lbHMgfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnaHlwb3RlbnVzZScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2LCAzMl0sXG4gIH0pO1xuICBpZiAodGhpcy53aWR0aCAhPT0gb3RoZXJJbWFnZS53aWR0aCB8fCB0aGlzLmhlaWdodCAhPT0gb3RoZXJJbWFnZS5oZWlnaHQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2h5cG90ZW51c2U6IGJvdGggaW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBzaXplJyk7XG4gIH1cbiAgaWYgKFxuICAgIHRoaXMuYWxwaGEgIT09IG90aGVySW1hZ2UuYWxwaGEgfHxcbiAgICB0aGlzLmJpdERlcHRoICE9PSBvdGhlckltYWdlLmJpdERlcHRoXG4gICkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdoeXBvdGVudXNlOiBib3RoIGltYWdlcyBtdXN0IGhhdmUgdGhlIHNhbWUgYWxwaGEgYW5kIGJpdERlcHRoJyxcbiAgICApO1xuICB9XG4gIGlmICh0aGlzLmNoYW5uZWxzICE9PSBvdGhlckltYWdlLmNoYW5uZWxzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgJ2h5cG90ZW51c2U6IGJvdGggaW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBudW1iZXIgb2YgY2hhbm5lbHMnLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHsgYml0RGVwdGg6IGJpdERlcHRoIH0pO1xuXG4gIGNoYW5uZWxzID0gdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHModGhpcywgeyBjaGFubmVsczogY2hhbm5lbHMgfSk7XG5cbiAgbGV0IGNsYW1wZWQgPSBuZXdJbWFnZS5pc0NsYW1wZWQ7XG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgIGxldCBjID0gY2hhbm5lbHNbal07XG4gICAgZm9yIChsZXQgaSA9IGM7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIGxldCB2YWx1ZSA9IE1hdGguaHlwb3QodGhpcy5kYXRhW2ldLCBvdGhlckltYWdlLmRhdGFbaV0pO1xuICAgICAgaWYgKGNsYW1wZWQpIHtcbiAgICAgICAgLy8gd2UgY2FsY3VsYXRlIHRoZSBjbGFtcGVkIHJlc3VsdFxuICAgICAgICBuZXdJbWFnZS5kYXRhW2ldID0gTWF0aC5taW4oXG4gICAgICAgICAgTWF0aC5tYXgoTWF0aC5yb3VuZCh2YWx1ZSksIDApLFxuICAgICAgICAgIG5ld0ltYWdlLm1heFZhbHVlLFxuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVtpXSA9IHZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdJbWFnZTtcbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9jaGFubmVsJztcbmltcG9ydCB7IGNoZWNrTnVtYmVyQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL3ZhbHVlJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7dGhpc31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbXVsdGlwbHkodmFsdWUsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBjaGFubmVscyB9ID0gb3B0aW9ucztcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdtdWx0aXBseScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG4gIGlmICh2YWx1ZSA8PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBseTogdGhlIHZhbHVlIG11c3QgYmUgZ3JlYXRlciB0aGFuIDAnKTtcbiAgfVxuXG4gIGNoYW5uZWxzID0gdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHModGhpcywgeyBjaGFubmVsczogY2hhbm5lbHMgfSk7XG4gIHZhbHVlID0gY2hlY2tOdW1iZXJBcnJheSh2YWx1ZSk7XG5cbiAgaWYgKCFpc05hTih2YWx1ZSkpIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IGNoYW5uZWxzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgYyA9IGNoYW5uZWxzW2pdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgICAgdGhpcy5kYXRhW2kgKyBjXSA9IE1hdGgubWluKFxuICAgICAgICAgIHRoaXMubWF4VmFsdWUsXG4gICAgICAgICAgKHRoaXMuZGF0YVtpICsgY10gKiB2YWx1ZSkgPj4gMCxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuZGF0YS5sZW5ndGggIT09IHZhbHVlLmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdtdWx0aXBseTogdGhlIGRhdGEgc2l6ZSBpcyBkaWZmZXJlbnQnKTtcbiAgICB9XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGMgPSBjaGFubmVsc1tqXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICsgY10gPSBNYXRoLm1heChcbiAgICAgICAgICAwLFxuICAgICAgICAgIE1hdGgubWluKHRoaXMubWF4VmFsdWUsICh0aGlzLmRhdGFbaSArIGNdICogdmFsdWVbaSArIGNdKSA+PiAwKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzIH0gZnJvbSAnLi4vLi4vdXRpbC9jaGFubmVsJztcbmltcG9ydCB7IGNoZWNrTnVtYmVyQXJyYXkgfSBmcm9tICcuLi8uLi91dGlsL3ZhbHVlJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7dGhpc31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGl2aWRlKHZhbHVlLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgY2hhbm5lbHMgfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZGl2aWRlJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBjaGFubmVscyA9IHZhbGlkYXRlQXJyYXlPZkNoYW5uZWxzKHRoaXMsIHsgY2hhbm5lbHM6IGNoYW5uZWxzIH0pO1xuICB2YWx1ZSA9IGNoZWNrTnVtYmVyQXJyYXkodmFsdWUpO1xuXG4gIGlmICghaXNOYU4odmFsdWUpKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBjaGFubmVscy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IGMgPSBjaGFubmVsc1tqXTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpICsgY10gPSBNYXRoLm1pbihcbiAgICAgICAgICB0aGlzLm1heFZhbHVlLFxuICAgICAgICAgICh0aGlzLmRhdGFbaSArIGNdIC8gdmFsdWUpID4+IDAsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLmRhdGEubGVuZ3RoICE9PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignZGl2aWRlOiB0aGU6IHRoZSBkYXRhIHNpemUgaXMgZGlmZmVyZW50Jyk7XG4gICAgfVxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgY2hhbm5lbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBjID0gY2hhbm5lbHNbal07XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgICAgICB0aGlzLmRhdGFbaSArIGNdID0gTWF0aC5tYXgoXG4gICAgICAgICAgMCxcbiAgICAgICAgICBNYXRoLm1pbih0aGlzLm1heFZhbHVlLCAodGhpcy5kYXRhW2kgKyBjXSAvIHZhbHVlW2kgKyBjXSkgPj4gMCksXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgaXNBbnlBcnJheSBmcm9tICdpcy1hbnktYXJyYXknO1xuXG5leHBvcnQgeyBkZWZhdWx0IGFzIG1heWJlVG9QcmVjaXNpb24gfSBmcm9tICcuL21heWJlVG9QcmVjaXNpb24nO1xuZXhwb3J0IHsgZGVmYXVsdCBhcyBjaGVja0FycmF5TGVuZ3RoIH0gZnJvbSAnLi9jaGVja0FycmF5TGVuZ3RoJztcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEJhc2VSZWdyZXNzaW9uIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgaWYgKG5ldy50YXJnZXQgPT09IEJhc2VSZWdyZXNzaW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0Jhc2VSZWdyZXNzaW9uIG11c3QgYmUgc3ViY2xhc3NlZCcpO1xuICAgIH1cbiAgfVxuXG4gIHByZWRpY3QoeCkge1xuICAgIGlmICh0eXBlb2YgeCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldHVybiB0aGlzLl9wcmVkaWN0KHgpO1xuICAgIH0gZWxzZSBpZiAoaXNBbnlBcnJheSh4KSkge1xuICAgICAgY29uc3QgeSA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB4Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHkucHVzaCh0aGlzLl9wcmVkaWN0KHhbaV0pKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB5O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCd4IG11c3QgYmUgYSBudW1iZXIgb3IgYXJyYXknKTtcbiAgICB9XG4gIH1cblxuICBfcHJlZGljdCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ19wcmVkaWN0IG11c3QgYmUgaW1wbGVtZW50ZWQnKTtcbiAgfVxuXG4gIHRyYWluKCkge1xuICAgIC8vIERvIG5vdGhpbmcgZm9yIHRoaXMgcGFja2FnZVxuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuICcnO1xuICB9XG5cbiAgdG9MYVRlWCgpIHtcbiAgICByZXR1cm4gJyc7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBjb3JyZWxhdGlvbiBjb2VmZmljaWVudCBvZiBkZXRlcm1pbmF0aW9uIChyKSBhbmQgY2hpLXNxdWFyZS5cbiAgICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSB4XG4gICAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0geVxuICAgKiBAcmV0dXJuIHtvYmplY3R9XG4gICAqL1xuICBzY29yZSh4LCB5KSB7XG4gICAgaWYgKCFpc0FueUFycmF5KHgpIHx8ICFpc0FueUFycmF5KHkpIHx8IHgubGVuZ3RoICE9PSB5Lmxlbmd0aCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCd4IGFuZCB5IG11c3QgYmUgYXJyYXlzIG9mIHRoZSBzYW1lIGxlbmd0aCcpO1xuICAgIH1cblxuICAgIGNvbnN0IG4gPSB4Lmxlbmd0aDtcbiAgICBjb25zdCB5MiA9IG5ldyBBcnJheShuKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgeTJbaV0gPSB0aGlzLl9wcmVkaWN0KHhbaV0pO1xuICAgIH1cblxuICAgIGxldCB4U3VtID0gMDtcbiAgICBsZXQgeVN1bSA9IDA7XG4gICAgbGV0IGNoaTIgPSAwO1xuICAgIGxldCBybXNkID0gMDtcbiAgICBsZXQgeFNxdWFyZWQgPSAwO1xuICAgIGxldCB5U3F1YXJlZCA9IDA7XG4gICAgbGV0IHhZID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG47IGkrKykge1xuICAgICAgeFN1bSArPSB5MltpXTtcbiAgICAgIHlTdW0gKz0geVtpXTtcbiAgICAgIHhTcXVhcmVkICs9IHkyW2ldICogeTJbaV07XG4gICAgICB5U3F1YXJlZCArPSB5W2ldICogeVtpXTtcbiAgICAgIHhZICs9IHkyW2ldICogeVtpXTtcbiAgICAgIGlmICh5W2ldICE9PSAwKSB7XG4gICAgICAgIGNoaTIgKz0gKCh5W2ldIC0geTJbaV0pICogKHlbaV0gLSB5MltpXSkpIC8geVtpXTtcbiAgICAgIH1cbiAgICAgIHJtc2QgKz0gKHlbaV0gLSB5MltpXSkgKiAoeVtpXSAtIHkyW2ldKTtcbiAgICB9XG5cbiAgICBjb25zdCByID1cbiAgICAgIChuICogeFkgLSB4U3VtICogeVN1bSkgL1xuICAgICAgTWF0aC5zcXJ0KChuICogeFNxdWFyZWQgLSB4U3VtICogeFN1bSkgKiAobiAqIHlTcXVhcmVkIC0geVN1bSAqIHlTdW0pKTtcblxuICAgIHJldHVybiB7XG4gICAgICByOiByLFxuICAgICAgcjI6IHIgKiByLFxuICAgICAgY2hpMjogY2hpMixcbiAgICAgIHJtc2Q6IE1hdGguc3FydChybXNkIC8gbiksXG4gICAgfTtcbiAgfVxufVxuIiwiaW1wb3J0IHsgTWF0cml4LCBzb2x2ZSB9IGZyb20gJ21sLW1hdHJpeCc7XG5pbXBvcnQgS2VybmVsIGZyb20gJ21sLWtlcm5lbCc7XG5pbXBvcnQgQmFzZVJlZ3Jlc3Npb24gZnJvbSAnbWwtcmVncmVzc2lvbi1iYXNlJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIGxhbWJkYTogMC4xLFxuICBrZXJuZWxUeXBlOiAnZ2F1c3NpYW4nLFxuICBrZXJuZWxPcHRpb25zOiB7fSxcbiAgY29tcHV0ZUNvZWZmaWNpZW50OiBmYWxzZVxufTtcblxuLy8gSW1wbGVtZW50cyB0aGUgS2VybmVsIHJpZGdlIHJlZ3Jlc3Npb24gYWxnb3JpdGhtLlxuLy8gaHR0cDovL3d3dy5pY3MudWNpLmVkdS9+d2VsbGluZy9jbGFzc25vdGVzL3BhcGVyc19jbGFzcy9LZXJuZWwtUmlkZ2UucGRmXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBLZXJuZWxSaWRnZVJlZ3Jlc3Npb24gZXh0ZW5kcyBCYXNlUmVncmVzc2lvbiB7XG4gIGNvbnN0cnVjdG9yKGlucHV0cywgb3V0cHV0cywgb3B0aW9ucykge1xuICAgIHN1cGVyKCk7XG4gICAgaWYgKGlucHV0cyA9PT0gdHJ1ZSkge1xuICAgICAgLy8gcmVsb2FkaW5nIG1vZGVsXG4gICAgICB0aGlzLmFscGhhID0gb3V0cHV0cy5hbHBoYTtcbiAgICAgIHRoaXMuaW5wdXRzID0gb3V0cHV0cy5pbnB1dHM7XG4gICAgICB0aGlzLmtlcm5lbFR5cGUgPSBvdXRwdXRzLmtlcm5lbFR5cGU7XG4gICAgICB0aGlzLmtlcm5lbE9wdGlvbnMgPSBvdXRwdXRzLmtlcm5lbE9wdGlvbnM7XG4gICAgICB0aGlzLmtlcm5lbCA9IG5ldyBLZXJuZWwob3V0cHV0cy5rZXJuZWxUeXBlLCBvdXRwdXRzLmtlcm5lbE9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICBpbnB1dHMgPSBNYXRyaXguY2hlY2tNYXRyaXgoaW5wdXRzKTtcbiAgICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICAgIGNvbnN0IGtlcm5lbEZ1bmN0aW9uID0gbmV3IEtlcm5lbChcbiAgICAgICAgb3B0aW9ucy5rZXJuZWxUeXBlLFxuICAgICAgICBvcHRpb25zLmtlcm5lbE9wdGlvbnNcbiAgICAgICk7XG4gICAgICBjb25zdCBLID0ga2VybmVsRnVuY3Rpb24uY29tcHV0ZShpbnB1dHMpO1xuICAgICAgY29uc3QgbiA9IGlucHV0cy5yb3dzO1xuICAgICAgSy5hZGQoTWF0cml4LmV5ZShuLCBuKS5tdWwob3B0aW9ucy5sYW1iZGEpKTtcblxuICAgICAgdGhpcy5hbHBoYSA9IHNvbHZlKEssIG91dHB1dHMpO1xuICAgICAgdGhpcy5pbnB1dHMgPSBpbnB1dHM7XG4gICAgICB0aGlzLmtlcm5lbFR5cGUgPSBvcHRpb25zLmtlcm5lbFR5cGU7XG4gICAgICB0aGlzLmtlcm5lbE9wdGlvbnMgPSBvcHRpb25zLmtlcm5lbE9wdGlvbnM7XG4gICAgICB0aGlzLmtlcm5lbCA9IGtlcm5lbEZ1bmN0aW9uO1xuICAgIH1cbiAgfVxuXG4gIF9wcmVkaWN0KG5ld0lucHV0cykge1xuICAgIHJldHVybiB0aGlzLmtlcm5lbFxuICAgICAgLmNvbXB1dGUoW25ld0lucHV0c10sIHRoaXMuaW5wdXRzKVxuICAgICAgLm1tdWwodGhpcy5hbHBoYSlcbiAgICAgIC5nZXRSb3coMCk7XG4gIH1cblxuICB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6ICdrZXJuZWxSaWRnZVJlZ3Jlc3Npb24nLFxuICAgICAgYWxwaGE6IHRoaXMuYWxwaGEsXG4gICAgICBpbnB1dHM6IHRoaXMuaW5wdXRzLFxuICAgICAga2VybmVsVHlwZTogdGhpcy5rZXJuZWxUeXBlLFxuICAgICAga2VybmVsT3B0aW9uczogdGhpcy5rZXJuZWxPcHRpb25zXG4gICAgfTtcbiAgfVxuXG4gIHN0YXRpYyBsb2FkKGpzb24pIHtcbiAgICBpZiAoanNvbi5uYW1lICE9PSAna2VybmVsUmlkZ2VSZWdyZXNzaW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignbm90IGEgS1JSIG1vZGVsJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgS2VybmVsUmlkZ2VSZWdyZXNzaW9uKHRydWUsIGpzb24pO1xuICB9XG59XG4iLCJpbXBvcnQgeyBLZXJuZWxSaWRnZVJlZ3Jlc3Npb24gfSBmcm9tICdtbC1yZWdyZXNzaW9uJztcblxuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gY29vcmRpbmF0ZXNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHZhbHVlcztcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBiYWNrZ3JvdW5kKGNvb3JkaW5hdGVzLCB2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgY29uc3QgbW9kZWwgPSBuZXcgS2VybmVsUmlkZ2VSZWdyZXNzaW9uKGNvb3JkaW5hdGVzLCB2YWx1ZXMsIG9wdGlvbnMpO1xuICBjb25zdCBhbGxDb29yZGluYXRlcyA9IG5ldyBBcnJheSh0aGlzLnNpemUpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud2lkdGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5oZWlnaHQ7IGorKykge1xuICAgICAgYWxsQ29vcmRpbmF0ZXNbaiAqIHRoaXMud2lkdGggKyBpXSA9IFtpLCBqXTtcbiAgICB9XG4gIH1cbiAgY29uc3QgcmVzdWx0ID0gbW9kZWwucHJlZGljdChhbGxDb29yZGluYXRlcyk7XG4gIGNvbnN0IGJhY2tncm91bmQgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuc2l6ZTsgaSsrKSB7XG4gICAgYmFja2dyb3VuZC5kYXRhW2ldID0gTWF0aC5taW4odGhpcy5tYXhWYWx1ZSwgTWF0aC5tYXgoMCwgcmVzdWx0W2ldWzBdKSk7XG4gIH1cbiAgcmV0dXJuIGJhY2tncm91bmQ7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG4vKipcbiAqIERpbGF0YXRpb24gaXMgb25lIG9mIHR3byBmdW5kYW1lbnRhbCBvcGVyYXRpb25zICh3aXRoIGVyb3Npb24pIGluIG1vcnBob2xvZ2ljYWxcbiAqIGltYWdlIHByb2Nlc3NpbmcgZnJvbSB3aGljaCBhbGwgb3RoZXIgbW9ycGhvbG9naWNhbCBvcGVyYXRpb25zIGFyZSBiYXNlZCAoZnJvbSBXaWtpcGVkaWEpLlxuICogUmVwbGFjZXMgZWFjaCB2YWx1ZSB3aXRoIGl0J3MgbG9jYWwgbWF4aW11bSBhbW9uZyB0aGUgcGl4ZWxzIHdpdGggYSBrZXJuZWwgdmFsdWUgb2YgMS5cbiAqIGh0dHA6Ly9kb2NzLm9wZW5jdi5vcmcvMi40L2RvYy90dXRvcmlhbHMvaW1ncHJvYy9lcm9zaW9uX2RpbGF0YXRpb24vZXJvc2lvbl9kaWxhdGF0aW9uLmh0bWxcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RpbGF0aW9uXyhtb3JwaG9sb2d5KVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFtvcHRpb25zLmtlcm5lbF0gLSBUaGUga2VybmVsIGNhbiBvbmx5IGhhdmUgb25lcyBhbmQgemVyb3MuIERlZmF1bHQ6IFtbMSwgMSwgMV0sIFsxLCAxLCAxXSwgWzEsIDEsIDFdXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLml0ZXJhdGlvbnM9MV0gLSBUaGUgbnVtYmVyIG9mIHN1Y2Nlc3NpdmUgZXJvc2lvbnNcbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkaWxhdGUob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAga2VybmVsID0gW1xuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgIF0sXG4gICAgaXRlcmF0aW9ucyA9IDEsXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZGlsYXRlJywge1xuICAgIGJpdERlcHRoOiBbMSwgOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gICAgYWxwaGE6IDAsXG4gIH0pO1xuICBpZiAoa2VybmVsLmNvbHVtbnMgJSAyID09PSAwIHx8IGtlcm5lbC5yb3dzICUgMiA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnZGlsYXRlOiBUaGUgbnVtYmVyIG9mIHJvd3MgYW5kIGNvbHVtbnMgb2YgdGhlIGtlcm5lbCBtdXN0IGJlIG9kZCcsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBvbmx5T25lcyA9IHRydWU7XG4gIG91dGVyOiBmb3IgKGNvbnN0IHJvdyBvZiBrZXJuZWwpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHJvdykge1xuICAgICAgaWYgKHZhbHVlICE9PSAxKSB7XG4gICAgICAgIG9ubHlPbmVzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGlmICh0aGlzLmJpdERlcHRoID09PSAxKSB7XG4gICAgICBpZiAob25seU9uZXMpIHtcbiAgICAgICAgY29uc3QgbmV3SW1hZ2UgPSByZXN1bHQuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0ID0gZGlsYXRlT25jZUJpbmFyeU9ubHlPbmVzKFxuICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICBuZXdJbWFnZSxcbiAgICAgICAgICBrZXJuZWwubGVuZ3RoLFxuICAgICAgICAgIGtlcm5lbFswXS5sZW5ndGgsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zdCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20ocmVzdWx0KTtcbiAgICAgICAgcmVzdWx0ID0gZGlsYXRlT25jZUJpbmFyeShyZXN1bHQsIG5ld0ltYWdlLCBrZXJuZWwpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAob25seU9uZXMpIHtcbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbShyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gZGlsYXRlT25jZUdyZXlPbmx5T25lcyhcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBuZXdJbWFnZSxcbiAgICAgICAga2VybmVsLmxlbmd0aCxcbiAgICAgICAga2VybmVsWzBdLmxlbmd0aCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbShyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gZGlsYXRlT25jZUdyZXkocmVzdWx0LCBuZXdJbWFnZSwga2VybmVsKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gZGlsYXRlT25jZUdyZXkoaW1nLCBuZXdJbWFnZSwga2VybmVsKSB7XG4gIGNvbnN0IGtlcm5lbFdpZHRoID0ga2VybmVsLmxlbmd0aDtcbiAgY29uc3Qga2VybmVsSGVpZ2h0ID0ga2VybmVsWzBdLmxlbmd0aDtcbiAgbGV0IHJhZGl1c1ggPSAoa2VybmVsV2lkdGggLSAxKSAvIDI7XG4gIGxldCByYWRpdXNZID0gKGtlcm5lbEhlaWdodCAtIDEpIC8gMjtcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBpbWcuaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgbWF4ID0gMDtcbiAgICAgIGZvciAobGV0IGpqID0gMDsgamogPCBrZXJuZWxIZWlnaHQ7IGpqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGtlcm5lbFdpZHRoOyBpaSsrKSB7XG4gICAgICAgICAgaWYgKGtlcm5lbFtpaV1bampdICE9PSAxKSBjb250aW51ZTtcbiAgICAgICAgICBsZXQgaSA9IGlpIC0gcmFkaXVzWCArIHg7XG4gICAgICAgICAgbGV0IGogPSBqaiAtIHJhZGl1c1kgKyB5O1xuICAgICAgICAgIGlmIChpIDwgMCB8fCBqIDwgMCB8fCBpID49IGltZy53aWR0aCB8fCBqID49IGltZy5oZWlnaHQpIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW1nLmdldFZhbHVlWFkoaSwgaiwgMCk7XG4gICAgICAgICAgaWYgKHZhbHVlID4gbWF4KSBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWSh4LCB5LCAwLCBtYXgpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG5cbmZ1bmN0aW9uIGRpbGF0ZU9uY2VHcmV5T25seU9uZXMoaW1nLCBuZXdJbWFnZSwga2VybmVsV2lkdGgsIGtlcm5lbEhlaWdodCkge1xuICBjb25zdCByYWRpdXNYID0gKGtlcm5lbFdpZHRoIC0gMSkgLyAyO1xuICBjb25zdCByYWRpdXNZID0gKGtlcm5lbEhlaWdodCAtIDEpIC8gMjtcblxuICBjb25zdCBtYXhMaXN0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgaW1nLndpZHRoOyB4KyspIHtcbiAgICBtYXhMaXN0LnB1c2goMCk7XG4gIH1cblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGltZy5oZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgaW1nLndpZHRoOyB4KyspIHtcbiAgICAgIGxldCBtYXggPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGggPSBNYXRoLm1heCgwLCB5IC0gcmFkaXVzWSk7XG4gICAgICAgIGggPCBNYXRoLm1pbihpbWcuaGVpZ2h0LCB5ICsgcmFkaXVzWSArIDEpO1xuICAgICAgICBoKytcbiAgICAgICkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGltZy5nZXRWYWx1ZVhZKHgsIGgsIDApO1xuICAgICAgICBpZiAodmFsdWUgPiBtYXgpIHtcbiAgICAgICAgICBtYXggPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbWF4TGlzdFt4XSA9IG1heDtcbiAgICB9XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgbWF4ID0gMDtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gTWF0aC5tYXgoMCwgeCAtIHJhZGl1c1gpO1xuICAgICAgICBpIDwgTWF0aC5taW4oaW1nLndpZHRoLCB4ICsgcmFkaXVzWCArIDEpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBpZiAobWF4TGlzdFtpXSA+IG1heCkge1xuICAgICAgICAgIG1heCA9IG1heExpc3RbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld0ltYWdlLnNldFZhbHVlWFkoeCwgeSwgMCwgbWF4KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuXG5mdW5jdGlvbiBkaWxhdGVPbmNlQmluYXJ5KGltZywgbmV3SW1hZ2UsIGtlcm5lbCkge1xuICBjb25zdCBrZXJuZWxXaWR0aCA9IGtlcm5lbC5sZW5ndGg7XG4gIGNvbnN0IGtlcm5lbEhlaWdodCA9IGtlcm5lbFswXS5sZW5ndGg7XG4gIGxldCByYWRpdXNYID0gKGtlcm5lbFdpZHRoIC0gMSkgLyAyO1xuICBsZXQgcmFkaXVzWSA9IChrZXJuZWxIZWlnaHQgLSAxKSAvIDI7XG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaW1nLmhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgICAgbGV0IG1heCA9IDA7XG4gICAgICBpbnRMb29wOiBmb3IgKGxldCBqaiA9IDA7IGpqIDwga2VybmVsSGVpZ2h0OyBqaisrKSB7XG4gICAgICAgIGZvciAobGV0IGlpID0gMDsgaWkgPCBrZXJuZWxXaWR0aDsgaWkrKykge1xuICAgICAgICAgIGlmIChrZXJuZWxbaWldW2pqXSAhPT0gMSkgY29udGludWU7XG4gICAgICAgICAgbGV0IGkgPSBpaSAtIHJhZGl1c1ggKyB4O1xuICAgICAgICAgIGxldCBqID0gamogLSByYWRpdXNZICsgeTtcbiAgICAgICAgICBpZiAoaiA8IDAgfHwgaSA8IDAgfHwgaSA+PSBpbWcud2lkdGggfHwgaiA+PSBpbWcuaGVpZ2h0KSBjb250aW51ZTtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGltZy5nZXRCaXRYWShpLCBqKTtcbiAgICAgICAgICBpZiAodmFsdWUgPT09IDEpIHtcbiAgICAgICAgICAgIG1heCA9IDE7XG4gICAgICAgICAgICBicmVhayBpbnRMb29wO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1heCA9PT0gMSkge1xuICAgICAgICBuZXdJbWFnZS5zZXRCaXRYWSh4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuXG5mdW5jdGlvbiBkaWxhdGVPbmNlQmluYXJ5T25seU9uZXMoaW1nLCBuZXdJbWFnZSwga2VybmVsV2lkdGgsIGtlcm5lbEhlaWdodCkge1xuICBjb25zdCByYWRpdXNYID0gKGtlcm5lbFdpZHRoIC0gMSkgLyAyO1xuICBjb25zdCByYWRpdXNZID0gKGtlcm5lbEhlaWdodCAtIDEpIC8gMjtcblxuICBjb25zdCBtYXhMaXN0ID0gW107XG4gIGZvciAobGV0IHggPSAwOyB4IDwgaW1nLndpZHRoOyB4KyspIHtcbiAgICBtYXhMaXN0LnB1c2goMSk7XG4gIH1cblxuICBmb3IgKGxldCB5ID0gMDsgeSA8IGltZy5oZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgaW1nLndpZHRoOyB4KyspIHtcbiAgICAgIG1heExpc3RbeF0gPSAwO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGggPSBNYXRoLm1heCgwLCB5IC0gcmFkaXVzWSk7XG4gICAgICAgIGggPCBNYXRoLm1pbihpbWcuaGVpZ2h0LCB5ICsgcmFkaXVzWSArIDEpO1xuICAgICAgICBoKytcbiAgICAgICkge1xuICAgICAgICBpZiAoaW1nLmdldEJpdFhZKHgsIGgpID09PSAxKSB7XG4gICAgICAgICAgbWF4TGlzdFt4XSA9IDE7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgICBpZiAobmV3SW1hZ2UuZ2V0Qml0WFkoeCwgeSkgPT09IDEpIGNvbnRpbnVlO1xuICAgICAgZm9yIChcbiAgICAgICAgbGV0IGkgPSBNYXRoLm1heCgwLCB4IC0gcmFkaXVzWCk7XG4gICAgICAgIGkgPCBNYXRoLm1pbihpbWcud2lkdGgsIHggKyByYWRpdXNYICsgMSk7XG4gICAgICAgIGkrK1xuICAgICAgKSB7XG4gICAgICAgIGlmIChtYXhMaXN0W2ldID09PSAxKSB7XG4gICAgICAgICAgbmV3SW1hZ2Uuc2V0Qml0WFkoeCwgeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuLyoqXG4gKiBFcm9zaW9uIGlzIG9uZSBvZiB0d28gZnVuZGFtZW50YWwgb3BlcmF0aW9ucyAod2l0aCBkaWxhdGF0aW9uKSBpbiBtb3JwaG9sb2dpY2FsXG4gKiBpbWFnZSBwcm9jZXNzaW5nIGZyb20gd2hpY2ggYWxsIG90aGVyIG1vcnBob2xvZ2ljYWwgb3BlcmF0aW9ucyBhcmUgYmFzZWQgKGZyb20gV2lraXBlZGlhKS5cbiAqIFJlcGxhY2VzIGVhY2ggdmFsdWUgd2l0aCBpdCdzIGxvY2FsIG1pbmltdW0gYW1vbmcgdGhlIHBpeGVscyB3aXRoIGEga2VybmVsIHZhbHVlIG9mIDEuXG4gKiBodHRwOi8vZG9jcy5vcGVuY3Yub3JnLzIuNC9kb2MvdHV0b3JpYWxzL2ltZ3Byb2MvZXJvc2lvbl9kaWxhdGF0aW9uL2Vyb3Npb25fZGlsYXRhdGlvbi5odG1sXG4gKiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Fcm9zaW9uXyhtb3JwaG9sb2d5KVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFtvcHRpb25zLmtlcm5lbF0gLSBUaGUga2VybmVsIGNhbiBvbmx5IGhhdmUgb25lcyBhbmQgemVyb3MuIERlZmF1bHQ6IFtbMSwgMSwgMV0sIFsxLCAxLCAxXSwgWzEsIDEsIDFdXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLml0ZXJhdGlvbnM9MV0gLSBUaGUgbnVtYmVyIG9mIHN1Y2Nlc3NpdmUgZXJvc2lvbnNcbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBlcm9kZShvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBrZXJuZWwgPSBbXG4gICAgICBbMSwgMSwgMV0sXG4gICAgICBbMSwgMSwgMV0sXG4gICAgICBbMSwgMSwgMV0sXG4gICAgXSxcbiAgICBpdGVyYXRpb25zID0gMSxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdlcm9kZScsIHtcbiAgICBiaXREZXB0aDogWzEsIDgsIDE2XSxcbiAgICBjb21wb25lbnRzOiAxLFxuICAgIGFscGhhOiAwLFxuICB9KTtcbiAgaWYgKGtlcm5lbC5jb2x1bW5zICUgMiA9PT0gMCB8fCBrZXJuZWwucm93cyAlIDIgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ2Vyb2RlOiBUaGUgbnVtYmVyIG9mIHJvd3MgYW5kIGNvbHVtbnMgb2YgdGhlIGtlcm5lbCBtdXN0IGJlIG9kZCcsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBvbmx5T25lcyA9IHRydWU7XG4gIG91dGVyOiBmb3IgKGNvbnN0IHJvdyBvZiBrZXJuZWwpIHtcbiAgICBmb3IgKGNvbnN0IHZhbHVlIG9mIHJvdykge1xuICAgICAgaWYgKHZhbHVlICE9PSAxKSB7XG4gICAgICAgIG9ubHlPbmVzID0gZmFsc2U7XG4gICAgICAgIGJyZWFrIG91dGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCByZXN1bHQgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGlmICh0aGlzLmJpdERlcHRoID09PSAxKSB7XG4gICAgICBpZiAob25seU9uZXMpIHtcbiAgICAgICAgY29uc3QgbmV3SW1hZ2UgPSByZXN1bHQuY2xvbmUoKTtcbiAgICAgICAgcmVzdWx0ID0gZXJvZGVPbmNlQmluYXJ5T25seU9uZXMoXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIG5ld0ltYWdlLFxuICAgICAgICAgIGtlcm5lbC5sZW5ndGgsXG4gICAgICAgICAga2VybmVsWzBdLmxlbmd0aCxcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbShyZXN1bHQpO1xuICAgICAgICByZXN1bHQgPSBlcm9kZU9uY2VCaW5hcnkocmVzdWx0LCBuZXdJbWFnZSwga2VybmVsKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKG9ubHlPbmVzKSB7XG4gICAgICBjb25zdCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20ocmVzdWx0KTtcbiAgICAgIHJlc3VsdCA9IGVyb2RlT25jZUdyZXlPbmx5T25lcyhcbiAgICAgICAgcmVzdWx0LFxuICAgICAgICBuZXdJbWFnZSxcbiAgICAgICAga2VybmVsLmxlbmd0aCxcbiAgICAgICAga2VybmVsWzBdLmxlbmd0aCxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbShyZXN1bHQpO1xuICAgICAgcmVzdWx0ID0gZXJvZGVPbmNlR3JleShyZXN1bHQsIG5ld0ltYWdlLCBrZXJuZWwpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBlcm9kZU9uY2VHcmV5KGltZywgbmV3SW1hZ2UsIGtlcm5lbCkge1xuICBjb25zdCBrZXJuZWxXaWR0aCA9IGtlcm5lbC5sZW5ndGg7XG4gIGNvbnN0IGtlcm5lbEhlaWdodCA9IGtlcm5lbFswXS5sZW5ndGg7XG4gIGxldCByYWRpdXNYID0gKGtlcm5lbFdpZHRoIC0gMSkgLyAyO1xuICBsZXQgcmFkaXVzWSA9IChrZXJuZWxIZWlnaHQgLSAxKSAvIDI7XG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaW1nLmhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgICAgbGV0IG1pbiA9IGltZy5tYXhWYWx1ZTtcbiAgICAgIGZvciAobGV0IGpqID0gMDsgamogPCBrZXJuZWxIZWlnaHQ7IGpqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGtlcm5lbFdpZHRoOyBpaSsrKSB7XG4gICAgICAgICAgaWYgKGtlcm5lbFtpaV1bampdICE9PSAxKSBjb250aW51ZTtcbiAgICAgICAgICBsZXQgaSA9IGlpIC0gcmFkaXVzWCArIHg7XG4gICAgICAgICAgbGV0IGogPSBqaiAtIHJhZGl1c1kgKyB5O1xuICAgICAgICAgIGlmIChpIDwgMCB8fCBqIDwgMCB8fCBpID49IGltZy53aWR0aCB8fCBqID49IGltZy5oZWlnaHQpIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW1nLmdldFZhbHVlWFkoaSwgaiwgMCk7XG4gICAgICAgICAgaWYgKHZhbHVlIDwgbWluKSBtaW4gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWSh4LCB5LCAwLCBtaW4pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG5cbmZ1bmN0aW9uIGVyb2RlT25jZUdyZXlPbmx5T25lcyhpbWcsIG5ld0ltYWdlLCBrZXJuZWxXaWR0aCwga2VybmVsSGVpZ2h0KSB7XG4gIGNvbnN0IHJhZGl1c1ggPSAoa2VybmVsV2lkdGggLSAxKSAvIDI7XG4gIGNvbnN0IHJhZGl1c1kgPSAoa2VybmVsSGVpZ2h0IC0gMSkgLyAyO1xuXG4gIGNvbnN0IG1pbkxpc3QgPSBbXTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgIG1pbkxpc3QucHVzaCgwKTtcbiAgfVxuXG4gIGZvciAobGV0IHkgPSAwOyB5IDwgaW1nLmhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgICAgbGV0IG1pbiA9IGltZy5tYXhWYWx1ZTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBoID0gTWF0aC5tYXgoMCwgeSAtIHJhZGl1c1kpO1xuICAgICAgICBoIDwgTWF0aC5taW4oaW1nLmhlaWdodCwgeSArIHJhZGl1c1kgKyAxKTtcbiAgICAgICAgaCsrXG4gICAgICApIHtcbiAgICAgICAgY29uc3QgdmFsdWUgPSBpbWcuZ2V0VmFsdWVYWSh4LCBoLCAwKTtcbiAgICAgICAgaWYgKHZhbHVlIDwgbWluKSB7XG4gICAgICAgICAgbWluID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG1pbkxpc3RbeF0gPSBtaW47XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgICAgbGV0IG1pbiA9IGltZy5tYXhWYWx1ZTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gTWF0aC5tYXgoMCwgeCAtIHJhZGl1c1gpO1xuICAgICAgICBpIDwgTWF0aC5taW4oaW1nLndpZHRoLCB4ICsgcmFkaXVzWCArIDEpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBpZiAobWluTGlzdFtpXSA8IG1pbikge1xuICAgICAgICAgIG1pbiA9IG1pbkxpc3RbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIG5ld0ltYWdlLnNldFZhbHVlWFkoeCwgeSwgMCwgbWluKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuXG5mdW5jdGlvbiBlcm9kZU9uY2VCaW5hcnkoaW1nLCBuZXdJbWFnZSwga2VybmVsKSB7XG4gIGNvbnN0IGtlcm5lbFdpZHRoID0ga2VybmVsLmxlbmd0aDtcbiAgY29uc3Qga2VybmVsSGVpZ2h0ID0ga2VybmVsWzBdLmxlbmd0aDtcbiAgbGV0IHJhZGl1c1ggPSAoa2VybmVsV2lkdGggLSAxKSAvIDI7XG4gIGxldCByYWRpdXNZID0gKGtlcm5lbEhlaWdodCAtIDEpIC8gMjtcbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBpbWcuaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgICBsZXQgbWluID0gMTtcbiAgICAgIGludExvb3A6IGZvciAobGV0IGpqID0gMDsgamogPCBrZXJuZWxIZWlnaHQ7IGpqKyspIHtcbiAgICAgICAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGtlcm5lbFdpZHRoOyBpaSsrKSB7XG4gICAgICAgICAgaWYgKGtlcm5lbFtpaV1bampdICE9PSAxKSBjb250aW51ZTtcbiAgICAgICAgICBsZXQgaSA9IGlpIC0gcmFkaXVzWCArIHg7XG4gICAgICAgICAgbGV0IGogPSBqaiAtIHJhZGl1c1kgKyB5O1xuICAgICAgICAgIGlmIChqIDwgMCB8fCBpIDwgMCB8fCBpID49IGltZy53aWR0aCB8fCBqID49IGltZy5oZWlnaHQpIGNvbnRpbnVlO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gaW1nLmdldEJpdFhZKGksIGopO1xuICAgICAgICAgIGlmICh2YWx1ZSA9PT0gMCkge1xuICAgICAgICAgICAgbWluID0gMDtcbiAgICAgICAgICAgIGJyZWFrIGludExvb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobWluID09PSAxKSB7XG4gICAgICAgIG5ld0ltYWdlLnNldEJpdFhZKHgsIHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG5cbmZ1bmN0aW9uIGVyb2RlT25jZUJpbmFyeU9ubHlPbmVzKGltZywgbmV3SW1hZ2UsIGtlcm5lbFdpZHRoLCBrZXJuZWxIZWlnaHQpIHtcbiAgY29uc3QgcmFkaXVzWCA9IChrZXJuZWxXaWR0aCAtIDEpIC8gMjtcbiAgY29uc3QgcmFkaXVzWSA9IChrZXJuZWxIZWlnaHQgLSAxKSAvIDI7XG5cbiAgY29uc3QgbWluTGlzdCA9IFtdO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgbWluTGlzdC5wdXNoKDApO1xuICB9XG5cbiAgZm9yIChsZXQgeSA9IDA7IHkgPCBpbWcuaGVpZ2h0OyB5KyspIHtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IGltZy53aWR0aDsgeCsrKSB7XG4gICAgICBtaW5MaXN0W3hdID0gMTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBoID0gTWF0aC5tYXgoMCwgeSAtIHJhZGl1c1kpO1xuICAgICAgICBoIDwgTWF0aC5taW4oaW1nLmhlaWdodCwgeSArIHJhZGl1c1kgKyAxKTtcbiAgICAgICAgaCsrXG4gICAgICApIHtcbiAgICAgICAgaWYgKGltZy5nZXRCaXRYWSh4LCBoKSA9PT0gMCkge1xuICAgICAgICAgIG1pbkxpc3RbeF0gPSAwO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWcud2lkdGg7IHgrKykge1xuICAgICAgaWYgKG5ld0ltYWdlLmdldEJpdFhZKHgsIHkpID09PSAwKSBjb250aW51ZTtcbiAgICAgIGZvciAoXG4gICAgICAgIGxldCBpID0gTWF0aC5tYXgoMCwgeCAtIHJhZGl1c1gpO1xuICAgICAgICBpIDwgTWF0aC5taW4oaW1nLndpZHRoLCB4ICsgcmFkaXVzWCArIDEpO1xuICAgICAgICBpKytcbiAgICAgICkge1xuICAgICAgICBpZiAobWluTGlzdFtpXSA9PT0gMCkge1xuICAgICAgICAgIG5ld0ltYWdlLmNsZWFyQml0WFkoeCwgeSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBJbiBtYXRoZW1hdGljYWwgbW9ycGhvbG9neSwgb3BlbmluZyBpcyB0aGUgZGlsYXRpb24gb2YgdGhlIGVyb3Npb24gb2YgYSBzZXQgQSBieSBhIHN0cnVjdHVyaW5nIGVsZW1lbnQgQi5cbiAqIFRvZ2V0aGVyIHdpdGggY2xvc2luZywgdGhlIG9wZW5pbmcgc2VydmVzIGluIGNvbXB1dGVyIHZpc2lvbiBhbmQgaW1hZ2UgcHJvY2Vzc2luZyBhcyBhIGJhc2ljIHdvcmtob3JzZSBvZiBtb3JwaG9sb2dpY2FsIG5vaXNlIHJlbW92YWwuXG4gKiBPcGVuaW5nIHJlbW92ZXMgc21hbGwgb2JqZWN0cyBmcm9tIHRoZSBmb3JlZ3JvdW5kICh1c3VhbGx5IHRha2VuIGFzIHRoZSBicmlnaHQgcGl4ZWxzKSBvZiBhbiBpbWFnZSxcbiAqIHBsYWNpbmcgdGhlbSBpbiB0aGUgYmFja2dyb3VuZCwgd2hpbGUgY2xvc2luZyByZW1vdmVzIHNtYWxsIGhvbGVzIGluIHRoZSBmb3JlZ3JvdW5kLCBjaGFuZ2luZyBzbWFsbCBpc2xhbmRzIG9mIGJhY2tncm91bmQgaW50byBmb3JlZ3JvdW5kLiAoV2lraXBlZGlhKVxuICogaHR0cDovL2RvY3Mub3BlbmN2Lm9yZy8yLjQvZG9jL3R1dG9yaWFscy9pbWdwcm9jL29wZW5pbmdfY2xvc2luZ19oYXRzL29wZW5pbmdfY2xvc2luZ19oYXRzLmh0bWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbb3B0aW9ucy5rZXJuZWxdIC0gVGhlIGtlcm5lbCBjYW4gb25seSBoYXZlIG9uZXMgYW5kIHplcm9zLiBEZWZhdWx0OiBbWzEsIDEsIDFdLCBbMSwgMSwgMV0sIFsxLCAxLCAxXV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pdGVyYXRpb25zPTFdIC0gTnVtYmVyIG9mIGl0ZXJhdGlvbnMgb2YgdGhlIG1vcnBob2xvZ2ljYWwgdHJhbnNmb3JtXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gb3BlbihvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBrZXJuZWwgPSBbXG4gICAgICBbMSwgMSwgMV0sXG4gICAgICBbMSwgMSwgMV0sXG4gICAgICBbMSwgMSwgMV0sXG4gICAgXSxcbiAgICBpdGVyYXRpb25zID0gMSxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdvcGVuJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gICAgYWxwaGE6IDAsXG4gIH0pO1xuICBpZiAoa2VybmVsLmNvbHVtbnMgJSAyID09PSAwIHx8IGtlcm5lbC5yb3dzICUgMiA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnb3BlbjogVGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIG9mIHRoZSBrZXJuZWwgbXVzdCBiZSBvZGQnLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIG5ld0ltYWdlID0gbmV3SW1hZ2UuZXJvZGUoeyBrZXJuZWwgfSk7XG4gICAgbmV3SW1hZ2UgPSBuZXdJbWFnZS5kaWxhdGUoeyBrZXJuZWwgfSk7XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBJbiBtYXRoZW1hdGljYWwgbW9ycGhvbG9neSwgdGhlIGNsb3Npbmcgb2YgYSBzZXQgQSBieSBhIHN0cnVjdHVyaW5nIGVsZW1lbnQgQiBpcyB0aGUgZXJvc2lvbiBvZiB0aGUgZGlsYXRpb24gb2YgdGhhdCBzZXQgKFdpa2lwZWRpYSkuXG4gKiBJbiBpbWFnZSBwcm9jZXNzaW5nLCBjbG9zaW5nIGlzLCB0b2dldGhlciB3aXRoIG9wZW5pbmcsIHRoZSBiYXNpYyB3b3JraG9yc2Ugb2YgbW9ycGhvbG9naWNhbCBub2lzZSByZW1vdmFsLlxuICogT3BlbmluZyByZW1vdmVzIHNtYWxsIG9iamVjdHMsIHdoaWxlIGNsb3NpbmcgcmVtb3ZlcyBzbWFsbCBob2xlcy5cbiAqIGh0dHA6Ly9kb2NzLm9wZW5jdi5vcmcvMi40L2RvYy90dXRvcmlhbHMvaW1ncHJvYy9vcGVuaW5nX2Nsb3NpbmdfaGF0cy9vcGVuaW5nX2Nsb3NpbmdfaGF0cy5odG1sXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gW29wdGlvbnMua2VybmVsXSAtIFRoZSBrZXJuZWwgY2FuIG9ubHkgaGF2ZSBvbmVzIGFuZCB6ZXJvcy4gRGVmYXVsdDogW1sxLCAxLCAxXSwgWzEsIDEsIDFdLCBbMSwgMSwgMV1dXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuaXRlcmF0aW9ucz0xXSAtIE51bWJlciBvZiBpdGVyYXRpb25zIG9mIHRoZSBtb3JwaG9sb2dpY2FsIHRyYW5zZm9ybVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNsb3NlKG9wdGlvbnMgPSB7fSkge1xuICBsZXQge1xuICAgIGtlcm5lbCA9IFtcbiAgICAgIFsxLCAxLCAxXSxcbiAgICAgIFsxLCAxLCAxXSxcbiAgICAgIFsxLCAxLCAxXSxcbiAgICBdLFxuICAgIGl0ZXJhdGlvbnMgPSAxLFxuICB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2Nsb3NlJywge1xuICAgIGJpdERlcHRoOiBbMSwgOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gICAgYWxwaGE6IDAsXG4gIH0pO1xuICBpZiAoa2VybmVsLmNvbHVtbnMgJSAyID09PSAwIHx8IGtlcm5lbC5yb3dzICUgMiA9PT0gMCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAnY2xvc2U6IFRoZSBudW1iZXIgb2Ygcm93cyBhbmQgY29sdW1ucyBvZiB0aGUga2VybmVsIG11c3QgYmUgb2RkJyxcbiAgICApO1xuICB9XG5cbiAgbGV0IG5ld0ltYWdlID0gdGhpcztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpdGVyYXRpb25zOyBpKyspIHtcbiAgICBuZXdJbWFnZSA9IG5ld0ltYWdlLmRpbGF0ZSh7IGtlcm5lbCB9KS5lcm9kZSh7IGtlcm5lbCB9KTtcbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgdGhlIHdoaXRlIHRvcCBoYXQgKGFsc28gY2FsbGVkIHRvcCBoYXQpLiBJbiBtYXRoZW1hdGljYWwgbW9ycGhvbG9neSBhbmQgZGlnaXRhbCBpbWFnZSBwcm9jZXNzaW5nLFxuICogdG9wLWhhdCB0cmFuc2Zvcm0gaXMgYW4gb3BlcmF0aW9uIHRoYXQgZXh0cmFjdHMgc21hbGwgZWxlbWVudHMgYW5kIGRldGFpbHMgZnJvbSBnaXZlbiBpbWFnZXMuXG4gKiBUaGUgd2hpdGUgdG9wLWhhdCB0cmFuc2Zvcm0gaXMgZGVmaW5lZCBhcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBpbnB1dCBpbWFnZSBhbmQgaXRzIG9wZW5pbmcgYnkgc29tZSBzdHJ1Y3R1cmluZyBlbGVtZW50LlxuICogVG9wLWhhdCB0cmFuc2Zvcm1zIGFyZSB1c2VkIGZvciB2YXJpb3VzIGltYWdlIHByb2Nlc3NpbmcgdGFza3MsIHN1Y2ggYXMgZmVhdHVyZSBleHRyYWN0aW9uLCBiYWNrZ3JvdW5kIGVxdWFsaXphdGlvbiwgaW1hZ2UgZW5oYW5jZW1lbnQsIGFuZCBvdGhlcnMuIChXaWtpcGVkaWEpXG4gKiBodHRwOi8vZG9jcy5vcGVuY3Yub3JnLzIuNC9kb2MvdHV0b3JpYWxzL2ltZ3Byb2Mvb3BlbmluZ19jbG9zaW5nX2hhdHMvb3BlbmluZ19jbG9zaW5nX2hhdHMuaHRtbFxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFtvcHRpb25zLmtlcm5lbF0gLSBUaGUga2VybmVsIGNhbiBvbmx5IGhhdmUgb25lcyBhbmQgemVyb3MuIERlZmF1bHQ6IFtbMSwgMSwgMV0sIFsxLCAxLCAxXSwgWzEsIDEsIDFdXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLml0ZXJhdGlvbnM9MV0gLSBOdW1iZXIgb2YgaXRlcmF0aW9ucyBvZiB0aGUgbW9ycGhvbG9naWNhbCB0cmFuc2Zvcm1cbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0b3BIYXQob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAga2VybmVsID0gW1xuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgIF0sXG4gICAgaXRlcmF0aW9ucyA9IDEsXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgndG9wSGF0Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gICAgYWxwaGE6IDAsXG4gIH0pO1xuICBpZiAoa2VybmVsLmxlbmd0aCAlIDIgPT09IDAgfHwga2VybmVsWzBdLmxlbmd0aCAlIDIgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ3RvcEhhdDogVGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIG9mIHRoZSBrZXJuZWwgbXVzdCBiZSBvZGQnLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGxldCBvcGVuSW1hZ2UgPSBuZXdJbWFnZS5vcGVuKHsga2VybmVsIH0pO1xuICAgIG5ld0ltYWdlID0gb3BlbkltYWdlLnN1YnRyYWN0SW1hZ2UobmV3SW1hZ2UsIHsgYWJzb2x1dGU6IHRydWUgfSk7XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBUaGlzIGZ1bmN0aW9uIGlzIHRoZSBibGFjayB0b3AgaGF0IChhbHNvIGNhbGxlZCBibGFjayBoYXQpLlxuICogSW4gbWF0aGVtYXRpY2FsIG1vcnBob2xvZ3kgYW5kIGRpZ2l0YWwgaW1hZ2UgcHJvY2Vzc2luZyxcbiAqIHRvcC1oYXQgdHJhbnNmb3JtIGlzIGFuIG9wZXJhdGlvbiB0aGF0IGV4dHJhY3RzIHNtYWxsIGVsZW1lbnRzIGFuZCBkZXRhaWxzIGZyb20gZ2l2ZW4gaW1hZ2VzLlxuICogVGhlIGJsYWNrIHRvcC1oYXQgdHJhbnNmb3JtIGlzIGRlZmluZWQgZHVhbGx5IGFzIHRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIGNsb3NlZCBhbmQgdGhlIGlucHV0IGltYWdlLlxuICogVG9wLWhhdCB0cmFuc2Zvcm1zIGFyZSB1c2VkIGZvciB2YXJpb3VzIGltYWdlIHByb2Nlc3NpbmcgdGFza3MsIHN1Y2ggYXMgZmVhdHVyZSBleHRyYWN0aW9uLCBiYWNrZ3JvdW5kIGVxdWFsaXphdGlvbixcbiAqIGltYWdlIGVuaGFuY2VtZW50LCBhbmQgb3RoZXJzLiAoV2lraXBlZGlhKVxuICogaHR0cDovL2RvY3Mub3BlbmN2Lm9yZy8yLjQvZG9jL3R1dG9yaWFscy9pbWdwcm9jL29wZW5pbmdfY2xvc2luZ19oYXRzL29wZW5pbmdfY2xvc2luZ19oYXRzLmh0bWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbb3B0aW9ucy5rZXJuZWxdIC0gVGhlIGtlcm5lbCBjYW4gb25seSBoYXZlIG9uZXMgYW5kIHplcm9zLiBEZWZhdWx0OiBbWzEsIDEsIDFdLCBbMSwgMSwgMV0sIFsxLCAxLCAxXV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pdGVyYXRpb25zPTFdIC0gTnVtYmVyIG9mIGl0ZXJhdGlvbnMgb2YgdGhlIG1vcnBob2xvZ2ljYWwgdHJhbnNmb3JtXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYmxhY2tIYXQob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAga2VybmVsID0gW1xuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgICAgWzEsIDEsIDFdLFxuICAgIF0sXG4gICAgaXRlcmF0aW9ucyA9IDEsXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnYmxhY2tIYXQnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gICAgY29tcG9uZW50czogMSxcbiAgICBhbHBoYTogMCxcbiAgfSk7XG4gIGlmIChrZXJuZWwuY29sdW1ucyAlIDIgPT09IDAgfHwga2VybmVsLnJvd3MgJSAyID09PSAwKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICdibGFja0hhdDogVGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIG9mIHRoZSBrZXJuZWwgbXVzdCBiZSBvZGQnLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGNvbnN0IGNsb3NlSW1hZ2UgPSBuZXdJbWFnZS5jbG9zZSh7IGtlcm5lbCB9KTtcbiAgICBuZXdJbWFnZSA9IGNsb3NlSW1hZ2Uuc3VidHJhY3RJbWFnZShuZXdJbWFnZSwgeyBhYnNvbHV0ZTogdHJ1ZSB9KTtcbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCIvKipcbiAqIEluIG1hdGhlbWF0aWNhbCBtb3JwaG9sb2d5IGFuZCBkaWdpdGFsIGltYWdlIHByb2Nlc3NpbmcsIGEgbW9ycGhvbG9naWNhbCBncmFkaWVudCBpcyB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZSBkaWxhdGlvbiBhbmQgdGhlIGVyb3Npb24gb2YgYSBnaXZlbiBpbWFnZS4gSXQgaXMgYW4gaW1hZ2Ugd2hlcmUgZWFjaCBwaXhlbCB2YWx1ZSAodHlwaWNhbGx5IG5vbi1uZWdhdGl2ZSkgaW5kaWNhdGVzIHRoZSBjb250cmFzdCBpbnRlbnNpdHkgaW4gdGhlIGNsb3NlIG5laWdoYm9yaG9vZCBvZiB0aGF0IHBpeGVsLiBJdCBpcyB1c2VmdWwgZm9yIGVkZ2UgZGV0ZWN0aW9uIGFuZCBzZWdtZW50YXRpb24gYXBwbGljYXRpb25zLlxuICogaHR0cDovL2RvY3Mub3BlbmN2Lm9yZy8yLjQvZG9jL3R1dG9yaWFscy9pbWdwcm9jL29wZW5pbmdfY2xvc2luZ19oYXRzL29wZW5pbmdfY2xvc2luZ19oYXRzLmh0bWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbb3B0aW9ucy5rZXJuZWxdIC0gVGhlIGtlcm5lbCBjYW4gb25seSBoYXZlIG9uZXMgYW5kIHplcm9zLiBEZWZhdWx0OiBbWzEsIDEsIDFdLCBbMSwgMSwgMV0sIFsxLCAxLCAxXV1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5pdGVyYXRpb25zPTFdIC0gTnVtYmVyIG9mIGl0ZXJhdGlvbnMgb2YgdGhlIG1vcnBob2xvZ2ljYWwgdHJhbnNmb3JtXG4gKiBAcmV0dXJuIHtJbWFnZX1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9ycGhvbG9naWNhbEdyYWRpZW50KG9wdGlvbnMgPSB7fSkge1xuICBsZXQge1xuICAgIGtlcm5lbCA9IFtcbiAgICAgIFsxLCAxLCAxXSxcbiAgICAgIFsxLCAxLCAxXSxcbiAgICAgIFsxLCAxLCAxXSxcbiAgICBdLFxuICAgIGl0ZXJhdGlvbnMgPSAxLFxuICB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ21vcnBob2xvZ2ljYWxHcmFkaWVudCcsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgICBjb21wb25lbnRzOiAxLFxuICAgIGFscGhhOiAwLFxuICB9KTtcbiAgaWYgKGtlcm5lbC5jb2x1bW5zICUgMiA9PT0gMCB8fCBrZXJuZWwucm93cyAlIDIgPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgJ21vcnBob2xvZ2ljYWxHcmFkaWVudDogVGhlIG51bWJlciBvZiByb3dzIGFuZCBjb2x1bW5zIG9mIHRoZSBrZXJuZWwgbXVzdCBiZSBvZGQnLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSB0aGlzO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGl0ZXJhdGlvbnM7IGkrKykge1xuICAgIGxldCBkaWxhdGVkSW1hZ2UgPSBuZXdJbWFnZS5kaWxhdGUoeyBrZXJuZWwgfSk7XG4gICAgbGV0IGVyb2RlZEltYWdlID0gbmV3SW1hZ2UuZXJvZGUoeyBrZXJuZWwgfSk7XG4gICAgbmV3SW1hZ2UgPSBkaWxhdGVkSW1hZ2Uuc3VidHJhY3RJbWFnZShlcm9kZWRJbWFnZSwgeyBhYnNvbHV0ZTogdHJ1ZSB9KTtcbiAgfVxuXG4gIHJldHVybiBuZXdJbWFnZTtcbn1cbiIsIi8vIFJFRkVSRU5DRVMgOlxuLy8gaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMzgyODUyMjkvY2FsY3VsYXRpbmctYXNwZWN0LXJhdGlvLW9mLXBlcnNwZWN0aXZlLXRyYW5zZm9ybS1kZXN0aW5hdGlvbi1pbWFnZS8zODQwMjM3OCMzODQwMjM3OFxuLy8gaHR0cDovL3d3dy5jb3JybWFwLmNvbS9mZWF0dXJlcy9ob21vZ3JhcGh5X3RyYW5zZm9ybWF0aW9uLnBocFxuLy8gaHR0cHM6Ly9hZ3MuY3MudW5pLWtsLmRlL2ZpbGVhZG1pbi9pbmZfYWdzLzNkY3Ytd3MxMS0xMi8zRENWX1dTMTEtMTJfbGVjMDQucGRmXG4vLyBodHRwOi8vZ3JhcGhpY3MuY3MuY211LmVkdS9jb3Vyc2VzLzE1LTQ2My8yMDExX2ZhbGwvTGVjdHVyZXMvbW9ycGhpbmcucGRmXG5cbmltcG9ydCB7IE1hdHJpeCwgaW52ZXJzZSwgU2luZ3VsYXJWYWx1ZURlY29tcG9zaXRpb24gfSBmcm9tICdtbC1tYXRyaXgnO1xuXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG5mdW5jdGlvbiBvcmRlcjRQb2ludHMocHRzKSB7XG4gIGxldCB0bCA9IDA7XG4gIGxldCB0ciA9IDA7XG4gIGxldCBiciA9IDA7XG4gIGxldCBibCA9IDA7XG5cbiAgbGV0IG1pblggPSBwdHNbMF1bMF07XG4gIGxldCBpbmRleE1pblggPSAwO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHB0c1tpXVswXSA8IG1pblgpIHtcbiAgICAgIG1pblggPSBwdHNbaV1bMF07XG4gICAgICBpbmRleE1pblggPSBpO1xuICAgIH1cbiAgfVxuXG4gIGxldCBtaW5YMiA9IHB0c1soaW5kZXhNaW5YICsgMSkgJSBwdHMubGVuZ3RoXVswXTtcbiAgbGV0IGluZGV4TWluWDIgPSAoaW5kZXhNaW5YICsgMSkgJSBwdHMubGVuZ3RoO1xuXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgcHRzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHB0c1tpXVswXSA8IG1pblgyICYmIGkgIT09IGluZGV4TWluWCkge1xuICAgICAgbWluWDIgPSBwdHNbaV1bMF07XG4gICAgICBpbmRleE1pblgyID0gaTtcbiAgICB9XG4gIH1cblxuICBpZiAocHRzW2luZGV4TWluWDJdWzFdIDwgcHRzW2luZGV4TWluWF1bMV0pIHtcbiAgICB0bCA9IHB0c1tpbmRleE1pblgyXTtcbiAgICBibCA9IHB0c1tpbmRleE1pblhdO1xuICAgIGlmIChpbmRleE1pblggIT09IChpbmRleE1pblgyICsgMSkgJSA0KSB7XG4gICAgICB0ciA9IHB0c1soaW5kZXhNaW5YMiArIDEpICUgNF07XG4gICAgICBiciA9IHB0c1soaW5kZXhNaW5YMiArIDIpICUgNF07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyID0gcHRzWyhpbmRleE1pblgyICsgMikgJSA0XTtcbiAgICAgIGJyID0gcHRzWyhpbmRleE1pblgyICsgMykgJSA0XTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmwgPSBwdHNbaW5kZXhNaW5YMl07XG4gICAgdGwgPSBwdHNbaW5kZXhNaW5YXTtcbiAgICBpZiAoaW5kZXhNaW5YMiAhPT0gKGluZGV4TWluWCArIDEpICUgNCkge1xuICAgICAgdHIgPSBwdHNbKGluZGV4TWluWCArIDEpICUgNF07XG4gICAgICBiciA9IHB0c1soaW5kZXhNaW5YICsgMikgJSA0XTtcbiAgICB9IGVsc2Uge1xuICAgICAgdHIgPSBwdHNbKGluZGV4TWluWCArIDIpICUgNF07XG4gICAgICBiciA9IHB0c1soaW5kZXhNaW5YICsgMykgJSA0XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW3RsLCB0ciwgYnIsIGJsXTtcbn1cblxuZnVuY3Rpb24gZGlzdGFuY2UyUG9pbnRzKHAxLCBwMikge1xuICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHAxWzBdIC0gcDJbMF0sIDIpICsgTWF0aC5wb3cocDFbMV0gLSBwMlsxXSwgMikpO1xufVxuXG5mdW5jdGlvbiBjcm9zc1ZlY3QodSwgdikge1xuICBsZXQgcmVzdWx0ID0gW1xuICAgIHVbMV0gKiB2WzJdIC0gdVsyXSAqIHZbMV0sXG4gICAgdVsyXSAqIHZbMF0gLSB1WzBdICogdlsyXSxcbiAgICB1WzBdICogdlsxXSAtIHVbMV0gKiB2WzBdLFxuICBdO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBkb3RWZWN0KHUsIHYpIHtcbiAgbGV0IHJlc3VsdCA9IHVbMF0gKiB2WzBdICsgdVsxXSAqIHZbMV0gKyB1WzJdICogdlsyXTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVdpZHRoQW5kSGVpZ3RoKHRsLCB0ciwgYnIsIGJsLCB3aWR0aEltYWdlLCBoZWlnaHRJbWFnZSkge1xuICBsZXQgdyA9IE1hdGgubWF4KGRpc3RhbmNlMlBvaW50cyh0bCwgdHIpLCBkaXN0YW5jZTJQb2ludHMoYmwsIGJyKSk7XG4gIGxldCBoID0gTWF0aC5tYXgoZGlzdGFuY2UyUG9pbnRzKHRsLCBibCksIGRpc3RhbmNlMlBvaW50cyh0ciwgYnIpKTtcbiAgbGV0IGZpbmFsVyA9IDA7XG4gIGxldCBmaW5hbEggPSAwO1xuICBsZXQgdTAgPSBNYXRoLmNlaWwod2lkdGhJbWFnZSAvIDIpO1xuICBsZXQgdjAgPSBNYXRoLmNlaWwoaGVpZ2h0SW1hZ2UgLyAyKTtcbiAgbGV0IGFyVmlzID0gdyAvIGg7XG5cbiAgbGV0IG0xID0gW3RsWzBdLCB0bFsxXSwgMV07XG4gIGxldCBtMiA9IFt0clswXSwgdHJbMV0sIDFdO1xuICBsZXQgbTMgPSBbYmxbMF0sIGJsWzFdLCAxXTtcbiAgbGV0IG00ID0gW2JyWzBdLCBiclsxXSwgMV07XG5cbiAgbGV0IGsyID0gZG90VmVjdChjcm9zc1ZlY3QobTEsIG00KSwgbTMpIC8gZG90VmVjdChjcm9zc1ZlY3QobTIsIG00KSwgbTMpO1xuICBsZXQgazMgPSBkb3RWZWN0KGNyb3NzVmVjdChtMSwgbTQpLCBtMikgLyBkb3RWZWN0KGNyb3NzVmVjdChtMywgbTQpLCBtMik7XG5cbiAgbGV0IG4yID0gW2syICogbTJbMF0gLSBtMVswXSwgazIgKiBtMlsxXSAtIG0xWzFdLCBrMiAqIG0yWzJdIC0gbTFbMl1dO1xuICBsZXQgbjMgPSBbazMgKiBtM1swXSAtIG0xWzBdLCBrMyAqIG0zWzFdIC0gbTFbMV0sIGszICogbTNbMl0gLSBtMVsyXV07XG5cbiAgbGV0IG4yMSA9IG4yWzBdO1xuICBsZXQgbjIyID0gbjJbMV07XG4gIGxldCBuMjMgPSBuMlsyXTtcblxuICBsZXQgbjMxID0gbjNbMF07XG4gIGxldCBuMzIgPSBuM1sxXTtcbiAgbGV0IG4zMyA9IG4zWzJdO1xuXG4gIGxldCBmID1cbiAgICAoMS4wIC8gKG4yMyAqIG4zMykpICpcbiAgICAobjIxICogbjMxIC1cbiAgICAgIChuMjEgKiBuMzMgKyBuMjMgKiBuMzEpICogdTAgK1xuICAgICAgbjIzICogbjMzICogdTAgKiB1MCArXG4gICAgICAobjIyICogbjMyIC0gKG4yMiAqIG4zMyArIG4yMyAqIG4zMikgKiB2MCArIG4yMyAqIG4zMyAqIHYwICogdjApKTtcbiAgaWYgKGYgPj0gMCkge1xuICAgIGYgPSBNYXRoLnNxcnQoZik7XG4gIH0gZWxzZSB7XG4gICAgZiA9IE1hdGguc3FydCgtZik7XG4gIH1cblxuICBsZXQgQSA9IG5ldyBNYXRyaXgoW1xuICAgIFtmLCAwLCB1MF0sXG4gICAgWzAsIGYsIHYwXSxcbiAgICBbMCwgMCwgMV0sXG4gIF0pO1xuICBsZXQgQXQgPSBBLnRyYW5zcG9zZSgpO1xuICBsZXQgQXRpID0gaW52ZXJzZShBdCk7XG4gIGxldCBBaSA9IGludmVyc2UoQSk7XG5cbiAgbGV0IG4yUiA9IE1hdHJpeC5yb3dWZWN0b3IobjIpO1xuICBsZXQgbjNSID0gTWF0cml4LnJvd1ZlY3RvcihuMyk7XG5cbiAgbGV0IGFyUmVhbCA9IE1hdGguc3FydChcbiAgICBkb3RWZWN0KG4yUi5tbXVsKEF0aSkubW11bChBaSkudG8xREFycmF5KCksIG4yKSAvXG4gICAgICBkb3RWZWN0KG4zUi5tbXVsKEF0aSkubW11bChBaSkudG8xREFycmF5KCksIG4zKSxcbiAgKTtcblxuICBpZiAoYXJSZWFsID09PSAwIHx8IGFyVmlzID09PSAwKSB7XG4gICAgZmluYWxXID0gTWF0aC5jZWlsKHcpO1xuICAgIGZpbmFsSCA9IE1hdGguY2VpbChoKTtcbiAgfSBlbHNlIGlmIChhclJlYWwgPCBhclZpcykge1xuICAgIGZpbmFsVyA9IE1hdGguY2VpbCh3KTtcbiAgICBmaW5hbEggPSBNYXRoLmNlaWwoZmluYWxXIC8gYXJSZWFsKTtcbiAgfSBlbHNlIHtcbiAgICBmaW5hbEggPSBNYXRoLmNlaWwoaCk7XG4gICAgZmluYWxXID0gTWF0aC5jZWlsKGFyUmVhbCAqIGZpbmFsSCk7XG4gIH1cbiAgcmV0dXJuIFtmaW5hbFcsIGZpbmFsSF07XG59XG5cbmZ1bmN0aW9uIHByb2plY3Rpb25Qb2ludCh4LCB5LCBhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCBpbWFnZSwgY2hhbm5lbCkge1xuICBsZXQgW25ld1gsIG5ld1ldID0gW1xuICAgIChhICogeCArIGIgKiB5ICsgYykgLyAoZyAqIHggKyBoICogeSArIDEpLFxuICAgIChkICogeCArIGUgKiB5ICsgZikgLyAoZyAqIHggKyBoICogeSArIDEpLFxuICBdO1xuICByZXR1cm4gaW1hZ2UuZ2V0VmFsdWVYWShNYXRoLmZsb29yKG5ld1gpLCBNYXRoLmZsb29yKG5ld1kpLCBjaGFubmVsKTtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gYSBxdWFkcmlsYXRlcmFsIGludG8gYSByZWN0YW5nbGVcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbcHRzXSAtIEFycmF5IG9mIHRoZSBmb3VyIGNvcm5lcnMuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNhbGN1bGF0ZVJhdGlvPXRydWVdIC0gdHJ1ZSBpZiB5b3Ugd2FudCB0byBjYWxjdWxhdGUgdGhlIGFzcGVjdCByYXRpbyBcIndpZHRoIHggaGVpZ2h0XCIgYnkgdGFraW5nIHRoZSBwZXJzcGVjdGl2IGludG8gY29uc2lkZXJhdGlvbi5cbiAqIEByZXR1cm4ge0ltYWdlfSBUaGUgbmV3IGltYWdlLCB3aGljaCBpcyBhIHJlY3RhbmdsZVxuICogQGV4YW1wbGVcbiAqIHZhciBjcm9wcGVkID0gaW1hZ2Uud2FycGluZ0ZvdXJQb2ludHMoe1xuICogICBwdHM6IFtbMCwwXSwgWzEwMCwgMF0sIFs4MCwgNTBdLCBbMTAsIDUwXV1cbiAqIH0pO1xuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHdhcnBpbmdGb3VyUG9pbnRzKHB0cywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGNhbGN1bGF0ZVJhdGlvID0gdHJ1ZSB9ID0gb3B0aW9ucztcblxuICBpZiAocHRzLmxlbmd0aCAhPT0gNCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBUaGUgYXJyYXkgcHRzIG11c3QgaGF2ZSBmb3VyIGVsZW1lbnRzLCB3aGljaCBhcmUgdGhlIGZvdXIgY29ybmVycy4gQ3VycmVudGx5LCBwdHMgaGF2ZSAke3B0cy5sZW5ndGh9IGVsZW1lbnRzYCxcbiAgICApO1xuICB9XG5cbiAgbGV0IFtwdDEsIHB0MiwgcHQzLCBwdDRdID0gcHRzO1xuXG4gIGxldCBxdWFkcmlsYXRlcmlhbCA9IFtwdDEsIHB0MiwgcHQzLCBwdDRdO1xuICBsZXQgW3RsLCB0ciwgYnIsIGJsXSA9IG9yZGVyNFBvaW50cyhxdWFkcmlsYXRlcmlhbCk7XG4gIGxldCB3aWR0aFJlY3Q7XG4gIGxldCBoZWlnaHRSZWN0O1xuICBpZiAoY2FsY3VsYXRlUmF0aW8pIHtcbiAgICBbd2lkdGhSZWN0LCBoZWlnaHRSZWN0XSA9IGNvbXB1dGVXaWR0aEFuZEhlaWd0aChcbiAgICAgIHRsLFxuICAgICAgdHIsXG4gICAgICBicixcbiAgICAgIGJsLFxuICAgICAgdGhpcy53aWR0aCxcbiAgICAgIHRoaXMuaGVpZ2h0LFxuICAgICk7XG4gIH0gZWxzZSB7XG4gICAgd2lkdGhSZWN0ID0gTWF0aC5jZWlsKFxuICAgICAgTWF0aC5tYXgoZGlzdGFuY2UyUG9pbnRzKHRsLCB0ciksIGRpc3RhbmNlMlBvaW50cyhibCwgYnIpKSxcbiAgICApO1xuICAgIGhlaWdodFJlY3QgPSBNYXRoLmNlaWwoXG4gICAgICBNYXRoLm1heChkaXN0YW5jZTJQb2ludHModGwsIGJsKSwgZGlzdGFuY2UyUG9pbnRzKHRyLCBicikpLFxuICAgICk7XG4gIH1cbiAgbGV0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgd2lkdGg6IHdpZHRoUmVjdCxcbiAgICBoZWlnaHQ6IGhlaWdodFJlY3QsXG4gIH0pO1xuXG4gIGxldCBbWDEsIFkxXSA9IHRsO1xuICBsZXQgW1gyLCBZMl0gPSB0cjtcbiAgbGV0IFtYMywgWTNdID0gYnI7XG4gIGxldCBbWDQsIFk0XSA9IGJsO1xuICBsZXQgW3gxLCB5MV0gPSBbMCwgMF07XG4gIGxldCBbeDIsIHkyXSA9IFswLCB3aWR0aFJlY3QgLSAxXTtcbiAgbGV0IFt4MywgeTNdID0gW2hlaWdodFJlY3QgLSAxLCB3aWR0aFJlY3QgLSAxXTtcbiAgbGV0IFt4NCwgeTRdID0gW2hlaWdodFJlY3QgLSAxLCAwXTtcblxuICBsZXQgUyA9IG5ldyBNYXRyaXgoW1xuICAgIFt4MSwgeTEsIDEsIDAsIDAsIDAsIC14MSAqIFgxLCAteTEgKiBYMV0sXG4gICAgW3gyLCB5MiwgMSwgMCwgMCwgMCwgLXgyICogWDIsIC15MiAqIFgyXSxcbiAgICBbeDMsIHkzLCAxLCAwLCAwLCAwLCAteDMgKiBYMywgLXkxICogWDNdLFxuICAgIFt4NCwgeTQsIDEsIDAsIDAsIDAsIC14NCAqIFg0LCAteTQgKiBYNF0sXG4gICAgWzAsIDAsIDAsIHgxLCB5MSwgMSwgLXgxICogWTEsIC15MSAqIFkxXSxcbiAgICBbMCwgMCwgMCwgeDIsIHkyLCAxLCAteDIgKiBZMiwgLXkyICogWTJdLFxuICAgIFswLCAwLCAwLCB4MywgeTMsIDEsIC14MyAqIFkzLCAteTMgKiBZM10sXG4gICAgWzAsIDAsIDAsIHg0LCB5NCwgMSwgLXg0ICogWTQsIC15NCAqIFk0XSxcbiAgXSk7XG5cbiAgbGV0IEQgPSBNYXRyaXguY29sdW1uVmVjdG9yKFtYMSwgWDIsIFgzLCBYNCwgWTEsIFkyLCBZMywgWTRdKTtcblxuICBsZXQgc3ZkID0gbmV3IFNpbmd1bGFyVmFsdWVEZWNvbXBvc2l0aW9uKFMpO1xuICBsZXQgVCA9IHN2ZC5zb2x2ZShEKTsgLy8gc29sdmUgUypUID0gRFxuICBsZXQgW2EsIGIsIGMsIGQsIGUsIGYsIGcsIGhdID0gVC50bzFEQXJyYXkoKTtcblxuICBsZXQgWHQgPSBuZXcgTWF0cml4KGhlaWdodFJlY3QsIHdpZHRoUmVjdCk7XG5cbiAgZm9yIChsZXQgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCB0aGlzLmNoYW5uZWxzOyBjaGFubmVsKyspIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodFJlY3Q7IGkrKykge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB3aWR0aFJlY3Q7IGorKykge1xuICAgICAgICBYdC5zZXQoXG4gICAgICAgICAgaSxcbiAgICAgICAgICBqLFxuICAgICAgICAgIHByb2plY3Rpb25Qb2ludChpLCBqLCBhLCBiLCBjLCBkLCBlLCBmLCBnLCBoLCB0aGlzLCBjaGFubmVsKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgbmV3SW1hZ2Uuc2V0TWF0cml4KFh0LCB7IGNoYW5uZWw6IGNoYW5uZWwgfSk7XG4gIH1cblxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG4vKipcbiAqIENyb3BzIHRoZSBpbWFnZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy54PTBdIC0geCBjb29yZGluYXRlIHRvIHBsYWNlIHRoZSB6ZXJvIG9mIHRoZSBuZXcgaW1hZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy55PTBdIC0geSBjb29yZGluYXRlIHRvIHBsYWNlIHRoZSB6ZXJvIG9mIHRoZSBuZXcgaW1hZ2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53aWR0aD10aGlzLndpZHRoLXhdIC0gd2lkdGggb2YgdGhlIG5ldyBpbWFnZVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodD10aGlzLmhlaWdodC15XSAtIGhlaWdodCBvZiB0aGUgbmV3IGltYWdlXG4gKiBAcmV0dXJuIHtJbWFnZX0gVGhlIG5ldyBjcm9wcGVkIGltYWdlXG4gKiBAZXhhbXBsZVxuICogdmFyIGNyb3BwZWQgPSBpbWFnZS5jcm9wKHtcbiAqICAgeDowLFxuICogICB5OjBcbiAqIH0pO1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcm9wKG9wdGlvbnMgPSB7fSkge1xuICBsZXQge1xuICAgIHggPSAwLFxuICAgIHkgPSAwLFxuICAgIHdpZHRoID0gdGhpcy53aWR0aCAtIHgsXG4gICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQgLSB5LFxuICB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ21heCcsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgeCA9IE1hdGgucm91bmQoeCk7XG4gIHkgPSBNYXRoLnJvdW5kKHkpO1xuICB3aWR0aCA9IE1hdGgucm91bmQod2lkdGgpO1xuICBoZWlnaHQgPSBNYXRoLnJvdW5kKGhlaWdodCk7XG5cbiAgaWYgKHggPiB0aGlzLndpZHRoIC0gMSB8fCB5ID4gdGhpcy5oZWlnaHQgLSAxKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgY3JvcDogb3JpZ2luICh4OiR7eH0sIHk6JHt5fSkgb3V0IG9mIHJhbmdlICgke3RoaXMud2lkdGggLSAxfTsgJHtcbiAgICAgICAgdGhpcy5oZWlnaHQgLSAxXG4gICAgICB9KWAsXG4gICAgKTtcbiAgfVxuICBpZiAod2lkdGggPD0gMCB8fCBoZWlnaHQgPD0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYGNyb3A6IHdpZHRoIGFuZCBoZWlnaHQgKHdpZHRoOiR7d2lkdGh9OyBoZWlnaHQ6JHtoZWlnaHR9KSBtdXN0IGJlIHBvc2l0aXZlIG51bWJlcnNgLFxuICAgICk7XG4gIH1cbiAgaWYgKHggPCAwIHx8IHkgPCAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICBgY3JvcDogeCBhbmQgeSAoeDoke3h9LCB5OiR7eX0pIG11c3QgYmUgcG9zaXRpdmUgbnVtYmVyc2AsXG4gICAgKTtcbiAgfVxuICBpZiAod2lkdGggPiB0aGlzLndpZHRoIC0geCB8fCBoZWlnaHQgPiB0aGlzLmhlaWdodCAtIHkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgIGBjcm9wOiAoeDogJHt4fSwgeToke3l9LCB3aWR0aDoke3dpZHRofSwgaGVpZ2h0OiR7aGVpZ2h0fSkgc2l6ZSBpcyBvdXQgb2YgcmFuZ2VgLFxuICAgICk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHsgd2lkdGgsIGhlaWdodCwgcG9zaXRpb246IFt4LCB5XSB9KTtcblxuICBsZXQgeFdpZHRoID0gd2lkdGggKiB0aGlzLmNoYW5uZWxzO1xuICBsZXQgeTEgPSB5ICsgaGVpZ2h0O1xuXG4gIGxldCBwdHIgPSAwOyAvLyBwb2ludGVyIGZvciBuZXcgYXJyYXlcblxuICBsZXQgakxlZnQgPSB4ICogdGhpcy5jaGFubmVscztcblxuICBmb3IgKGxldCBpID0geTsgaSA8IHkxOyBpKyspIHtcbiAgICBsZXQgaiA9IGkgKiB0aGlzLndpZHRoICogdGhpcy5jaGFubmVscyArIGpMZWZ0O1xuICAgIGxldCBqTCA9IGogKyB4V2lkdGg7XG4gICAgZm9yICg7IGogPCBqTDsgaisrKSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IHRoaXMuZGF0YVtqXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCIvKipcbiAqIENyb3BzIHRoZSBpbWFnZSBiYXNlZCBvbiB0aGUgYWxwaGEgY2hhbm5lbFxuICogVGhpcyByZW1vdmVzIGxpbmVzIGFuZCBjb2x1bW5zIHdoZXJlIHRoZSBhbHBoYSBjaGFubmVsIGlzIGxvd2VyIHRoYW4gYSB0aHJlc2hvbGQgdmFsdWUuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnRocmVzaG9sZD10aGlzLm1heFZhbHVlXVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyb3BBbHBoYShvcHRpb25zID0ge30pIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdjcm9wQWxwaGEnLCB7XG4gICAgYWxwaGE6IDEsXG4gIH0pO1xuXG4gIGNvbnN0IHsgdGhyZXNob2xkID0gdGhpcy5tYXhWYWx1ZSB9ID0gb3B0aW9ucztcblxuICBsZXQgbGVmdCA9IGZpbmRMZWZ0KHRoaXMsIHRocmVzaG9sZCwgdGhpcy5jb21wb25lbnRzKTtcblxuICBpZiAobGVmdCA9PT0gLTEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAnQ291bGQgbm90IGZpbmQgbmV3IGRpbWVuc2lvbnMuIFRocmVzaG9sZCBtYXkgYmUgdG9vIGhpZ2guJyxcbiAgICApO1xuICB9XG5cbiAgbGV0IHRvcCA9IGZpbmRUb3AodGhpcywgdGhyZXNob2xkLCB0aGlzLmNvbXBvbmVudHMsIGxlZnQpO1xuICBsZXQgYm90dG9tID0gZmluZEJvdHRvbSh0aGlzLCB0aHJlc2hvbGQsIHRoaXMuY29tcG9uZW50cywgbGVmdCk7XG4gIGxldCByaWdodCA9IGZpbmRSaWdodCh0aGlzLCB0aHJlc2hvbGQsIHRoaXMuY29tcG9uZW50cywgbGVmdCwgdG9wLCBib3R0b20pO1xuXG4gIHJldHVybiB0aGlzLmNyb3Aoe1xuICAgIHg6IGxlZnQsXG4gICAgeTogdG9wLFxuICAgIHdpZHRoOiByaWdodCAtIGxlZnQgKyAxLFxuICAgIGhlaWdodDogYm90dG9tIC0gdG9wICsgMSxcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGZpbmRMZWZ0KGltYWdlLCB0aHJlc2hvbGQsIGNoYW5uZWwpIHtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCBpbWFnZS53aWR0aDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBpbWFnZS5oZWlnaHQ7IHkrKykge1xuICAgICAgaWYgKGltYWdlLmdldFZhbHVlWFkoeCwgeSwgY2hhbm5lbCkgPj0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB4O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGZpbmRUb3AoaW1hZ2UsIHRocmVzaG9sZCwgY2hhbm5lbCwgbGVmdCkge1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGltYWdlLmhlaWdodDsgeSsrKSB7XG4gICAgZm9yIChsZXQgeCA9IGxlZnQ7IHggPCBpbWFnZS53aWR0aDsgeCsrKSB7XG4gICAgICBpZiAoaW1hZ2UuZ2V0VmFsdWVYWSh4LCB5LCBjaGFubmVsKSA+PSB0aHJlc2hvbGQpIHtcbiAgICAgICAgcmV0dXJuIHk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZnVuY3Rpb24gZmluZEJvdHRvbShpbWFnZSwgdGhyZXNob2xkLCBjaGFubmVsLCBsZWZ0KSB7XG4gIGZvciAobGV0IHkgPSBpbWFnZS5oZWlnaHQgLSAxOyB5ID49IDA7IHktLSkge1xuICAgIGZvciAobGV0IHggPSBsZWZ0OyB4IDwgaW1hZ2Uud2lkdGg7IHgrKykge1xuICAgICAgaWYgKGltYWdlLmdldFZhbHVlWFkoeCwgeSwgY2hhbm5lbCkgPj0gdGhyZXNob2xkKSB7XG4gICAgICAgIHJldHVybiB5O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmZ1bmN0aW9uIGZpbmRSaWdodChpbWFnZSwgdGhyZXNob2xkLCBjaGFubmVsLCBsZWZ0LCB0b3AsIGJvdHRvbSkge1xuICBmb3IgKGxldCB4ID0gaW1hZ2Uud2lkdGggLSAxOyB4ID49IGxlZnQ7IHgtLSkge1xuICAgIGZvciAobGV0IHkgPSB0b3A7IHkgPD0gYm90dG9tOyB5KyspIHtcbiAgICAgIGlmIChpbWFnZS5nZXRWYWx1ZVhZKHgsIHksIGNoYW5uZWwpID49IHRocmVzaG9sZCkge1xuICAgICAgICByZXR1cm4geDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIC0xO1xufVxuIiwiZXhwb3J0IGZ1bmN0aW9uIGNoZWNrUm93KGltYWdlLCByb3cpIHtcbiAgaWYgKHJvdyA8IDAgfHwgcm93ID49IGltYWdlLmhlaWdodCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYHJvdyBtdXN0IGJlIGluY2x1ZGVkIGJldHdlZW4gMCBhbmQgJHtcbiAgICAgICAgaW1hZ2UuaGVpZ2h0IC0gMVxuICAgICAgfS4gQ3VycmVudCB2YWx1ZTogJHtyb3d9YCxcbiAgICApO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0NvbHVtbihpbWFnZSwgY29sdW1uKSB7XG4gIGlmIChjb2x1bW4gPCAwIHx8IGNvbHVtbiA+PSBpbWFnZS53aWR0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYGNvbHVtbiBtdXN0IGJlIGluY2x1ZGVkIGJldHdlZW4gMCBhbmQgJHtcbiAgICAgICAgaW1hZ2Uud2lkdGggLSAxXG4gICAgICB9LiBDdXJyZW50IHZhbHVlOiAke2NvbHVtbn1gLFxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNoZWNrQ2hhbm5lbChpbWFnZSwgY2hhbm5lbCkge1xuICBpZiAoY2hhbm5lbCA8IDAgfHwgY2hhbm5lbCA+PSBpbWFnZS5jaGFubmVscykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgYGNoYW5uZWwgbXVzdCBiZSBpbmNsdWRlZCBiZXR3ZWVuIDAgYW5kICR7XG4gICAgICAgIGltYWdlLmNoYW5uZWxzIC0gMVxuICAgICAgfS4gQ3VycmVudCB2YWx1ZTogJHtjaGFubmVsfWAsXG4gICAgKTtcbiAgfVxufVxuXG4vKipcbiAqIEB0eXBlZGVmIHsoJ25lYXJlc3ROZWlnaGJvcid8J2JpbGluZWFyJyl9IEludGVycG9sYXRpb25BbGdvcml0aG1cbiAqL1xuZXhwb3J0IGNvbnN0IHZhbGlkSW50ZXJwb2xhdGlvbnMgPSB7XG4gIG5lYXJlc3RuZWlnaGJvcjogJ25lYXJlc3ROZWlnaGJvcicsXG4gIG5lYXJlc3RuZWlnaGJvdXI6ICduZWFyZXN0TmVpZ2hib3InLFxuICBiaWxpbmVhcjogJ2JpbGluZWFyJyxcbn07XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0ludGVycG9sYXRpb24oaW50ZXJwb2xhdGlvbikge1xuICBpZiAodHlwZW9mIGludGVycG9sYXRpb24gIT09ICdzdHJpbmcnKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignaW50ZXJwb2xhdGlvbiBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgaW50ZXJwb2xhdGlvbiA9IGludGVycG9sYXRpb24udG9Mb3dlckNhc2UoKTtcbiAgaWYgKCF2YWxpZEludGVycG9sYXRpb25zW2ludGVycG9sYXRpb25dKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoYGludmFsaWQgaW50ZXJwb2xhdGlvbiBhbGdvcml0aG06ICR7aW50ZXJwb2xhdGlvbn1gKTtcbiAgfVxuICByZXR1cm4gdmFsaWRJbnRlcnBvbGF0aW9uc1tpbnRlcnBvbGF0aW9uXTtcbn1cbiIsIi8qKlxuICogTmVhcmVzdCBuZWlnaGJvciByZXNpemluZyBhbGdvcml0aG1cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ltYWdlfSBuZXdJbWFnZVxuICogQHBhcmFtIHtudW1iZXJ9IG5ld1dpZHRoXG4gKiBAcGFyYW0ge251bWJlcn0gbmV3SGVpZ2h0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5lYXJlc3ROZWlnaGJvcihuZXdJbWFnZSwgbmV3V2lkdGgsIG5ld0hlaWdodCkge1xuICBjb25zdCB3UmF0aW8gPSB0aGlzLndpZHRoIC8gbmV3V2lkdGg7XG4gIGNvbnN0IGhSYXRpbyA9IHRoaXMuaGVpZ2h0IC8gbmV3SGVpZ2h0O1xuXG4gIGlmICh0aGlzLmJpdERlcHRoID4gMSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3V2lkdGg7IGkrKykge1xuICAgICAgY29uc3QgdyA9IE1hdGguZmxvb3IoKGkgKyAwLjUpICogd1JhdGlvKTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgbmV3SGVpZ2h0OyBqKyspIHtcbiAgICAgICAgY29uc3QgaCA9IE1hdGguZmxvb3IoKGogKyAwLjUpICogaFJhdGlvKTtcbiAgICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzLmNoYW5uZWxzOyBjKyspIHtcbiAgICAgICAgICBuZXdJbWFnZS5zZXRWYWx1ZVhZKGksIGosIGMsIHRoaXMuZ2V0VmFsdWVYWSh3LCBoLCBjKSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdXaWR0aDsgaSsrKSB7XG4gICAgICBjb25zdCB3ID0gTWF0aC5mbG9vcigoaSArIDAuNSkgKiB3UmF0aW8pO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdIZWlnaHQ7IGorKykge1xuICAgICAgICBjb25zdCBoID0gTWF0aC5mbG9vcigoaiArIDAuNSkgKiBoUmF0aW8pO1xuICAgICAgICBpZiAodGhpcy5nZXRCaXRYWSh3LCBoKSkge1xuICAgICAgICAgIG5ld0ltYWdlLnNldEJpdFhZKGksIGopO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBmYWN0b3JEaW1lbnNpb25zIH0gZnJvbSAnLi4vLi4vLi4vdXRpbC9jb252ZXJ0ZXInO1xuaW1wb3J0IEltYWdlIGZyb20gJy4uLy4uL0ltYWdlJztcbmltcG9ydCB7IHZhbGlkSW50ZXJwb2xhdGlvbnMsIGNoZWNrSW50ZXJwb2xhdGlvbiB9IGZyb20gJy4uLy4uL2ludGVybmFsL2NoZWNrcyc7XG5cbmltcG9ydCBuZWFyZXN0TmVpZ2hib3IgZnJvbSAnLi9uZWFyZXN0TmVpZ2hib3InO1xuXG4vKipcbiAqIFJlc2l6ZSBhbiBpbWFnZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy53aWR0aD10aGlzLndpZHRoXSAtIG5ldyB3aWR0aFxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodD10aGlzLmhlaWdodF0gLSBuZXcgaGVpZ2h0XG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuZmFjdG9yPTFdIC0gc2NhbGluZyBmYWN0b3IgKGFwcGxpZWQgdG8gdGhlIG5ldyB3aWR0aCBhbmQgaGVpZ2h0IHZhbHVlcylcbiAqIEBwYXJhbSB7SW50ZXJwb2xhdGlvbkFsZ29yaXRobX0gW29wdGlvbnMuaW50ZXJwb2xhdGlvbj0nbmVhcmVzdE5laWdoYm9yJ11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMucHJlc2VydmVBc3BlY3RSYXRpbz10cnVlXSAtIHByZXNlcnZlIHdpZHRoL2hlaWdodCByYXRpbyBpZiBvbmx5IG9uZSBvZiB0aGVtIGlzIGRlZmluZWRcbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZXNpemUob3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHtcbiAgICBmYWN0b3IgPSAxLFxuICAgIGludGVycG9sYXRpb24gPSB2YWxpZEludGVycG9sYXRpb25zLm5lYXJlc3RuZWlnaGJvcixcbiAgICBwcmVzZXJ2ZUFzcGVjdFJhdGlvID0gdHJ1ZSxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgaW50ZXJwb2xhdGlvblRvVXNlID0gY2hlY2tJbnRlcnBvbGF0aW9uKGludGVycG9sYXRpb24pO1xuXG4gIGxldCB3aWR0aCA9IG9wdGlvbnMud2lkdGg7XG4gIGxldCBoZWlnaHQgPSBvcHRpb25zLmhlaWdodDtcblxuICBpZiAoIXdpZHRoKSB7XG4gICAgaWYgKGhlaWdodCAmJiBwcmVzZXJ2ZUFzcGVjdFJhdGlvKSB7XG4gICAgICB3aWR0aCA9IE1hdGgucm91bmQoaGVpZ2h0ICogKHRoaXMud2lkdGggLyB0aGlzLmhlaWdodCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aWR0aCA9IHRoaXMud2lkdGg7XG4gICAgfVxuICB9XG4gIGlmICghaGVpZ2h0KSB7XG4gICAgaWYgKHByZXNlcnZlQXNwZWN0UmF0aW8pIHtcbiAgICAgIGhlaWdodCA9IE1hdGgucm91bmQod2lkdGggKiAodGhpcy5oZWlnaHQgLyB0aGlzLndpZHRoKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlaWdodCA9IHRoaXMuaGVpZ2h0O1xuICAgIH1cbiAgfVxuXG4gICh7IHdpZHRoLCBoZWlnaHQgfSA9IGZhY3RvckRpbWVuc2lvbnMoZmFjdG9yLCB3aWR0aCwgaGVpZ2h0KSk7XG5cbiAgaWYgKHdpZHRoID09PSB0aGlzLndpZHRoICYmIGhlaWdodCA9PT0gdGhpcy5oZWlnaHQpIHtcbiAgICBjb25zdCBuZXdJbWFnZSA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXdJbWFnZS5wb3NpdGlvbiA9IFswLCAwXTtcbiAgICByZXR1cm4gbmV3SW1hZ2U7XG4gIH1cblxuICBsZXQgc2hpZnRYID0gTWF0aC5yb3VuZCgodGhpcy53aWR0aCAtIHdpZHRoKSAvIDIpO1xuICBsZXQgc2hpZnRZID0gTWF0aC5yb3VuZCgodGhpcy5oZWlnaHQgLSBoZWlnaHQpIC8gMik7XG4gIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgd2lkdGgsXG4gICAgaGVpZ2h0LFxuICAgIHBvc2l0aW9uOiBbc2hpZnRYLCBzaGlmdFldLFxuICB9KTtcblxuICBzd2l0Y2ggKGludGVycG9sYXRpb25Ub1VzZSkge1xuICAgIGNhc2UgdmFsaWRJbnRlcnBvbGF0aW9ucy5uZWFyZXN0bmVpZ2hib3I6XG4gICAgICBuZWFyZXN0TmVpZ2hib3IuY2FsbCh0aGlzLCBuZXdJbWFnZSwgd2lkdGgsIGhlaWdodCk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICBgdW5zdXBwb3J0ZWQgcmVzaXplIGludGVycG9sYXRpb246ICR7aW50ZXJwb2xhdGlvblRvVXNlfWAsXG4gICAgICApO1xuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBDb252ZXJ0cyBhIGZhY3RvciB2YWx1ZSB0byBhIG51bWJlciBiZXR3ZWVuIDAgYW5kIDFcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ3xudW1iZXJ9IHZhbHVlXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRGYWN0b3IodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBsYXN0ID0gdmFsdWVbdmFsdWUubGVuZ3RoIC0gMV07XG4gICAgdmFsdWUgPSBwYXJzZUZsb2F0KHZhbHVlKTtcbiAgICBpZiAobGFzdCA9PT0gJyUnKSB7XG4gICAgICB2YWx1ZSAvPSAxMDA7XG4gICAgfVxuICB9XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuLyoqXG4gKiBXZSBjYW4gc3BlY2lmeSBhIHRocmVzaG9sZCBhcyBcIjAuNFwiLCBcIjQwJVwiIG9yIDEyM1xuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfG51bWJlcn0gdmFsdWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBtYXhWYWx1ZVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VGhyZXNob2xkKHZhbHVlLCBtYXhWYWx1ZSkge1xuICBpZiAoIW1heFZhbHVlKSB7XG4gICAgdGhyb3cgRXJyb3IoJ2dldFRocmVzaG9sZCA6IHRoZSBtYXhWYWx1ZSBzaG91bGQgYmUgc3BlY2lmaWVkJyk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBsZXQgbGFzdCA9IHZhbHVlW3ZhbHVlLmxlbmd0aCAtIDFdO1xuICAgIGlmIChsYXN0ICE9PSAnJScpIHtcbiAgICAgIHRocm93IEVycm9yKFxuICAgICAgICAnZ2V0VGhyZXNob2xkIDogaWYgdGhlIHZhbHVlIGlzIGEgc3RyaW5nIGl0IG11c3QgZmluaXNoIGJ5ICUnLFxuICAgICAgKTtcbiAgICB9XG4gICAgcmV0dXJuIChwYXJzZUZsb2F0KHZhbHVlKSAvIDEwMCkgKiBtYXhWYWx1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInKSB7XG4gICAgaWYgKHZhbHVlIDwgMSkge1xuICAgICAgcmV0dXJuIHZhbHVlICogbWF4VmFsdWU7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBFcnJvcignZ2V0VGhyZXNob2xkIDogdGhlIHZhbHVlIGlzIG5vdCB2YWxpZCcpO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmYWN0b3JEaW1lbnNpb25zKGZhY3Rvciwgd2lkdGgsIGhlaWdodCkge1xuICBmYWN0b3IgPSBnZXRGYWN0b3IoZmFjdG9yKTtcbiAgbGV0IG5ld1dpZHRoID0gTWF0aC5yb3VuZChmYWN0b3IgKiB3aWR0aCk7XG4gIGxldCBuZXdIZWlnaHQgPSBNYXRoLnJvdW5kKGZhY3RvciAqIGhlaWdodCk7XG5cbiAgaWYgKG5ld1dpZHRoIDw9IDApIHtcbiAgICBuZXdXaWR0aCA9IDE7XG4gIH1cbiAgaWYgKG5ld0hlaWdodCA8PSAwKSB7XG4gICAgbmV3SGVpZ2h0ID0gMTtcbiAgfVxuICByZXR1cm4ge1xuICAgIHdpZHRoOiBuZXdXaWR0aCxcbiAgICBoZWlnaHQ6IG5ld0hlaWdodCxcbiAgfTtcbn1cbiIsIi8vIGJhc2VkIG9uIGh0dHBzOi8vYmdyaW5zLmdpdGh1Yi5pby9UaW55Q29sb3IvZG9jcy90aW55Y29sb3IuaHRtbFxuXG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgUkdCLCBIU1YgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbi8qKlxuICogTWFrZSBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgaW1hZ2UgYW5kIGNvbnZlcnQgdGhlIGNvbG9yIG1vZGVsIHRvIEhTVlxuICogVGhlIHNvdXJjZSBpbWFnZSBoYXMgdG8gYmUgUkdCICFcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtJbWFnZX0gLSBOZXcgaW1hZ2UgaW4gSFNWIGNvbG9yIG1vZGVsXG4gKiBAZXhhbXBsZVxuICogdmFyIGhzdkltYWdlID0gaW1hZ2UuaHN2KCk7XG4gKiAvLyB3ZSBjYW4gY3JlYXRlIG9uZSBpbWFnZSBwZXIgY2hhbm5lbFxuICogdmFyIGNoYW5uZWxzID0gaHN2SW1hZ2Uuc3BsaXQoKTtcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHN2KCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2hzdicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgICBhbHBoYTogWzAsIDFdLFxuICAgIGNvbG9yTW9kZWw6IFtSR0JdLFxuICB9KTtcblxuICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHtcbiAgICBjb2xvck1vZGVsOiBIU1YsXG4gIH0pO1xuXG4gIGxldCBwdHIgPSAwO1xuICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgbGV0IHJlZCA9IGRhdGFbaV07XG4gICAgbGV0IGdyZWVuID0gZGF0YVtpICsgMV07XG4gICAgbGV0IGJsdWUgPSBkYXRhW2kgKyAyXTtcblxuICAgIGxldCBtaW4gPSBNYXRoLm1pbihyZWQsIGdyZWVuLCBibHVlKTtcbiAgICBsZXQgbWF4ID0gTWF0aC5tYXgocmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgbGV0IGRlbHRhID0gbWF4IC0gbWluO1xuICAgIGxldCBodWUgPSAwO1xuICAgIGxldCBzYXR1cmF0aW9uID0gbWF4ID09PSAwID8gMCA6IGRlbHRhIC8gbWF4O1xuICAgIGxldCB2YWx1ZSA9IG1heDtcblxuICAgIGlmIChtYXggIT09IG1pbikge1xuICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgY2FzZSByZWQ6XG4gICAgICAgICAgaHVlID0gKGdyZWVuIC0gYmx1ZSkgLyBkZWx0YSArIChncmVlbiA8IGJsdWUgPyA2IDogMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ3JlZW46XG4gICAgICAgICAgaHVlID0gKGJsdWUgLSByZWQpIC8gZGVsdGEgKyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGJsdWU6XG4gICAgICAgICAgaHVlID0gKHJlZCAtIGdyZWVuKSAvIGRlbHRhICsgNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gICAgICB9XG4gICAgICBodWUgLz0gNjtcbiAgICB9XG5cbiAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGh1ZSAqIHRoaXMubWF4VmFsdWU7XG4gICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSBzYXR1cmF0aW9uICogdGhpcy5tYXhWYWx1ZTtcbiAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IHZhbHVlO1xuICAgIGlmICh0aGlzLmFscGhhKSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGRhdGFbaSArIDNdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdJbWFnZTtcbn1cbiIsIi8vIGh0dHA6Ly93d3cuZWFzeXJnYi5jb20vaW5kZXgucGhwP1g9TUFUSCZIPTE4I3RleHQxOFxuLy8gY2hlY2sgcmdiVG9Ic2wgOiBodHRwczovL2Jncmlucy5naXRodWIuaW8vVGlueUNvbG9yL2RvY3MvdGlueWNvbG9yLmh0bWxcblxuaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcbmltcG9ydCB7IFJHQiwgSFNMIH0gZnJvbSAnLi4vbW9kZWwvbW9kZWwnO1xuXG4vKipcbiAqIE1ha2UgYSBjb3B5IG9mIHRoZSBjdXJyZW50IGltYWdlIGFuZCBjb252ZXJ0IHRoZSBjb2xvciBtb2RlbCB0byBIU0xcbiAqIFRoZSBzb3VyY2UgaW1hZ2UgaGFzIHRvIGJlIFJHQiAhXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7SW1hZ2V9IC0gTmV3IGltYWdlIGluIEhTTCBjb2xvciBtb2RlbFxuICogQGV4YW1wbGVcbiAqIHZhciBoc2xJbWFnZSA9IGltYWdlLmhzbCgpO1xuICogLy8gd2UgY2FuIGNyZWF0ZSBvbmUgaW1hZ2UgcGVyIGNoYW5uZWxcbiAqIHZhciBjaGFubmVscyA9IGhzbEltYWdlLnNwbGl0KCk7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGhzbCgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdoc2wnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gICAgYWxwaGE6IFswLCAxXSxcbiAgICBjb2xvck1vZGVsOiBbUkdCXSxcbiAgfSk7XG5cbiAgbGV0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgY29sb3JNb2RlbDogSFNMLFxuICB9KTtcblxuICBsZXQgdGhyZXNob2xkID0gTWF0aC5mbG9vcih0aGlzLm1heFZhbHVlIC8gMik7XG4gIGxldCBwdHIgPSAwO1xuICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgbGV0IHJlZCA9IGRhdGFbaV07XG4gICAgbGV0IGdyZWVuID0gZGF0YVtpICsgMV07XG4gICAgbGV0IGJsdWUgPSBkYXRhW2kgKyAyXTtcblxuICAgIGxldCBtYXggPSBNYXRoLm1heChyZWQsIGdyZWVuLCBibHVlKTtcbiAgICBsZXQgbWluID0gTWF0aC5taW4ocmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgbGV0IGh1ZSA9IDA7XG4gICAgbGV0IHNhdHVyYXRpb24gPSAwO1xuICAgIGxldCBsdW1pbmFuY2UgPSAobWF4ICsgbWluKSAvIDI7XG4gICAgaWYgKG1heCAhPT0gbWluKSB7XG4gICAgICBsZXQgZGVsdGEgPSBtYXggLSBtaW47XG4gICAgICBzYXR1cmF0aW9uID1cbiAgICAgICAgbHVtaW5hbmNlID4gdGhyZXNob2xkID8gZGVsdGEgLyAoMiAtIG1heCAtIG1pbikgOiBkZWx0YSAvIChtYXggKyBtaW4pO1xuICAgICAgc3dpdGNoIChtYXgpIHtcbiAgICAgICAgY2FzZSByZWQ6XG4gICAgICAgICAgaHVlID0gKGdyZWVuIC0gYmx1ZSkgLyBkZWx0YSArIChncmVlbiA8IGJsdWUgPyA2IDogMCk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgZ3JlZW46XG4gICAgICAgICAgaHVlID0gKGJsdWUgLSByZWQpIC8gZGVsdGEgKyAyO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIGJsdWU6XG4gICAgICAgICAgaHVlID0gKHJlZCAtIGdyZWVuKSAvIGRlbHRhICsgNDtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3VucmVhY2hhYmxlJyk7XG4gICAgICB9XG4gICAgICBodWUgLz0gNjtcbiAgICB9XG5cbiAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGh1ZSAqIHRoaXMubWF4VmFsdWU7XG4gICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSBzYXR1cmF0aW9uICogdGhpcy5tYXhWYWx1ZTtcbiAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGx1bWluYW5jZTtcbiAgICBpZiAodGhpcy5hbHBoYSkge1xuICAgICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSBkYXRhW2kgKyAzXTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCIvLyBodHRwOi8vd3d3LmVhc3lyZ2IuY29tL2luZGV4LnBocD9YPU1BVEgmSD0xOCN0ZXh0MThcbi8vIGNoZWNrIHJnYlRvSHNsIDogaHR0cHM6Ly9iZ3JpbnMuZ2l0aHViLmlvL1RpbnlDb2xvci9kb2NzL3Rpbnljb2xvci5odG1sXG5cbmltcG9ydCBJbWFnZSBmcm9tICcuLi9JbWFnZSc7XG5pbXBvcnQgeyBSR0IsIENNWUsgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbi8qKlxuICogTWFrZSBhIGNvcHkgb2YgdGhlIGN1cnJlbnQgaW1hZ2UgYW5kIGNvbnZlcnQgdGhlIGNvbG9yIG1vZGVsIHRvIENNWUtcbiAqIFRoZSBzb3VyY2UgaW1hZ2UgaGFzIHRvIGJlIFJHQiAhXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7SW1hZ2V9IC0gTmV3IGltYWdlIGluIENNWUsgY29sb3IgbW9kZWxcbiAqIEBleGFtcGxlXG4gKiB2YXIgY215a0ltYWdlID0gaW1hZ2UuY215aygpO1xuICogLy8gd2UgY2FuIGNyZWF0ZSBvbmUgaW1hZ2UgcGVyIGNoYW5uZWxcbiAqIHZhciBjaGFubmVscyA9IGNteWtJbWFnZS5zcGxpdCgpO1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjbXlrKCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2NteWsnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gICAgYWxwaGE6IFswLCAxXSxcbiAgICBjb2xvck1vZGVsOiBbUkdCXSxcbiAgfSk7XG5cbiAgbGV0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgY29tcG9uZW50czogNCxcbiAgICBjb2xvck1vZGVsOiBDTVlLLFxuICB9KTtcblxuICBsZXQgcHRyID0gMDtcbiAgbGV0IGRhdGEgPSB0aGlzLmRhdGE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgIGxldCByZWQgPSBkYXRhW2ldO1xuICAgIGxldCBncmVlbiA9IGRhdGFbaSArIDFdO1xuICAgIGxldCBibHVlID0gZGF0YVtpICsgMl07XG5cbiAgICBsZXQgYmxhY2sgPSBNYXRoLm1pbihcbiAgICAgIHRoaXMubWF4VmFsdWUgLSByZWQsXG4gICAgICB0aGlzLm1heFZhbHVlIC0gZ3JlZW4sXG4gICAgICB0aGlzLm1heFZhbHVlIC0gYmx1ZSxcbiAgICApO1xuICAgIGxldCBjeWFuID0gKHRoaXMubWF4VmFsdWUgLSByZWQgLSBibGFjaykgLyAoMSAtIGJsYWNrIC8gdGhpcy5tYXhWYWx1ZSk7XG4gICAgbGV0IG1hZ2VudGEgPSAodGhpcy5tYXhWYWx1ZSAtIGdyZWVuIC0gYmxhY2spIC8gKDEgLSBibGFjayAvIHRoaXMubWF4VmFsdWUpO1xuICAgIGxldCB5ZWxsb3cgPSAodGhpcy5tYXhWYWx1ZSAtIGJsdWUgLSBibGFjaykgLyAoMSAtIGJsYWNrIC8gdGhpcy5tYXhWYWx1ZSk7XG5cbiAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IE1hdGgucm91bmQoY3lhbik7XG4gICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSBNYXRoLnJvdW5kKG1hZ2VudGEpO1xuICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gTWF0aC5yb3VuZCh5ZWxsb3cpO1xuICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gTWF0aC5yb3VuZChibGFjayk7XG4gICAgaWYgKHRoaXMuYWxwaGEpIHtcbiAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gZGF0YVtpICsgM107XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcblxuLyoqXG4gKiBNYWtlIGEgY29weSBvZiB0aGUgY3VycmVudCBpbWFnZSBhbmQgY29udmVydCB0byBSR0JBIDggYml0c1xuICogVGhvc2UgaW1hZ2VzIGFyZSB0aGUgb25lIHRoYXQgYXJlIGRpc3BsYXllZCBpbiBhIGNhbnZhcy5cbiAqIFJHQiBtb2RlbCBpbiA4IGJpdHMgcGVyIGNoYW5uZWwgYW5kIGNvbnRhaW5pbmcgYXMgd2VsbCBhbiBhbHBoYSBjaGFubmVsLlxuICogVGhlIHNvdXJjZSBpbWFnZSBtYXkgYmU6XG4gKiAqIGEgbWFzayAoYmluYXJ5IGltYWdlKVxuICogKiBhIGdyZXkgaW1hZ2UgKDgsIDE2IG9yIDMyIGJpdHMpIHdpdGggb3Igd2l0aG91dCBhbHBoYSBjaGFubmVsXG4gKiAqIGEgY29sb3IgaW1hZ2UgKDgsIDE2IG9yIDMyIGJpdHMpIHdpdGggb3Igd2l0aG91dCBhbHBoYSBjaGFubmVsIGluIHdpdGggUkdCIG1vZGVsXG4gKiAqIHdoZW4gdGhlIGltYWdlIGlzIDMyIGJpdHMsIGEgcmVzY2FsaW5nIGlzIHBlcmZvcm1lZCBmcm9tIHRoZSBtaW4gYW5kIG1heCB2YWx1ZXNcbiAqICogdG8gbWFwIHZhbHVlcyBmcm9tIDAgdG8gMjU1XG4gKiBUaGUgY29udmVyc2lvbiBpcyBiYXNlZCBvbiB7QGxpbmsgSW1hZ2UjZ2V0UkdCQURhdGF9LlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge0ltYWdlfSAtIE5ldyBpbWFnZSBpbiBSR0IgY29sb3IgbW9kZWwgd2l0aCBhbHBoYSBjaGFubmVsXG4gKiBAZXhhbXBsZVxuICogdmFyIHJnYmFJbWFnZSA9IGltYWdlLnJnYmE4KCk7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJnYmE4KCkge1xuICByZXR1cm4gbmV3IEltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB0aGlzLmdldFJHQkFEYXRhKCksIHtcbiAgICBraW5kOiAnUkdCQScsXG4gICAgcGFyZW50OiB0aGlzLFxuICB9KTtcbn1cbiIsIi8qKlxuICogQHR5cGVkZWYgeygnbHVtYTcwOSd8J2x1bWE2MDEnfCdtYXhpbXVtJ3wnbWluaW11bSd8J2F2ZXJhZ2UnfCdtaW5tYXgnfCdyZWQnfCdncmVlbid8J2JsdWUnfCdjeWFuJ3wnbWFnZW50YSd8J3llbGxvdyd8J2JsYWNrJ3wnaHVlJ3wnc2F0dXJhdGlvbid8J2xpZ2h0bmVzcycpfSBHcmV5QWxnb3JpdGhtXG4gKi9cblxuZXhwb3J0IGNvbnN0IG1ldGhvZHMgPSB7XG4gIGx1bWE3MDkocmVkLCBncmVlbiwgYmx1ZSkge1xuICAgIC8vIHNSR0JcbiAgICAvLyByZXR1cm4gcmVkICogMC4yMTI2ICsgZ3JlZW4gKiAwLjcxNTIgKyBibHVlICogMC4wNzIyO1xuICAgIC8vIExldCdzIGRvIGEgbGl0dGxlIHRyaWNrIC4uLiBpbiBvcmRlciBub3QgY29udmVydCB0aGUgaW50ZWdlciB0byBhIGRvdWJsZSB3ZSBkb1xuICAgIC8vIHRoZSBtdWx0aXBsaWNhdGlvbiB3aXRoIGludGVnZXIgdG8gcmVhY2ggYSB0b3RhbCBvZiAzMjc2OCBhbmQgdGhlbiBzaGlmdCB0aGUgYml0c1xuICAgIC8vIG9mIDE1IHRvIHRoZSByaWdodFxuICAgIC8vIFRoaXMgZG9lcyBhIE1hdGguZmxvb3IgYW5kIG1heSBsZWFkIHRvIHNtYWxsIChtYXggMSkgZGlmZmVyZW5jZVxuICAgIC8vIFNhbWUgcmVzdWx0LCA+IDEwJSBmYXN0ZXIgb24gdGhlIGZ1bGwgZ3JleSBjb252ZXJzaW9uXG4gICAgcmV0dXJuIChyZWQgKiA2OTY2ICsgZ3JlZW4gKiAyMzQzNiArIGJsdWUgKiAyMzY2KSA+PiAxNTtcbiAgfSxcbiAgbHVtYTYwMShyZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgLy8gTlRTQ1xuICAgIC8vIHJldHVybiB0aGlzLnJlZCAqIDAuMjk5ICsgZ3JlZW4gKiAwLjU4NyArIGJsdWUgKiAwLjExNDtcbiAgICByZXR1cm4gKHJlZCAqIDk3OTggKyBncmVlbiAqIDE5MjM1ICsgYmx1ZSAqIDM3MzUpID4+IDE1O1xuICB9LFxuICBtYXhpbXVtKHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICByZXR1cm4gTWF0aC5tYXgocmVkLCBncmVlbiwgYmx1ZSk7XG4gIH0sXG4gIG1pbmltdW0ocmVkLCBncmVlbiwgYmx1ZSkge1xuICAgIHJldHVybiBNYXRoLm1pbihyZWQsIGdyZWVuLCBibHVlKTtcbiAgfSxcbiAgYXZlcmFnZShyZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgcmV0dXJuICgocmVkICsgZ3JlZW4gKyBibHVlKSAvIDMpID4+IDA7XG4gIH0sXG4gIG1pbm1heChyZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgcmV0dXJuIChNYXRoLm1heChyZWQsIGdyZWVuLCBibHVlKSArIE1hdGgubWluKHJlZCwgZ3JlZW4sIGJsdWUpKSAvIDI7XG4gIH0sXG4gIHJlZChyZWQpIHtcbiAgICByZXR1cm4gcmVkO1xuICB9LFxuICBncmVlbihyZWQsIGdyZWVuKSB7XG4gICAgcmV0dXJuIGdyZWVuO1xuICB9LFxuICBibHVlKHJlZCwgZ3JlZW4sIGJsdWUpIHtcbiAgICByZXR1cm4gYmx1ZTtcbiAgfSxcbiAgY3lhbihyZWQsIGdyZWVuLCBibHVlLCBpbWFnZSkge1xuICAgIGxldCBibGFjayA9IG1ldGhvZHMuYmxhY2socmVkLCBncmVlbiwgYmx1ZSwgaW1hZ2UpO1xuICAgIHJldHVybiAoKGltYWdlLm1heFZhbHVlIC0gcmVkIC0gYmxhY2spIC8gKDEgLSBibGFjayAvIGltYWdlLm1heFZhbHVlKSkgPj4gMDtcbiAgfSxcbiAgbWFnZW50YShyZWQsIGdyZWVuLCBibHVlLCBpbWFnZSkge1xuICAgIGxldCBibGFjayA9IG1ldGhvZHMuYmxhY2socmVkLCBncmVlbiwgYmx1ZSwgaW1hZ2UpO1xuICAgIHJldHVybiAoXG4gICAgICAoKGltYWdlLm1heFZhbHVlIC0gZ3JlZW4gLSBibGFjaykgLyAoMSAtIGJsYWNrIC8gaW1hZ2UubWF4VmFsdWUpKSA+PiAwXG4gICAgKTtcbiAgfSxcbiAgeWVsbG93KHJlZCwgZ3JlZW4sIGJsdWUsIGltYWdlKSB7XG4gICAgbGV0IGJsYWNrID0gbWV0aG9kcy5ibGFjayhyZWQsIGdyZWVuLCBibHVlLCBpbWFnZSk7XG4gICAgcmV0dXJuIChcbiAgICAgICgoaW1hZ2UubWF4VmFsdWUgLSBibHVlIC0gYmxhY2spIC8gKDEgLSBibGFjayAvIGltYWdlLm1heFZhbHVlKSkgPj4gMFxuICAgICk7XG4gIH0sXG4gIGJsYWNrKHJlZCwgZ3JlZW4sIGJsdWUsIGltYWdlKSB7XG4gICAgcmV0dXJuIE1hdGgubWluKFxuICAgICAgaW1hZ2UubWF4VmFsdWUgLSByZWQsXG4gICAgICBpbWFnZS5tYXhWYWx1ZSAtIGdyZWVuLFxuICAgICAgaW1hZ2UubWF4VmFsdWUgLSBibHVlLFxuICAgICk7XG4gIH0sXG4gIGh1ZShyZWQsIGdyZWVuLCBibHVlLCBpbWFnZSkge1xuICAgIGxldCBtaW4gPSBtZXRob2RzLm1pbihyZWQsIGdyZWVuLCBibHVlKTtcbiAgICBsZXQgbWF4ID0gbWV0aG9kcy5tYXgocmVkLCBncmVlbiwgYmx1ZSk7XG4gICAgaWYgKG1heCA9PT0gbWluKSB7XG4gICAgICByZXR1cm4gMDtcbiAgICB9XG4gICAgbGV0IGh1ZSA9IDA7XG4gICAgbGV0IGRlbHRhID0gbWF4IC0gbWluO1xuXG4gICAgc3dpdGNoIChtYXgpIHtcbiAgICAgIGNhc2UgcmVkOlxuICAgICAgICBodWUgPSAoZ3JlZW4gLSBibHVlKSAvIGRlbHRhICsgKGdyZWVuIDwgYmx1ZSA/IDYgOiAwKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlIGdyZWVuOlxuICAgICAgICBodWUgPSAoYmx1ZSAtIHJlZCkgLyBkZWx0YSArIDI7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSBibHVlOlxuICAgICAgICBodWUgPSAocmVkIC0gZ3JlZW4pIC8gZGVsdGEgKyA0O1xuICAgICAgICBicmVhaztcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbiAgICB9XG4gICAgcmV0dXJuICgoaHVlIC8gNikgKiBpbWFnZS5tYXhWYWx1ZSkgPj4gMDtcbiAgfSxcbiAgc2F0dXJhdGlvbihyZWQsIGdyZWVuLCBibHVlLCBpbWFnZSkge1xuICAgIC8vIGZyb20gSFNWIG1vZGVsXG4gICAgbGV0IG1pbiA9IG1ldGhvZHMubWluKHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgIGxldCBtYXggPSBtZXRob2RzLm1heChyZWQsIGdyZWVuLCBibHVlKTtcbiAgICBsZXQgZGVsdGEgPSBtYXggLSBtaW47XG4gICAgcmV0dXJuIG1heCA9PT0gMCA/IDAgOiAoZGVsdGEgLyBtYXgpICogaW1hZ2UubWF4VmFsdWU7XG4gIH0sXG4gIGxpZ2h0bmVzcyhyZWQsIGdyZWVuLCBibHVlKSB7XG4gICAgbGV0IG1pbiA9IG1ldGhvZHMubWluKHJlZCwgZ3JlZW4sIGJsdWUpO1xuICAgIGxldCBtYXggPSBtZXRob2RzLm1heChyZWQsIGdyZWVuLCBibHVlKTtcbiAgICByZXR1cm4gKG1heCArIG1pbikgLyAyO1xuICB9LFxufTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1ldGhvZHMsICdsdW1pbm9zaXR5Jywge1xuICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgdmFsdWU6IG1ldGhvZHMubGlnaHRuZXNzLFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobWV0aG9kcywgJ2x1bWluYW5jZScsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIHZhbHVlOiBtZXRob2RzLmxpZ2h0bmVzcyxcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KG1ldGhvZHMsICdtaW4nLCB7XG4gIGVudW1lcmFibGU6IGZhbHNlLFxuICB2YWx1ZTogbWV0aG9kcy5taW5pbXVtLFxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkobWV0aG9kcywgJ21heCcsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIHZhbHVlOiBtZXRob2RzLm1heGltdW0sXG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShtZXRob2RzLCAnYnJpZ2h0bmVzcycsIHtcbiAgZW51bWVyYWJsZTogZmFsc2UsXG4gIHZhbHVlOiBtZXRob2RzLm1heGltdW0sXG59KTtcblxuZXhwb3J0IGNvbnN0IG5hbWVzID0ge307XG5PYmplY3Qua2V5cyhtZXRob2RzKS5mb3JFYWNoKChuYW1lKSA9PiB7XG4gIG5hbWVzW25hbWVdID0gbmFtZTtcbn0pO1xuIiwiaW1wb3J0IHsgY2xhbXAgfSBmcm9tICcuLi9pbnRlcm5hbC9jbGFtcCc7XG5pbXBvcnQgeyBnZXRPdXRwdXRJbWFnZSB9IGZyb20gJy4uL2ludGVybmFsL2dldE91dHB1dEltYWdlJztcbmltcG9ydCB7IEdSRVkgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbmltcG9ydCB7IG1ldGhvZHMgfSBmcm9tICcuL2dyZXlBbGdvcml0aG1zJztcblxuLyoqXG4gKiBDYWxsIGJhY2sgdGhhdCBjb252ZXJ0cyB0aGUgUkdCIGNoYW5uZWxzIHRvIGdyZXkuIEl0IHdpbGwgYmUgY2xhbXBlZCBhZnRlci5cbiAqIEBjYWxsYmFjayBHcmV5QWxnb3JpdGhtQ2FsbGJhY2tcbiAqIEBwYXJhbSB7bnVtYmVyfSByZWQgLSB2YWx1ZSBvZiB0aGUgcmVkIGNoYW5uZWxcbiAqIEBwYXJhbSB7bnVtYmVyfSBncmVlbiAtIHZhbHVlIG9mIHRoZSBncmVlbiBjaGFubmVsXG4gKiBAcGFyYW0ge251bWJlcn0gYmx1ZSAtIHZhbHVlIG9mIHRoZSBibHVlIGNoYW5uZWxcbiAqIEByZXR1cm4ge251bWJlcn0gdmFsdWUgb2YgdGhlIGdyZXkgY2hhbm5lbFxuICovXG5cbi8qKlxuICogQ29udmVydHMgdGhlIGN1cnJlbnQgaW1hZ2UgdG8gZ3JleXNjYWxlLlxuICogVGhlIHNvdXJjZSBpbWFnZSBoYXMgdG8gYmUgUkdCLlxuICogSWYgdGhlcmUgaXMgYW4gYWxwaGEgY2hhbm5lbCB3ZSBuZWVkIHRvIGRlY2lkZSB3aGF0IHRvIGRvOlxuICogKiBrZWVwQWxwaGEgOiB3ZSB3aWxsIGtlZXAgdGhlIGFscGhhIGNoYW5uZWwgYW5kIHlvdSB3aWxsIGdldCBhIEdSRVkgLyBBIGltYWdlXG4gKiAqIG1lcmdlQWxwaGEgOiB3ZSB3aWxsIG11bHRpcGx5IGVhY2ggcGl4ZWwgb2YgdGhlIGltYWdlIGJ5IHRoZSBhbHBoYVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7R3JleUFsZ29yaXRobXxHcmV5QWxnb3JpdGhtQ2FsbGJhY2t9IFtvcHRpb25zLmFsZ29yaXRobT0nbHVtYTcwOSddIC0gQWxnb3JpdGhtIHRvIGdldCB0aGUgZ3JleSB2YWx1ZSBmcm9tIFJHQiB2YWx1ZXNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMua2VlcEFscGhhPWZhbHNlXSAtIElmIHRydWUsIHRoZSBSR0IgdmFsdWVzIGFyZSB0cmVhdGVkXG4gKiAgICAgICAgICBzZXBhcmF0ZWx5IGZyb20gdGhlIGFscGhhIGNoYW5uZWwgYW5kIHRoZSBtZXRob2QgcmV0dXJucyBhIEdSRVlBIGltYWdlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5tZXJnZUFscGhhPXRydWVdIC0gSWYgdHJ1ZSwgdGhlIGFscGhhIGNoYW5uZWwgd2lsbCBiZSB1c2VkIHRvIHNjYWxlIHRoZSBncmV5IHBpeGVsLlxuICogQHBhcmFtIHtJbWFnZX0gW29wdGlvbnMub3V0XVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdyZXkob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGFsZ29yaXRobSA9ICdsdW1hNzA5Jywga2VlcEFscGhhID0gZmFsc2UsIG1lcmdlQWxwaGEgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIGlmICh0eXBlb2YgYWxnb3JpdGhtICE9PSAnc3RyaW5nJyAmJiB0eXBlb2YgYWxnb3JpdGhtICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWxnb3JpdGhtIG11c3QgYmUgYSBzdHJpbmcgb3IgYSBmdW5jdGlvbicpO1xuICB9XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdncmV5Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGFscGhhOiBbMCwgMV0sXG4gIH0pO1xuXG4gIGlmICh0aGlzLmNvbXBvbmVudHMgPT09IDEpIHtcbiAgICBhbGdvcml0aG0gPSAncmVkJzsgLy8gYWN0dWFsbHkgd2UganVzdCB0YWtlIHRoZSBmaXJzdCBjaGFubmVsIGlmIGl0IGlzIGEgZ3JleSBpbWFnZVxuICB9XG5cbiAga2VlcEFscGhhICY9IHRoaXMuYWxwaGE7XG4gIG1lcmdlQWxwaGEgJj0gdGhpcy5hbHBoYTtcbiAgaWYgKGtlZXBBbHBoYSkge1xuICAgIG1lcmdlQWxwaGEgPSBmYWxzZTtcbiAgfVxuXG4gIGxldCBuZXdJbWFnZSA9IGdldE91dHB1dEltYWdlKHRoaXMsIG9wdGlvbnMsIHtcbiAgICBjb21wb25lbnRzOiAxLFxuICAgIGFscGhhOiBrZWVwQWxwaGEsXG4gICAgY29sb3JNb2RlbDogR1JFWSxcbiAgfSk7XG5cbiAgbGV0IG1ldGhvZDtcbiAgaWYgKHR5cGVvZiBhbGdvcml0aG0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBtZXRob2QgPSBhbGdvcml0aG07XG4gIH0gZWxzZSB7XG4gICAgbWV0aG9kID0gbWV0aG9kc1thbGdvcml0aG0udG9Mb3dlckNhc2UoKV07XG4gICAgaWYgKCFtZXRob2QpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihgdW5zdXBwb3J0ZWQgZ3JleSBhbGdvcml0aG06ICR7YWxnb3JpdGhtfWApO1xuICAgIH1cbiAgfVxuXG4gIGxldCBwdHIgPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgIGlmIChtZXJnZUFscGhhKSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGNsYW1wKFxuICAgICAgICAobWV0aG9kKHRoaXMuZGF0YVtpXSwgdGhpcy5kYXRhW2kgKyAxXSwgdGhpcy5kYXRhW2kgKyAyXSwgdGhpcykgKlxuICAgICAgICAgIHRoaXMuZGF0YVtpICsgdGhpcy5jb21wb25lbnRzXSkgL1xuICAgICAgICAgIHRoaXMubWF4VmFsdWUsXG4gICAgICAgIHRoaXMsXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IGNsYW1wKFxuICAgICAgICBtZXRob2QodGhpcy5kYXRhW2ldLCB0aGlzLmRhdGFbaSArIDFdLCB0aGlzLmRhdGFbaSArIDJdLCB0aGlzKSxcbiAgICAgICAgdGhpcyxcbiAgICAgICk7XG4gICAgICBpZiAobmV3SW1hZ2UuYWxwaGEpIHtcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSB0aGlzLmRhdGFbaSArIHRoaXMuY29tcG9uZW50c107XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLypcbiAqXG4gKiBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZpamkvQXV0b19UaHJlc2hvbGQvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9maWppL3RocmVzaG9sZC9BdXRvX1RocmVzaG9sZC5qYXZhXG4gKiBJbnRlcm1vZGVzOiBUaGlzIGFzc3VtZXMgYSBiaW1vZGFsIGhpc3RvZ3JhbS4gSW1wbGVtZW50cyB0aGUgdGhyZXNob2xkaW5nIFByZXdpdHQsIEpNUyAmIE1lbmRlbHNvaG4sIE1MICgxOTY2KSxcbiAqIFwiVGhlIGFuYWx5c2lzIG9mIGNlbGwgaW1hZ2VzXCIsIEFubmFscyBvZiB0aGUgTmV3WW9yayBBY2FkZW15IG9mIFNjaWVuY2VzIDEyODogMTAzNS0xMDUzXG4gKlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGludGVybW9kZXMoaGlzdG9ncmFtKSB7XG4gIGxldCBpSGlzdG8gPSBoaXN0b2dyYW0uc2xpY2UoKTtcbiAgbGV0IGl0ZXIgPSAwO1xuICB3aGlsZSAoIWJpbW9kYWxUZXN0KGlIaXN0bykpIHtcbiAgICAvLyBzbW9vdGggd2l0aCBhIDMgcG9pbnQgcnVubmluZyBtZWFuIGZpbHRlclxuICAgIGxldCBwcmV2aW91cyA9IDA7XG4gICAgbGV0IGN1cnJlbnQgPSAwO1xuICAgIGxldCBuZXh0ID0gaUhpc3RvWzBdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgcHJldmlvdXMgPSBjdXJyZW50O1xuICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgICBuZXh0ID0gaUhpc3RvW2kgKyAxXTtcbiAgICAgIGlIaXN0b1tpXSA9IChwcmV2aW91cyArIGN1cnJlbnQgKyBuZXh0KSAvIDM7XG4gICAgfVxuICAgIGlIaXN0b1toaXN0b2dyYW0ubGVuZ3RoIC0gMV0gPSAoY3VycmVudCArIG5leHQpIC8gMztcbiAgICBpdGVyKys7XG4gICAgaWYgKGl0ZXIgPiAxMDAwMCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnRlcm1vZGVzIFRocmVzaG9sZCBub3QgZm91bmQgYWZ0ZXIgMTAwMDAgaXRlcmF0aW9ucycpO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRoZSB0aHJlc2hvbGQgaXMgdGhlIG1lYW4gYmV0d2VlbiB0aGUgdHdvIHBlYWtzLlxuICBsZXQgdHQgPSAwO1xuICBmb3IgKGxldCBpID0gMTsgaSA8IGhpc3RvZ3JhbS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBpZiAoaUhpc3RvW2kgLSAxXSA8IGlIaXN0b1tpXSAmJiBpSGlzdG9baSArIDFdIDwgaUhpc3RvW2ldKSB7XG4gICAgICB0dCArPSBpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gTWF0aC5mbG9vcih0dCAvIDIuMCk7XG59XG5cbmZ1bmN0aW9uIGJpbW9kYWxUZXN0KGlIaXN0bykge1xuICBsZXQgYiA9IGZhbHNlO1xuICBsZXQgbW9kZXMgPSAwO1xuXG4gIGZvciAobGV0IGsgPSAxOyBrIDwgaUhpc3RvLmxlbmd0aCAtIDE7IGsrKykge1xuICAgIGlmIChpSGlzdG9bayAtIDFdIDwgaUhpc3RvW2tdICYmIGlIaXN0b1trICsgMV0gPCBpSGlzdG9ba10pIHtcbiAgICAgIG1vZGVzKys7XG4gICAgICBpZiAobW9kZXMgPiAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKG1vZGVzID09PSAyKSB7XG4gICAgYiA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIGI7XG59XG4iLCIvKlxuICogc2VlIGh0dHA6Ly9yc2IuaW5mby5uaWguZ292L2lqL2RldmVsb3Blci9zb3VyY2UvaWovcHJvY2Vzcy9BdXRvVGhyZXNob2xkZXIuamF2YS5odG1sXG4gKiBUaGUgbWV0aG9kIGlzIHByZXNlbnQgaW46IEFuIGl0ZXJhdGl2ZSBpbXBsZW1lbnRhdGlvbiBvZiBLaXR0bGVyIGFuZCBJbGxpbmd3b3J0aCdzIE1pbmltdW0gRXJyb3JcbiAqIHRocmVzaG9sZGluZzpLaXR0bGVyLCBKICYgSWxsaW5nd29ydGgsIEogKDE5ODYpLCBcIk1pbmltdW0gZXJyb3IgdGhyZXNob2xkaW5nXCIsIFBhdHRlcm4gUmVjb2duaXRpb24gMTk6IDQxLTQ3XG4gKiBAcGFyYW0gaGlzdG9ncmFtIC0gdGhlIGhpc3RvZ3JhbSBvZiB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB0b3RhbCAtIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBpbWFnZVxuICogQHJldHVybnMge251bWJlcn0gLSB0aGUgdGhyZXNob2xkXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWluRXJyb3IoaGlzdG9ncmFtLCB0b3RhbCkge1xuICBsZXQgdGhyZXNob2xkO1xuICBsZXQgVHByZXYgPSAtMjtcbiAgbGV0IG11LCBudSwgcCwgcSwgc2lnbWEyLCB0YXUyLCB3MCwgdzEsIHcyLCBzcXRlcm0sIHRlbXA7XG5cbiAgLyogQ2FsY3VsYXRlIHRoZSBtZWFuIGdyYXktbGV2ZWwgKi9cbiAgbGV0IG1lYW4gPSAwLjA7XG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgbWVhbiArPSBpaCAqIGhpc3RvZ3JhbVtpaF07XG4gIH1cblxuICBtZWFuIC89IHRvdGFsO1xuXG4gIHRocmVzaG9sZCA9IG1lYW47XG5cbiAgd2hpbGUgKHRocmVzaG9sZCAhPT0gVHByZXYpIHtcbiAgICAvLyBDYWxjdWxhdGUgc29tZSBzdGF0aXN0aWNzLlxuICAgIGxldCBzdW1BMSA9IHN1bUEoaGlzdG9ncmFtLCB0aHJlc2hvbGQpO1xuICAgIGxldCBzdW1BMiA9IHN1bUEoaGlzdG9ncmFtLCBoaXN0b2dyYW0ubGVuZ3RoIC0gMSk7XG4gICAgbGV0IHN1bUIxID0gc3VtQihoaXN0b2dyYW0sIHRocmVzaG9sZCk7XG4gICAgbGV0IHN1bUIyID0gc3VtQihoaXN0b2dyYW0sIGhpc3RvZ3JhbS5sZW5ndGggLSAxKTtcbiAgICBsZXQgc3VtQzEgPSBzdW1DKGhpc3RvZ3JhbSwgdGhyZXNob2xkKTtcbiAgICBsZXQgc3VtQzIgPSBzdW1DKGhpc3RvZ3JhbSwgaGlzdG9ncmFtLmxlbmd0aCAtIDEpO1xuXG4gICAgbXUgPSBzdW1CMSAvIHN1bUExO1xuICAgIG51ID0gKHN1bUIyIC0gc3VtQjEpIC8gKHN1bUEyIC0gc3VtQTEpO1xuICAgIHAgPSBzdW1BMSAvIHN1bUEyO1xuICAgIHEgPSAoc3VtQTIgLSBzdW1BMSkgLyBzdW1BMjtcbiAgICBzaWdtYTIgPSBzdW1DMSAvIHN1bUExIC0gbXUgKiBtdTtcbiAgICB0YXUyID0gKHN1bUMyIC0gc3VtQzEpIC8gKHN1bUEyIC0gc3VtQTEpIC0gbnUgKiBudTtcblxuICAgIC8vIFRoZSB0ZXJtcyBvZiB0aGUgcXVhZHJhdGljIGVxdWF0aW9uIHRvIGJlIHNvbHZlZC5cbiAgICB3MCA9IDEuMCAvIHNpZ21hMiAtIDEuMCAvIHRhdTI7XG4gICAgdzEgPSBtdSAvIHNpZ21hMiAtIG51IC8gdGF1MjtcbiAgICB3MiA9XG4gICAgICAobXUgKiBtdSkgLyBzaWdtYTIgLVxuICAgICAgKG51ICogbnUpIC8gdGF1MiArXG4gICAgICBNYXRoLmxvZzEwKChzaWdtYTIgKiAocSAqIHEpKSAvICh0YXUyICogKHAgKiBwKSkpO1xuXG4gICAgLy8gSWYgdGhlIG5leHQgdGhyZXNob2xkIHdvdWxkIGJlIGltYWdpbmFyeSwgcmV0dXJuIHdpdGggdGhlIGN1cnJlbnQgb25lLlxuICAgIHNxdGVybSA9IHcxICogdzEgLSB3MCAqIHcyO1xuICAgIGlmIChzcXRlcm0gPCAwKSB7XG4gICAgICByZXR1cm4gdGhyZXNob2xkO1xuICAgIH1cblxuICAgIC8vIFRoZSB1cGRhdGVkIHRocmVzaG9sZCBpcyB0aGUgaW50ZWdlciBwYXJ0IG9mIHRoZSBzb2x1dGlvbiBvZiB0aGUgcXVhZHJhdGljIGVxdWF0aW9uLlxuICAgIFRwcmV2ID0gdGhyZXNob2xkO1xuICAgIHRlbXAgPSAodzEgKyBNYXRoLnNxcnQoc3F0ZXJtKSkgLyB3MDtcblxuICAgIGlmIChpc05hTih0ZW1wKSkge1xuICAgICAgdGhyZXNob2xkID0gVHByZXY7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocmVzaG9sZCA9IE1hdGguZmxvb3IodGVtcCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aHJlc2hvbGQ7XG59XG5cbi8vIGF1eCBmdW5jXG5cbmZ1bmN0aW9uIHN1bUEoeSwgaikge1xuICBsZXQgeCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDw9IGo7IGkrKykge1xuICAgIHggKz0geVtpXTtcbiAgfVxuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gc3VtQih5LCBqKSB7XG4gIGxldCB4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gajsgaSsrKSB7XG4gICAgeCArPSBpICogeVtpXTtcbiAgfVxuICByZXR1cm4geDtcbn1cblxuZnVuY3Rpb24gc3VtQyh5LCBqKSB7XG4gIGxldCB4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gajsgaSsrKSB7XG4gICAgeCArPSBpICogaSAqIHlbaV07XG4gIH1cbiAgcmV0dXJuIHg7XG59XG4iLCIvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2ZpamkvQXV0b19UaHJlc2hvbGQvYmxvYi9tYXN0ZXIvc3JjL21haW4vamF2YS9maWppL3RocmVzaG9sZC9BdXRvX1RocmVzaG9sZC5qYXZhXG4vLyBKLiBNLiBTLiBQcmV3aXR0IGFuZCBNLiBMLiBNZW5kZWxzb2huLCBcIlRoZSBhbmFseXNpcyBvZiBjZWxsIGltYWdlcyxcIiBpblxuLy8gQW5uYWxzIG9mIHRoZSBOZXcgWW9yayBBY2FkZW15IG9mIFNjaWVuY2VzLCB2b2wuIDEyOCwgcHAuIDEwMzUtMTA1MywgMTk2Ni5cbi8vIHBvcnRlZCB0byBJbWFnZUogcGx1Z2luIGJ5IEcuTGFuZGluaSBmcm9tIEFudHRpIE5pZW1pc3RvJ3MgTWF0bGFiIGNvZGUgKEdQTClcbi8vIE9yaWdpbmFsIE1hdGxhYiBjb2RlIENvcHlyaWdodCAoQykgMjAwNCBBbnR0aSBOaWVtaXN0b1xuLy8gU2VlIGh0dHA6Ly93d3cuY3MudHV0LmZpL35hbnQvaGlzdHRocmVzaC8gZm9yIGFuIGV4Y2VsbGVudCBzbGlkZSBwcmVzZW50YXRpb25cbi8vIGFuZCB0aGUgb3JpZ2luYWwgTWF0bGFiIGNvZGVcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbmltdW0oaGlzdG9ncmFtKSB7XG4gIGlmIChoaXN0b2dyYW0ubGVuZ3RoIDwgMikge1xuICAgIC8vIHZhbGlkYXRlIHRoYXQgdGhlIGhpc3RvZ3JhbSBoYXMgYXQgbGVhc3QgdHdvIGNvbG9yIHZhbHVlc1xuICAgIHJldHVybiAwO1xuICB9XG4gIGxldCBpdGVyYXRpb25zID0gMDsgLy8gbnVtYmVyIG9mIGl0ZXJhdGlvbnMgb2YgdGhlIHNtb290aGluZyBwcm9jZXNzXG4gIGxldCB0aHJlc2hvbGQgPSAtMTtcbiAgbGV0IG1heCA9IC0xOyAvLyBtYXhpbXVtIGNvbG9yIHZhbHVlIHdpdGggYSBncmVhdGVyIG51bWJlciBvZiBwaXhlbHMgdG8gMFxuICBsZXQgaGlzdG9ncmFtQ29weSA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTsgLy8gYSBjb3B5IG9mIHRoZSBoaXN0b2dyYW1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaXN0b2dyYW0ubGVuZ3RoOyBpKyspIHtcbiAgICBoaXN0b2dyYW1Db3B5W2ldID0gaGlzdG9ncmFtW2ldO1xuICAgIGlmIChoaXN0b2dyYW1baV0gPiAwKSB7XG4gICAgICBtYXggPSBpO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoIWJpbW9kYWxUZXN0KGhpc3RvZ3JhbUNvcHkpKSB7XG4gICAgaGlzdG9ncmFtQ29weSA9IHNtb290aGVkKGhpc3RvZ3JhbUNvcHkpO1xuICAgIGl0ZXJhdGlvbnMrKztcbiAgICBpZiAoaXRlcmF0aW9ucyA+IDEwMDAwKSB7XG4gICAgICAvLyBpZiB0aGV5IG9jY3VyIG1vcmUgdGhhbiAxMDAwMCBpdGVyYXRpb25zIGl0IHJldHVybnMgLTFcbiAgICAgIHJldHVybiB0aHJlc2hvbGQ7XG4gICAgfVxuICB9XG4gIHRocmVzaG9sZCA9IG1pbmltdW1CZXR3ZWVuUGVla3MoaGlzdG9ncmFtQ29weSwgbWF4KTtcbiAgcmV0dXJuIHRocmVzaG9sZDtcbn1cbmZ1bmN0aW9uIHNtb290aGVkKGhpc3RvZ3JhbSkge1xuICAvLyBTbW9vdGggd2l0aCBhIDMgcG9pbnQgcnVubmluZyBtZWFuIGZpbHRlclxuICBsZXQgYXVIaXN0b2dyYW0gPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7IC8vIGEgY29weSBvZiB0aGUgaGlzdG9ncmFtYSBmb3IgdGhlIHNtb290aGluZyBwcm9jZXNzXG4gIGZvciAobGV0IGkgPSAxOyBpIDwgaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGkrKykge1xuICAgIGF1SGlzdG9ncmFtW2ldID0gKGhpc3RvZ3JhbVtpIC0gMV0gKyBoaXN0b2dyYW1baV0gKyBoaXN0b2dyYW1baSArIDFdKSAvIDM7XG4gIH1cbiAgYXVIaXN0b2dyYW1bMF0gPSAoaGlzdG9ncmFtWzBdICsgaGlzdG9ncmFtWzFdKSAvIDM7XG4gIGF1SGlzdG9ncmFtW2hpc3RvZ3JhbS5sZW5ndGggLSAxXSA9XG4gICAgKGhpc3RvZ3JhbVtoaXN0b2dyYW0ubGVuZ3RoIC0gMl0gKyBoaXN0b2dyYW1baGlzdG9ncmFtLmxlbmd0aCAtIDFdKSAvIDM7XG4gIHJldHVybiBhdUhpc3RvZ3JhbTtcbn1cbmZ1bmN0aW9uIG1pbmltdW1CZXR3ZWVuUGVla3MoaGlzdG9ncmFtQmltb2RhbCwgbWF4KSB7XG4gIGxldCB0aHJlc2hvbGQ7XG4gIGZvciAobGV0IGkgPSAxOyBpIDwgbWF4OyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBoaXN0b2dyYW1CaW1vZGFsW2kgLSAxXSA+IGhpc3RvZ3JhbUJpbW9kYWxbaV0gJiZcbiAgICAgIGhpc3RvZ3JhbUJpbW9kYWxbaSArIDFdID49IGhpc3RvZ3JhbUJpbW9kYWxbaV1cbiAgICApIHtcbiAgICAgIHRocmVzaG9sZCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRocmVzaG9sZDtcbn1cbmZ1bmN0aW9uIGJpbW9kYWxUZXN0KGhpc3RvZ3JhbSkge1xuICAvLyBJdCBpcyByZXNwb25zaWJsZSBmb3IgZGV0ZXJtaW5pbmcgaWYgYSBoaXN0b2dyYW0gaXMgYmltb2RhbFxuICBsZXQgbGVuID0gaGlzdG9ncmFtLmxlbmd0aDtcbiAgbGV0IGlzQmltb2RhbCA9IGZhbHNlO1xuICBsZXQgcGVha3MgPSAwO1xuICBmb3IgKGxldCBrID0gMTsgayA8IGxlbiAtIDE7IGsrKykge1xuICAgIGlmIChoaXN0b2dyYW1bayAtIDFdIDwgaGlzdG9ncmFtW2tdICYmIGhpc3RvZ3JhbVtrICsgMV0gPCBoaXN0b2dyYW1ba10pIHtcbiAgICAgIHBlYWtzKys7XG4gICAgICBpZiAocGVha3MgPiAyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgaWYgKHBlYWtzID09PSAyKSB7XG4gICAgaXNCaW1vZGFsID0gdHJ1ZTtcbiAgfVxuICByZXR1cm4gaXNCaW1vZGFsO1xufVxuIiwiLy8gU2VlIGh0dHA6Ly9pbWFnZWoubmloLmdvdi9pai9kb3dubG9hZC90b29scy9zb3VyY2UvaWovcHJvY2Vzcy9BdXRvVGhyZXNob2xkZXIuamF2YVxuLy8gVy4gRG95bGUsIFwiT3BlcmF0aW9uIHVzZWZ1bCBmb3Igc2ltaWxhcml0eS1pbnZhcmlhbnQgcGF0dGVybiByZWNvZ25pdGlvbixcIlxuLy8gSm91cm5hbCBvZiB0aGUgQXNzb2NpYXRpb24gZm9yIENvbXB1dGluZyBNYWNoaW5lcnksIHZvbC4gOSxwcC4gMjU5LTI2NywgMTk2Mi5cbi8vIHBvcnRlZCB0byBJbWFnZUogcGx1Z2luIGJ5IEcuTGFuZGluaSBmcm9tIEFudHRpIE5pZW1pc3RvJ3MgTWF0bGFiIGNvZGUgKEdQTClcbi8vIE9yaWdpbmFsIE1hdGxhYiBjb2RlIENvcHlyaWdodCAoQykgMjAwNCBBbnR0aSBOaWVtaXN0b1xuLy8gU2VlIGh0dHA6Ly93d3cuY3MudHV0LmZpL35hbnQvaGlzdHRocmVzaC8gZm9yIGFuIGV4Y2VsbGVudCBzbGlkZSBwcmVzZW50YXRpb25cbi8vIGFuZCB0aGUgb3JpZ2luYWwgTWF0bGFiIGNvZGUuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwZXJjZW50aWxlKGhpc3RvZ3JhbSkge1xuICBsZXQgdGhyZXNob2xkID0gLTE7XG4gIGxldCBwZXJjZW50aWxlID0gMC41OyAvLyBkZWZhdWx0IGZyYWN0aW9uIG9mIGZvcmVncm91bmQgcGl4ZWxzXG4gIGxldCBhdmVjID0gbmV3IEFycmF5KGhpc3RvZ3JhbS5sZW5ndGgpO1xuXG4gIGxldCB0b3RhbCA9IHBhcnRpYWxTdW0oaGlzdG9ncmFtLCBoaXN0b2dyYW0ubGVuZ3RoIC0gMSk7XG4gIGxldCB0ZW1wID0gMS4wO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9ncmFtLmxlbmd0aDsgaSsrKSB7XG4gICAgYXZlY1tpXSA9IE1hdGguYWJzKHBhcnRpYWxTdW0oaGlzdG9ncmFtLCBpKSAvIHRvdGFsIC0gcGVyY2VudGlsZSk7XG4gICAgaWYgKGF2ZWNbaV0gPCB0ZW1wKSB7XG4gICAgICB0ZW1wID0gYXZlY1tpXTtcbiAgICAgIHRocmVzaG9sZCA9IGk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRocmVzaG9sZDtcbn1cblxuZnVuY3Rpb24gcGFydGlhbFN1bShoaXN0b2dyYW0sIGVuZEluZGV4KSB7XG4gIGxldCB4ID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gZW5kSW5kZXg7IGkrKykge1xuICAgIHggKz0gaGlzdG9ncmFtW2ldO1xuICB9XG4gIHJldHVybiB4O1xufVxuIiwiaW1wb3J0IGh1YW5nIGZyb20gJy4vaHVhbmcnO1xuaW1wb3J0IGludGVybW9kZXMgZnJvbSAnLi9pbnRlcm1vZGVzJztcbmltcG9ydCBpc29kYXRhIGZyb20gJy4vaXNvZGF0YSc7XG5pbXBvcnQgbGkgZnJvbSAnLi9saSc7XG5pbXBvcnQgbWF4RW50cm9weSBmcm9tICcuL21heEVudHJvcHknO1xuaW1wb3J0IG1lYW4gZnJvbSAnLi9tZWFuJztcbmltcG9ydCBtaW5FcnJvciBmcm9tICcuL21pbkVycm9yJztcbmltcG9ydCBtaW5pbXVtIGZyb20gJy4vbWluaW11bSc7XG5pbXBvcnQgbW9tZW50cyBmcm9tICcuL21vbWVudHMnO1xuaW1wb3J0IG90c3UgZnJvbSAnLi9vdHN1JztcbmltcG9ydCBwZXJjZW50aWxlIGZyb20gJy4vcGVyY2VudGlsZSc7XG5pbXBvcnQgcmVueWlFbnRyb3B5IGZyb20gJy4vcmVueWlFbnRyb3B5LmpzJztcbmltcG9ydCBzaGFuYmhhZyBmcm9tICcuL3NoYW5iaGFnJztcbmltcG9ydCB0cmlhbmdsZSBmcm9tICcuL3RyaWFuZ2xlJztcbmltcG9ydCB5ZW4gZnJvbSAnLi95ZW4nO1xuXG4vKipcbiAqIEB0eXBlZGVmIHsoJ2h1YW5nJ3wnaW50ZXJtb2Rlcyd8J2lzb2RhdGEnfCdsaSd8J21heGVudHJvcHknfCdtZWFuJ3wnbWluZXJyb3InfCdtaW5pbXVtJ3wnbW9tZW50cyd8J290c3UnfCdwZXJjZW50aWxlJ3wncmVueWllbnRyb3B5J3wnc2hhbmJoYWcnfCd0cmlhbmdsZSd8J3llbicpfSBUaHJlc2hvbGRBbGdvcml0aG1cbiAqL1xuXG5leHBvcnQgY29uc3QgbWV0aG9kcyA9IHtcbiAgaHVhbmcsXG4gIGludGVybW9kZXMsXG4gIGlzb2RhdGEsXG4gIGxpLFxuICBtYXhlbnRyb3B5OiBtYXhFbnRyb3B5LFxuICBtZWFuLFxuICBtaW5lcnJvcjogbWluRXJyb3IsXG4gIG1pbmltdW0sXG4gIG1vbWVudHMsXG4gIG90c3UsXG4gIHBlcmNlbnRpbGUsXG4gIHJlbnlpZW50cm9weTogcmVueWlFbnRyb3B5LFxuICBzaGFuYmhhZyxcbiAgdHJpYW5nbGUsXG4gIHllbixcbn07XG5cbmV4cG9ydCBjb25zdCBuYW1lcyA9IHt9O1xuT2JqZWN0LmtleXMobWV0aG9kcykuZm9yRWFjaCgobmFtZSkgPT4ge1xuICBuYW1lc1tuYW1lXSA9IG5hbWU7XG59KTtcbiIsIi8qXG4gKlxuICogc2VlIGh0dHA6Ly9yc2IuaW5mby5uaWguZ292L2lqL2RldmVsb3Blci9zb3VyY2UvaWovcHJvY2Vzcy9BdXRvVGhyZXNob2xkZXIuamF2YS5odG1sLlxuICogSHVhbmc6IEltcGxlbWVudHMgSHVhbmcncyBmdXp6eSB0aHJlc2hvbGRpbmcgbWV0aG9kOiBIdWFuZywgTC1LICYgV2FuZywgTS1KIEogKDE5OTUpLFxuICogXCJJbWFnZSB0aHJlc2hvbGRpbmcgYnkgbWluaW1pemluZyB0aGUgbWVhc3VyZSBvZiBmdXp6aW5lc3NcIiwgUGF0dGVybiBSZWNvZ25pdGlvbiAyOCgxKTogNDEtNTFcbiAqXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaHVhbmcoaGlzdG9ncmFtKSB7XG4gIC8qIERldGVybWluZSB0aGUgZmlyc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBmaXJzdEJpbiA9IDA7XG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgaWYgKGhpc3RvZ3JhbVtpaF0gIT09IDApIHtcbiAgICAgIGZpcnN0QmluID0gaWg7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKiBEZXRlcm1pbmUgdGhlIGxhc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBsYXN0QmluID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7XG4gIGZvciAobGV0IGloID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGloID49IGZpcnN0QmluOyBpaC0tKSB7XG4gICAgaWYgKGhpc3RvZ3JhbVtpaF0gIT09IDApIHtcbiAgICAgIGxhc3RCaW4gPSBpaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIGxldCB0ZXJtID0gMS4wIC8gKGxhc3RCaW4gLSBmaXJzdEJpbik7XG4gIGxldCBtdTAgPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7XG4gIGxldCBzdW1QaXggPSAwO1xuICBsZXQgbnVtUGl4ID0gMDtcbiAgZm9yIChsZXQgaWggPSBmaXJzdEJpbjsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgc3VtUGl4ICs9IGloICogaGlzdG9ncmFtW2loXTtcbiAgICBudW1QaXggKz0gaGlzdG9ncmFtW2loXTtcbiAgICBtdTBbaWhdID0gc3VtUGl4IC8gbnVtUGl4O1xuICB9XG5cbiAgbGV0IG11MSA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTtcbiAgc3VtUGl4ID0gbnVtUGl4ID0gMDtcbiAgZm9yIChsZXQgaWggPSBsYXN0QmluOyBpaCA+IDA7IGloLS0pIHtcbiAgICBzdW1QaXggKz0gaWggKiBoaXN0b2dyYW1baWhdO1xuICAgIG51bVBpeCArPSBoaXN0b2dyYW1baWhdO1xuICAgIG11MVtpaCAtIDFdID0gc3VtUGl4IC8gbnVtUGl4O1xuICB9XG5cbiAgLyogRGV0ZXJtaW5lIHRoZSB0aHJlc2hvbGQgdGhhdCBtaW5pbWl6ZXMgdGhlIGZ1enp5IGVudHJvcHkqL1xuICBsZXQgdGhyZXNob2xkID0gLTE7XG4gIGxldCBtaW5FbnQgPSBOdW1iZXIuTUFYX1ZBTFVFO1xuICBmb3IgKGxldCBpdCA9IDA7IGl0IDwgaGlzdG9ncmFtLmxlbmd0aDsgaXQrKykge1xuICAgIGxldCBlbnQgPSAwO1xuICAgIGxldCBtdVg7XG4gICAgZm9yIChsZXQgaWggPSAwOyBpaCA8PSBpdDsgaWgrKykge1xuICAgICAgLyogRXF1YXRpb24gKDQpIGluIFJlZi4gMSAqL1xuICAgICAgbXVYID0gMSAvICgxICsgdGVybSAqIE1hdGguYWJzKGloIC0gbXUwW2l0XSkpO1xuICAgICAgaWYgKCEobXVYIDwgMWUtNiB8fCBtdVggPiAwLjk5OTk5OSkpIHtcbiAgICAgICAgLyogRXF1YXRpb24gKDYpICYgKDgpIGluIFJlZi4gMSAqL1xuICAgICAgICBlbnQgKz1cbiAgICAgICAgICBoaXN0b2dyYW1baWhdICpcbiAgICAgICAgICAoLW11WCAqIE1hdGgubG9nKG11WCkgLSAoMSAtIG11WCkgKiBNYXRoLmxvZygxIC0gbXVYKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChsZXQgaWggPSBpdCArIDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgICAgLyogRXF1YXRpb24gKDQpIGluIFJlZi4gMSAqL1xuICAgICAgbXVYID0gMSAvICgxICsgdGVybSAqIE1hdGguYWJzKGloIC0gbXUxW2l0XSkpO1xuICAgICAgaWYgKCEobXVYIDwgMWUtNiB8fCBtdVggPiAwLjk5OTk5OSkpIHtcbiAgICAgICAgLyogRXF1YXRpb24gKDYpICYgKDgpIGluIFJlZi4gMSAqL1xuICAgICAgICBlbnQgKz1cbiAgICAgICAgICBoaXN0b2dyYW1baWhdICpcbiAgICAgICAgICAoLW11WCAqIE1hdGgubG9nKG11WCkgLSAoMSAtIG11WCkgKiBNYXRoLmxvZygxIC0gbXVYKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVudCA8IG1pbkVudCkge1xuICAgICAgbWluRW50ID0gZW50O1xuICAgICAgdGhyZXNob2xkID0gaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aHJlc2hvbGQ7XG59XG4iLCIvKlxuICogc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWppL0F1dG9fVGhyZXNob2xkL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvZmlqaS90aHJlc2hvbGQvQXV0b19UaHJlc2hvbGQuamF2YVxuICogSXNvZGF0YTogUmlkbGVyLCBUVyAmIENhbHZhcmQsIFMgKDE5NzgpLCBcIlBpY3R1cmUgdGhyZXNob2xkaW5nIHVzaW5nIGFuIGl0ZXJhdGl2ZSBzZWxlY3Rpb24gbWV0aG9kXCJcbiAqIElFRUUgVHJhbnNhY3Rpb25zIG9uIFN5c3RlbXMsIE1hbiBhbmQgQ3liZXJuZXRpY3MgODogNjMwLTYzMi5cbiAqXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGlzb2RhdGEoaGlzdG9ncmFtKSB7XG4gIGxldCBsOyAvLyB0aGUgYXZlcmFnZSBncmV5IHZhbHVlIG9mIHBpeGVscyB3aXRoIGludGVuc2l0aWVzIDwgZ1xuICBsZXQgdG90aDsgLy8gdGhlIHRoZSBhdmVyYWdlIGdyZXkgdmFsdWUgb2YgcGl4ZWxzIHdpdGggaW50ZW5zaXRpZXMgPiBnXG4gIGxldCB0b3RsOyAvLyB0aGUgdG90YWwgdGhlIGF2ZXJhZ2UgZ3JleSB2YWx1ZSBvZiBwaXhlbHMgd2l0aCBpbnRlbnNpdGllcyA8IGdcbiAgbGV0IGg7IC8vIHRoZSBhdmVyYWdlIGdyZXkgdmFsdWUgb2YgcGl4ZWxzIHdpdGggaW50ZW5zaXRpZXMgPiBnXG4gIGxldCBnID0gMDsgLy8gdGhyZXNob2xkIHZhbHVlXG5cbiAgZm9yIChsZXQgaSA9IDE7IGkgPCBoaXN0b2dyYW0ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoaGlzdG9ncmFtW2ldID4gMCkge1xuICAgICAgZyA9IGkgKyAxO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgd2hpbGUgKHRydWUpIHtcbiAgICBsID0gMDtcbiAgICB0b3RsID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGc7IGkrKykge1xuICAgICAgdG90bCA9IHRvdGwgKyBoaXN0b2dyYW1baV07XG4gICAgICBsID0gbCArIGhpc3RvZ3JhbVtpXSAqIGk7XG4gICAgfVxuICAgIGggPSAwO1xuICAgIHRvdGggPSAwO1xuICAgIGZvciAobGV0IGkgPSBnICsgMTsgaSA8IGhpc3RvZ3JhbS5sZW5ndGg7IGkrKykge1xuICAgICAgdG90aCArPSBoaXN0b2dyYW1baV07XG4gICAgICBoICs9IGhpc3RvZ3JhbVtpXSAqIGk7XG4gICAgfVxuICAgIGlmICh0b3RsID4gMCAmJiB0b3RoID4gMCkge1xuICAgICAgbCAvPSB0b3RsO1xuICAgICAgaCAvPSB0b3RoO1xuICAgICAgaWYgKGcgPT09IE1hdGgucm91bmQoKGwgKyBoKSAvIDIuMCkpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIGcrKztcbiAgICBpZiAoZyA+IGhpc3RvZ3JhbS5sZW5ndGggLSAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1RocmVzaG9sZCBub3QgZm91bmQnKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGc7XG59XG4iLCIvKlxuICogc2VlIGh0dHA6Ly9yc2IuaW5mby5uaWguZ292L2lqL2RldmVsb3Blci9zb3VyY2UvaWovcHJvY2Vzcy9BdXRvVGhyZXNob2xkZXIuamF2YS5odG1sXG4gKiBUaGUgbWV0aG9kIGlzIHByZXNlbnQgaW46IEltcGxlbWVudHMgTGkncyBNaW5pbXVtIENyb3NzIEVudHJvcHkgdGhyZXNob2xkaW5nIG1ldGhvZFxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBvbiB0aGUgaXRlcmF0aXZlIHZlcnNpb24gKFJlZi4gMm5kIHJlZmVyZW5jZSBiZWxvdykgb2YgdGhlIGFsZ29yaXRobS5cbiAqICAxKSBMaSwgQ0ggJiBMZWUsIENLICgxOTkzKSwgXCJNaW5pbXVtIENyb3NzIEVudHJvcHkgVGhyZXNob2xkaW5nXCIsIFBhdHRlcm4gUmVjb2duaXRpb24gMjYoNCk6IDYxIDYyNVxuICogIDIpIExpLCBDSCAmIFRhbSwgUEtTICgxOTk4KSwgXCJBbiBJdGVyYXRpdmUgQWxnb3JpdGhtIGZvciBNaW5pbXVtIENyb3NzIEVudHJvcHkgVGhyZXNob2xkaW5nXCIsXG4gKiAgICAgUGF0dGVybiBSZWNvZ25pdGlvbiBMZXR0ZXJzIDE4KDgpOiA3NzEtNzc2XG4gKiAgMykgU2V6Z2luLCBNICYgU2Fua3VyLCBCICgyMDA0KSwgXCJTdXJ2ZXkgb3ZlciBJbWFnZSBUaHJlc2hvbGRpbmcgVGVjaG5pcXVlcyBhbmQgUXVhbnRpdGF0aXZlIFBlcmZvcm1hbmNlXG4gKiAgICAgRXZhbHVhdGlvblwiLEpvdXJuYWwgb2YgRWxlY3Ryb25pYyBJbWFnaW5nIDEzKDEpOiAxNDYtMTY1XG4gKiBAcGFyYW0gaGlzdG9ncmFtIC0gdGhlIGhpc3RvZ3JhbSBvZiB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB0b3RhbCAtIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBpbWFnZVxuICogQHJldHVybnMge251bWJlcn0gLSB0aGUgdGhyZXNob2xkXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbGkoaGlzdG9ncmFtLCB0b3RhbCkge1xuICBsZXQgdGhyZXNob2xkO1xuICBsZXQgc3VtQmFjazsgLyogc3VtIG9mIHRoZSBiYWNrZ3JvdW5kIHBpeGVscyBhdCBhIGdpdmVuIHRocmVzaG9sZCAqL1xuICBsZXQgc3VtT2JqOyAvKiBzdW0gb2YgdGhlIG9iamVjdCBwaXhlbHMgYXQgYSBnaXZlbiB0aHJlc2hvbGQgKi9cbiAgbGV0IG51bUJhY2s7IC8qIG51bWJlciBvZiBiYWNrZ3JvdW5kIHBpeGVscyBhdCBhIGdpdmVuIHRocmVzaG9sZCAqL1xuICBsZXQgbnVtT2JqOyAvKiBudW1iZXIgb2Ygb2JqZWN0IHBpeGVscyBhdCBhIGdpdmVuIHRocmVzaG9sZCAqL1xuICBsZXQgb2xkVGhyZXNoO1xuICBsZXQgbmV3VGhyZXNoO1xuICBsZXQgbWVhbkJhY2s7IC8qIG1lYW4gb2YgdGhlIGJhY2tncm91bmQgcGl4ZWxzIGF0IGEgZ2l2ZW4gdGhyZXNob2xkICovXG4gIGxldCBtZWFuT2JqOyAvKiBtZWFuIG9mIHRoZSBvYmplY3QgcGl4ZWxzIGF0IGEgZ2l2ZW4gdGhyZXNob2xkICovXG4gIGxldCBtZWFuOyAvKiBtZWFuIGdyYXktbGV2ZWwgaW4gdGhlIGltYWdlICovXG4gIGxldCB0b2xlcmFuY2U7IC8qIHRocmVzaG9sZCB0b2xlcmFuY2UgKi9cbiAgbGV0IHRlbXA7XG4gIHRvbGVyYW5jZSA9IDAuNTtcblxuICAvKiBDYWxjdWxhdGUgdGhlIG1lYW4gZ3JheS1sZXZlbCAqL1xuICBtZWFuID0gMC4wO1xuICBmb3IgKGxldCBpaCA9IDA7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIG1lYW4gKz0gaWggKiBoaXN0b2dyYW1baWhdO1xuICB9XG5cbiAgbWVhbiAvPSB0b3RhbDtcbiAgLyogSW5pdGlhbCBlc3RpbWF0ZSAqL1xuICBuZXdUaHJlc2ggPSBtZWFuO1xuXG4gIGRvIHtcbiAgICBvbGRUaHJlc2ggPSBuZXdUaHJlc2g7XG4gICAgdGhyZXNob2xkID0gKG9sZFRocmVzaCArIDAuNSkgfCAwOyAvKiByYW5nZSAqL1xuXG4gICAgLyogQ2FsY3VsYXRlIHRoZSBtZWFucyBvZiBiYWNrZ3JvdW5kIGFuZCBvYmplY3QgcGl4ZWxzICovXG4gICAgLyogQmFja2dyb3VuZCAqL1xuICAgIHN1bUJhY2sgPSAwO1xuICAgIG51bUJhY2sgPSAwO1xuXG4gICAgZm9yIChsZXQgaWggPSAwOyBpaCA8PSB0aHJlc2hvbGQ7IGloKyspIHtcbiAgICAgIHN1bUJhY2sgKz0gaWggKiBoaXN0b2dyYW1baWhdO1xuICAgICAgbnVtQmFjayArPSBoaXN0b2dyYW1baWhdO1xuICAgIH1cbiAgICBtZWFuQmFjayA9IG51bUJhY2sgPT09IDAgPyAwLjAgOiBzdW1CYWNrIC8gbnVtQmFjaztcblxuICAgIC8qIE9iamVjdCAqL1xuICAgIHN1bU9iaiA9IDA7XG4gICAgbnVtT2JqID0gMDtcbiAgICBmb3IgKGxldCBpaCA9IHRocmVzaG9sZCArIDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgICAgc3VtT2JqICs9IGloICogaGlzdG9ncmFtW2loXTtcbiAgICAgIG51bU9iaiArPSBoaXN0b2dyYW1baWhdO1xuICAgIH1cbiAgICBtZWFuT2JqID0gbnVtT2JqID09PSAwID8gMC4wIDogc3VtT2JqIC8gbnVtT2JqO1xuICAgIHRlbXAgPSAobWVhbkJhY2sgLSBtZWFuT2JqKSAvIChNYXRoLmxvZyhtZWFuQmFjaykgLSBNYXRoLmxvZyhtZWFuT2JqKSk7XG5cbiAgICBpZiAodGVtcCA8IC1OdW1iZXIuRVBTSUxPTikge1xuICAgICAgbmV3VGhyZXNoID0gKHRlbXAgLSAwLjUpIHwgMDtcbiAgICB9IGVsc2Uge1xuICAgICAgbmV3VGhyZXNoID0gKHRlbXAgKyAwLjUpIHwgMDtcbiAgICB9XG4gICAgLyogIFN0b3AgdGhlIGl0ZXJhdGlvbnMgd2hlbiB0aGUgZGlmZmVyZW5jZSBiZXR3ZWVuIHRoZVxuICAgICAgICAgbmV3IGFuZCBvbGQgdGhyZXNob2xkIHZhbHVlcyBpcyBsZXNzIHRoYW4gdGhlIHRvbGVyYW5jZSAqL1xuICB9IHdoaWxlIChNYXRoLmFicyhuZXdUaHJlc2ggLSBvbGRUaHJlc2gpID4gdG9sZXJhbmNlKTtcblxuICByZXR1cm4gdGhyZXNob2xkO1xufVxuIiwiLypcbiAqIHNlZSBodHRwOi8vcnNiLmluZm8ubmloLmdvdi9pai9kZXZlbG9wZXIvc291cmNlL2lqL3Byb2Nlc3MvQXV0b1RocmVzaG9sZGVyLmphdmEuaHRtbFxuICogVGhlIG1ldGhvZCBpcyBwcmVzZW50IGluOiBJbXBsZW1lbnRzIEthcHVyLVNhaG9vLVdvbmcgKE1heGltdW0gRW50cm9weSkgdGhyZXNob2xkaW5nIG1ldGhvZDpcbiAqIEthcHVyLCBKTjsgU2Fob28sIFBLICYgV29uZywgQUNLICgxOTg1KSwgXCJBIE5ldyBNZXRob2QgZm9yIEdyYXktTGV2ZWwgUGljdHVyZSBUaHJlc2hvbGRpbmcgVXNpbmcgdGhlIEVudHJvcHkgb2YgdGhlIEhpc3RvZ3JhbVwiLFxuICogR3JhcGhpY2FsIE1vZGVscyBhbmQgSW1hZ2UgUHJvY2Vzc2luZyAyOSgzKTogMjczLTI4NVxuICogQHBhcmFtIGhpc3RvZ3JhbSAtIHRoZSBoaXN0b2dyYW0gb2YgdGhlIGltYWdlXG4gKiAgICAgICAgdG90YWwgLSB0aGUgbnVtYmVyIG9mIHBpeGVscyBpbiB0aGUgaW1hZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gdGhlIHRocmVzaG9sZFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1heEVudHJvcHkoaGlzdG9ncmFtLCB0b3RhbCkge1xuICBsZXQgbm9ybUhpc3RvID0gbmV3IEFycmF5KGhpc3RvZ3JhbS5sZW5ndGgpOyAvLyBub3JtYWxpemVkIGhpc3RvZ3JhbVxuICBmb3IgKGxldCBpaCA9IDA7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIG5vcm1IaXN0b1tpaF0gPSBoaXN0b2dyYW1baWhdIC8gdG90YWw7XG4gIH1cblxuICBsZXQgUDEgPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7IC8vIGN1bXVsYXRpdmUgbm9ybWFsaXplZCBoaXN0b2dyYW1cbiAgbGV0IFAyID0gbmV3IEFycmF5KGhpc3RvZ3JhbS5sZW5ndGgpO1xuICBQMVswXSA9IG5vcm1IaXN0b1swXTtcbiAgUDJbMF0gPSAxLjAgLSBQMVswXTtcblxuICBmb3IgKGxldCBpaCA9IDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIFAxW2loXSA9IFAxW2loIC0gMV0gKyBub3JtSGlzdG9baWhdO1xuICAgIFAyW2loXSA9IDEuMCAtIFAxW2loXTtcbiAgfVxuXG4gIC8qIERldGVybWluZSB0aGUgZmlyc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBmaXJzdEJpbiA9IDA7XG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgaWYgKE1hdGguYWJzKFAxW2loXSkgPj0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIGZpcnN0QmluID0gaWg7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKiBEZXRlcm1pbmUgdGhlIGxhc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBsYXN0QmluID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7XG4gIGZvciAobGV0IGloID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGloID49IGZpcnN0QmluOyBpaC0tKSB7XG4gICAgaWYgKE1hdGguYWJzKFAyW2loXSkgPj0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIGxhc3RCaW4gPSBpaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgZW50cm9weSBlYWNoIGdyYXktbGV2ZWxcbiAgLy8gYW5kIGZpbmQgdGhlIHRocmVzaG9sZCB0aGF0IG1heGltaXplcyBpdFxuICBsZXQgdGhyZXNob2xkID0gLTE7XG4gIGxldCB0b3RFbnQ7IC8vIHRvdGFsIGVudHJvcHlcbiAgbGV0IG1heEVudCA9IE51bWJlci5NSU5fVkFMVUU7IC8vIG1heCBlbnRyb3B5XG4gIGxldCBlbnRCYWNrOyAvLyBlbnRyb3B5IG9mIHRoZSBiYWNrZ3JvdW5kIHBpeGVscyBhdCBhIGdpdmVuIHRocmVzaG9sZFxuICBsZXQgZW50T2JqOyAvLyBlbnRyb3B5IG9mIHRoZSBvYmplY3QgcGl4ZWxzIGF0IGEgZ2l2ZW4gdGhyZXNob2xkXG5cbiAgZm9yIChsZXQgaXQgPSBmaXJzdEJpbjsgaXQgPD0gbGFzdEJpbjsgaXQrKykge1xuICAgIC8qIEVudHJvcHkgb2YgdGhlIGJhY2tncm91bmQgcGl4ZWxzICovXG4gICAgZW50QmFjayA9IDAuMDtcbiAgICBmb3IgKGxldCBpaCA9IDA7IGloIDw9IGl0OyBpaCsrKSB7XG4gICAgICBpZiAoaGlzdG9ncmFtW2loXSAhPT0gMCkge1xuICAgICAgICBlbnRCYWNrIC09IChub3JtSGlzdG9baWhdIC8gUDFbaXRdKSAqIE1hdGgubG9nKG5vcm1IaXN0b1tpaF0gLyBQMVtpdF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIEVudHJvcHkgb2YgdGhlIG9iamVjdCBwaXhlbHMgKi9cbiAgICBlbnRPYmogPSAwLjA7XG4gICAgZm9yIChsZXQgaWggPSBpdCArIDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgICAgaWYgKGhpc3RvZ3JhbVtpaF0gIT09IDApIHtcbiAgICAgICAgZW50T2JqIC09IChub3JtSGlzdG9baWhdIC8gUDJbaXRdKSAqIE1hdGgubG9nKG5vcm1IaXN0b1tpaF0gLyBQMltpdF0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qIFRvdGFsIGVudHJvcHkgKi9cbiAgICB0b3RFbnQgPSBlbnRCYWNrICsgZW50T2JqO1xuXG4gICAgaWYgKG1heEVudCA8IHRvdEVudCkge1xuICAgICAgbWF4RW50ID0gdG90RW50O1xuICAgICAgdGhyZXNob2xkID0gaXQ7XG4gICAgfVxuICB9XG4gIHJldHVybiB0aHJlc2hvbGQ7XG59XG4iLCIvKlxuICogVGhlIG1ldGhvZCBpcyBwcmVzZW50IGluOiBVc2VzIHRoZSBtZWFuIG9mIGdyZXkgbGV2ZWxzIGFzIHRoZSB0aHJlc2hvbGQuIEl0IGlzIGRlc2NyaWJlZCBpbjpcbiAqIEdsYXNiZXksIENBICgxOTkzKSwgXCJBbiBhbmFseXNpcyBvZiBoaXN0b2dyYW0tYmFzZWQgdGhyZXNob2xkaW5nIGFsZ29yaXRobXNcIixcbiAqIENWR0lQOiBHcmFwaGljYWwgTW9kZWxzIGFuZCBJbWFnZSBQcm9jZXNzaW5nIDU1OiA1MzItNTM3XG4gKiBAcGFyYW0gaGlzdG9ncmFtIC0gdGhlIGhpc3RvZ3JhbSBvZiB0aGUgaW1hZ2VcbiAqIEBwYXJhbSB0b3RhbCAtIHRoZSBudW1iZXIgb2YgcGl4ZWxzIGluIHRoZSBpbWFnZVxuICogQHJldHVybnMge251bWJlcn0gLSB0aGUgdGhyZXNob2xkXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVhbihoaXN0b2dyYW0sIHRvdGFsKSB7XG4gIGxldCBzdW0gPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhpc3RvZ3JhbS5sZW5ndGg7IGkrKykge1xuICAgIHN1bSArPSBpICogaGlzdG9ncmFtW2ldO1xuICB9XG4gIHJldHVybiBNYXRoLmZsb29yKHN1bSAvIHRvdGFsKTtcbn1cbiIsIi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlqaS9BdXRvX1RocmVzaG9sZC9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2ZpamkvdGhyZXNob2xkL0F1dG9fVGhyZXNob2xkLmphdmFcbi8vIFcuIFRzYWksIFwiTW9tZW50LXByZXNlcnZpbmcgdGhyZXNob2xkaW5nOiBhIG5ldyBhcHByb2FjaCxcIiBDb21wdXRlciBWaXNpb24sXG4vLyBHcmFwaGljcywgYW5kIEltYWdlIFByb2Nlc3NpbmcsIHZvbC4gMjksIHBwLiAzNzctMzkzLCAxOTg1LlxuLy8gUG9ydGVkIHRvIEltYWdlSiBwbHVnaW4gYnkgRy5MYW5kaW5pIGZyb20gdGhlIHRoZSBvcGVuIHNvdXJjZSBwcm9qZWN0IEZPVVJJRVIgMC44XG4vLyBieSBNLiBFbXJlIENlbGViaSAsIERlcGFydG1lbnQgb2YgQ29tcHV0ZXIgU2NpZW5jZSwgTG91aXNpYW5hIFN0YXRlIFVuaXZlcnNpdHkgaW4gU2hyZXZlcG9ydFxuLy8gU2hyZXZlcG9ydCwgTEEgNzExMTUsIFVTQVxuLy8gaHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9mb3VyaWVyLWlwYWxcbi8vIGh0dHA6Ly93d3cubHN1cy5lZHUvZmFjdWx0eS9+ZWNlbGViaS9mb3VyaWVyLmh0bVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbW9tZW50cyhoaXN0b2dyYW0sIHRvdGFsKSB7XG4gIC8vIG1vbWVudHNcbiAgbGV0IG0wID0gMS4wO1xuICBsZXQgbTEgPSAwLjA7XG4gIGxldCBtMiA9IDAuMDtcbiAgbGV0IG0zID0gMC4wO1xuICBsZXQgc3VtID0gMC4wO1xuICBsZXQgcDA7XG4gIGxldCBjZCwgYzAsIGMxLCB6MCwgejE7IC8qIGF1eGlsaWFyeSB2YXJpYWJsZXMgKi9cbiAgbGV0IHRocmVzaG9sZCA9IC0xO1xuICBsZXQgaGlzdG9ncmFtTGVuZ3RoID0gaGlzdG9ncmFtLmxlbmd0aDtcbiAgbGV0IG5vcm1hbGl6ZWRIaXN0b2dyYW0gPSBuZXcgQXJyYXkoaGlzdG9ncmFtTGVuZ3RoKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaXN0b2dyYW1MZW5ndGg7IGkrKykge1xuICAgIG5vcm1hbGl6ZWRIaXN0b2dyYW1baV0gPSBoaXN0b2dyYW1baV0gLyB0b3RhbDtcbiAgfVxuICAvKiBDYWxjdWxhdGUgdGhlIGZpcnN0LCBzZWNvbmQsIGFuZCB0aGlyZCBvcmRlciBtb21lbnRzICovXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9ncmFtTGVuZ3RoOyBpKyspIHtcbiAgICBtMSArPSBpICogbm9ybWFsaXplZEhpc3RvZ3JhbVtpXTtcbiAgICBtMiArPSBpICogaSAqIG5vcm1hbGl6ZWRIaXN0b2dyYW1baV07XG4gICAgbTMgKz0gaSAqIGkgKiBpICogbm9ybWFsaXplZEhpc3RvZ3JhbVtpXTtcbiAgfVxuICAvKlxuICAgICBGaXJzdCA0IG1vbWVudHMgb2YgdGhlIGdyYXktbGV2ZWwgaW1hZ2Ugc2hvdWxkIG1hdGNoIHRoZSBmaXJzdCA0IG1vbWVudHNcbiAgICAgb2YgdGhlIHRhcmdldCBiaW5hcnkgaW1hZ2UuIFRoaXMgbGVhZHMgdG8gNCBlcXVhbGl0aWVzIHdob3NlIHNvbHV0aW9uc1xuICAgICBhcmUgZ2l2ZW4gaW4gdGhlIEFwcGVuZGl4IG9mIFJlZi4gMVxuICAgICAqL1xuICBjZCA9IG0wICogbTIgLSBtMSAqIG0xOyAvLyBkZXRlcm1pbmFudCBvZiB0aGUgbWF0cml6IG9mIGhhbmtlbCBmb3IgbW9tZW50cyAyeDJcbiAgYzAgPSAoLW0yICogbTIgKyBtMSAqIG0zKSAvIGNkO1xuICBjMSA9IChtMCAqIC1tMyArIG0yICogbTEpIC8gY2Q7XG4gIC8vIG5ldyB0d28gZ3JheSB2YWx1ZXMgd2hlcmUgejA8ejFcbiAgejAgPSAwLjUgKiAoLWMxIC0gTWF0aC5zcXJ0KGMxICogYzEgLSA0LjAgKiBjMCkpO1xuICB6MSA9IDAuNSAqICgtYzEgKyBNYXRoLnNxcnQoYzEgKiBjMSAtIDQuMCAqIGMwKSk7XG4gIHAwID1cbiAgICAoejEgLSBtMSkgL1xuICAgICh6MSAtXG4gICAgICB6MCk7IC8qIEZyYWN0aW9uIG9mIHRoZSBvYmplY3QgcGl4ZWxzIGluIHRoZSB0YXJnZXQgYmluYXJ5IGltYWdlIChwMHowK3AxejE9bTEpICovXG4gIC8vIFRoZSB0aHJlc2hvbGQgaXMgdGhlIGdyYXktbGV2ZWwgY2xvc2VzdCB0byB0aGUgcDAtdGlsZSBvZiB0aGUgbm9ybWFsaXplZCBoaXN0b2dyYW1cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBoaXN0b2dyYW1MZW5ndGg7IGkrKykge1xuICAgIHN1bSArPSBub3JtYWxpemVkSGlzdG9ncmFtW2ldO1xuICAgIGlmIChzdW0gPiBwMCkge1xuICAgICAgdGhyZXNob2xkID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhyZXNob2xkO1xufVxuIiwiLypcbiAqIFRoZSBtZXRob2QgaXMgcHJlc2VudCBpbjogT3RzdSwgTiAoMTk3OSksIFwiQSB0aHJlc2hvbGQgc2VsZWN0aW9uIG1ldGhvZCBmcm9tIGdyYXktbGV2ZWwgaGlzdG9ncmFtc1wiLCBJRUVFIFRyYW5zLiBTeXMuLCBNYW4uLCBDeWJlci4gOTogNjItNjZcbiAqIFRoZSBPdHN1IGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIG9uOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9PdHN1J3NfbWV0aG9kXG4gKiBAcGFyYW0gaGlzdG9ncmFtIC0gdGhlIGhpc3RvZ3JhbSBvZiB0aGUgaW1hZ2VcbiAqIEByZXR1cm5zIHtudW1iZXJ9IC0gdGhlIHRocmVzaG9sZFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG90c3UoaGlzdG9ncmFtQ291bnRzLCB0b3RhbCkge1xuICBsZXQgc3VtQiA9IDA7XG4gIGxldCB3QiA9IDA7XG4gIGxldCBtYXhpbXVtID0gMDtcbiAgbGV0IGxldmVsID0gMDtcblxuICBsZXQgc3VtMSA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9ncmFtQ291bnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgc3VtMSArPSBpICogaGlzdG9ncmFtQ291bnRzW2ldO1xuICB9XG5cbiAgZm9yIChsZXQgaWkgPSAwOyBpaSA8IGhpc3RvZ3JhbUNvdW50cy5sZW5ndGg7IGlpKyspIHtcbiAgICB3QiA9IHdCICsgaGlzdG9ncmFtQ291bnRzW2lpXTtcbiAgICBjb25zdCB3RiA9IHRvdGFsIC0gd0I7XG4gICAgaWYgKHdCID09PSAwIHx8IHdGID09PSAwKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9XG4gICAgc3VtQiA9IHN1bUIgKyBpaSAqIGhpc3RvZ3JhbUNvdW50c1tpaV07XG4gICAgY29uc3QgbUYgPSAoc3VtMSAtIHN1bUIpIC8gd0Y7XG4gICAgY29uc3QgYmV0d2VlbiA9IHdCICogd0YgKiAoc3VtQiAvIHdCIC0gbUYpICogKHN1bUIgLyB3QiAtIG1GKTtcbiAgICBpZiAoYmV0d2VlbiA+PSBtYXhpbXVtKSB7XG4gICAgICBsZXZlbCA9IGlpO1xuICAgICAgbWF4aW11bSA9IGJldHdlZW47XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxldmVsO1xufVxuIiwiLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWppL0F1dG9fVGhyZXNob2xkL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvZmlqaS90aHJlc2hvbGQvQXV0b19UaHJlc2hvbGQuamF2YVxuLy8gS2FwdXIgSi5OLiwgU2Fob28gUC5LLiwgYW5kIFdvbmcgQS5LLkMuICgxOTg1KSBcIkEgTmV3IE1ldGhvZCBmb3Jcbi8vIEdyYXktTGV2ZWwgUGljdHVyZSBUaHJlc2hvbGRpbmcgVXNpbmcgdGhlIEVudHJvcHkgb2YgdGhlIEhpc3RvZ3JhbVwiXG4vLyBHcmFwaGljYWwgTW9kZWxzIGFuZCBJbWFnZSBQcm9jZXNzaW5nLCAyOSgzKTogMjczLTI4NVxuLy8gTS4gRW1yZSBDZWxlYmlcbi8vIDA2LjE1LjIwMDdcbi8vIFBvcnRlZCB0byBJbWFnZUogcGx1Z2luIGJ5IEcuTGFuZGluaSBmcm9tIEUgQ2VsZWJpJ3MgZm91cmllcl8wLjggcm91dGluZXNcbmltcG9ydCB7IGFzY2VuZGluZyBhcyBzb3J0QXNjIH0gZnJvbSAnbnVtLXNvcnQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiByZW55aUVudHJvcHkoaGlzdG9ncmFtLCB0b3RhbCkge1xuICBsZXQgb3B0VGhyZXNob2xkOyAvLyBPcHRpbWFsIHRocmVzaG9sZFxuICBsZXQgZmlyc3RCaW47IC8vIEZpcnN0IG5vbi16ZXJvIGJpblxuICBsZXQgbGFzdEJpbjsgLy8gbGFzdCBub24temVybyBiaW5cblxuICBsZXQgbm9ybUhpc3RvID0gbmV3IEFycmF5KGhpc3RvZ3JhbS5sZW5ndGgpOyAvLyBub3JtYWxpemVkIGhpc3RvZ3JhbVxuICBsZXQgUDEgPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7IC8vIGFjdW11bGF0aXZlIG5vcm1hbGl6ZWQgaGlzdG9ncmFtXG4gIGxldCBQMiA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTsgLy8gYWN1bXVsYXRpdmUgbm9ybWFsaXplZCBoaXN0b2dyYW1cblxuICAvLyBFbnRyb3B5IFZhcmlhYmxlc1xuICBsZXQgdGhyZXNob2xkMSA9IDA7XG4gIGxldCB0aHJlc2hvbGQyID0gMDtcbiAgbGV0IHRocmVzaG9sZDMgPSAwO1xuICBsZXQgbWF4RW50MSA9IDAuMDtcbiAgbGV0IG1heEVudDIgPSAwLjA7XG4gIGxldCBtYXhFbnQzID0gMC4wO1xuICBsZXQgYWxwaGEyID0gMC41O1xuICBsZXQgdGVybTIgPSAxLjAgLyAoMS4wIC0gYWxwaGEyKTtcbiAgbGV0IGFscGhhMyA9IDIuMDtcbiAgbGV0IHRlcm0zID0gMS4wIC8gKDEuMCAtIGFscGhhMyk7XG5cbiAgZm9yIChsZXQgaWggPSAwOyBpaCA8IGhpc3RvZ3JhbS5sZW5ndGg7IGloKyspIHtcbiAgICBub3JtSGlzdG9baWhdID0gaGlzdG9ncmFtW2loXSAvIHRvdGFsO1xuICB9XG5cbiAgUDFbMF0gPSBub3JtSGlzdG9bMF07XG4gIFAyWzBdID0gMS4wIC0gUDFbMF07XG4gIGZvciAobGV0IGloID0gMTsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgUDFbaWhdID0gUDFbaWggLSAxXSArIG5vcm1IaXN0b1tpaF07XG4gICAgUDJbaWhdID0gMS4wIC0gUDFbaWhdO1xuICB9XG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBmaXJzdCBub24temVybyBiaW4gKi9cbiAgZmlyc3RCaW4gPSAwO1xuICBmb3IgKGxldCBpaCA9IDA7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIGlmIChNYXRoLmFicyhQMVtpaF0pID49IE51bWJlci5FUFNJTE9OKSB7XG4gICAgICBmaXJzdEJpbiA9IGloO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgLyogRGV0ZXJtaW5lIHRoZSBsYXN0IG5vbi16ZXJvIGJpbiAqL1xuICBsYXN0QmluID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7XG4gIGZvciAobGV0IGloID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGloID49IGZpcnN0QmluOyBpaC0tKSB7XG4gICAgaWYgKE1hdGguYWJzKFAyW2loXSkgPj0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIGxhc3RCaW4gPSBpaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8qIE1heGltdW0gRW50cm9weSBUaHJlc2hvbGRpbmcgLSBCRUdJTiAqL1xuICAvKiBBTFBIQSA9IDEuMCAqL1xuICAvKiBDYWxjdWxhdGUgdGhlIHRvdGFsIGVudHJvcHkgZWFjaCBncmF5LWxldmVsXG4gICAgIGFuZCBmaW5kIHRoZSB0aHJlc2hvbGQgdGhhdCBtYXhpbWl6ZXMgaXRcbiAgICAgKi9cbiAgZm9yIChsZXQgaXQgPSBmaXJzdEJpbjsgaXQgPD0gbGFzdEJpbjsgaXQrKykge1xuICAgIC8qIEVudHJvcHkgb2YgdGhlIGJhY2tncm91bmQgcGl4ZWxzICovXG4gICAgbGV0IGVudEJhY2sxID0gMC4wO1xuICAgIGxldCBlbnRCYWNrMiA9IDAuMDtcbiAgICBsZXQgZW50QmFjazMgPSAwLjA7XG4gICAgZm9yIChsZXQgaWggPSAwOyBpaCA8PSBpdDsgaWgrKykge1xuICAgICAgaWYgKGhpc3RvZ3JhbVtpaF0gIT09IDApIHtcbiAgICAgICAgZW50QmFjazEgLT0gKG5vcm1IaXN0b1tpaF0gLyBQMVtpdF0pICogTWF0aC5sb2cobm9ybUhpc3RvW2loXSAvIFAxW2l0XSk7XG4gICAgICB9XG4gICAgICBlbnRCYWNrMiArPSBNYXRoLnNxcnQobm9ybUhpc3RvW2loXSAvIFAxW2l0XSk7XG4gICAgICBlbnRCYWNrMyArPSAobm9ybUhpc3RvW2loXSAqIG5vcm1IaXN0b1tpaF0pIC8gKFAxW2l0XSAqIFAxW2l0XSk7XG4gICAgfVxuXG4gICAgLyogRW50cm9weSBvZiB0aGUgb2JqZWN0IHBpeGVscyAqL1xuICAgIGxldCBlbnRPYmoxID0gMC4wO1xuICAgIGxldCBlbnRPYmoyID0gMC4wO1xuICAgIGxldCBlbnRPYmozID0gMC4wO1xuICAgIGZvciAobGV0IGloID0gaXQgKyAxOyBpaCA8IGhpc3RvZ3JhbS5sZW5ndGg7IGloKyspIHtcbiAgICAgIGlmIChoaXN0b2dyYW1baWhdICE9PSAwKSB7XG4gICAgICAgIGVudE9iajEgLT0gKG5vcm1IaXN0b1tpaF0gLyBQMltpdF0pICogTWF0aC5sb2cobm9ybUhpc3RvW2loXSAvIFAyW2l0XSk7XG4gICAgICB9XG4gICAgICBlbnRPYmoyICs9IE1hdGguc3FydChub3JtSGlzdG9baWhdIC8gUDJbaXRdKTtcbiAgICAgIGVudE9iajMgKz0gKG5vcm1IaXN0b1tpaF0gKiBub3JtSGlzdG9baWhdKSAvIChQMltpdF0gKiBQMltpdF0pO1xuICAgIH1cblxuICAgIC8qIFRvdGFsIGVudHJvcHkgKi9cbiAgICBsZXQgdG90RW50MSA9IGVudEJhY2sxICsgZW50T2JqMTtcbiAgICBsZXQgdG90RW50MiA9XG4gICAgICB0ZXJtMiAqIChlbnRCYWNrMiAqIGVudE9iajIgPiAwLjAgPyBNYXRoLmxvZyhlbnRCYWNrMiAqIGVudE9iajIpIDogMC4wKTtcbiAgICBsZXQgdG90RW50MyA9XG4gICAgICB0ZXJtMyAqIChlbnRCYWNrMyAqIGVudE9iajMgPiAwLjAgPyBNYXRoLmxvZyhlbnRCYWNrMyAqIGVudE9iajMpIDogMC4wKTtcblxuICAgIGlmICh0b3RFbnQxID4gbWF4RW50MSkge1xuICAgICAgbWF4RW50MSA9IHRvdEVudDE7XG4gICAgICB0aHJlc2hvbGQxID0gaXQ7XG4gICAgfVxuXG4gICAgaWYgKHRvdEVudDIgPiBtYXhFbnQyKSB7XG4gICAgICBtYXhFbnQyID0gdG90RW50MjtcbiAgICAgIHRocmVzaG9sZDIgPSBpdDtcbiAgICB9XG5cbiAgICBpZiAodG90RW50MyA+IG1heEVudDMpIHtcbiAgICAgIG1heEVudDMgPSB0b3RFbnQzO1xuICAgICAgdGhyZXNob2xkMyA9IGl0O1xuICAgIH1cbiAgfVxuICAvKiBFbmQgTWF4aW11bSBFbnRyb3B5IFRocmVzaG9sZGluZyAqL1xuXG4gIGxldCB0U3RhcnMgPSBbdGhyZXNob2xkMSwgdGhyZXNob2xkMiwgdGhyZXNob2xkM107XG4gIHRTdGFycy5zb3J0KHNvcnRBc2MpO1xuXG4gIGxldCBiZXRhcztcblxuICAvKiBBZGp1c3QgYmV0YSB2YWx1ZXMgKi9cbiAgaWYgKE1hdGguYWJzKHRTdGFyc1swXSAtIHRTdGFyc1sxXSkgPD0gNSkge1xuICAgIGlmIChNYXRoLmFicyh0U3RhcnNbMV0gLSB0U3RhcnNbMl0pIDw9IDUpIHtcbiAgICAgIGJldGFzID0gWzEsIDIsIDFdO1xuICAgIH0gZWxzZSB7XG4gICAgICBiZXRhcyA9IFswLCAxLCAzXTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKE1hdGguYWJzKHRTdGFyc1sxXSAtIHRTdGFyc1syXSkgPD0gNSkge1xuICAgICAgYmV0YXMgPSBbMywgMSwgMF07XG4gICAgfSBlbHNlIHtcbiAgICAgIGJldGFzID0gWzEsIDIsIDFdO1xuICAgIH1cbiAgfVxuXG4gIC8qIERldGVybWluZSB0aGUgb3B0aW1hbCB0aHJlc2hvbGQgdmFsdWUgKi9cbiAgbGV0IG9tZWdhID0gUDFbdFN0YXJzWzJdXSAtIFAxW3RTdGFyc1swXV07XG4gIG9wdFRocmVzaG9sZCA9IE1hdGgucm91bmQoXG4gICAgdFN0YXJzWzBdICogKFAxW3RTdGFyc1swXV0gKyAwLjI1ICogb21lZ2EgKiBiZXRhc1swXSkgK1xuICAgICAgMC4yNSAqIHRTdGFyc1sxXSAqIG9tZWdhICogYmV0YXNbMV0gK1xuICAgICAgdFN0YXJzWzJdICogKFAyW3RTdGFyc1syXV0gKyAwLjI1ICogb21lZ2EgKiBiZXRhc1syXSksXG4gICk7XG5cbiAgcmV0dXJuIG9wdFRocmVzaG9sZDtcbn1cbiIsIi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmlqaS9BdXRvX1RocmVzaG9sZC9ibG9iL21hc3Rlci9zcmMvbWFpbi9qYXZhL2ZpamkvdGhyZXNob2xkL0F1dG9fVGhyZXNob2xkLmphdmFcbi8vIFNoYW5oYmFnIEEuRy4gKDE5OTQpIFwiVXRpbGl6YXRpb24gb2YgSW5mb3JtYXRpb24gTWVhc3VyZSBhcyBhIE1lYW5zIG9mXG4vLyBJbWFnZSBUaHJlc2hvbGRpbmdcIiBHcmFwaGljYWwgTW9kZWxzIGFuZCBJbWFnZSBQcm9jZXNzaW5nLCA1Nig1KTogNDE0LTQxOVxuLy8gUG9ydGVkIHRvIEltYWdlSiBwbHVnaW4gYnkgRy5MYW5kaW5pIGZyb20gRSBDZWxlYmkncyBmb3VyaWVyXzAuOCByb3V0aW5lc1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzaGFuYmhhZyhoaXN0b2dyYW0sIHRvdGFsKSB7XG4gIGxldCBub3JtSGlzdG8gPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7IC8vIG5vcm1hbGl6ZWQgaGlzdG9ncmFtXG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgbm9ybUhpc3RvW2loXSA9IGhpc3RvZ3JhbVtpaF0gLyB0b3RhbDtcbiAgfVxuXG4gIGxldCBQMSA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTsgLy8gY3VtdWxhdGl2ZSBub3JtYWxpemVkIGhpc3RvZ3JhbVxuICBsZXQgUDIgPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7XG4gIFAxWzBdID0gbm9ybUhpc3RvWzBdO1xuICBQMlswXSA9IDEuMCAtIFAxWzBdO1xuICBmb3IgKGxldCBpaCA9IDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIFAxW2loXSA9IFAxW2loIC0gMV0gKyBub3JtSGlzdG9baWhdO1xuICAgIFAyW2loXSA9IDEuMCAtIFAxW2loXTtcbiAgfVxuXG4gIC8qIERldGVybWluZSB0aGUgZmlyc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBmaXJzdEJpbiA9IDA7XG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgaWYgKE1hdGguYWJzKFAxW2loXSkgPj0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIGZpcnN0QmluID0gaWg7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICAvKiBEZXRlcm1pbmUgdGhlIGxhc3Qgbm9uLXplcm8gYmluICovXG4gIGxldCBsYXN0QmluID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7XG4gIGZvciAobGV0IGloID0gaGlzdG9ncmFtLmxlbmd0aCAtIDE7IGloID49IGZpcnN0QmluOyBpaC0tKSB7XG4gICAgaWYgKE1hdGguYWJzKFAyW2loXSkgPj0gTnVtYmVyLkVQU0lMT04pIHtcbiAgICAgIGxhc3RCaW4gPSBpaDtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIC8vIENhbGN1bGF0ZSB0aGUgdG90YWwgZW50cm9weSBlYWNoIGdyYXktbGV2ZWxcbiAgLy8gYW5kIGZpbmQgdGhlIHRocmVzaG9sZCB0aGF0IG1heGltaXplcyBpdFxuICBsZXQgdGhyZXNob2xkID0gLTE7XG4gIGxldCBtaW5FbnQgPSBOdW1iZXIuTUFYX1ZBTFVFOyAvLyBtaW4gZW50cm9weVxuXG4gIGxldCB0ZXJtO1xuICBsZXQgdG90RW50OyAvLyB0b3RhbCBlbnRyb3B5XG4gIGxldCBlbnRCYWNrOyAvLyBlbnRyb3B5IG9mIHRoZSBiYWNrZ3JvdW5kIHBpeGVscyBhdCBhIGdpdmVuIHRocmVzaG9sZFxuICBsZXQgZW50T2JqOyAvLyBlbnRyb3B5IG9mIHRoZSBvYmplY3QgcGl4ZWxzIGF0IGEgZ2l2ZW4gdGhyZXNob2xkXG4gIGZvciAobGV0IGl0ID0gZmlyc3RCaW47IGl0IDw9IGxhc3RCaW47IGl0KyspIHtcbiAgICAvKiBFbnRyb3B5IG9mIHRoZSBiYWNrZ3JvdW5kIHBpeGVscyAqL1xuICAgIGVudEJhY2sgPSAwLjA7XG4gICAgdGVybSA9IDAuNSAvIFAxW2l0XTtcbiAgICBmb3IgKGxldCBpaCA9IDE7IGloIDw9IGl0OyBpaCsrKSB7XG4gICAgICBlbnRCYWNrIC09IG5vcm1IaXN0b1tpaF0gKiBNYXRoLmxvZygxLjAgLSB0ZXJtICogUDFbaWggLSAxXSk7XG4gICAgfVxuICAgIGVudEJhY2sgKj0gdGVybTtcblxuICAgIC8qIEVudHJvcHkgb2YgdGhlIG9iamVjdCBwaXhlbHMgKi9cbiAgICBlbnRPYmogPSAwLjA7XG4gICAgdGVybSA9IDAuNSAvIFAyW2l0XTtcbiAgICBmb3IgKGxldCBpaCA9IGl0ICsgMTsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgICBlbnRPYmogLT0gbm9ybUhpc3RvW2loXSAqIE1hdGgubG9nKDEuMCAtIHRlcm0gKiBQMltpaF0pO1xuICAgIH1cbiAgICBlbnRPYmogKj0gdGVybTtcblxuICAgIC8qIFRvdGFsIGVudHJvcHkgKi9cbiAgICB0b3RFbnQgPSBNYXRoLmFicyhlbnRCYWNrIC0gZW50T2JqKTtcblxuICAgIGlmICh0b3RFbnQgPCBtaW5FbnQpIHtcbiAgICAgIG1pbkVudCA9IHRvdEVudDtcbiAgICAgIHRocmVzaG9sZCA9IGl0O1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGhyZXNob2xkO1xufVxuIiwiLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWppL0F1dG9fVGhyZXNob2xkL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvZmlqaS90aHJlc2hvbGQvQXV0b19UaHJlc2hvbGQuamF2YVxuLy8gWmFjaywgRy4gVy4sIFJvZ2VycywgVy4gRS4gYW5kIExhdHQsIFMuIEEuLCAxOTc3LFxuLy8gQXV0b21hdGljIE1lYXN1cmVtZW50IG9mIFNpc3RlciBDaHJvbWF0aWQgRXhjaGFuZ2UgRnJlcXVlbmN5LFxuLy8gSm91cm5hbCBvZiBIaXN0b2NoZW1pc3RyeSBhbmQgQ3l0b2NoZW1pc3RyeSAyNSAoNyksIHBwLiA3NDEtNzUzXG4vL1xuLy8gIG1vZGlmaWVkIGZyb20gSm9oYW5uZXMgU2NoaW5kZWxpbiBwbHVnaW5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRyaWFuZ2xlKGhpc3RvZ3JhbSkge1xuICAvLyBmaW5kIG1pbiBhbmQgbWF4XG4gIGxldCBtaW4gPSAwO1xuICBsZXQgZG1heCA9IDA7XG4gIGxldCBtYXggPSAwO1xuICBsZXQgbWluMiA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaGlzdG9ncmFtLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGhpc3RvZ3JhbVtpXSA+IDApIHtcbiAgICAgIG1pbiA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgaWYgKG1pbiA+IDApIHtcbiAgICAvLyBsaW5lIHRvIHRoZSAocD09MCkgcG9pbnQsIG5vdCB0byBoaXN0b2dyYW1bbWluXVxuICAgIG1pbi0tO1xuICB9XG5cbiAgLy8gVGhlIFRyaWFuZ2xlIGFsZ29yaXRobSBjYW5ub3QgdGVsbCB3aGV0aGVyIHRoZSBkYXRhIGlzIHNrZXdlZCB0byBvbmUgc2lkZSBvciBhbm90aGVyLlxuICAvLyBUaGlzIGNhdXNlcyBhIHByb2JsZW0gYXMgdGhlcmUgYXJlIDIgcG9zc2libGUgdGhyZXNob2xkcyBiZXR3ZWVuIHRoZSBtYXggYW5kIHRoZSAyIGV4dHJlbWVzXG4gIC8vIG9mIHRoZSBoaXN0b2dyYW0uXG4gIC8vIEhlcmUgSSBwcm9wb3NlIHRvIGZpbmQgb3V0IHRvIHdoaWNoIHNpZGUgb2YgdGhlIG1heCBwb2ludCB0aGUgZGF0YSBpcyBmdXJ0aGVzdCwgYW5kIHVzZSB0aGF0IGFzXG4gIC8vICB0aGUgb3RoZXIgZXh0cmVtZS5cbiAgZm9yIChsZXQgaSA9IGhpc3RvZ3JhbS5sZW5ndGggLSAxOyBpID4gMDsgaS0tKSB7XG4gICAgaWYgKGhpc3RvZ3JhbVtpXSA+IDApIHtcbiAgICAgIG1pbjIgPSBpO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIGlmIChtaW4yIDwgaGlzdG9ncmFtLmxlbmd0aCAtIDEpIHtcbiAgICAvLyBsaW5lIHRvIHRoZSAocD09MCkgcG9pbnQsIG5vdCB0byBkYXRhW21pbl1cbiAgICBtaW4yKys7XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGhpc3RvZ3JhbS5sZW5ndGg7IGkrKykge1xuICAgIGlmIChoaXN0b2dyYW1baV0gPiBkbWF4KSB7XG4gICAgICBtYXggPSBpO1xuICAgICAgZG1heCA9IGhpc3RvZ3JhbVtpXTtcbiAgICB9XG4gIH1cblxuICAvLyBmaW5kIHdoaWNoIGlzIHRoZSBmdXJ0aGVzdCBzaWRlXG4gIGxldCBpbnZlcnRlZCA9IGZhbHNlO1xuICBpZiAobWF4IC0gbWluIDwgbWluMiAtIG1heCkge1xuICAgIC8vIHJldmVyc2UgdGhlIGhpc3RvZ3JhbVxuICAgIGludmVydGVkID0gdHJ1ZTtcbiAgICBsZXQgbGVmdCA9IDA7IC8vIGluZGV4IG9mIGxlZnRtb3N0IGVsZW1lbnRcbiAgICBsZXQgcmlnaHQgPSBoaXN0b2dyYW0ubGVuZ3RoIC0gMTsgLy8gaW5kZXggb2YgcmlnaHRtb3N0IGVsZW1lbnRcbiAgICB3aGlsZSAobGVmdCA8IHJpZ2h0KSB7XG4gICAgICAvLyBleGNoYW5nZSB0aGUgbGVmdCBhbmQgcmlnaHQgZWxlbWVudHNcbiAgICAgIGxldCB0ZW1wID0gaGlzdG9ncmFtW2xlZnRdO1xuICAgICAgaGlzdG9ncmFtW2xlZnRdID0gaGlzdG9ncmFtW3JpZ2h0XTtcbiAgICAgIGhpc3RvZ3JhbVtyaWdodF0gPSB0ZW1wO1xuICAgICAgLy8gbW92ZSB0aGUgYm91bmRzIHRvd2FyZCB0aGUgY2VudGVyXG4gICAgICBsZWZ0Kys7XG4gICAgICByaWdodC0tO1xuICAgIH1cbiAgICBtaW4gPSBoaXN0b2dyYW0ubGVuZ3RoIC0gMSAtIG1pbjI7XG4gICAgbWF4ID0gaGlzdG9ncmFtLmxlbmd0aCAtIDEgLSBtYXg7XG4gIH1cblxuICBpZiAobWluID09PSBtYXgpIHtcbiAgICByZXR1cm4gbWluO1xuICB9XG5cbiAgLy8gZGVzY3JpYmUgbGluZSBieSBueCAqIHggKyBueSAqIHkgLSBkID0gMFxuICBsZXQgbngsIG55LCBkO1xuICAvLyBueCBpcyBqdXN0IHRoZSBtYXggZnJlcXVlbmN5IGFzIHRoZSBvdGhlciBwb2ludCBoYXMgZnJlcT0wXG4gIG54ID0gaGlzdG9ncmFtW21heF07IC8vIC1taW47IC8vIGRhdGFbbWluXTsgLy8gIGxvd2VzdCB2YWx1ZSBibWluID0gKHA9MCklIGluIHRoZSBpbWFnZVxuICBueSA9IG1pbiAtIG1heDtcbiAgZCA9IE1hdGguc3FydChueCAqIG54ICsgbnkgKiBueSk7XG4gIG54IC89IGQ7XG4gIG55IC89IGQ7XG4gIGQgPSBueCAqIG1pbiArIG55ICogaGlzdG9ncmFtW21pbl07XG5cbiAgLy8gZmluZCBzcGxpdCBwb2ludFxuICBsZXQgc3BsaXQgPSBtaW47XG4gIGxldCBzcGxpdERpc3RhbmNlID0gMDtcbiAgZm9yIChsZXQgaSA9IG1pbiArIDE7IGkgPD0gbWF4OyBpKyspIHtcbiAgICBsZXQgbmV3RGlzdGFuY2UgPSBueCAqIGkgKyBueSAqIGhpc3RvZ3JhbVtpXSAtIGQ7XG4gICAgaWYgKG5ld0Rpc3RhbmNlID4gc3BsaXREaXN0YW5jZSkge1xuICAgICAgc3BsaXQgPSBpO1xuICAgICAgc3BsaXREaXN0YW5jZSA9IG5ld0Rpc3RhbmNlO1xuICAgIH1cbiAgfVxuICBzcGxpdC0tO1xuXG4gIGlmIChpbnZlcnRlZCkge1xuICAgIC8vIFRoZSBoaXN0b2dyYW0gbWlnaHQgYmUgdXNlZCBmb3Igc29tZXRoaW5nIGVsc2UsIHNvIGxldCdzIHJldmVyc2UgaXQgYmFja1xuICAgIGxldCBsZWZ0ID0gMDtcbiAgICBsZXQgcmlnaHQgPSBoaXN0b2dyYW0ubGVuZ3RoIC0gMTtcbiAgICB3aGlsZSAobGVmdCA8IHJpZ2h0KSB7XG4gICAgICBsZXQgdGVtcCA9IGhpc3RvZ3JhbVtsZWZ0XTtcbiAgICAgIGhpc3RvZ3JhbVtsZWZ0XSA9IGhpc3RvZ3JhbVtyaWdodF07XG4gICAgICBoaXN0b2dyYW1bcmlnaHRdID0gdGVtcDtcbiAgICAgIGxlZnQrKztcbiAgICAgIHJpZ2h0LS07XG4gICAgfVxuICAgIHJldHVybiBoaXN0b2dyYW0ubGVuZ3RoIC0gMSAtIHNwbGl0O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBzcGxpdDtcbiAgfVxufVxuIiwiLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9maWppL0F1dG9fVGhyZXNob2xkL2Jsb2IvbWFzdGVyL3NyYy9tYWluL2phdmEvZmlqaS90aHJlc2hvbGQvQXV0b19UaHJlc2hvbGQuamF2YVxuLy8gSW1wbGVtZW50cyBZZW4gIHRocmVzaG9sZGluZyBtZXRob2Rcbi8vIDEpIFllbiBKLkMuLCBDaGFuZyBGLkouLCBhbmQgQ2hhbmcgUy4gKDE5OTUpIFwiQSBOZXcgQ3JpdGVyaW9uXG4vLyAgICBmb3IgQXV0b21hdGljIE11bHRpbGV2ZWwgVGhyZXNob2xkaW5nXCIgSUVFRSBUcmFucy4gb24gSW1hZ2Vcbi8vICAgIFByb2Nlc3NpbmcsIDQoMyk6IDM3MC0zNzhcbi8vIDIpIFNlemdpbiBNLiBhbmQgU2Fua3VyIEIuICgyMDA0KSBcIlN1cnZleSBvdmVyIEltYWdlIFRocmVzaG9sZGluZ1xuLy8gICAgVGVjaG5pcXVlcyBhbmQgUXVhbnRpdGF0aXZlIFBlcmZvcm1hbmNlIEV2YWx1YXRpb25cIiBKb3VybmFsIG9mXG4vLyAgICBFbGVjdHJvbmljIEltYWdpbmcsIDEzKDEpOiAxNDYtMTY1XG4vLyAgICBodHRwOi8vY2l0ZXNlZXIuaXN0LnBzdS5lZHUvc2V6Z2luMDRzdXJ2ZXkuaHRtbFxuLy9cbi8vIE0uIEVtcmUgQ2VsZWJpXG4vLyAwNi4xNS4yMDA3XG4vLyBQb3J0ZWQgdG8gSW1hZ2VKIHBsdWdpbiBieSBHLkxhbmRpbmkgZnJvbSBFIENlbGViaSdzIGZvdXJpZXJfMC44IHJvdXRpbmVzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHllbihoaXN0b2dyYW0sIHRvdGFsKSB7XG4gIGxldCBub3JtSGlzdG8gPSBuZXcgQXJyYXkoaGlzdG9ncmFtLmxlbmd0aCk7IC8vIG5vcm1hbGl6ZWQgaGlzdG9ncmFtXG4gIGZvciAobGV0IGloID0gMDsgaWggPCBoaXN0b2dyYW0ubGVuZ3RoOyBpaCsrKSB7XG4gICAgbm9ybUhpc3RvW2loXSA9IGhpc3RvZ3JhbVtpaF0gLyB0b3RhbDtcbiAgfVxuXG4gIGxldCBQMSA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTsgLy8gY3VtdWxhdGl2ZSBub3JtYWxpemVkIGhpc3RvZ3JhbVxuICBQMVswXSA9IG5vcm1IaXN0b1swXTtcbiAgZm9yIChsZXQgaWggPSAxOyBpaCA8IGhpc3RvZ3JhbS5sZW5ndGg7IGloKyspIHtcbiAgICBQMVtpaF0gPSBQMVtpaCAtIDFdICsgbm9ybUhpc3RvW2loXTtcbiAgfVxuXG4gIGxldCBQMVNxID0gbmV3IEFycmF5KGhpc3RvZ3JhbS5sZW5ndGgpO1xuICBQMVNxWzBdID0gbm9ybUhpc3RvWzBdICogbm9ybUhpc3RvWzBdO1xuICBmb3IgKGxldCBpaCA9IDE7IGloIDwgaGlzdG9ncmFtLmxlbmd0aDsgaWgrKykge1xuICAgIFAxU3FbaWhdID0gUDFTcVtpaCAtIDFdICsgbm9ybUhpc3RvW2loXSAqIG5vcm1IaXN0b1tpaF07XG4gIH1cblxuICBsZXQgUDJTcSA9IG5ldyBBcnJheShoaXN0b2dyYW0ubGVuZ3RoKTtcbiAgUDJTcVtoaXN0b2dyYW0ubGVuZ3RoIC0gMV0gPSAwLjA7XG4gIGZvciAobGV0IGloID0gaGlzdG9ncmFtLmxlbmd0aCAtIDI7IGloID49IDA7IGloLS0pIHtcbiAgICBQMlNxW2loXSA9IFAyU3FbaWggKyAxXSArIG5vcm1IaXN0b1tpaCArIDFdICogbm9ybUhpc3RvW2loICsgMV07XG4gIH1cblxuICAvKiBGaW5kIHRoZSB0aHJlc2hvbGQgdGhhdCBtYXhpbWl6ZXMgdGhlIGNyaXRlcmlvbiAqL1xuICBsZXQgdGhyZXNob2xkID0gLTE7XG4gIGxldCBtYXhDcml0ID0gTnVtYmVyLk1JTl9WQUxVRTtcbiAgbGV0IGNyaXQ7XG4gIGZvciAobGV0IGl0ID0gMDsgaXQgPCBoaXN0b2dyYW0ubGVuZ3RoOyBpdCsrKSB7XG4gICAgY3JpdCA9XG4gICAgICAtMS4wICogKFAxU3FbaXRdICogUDJTcVtpdF0gPiAwLjAgPyBNYXRoLmxvZyhQMVNxW2l0XSAqIFAyU3FbaXRdKSA6IDAuMCkgK1xuICAgICAgMiAqXG4gICAgICAgIChQMVtpdF0gKiAoMS4wIC0gUDFbaXRdKSA+IDAuMFxuICAgICAgICAgID8gTWF0aC5sb2coUDFbaXRdICogKDEuMCAtIFAxW2l0XSkpXG4gICAgICAgICAgOiAwLjApO1xuICAgIGlmIChjcml0ID4gbWF4Q3JpdCkge1xuICAgICAgbWF4Q3JpdCA9IGNyaXQ7XG4gICAgICB0aHJlc2hvbGQgPSBpdDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRocmVzaG9sZDtcbn1cbiIsImltcG9ydCB7IG1ldGhvZHMsIG5hbWVzIH0gZnJvbSAnLi4vdHJhbnNmb3JtL21hc2svdGhyZXNob2xkQWxnb3JpdGhtcyc7XG5cbi8qKlxuICogUmV0dXJucyBhIHRocmVzaG9sZCBmb3IgdGhlIGNyZWF0aW9uIG9mIGEgYmluYXJ5IG1hc2sgd2l0aCB0aGUgYG1hc2soKWAgbWV0aG9kLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7VGhyZXNob2xkQWxnb3JpdGhtfSBbb3B0aW9ucy5hbGdvcml0aG09J290c3UnXVxuICogQHJldHVybiB7bnVtYmVyfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRUaHJlc2hvbGQob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGFsZ29yaXRobSA9IG5hbWVzLm90c3UgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRUaHJlc2hvbGQnLCB7XG4gICAgY29tcG9uZW50czogMSxcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgbGV0IG1ldGhvZCA9IG1ldGhvZHNbYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCldO1xuICBpZiAobWV0aG9kKSB7XG4gICAgbGV0IGhpc3RvZ3JhbSA9IHRoaXMuZ2V0SGlzdG9ncmFtKCk7XG4gICAgcmV0dXJuIG1ldGhvZChoaXN0b2dyYW0sIHRoaXMuc2l6ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKGB1bmtub3duIHRocmVzaG9sZGluZyBhbGdvcml0aG06ICR7YWxnb3JpdGhtfWApO1xuICB9XG59XG4iLCJpbXBvcnQgeyBnZXRUaHJlc2hvbGQgYXMgY29udmVydFRocmVzaG9sZCB9IGZyb20gJy4uLy4uLy4uL3V0aWwvY29udmVydGVyJztcbmltcG9ydCBJbWFnZSBmcm9tICcuLi8uLi9JbWFnZSc7XG5pbXBvcnQgZ2V0VGhyZXNob2xkIGZyb20gJy4uLy4uL3V0aWxpdHkvZ2V0VGhyZXNob2xkJztcblxuY29uc3QgVEhSRVNIT0xEID0gJ3RocmVzaG9sZCc7XG5cbi8qKlxuICogQ3JlYXRpb24gb2YgYmluYXJ5IG1hc2sgaXMgYmFzZWQgb24gdGhlIGRldGVybWluYXRpb24gb2YgYSB0aHJlc2hvbGRcbiAqIFlvdSBtYXkgZWl0aGVyIGNob29zZSBhbW9uZyB0aGUgcHJvdmlkZWQgYWxnb3JpdGhtIG9yIGp1c3Qgc3BlY2lmeSBhIHRocmVzaG9sZCB2YWx1ZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7VGhyZXNob2xkQWxnb3JpdGhtfCd0aHJlc2hvbGQnfSBbb3B0aW9ucy5hbGdvcml0aG09J3RocmVzaG9sZCddXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMudGhyZXNob2xkPTAuNV0gLSBJZiB0aGUgYWxnb3JpdGhtIGlzICd0aHJlc2hvbGQnIHNwZWNpZnkgaGVyZSB0aGUgdmFsdWUgKDAgdG8gMSkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZUFscGhhPXRydWVdIC0gQXBwbHkgdGhlIGFscGhhIGNoYW5uZWwgdG8gZGV0ZXJtaW5lIHRoZSBpbnRlbnNpdHkgb2YgdGhlIHBpeGVsLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbnZlcnQ9ZmFsc2VdIC0gSW52ZXJ0IHRoZSByZXN1bHRpbmcgaW1hZ2VcbiAqIEByZXR1cm4ge0ltYWdlfSAtIEJpbmFyeSBpbWFnZSBjb250YWluaW5nIHRoZSBtYXNrXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1hc2sob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAgYWxnb3JpdGhtID0gVEhSRVNIT0xELFxuICAgIHRocmVzaG9sZCA9IDAuNSxcbiAgICB1c2VBbHBoYSA9IHRydWUsXG4gICAgaW52ZXJ0ID0gZmFsc2UsXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWFzaycsIHtcbiAgICBjb21wb25lbnRzOiAxLFxuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBpZiAoYWxnb3JpdGhtID09PSBUSFJFU0hPTEQpIHtcbiAgICB0aHJlc2hvbGQgPSBjb252ZXJ0VGhyZXNob2xkKHRocmVzaG9sZCwgdGhpcy5tYXhWYWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdGhyZXNob2xkID0gZ2V0VGhyZXNob2xkLmNhbGwodGhpcywgb3B0aW9ucyk7XG4gIH1cblxuICBsZXQgbmV3SW1hZ2UgPSBuZXcgSW1hZ2UodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIHtcbiAgICBraW5kOiAnQklOQVJZJyxcbiAgICBwYXJlbnQ6IHRoaXMsXG4gIH0pO1xuXG4gIGxldCBwdHIgPSAwO1xuICBpZiAodGhpcy5hbHBoYSAmJiB1c2VBbHBoYSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICBsZXQgdmFsdWUgPVxuICAgICAgICB0aGlzLmRhdGFbaV0gK1xuICAgICAgICAoKHRoaXMubWF4VmFsdWUgLSB0aGlzLmRhdGFbaV0pICogKHRoaXMubWF4VmFsdWUgLSB0aGlzLmRhdGFbaSArIDFdKSkgL1xuICAgICAgICAgIHRoaXMubWF4VmFsdWU7XG4gICAgICBpZiAoKGludmVydCAmJiB2YWx1ZSA8PSB0aHJlc2hvbGQpIHx8ICghaW52ZXJ0ICYmIHZhbHVlID49IHRocmVzaG9sZCkpIHtcbiAgICAgICAgbmV3SW1hZ2Uuc2V0Qml0KHB0cik7XG4gICAgICB9XG4gICAgICBwdHIrKztcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKGludmVydCAmJiB0aGlzLmRhdGFbaV0gPD0gdGhyZXNob2xkKSB8fFxuICAgICAgICAoIWludmVydCAmJiB0aGlzLmRhdGFbaV0gPj0gdGhyZXNob2xkKVxuICAgICAgKSB7XG4gICAgICAgIG5ld0ltYWdlLnNldEJpdChwdHIpO1xuICAgICAgfVxuICAgICAgcHRyKys7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IGFycmF5IGZyb20gJ25ldy1hcnJheSc7XG5cbmltcG9ydCBJbWFnZSBmcm9tICcuLi9JbWFnZSc7XG5pbXBvcnQgY29weSBmcm9tICcuLi9pbnRlcm5hbC9jb3B5JztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNpemU9MF1cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5hbGdvcml0aG09J2NvcHknXVxuICogQHBhcmFtIHthcnJheTxudW1iZXI+fSBbb3B0aW9ucy5jb2xvcl1cbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYWQob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IHNpemUgPSAwLCBhbGdvcml0aG0gPSAnY29weScsIGNvbG9yIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgncGFkJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBpZiAoYWxnb3JpdGhtID09PSAnc2V0Jykge1xuICAgIGlmIChjb2xvci5sZW5ndGggIT09IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHBhZDogdGhlIGNvbG9yIGFycmF5IG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGggYXMgdGhlIG51bWJlciBvZiBjaGFubmVscy4gSGVyZTogJHt0aGlzLmNoYW5uZWxzfWAsXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29sb3JbaV0gPT09IDApIHtcbiAgICAgICAgY29sb3JbaV0gPSAwLjAwMTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29sb3IgPSBhcnJheSh0aGlzLmNoYW5uZWxzLCBudWxsKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShzaXplKSkge1xuICAgIHNpemUgPSBbc2l6ZSwgc2l6ZV07XG4gIH1cblxuICBsZXQgbmV3V2lkdGggPSB0aGlzLndpZHRoICsgc2l6ZVswXSAqIDI7XG4gIGxldCBuZXdIZWlnaHQgPSB0aGlzLmhlaWdodCArIHNpemVbMV0gKiAyO1xuICBsZXQgY2hhbm5lbHMgPSB0aGlzLmNoYW5uZWxzO1xuXG4gIGxldCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20odGhpcywgeyB3aWR0aDogbmV3V2lkdGgsIGhlaWdodDogbmV3SGVpZ2h0IH0pO1xuXG4gIGNvcHkodGhpcywgbmV3SW1hZ2UsIHNpemVbMF0sIHNpemVbMV0pO1xuXG4gIGZvciAobGV0IGkgPSBzaXplWzBdOyBpIDwgbmV3V2lkdGggLSBzaXplWzBdOyBpKyspIHtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGNoYW5uZWxzOyBrKyspIHtcbiAgICAgIGxldCB2YWx1ZSA9XG4gICAgICAgIGNvbG9yW2tdIHx8IG5ld0ltYWdlLmRhdGFbKHNpemVbMV0gKiBuZXdXaWR0aCArIGkpICogY2hhbm5lbHMgKyBrXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2l6ZVsxXTsgaisrKSB7XG4gICAgICAgIG5ld0ltYWdlLmRhdGFbKGogKiBuZXdXaWR0aCArIGkpICogY2hhbm5lbHMgKyBrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPVxuICAgICAgICBjb2xvcltrXSB8fFxuICAgICAgICBuZXdJbWFnZS5kYXRhW1xuICAgICAgICAgICgobmV3SGVpZ2h0IC0gc2l6ZVsxXSAtIDEpICogbmV3V2lkdGggKyBpKSAqIGNoYW5uZWxzICsga1xuICAgICAgICBdO1xuICAgICAgZm9yIChsZXQgaiA9IG5ld0hlaWdodCAtIHNpemVbMV07IGogPCBuZXdIZWlnaHQ7IGorKykge1xuICAgICAgICBuZXdJbWFnZS5kYXRhWyhqICogbmV3V2lkdGggKyBpKSAqIGNoYW5uZWxzICsga10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBqID0gMDsgaiA8IG5ld0hlaWdodDsgaisrKSB7XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCBjaGFubmVsczsgaysrKSB7XG4gICAgICBsZXQgdmFsdWUgPVxuICAgICAgICBjb2xvcltrXSB8fCBuZXdJbWFnZS5kYXRhWyhqICogbmV3V2lkdGggKyBzaXplWzBdKSAqIGNoYW5uZWxzICsga107XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNpemVbMF07IGkrKykge1xuICAgICAgICBuZXdJbWFnZS5kYXRhWyhqICogbmV3V2lkdGggKyBpKSAqIGNoYW5uZWxzICsga10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICAgIHZhbHVlID1cbiAgICAgICAgY29sb3Jba10gfHxcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVsoaiAqIG5ld1dpZHRoICsgbmV3V2lkdGggLSBzaXplWzBdIC0gMSkgKiBjaGFubmVscyArIGtdO1xuICAgICAgZm9yIChsZXQgaSA9IG5ld1dpZHRoIC0gc2l6ZVswXTsgaSA8IG5ld1dpZHRoOyBpKyspIHtcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVsoaiAqIG5ld1dpZHRoICsgaSkgKiBjaGFubmVscyArIGtdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiLyoqXG4gKiBNYWtlIGEgY29weSBvZiB0aGUgY3VycmVudCBpbWFnZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7SW1hZ2V9IGZyb21JbWFnZVxuICogQHBhcmFtIHtJbWFnZX0gdG9JbWFnZVxuICogQHBhcmFtIHtudW1iZXJ9IHhcbiAqIEBwYXJhbSB7bnVtYmVyfSB5XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvcHlJbWFnZShmcm9tSW1hZ2UsIHRvSW1hZ2UsIHgsIHkpIHtcbiAgbGV0IGZyb21XaWR0aCA9IGZyb21JbWFnZS53aWR0aDtcbiAgbGV0IGZyb21IZWlnaHQgPSBmcm9tSW1hZ2UuaGVpZ2h0O1xuICBsZXQgdG9XaWR0aCA9IHRvSW1hZ2Uud2lkdGg7XG4gIGxldCBjaGFubmVscyA9IGZyb21JbWFnZS5jaGFubmVscztcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBmcm9tV2lkdGg7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgZnJvbUhlaWdodDsgaisrKSB7XG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IGNoYW5uZWxzOyBrKyspIHtcbiAgICAgICAgbGV0IHNvdXJjZSA9IChqICogZnJvbVdpZHRoICsgaSkgKiBjaGFubmVscyArIGs7XG4gICAgICAgIGxldCB0YXJnZXQgPSAoKHkgKyBqKSAqIHRvV2lkdGggKyB4ICsgaSkgKiBjaGFubmVscyArIGs7XG4gICAgICAgIHRvSW1hZ2UuZGF0YVt0YXJnZXRdID0gZnJvbUltYWdlLmRhdGFbc291cmNlXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCBJbWFnZSBmcm9tICcuLi9JbWFnZSc7XG5cbi8qKlxuICogQ2hhbmdlIHRoZSBpbWFnZSBjb2xvciBkZXB0aC5cbiAqIFRoZSBjb2xvciBkZXB0aCBpcyB0aGUgbnVtYmVyIG9mIGJpdHMgdGhhdCBpcyBhc3NpZ25lZCB0byBlYWNoIHBvaW50IG9mIGEgY2hhbm5lbC5cbiAqIEZvciBub3JtYWwgaW1hZ2VzIGl0IGlzIDggYml0cyBtZWFuaW5nIHRoZSB2YWx1ZSBpcyBiZXR3ZWVuIDAgYW5kIDI1NS5cbiAqIEN1cnJlbnRseSBvbmx5IGNvbnZlcnNpb24gZnJvbSAxLCA4IG9yIDE2IGJpdHMgdG93YXJkcyA4IG9yIDE2IGJpdHMgYXJlIGFsbG93ZWQuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IFtuZXdDb2xvckRlcHRoPThdXG4gKiBAcmV0dXJuIHtJbWFnZX0gVGhlIG5ldyBpbWFnZVxuICogQGV4YW1wbGVcbiAqIHZhciBuZXdJbWFnZSA9IGltYWdlLmNvbG9yRGVwdGgoOCk7XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbG9yRGVwdGgobmV3Q29sb3JEZXB0aCA9IDgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdjb2xvckRlcHRoJywge1xuICAgIGJpdERlcHRoOiBbMSwgOCwgMTZdLFxuICB9KTtcblxuICBpZiAoIVs4LCAxNl0uaW5jbHVkZXMobmV3Q29sb3JEZXB0aCkpIHtcbiAgICB0aHJvdyBFcnJvcignWW91IG5lZWQgdG8gc3BlY2lmeSB0aGUgbmV3IGNvbG9yRGVwdGggYXMgOCBvciAxNicpO1xuICB9XG5cbiAgaWYgKHRoaXMuYml0RGVwdGggPT09IG5ld0NvbG9yRGVwdGgpIHtcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICB9XG5cbiAgbGV0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7IGJpdERlcHRoOiBuZXdDb2xvckRlcHRoIH0pO1xuXG4gIHN3aXRjaCAobmV3Q29sb3JEZXB0aCkge1xuICAgIGNhc2UgODpcbiAgICAgIGlmICh0aGlzLmJpdERlcHRoID09PSAxKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5nZXRCaXQoaSkpIHtcbiAgICAgICAgICAgIG5ld0ltYWdlLmRhdGFbaV0gPSAyNTU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIG5ld0ltYWdlLmRhdGFbaV0gPSB0aGlzLmRhdGFbaV0gPj4gODtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgYnJlYWs7XG4gICAgY2FzZSAxNjpcbiAgICAgIGlmICh0aGlzLmJpdERlcHRoID09PSAxKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zaXplOyBpKyspIHtcbiAgICAgICAgICBpZiAodGhpcy5nZXRCaXQoaSkpIHtcbiAgICAgICAgICAgIG5ld0ltYWdlLmRhdGFbaV0gPSA2NTUzNTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgbmV3SW1hZ2UuZGF0YVtpXSA9ICh0aGlzLmRhdGFbaV0gPDwgOCkgfCB0aGlzLmRhdGFbaV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvbG9yRGVwdGggY29udmVyc2lvbiB1bmV4cGVjdGVkIGNhc2UnKTtcbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgdmFsaWRJbnRlcnBvbGF0aW9ucywgY2hlY2tJbnRlcnBvbGF0aW9uIH0gZnJvbSAnLi4vaW50ZXJuYWwvY2hlY2tzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcm90YXRlRnJlZShkZWdyZWVzLCBvcHRpb25zID0ge30pIHtcbiAgY29uc3Qge1xuICAgIGludGVycG9sYXRpb24gPSB2YWxpZEludGVycG9sYXRpb25zLm5lYXJlc3RuZWlnaGJvcixcbiAgICB3aWR0aCA9IHRoaXMud2lkdGgsXG4gICAgaGVpZ2h0ID0gdGhpcy5oZWlnaHQsXG4gIH0gPSBvcHRpb25zO1xuXG4gIGlmICh0eXBlb2YgZGVncmVlcyAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkZWdyZWVzIG11c3QgYmUgYSBudW1iZXInKTtcbiAgfVxuICBjb25zdCBpbnRlcnBvbGF0aW9uVG9Vc2UgPSBjaGVja0ludGVycG9sYXRpb24oaW50ZXJwb2xhdGlvbik7XG5cbiAgY29uc3QgcmFkaWFucyA9IChkZWdyZWVzICogTWF0aC5QSSkgLyAxODA7XG4gIGNvbnN0IG5ld1dpZHRoID0gTWF0aC5mbG9vcihcbiAgICBNYXRoLmFicyh3aWR0aCAqIE1hdGguY29zKHJhZGlhbnMpKSArIE1hdGguYWJzKGhlaWdodCAqIE1hdGguc2luKHJhZGlhbnMpKSxcbiAgKTtcbiAgY29uc3QgbmV3SGVpZ2h0ID0gTWF0aC5mbG9vcihcbiAgICBNYXRoLmFicyhoZWlnaHQgKiBNYXRoLmNvcyhyYWRpYW5zKSkgKyBNYXRoLmFicyh3aWR0aCAqIE1hdGguc2luKHJhZGlhbnMpKSxcbiAgKTtcbiAgY29uc3QgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHtcbiAgICB3aWR0aDogbmV3V2lkdGgsXG4gICAgaGVpZ2h0OiBuZXdIZWlnaHQsXG4gIH0pO1xuICBjb25zdCBjb3MgPSBNYXRoLmNvcygtcmFkaWFucyk7XG4gIGNvbnN0IHNpbiA9IE1hdGguc2luKC1yYWRpYW5zKTtcblxuICBsZXQgeDAgPSBuZXdXaWR0aCAvIDI7XG4gIGxldCB5MCA9IG5ld0hlaWdodCAvIDI7XG4gIGlmIChuZXdXaWR0aCAlIDIgPT09IDApIHtcbiAgICB4MCA9IHgwIC0gMC41O1xuICAgIGlmIChuZXdIZWlnaHQgJSAyID09PSAwKSB7XG4gICAgICB5MCA9IHkwIC0gMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICB5MCA9IE1hdGguZmxvb3IoeTApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB4MCA9IE1hdGguZmxvb3IoeDApO1xuICAgIGlmIChuZXdIZWlnaHQgJSAyID09PSAwKSB7XG4gICAgICB5MCA9IHkwIC0gMC41O1xuICAgIH0gZWxzZSB7XG4gICAgICB5MCA9IE1hdGguZmxvb3IoeTApO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0IGluY3JlbWVudFggPSBNYXRoLmZsb29yKHdpZHRoIC8gMiAtIHgwKTtcbiAgY29uc3QgaW5jcmVtZW50WSA9IE1hdGguZmxvb3IoaGVpZ2h0IC8gMiAtIHkwKTtcblxuICBzd2l0Y2ggKGludGVycG9sYXRpb25Ub1VzZSkge1xuICAgIGNhc2UgdmFsaWRJbnRlcnBvbGF0aW9ucy5uZWFyZXN0bmVpZ2hib3I6XG4gICAgICByZXR1cm4gcm90YXRlTmVhcmVzdE5laWdoYm9yKFxuICAgICAgICB0aGlzLFxuICAgICAgICBuZXdJbWFnZSxcbiAgICAgICAgaW5jcmVtZW50WCxcbiAgICAgICAgaW5jcmVtZW50WSxcbiAgICAgICAgeDAsXG4gICAgICAgIHkwLFxuICAgICAgICBjb3MsXG4gICAgICAgIHNpbixcbiAgICAgICk7XG4gICAgY2FzZSB2YWxpZEludGVycG9sYXRpb25zLmJpbGluZWFyOlxuICAgICAgcmV0dXJuIHJvdGF0ZUJpbGluZWFyKFxuICAgICAgICB0aGlzLFxuICAgICAgICBuZXdJbWFnZSxcbiAgICAgICAgaW5jcmVtZW50WCxcbiAgICAgICAgaW5jcmVtZW50WSxcbiAgICAgICAgeDAsXG4gICAgICAgIHkwLFxuICAgICAgICBjb3MsXG4gICAgICAgIHNpbixcbiAgICAgICk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHVuc3VwcG9ydGVkIHJvdGF0ZSBpbnRlcnBvbGF0aW9uOiAke2ludGVycG9sYXRpb25Ub1VzZX1gLFxuICAgICAgKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByb3RhdGVOZWFyZXN0TmVpZ2hib3IoXG4gIHRoaXNJbWFnZSxcbiAgbmV3SW1hZ2UsXG4gIGluY3JlbWVudFgsXG4gIGluY3JlbWVudFksXG4gIHgwLFxuICB5MCxcbiAgY29zLFxuICBzaW4sXG4pIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdJbWFnZS53aWR0aDsgaSArPSAxKSB7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdJbWFnZS5oZWlnaHQ7IGogKz0gMSkge1xuICAgICAgZm9yIChsZXQgYyA9IDA7IGMgPCB0aGlzSW1hZ2UuY2hhbm5lbHM7IGMrKykge1xuICAgICAgICBsZXQgeCA9IE1hdGgucm91bmQoKGkgLSB4MCkgKiBjb3MgLSAoaiAtIHkwKSAqIHNpbiArIHgwKSArIGluY3JlbWVudFg7XG4gICAgICAgIGxldCB5ID0gTWF0aC5yb3VuZCgoaiAtIHkwKSAqIGNvcyArIChpIC0geDApICogc2luICsgeTApICsgaW5jcmVtZW50WTtcblxuICAgICAgICBpZiAoeCA8IDAgfHwgeCA+PSB0aGlzSW1hZ2Uud2lkdGggfHwgeSA8IDAgfHwgeSA+PSB0aGlzSW1hZ2UuaGVpZ2h0KSB7XG4gICAgICAgICAgaWYgKHRoaXNJbWFnZS5hbHBoYSA9PT0gMSAmJiBjID09PSB0aGlzSW1hZ2UuY2hhbm5lbHMgLSAxKSB7XG4gICAgICAgICAgICBuZXdJbWFnZS5zZXRWYWx1ZVhZKGksIGosIGMsIDApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBuZXdJbWFnZS5zZXRWYWx1ZVhZKGksIGosIGMsIHRoaXNJbWFnZS5tYXhWYWx1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5ld0ltYWdlLnNldFZhbHVlWFkoaSwgaiwgYywgdGhpc0ltYWdlLmdldFZhbHVlWFkoeCwgeSwgYykpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdJbWFnZTtcbn1cblxuZnVuY3Rpb24gcm90YXRlQmlsaW5lYXIoXG4gIHRoaXNJbWFnZSxcbiAgbmV3SW1hZ2UsXG4gIGluY3JlbWVudFgsXG4gIGluY3JlbWVudFksXG4gIHgwLFxuICB5MCxcbiAgY29zLFxuICBzaW4sXG4pIHtcbiAgbGV0IHN0cmlkZSA9IHRoaXNJbWFnZS53aWR0aCAqIHRoaXNJbWFnZS5jaGFubmVscztcbiAgZm9yIChsZXQgaiA9IDA7IGogPCBuZXdJbWFnZS5oZWlnaHQ7IGorKykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3SW1hZ2Uud2lkdGg7IGkrKykge1xuICAgICAgbGV0IHggPSAoaSAtIHgwKSAqIGNvcyAtIChqIC0geTApICogc2luICsgeDAgKyBpbmNyZW1lbnRYO1xuICAgICAgbGV0IHkgPSAoaiAtIHkwKSAqIGNvcyArIChpIC0geDApICogc2luICsgeTAgKyBpbmNyZW1lbnRZO1xuICAgICAgbGV0IHgxID0geCB8IDA7XG4gICAgICBsZXQgeTEgPSB5IHwgMDtcbiAgICAgIGxldCB4RGlmZiA9IHggLSB4MTtcbiAgICAgIGxldCB5RGlmZiA9IHkgLSB5MTtcbiAgICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpc0ltYWdlLmNoYW5uZWxzOyBjKyspIHtcbiAgICAgICAgaWYgKHggPCAwIHx8IHggPj0gdGhpc0ltYWdlLndpZHRoIHx8IHkgPCAwIHx8IHkgPj0gdGhpc0ltYWdlLmhlaWdodCkge1xuICAgICAgICAgIGlmICh0aGlzSW1hZ2UuYWxwaGEgPT09IDEgJiYgYyA9PT0gdGhpc0ltYWdlLmNoYW5uZWxzIC0gMSkge1xuICAgICAgICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWShpLCBqLCBjLCAwKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWShpLCBqLCBjLCB0aGlzSW1hZ2UubWF4VmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgaW5kZXggPSAoeTEgKiB0aGlzSW1hZ2Uud2lkdGggKyB4MSkgKiB0aGlzSW1hZ2UuY2hhbm5lbHMgKyBjO1xuXG4gICAgICAgICAgbGV0IEEgPSB0aGlzSW1hZ2UuZGF0YVtpbmRleF07XG4gICAgICAgICAgbGV0IEIgPSB0aGlzSW1hZ2UuZGF0YVtpbmRleCArIHRoaXNJbWFnZS5jaGFubmVsc107XG4gICAgICAgICAgbGV0IEMgPSB0aGlzSW1hZ2UuZGF0YVtpbmRleCArIHN0cmlkZV07XG4gICAgICAgICAgbGV0IEQgPSB0aGlzSW1hZ2UuZGF0YVtpbmRleCArIHN0cmlkZSArIHRoaXNJbWFnZS5jaGFubmVsc107XG5cbiAgICAgICAgICBsZXQgcmVzdWx0ID1cbiAgICAgICAgICAgIChBICtcbiAgICAgICAgICAgICAgeERpZmYgKiAoQiAtIEEpICtcbiAgICAgICAgICAgICAgeURpZmYgKiAoQyAtIEEpICtcbiAgICAgICAgICAgICAgeERpZmYgKiB5RGlmZiAqIChBIC0gQiAtIEMgKyBEKSkgfFxuICAgICAgICAgICAgMDtcblxuICAgICAgICAgIG5ld0ltYWdlLnNldFZhbHVlWFkoaSwgaiwgYywgcmVzdWx0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3SW1hZ2U7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG5pbXBvcnQgcm90YXRlRnJlZSBmcm9tICcuL3JvdGF0ZUZyZWUnO1xuXG4vKipcbiAqIFJvdGF0ZXMgYW4gaW1hZ2UuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IGFuZ2xlIC0gQW5nbGUgb2YgdGhlIHJvdGF0aW9uIGluIGRlZ3JlZXNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7SW50ZXJwb2xhdGlvbkFsZ29yaXRobX0gW29wdGlvbnMuaW50ZXJwb2xhdGlvbj0nbmVhcmVzdE5laWdoYm9yJ10gLSBJbnRlcnBvbGF0aW9uIGFsZ29yaXRobSB0byB1c2UgaWYgYGFuZ2xlYCBpcyBub3QgYSBtdWx0aXBsZSBvZiA5MFxuICogQHJldHVybiB7SW1hZ2V9IFRoZSBuZXcgcm90YXRlZCBpbWFnZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKGFuZ2xlLCBvcHRpb25zKSB7XG4gIGlmICh0eXBlb2YgYW5nbGUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYW5nbGUgbXVzdCBiZSBhIG51bWJlcicpO1xuICB9XG5cbiAgaWYgKGFuZ2xlIDwgMCkge1xuICAgIGFuZ2xlID0gTWF0aC5jZWlsKC1hbmdsZSAvIDM2MCkgKiAzNjAgKyBhbmdsZTtcbiAgfVxuXG4gIHN3aXRjaCAoYW5nbGUgJSAzNjApIHtcbiAgICBjYXNlIDA6XG4gICAgICByZXR1cm4gdGhpcy5jbG9uZSgpO1xuICAgIGNhc2UgOTA6XG4gICAgICByZXR1cm4gcm90YXRlUmlnaHQuY2FsbCh0aGlzKTtcbiAgICBjYXNlIDE4MDpcbiAgICAgIHJldHVybiByb3RhdGUxODAuY2FsbCh0aGlzKTtcbiAgICBjYXNlIDI3MDpcbiAgICAgIHJldHVybiByb3RhdGVMZWZ0LmNhbGwodGhpcyk7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiByb3RhdGVGcmVlLmNhbGwodGhpcywgYW5nbGUsIG9wdGlvbnMpO1xuICB9XG59XG5cbi8qKlxuICogUm90YXRlcyBhbiBpbWFnZSBjb3VudGVyLWNsb2Nrd2lzZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge0ltYWdlfSBUaGUgbmV3IHJvdGF0ZWQgaW1hZ2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJvdGF0ZUxlZnQoKSB7XG4gIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgd2lkdGg6IHRoaXMuaGVpZ2h0LFxuICAgIGhlaWdodDogdGhpcy53aWR0aCxcbiAgfSk7XG4gIGNvbnN0IG5ld01heEhlaWdodCA9IG5ld0ltYWdlLmhlaWdodCAtIDE7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5oZWlnaHQ7IGkrKykge1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy53aWR0aDsgaisrKSB7XG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IHRoaXMuY2hhbm5lbHM7IGsrKykge1xuICAgICAgICBuZXdJbWFnZS5zZXRWYWx1ZVhZKGksIG5ld01heEhlaWdodCAtIGosIGssIHRoaXMuZ2V0VmFsdWVYWShqLCBpLCBrKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdJbWFnZTtcbn1cblxuLyoqXG4gKiBSb3RhdGVzIGFuIGltYWdlIGNsb2Nrd2lzZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge0ltYWdlfSBUaGUgbmV3IHJvdGF0ZWQgaW1hZ2VcbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlUmlnaHQoKSB7XG4gIGNvbnN0IG5ld0ltYWdlID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgd2lkdGg6IHRoaXMuaGVpZ2h0LFxuICAgIGhlaWdodDogdGhpcy53aWR0aCxcbiAgfSk7XG4gIGNvbnN0IG5ld01heFdpZHRoID0gbmV3SW1hZ2Uud2lkdGggLSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMud2lkdGg7IGorKykge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLmNoYW5uZWxzOyBrKyspIHtcbiAgICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWShuZXdNYXhXaWR0aCAtIGksIGosIGssIHRoaXMuZ2V0VmFsdWVYWShqLCBpLCBrKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBuZXdJbWFnZTtcbn1cblxuZnVuY3Rpb24gcm90YXRlMTgwKCkge1xuICBjb25zdCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20odGhpcyk7XG4gIGNvbnN0IG5ld01heFdpZHRoID0gbmV3SW1hZ2Uud2lkdGggLSAxO1xuICBjb25zdCBuZXdNYXhIZWlnaHQgPSBuZXdJbWFnZS5oZWlnaHQgLSAxO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuaGVpZ2h0OyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMud2lkdGg7IGorKykge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB0aGlzLmNoYW5uZWxzOyBrKyspIHtcbiAgICAgICAgbmV3SW1hZ2Uuc2V0VmFsdWVYWShcbiAgICAgICAgICBuZXdNYXhXaWR0aCAtIGosXG4gICAgICAgICAgbmV3TWF4SGVpZ2h0IC0gaSxcbiAgICAgICAgICBrLFxuICAgICAgICAgIHRoaXMuZ2V0VmFsdWVYWShqLCBpLCBrKSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IGdldEltYWdlUGFyYW1ldGVycyBmcm9tICcuLi9pbnRlcm5hbC9nZXRJbWFnZVBhcmFtZXRlcnMnO1xuaW1wb3J0IHsgZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UgfSBmcm9tICcuLi9pbnRlcm5hbC9nZXRPdXRwdXRJbWFnZSc7XG5cbi8qKlxuICogSW5zZXJ0cyBhbiBpbWFnZSB3aXRoaW4gYW5vdGhlciBpbWFnZS5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0ltYWdlfSB0b0luc2VydCBUaGUgaW1hZ2UgdG8gaW5zZXJ0LiBPdXQgb2YgYm91bmRhcnkgcGl4ZWwgd2lsbCBiZSBpZ25vcmVkLlxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLng9MF0geCBvZmZzZXRcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy55PTBdIHkgb2Zmc2V0XG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmluUGxhY2U9ZmFsc2VdIC0gSWYgdHJ1ZSBtb2RpZmllcyB0aGUgaW1hZ2UuIElmIGZhbHNlIHRoZSBpbnNlcnRpb24gaXMgcGVyZm9ybWVkIG9uIGEgY29weSBvZiB0aGUgaW1hZ2UuXG4gKiBAcmV0dXJuIHtJbWFnZX0gVGhlIG1vZGlmaWVkIGltYWdlIG9yIHRoZSBuZXcgaW1hZ2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluc2VydCh0b0luc2VydCwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IHBhcmFtZXRlcnMgPSBnZXRJbWFnZVBhcmFtZXRlcnModG9JbnNlcnQpO1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2luc2VydCcsIHBhcmFtZXRlcnMpO1xuICBsZXQgeyB4ID0gMCwgeSA9IDAgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3Qgb3V0ID0gZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UodGhpcywgb3B0aW9ucywgeyBjb3B5OiB0cnVlIH0pO1xuICBjb25zdCBtYXhZID0gTWF0aC5taW4ob3V0LmhlaWdodCwgeSArIHRvSW5zZXJ0LmhlaWdodCk7XG4gIGNvbnN0IG1heFggPSBNYXRoLm1pbihvdXQud2lkdGgsIHggKyB0b0luc2VydC53aWR0aCk7XG4gIGlmIChvdXQuYml0RGVwdGggPT09IDEpIHtcbiAgICBmb3IgKGxldCBqID0geTsgaiA8IG1heFk7IGorKykge1xuICAgICAgZm9yIChsZXQgaSA9IHg7IGkgPCBtYXhYOyBpKyspIHtcbiAgICAgICAgY29uc3QgdmFsID0gdG9JbnNlcnQuZ2V0Qml0WFkoaSAtIHgsIGogLSB5KTtcbiAgICAgICAgaWYgKHZhbCkgb3V0LnNldEJpdFhZKGksIGopO1xuICAgICAgICBlbHNlIG91dC5jbGVhckJpdFhZKGksIGopO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBqID0geTsgaiA8IG1heFk7IGorKykge1xuICAgICAgZm9yIChsZXQgaSA9IHg7IGkgPCBtYXhYOyBpKyspIHtcbiAgICAgICAgb3V0LnNldFBpeGVsWFkoaSwgaiwgdG9JbnNlcnQuZ2V0UGl4ZWxYWShpIC0geCwgaiAtIHkpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gb3V0O1xufVxuIiwiaW1wb3J0IGFycmF5IGZyb20gJ25ldy1hcnJheSc7XG5cbi8qKlxuICogVGhpcyBtZXRob2Qgd2lsbCBjaGFuZ2UgdGhlIGJvcmRlclxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaXplPTBdXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuYWxnb3JpdGhtPSdjb3B5J11cbiAqIEBwYXJhbSB7bnVtYmVyW119IFtvcHRpb25zLmNvbG9yXVxuICogQHJldHVybiB7dGhpc31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0Qm9yZGVyKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBzaXplID0gMCwgYWxnb3JpdGhtID0gJ2NvcHknLCBjb2xvciB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3NldEJvcmRlcicsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2LCAzMiwgNjRdLFxuICB9KTtcblxuICBpZiAoYWxnb3JpdGhtID09PSAnc2V0Jykge1xuICAgIGlmIChjb2xvci5sZW5ndGggIT09IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYHNldEJvcmRlcjogdGhlIGNvbG9yIGFycmF5IG11c3QgaGF2ZSB0aGUgc2FtZSBsZW5ndGggYXMgdGhlIG51bWJlciBvZiBjaGFubmVscy4gSGVyZTogJHt0aGlzLmNoYW5uZWxzfWAsXG4gICAgICApO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbG9yLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoY29sb3JbaV0gPT09IDApIHtcbiAgICAgICAgY29sb3JbaV0gPSAwLjAwMTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgY29sb3IgPSBhcnJheSh0aGlzLmNoYW5uZWxzLCBudWxsKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShzaXplKSkge1xuICAgIHNpemUgPSBbc2l6ZSwgc2l6ZV07XG4gIH1cblxuICBsZXQgbGVmdFJpZ2h0U2l6ZSA9IHNpemVbMF07XG4gIGxldCB0b3BCb3R0b21TaXplID0gc2l6ZVsxXTtcbiAgbGV0IGNoYW5uZWxzID0gdGhpcy5jaGFubmVscztcblxuICBmb3IgKGxldCBpID0gbGVmdFJpZ2h0U2l6ZTsgaSA8IHRoaXMud2lkdGggLSBsZWZ0UmlnaHRTaXplOyBpKyspIHtcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGNoYW5uZWxzOyBrKyspIHtcbiAgICAgIGxldCB2YWx1ZSA9XG4gICAgICAgIGNvbG9yW2tdIHx8IHRoaXMuZGF0YVsoaSArIHRoaXMud2lkdGggKiB0b3BCb3R0b21TaXplKSAqIGNoYW5uZWxzICsga107XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRvcEJvdHRvbVNpemU7IGorKykge1xuICAgICAgICB0aGlzLmRhdGFbKGogKiB0aGlzLndpZHRoICsgaSkgKiBjaGFubmVscyArIGtdID0gdmFsdWU7XG4gICAgICB9XG4gICAgICB2YWx1ZSA9XG4gICAgICAgIGNvbG9yW2tdIHx8XG4gICAgICAgIHRoaXMuZGF0YVtcbiAgICAgICAgICAoaSArIHRoaXMud2lkdGggKiAodGhpcy5oZWlnaHQgLSB0b3BCb3R0b21TaXplIC0gMSkpICogY2hhbm5lbHMgKyBrXG4gICAgICAgIF07XG4gICAgICBmb3IgKGxldCBqID0gdGhpcy5oZWlnaHQgLSB0b3BCb3R0b21TaXplOyBqIDwgdGhpcy5oZWlnaHQ7IGorKykge1xuICAgICAgICB0aGlzLmRhdGFbKGogKiB0aGlzLndpZHRoICsgaSkgKiBjaGFubmVscyArIGtdID0gdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLmhlaWdodDsgaisrKSB7XG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCBjaGFubmVsczsgaysrKSB7XG4gICAgICBsZXQgdmFsdWUgPVxuICAgICAgICBjb2xvcltrXSB8fCB0aGlzLmRhdGFbKGogKiB0aGlzLndpZHRoICsgbGVmdFJpZ2h0U2l6ZSkgKiBjaGFubmVscyArIGtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZWZ0UmlnaHRTaXplOyBpKyspIHtcbiAgICAgICAgdGhpcy5kYXRhWyhqICogdGhpcy53aWR0aCArIGkpICogY2hhbm5lbHMgKyBrXSA9IHZhbHVlO1xuICAgICAgfVxuICAgICAgdmFsdWUgPVxuICAgICAgICBjb2xvcltrXSB8fFxuICAgICAgICB0aGlzLmRhdGFbXG4gICAgICAgICAgKGogKiB0aGlzLndpZHRoICsgdGhpcy53aWR0aCAtIGxlZnRSaWdodFNpemUgLSAxKSAqIGNoYW5uZWxzICsga1xuICAgICAgICBdO1xuICAgICAgZm9yIChsZXQgaSA9IHRoaXMud2lkdGggLSBsZWZ0UmlnaHRTaXplOyBpIDwgdGhpcy53aWR0aDsgaSsrKSB7XG4gICAgICAgIHRoaXMuZGF0YVsoaiAqIHRoaXMud2lkdGggKyBpKSAqIGNoYW5uZWxzICsga10gPSB2YWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBTdGFjayBmcm9tICcuLi8uLi9zdGFjay9TdGFjayc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgR1JFWSB9IGZyb20gJy4uL21vZGVsL21vZGVsJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5wcmVzZXJ2ZUFscGhhPXRydWVdXG4gKiBAcmV0dXJuIHtTdGFja31cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3BsaXQob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IHByZXNlcnZlQWxwaGEgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnc3BsaXQnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIC8vIHNwbGl0IHdpbGwgYWx3YXlzIHJldHVybiBhIHN0YWNrIG9mIGltYWdlc1xuICBpZiAodGhpcy5jb21wb25lbnRzID09PSAxKSB7XG4gICAgcmV0dXJuIG5ldyBTdGFjayhbdGhpcy5jbG9uZSgpXSk7XG4gIH1cblxuICBsZXQgaW1hZ2VzID0gbmV3IFN0YWNrKCk7XG5cbiAgbGV0IGRhdGEgPSB0aGlzLmRhdGE7XG4gIGlmICh0aGlzLmFscGhhICYmIHByZXNlcnZlQWxwaGEpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuY29tcG9uZW50czsgaSsrKSB7XG4gICAgICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHtcbiAgICAgICAgY29tcG9uZW50czogMSxcbiAgICAgICAgYWxwaGE6IHRydWUsXG4gICAgICAgIGNvbG9yTW9kZWw6IEdSRVksXG4gICAgICB9KTtcbiAgICAgIGxldCBwdHIgPSAwO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgaiArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gZGF0YVtqICsgaV07XG4gICAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gZGF0YVtqICsgdGhpcy5jb21wb25lbnRzXTtcbiAgICAgIH1cbiAgICAgIGltYWdlcy5wdXNoKG5ld0ltYWdlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmNoYW5uZWxzOyBpKyspIHtcbiAgICAgIGxldCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20odGhpcywge1xuICAgICAgICBjb21wb25lbnRzOiAxLFxuICAgICAgICBhbHBoYTogZmFsc2UsXG4gICAgICAgIGNvbG9yTW9kZWw6IEdSRVksXG4gICAgICB9KTtcbiAgICAgIGxldCBwdHIgPSAwO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBkYXRhLmxlbmd0aDsgaiArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gZGF0YVtqICsgaV07XG4gICAgICB9XG4gICAgICBpbWFnZXMucHVzaChuZXdJbWFnZSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGltYWdlcztcbn1cbiIsImltcG9ydCB7IHZhbGlkYXRlQ2hhbm5lbCB9IGZyb20gJy4uLy4uL3V0aWwvY2hhbm5lbCc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IHsgR1JFWSB9IGZyb20gJy4uL21vZGVsL21vZGVsJztcblxuLyoqXG4gKiBDcmVhdGUgYSBncmV5IGltYWdlIGJhc2VkIG9uIHRoZSBzZWxlY3RlZCBjaGFubmVsXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ8c3RyaW5nfSBjaGFubmVsXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmtlZXBBbHBoYV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubWVyZ2VBbHBoYV1cbiAqIEByZXR1cm4ge0ltYWdlfSBBIGdyZXkgaW1hZ2Ugd2l0aCB0aGUgZXh0cmFjdGVkIGNoYW5uZWxcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2hhbm5lbChjaGFubmVsLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsga2VlcEFscGhhID0gZmFsc2UsIG1lcmdlQWxwaGEgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICBrZWVwQWxwaGEgJj0gdGhpcy5hbHBoYTtcbiAgbWVyZ2VBbHBoYSAmPSB0aGlzLmFscGhhO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZ2V0Q2hhbm5lbCcsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgY2hhbm5lbCA9IHZhbGlkYXRlQ2hhbm5lbCh0aGlzLCBjaGFubmVsKTtcblxuICBsZXQgbmV3SW1hZ2UgPSBJbWFnZS5jcmVhdGVGcm9tKHRoaXMsIHtcbiAgICBjb21wb25lbnRzOiAxLFxuICAgIGFscGhhOiBrZWVwQWxwaGEsXG4gICAgY29sb3JNb2RlbDogR1JFWSxcbiAgfSk7XG4gIGxldCBwdHIgPSAwO1xuICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuZGF0YS5sZW5ndGg7IGogKz0gdGhpcy5jaGFubmVscykge1xuICAgIGlmIChtZXJnZUFscGhhKSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9XG4gICAgICAgICh0aGlzLmRhdGFbaiArIGNoYW5uZWxdICogdGhpcy5kYXRhW2ogKyB0aGlzLmNvbXBvbmVudHNdKSAvXG4gICAgICAgIHRoaXMubWF4VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID0gdGhpcy5kYXRhW2ogKyBjaGFubmVsXTtcbiAgICAgIGlmIChrZWVwQWxwaGEpIHtcbiAgICAgICAgbmV3SW1hZ2UuZGF0YVtwdHIrK10gPSB0aGlzLmRhdGFbaiArIHRoaXMuY29tcG9uZW50c107XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uL0ltYWdlJztcbmltcG9ydCB7IEdSRVkgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbi8qKlxuICogQ3JlYXRlIGEgbmV3IGdyZXkgSW1hZ2UgYnkgY29tYmluaW5nIHRoZSBjaGFubmVscyBvZiB0aGUgY3VycmVudCBpbWFnZS5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBtZXRob2RcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubWVyZ2VBbHBoYT1mYWxzZV1cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMua2VlcEFscGhhPWZhbHNlXVxuICogQHJldHVybiB7SW1hZ2V9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVDaGFubmVscyhcbiAgbWV0aG9kID0gZGVmYXVsdENvbWJpbmVNZXRob2QsXG4gIG9wdGlvbnMgPSB7fSxcbikge1xuICBsZXQgeyBtZXJnZUFscGhhID0gZmFsc2UsIGtlZXBBbHBoYSA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gIG1lcmdlQWxwaGEgJj0gdGhpcy5hbHBoYTtcbiAga2VlcEFscGhhICY9IHRoaXMuYWxwaGE7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdjb21iaW5lQ2hhbm5lbHMnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20odGhpcywge1xuICAgIGNvbXBvbmVudHM6IDEsXG4gICAgYWxwaGE6IGtlZXBBbHBoYSxcbiAgICBjb2xvck1vZGVsOiBHUkVZLFxuICB9KTtcblxuICBsZXQgcHRyID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnNpemU7IGkrKykge1xuICAgIC8vIFRPRE8gcXVpdGUgc2xvdyBiZWNhdXNlIHdlIGNyZWF0ZSBhIG5ldyBwaXhlbCBlYWNoIHRpbWVcbiAgICBsZXQgdmFsdWUgPSBtZXRob2QodGhpcy5nZXRQaXhlbChpKSk7XG4gICAgaWYgKG1lcmdlQWxwaGEpIHtcbiAgICAgIG5ld0ltYWdlLmRhdGFbcHRyKytdID1cbiAgICAgICAgKHZhbHVlICogdGhpcy5kYXRhW2kgKiB0aGlzLmNoYW5uZWxzICsgdGhpcy5jb21wb25lbnRzXSkgL1xuICAgICAgICB0aGlzLm1heFZhbHVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IHZhbHVlO1xuICAgICAgaWYgKGtlZXBBbHBoYSkge1xuICAgICAgICBuZXdJbWFnZS5kYXRhW3B0cisrXSA9IHRoaXMuZGF0YVtpICogdGhpcy5jaGFubmVscyArIHRoaXMuY29tcG9uZW50c107XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ld0ltYWdlO1xufVxuXG5mdW5jdGlvbiBkZWZhdWx0Q29tYmluZU1ldGhvZChwaXhlbCkge1xuICByZXR1cm4gKHBpeGVsWzBdICsgcGl4ZWxbMV0gKyBwaXhlbFsyXSkgLyAzO1xufVxuIiwiaW1wb3J0IHsgdmFsaWRhdGVDaGFubmVsIH0gZnJvbSAnLi4vLi4vdXRpbC9jaGFubmVsJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHsqfSBjaGFubmVsXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWFnZVxuICpcbiAqIEByZXR1cm4ge3RoaXN9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldENoYW5uZWwoY2hhbm5lbCwgaW1hZ2UpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdzZXRDaGFubmVsJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBpbWFnZS5jaGVja1Byb2Nlc3NhYmxlKCdzZXRDaGFubmVsIChpbWFnZSBwYXJhbWV0ZXIgY2hlY2spJywge1xuICAgIGJpdERlcHRoOiBbdGhpcy5iaXREZXB0aF0sXG4gICAgYWxwaGE6IFswXSxcbiAgICBjb21wb25lbnRzOiBbMV0sXG4gIH0pO1xuXG4gIGlmIChpbWFnZS53aWR0aCAhPT0gdGhpcy53aWR0aCB8fCBpbWFnZS5oZWlnaHQgIT09IHRoaXMuaGVpZ2h0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdJbWFnZXMgbXVzdCBoYXZlIGV4YWN0bHkgdGhlIHNhbWUgd2lkdGggYW5kIGhlaWdodCcpO1xuICB9XG5cbiAgY2hhbm5lbCA9IHZhbGlkYXRlQ2hhbm5lbCh0aGlzLCBjaGFubmVsKTtcblxuICBsZXQgcHRyID0gY2hhbm5lbDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5kYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5kYXRhW3B0cl0gPSBpbWFnZS5kYXRhW2ldO1xuICAgIHB0ciArPSB0aGlzLmNoYW5uZWxzO1xuICB9XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgbmV3QXJyYXkgZnJvbSAnbmV3LWFycmF5JztcblxuaW1wb3J0IHsgdmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMgfSBmcm9tICcuLi8uLi91dGlsL2NoYW5uZWwnO1xuXG4vKipcbiAqIFRyeSB0byBtYXRjaCB0aGUgY3VycmVudCBwaWN0dXJlcyB3aXRoIGFub3RoZXIgb25lLiBJZiBub3JtYWxpemUgd2Ugbm9ybWFsaXplIHNlcGFyYXRlbHkgdGhlIDIgaW1hZ2VzLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlIC0gT3RoZXIgaW1hZ2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge251bWJlcltdfG51bWJlcn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U2ltaWxhcml0eShpbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAgc2hpZnQgPSBbMCwgMF0sXG4gICAgYXZlcmFnZSxcbiAgICBjaGFubmVscyxcbiAgICBkZWZhdWx0QWxwaGEsXG4gICAgbm9ybWFsaXplLFxuICAgIGJvcmRlciA9IFswLCAwXSxcbiAgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRTaW1pbGFyaXR5Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoYm9yZGVyKSkge1xuICAgIGJvcmRlciA9IFtib3JkZXIsIGJvcmRlcl07XG4gIH1cbiAgY2hhbm5lbHMgPSB2YWxpZGF0ZUFycmF5T2ZDaGFubmVscyh0aGlzLCB7XG4gICAgY2hhbm5lbHM6IGNoYW5uZWxzLFxuICAgIGRlZmF1bHRBbHBoYTogZGVmYXVsdEFscGhhLFxuICB9KTtcblxuICBpZiAodGhpcy5iaXREZXB0aCAhPT0gaW1hZ2UuYml0RGVwdGgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggaW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBiaXREZXB0aCcpO1xuICB9XG4gIGlmICh0aGlzLmNoYW5uZWxzICE9PSBpbWFnZS5jaGFubmVscykge1xuICAgIHRocm93IG5ldyBFcnJvcignQm90aCBpbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIG51bWJlciBvZiBjaGFubmVscycpO1xuICB9XG4gIGlmICh0aGlzLmNvbG9yTW9kZWwgIT09IGltYWdlLmNvbG9yTW9kZWwpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0JvdGggaW1hZ2VzIG11c3QgaGF2ZSB0aGUgc2FtZSBjb2xvck1vZGVsJyk7XG4gIH1cblxuICBpZiAodHlwZW9mIGF2ZXJhZ2UgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgYXZlcmFnZSA9IHRydWU7XG4gIH1cblxuICAvLyB3ZSBhbGxvdyBhIHNoaWZ0XG4gIC8vIHdlIG5lZWQgdG8gZmluZCB0aGUgbWluWCwgbWF4WCwgbWluWSwgbWF4WVxuICBsZXQgbWluWCA9IE1hdGgubWF4KGJvcmRlclswXSwgLXNoaWZ0WzBdKTtcbiAgbGV0IG1heFggPSBNYXRoLm1pbih0aGlzLndpZHRoIC0gYm9yZGVyWzBdLCB0aGlzLndpZHRoIC0gc2hpZnRbMF0pO1xuICBsZXQgbWluWSA9IE1hdGgubWF4KGJvcmRlclsxXSwgLXNoaWZ0WzFdKTtcbiAgbGV0IG1heFkgPSBNYXRoLm1pbih0aGlzLmhlaWdodCAtIGJvcmRlclsxXSwgdGhpcy5oZWlnaHQgLSBzaGlmdFsxXSk7XG5cbiAgbGV0IHJlc3VsdHMgPSBuZXdBcnJheShjaGFubmVscy5sZW5ndGgsIDApO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYW5uZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGMgPSBjaGFubmVsc1tpXTtcbiAgICBsZXQgc3VtVGhpcyA9IG5vcm1hbGl6ZSA/IHRoaXMuc3VtW2NdIDogTWF0aC5tYXgodGhpcy5zdW1bY10sIGltYWdlLnN1bVtjXSk7XG4gICAgbGV0IHN1bUltYWdlID0gbm9ybWFsaXplXG4gICAgICA/IGltYWdlLnN1bVtjXVxuICAgICAgOiBNYXRoLm1heCh0aGlzLnN1bVtjXSwgaW1hZ2Uuc3VtW2NdKTtcblxuICAgIGlmIChzdW1UaGlzICE9PSAwICYmIHN1bUltYWdlICE9PSAwKSB7XG4gICAgICBmb3IgKGxldCB4ID0gbWluWDsgeCA8IG1heFg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gbWluWTsgeSA8IG1heFk7IHkrKykge1xuICAgICAgICAgIGxldCBpbmRleFRoaXMgPSB4ICogdGhpcy5tdWx0aXBsaWVyWCArIHkgKiB0aGlzLm11bHRpcGxpZXJZICsgYztcbiAgICAgICAgICBsZXQgaW5kZXhJbWFnZSA9XG4gICAgICAgICAgICBpbmRleFRoaXMgK1xuICAgICAgICAgICAgc2hpZnRbMF0gKiB0aGlzLm11bHRpcGxpZXJYICtcbiAgICAgICAgICAgIHNoaWZ0WzFdICogdGhpcy5tdWx0aXBsaWVyWTtcbiAgICAgICAgICByZXN1bHRzW2ldICs9IE1hdGgubWluKFxuICAgICAgICAgICAgdGhpcy5kYXRhW2luZGV4VGhpc10gLyBzdW1UaGlzLFxuICAgICAgICAgICAgaW1hZ2UuZGF0YVtpbmRleEltYWdlXSAvIHN1bUltYWdlLFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoYXZlcmFnZSkge1xuICAgIHJldHVybiByZXN1bHRzLnJlZHVjZSgoc3VtLCB4KSA9PiBzdW0gKyB4KSAvIHJlc3VsdHMubGVuZ3RoO1xuICB9XG4gIHJldHVybiByZXN1bHRzO1xufVxuIiwiLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJbXX0gW29wdGlvbnMuc2FtcGxpbmc9WzEwLCAxMF1dXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBhaW50ZWQ9ZmFsc2VdXG4gKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5tYXNrXVxuICogQHJldHVybiB7b2JqZWN0fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQaXhlbHNHcmlkKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBzYW1wbGluZyA9IFsxMCwgMTBdLCBwYWludGVkID0gZmFsc2UsIG1hc2sgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRQaXhlbHNHcmlkJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNoYW5uZWxzOiAxLFxuICB9KTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoc2FtcGxpbmcpKSB7XG4gICAgc2FtcGxpbmcgPSBbc2FtcGxpbmcsIHNhbXBsaW5nXTtcbiAgfVxuXG4gIGNvbnN0IHhTYW1wbGluZyA9IHNhbXBsaW5nWzBdO1xuICBjb25zdCB5U2FtcGxpbmcgPSBzYW1wbGluZ1sxXTtcblxuICBjb25zdCB4eVMgPSBbXTtcbiAgY29uc3QgelMgPSBbXTtcblxuICBjb25zdCB4U3RlcCA9IHRoaXMud2lkdGggLyB4U2FtcGxpbmc7XG4gIGNvbnN0IHlTdGVwID0gdGhpcy5oZWlnaHQgLyB5U2FtcGxpbmc7XG4gIGxldCBjdXJyZW50WCA9IE1hdGguZmxvb3IoeFN0ZXAgLyAyKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHhTYW1wbGluZzsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRZID0gTWF0aC5mbG9vcih5U3RlcCAvIDIpO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgeVNhbXBsaW5nOyBqKyspIHtcbiAgICAgIGxldCB4ID0gTWF0aC5yb3VuZChjdXJyZW50WCk7XG4gICAgICBsZXQgeSA9IE1hdGgucm91bmQoY3VycmVudFkpO1xuICAgICAgaWYgKCFtYXNrIHx8IG1hc2suZ2V0Qml0WFkoeCwgeSkpIHtcbiAgICAgICAgeHlTLnB1c2goW3gsIHldKTtcbiAgICAgICAgelMucHVzaCh0aGlzLmdldFBpeGVsWFkoeCwgeSkpO1xuICAgICAgfVxuICAgICAgY3VycmVudFkgKz0geVN0ZXA7XG4gICAgfVxuICAgIGN1cnJlbnRYICs9IHhTdGVwO1xuICB9XG5cbiAgY29uc3QgdG9SZXR1cm4gPSB7IHh5UywgelMgfTtcblxuICBpZiAocGFpbnRlZCkge1xuICAgIHRvUmV0dXJuLnBhaW50ZWQgPSB0aGlzLnJnYmE4KCkucGFpbnRQb2ludHMoeHlTKTtcbiAgfVxuXG4gIHJldHVybiB0b1JldHVybjtcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1hdHJpeCh3aWR0aCwgaGVpZ2h0LCBkZWZhdWx0VmFsdWUpIHtcbiAgY29uc3QgbWF0cml4ID0gbmV3IEFycmF5KHdpZHRoKTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgbWF0cml4W3hdID0gbmV3IEFycmF5KGhlaWdodCk7XG4gIH1cbiAgaWYgKGRlZmF1bHRWYWx1ZSkge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBoZWlnaHQ7IHkrKykge1xuICAgICAgICBtYXRyaXhbeF1beV0gPSBkZWZhdWx0VmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIG1hdHJpeC53aWR0aCA9IHdpZHRoO1xuICBtYXRyaXguaGVpZ2h0ID0gaGVpZ2h0O1xuICBPYmplY3Quc2V0UHJvdG90eXBlT2YobWF0cml4LCBNYXRyaXgucHJvdG90eXBlKTtcbiAgcmV0dXJuIG1hdHJpeDtcbn1cblxuTWF0cml4LnByb3RvdHlwZS5sb2NhbE1pbiA9IGZ1bmN0aW9uICh4LCB5KSB7XG4gIGxldCBtaW4gPSB0aGlzW3hdW3ldO1xuICBsZXQgcG9zaXRpb24gPSBbeCwgeV07XG4gIGZvciAobGV0IGkgPSBNYXRoLm1heCgwLCB4IC0gMSk7IGkgPCBNYXRoLm1pbih0aGlzLmxlbmd0aCwgeCArIDIpOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gTWF0aC5tYXgoMCwgeSAtIDEpOyBqIDwgTWF0aC5taW4odGhpc1swXS5sZW5ndGgsIHkgKyAyKTsgaisrKSB7XG4gICAgICBpZiAodGhpc1tpXVtqXSA8IG1pbikge1xuICAgICAgICBtaW4gPSB0aGlzW2ldW2pdO1xuICAgICAgICBwb3NpdGlvbiA9IFtpLCBqXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBwb3NpdGlvbjogcG9zaXRpb24sXG4gICAgdmFsdWU6IG1pbixcbiAgfTtcbn07XG5cbk1hdHJpeC5wcm90b3R5cGUubG9jYWxNYXggPSBmdW5jdGlvbiAoeCwgeSkge1xuICBsZXQgbWF4ID0gdGhpc1t4XVt5XTtcbiAgbGV0IHBvc2l0aW9uID0gW3gsIHldO1xuICBmb3IgKGxldCBpID0gTWF0aC5tYXgoMCwgeCAtIDEpOyBpIDwgTWF0aC5taW4odGhpcy5sZW5ndGgsIHggKyAyKTsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IE1hdGgubWF4KDAsIHkgLSAxKTsgaiA8IE1hdGgubWluKHRoaXNbMF0ubGVuZ3RoLCB5ICsgMik7IGorKykge1xuICAgICAgaWYgKHRoaXNbaV1bal0gPiBtYXgpIHtcbiAgICAgICAgbWF4ID0gdGhpc1tpXVtqXTtcbiAgICAgICAgcG9zaXRpb24gPSBbaSwgal07XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgIHZhbHVlOiBtYXgsXG4gIH07XG59O1xuXG5NYXRyaXgucHJvdG90eXBlLmxvY2FsU2VhcmNoID0gZnVuY3Rpb24gKHgsIHksIHZhbHVlKSB7XG4gIGxldCByZXN1bHRzID0gW107XG4gIGZvciAobGV0IGkgPSBNYXRoLm1heCgwLCB4IC0gMSk7IGkgPCBNYXRoLm1pbih0aGlzLmxlbmd0aCwgeCArIDIpOyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gTWF0aC5tYXgoMCwgeSAtIDEpOyBqIDwgTWF0aC5taW4odGhpc1swXS5sZW5ndGgsIHkgKyAyKTsgaisrKSB7XG4gICAgICBpZiAodGhpc1tpXVtqXSA9PT0gdmFsdWUpIHtcbiAgICAgICAgcmVzdWx0cy5wdXNoKFtpLCBqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHRzO1xufTtcbiIsImltcG9ydCBNYXRyaXggZnJvbSAnLi4vLi4vdXRpbC9tYXRyaXgnO1xuXG4vKipcbiAqIFRyeSB0byBtYXRjaCB0aGUgY3VycmVudCBwaWN0dXJlcyB3aXRoIGFub3RoZXIgb25lXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtJbWFnZX0gaW1hZ2UgLSBPdGhlciBpbWFnZSB0byBtYXRjaFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHJldHVybiB7bnVtYmVyW119XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEJlc3RNYXRjaChpbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGJvcmRlciB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2dldENoYW5uZWwnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGlmICh0aGlzLmJpdERlcHRoICE9PSBpbWFnZS5iaXREZXB0aCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQm90aCBpbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIGJpdERlcHRoJyk7XG4gIH1cbiAgaWYgKHRoaXMuY2hhbm5lbHMgIT09IGltYWdlLmNoYW5uZWxzKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdCb3RoIGltYWdlcyBtdXN0IGhhdmUgdGhlIHNhbWUgbnVtYmVyIG9mIGNoYW5uZWxzJyk7XG4gIH1cbiAgaWYgKHRoaXMuY29sb3JNb2RlbCAhPT0gaW1hZ2UuY29sb3JNb2RlbCkge1xuICAgIHRocm93IG5ldyBFcnJvcignQm90aCBpbWFnZXMgbXVzdCBoYXZlIHRoZSBzYW1lIGNvbG9yTW9kZWwnKTtcbiAgfVxuXG4gIC8vIHRoZXJlIGNvdWxkIGJlIG1hbnkgbmFtZXNcbiAgbGV0IHNpbWlsYXJpdHlNYXRyaXggPSBuZXcgTWF0cml4KGltYWdlLndpZHRoLCBpbWFnZS5oZWlnaHQsIC1JbmZpbml0eSk7XG5cbiAgbGV0IGN1cnJlbnRYID0gTWF0aC5mbG9vcihpbWFnZS53aWR0aCAvIDIpO1xuICBsZXQgY3VycmVudFkgPSBNYXRoLmZsb29yKGltYWdlLmhlaWdodCAvIDIpO1xuICBsZXQgbWlkZGxlWCA9IGN1cnJlbnRYO1xuICBsZXQgbWlkZGxlWSA9IGN1cnJlbnRZO1xuICBsZXQgdGhlRW5kID0gZmFsc2U7XG5cbiAgd2hpbGUgKCF0aGVFbmQpIHtcbiAgICBsZXQgdG9DYWxjdWxhdGVQb3NpdGlvbnMgPSBzaW1pbGFyaXR5TWF0cml4LmxvY2FsU2VhcmNoKFxuICAgICAgY3VycmVudFgsXG4gICAgICBjdXJyZW50WSxcbiAgICAgIC1JbmZpbml0eSxcbiAgICApO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9DYWxjdWxhdGVQb3NpdGlvbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBwb3NpdGlvbiA9IHRvQ2FsY3VsYXRlUG9zaXRpb25zW2ldO1xuICAgICAgbGV0IHNpbWlsYXJpdHkgPSB0aGlzLmdldFNpbWlsYXJpdHkoaW1hZ2UsIHtcbiAgICAgICAgYm9yZGVyOiBib3JkZXIsXG4gICAgICAgIHNoaWZ0OiBbbWlkZGxlWCAtIHBvc2l0aW9uWzBdLCBtaWRkbGVZIC0gcG9zaXRpb25bMV1dLFxuICAgICAgfSk7XG4gICAgICBzaW1pbGFyaXR5TWF0cml4W3Bvc2l0aW9uWzBdXVtwb3NpdGlvblsxXV0gPSBzaW1pbGFyaXR5O1xuICAgIH1cblxuICAgIGxldCBtYXggPSBzaW1pbGFyaXR5TWF0cml4LmxvY2FsTWF4KGN1cnJlbnRYLCBjdXJyZW50WSk7XG4gICAgaWYgKG1heC5wb3NpdGlvblswXSAhPT0gY3VycmVudFggfHwgbWF4LnBvc2l0aW9uWzFdICE9PSBjdXJyZW50WSkge1xuICAgICAgY3VycmVudFggPSBtYXgucG9zaXRpb25bMF07XG4gICAgICBjdXJyZW50WSA9IG1heC5wb3NpdGlvblsxXTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhlRW5kID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gW2N1cnJlbnRYIC0gbWlkZGxlWCwgY3VycmVudFkgLSBtaWRkbGVZXTtcbn1cbiIsImltcG9ydCB7IGNoZWNrUm93LCBjaGVja0NoYW5uZWwgfSBmcm9tICcuLi9pbnRlcm5hbC9jaGVja3MnO1xuXG4vKipcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge251bWJlcn0gcm93XG4gKiBAcGFyYW0ge251bWJlcn0gW2NoYW5uZWw9MF1cbiAqIEByZXR1cm4ge251bWJlcltdfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSb3cocm93LCBjaGFubmVsID0gMCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2dldFJvdycsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgY2hlY2tSb3codGhpcywgcm93KTtcbiAgY2hlY2tDaGFubmVsKHRoaXMsIGNoYW5uZWwpO1xuXG4gIGxldCBhcnJheSA9IG5ldyBBcnJheSh0aGlzLndpZHRoKTtcbiAgbGV0IHB0ciA9IDA7XG4gIGxldCBiZWdpbiA9IHJvdyAqIHRoaXMud2lkdGggKiB0aGlzLmNoYW5uZWxzICsgY2hhbm5lbDtcbiAgbGV0IGVuZCA9IGJlZ2luICsgdGhpcy53aWR0aCAqIHRoaXMuY2hhbm5lbHM7XG4gIGZvciAobGV0IGogPSBiZWdpbjsgaiA8IGVuZDsgaiArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgYXJyYXlbcHRyKytdID0gdGhpcy5kYXRhW2pdO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiaW1wb3J0IHsgY2hlY2tDb2x1bW4sIGNoZWNrQ2hhbm5lbCB9IGZyb20gJy4uL2ludGVybmFsL2NoZWNrcyc7XG5cbi8qKlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7bnVtYmVyfSBjb2x1bW5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbY2hhbm5lbD0wXVxuICogQHJldHVybiB7bnVtYmVyW119XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbHVtbihjb2x1bW4sIGNoYW5uZWwgPSAwKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZ2V0Q29sdW1uJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBjaGVja0NvbHVtbih0aGlzLCBjb2x1bW4pO1xuICBjaGVja0NoYW5uZWwodGhpcywgY2hhbm5lbCk7XG5cbiAgbGV0IGFycmF5ID0gbmV3IEFycmF5KHRoaXMuaGVpZ2h0KTtcbiAgbGV0IHB0ciA9IDA7XG4gIGxldCBzdGVwID0gdGhpcy53aWR0aCAqIHRoaXMuY2hhbm5lbHM7XG4gIGZvciAoXG4gICAgbGV0IGogPSBjaGFubmVsICsgY29sdW1uICogdGhpcy5jaGFubmVscztcbiAgICBqIDwgdGhpcy5kYXRhLmxlbmd0aDtcbiAgICBqICs9IHN0ZXBcbiAgKSB7XG4gICAgYXJyYXlbcHRyKytdID0gdGhpcy5kYXRhW2pdO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cbiIsImltcG9ydCBNYXRyaXggZnJvbSAnbWwtbWF0cml4JztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNoYW5uZWxdXG4gKiBAcmV0dXJuIHtNYXRyaXh9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1hdHJpeChvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgY2hhbm5lbCB9ID0gb3B0aW9ucztcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRNYXRyaXgnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGlmIChjaGFubmVsID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRzID4gMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICdZb3UgbmVlZCB0byBkZWZpbmUgdGhlIGNoYW5uZWwgZm9yIGFuIGltYWdlIHRoYXQgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBjaGFubmVsJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNoYW5uZWwgPSAwO1xuICB9XG5cbiAgbGV0IG1hdHJpeCA9IG5ldyBNYXRyaXgodGhpcy5oZWlnaHQsIHRoaXMud2lkdGgpO1xuICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuaGVpZ2h0OyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMud2lkdGg7IHkrKykge1xuICAgICAgbWF0cml4LnNldCh4LCB5LCB0aGlzLmdldFZhbHVlWFkoeSwgeCwgY2hhbm5lbCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRyaXg7XG59XG4iLCJpbXBvcnQgeyBNYXRyaXggfSBmcm9tICdtbC1tYXRyaXgnO1xuXG4vKipcbiAqIFdlIHNldCB0aGUgZGF0YSBvZiB0aGUgaW1hZ2UgZnJvbSBhIG1hdHJpeC4gVGhlIHNpemUgb2YgdGhlIG1hdHJpeCBhbmQgdGhlIGRhdGEgaGF2ZSB0byBiZSB0aGUgc2FtZS5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge01hdHJpeH0gbWF0cml4XG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMuY2hhbm5lbF1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc2V0TWF0cml4KG1hdHJpeCwgb3B0aW9ucyA9IHt9KSB7XG4gIG1hdHJpeCA9IG5ldyBNYXRyaXgobWF0cml4KTtcbiAgbGV0IHsgY2hhbm5lbCB9ID0gb3B0aW9ucztcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRNYXRyaXgnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGlmIChjaGFubmVsID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAodGhpcy5jb21wb25lbnRzID4gMSkge1xuICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICdZb3UgbmVlZCB0byBkZWZpbmUgdGhlIGNoYW5uZWwgZm9yIGFuIGltYWdlIHRoYXQgY29udGFpbnMgbW9yZSB0aGFuIG9uZSBjaGFubmVsJyxcbiAgICAgICk7XG4gICAgfVxuICAgIGNoYW5uZWwgPSAwO1xuICB9XG5cbiAgaWYgKHRoaXMud2lkdGggIT09IG1hdHJpeC5jb2x1bW5zIHx8IHRoaXMuaGVpZ2h0ICE9PSBtYXRyaXgucm93cykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgJ1RoZSBzaXplIG9mIHRoZSBtYXRyaXggbXVzdCBiZSBlcXVhbCB0byB0aGUgc2l6ZSBvZiB0aGUgaW1hZ2UnLFxuICAgICk7XG4gIH1cblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMuaGVpZ2h0OyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMud2lkdGg7IHkrKykge1xuICAgICAgdGhpcy5zZXRWYWx1ZVhZKHksIHgsIGNoYW5uZWwsIG1hdHJpeC5nZXQoeCwgeSkpO1xuICAgIH1cbiAgfVxufVxuIiwiLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIGFycmF5cyBjb250YWluaW5nIHRoZSBwaXhlbCB2YWx1ZXMgaW4gdGhlIGZvcm1cbiAqIFtbUjEsIEcxLCBCMV0sIFtSMiwgRzIsIEIyXSwgLi4uXVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRQaXhlbHNBcnJheSgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRQaXhlbHNBcnJheScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2LCAzMl0sXG4gIH0pO1xuXG4gIGxldCBhcnJheSA9IG5ldyBBcnJheSh0aGlzLnNpemUpO1xuICBsZXQgcHRyID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICBsZXQgcGl4ZWwgPSBuZXcgQXJyYXkodGhpcy5jb21wb25lbnRzKTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuY29tcG9uZW50czsgaisrKSB7XG4gICAgICBwaXhlbFtqXSA9IHRoaXMuZGF0YVtpICsgal07XG4gICAgfVxuICAgIGFycmF5W3B0cisrXSA9IHBpeGVsO1xuICB9XG5cbiAgcmV0dXJuIGFycmF5O1xufVxuIiwiLyoqXG4gKiBGaW5kIGludGVyc2VjdGlvbiBvZiBwb2ludHMgYmV0d2VlbiB0d28gZGlmZmVyZW50IG1hc2tzXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtJbWFnZX0gbWFzazIgLSBhIG1hc2sgKDEgYml0IGltYWdlKVxuICogQHJldHVybiB7b2JqZWN0fSAtIG9iamVjdCBjb250YWluaW5nIG51bWJlciBvZiB3aGl0ZSBwaXhlbHMgZm9yIG1hc2sxLCBmb3IgbWFzayAyIGFuZCBmb3IgdGhlbSBib3RoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldEludGVyc2VjdGlvbihtYXNrMikge1xuICBsZXQgbWFzazEgPSB0aGlzO1xuICBsZXQgY2xvc2VzdFBhcmVudCA9IG1hc2sxLmdldENsb3Nlc3RDb21tb25QYXJlbnQobWFzazIpO1xuXG4gIGxldCBzdGFydFBvczEgPSBtYXNrMS5nZXRSZWxhdGl2ZVBvc2l0aW9uKGNsb3Nlc3RQYXJlbnQsIHtcbiAgICBkZWZhdWx0RnVydGhlcjogdHJ1ZSxcbiAgfSk7XG4gIGxldCBhbGxSZWxQb3MxID0gZ2V0UmVsYXRpdmVQb3NpdGlvbkZvckFsbFBpeGVscyhtYXNrMSwgc3RhcnRQb3MxKTtcbiAgbGV0IHN0YXJ0UG9zMiA9IG1hc2syLmdldFJlbGF0aXZlUG9zaXRpb24oY2xvc2VzdFBhcmVudCwge1xuICAgIGRlZmF1bHRGdXJ0aGVyOiB0cnVlLFxuICB9KTtcbiAgbGV0IGFsbFJlbFBvczIgPSBnZXRSZWxhdGl2ZVBvc2l0aW9uRm9yQWxsUGl4ZWxzKG1hc2syLCBzdGFydFBvczIpO1xuXG4gIGxldCBjb21tb25TdXJmYWNlID0gZ2V0Q29tbW9uU3VyZmFjZShhbGxSZWxQb3MxLCBhbGxSZWxQb3MyKTtcbiAgbGV0IGludGVyc2VjdGlvbiA9IHtcbiAgICB3aGl0ZVBpeGVsc01hc2sxOiBbXSxcbiAgICB3aGl0ZVBpeGVsc01hc2syOiBbXSxcbiAgICBjb21tb25XaGl0ZVBpeGVsczogW10sXG4gIH07XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb21tb25TdXJmYWNlLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRSZWxhdGl2ZVBvcyA9IGNvbW1vblN1cmZhY2VbaV07XG4gICAgbGV0IHJlYWxQb3MxID0gW1xuICAgICAgY3VycmVudFJlbGF0aXZlUG9zWzBdIC0gc3RhcnRQb3MxWzBdLFxuICAgICAgY3VycmVudFJlbGF0aXZlUG9zWzFdIC0gc3RhcnRQb3MxWzFdLFxuICAgIF07XG4gICAgbGV0IHJlYWxQb3MyID0gW1xuICAgICAgY3VycmVudFJlbGF0aXZlUG9zWzBdIC0gc3RhcnRQb3MyWzBdLFxuICAgICAgY3VycmVudFJlbGF0aXZlUG9zWzFdIC0gc3RhcnRQb3MyWzFdLFxuICAgIF07XG4gICAgbGV0IHZhbHVlQml0TWFzazEgPSBtYXNrMS5nZXRCaXRYWShyZWFsUG9zMVswXSwgcmVhbFBvczFbMV0pO1xuICAgIGxldCB2YWx1ZUJpdE1hc2syID0gbWFzazIuZ2V0Qml0WFkocmVhbFBvczJbMF0sIHJlYWxQb3MyWzFdKTtcblxuICAgIGlmICh2YWx1ZUJpdE1hc2sxID09PSAxICYmIHZhbHVlQml0TWFzazIgPT09IDEpIHtcbiAgICAgIGludGVyc2VjdGlvbi5jb21tb25XaGl0ZVBpeGVscy5wdXNoKGN1cnJlbnRSZWxhdGl2ZVBvcyk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxSZWxQb3MxLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBvc1g7XG4gICAgbGV0IHBvc1k7XG4gICAgaWYgKGkgIT09IDApIHtcbiAgICAgIHBvc1ggPSBNYXRoLmZsb29yKGkgLyBtYXNrMS53aWR0aCk7XG4gICAgICBwb3NZID0gaSAlIG1hc2sxLndpZHRoO1xuICAgIH1cbiAgICBpZiAobWFzazEuZ2V0Qml0WFkocG9zWCwgcG9zWSkgPT09IDEpIHtcbiAgICAgIGludGVyc2VjdGlvbi53aGl0ZVBpeGVsc01hc2sxLnB1c2goYWxsUmVsUG9zMVtpXSk7XG4gICAgfVxuICB9XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxSZWxQb3MyLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IHBvc1ggPSAwO1xuICAgIGxldCBwb3NZID0gMDtcbiAgICBpZiAoaSAhPT0gMCkge1xuICAgICAgcG9zWCA9IE1hdGguZmxvb3IoaSAvIG1hc2syLndpZHRoKTtcbiAgICAgIHBvc1kgPSBpICUgbWFzazIud2lkdGg7XG4gICAgfVxuICAgIGlmIChtYXNrMi5nZXRCaXRYWShwb3NYLCBwb3NZKSA9PT0gMSkge1xuICAgICAgaW50ZXJzZWN0aW9uLndoaXRlUGl4ZWxzTWFzazIucHVzaChhbGxSZWxQb3MyW2ldKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW50ZXJzZWN0aW9uO1xufVxuXG4vKipcbiAqIEdldCByZWxhdGl2ZSBwb3NpdGlvbiBhcnJheSBmb3IgYWxsIHBpeGVscyBpbiBtYXNrc1xuICogQHBhcmFtIHtJbWFnZX0gbWFzayAtIGEgbWFzayAoMSBiaXQgaW1hZ2UpXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHN0YXJ0UG9zaXRpb24gLSBzdGFydCBwb3NpdGlvbiBvZiBtYXNrIHJlbGF0aXZlIHRvIHBhcmVudFxuICogQHJldHVybiB7QXJyYXl9IC0gcmVsYXRpdmUgcG9zaXRpb24gb2YgYWxsIHBpeGVsc1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbkZvckFsbFBpeGVscyhtYXNrLCBzdGFydFBvc2l0aW9uKSB7XG4gIGxldCByZWxhdGl2ZVBvc2l0aW9ucyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc2suaGVpZ2h0OyBpKyspIHtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG1hc2sud2lkdGg7IGorKykge1xuICAgICAgbGV0IG9yaWdpbmFsUG9zID0gW2ksIGpdO1xuICAgICAgcmVsYXRpdmVQb3NpdGlvbnMucHVzaChbXG4gICAgICAgIG9yaWdpbmFsUG9zWzBdICsgc3RhcnRQb3NpdGlvblswXSxcbiAgICAgICAgb3JpZ2luYWxQb3NbMV0gKyBzdGFydFBvc2l0aW9uWzFdLFxuICAgICAgXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZWxhdGl2ZVBvc2l0aW9ucztcbn1cblxuLyoqXG4gKiBGaW5kcyBjb21tb24gc3VyZmFjZSBmb3IgdHdvIGFycmF5cyBjb250YWluaW5nIHRoZSBwb3NpdGlvbnMgb2YgdGhlIHBpeGVscyByZWxhdGl2ZSB0byBwYXJlbnQgaW1hZ2VcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcG9zaXRpb25BcnJheTEgLSBwb3NpdGlvbnMgb2YgcGl4ZWxzIHJlbGF0aXZlIHRvIHBhcmVudFxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwb3NpdGlvbkFycmF5MiAtIHBvc2l0aW9ucyBvZiBwaXhlbHMgcmVsYXRpdmUgdG8gcGFyZW50XG4gKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fSAtIHBvc2l0aW9ucyBvZiBjb21tb24gcGl4ZWxzIGZvciBib3RoIGFycmF5c1xuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gZ2V0Q29tbW9uU3VyZmFjZShwb3NpdGlvbkFycmF5MSwgcG9zaXRpb25BcnJheTIpIHtcbiAgbGV0IGkgPSAwO1xuICBsZXQgaiA9IDA7XG4gIGxldCBjb21tb25TdXJmYWNlID0gW107XG4gIHdoaWxlIChpIDwgcG9zaXRpb25BcnJheTEubGVuZ3RoICYmIGogPCBwb3NpdGlvbkFycmF5Mi5sZW5ndGgpIHtcbiAgICBpZiAoXG4gICAgICBwb3NpdGlvbkFycmF5MVtpXVswXSA9PT0gcG9zaXRpb25BcnJheTJbal1bMF0gJiZcbiAgICAgIHBvc2l0aW9uQXJyYXkxW2ldWzFdID09PSBwb3NpdGlvbkFycmF5MltqXVsxXVxuICAgICkge1xuICAgICAgY29tbW9uU3VyZmFjZS5wdXNoKHBvc2l0aW9uQXJyYXkxW2ldKTtcbiAgICAgIGkrKztcbiAgICAgIGorKztcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgcG9zaXRpb25BcnJheTFbaV1bMF0gPCBwb3NpdGlvbkFycmF5MltqXVswXSB8fFxuICAgICAgKHBvc2l0aW9uQXJyYXkxW2ldWzBdID09PSBwb3NpdGlvbkFycmF5MltqXVswXSAmJlxuICAgICAgICBwb3NpdGlvbkFycmF5MVtpXVsxXSA8IHBvc2l0aW9uQXJyYXkyW2pdWzFdKVxuICAgICkge1xuICAgICAgaSsrO1xuICAgIH0gZWxzZSB7XG4gICAgICBqKys7XG4gICAgfVxuICB9XG4gIHJldHVybiBjb21tb25TdXJmYWNlO1xufVxuIiwiLyoqXG4gKiBGaW5kcyBjb21tb24gcGFyZW50IGJldHdlZW4gdHdvIGRpZmZlcmVudCBtYXNrc1xuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7SW1hZ2V9IG1hc2sgLSBhIG1hc2sgKDEgYml0IGltYWdlKVxuICogQHJldHVybiB7SW1hZ2V9IC0gdGhlIGxvd2VzdCBjb21tb24gcGFyZW50IG9mIGJvdGggbWFza3NcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0Q2xvc2VzdENvbW1vblBhcmVudChtYXNrKSB7XG4gIGxldCBkZXB0aE1hc2sxID0gZ2V0RGVwdGgodGhpcyk7XG4gIGxldCBkZXB0aE1hc2syID0gZ2V0RGVwdGgobWFzayk7XG5cbiAgbGV0IGZ1cnRoZXN0UGFyZW50O1xuICBpZiAoZGVwdGhNYXNrMSA+PSBkZXB0aE1hc2syKSB7XG4gICAgZnVydGhlc3RQYXJlbnQgPSBnZXRGdXJ0aGVzdFBhcmVudCh0aGlzLCBkZXB0aE1hc2sxKTtcbiAgfSBlbHNlIHtcbiAgICBmdXJ0aGVzdFBhcmVudCA9IGdldEZ1cnRoZXN0UGFyZW50KG1hc2ssIGRlcHRoTWFzazIpO1xuICB9XG5cbiAgaWYgKGRlcHRoTWFzazEgPT09IDAgfHwgZGVwdGhNYXNrMiA9PT0gMCkge1xuICAgIC8vIGNvbXBhcmluZyB3aXRoIGF0IGxlYXN0IG9uZSBvcmlnaW5hbCBpbWFnZSAtPiBubyBjb21tb24gcGFyZW50XG4gICAgcmV0dXJuIGZ1cnRoZXN0UGFyZW50O1xuICB9XG4gIGxldCBtMSA9IHRoaXM7XG4gIGxldCBtMiA9IG1hc2s7XG5cbiAgd2hpbGUgKGRlcHRoTWFzazEgIT09IGRlcHRoTWFzazIpIHtcbiAgICBpZiAoZGVwdGhNYXNrMSA+IGRlcHRoTWFzazIpIHtcbiAgICAgIG0xID0gbTEucGFyZW50O1xuICAgICAgaWYgKG0xID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmdXJ0aGVzdFBhcmVudDtcbiAgICAgIH1cbiAgICAgIGRlcHRoTWFzazEgPSBkZXB0aE1hc2sxIC0gMTtcbiAgICB9IGVsc2Uge1xuICAgICAgbTIgPSBtMi5wYXJlbnQ7XG4gICAgICBpZiAobTIgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZ1cnRoZXN0UGFyZW50O1xuICAgICAgfVxuICAgICAgZGVwdGhNYXNrMiA9IGRlcHRoTWFzazIgLSAxO1xuICAgIH1cbiAgfVxuXG4gIHdoaWxlIChtMSAhPT0gbTIgJiYgbTEgIT09IG51bGwgJiYgbTIgIT09IG51bGwpIHtcbiAgICBtMSA9IG0xLnBhcmVudDtcbiAgICBtMiA9IG0yLnBhcmVudDtcbiAgICBpZiAobTEgPT09IG51bGwgfHwgbTIgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiBmdXJ0aGVzdFBhcmVudDtcbiAgICB9XG4gIH1cblxuICAvLyBUT0RPXG4gIC8vIG5vIGNvbW1vbiBwYXJlbnQsIHVzZSBwYXJlbnQgYXQgdG9wIG9mIGhpZXJhcmNoeSBvZiBtMVxuICAvLyB3ZSBhc3N1bWUgaXQgd29ya3MgZm9yIG5vd1xuICBpZiAobTEgIT09IG0yKSB7XG4gICAgcmV0dXJuIGZ1cnRoZXN0UGFyZW50O1xuICB9XG5cbiAgcmV0dXJuIG0xO1xufVxuXG4vKipcbiAqIEZpbmQgdGhlIGRlcHRoIG9mIHRoZSBtYXNrIHdpdGggcmVzcGVjdCB0byBpdHMgYXJib3Jlc2NlbmNlLlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGZpbmQgdGhlIGNvbW1vbiBwYXJlbnQgYmV0d2VlbiB0d28gbWFza3MuXG4gKiBAcGFyYW0ge0ltYWdlfSBtYXNrIC0gYSBtYXNrICgxIGJpdCBJbWFnZSlcbiAqIEByZXR1cm4ge251bWJlcn0gLSBkZXB0aCBvZiBtYXNrXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBnZXREZXB0aChtYXNrKSB7XG4gIGxldCBkID0gMDtcbiAgbGV0IG0gPSBtYXNrO1xuICAvLyBhIG51bGwgcGFyZW50IG1lYW5zIGl0J3MgdGhlIG9yaWdpbmFsIGltYWdlXG4gIHdoaWxlIChtLnBhcmVudCAhPSBudWxsKSB7XG4gICAgbSA9IG0ucGFyZW50O1xuICAgIGQrKztcbiAgfVxuICByZXR1cm4gZDtcbn1cblxuZnVuY3Rpb24gZ2V0RnVydGhlc3RQYXJlbnQobWFzaywgZGVwdGgpIHtcbiAgbGV0IG0gPSBtYXNrO1xuICB3aGlsZSAoZGVwdGggPiAwKSB7XG4gICAgbSA9IG0ucGFyZW50O1xuICAgIGRlcHRoID0gZGVwdGggLSAxO1xuICB9XG4gIHJldHVybiBtO1xufVxuIiwiY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gICAgbG93VGhyZXNob2xkOiAxMCxcbiAgICBoaWdoVGhyZXNob2xkOiAzMCxcbiAgICBnYXVzc2lhbkJsdXI6IDEuMVxufTtcblxuY29uc3QgR3ggPSBbXG4gICAgWy0xLCAwLCArMV0sXG4gICAgWy0yLCAwLCArMl0sXG4gICAgWy0xLCAwLCArMV1cbl07XG5cbmNvbnN0IEd5ID0gW1xuICAgIFstMSwgLTIsIC0xXSxcbiAgICBbMCwgMCwgMF0sXG4gICAgWysxLCArMiwgKzFdXG5dO1xuXG5jb25zdCBjb252T3B0aW9ucyA9IHtcbiAgICBiaXREZXB0aDogMzIsXG4gICAgbW9kZTogJ3BlcmlvZGljJ1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY2FubnlFZGdlRGV0ZWN0b3IoaW1hZ2UsIG9wdGlvbnMpIHtcbiAgICBpbWFnZS5jaGVja1Byb2Nlc3NhYmxlKCdDYW5ueSBlZGdlIGRldGVjdG9yJywge1xuICAgICAgICBiaXREZXB0aDogOCxcbiAgICAgICAgY2hhbm5lbHM6IDEsXG4gICAgICAgIGNvbXBvbmVudHM6IDFcbiAgICB9KTtcblxuICAgIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG5cbiAgICBjb25zdCB3aWR0aCA9IGltYWdlLndpZHRoO1xuICAgIGNvbnN0IGhlaWdodCA9IGltYWdlLmhlaWdodDtcbiAgICBjb25zdCBicmlnaHRuZXNzID0gaW1hZ2UubWF4VmFsdWU7XG5cbiAgICBjb25zdCBnZk9wdGlvbnMgPSB7XG4gICAgICAgIHNpZ21hOiBvcHRpb25zLmdhdXNzaWFuQmx1cixcbiAgICAgICAgcmFkaXVzOiAzXG4gICAgfTtcblxuICAgIGNvbnN0IGdmID0gaW1hZ2UuZ2F1c3NpYW5GaWx0ZXIoZ2ZPcHRpb25zKTtcblxuICAgIGNvbnN0IGdyYWRpZW50WCA9IGdmLmNvbnZvbHV0aW9uKEd5LCBjb252T3B0aW9ucyk7XG4gICAgY29uc3QgZ3JhZGllbnRZID0gZ2YuY29udm9sdXRpb24oR3gsIGNvbnZPcHRpb25zKTtcblxuICAgIGNvbnN0IEcgPSBncmFkaWVudFkuaHlwb3RlbnVzZShncmFkaWVudFgpO1xuXG4gICAgY29uc3QgSW1hZ2UgPSBpbWFnZS5jb25zdHJ1Y3RvcjtcblxuICAgIGNvbnN0IG5tcyA9IG5ldyBJbWFnZSh3aWR0aCwgaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6ICdHUkVZJyxcbiAgICAgICAgYml0RGVwdGg6IDMyXG4gICAgfSk7XG5cbiAgICBjb25zdCBlZGdlcyA9IG5ldyBJbWFnZSh3aWR0aCwgaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6ICdHUkVZJyxcbiAgICAgICAgYml0RGVwdGg6IDMyXG4gICAgfSk7XG5cbiAgICBjb25zdCBmaW5hbEltYWdlID0gbmV3IEltYWdlKHdpZHRoLCBoZWlnaHQsIHtcbiAgICAgICAga2luZDogJ0dSRVknXG4gICAgfSk7XG5cbiAgICAvLyBOb24tTWF4aW11bSBzdXByZXNzaW9uXG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCB3aWR0aCAtIDE7IGkrKykge1xuICAgICAgICBmb3IgKHZhciBqID0gMTsgaiA8IGhlaWdodCAtIDE7IGorKykge1xuXG4gICAgICAgICAgICB2YXIgZGlyID0gKE1hdGgucm91bmQoTWF0aC5hdGFuMihncmFkaWVudFkuZ2V0VmFsdWVYWShpLCBqLCAwKSwgZ3JhZGllbnRYLmdldFZhbHVlWFkoaSwgaiwgMCkpICogKDUuMCAvIE1hdGguUEkpKSArIDUpICUgNTtcblxuICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICEoKGRpciA9PT0gMCAmJiAoRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpLCBqIC0gMSwgMCkgfHwgRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpLCBqICsgMSwgMCkpKVxuICAgICAgICAgICAgICAgICAgICB8fCAoZGlyID09PSAxICYmIChHLmdldFZhbHVlWFkoaSwgaiwgMCkgPD0gRy5nZXRWYWx1ZVhZKGkgLSAxLCBqICsgMSwgMCkgfHwgRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpICsgMSwgaiAtIDEsIDApKSlcbiAgICAgICAgICAgICAgICAgICAgfHwgKGRpciA9PT0gMiAmJiAoRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpIC0gMSwgaiwgMCkgfHwgRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpICsgMSwgaiwgMCkpKVxuICAgICAgICAgICAgICAgICAgICB8fCAoZGlyID09PSAzICYmIChHLmdldFZhbHVlWFkoaSwgaiwgMCkgPD0gRy5nZXRWYWx1ZVhZKGkgLSAxLCBqIC0gMSwgMCkgfHwgRy5nZXRWYWx1ZVhZKGksIGosIDApIDw9IEcuZ2V0VmFsdWVYWShpICsgMSwgaiArIDEsIDApKSkpXG4gICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBubXMuc2V0VmFsdWVYWShpLCBqLCAwLCBHLmdldFZhbHVlWFkoaSwgaiwgMCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZm9yIChpID0gMDsgaSA8IHdpZHRoICogaGVpZ2h0OyArK2kpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRObXMgPSBubXMuZGF0YVtpXTtcbiAgICAgICAgdmFyIGN1cnJlbnRFZGdlID0gMDtcbiAgICAgICAgaWYgKGN1cnJlbnRObXMgPiBvcHRpb25zLmhpZ2hUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRFZGdlKys7XG4gICAgICAgICAgICBmaW5hbEltYWdlLmRhdGFbaV0gPSBicmlnaHRuZXNzO1xuICAgICAgICB9XG4gICAgICAgIGlmIChjdXJyZW50Tm1zID4gb3B0aW9ucy5sb3dUaHJlc2hvbGQpIHtcbiAgICAgICAgICAgIGN1cnJlbnRFZGdlKys7XG4gICAgICAgIH1cblxuICAgICAgICBlZGdlcy5kYXRhW2ldID0gY3VycmVudEVkZ2U7XG4gICAgfVxuXG4gICAgLy8gSHlzdGVyZXNpczogZmlyc3QgcGFzc1xuICAgIHZhciBjdXJyZW50UGl4ZWxzID0gW107XG4gICAgZm9yIChpID0gMTsgaSA8IHdpZHRoIC0gMTsgKytpKSB7XG4gICAgICAgIGZvciAoaiA9IDE7IGogPCBoZWlnaHQgLSAxOyArK2opIHtcbiAgICAgICAgICAgIGlmIChlZGdlcy5nZXRWYWx1ZVhZKGksIGosIDApICE9PSAxKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIG91dGVyOiBmb3IgKHZhciBrID0gaSAtIDE7IGsgPCBpICsgMjsgKytrKSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbCA9IGogLSAxOyBsIDwgaiArIDI7ICsrbCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZXMuZ2V0VmFsdWVYWShrLCBsLCAwKSA9PT0gMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFBpeGVscy5wdXNoKFtpLCBqXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEltYWdlLnNldFZhbHVlWFkoaSwgaiwgMCwgYnJpZ2h0bmVzcyk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhayBvdXRlcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIEh5c3RlcmVzaXM6IHNlY29uZCBwYXNzXG4gICAgd2hpbGUgKGN1cnJlbnRQaXhlbHMubGVuZ3RoID4gMCkge1xuICAgICAgICB2YXIgbmV3UGl4ZWxzID0gW107XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCBjdXJyZW50UGl4ZWxzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBmb3IgKGogPSAtMTsgaiA8IDI7ICsraikge1xuICAgICAgICAgICAgICAgIGZvciAoayA9IC0xOyBrIDwgMjsgKytrKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAwICYmIGsgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSBjdXJyZW50UGl4ZWxzW2ldWzBdICsgajtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNvbCA9IGN1cnJlbnRQaXhlbHNbaV1bMV0gKyBrO1xuICAgICAgICAgICAgICAgICAgICBpZiAoZWRnZXMuZ2V0VmFsdWVYWShyb3csIGNvbCwgMCkgPT09IDEgJiYgZmluYWxJbWFnZS5nZXRWYWx1ZVhZKHJvdywgY29sLCAwKSA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmV3UGl4ZWxzLnB1c2goW3JvdywgY29sXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbEltYWdlLnNldFZhbHVlWFkocm93LCBjb2wsIDAsIGJyaWdodG5lc3MpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQaXhlbHMgPSBuZXdQaXhlbHM7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZpbmFsSW1hZ2U7XG59XG4iLCJpbXBvcnQgY2FubnlFZGdlRGV0ZWN0b3IgZnJvbSAnY2FubnktZWRnZS1kZXRlY3Rvcic7XG5cbi8qKlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEByZXR1cm4ge0ltYWdlfVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYW5ueUVkZ2Uob3B0aW9ucykge1xuICByZXR1cm4gY2FubnlFZGdlRGV0ZWN0b3IodGhpcywgb3B0aW9ucyk7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG4vKipcbiAqIEV4dHJhY3RzIGEgcGFydCBvZiBhbiBvcmlnaW5hbCBpbWFnZSBiYXNlZCBvbiBhIG1hc2suIEJ5IGRlZmF1bHQgdGhlIG1hc2sgbWF5IGNvbnRhaW5cbiAqIGEgcmVsYXRpdmUgcG9zaXRpb24gYW5kIHRoaXMgcGFydCBvZiB0aGUgb3JpZ2luYWwgaW1hZ2Ugd2lsbCBiZSBleHRyYWN0ZWQuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtJbWFnZX0gbWFzayAtIEltYWdlIGNvbnRhaW5pbmcgYSBiaW5hcnkgbWFza1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJbXX0gW29wdGlvbnMucG9zaXRpb25dIC0gQXJyYXkgb2YgMiBlbGVtZW50cyB0byBmb3JjZSB0aGUgeCx5IGNvb3JkaW5hdGVzXG4gKiBAcmV0dXJuIHtJbWFnZX0gQSBuZXcgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0cmFjdChtYXNrLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgcG9zaXRpb24gfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZXh0cmFjdCcsIHtcbiAgICBiaXREZXB0aDogWzEsIDgsIDE2XSxcbiAgfSk7XG5cbiAgLy8gd2UgbmVlZCB0byBmaW5kIHRoZSByZWxhdGl2ZSBwb3NpdGlvbiB0byB0aGUgcGFyZW50XG4gIGlmICghcG9zaXRpb24pIHtcbiAgICBwb3NpdGlvbiA9IG1hc2suZ2V0UmVsYXRpdmVQb3NpdGlvbih0aGlzKTtcbiAgICBpZiAoIXBvc2l0aW9uKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdleHRyYWN0IDogY2FuIG5vdCBleHRyYWN0IGFuIGltYWdlIGJlY2F1c2UgdGhlIHJlbGF0aXZlIHBvc2l0aW9uIGNhbiBub3QgYmUgJyArXG4gICAgICAgICAgJ2RldGVybWluZWQsIHRyeSB0byBzcGVjaWZ5IG1hbnVhbGx5IHRoZSBwb3NpdGlvbiBhcyBhbiBhcnJheSBvZiAyIGVsZW1lbnRzIFt4LHldLicsXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGlmICh0aGlzLmJpdERlcHRoID4gMSkge1xuICAgIGxldCBleHRyYWN0ID0gSW1hZ2UuY3JlYXRlRnJvbSh0aGlzLCB7XG4gICAgICB3aWR0aDogbWFzay53aWR0aCxcbiAgICAgIGhlaWdodDogbWFzay5oZWlnaHQsXG4gICAgICBhbHBoYTogMSwgLy8gd2UgZm9yY2UgdGhlIGFscGhhLCBvdGhlcndpc2UgZGlmZmljdWx0IHRvIGV4dHJhY3QgYSBtYXNrIC4uLlxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuXG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCBtYXNrLndpZHRoOyB4KyspIHtcbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgbWFzay5oZWlnaHQ7IHkrKykge1xuICAgICAgICAvLyB3ZSBjb3B5IHRoZSBwb2ludFxuICAgICAgICBmb3IgKGxldCBjaGFubmVsID0gMDsgY2hhbm5lbCA8IHRoaXMuY2hhbm5lbHM7IGNoYW5uZWwrKykge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVYWShcbiAgICAgICAgICAgIHggKyBwb3NpdGlvblswXSxcbiAgICAgICAgICAgIHkgKyBwb3NpdGlvblsxXSxcbiAgICAgICAgICAgIGNoYW5uZWwsXG4gICAgICAgICAgKTtcbiAgICAgICAgICBleHRyYWN0LnNldFZhbHVlWFkoeCwgeSwgY2hhbm5lbCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIC8vIHdlIG1ha2UgaXQgdHJhbnNwYXJlbnQgaW4gY2FzZSBpdCBpcyBub3QgaW4gdGhlIG1hc2tcbiAgICAgICAgaWYgKCFtYXNrLmdldEJpdFhZKHgsIHkpKSB7XG4gICAgICAgICAgZXh0cmFjdC5zZXRWYWx1ZVhZKHgsIHksIHRoaXMuY29tcG9uZW50cywgMCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gZXh0cmFjdDtcbiAgfSBlbHNlIHtcbiAgICBsZXQgZXh0cmFjdCA9IEltYWdlLmNyZWF0ZUZyb20odGhpcywge1xuICAgICAgd2lkdGg6IG1hc2sud2lkdGgsXG4gICAgICBoZWlnaHQ6IG1hc2suaGVpZ2h0LFxuICAgICAgcG9zaXRpb246IHBvc2l0aW9uLFxuICAgICAgcGFyZW50OiB0aGlzLFxuICAgIH0pO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgbWFzay5oZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBtYXNrLndpZHRoOyB4KyspIHtcbiAgICAgICAgaWYgKG1hc2suZ2V0Qml0WFkoeCwgeSkpIHtcbiAgICAgICAgICBpZiAodGhpcy5nZXRCaXRYWSh4ICsgcG9zaXRpb25bMF0sIHkgKyBwb3NpdGlvblsxXSkpIHtcbiAgICAgICAgICAgIGV4dHJhY3Quc2V0Qml0WFkoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGV4dHJhY3Q7XG4gIH1cbn1cbiIsImltcG9ydCBMaW5rZWRMaXN0IGZyb20gJ2Zhc3QtbGlzdCc7XG5cbmltcG9ydCBJbWFnZSBmcm9tICcuLi9JbWFnZSc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZsb29kRmlsbChvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyB4ID0gMCwgeSA9IDAsIGluUGxhY2UgPSB0cnVlIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IGRlc3RpbmF0aW9uID0gaW5QbGFjZSA/IHRoaXMgOiBJbWFnZS5jcmVhdGVGcm9tKHRoaXMpO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZmxvb2RGaWxsJywgeyBiaXREZXB0aDogMSB9KTtcblxuICBjb25zdCBiaXQgPSB0aGlzLmdldEJpdFhZKHgsIHkpO1xuICBpZiAoYml0KSByZXR1cm4gZGVzdGluYXRpb247XG4gIGNvbnN0IHF1ZXVlID0gbmV3IExpbmtlZExpc3QoKTtcbiAgcXVldWUucHVzaChuZXcgTm9kZSh4LCB5KSk7XG4gIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAwKSB7XG4gICAgY29uc3Qgbm9kZSA9IHF1ZXVlLnNoaWZ0KCk7XG4gICAgZGVzdGluYXRpb24uc2V0Qml0WFkobm9kZS54LCBub2RlLnkpO1xuICAgIGZvciAobGV0IGkgPSBub2RlLnggKyAxOyBpIDwgdGhpcy53aWR0aDsgaSsrKSB7XG4gICAgICBpZiAoIWRlc3RpbmF0aW9uLmdldEJpdFhZKGksIG5vZGUueSkgJiYgIXRoaXMuZ2V0Qml0WFkoaSwgbm9kZS55KSkge1xuICAgICAgICBkZXN0aW5hdGlvbi5zZXRCaXRYWShpLCBub2RlLnkpO1xuICAgICAgICBpZiAobm9kZS55ICsgMSA8IHRoaXMuaGVpZ2h0ICYmICF0aGlzLmdldEJpdFhZKGksIG5vZGUueSArIDEpKSB7XG4gICAgICAgICAgcXVldWUucHVzaChuZXcgTm9kZShpLCBub2RlLnkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG5vZGUueSAtIDEgPj0gMCAmJiAhdGhpcy5nZXRCaXRYWShpLCBub2RlLnkgLSAxKSkge1xuICAgICAgICAgIHF1ZXVlLnB1c2gobmV3IE5vZGUoaSwgbm9kZS55IC0gMSkpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZvci1kaXJlY3Rpb25cbiAgICBmb3IgKGxldCBpID0gbm9kZS54IC0gMTsgaSA+PSAwOyBpKyspIHtcbiAgICAgIGlmICghZGVzdGluYXRpb24uZ2V0Qml0WFkoaSwgbm9kZS55KSAmJiAhdGhpcy5nZXRCaXRYWShpLCBub2RlLnkpKSB7XG4gICAgICAgIGRlc3RpbmF0aW9uLnNldEJpdFhZKGksIG5vZGUueSk7XG4gICAgICAgIGlmIChub2RlLnkgKyAxIDwgdGhpcy5oZWlnaHQgJiYgIXRoaXMuZ2V0Qml0WFkoaSwgbm9kZS55ICsgMSkpIHtcbiAgICAgICAgICBxdWV1ZS5wdXNoKG5ldyBOb2RlKGksIG5vZGUueSArIDEpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9kZS55IC0gMSA+PSAwICYmICF0aGlzLmdldEJpdFhZKGksIG5vZGUueSAtIDEpKSB7XG4gICAgICAgICAgcXVldWUucHVzaChuZXcgTm9kZShpLCBub2RlLnkgLSAxKSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuZnVuY3Rpb24gTm9kZSh4LCB5KSB7XG4gIHRoaXMueCA9IHg7XG4gIHRoaXMueSA9IHk7XG59XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfZXh0ZW5kcygpIHtcbiAgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIHNvdXJjZSkge1xuICAgICAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkge1xuICAgICAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0O1xuICB9O1xuXG4gIHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufSIsImltcG9ydCBfZXh0ZW5kcyBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2V4dGVuZHMnO1xuXG5mdW5jdGlvbiBoZXgycmdiIChoZXgpIHtcbiAgaWYgKGhleFswXSA9PT0gJyMnKSBoZXggPSBoZXguc3Vic3RyKDEpO1xuXG4gIGlmIChoZXgubGVuZ3RoID09PSAzKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHI6IHBhcnNlSW50KGhleFswXSArIGhleFswXSwgMTYpLFxuICAgICAgZzogcGFyc2VJbnQoaGV4WzFdICsgaGV4WzFdLCAxNiksXG4gICAgICBiOiBwYXJzZUludChoZXhbMl0gKyBoZXhbMl0sIDE2KVxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHI6IHBhcnNlSW50KGhleC5zdWJzdHIoMCwgMiksIDE2KSxcbiAgICBnOiBwYXJzZUludChoZXguc3Vic3RyKDIsIDIpLCAxNiksXG4gICAgYjogcGFyc2VJbnQoaGV4LnN1YnN0cig0LCAyKSwgMTYpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGhzdjJyZ2IgKGgsIHMsIHYpIHtcbiAgcyA9IHMgLyAxMDA7XG4gIHYgPSB2IC8gMTAwO1xuICB2YXIgcmdiID0gW107XG4gIHZhciBjID0gdiAqIHM7XG4gIHZhciBoaCA9IGggLyA2MDtcbiAgdmFyIHggPSBjICogKDEgLSBNYXRoLmFicyhoaCAlIDIgLSAxKSk7XG4gIHZhciBtID0gdiAtIGM7XG5cbiAgaWYgKGhoID49IDAgJiYgaGggPCAxKSB7XG4gICAgcmdiID0gW2MsIHgsIDBdO1xuICB9IGVsc2UgaWYgKGhoID49IDEgJiYgaGggPCAyKSB7XG4gICAgcmdiID0gW3gsIGMsIDBdO1xuICB9IGVsc2UgaWYgKGhoID49IDIgJiYgaGggPCAzKSB7XG4gICAgcmdiID0gWzAsIGMsIHhdO1xuICB9IGVsc2UgaWYgKGggPj0gMyAmJiBoaCA8IDQpIHtcbiAgICByZ2IgPSBbMCwgeCwgY107XG4gIH0gZWxzZSBpZiAoaCA+PSA0ICYmIGhoIDwgNSkge1xuICAgIHJnYiA9IFt4LCAwLCBjXTtcbiAgfSBlbHNlIGlmIChoID49IDUgJiYgaGggPD0gNikge1xuICAgIHJnYiA9IFtjLCAwLCB4XTtcbiAgfSBlbHNlIHtcbiAgICByZ2IgPSBbMCwgMCwgMF07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHI6IE1hdGgucm91bmQoMjU1ICogKHJnYlswXSArIG0pKSxcbiAgICBnOiBNYXRoLnJvdW5kKDI1NSAqIChyZ2JbMV0gKyBtKSksXG4gICAgYjogTWF0aC5yb3VuZCgyNTUgKiAocmdiWzJdICsgbSkpXG4gIH07XG59XG5cbmZ1bmN0aW9uIGNvbnZlcnQobnVtKSB7XG4gIHZhciBoZXggPSBudW0udG9TdHJpbmcoMTYpO1xuICByZXR1cm4gaGV4Lmxlbmd0aCA9PT0gMSA/ICcwJyArIGhleCA6IGhleDtcbn1cblxuZnVuY3Rpb24gcmdiMmhleCAociwgZywgYikge1xuICByZXR1cm4gJyMnICsgW2NvbnZlcnQociksIGNvbnZlcnQoZyksIGNvbnZlcnQoYildLmpvaW4oJycpO1xufVxuXG5mdW5jdGlvbiBoc3YyaGV4IChoLCBzLCB2KSB7XG4gIHZhciByZ2IgPSBoc3YycmdiKGgsIHMsIHYpO1xuICByZXR1cm4gcmdiMmhleChyZ2IuciwgcmdiLmcsIHJnYi5iKTtcbn1cblxuZnVuY3Rpb24gcmdiMmhzdiAociwgZywgYikge1xuICB2YXIgaCwgcywgdjtcbiAgdmFyIG1heCA9IE1hdGgubWF4KHIsIGcsIGIpO1xuICB2YXIgbWluID0gTWF0aC5taW4ociwgZywgYik7XG4gIHZhciBkZWx0YSA9IG1heCAtIG1pbjtcblxuICBpZiAoZGVsdGEgPT09IDApIHtcbiAgICBoID0gMDtcbiAgfSBlbHNlIGlmIChyID09PSBtYXgpIHtcbiAgICBoID0gKGcgLSBiKSAvIGRlbHRhICUgNjtcbiAgfSBlbHNlIGlmIChnID09PSBtYXgpIHtcbiAgICBoID0gKGIgLSByKSAvIGRlbHRhICsgMjtcbiAgfSBlbHNlIHtcbiAgICBoID0gKHIgLSBnKSAvIGRlbHRhICsgNDtcbiAgfVxuXG4gIGggPSBNYXRoLnJvdW5kKGggKiA2MCk7XG4gIGlmIChoIDwgMCkgaCArPSAzNjA7XG4gIHMgPSBNYXRoLnJvdW5kKChtYXggPT09IDAgPyAwIDogZGVsdGEgLyBtYXgpICogMTAwKTtcbiAgdiA9IE1hdGgucm91bmQobWF4IC8gMjU1ICogMTAwKTtcbiAgcmV0dXJuIHtcbiAgICBoOiBoLFxuICAgIHM6IHMsXG4gICAgdjogdlxuICB9O1xufVxuXG5mdW5jdGlvbiByZ2JhIChyLCBnLCBiLCBhKSB7XG4gIHJldHVybiAncmdiYSgnICsgW3IsIGcsIGIsIGEgLyAxMDBdLmpvaW4oJywnKSArICcpJztcbn1cblxuZnVuY3Rpb24gcmdiYTJyZ2IgKHIsIGcsIGIsIGEpIHtcbiAgYSA9IGEgLyAxMDA7XG4gIHJldHVybiB7XG4gICAgcjogcGFyc2VJbnQoKDEgLSBhKSAqIDI1NSArIGEgKiByLCAxMCksXG4gICAgZzogcGFyc2VJbnQoKDEgLSBhKSAqIDI1NSArIGEgKiBnLCAxMCksXG4gICAgYjogcGFyc2VJbnQoKDEgLSBhKSAqIDI1NSArIGEgKiBiLCAxMClcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmdiYTJoZXggKHIsIGcsIGIsIGEpIHtcbiAgdmFyIHJnYiA9IHJnYmEycmdiKHIsIGcsIGIsIGEpO1xuICByZXR1cm4gcmdiMmhleChyZ2IuciwgcmdiLmcsIHJnYi5iKTtcbn1cblxuZnVuY3Rpb24gaHNsMmhzdiAoaCwgcywgbCkge1xuICBzICo9IChsIDwgNTAgPyBsIDogMTAwIC0gbCkgLyAxMDA7XG4gIHJldHVybiB7XG4gICAgaDogaCxcbiAgICBzOiAyICogcyAvIChsICsgcykgKiAxMDAsXG4gICAgdjogbCArIHNcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHN2MmhzbCAoaCwgcywgdikge1xuICB2YXIgaGggPSAoMjAwIC0gcykgKiB2IC8gMTAwO1xuICByZXR1cm4ge1xuICAgIGg6IGgsXG4gICAgczogcyAqIHYgLyAoaGggPCAxMDAgPyBoaCA6IDIwMCAtIGhoKSxcbiAgICBsOiBoaCAvIDJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaHNsMnJnYiAoaCwgcywgbCkge1xuICB2YXIgaHN2ID0gaHNsMmhzdihoLCBzLCBsKTtcbiAgcmV0dXJuIGhzdjJyZ2IoaHN2LmgsIGhzdi5zLCBoc3Yudik7XG59XG5cbnZhciBjb2xvcnMgPSB7XG4gIGFsaWNlYmx1ZTogWzI0MCwgMjQ4LCAyNTVdLFxuICBhbnRpcXVld2hpdGU6IFsyNTAsIDIzNSwgMjE1XSxcbiAgYXF1YTogWzAsIDI1NSwgMjU1XSxcbiAgYXF1YW1hcmluZTogWzEyNywgMjU1LCAyMTJdLFxuICBhenVyZTogWzI0MCwgMjU1LCAyNTVdLFxuICBiZWlnZTogWzI0NSwgMjQ1LCAyMjBdLFxuICBiaXNxdWU6IFsyNTUsIDIyOCwgMTk2XSxcbiAgYmxhY2s6IFswLCAwLCAwXSxcbiAgYmxhbmNoZWRhbG1vbmQ6IFsyNTUsIDIzNSwgMjA1XSxcbiAgYmx1ZTogWzAsIDAsIDI1NV0sXG4gIGJsdWV2aW9sZXQ6IFsxMzgsIDQzLCAyMjZdLFxuICBicm93bjogWzE2NSwgNDIsIDQyXSxcbiAgYnVybHl3b29kOiBbMjIyLCAxODQsIDEzNV0sXG4gIGNhZGV0Ymx1ZTogWzk1LCAxNTgsIDE2MF0sXG4gIGNoYXJ0cmV1c2U6IFsxMjcsIDI1NSwgMF0sXG4gIGNob2NvbGF0ZTogWzIxMCwgMTA1LCAzMF0sXG4gIGNvcmFsOiBbMjU1LCAxMjcsIDgwXSxcbiAgY29ybmZsb3dlcmJsdWU6IFsxMDAsIDE0OSwgMjM3XSxcbiAgY29ybnNpbGs6IFsyNTUsIDI0OCwgMjIwXSxcbiAgY3JpbXNvbjogWzIyMCwgMjAsIDYwXSxcbiAgY3lhbjogWzAsIDI1NSwgMjU1XSxcbiAgZGFya2JsdWU6IFswLCAwLCAxMzldLFxuICBkYXJrY3lhbjogWzAsIDEzOSwgMTM5XSxcbiAgZGFya2dvbGRlbnJvZDogWzE4NCwgMTMyLCAxMV0sXG4gIGRhcmtncmF5OiBbMTY5LCAxNjksIDE2OV0sXG4gIGRhcmtncmVlbjogWzAsIDEwMCwgMF0sXG4gIGRhcmtncmV5OiBbMTY5LCAxNjksIDE2OV0sXG4gIGRhcmtraGFraTogWzE4OSwgMTgzLCAxMDddLFxuICBkYXJrbWFnZW50YTogWzEzOSwgMCwgMTM5XSxcbiAgZGFya29saXZlZ3JlZW46IFs4NSwgMTA3LCA0N10sXG4gIGRhcmtvcmFuZ2U6IFsyNTUsIDE0MCwgMF0sXG4gIGRhcmtvcmNoaWQ6IFsxNTMsIDUwLCAyMDRdLFxuICBkYXJrcmVkOiBbMTM5LCAwLCAwXSxcbiAgZGFya3NhbG1vbjogWzIzMywgMTUwLCAxMjJdLFxuICBkYXJrc2VhZ3JlZW46IFsxNDMsIDE4OCwgMTQzXSxcbiAgZGFya3NsYXRlYmx1ZTogWzcyLCA2MSwgMTM5XSxcbiAgZGFya3NsYXRlZ3JheTogWzQ3LCA3OSwgNzldLFxuICBkYXJrc2xhdGVncmV5OiBbNDcsIDc5LCA3OV0sXG4gIGRhcmt0dXJxdW9pc2U6IFswLCAyMDYsIDIwOV0sXG4gIGRhcmt2aW9sZXQ6IFsxNDgsIDAsIDIxMV0sXG4gIGRlZXBwaW5rOiBbMjU1LCAyMCwgMTQ3XSxcbiAgZGVlcHNreWJsdWU6IFswLCAxOTEsIDI1NV0sXG4gIGRpbWdyYXk6IFsxMDUsIDEwNSwgMTA1XSxcbiAgZGltZ3JleTogWzEwNSwgMTA1LCAxMDVdLFxuICBkb2RnZXJibHVlOiBbMzAsIDE0NCwgMjU1XSxcbiAgZmlyZWJyaWNrOiBbMTc4LCAzNCwgMzRdLFxuICBmbG9yYWx3aGl0ZTogWzI1NSwgMjU1LCAyNDBdLFxuICBmb3Jlc3RncmVlbjogWzM0LCAxMzksIDM0XSxcbiAgZnVjaHNpYTogWzI1NSwgMCwgMjU1XSxcbiAgZ2FpbnNib3JvOiBbMjIwLCAyMjAsIDIyMF0sXG4gIGdob3N0d2hpdGU6IFsyNDgsIDI0OCwgMjU1XSxcbiAgZ29sZDogWzI1NSwgMjE1LCAwXSxcbiAgZ29sZGVucm9kOiBbMjE4LCAxNjUsIDMyXSxcbiAgZ3JheTogWzEyOCwgMTI4LCAxMjhdLFxuICBncmVlbjogWzAsIDEyOCwgMF0sXG4gIGdyZWVueWVsbG93OiBbMTczLCAyNTUsIDQ3XSxcbiAgZ3JleTogWzEyOCwgMTI4LCAxMjhdLFxuICBob25leWRldzogWzI0MCwgMjU1LCAyNDBdLFxuICBob3RwaW5rOiBbMjU1LCAxMDUsIDE4MF0sXG4gIGluZGlhbnJlZDogWzIwNSwgOTIsIDkyXSxcbiAgaW5kaWdvOiBbNzUsIDAsIDEzMF0sXG4gIGl2b3J5OiBbMjU1LCAyNTUsIDI0MF0sXG4gIGtoYWtpOiBbMjQwLCAyMzAsIDE0MF0sXG4gIGxhdmVuZGVyOiBbMjMwLCAyMzAsIDI1MF0sXG4gIGxhdmVuZGVyYmx1c2g6IFsyNTUsIDI0MCwgMjQ1XSxcbiAgbGF3bmdyZWVuOiBbMTI0LCAyNTIsIDBdLFxuICBsZW1vbmNoaWZmb246IFsyNTUsIDI1MCwgMjA1XSxcbiAgbGlnaHRibHVlOiBbMTczLCAyMTYsIDIzMF0sXG4gIGxpZ2h0Y29yYWw6IFsyNDAsIDEyOCwgMTI4XSxcbiAgbGlnaHRjeWFuOiBbMjI0LCAyNTUsIDI1NV0sXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbMjUwLCAyNTAsIDIxMF0sXG4gIGxpZ2h0Z3JheTogWzIxMSwgMjExLCAyMTFdLFxuICBsaWdodGdyZWVuOiBbMTQ0LCAyMzgsIDE0NF0sXG4gIGxpZ2h0Z3JleTogWzIxMSwgMjExLCAyMTFdLFxuICBsaWdodHBpbms6IFsyNTUsIDE4MiwgMTkzXSxcbiAgbGlnaHRzYWxtb246IFsyNTUsIDE2MCwgMTIyXSxcbiAgbGlnaHRzZWFncmVlbjogWzMyLCAxNzgsIDE3MF0sXG4gIGxpZ2h0c2t5Ymx1ZTogWzEzNSwgMjA2LCAyNTBdLFxuICBsaWdodHNsYXRlZ3JheTogWzExOSwgMTM2LCAxNTNdLFxuICBsaWdodHNsYXRlZ3JleTogWzExOSwgMTM2LCAxNTNdLFxuICBsaWdodHN0ZWVsYmx1ZTogWzE3NiwgMTk2LCAyMjJdLFxuICBsaWdodHllbGxvdzogWzI1NSwgMjU1LCAyMjRdLFxuICBsaW1lOiBbMCwgMjU1LCAwXSxcbiAgbGltZWdyZWVuOiBbNTAsIDIwNSwgNTBdLFxuICBsaW5lbjogWzI1MCwgMjQwLCAyMzBdLFxuICBtYWdlbnRhOiBbMjU1LCAwLCAyNTVdLFxuICBtYXJvb246IFsxMjgsIDAsIDBdLFxuICBtZWRpdW1hcXVhbWFyaW5lOiBbMTAyLCAyMDUsIDE3MF0sXG4gIG1lZGl1bWJsdWU6IFswLCAwLCAyMDVdLFxuICBtZWRpdW1vcmNoaWQ6IFsxODYsIDg1LCAyMTFdLFxuICBtZWRpdW1wdXJwbGU6IFsxNDcsIDExMiwgMjE5XSxcbiAgbWVkaXVtc2VhZ3JlZW46IFs2MCwgMTc5LCAxMTNdLFxuICBtZWRpdW1zbGF0ZWJsdWU6IFsxMjMsIDEwNCwgMjM4XSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46IFswLCAyNTAsIDE1NF0sXG4gIG1lZGl1bXR1cnF1b2lzZTogWzcyLCAyMDksIDIwNF0sXG4gIG1lZGl1bXZpb2xldHJlZDogWzE5OSwgMjEsIDEzM10sXG4gIG1pZG5pZ2h0Ymx1ZTogWzI1LCAyNSwgMTEyXSxcbiAgbWludGNyZWFtOiBbMjQ1LCAyNTUsIDI1MF0sXG4gIG1pc3R5cm9zZTogWzI1NSwgMjI4LCAyMjVdLFxuICBtb2NjYXNpbjogWzI1NSwgMjI4LCAxODFdLFxuICBuYXZham93aGl0ZTogWzI1NSwgMjIyLCAxNzNdLFxuICBuYXZ5OiBbMCwgMCwgMTI4XSxcbiAgb2xkbGFjZTogWzI1MywgMjQ1LCAyMzBdLFxuICBvbGl2ZTogWzEyOCwgMTI4LCAwXSxcbiAgb2xpdmVkcmFiOiBbMTA3LCAxNDIsIDM1XSxcbiAgb3JhbmdlOiBbMjU1LCAxNjUsIDBdLFxuICBvcmFuZ2VyZWQ6IFsyNTUsIDY5LCAwXSxcbiAgb3JjaGlkOiBbMjE4LCAxMTIsIDIxNF0sXG4gIHBhbGVnb2xkZW5yb2Q6IFsyMzgsIDIzMiwgMTcwXSxcbiAgcGFsZWdyZWVuOiBbMTUyLCAyNTEsIDE1Ml0sXG4gIHBhbGV0dXJxdW9pc2U6IFsxNzUsIDIzOCwgMjM4XSxcbiAgcGFsZXZpb2xldHJlZDogWzIxOSwgMTEyLCAxNDddLFxuICBwYXBheWF3aGlwOiBbMjU1LCAyMzksIDIxM10sXG4gIHBlYWNocHVmZjogWzI1NSwgMjE4LCAxODVdLFxuICBwZXJ1OiBbMjA1LCAxMzMsIDYzXSxcbiAgcGluazogWzI1NSwgMTkyLCAyMDNdLFxuICBwbHVtOiBbMjIxLCAxNjAsIDIwM10sXG4gIHBvd2RlcmJsdWU6IFsxNzYsIDIyNCwgMjMwXSxcbiAgcHVycGxlOiBbMTI4LCAwLCAxMjhdLFxuICByZWJlY2NhcHVycGxlOiBbMTAyLCA1MSwgMTUzXSxcbiAgcmVkOiBbMjU1LCAwLCAwXSxcbiAgcm9zeWJyb3duOiBbMTg4LCAxNDMsIDE0M10sXG4gIHJveWFsYmx1ZTogWzY1LCAxMDUsIDIyNV0sXG4gIHNhZGRsZWJyb3duOiBbMTM5LCA2OSwgMTldLFxuICBzYWxtb246IFsyNTAsIDEyOCwgMTE0XSxcbiAgc2FuZHlicm93bjogWzI0NCwgMTY0LCA5Nl0sXG4gIHNlYWdyZWVuOiBbNDYsIDEzOSwgODddLFxuICBzZWFzaGVsbDogWzI1NSwgMjQ1LCAyMzhdLFxuICBzaWVubmE6IFsxNjAsIDgyLCA0NV0sXG4gIHNpbHZlcjogWzE5MiwgMTkyLCAxOTJdLFxuICBza3libHVlOiBbMTM1LCAyMDYsIDIzNV0sXG4gIHNsYXRlYmx1ZTogWzEwNiwgOTAsIDIwNV0sXG4gIHNsYXRlZ3JheTogWzExOSwgMTI4LCAxNDRdLFxuICBzbGF0ZWdyZXk6IFsxMTksIDEyOCwgMTQ0XSxcbiAgc25vdzogWzI1NSwgMjU1LCAyNTBdLFxuICBzcHJpbmdncmVlbjogWzAsIDI1NSwgMTI3XSxcbiAgc3RlZWxibHVlOiBbNzAsIDEzMCwgMTgwXSxcbiAgdGFuOiBbMjEwLCAxODAsIDE0MF0sXG4gIHRlYWw6IFswLCAxMjgsIDEyOF0sXG4gIHRoaXN0bGU6IFsyMTYsIDE5MSwgMjE2XSxcbiAgdG9tYXRvOiBbMjU1LCA5OSwgNzFdLFxuICB0dXJxdW9pc2U6IFs2NCwgMjI0LCAyMDhdLFxuICB2aW9sZXQ6IFsyMzgsIDEzMCwgMjM4XSxcbiAgd2hlYXQ6IFsyNDUsIDIyMiwgMTc5XSxcbiAgd2hpdGU6IFsyNTUsIDI1NSwgMjU1XSxcbiAgd2hpdGVzbW9rZTogWzI0NSwgMjQ1LCAyNDVdLFxuICB5ZWxsb3c6IFsyNTUsIDI1NSwgMF0sXG4gIHllbGxvd2dyZWVuOiBbMTU0LCAyMDUsIDVdXG59O1xuXG5mdW5jdGlvbiBwYXJzZShzdHIpIHtcbiAgcmV0dXJuIG5hbWVkKHN0cikgfHwgaGV4MyhzdHIpIHx8IGhleDYoc3RyKSB8fCByZ2Ioc3RyKSB8fCByZ2JhJDEoc3RyKSB8fCBoc2woc3RyKSB8fCBoc2xhKHN0cik7XG59XG5cbmZ1bmN0aW9uIG5hbWVkKHN0cikge1xuICB2YXIgYyA9IGNvbG9yc1tzdHIudG9Mb3dlckNhc2UoKV07XG4gIGlmICghYykgcmV0dXJuO1xuICByZXR1cm4ge1xuICAgIHI6IGNbMF0sXG4gICAgZzogY1sxXSxcbiAgICBiOiBjWzJdLFxuICAgIGE6IDEwMFxuICB9O1xufVxuXG5mdW5jdGlvbiByZ2Ioc3RyKSB7XG4gIHZhciBtID0gc3RyLm1hdGNoKC9yZ2JcXCgoW14pXSspXFwpLyk7XG5cbiAgaWYgKG0pIHtcbiAgICB2YXIgcGFydHMgPSBtWzFdLnNwbGl0KC8gKiwgKi8pLm1hcChOdW1iZXIpO1xuICAgIHJldHVybiB7XG4gICAgICByOiBwYXJ0c1swXSxcbiAgICAgIGc6IHBhcnRzWzFdLFxuICAgICAgYjogcGFydHNbMl0sXG4gICAgICBhOiAxMDBcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIHJnYmEkMShzdHIpIHtcbiAgdmFyIG0gPSBzdHIubWF0Y2goL3JnYmFcXCgoW14pXSspXFwpLyk7XG5cbiAgaWYgKG0pIHtcbiAgICB2YXIgcGFydHMgPSBtWzFdLnNwbGl0KC8gKiwgKi8pLm1hcChOdW1iZXIpO1xuICAgIHJldHVybiB7XG4gICAgICByOiBwYXJ0c1swXSxcbiAgICAgIGc6IHBhcnRzWzFdLFxuICAgICAgYjogcGFydHNbMl0sXG4gICAgICBhOiBwYXJ0c1szXSAqIDEwMFxuICAgIH07XG4gIH1cbn1cblxuZnVuY3Rpb24gaGV4NihzdHIpIHtcbiAgaWYgKCcjJyA9PT0gc3RyWzBdICYmIDcgPT09IHN0ci5sZW5ndGgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcjogcGFyc2VJbnQoc3RyLnNsaWNlKDEsIDMpLCAxNiksXG4gICAgICBnOiBwYXJzZUludChzdHIuc2xpY2UoMywgNSksIDE2KSxcbiAgICAgIGI6IHBhcnNlSW50KHN0ci5zbGljZSg1LCA3KSwgMTYpLFxuICAgICAgYTogMTAwXG4gICAgfTtcbiAgfVxufVxuXG5mdW5jdGlvbiBoZXgzKHN0cikge1xuICBpZiAoJyMnID09PSBzdHJbMF0gJiYgNCA9PT0gc3RyLmxlbmd0aCkge1xuICAgIHJldHVybiB7XG4gICAgICByOiBwYXJzZUludChzdHJbMV0gKyBzdHJbMV0sIDE2KSxcbiAgICAgIGc6IHBhcnNlSW50KHN0clsyXSArIHN0clsyXSwgMTYpLFxuICAgICAgYjogcGFyc2VJbnQoc3RyWzNdICsgc3RyWzNdLCAxNiksXG4gICAgICBhOiAxMDBcbiAgICB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGhzbChzdHIpIHtcbiAgdmFyIG0gPSBzdHIubWF0Y2goL2hzbFxcKChbXildKylcXCkvKTtcblxuICBpZiAobSkge1xuICAgIHZhciBwYXJ0cyA9IG1bMV0uc3BsaXQoLyAqLCAqLyk7XG4gICAgdmFyIGggPSBwYXJzZUludChwYXJ0c1swXSwgMTApO1xuICAgIHZhciBzID0gcGFyc2VJbnQocGFydHNbMV0sIDEwKTtcbiAgICB2YXIgbCA9IHBhcnNlSW50KHBhcnRzWzJdLCAxMCk7XG5cbiAgICB2YXIgX3JnYiA9IGhzbDJyZ2IoaCwgcywgbCk7XG5cbiAgICByZXR1cm4gX2V4dGVuZHMoe30sIF9yZ2IsIHtcbiAgICAgIGE6IDEwMFxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhzbGEoc3RyKSB7XG4gIHZhciBtID0gc3RyLm1hdGNoKC9oc2xhXFwoKFteKV0rKVxcKS8pO1xuXG4gIGlmIChtKSB7XG4gICAgdmFyIHBhcnRzID0gbVsxXS5zcGxpdCgvICosICovKTtcbiAgICB2YXIgaCA9IHBhcnNlSW50KHBhcnRzWzBdLCAxMCk7XG4gICAgdmFyIHMgPSBwYXJzZUludChwYXJ0c1sxXSwgMTApO1xuICAgIHZhciBsID0gcGFyc2VJbnQocGFydHNbMl0sIDEwKTtcbiAgICB2YXIgYSA9IHBhcnNlSW50KHBhcnNlRmxvYXQocGFydHNbM10pICogMTAwLCAxMCk7XG5cbiAgICB2YXIgX3JnYjIgPSBoc2wycmdiKGgsIHMsIGwpO1xuXG4gICAgcmV0dXJuIF9leHRlbmRzKHt9LCBfcmdiMiwge1xuICAgICAgYTogYVxuICAgIH0pO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhleDJoc3YgKGhleCkge1xuICB2YXIgX2hleDJyZ2IgPSBoZXgycmdiKGhleCksXG4gICAgICByID0gX2hleDJyZ2IucixcbiAgICAgIGcgPSBfaGV4MnJnYi5nLFxuICAgICAgYiA9IF9oZXgycmdiLmI7XG5cbiAgcmV0dXJuIHJnYjJoc3YociwgZywgYik7XG59XG5cbmZ1bmN0aW9uIGhleDJoc2wgKGhleCkge1xuICB2YXIgX2hleDJoc3YgPSBoZXgyaHN2KGhleCksXG4gICAgICBoID0gX2hleDJoc3YuaCxcbiAgICAgIHMgPSBfaGV4Mmhzdi5zLFxuICAgICAgdiA9IF9oZXgyaHN2LnY7XG5cbiAgcmV0dXJuIGhzdjJoc2woaCwgcywgdik7XG59XG5cbmZ1bmN0aW9uIGhleDJhbHBoYShhYSkge1xuICByZXR1cm4gTWF0aC5yb3VuZChwYXJzZUludCgnMHgnICsgYWEsIDE2KSAvIDI1NSAqIDEwMCk7XG59XG5cbmV4cG9ydCB7IHBhcnNlIGFzIGNzc0NvbG9yLCBoZXgyYWxwaGEsIGhleDJoc2wsIGhleDJoc3YsIGhleDJyZ2IsIGhzbDJoc3YsIGhzbDJyZ2IsIGhzdjJoZXgsIGhzdjJoc2wsIGhzdjJyZ2IsIHJnYjJoZXgsIHJnYjJoc3YsIHJnYmEsIHJnYmEyaGV4LCByZ2JhMnJnYiB9O1xuIiwiaW1wb3J0IHsgY3NzQ29sb3IgfSBmcm9tICdAc3dpZnRjYXJyb3QvY29sb3ItZm5zJztcblxuZXhwb3J0IGZ1bmN0aW9uIGNzczJhcnJheShzdHJpbmcpIHtcbiAgbGV0IGNvbG9yID0gY3NzQ29sb3Ioc3RyaW5nKTtcbiAgcmV0dXJuIFtjb2xvci5yLCBjb2xvci5nLCBjb2xvci5iLCBNYXRoLnJvdW5kKChjb2xvci5hICogMjU1KSAvIDEwMCldO1xufVxuXG5mdW5jdGlvbiBodWUycmdiKHAsIHEsIHQpIHtcbiAgaWYgKHQgPCAwKSB7XG4gICAgdCArPSAxO1xuICB9XG4gIGlmICh0ID4gMSkge1xuICAgIHQgLT0gMTtcbiAgfVxuICBpZiAodCA8IDEgLyA2KSB7XG4gICAgcmV0dXJuIHAgKyAocSAtIHApICogNiAqIHQ7XG4gIH1cbiAgaWYgKHQgPCAxIC8gMikge1xuICAgIHJldHVybiBxO1xuICB9XG4gIGlmICh0IDwgMiAvIDMpIHtcbiAgICByZXR1cm4gcCArIChxIC0gcCkgKiAoMiAvIDMgLSB0KSAqIDY7XG4gIH1cbiAgcmV0dXJuIHA7XG59XG5cbmZ1bmN0aW9uIGhzbDJyZ2IoaCwgcywgbCkge1xuICBsZXQgbTEsIG0yLCBodWUsIHIsIGcsIGI7XG4gIHMgLz0gMTAwO1xuICBsIC89IDEwMDtcblxuICBpZiAocyA9PT0gMCkge1xuICAgIHIgPSBnID0gYiA9IGwgKiAyNTU7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGwgPD0gMC41KSB7XG4gICAgICBtMiA9IGwgKiAocyArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBtMiA9IGwgKyBzIC0gbCAqIHM7XG4gICAgfVxuXG4gICAgbTEgPSBsICogMiAtIG0yO1xuICAgIGh1ZSA9IGggLyAzNjA7XG4gICAgciA9IGh1ZTJyZ2IobTEsIG0yLCBodWUgKyAxIC8gMyk7XG4gICAgZyA9IGh1ZTJyZ2IobTEsIG0yLCBodWUpO1xuICAgIGIgPSBodWUycmdiKG0xLCBtMiwgaHVlIC0gMSAvIDMpO1xuICB9XG4gIHJldHVybiB7IHI6IHIsIGc6IGcsIGI6IGIgfTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERpc3RpbmN0Q29sb3JzKG51bUNvbG9ycykge1xuICBsZXQgY29sb3JzID0gbmV3IEFycmF5KG51bUNvbG9ycyk7XG4gIGxldCBqID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCAzNjA7IGkgKz0gMzYwIC8gbnVtQ29sb3JzKSB7XG4gICAgaisrO1xuICAgIGxldCBjb2xvciA9IGhzbDJyZ2IoaSwgMTAwLCAzMCArIChqICUgNCkgKiAxNSk7XG4gICAgY29sb3JzW2ogLSAxXSA9IFtcbiAgICAgIE1hdGgucm91bmQoY29sb3IuciAqIDI1NSksXG4gICAgICBNYXRoLnJvdW5kKGNvbG9yLmcgKiAyNTUpLFxuICAgICAgTWF0aC5yb3VuZChjb2xvci5iICogMjU1KSxcbiAgICBdO1xuICB9XG4gIHJldHVybiBjb2xvcnM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRSYW5kb21Db2xvcigpIHtcbiAgcmV0dXJuIFtcbiAgICBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAyNTYpLFxuICAgIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIDI1NiksXG4gICAgTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMjU2KSxcbiAgXTtcbn1cblxuLyoqXG4gKiByZXR1cm5zIGFuIGFycmF5IG9mIGNvbG9ycyBiYXNlZCBvbiB2YXJpb3VzIG9wdGlvbnNcbiAqIGJ5IGRlZmF1bHQgdGhpcyBtZXRob2RzIHJldHVybiA1MCBkaXN0aW5jdCBjb2xvcnNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxzdHJpbmd9ICAgICBbb3B0aW9ucy5jb2xvcl0gLSBBcnJheSBvZiAzIGVsZW1lbnRzIChSLCBHLCBCKSBvciBhIHZhbGlkIGNzcyBjb2xvci5cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj58QXJyYXk8c3RyaW5nPn0gW29wdGlvbnMuY29sb3JzXSAtIEFycmF5IG9mIEFycmF5IG9mIDMgZWxlbWVudHMgKFIsIEcsIEIpIGZvciBlYWNoIGNvbG9yIG9mIGVhY2ggbWFza1xuICogQHBhcmFtIHtib29sZWFufSAgICAgICAgICAgICBbb3B0aW9ucy5yYW5kb21Db2xvcnM9dHJ1ZV0gLSBUbyBwYWludCBlYWNoIG1hc2sgd2l0aCBhIHJhbmRvbSBjb2xvciBpZiBjb2xvciBhbmQgY29sb3JzIGFyZSB1bmRlZmluZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgW29wdGlvbnMuZGlzdGluY3RDb2xvcnM9ZmFsc2VdIC0gVG8gcGFpbnQgZWFjaCBtYXNrIHdpdGggYSBkaWZmZXJlbnQgY29sb3IgaWYgY29sb3IgYW5kIGNvbG9ycyBhcmUgdW5kZWZpbmVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgIFtvcHRpb25zLm51bWJlckNvbG9ycz01MF0gLSBudW1iZXIgb2YgY29sb3JzIHRvIGdlbmVyYXRlIGJ5IGRlZmF1bHRcbiAqIEByZXR1cm4ge0FycmF5fSBBcnJheSBvZiBjb2xvcnNcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRDb2xvcnMob3B0aW9ucykge1xuICBsZXQge1xuICAgIGNvbG9yLFxuICAgIGNvbG9ycyxcbiAgICByYW5kb21Db2xvcnMsIC8vIHRydWUgLyBmYWxzZVxuICAgIG51bWJlckNvbG9ycyA9IDUwLFxuICB9ID0gb3B0aW9ucztcblxuICBpZiAoY29sb3IgJiYgIUFycmF5LmlzQXJyYXkoY29sb3IpKSB7XG4gICAgY29sb3IgPSBjc3MyYXJyYXkoY29sb3IpO1xuICB9XG5cbiAgaWYgKGNvbG9yKSB7XG4gICAgcmV0dXJuIFtjb2xvcl07XG4gIH1cblxuICBpZiAoY29sb3JzKSB7XG4gICAgY29sb3JzID0gY29sb3JzLm1hcChmdW5jdGlvbiAoY29sb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShjb2xvcikpIHtcbiAgICAgICAgcmV0dXJuIGNzczJhcnJheShjb2xvcik7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29sb3I7XG4gICAgfSk7XG4gICAgcmV0dXJuIGNvbG9ycztcbiAgfVxuXG4gIGlmIChyYW5kb21Db2xvcnMpIHtcbiAgICBjb2xvcnMgPSBuZXcgQXJyYXkobnVtYmVyQ29sb3JzKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IG51bWJlckNvbG9yczsgaSsrKSB7XG4gICAgICBjb2xvcnNbaV0gPSBnZXRSYW5kb21Db2xvcigpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBnZXREaXN0aW5jdENvbG9ycyhudW1iZXJDb2xvcnMpO1xufVxuIiwiaW1wb3J0IHsgY3NzMmFycmF5IH0gZnJvbSAnLi4vLi4vdXRpbC9jb2xvcic7XG5pbXBvcnQgeyBSR0IgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbi8qKlxuICogUGFpbnQgYSBtYXNrIG9yIG1hc2tzIG9uIHRoZSBjdXJyZW50IGltYWdlLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59ICAgICAgIFtsYWJlbHNdIC0gQXJyYXkgb2YgbGFiZWxzIHRvIGRpc3BsYXkuIFNob3VsZCB0aGUgdGhlIHNhbWUgc2l6ZSBhcyBtYXNrcy5cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk+fSAgICAgICAgW3Bvc2l0aW9uc10gLSBBcnJheSBvZiBsYWJlbHMgdG8gZGlzcGxheS4gU2hvdWxkIHRoZSB0aGUgc2FtZSBzaXplIGFzIG1hc2tzLlxuICogQHBhcmFtIHtvYmplY3R9ICAgICAgICAgICAgICBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyW118c3RyaW5nfSAgICAgW29wdGlvbnMuY29sb3I9J3JlZCddIC0gQXJyYXkgb2YgMyBlbGVtZW50cyAoUiwgRywgQikgb3IgYSB2YWxpZCBjc3MgY29sb3IuXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fEFycmF5PHN0cmluZz59IFtvcHRpb25zLmNvbG9yc10gLSBBcnJheSBvZiBBcnJheSBvZiAzIGVsZW1lbnRzIChSLCBHLCBCKSBmb3IgZWFjaCBjb2xvciBvZiBlYWNoIG1hc2tcbiAqIEBwYXJhbSB7c3RyaW5nfEFycmF5PHN0cmluZz59IFtvcHRpb25zLmZvbnQ9JzEycHggSGVsdmV0aWNhJ10gLSBQYWludCB0aGUgbGFiZWxzIGluIGEgZGlmZmVyZW50IENTUyBzdHlsZVxuICogQHBhcmFtIHtudW1iZXJ8QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMucm90YXRlPTBdIC0gUm90YXRlIGVhY2ggbGFiZWwgb2YgYSBkZWZpbmUgYW5nbGVcbiAqIEByZXR1cm4ge3RoaXN9IFRoZSBvcmlnaW5hbCBwYWludGVkIGltYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhaW50TGFiZWxzKGxhYmVscywgcG9zaXRpb25zLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgY29sb3IgPSAnYmx1ZScsIGNvbG9ycywgZm9udCA9ICcxMnB4IEhlbHZldGljYScsIHJvdGF0ZSA9IDAgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdwYWludE1hc2tzJywge1xuICAgIGNoYW5uZWxzOiBbMywgNF0sXG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gICAgY29sb3JNb2RlbDogUkdCLFxuICB9KTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkobGFiZWxzKSkge1xuICAgIHRocm93IEVycm9yKCdwYWludExhYmVsczogbGFiZWxzIG11c3QgYmUgYW4gYXJyYXknKTtcbiAgfVxuXG4gIGlmICghQXJyYXkuaXNBcnJheShwb3NpdGlvbnMpKSB7XG4gICAgdGhyb3cgRXJyb3IoJ3BhaW50TGFiZWxzOiBwb3NpdGlvbnMgbXVzdCBiZSBhbiBhcnJheScpO1xuICB9XG5cbiAgaWYgKGNvbG9yICYmICFBcnJheS5pc0FycmF5KGNvbG9yKSkge1xuICAgIGNvbG9yID0gY3NzMmFycmF5KGNvbG9yKTtcbiAgfVxuXG4gIGlmIChjb2xvcnMpIHtcbiAgICBjb2xvcnMgPSBjb2xvcnMubWFwKGZ1bmN0aW9uIChjb2xvcikge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGNvbG9yKSkge1xuICAgICAgICByZXR1cm4gY3NzMmFycmF5KGNvbG9yKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBjb2xvcjtcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBjb2xvcnMgPSBbY29sb3JdO1xuICB9XG5cbiAgaWYgKGxhYmVscy5sZW5ndGggIT09IHBvc2l0aW9ucy5sZW5ndGgpIHtcbiAgICB0aHJvdyBFcnJvcihcbiAgICAgICdwYWludExhYmVsczogcG9zaXRpb25zIGFuZCBsYWJlbHMgbXVzdCBiZSBhcnJheXMgZnJvbSB0aGUgc2FtZSBzaXplJyxcbiAgICApO1xuICB9XG5cbiAgLy8gV2UgY29udmVydCBldmVyeXRoaW5nIHRvIGFycmF5IHNvIHRoYXQgd2UgY2FuIHNpbXBseSBsb29wIHRob3VyZ2ggYWxsIHRoZSBsYWJlbHNcbiAgaWYgKCFBcnJheS5pc0FycmF5KGZvbnQpKSBmb250ID0gW2ZvbnRdO1xuICBpZiAoIUFycmF5LmlzQXJyYXkocm90YXRlKSkgcm90YXRlID0gW3JvdGF0ZV07XG5cbiAgbGV0IGNhbnZhcyA9IHRoaXMuZ2V0Q2FudmFzKCk7XG4gIGxldCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYWJlbHMubGVuZ3RoOyBpKyspIHtcbiAgICBjdHguc2F2ZSgpO1xuICAgIGxldCBjb2xvciA9IGNvbG9yc1tpICUgY29sb3JzLmxlbmd0aF07XG4gICAgY3R4LmZpbGxTdHlsZSA9IGByZ2JhKCR7Y29sb3JbMF19LCR7Y29sb3JbMV19LCR7Y29sb3JbMl19LCR7XG4gICAgICBjb2xvclszXSAvIHRoaXMubWF4VmFsdWVcbiAgICB9KWA7XG4gICAgY3R4LmZvbnQgPSBmb250W2kgJSBmb250Lmxlbmd0aF07XG4gICAgbGV0IHBvc2l0aW9uID0gcG9zaXRpb25zW2ldO1xuICAgIGN0eC50cmFuc2xhdGUocG9zaXRpb25bMF0sIHBvc2l0aW9uWzFdKTtcbiAgICBjdHgucm90YXRlKChyb3RhdGVbaSAlIHJvdGF0ZS5sZW5ndGhdIC8gMTgwKSAqIE1hdGguUEkpO1xuICAgIGN0eC5maWxsVGV4dChsYWJlbHNbaV0sIDAsIDApO1xuICAgIGN0eC5yZXN0b3JlKCk7XG4gIH1cbiAgdGhpcy5kYXRhID0gVWludDhBcnJheS5mcm9tKFxuICAgIGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgdGhpcy53aWR0aCwgdGhpcy5oZWlnaHQpLmRhdGEsXG4gICk7XG5cbiAgcmV0dXJuIHRoaXM7XG59XG4iLCJpbXBvcnQgeyBnZXRDb2xvcnMgfSBmcm9tICcuLi8uLi91dGlsL2NvbG9yJztcbmltcG9ydCB7IFJHQiB9IGZyb20gJy4uL21vZGVsL21vZGVsJztcblxuLyoqXG4gKiBQYWludCBhIG1hc2sgb3IgbWFza3Mgb24gdGhlIGN1cnJlbnQgaW1hZ2UuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHsoSW1hZ2V8QXJyYXk8SW1hZ2U+KX0gICAgIG1hc2tzIC0gSW1hZ2UgY29udGFpbmluZyBhIGJpbmFyeSBtYXNrXG4gKiBAcGFyYW0ge29iamVjdH0gICAgICAgICAgICAgIFtvcHRpb25zXVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fHN0cmluZ30gICAgIFtvcHRpb25zLmNvbG9yXSAtIEFycmF5IG9mIDMgZWxlbWVudHMgKFIsIEcsIEIpIG9yIGEgdmFsaWQgY3NzIGNvbG9yLlxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+PnxBcnJheTxzdHJpbmc+fSBbb3B0aW9ucy5jb2xvcnNdIC0gQXJyYXkgb2YgQXJyYXkgb2YgMyBlbGVtZW50cyAoUiwgRywgQikgZm9yIGVhY2ggY29sb3Igb2YgZWFjaCBtYXNrXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgIFtvcHRpb25zLnJhbmRvbUNvbG9ycz10cnVlXSAtIFRvIHBhaW50IGVhY2ggbWFzayB3aXRoIGEgcmFuZG9tIGNvbG9yIGlmIGNvbG9yIGFuZCBjb2xvcnMgYXJlIHVuZGVmaW5lZFxuICogQHBhcmFtIHtib29sZWFufSAgICAgICAgICAgICBbb3B0aW9ucy5kaXN0aW5jdENvbG9ycz1mYWxzZV0gLSBUbyBwYWludCBlYWNoIG1hc2sgd2l0aCBhIGRpZmZlcmVudCBjb2xvciBpZiBjb2xvciBhbmQgY29sb3JzIGFyZSB1bmRlZmluZWRcbiAqIEBwYXJhbSB7bnVtYmVyfSAgICAgICAgICAgICAgW29wdGlvbnMuYWxwaGE9MjU1XSAtIFZhbHVlIGZyb20gMCB0byAyNTUgdG8gc3BlY2lmeSB0aGUgYWxwaGEuXG4gKiBAcGFyYW0ge0FycmF5PHN0cmluZz59ICAgICAgIFtvcHRpb25zLmxhYmVsc10gLSBBcnJheSBvZiBsYWJlbHMgdG8gZGlzcGxheS4gU2hvdWxkIHRoZSB0aGUgc2FtZSBzaXplIGFzIG1hc2tzLlxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gW29wdGlvbnMubGFiZWxzUG9zaXRpb25dIC0gQXJyYXkgb2YgcG9pbnRzIFt4LHldIHdoZXJlIHRoZSBsYWJlbHMgc2hvdWxkIGJlIGRpc3BsYXllZC5cbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBCeSBkZWZhdWx0IGl0IGlzIHRoZSAwLDAgcG9zaXRpb24gb2YgdGhlIGNvcnJlZXNwb25kaW5nIG1hc2suXG4gKiBAcGFyYW0ge3N0cmluZ30gICAgICAgICAgICAgIFtvcHRpb25zLmxhYmVsQ29sb3I9J2JsdWUnXSAtIERlZmluZSB0aGUgY29sb3IgdG8gcGFpbnQgdGhlIGxhYmVsc1xuICogQHBhcmFtIHtzdHJpbmd9ICAgICAgICAgICAgICBbb3B0aW9ucy5sYWJlbEZvbnQ9JzEycHggSGVsdmV0aWNhJ10gLSBQYWludCB0aGUgbGFiZWxzIGluIGEgZGlmZmVyZW50IENTUyBzdHlsZVxuICogQHJldHVybiB7dGhpc30gVGhlIG9yaWdpbmFsIHBhaW50ZWQgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFpbnRNYXNrcyhtYXNrcywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7XG4gICAgYWxwaGEgPSAyNTUsXG4gICAgbGFiZWxzID0gW10sXG4gICAgbGFiZWxzUG9zaXRpb24gPSBbXSxcbiAgICBsYWJlbENvbG9yID0gJ2JsdWUnLFxuICAgIGxhYmVsRm9udCA9ICcxMnB4IEhlbHZldGljYScsXG4gIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgncGFpbnRNYXNrcycsIHtcbiAgICBjaGFubmVsczogWzMsIDRdLFxuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNvbG9yTW9kZWw6IFJHQixcbiAgfSk7XG5cbiAgbGV0IGNvbG9ycyA9IGdldENvbG9ycyhcbiAgICBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IG51bWJlckNvbG9yczogbWFza3MubGVuZ3RoIH0pLFxuICApO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShtYXNrcykpIHtcbiAgICBtYXNrcyA9IFttYXNrc107XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IG1hc2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IG1hc2sgPSBtYXNrc1tpXTtcbiAgICAvLyB3ZSBuZWVkIHRvIGZpbmQgdGhlIHBhcmVudCBpbWFnZSB0byBjYWxjdWxhdGUgdGhlIHJlbGF0aXZlIHBvc2l0aW9uXG4gICAgbGV0IGNvbG9yID0gY29sb3JzW2kgJSBjb2xvcnMubGVuZ3RoXTtcbiAgICBmb3IgKGxldCB4ID0gMDsgeCA8IG1hc2sud2lkdGg7IHgrKykge1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCBtYXNrLmhlaWdodDsgeSsrKSB7XG4gICAgICAgIGlmIChtYXNrLmdldEJpdFhZKHgsIHkpKSB7XG4gICAgICAgICAgZm9yIChcbiAgICAgICAgICAgIGxldCBjb21wb25lbnQgPSAwO1xuICAgICAgICAgICAgY29tcG9uZW50IDwgTWF0aC5taW4odGhpcy5jb21wb25lbnRzLCBjb2xvci5sZW5ndGgpO1xuICAgICAgICAgICAgY29tcG9uZW50KytcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChhbHBoYSA9PT0gMjU1KSB7XG4gICAgICAgICAgICAgIHRoaXMuc2V0VmFsdWVYWShcbiAgICAgICAgICAgICAgICB4ICsgbWFzay5wb3NpdGlvblswXSxcbiAgICAgICAgICAgICAgICB5ICsgbWFzay5wb3NpdGlvblsxXSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQsXG4gICAgICAgICAgICAgICAgY29sb3JbY29tcG9uZW50XSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGxldCB2YWx1ZSA9IHRoaXMuZ2V0VmFsdWVYWShcbiAgICAgICAgICAgICAgICB4ICsgbWFzay5wb3NpdGlvblswXSxcbiAgICAgICAgICAgICAgICB5ICsgbWFzay5wb3NpdGlvblsxXSxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIHZhbHVlID0gTWF0aC5yb3VuZChcbiAgICAgICAgICAgICAgICAodmFsdWUgKiAoMjU1IC0gYWxwaGEpICsgY29sb3JbY29tcG9uZW50XSAqIGFscGhhKSAvIDI1NSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgdGhpcy5zZXRWYWx1ZVhZKFxuICAgICAgICAgICAgICAgIHggKyBtYXNrLnBvc2l0aW9uWzBdLFxuICAgICAgICAgICAgICAgIHkgKyBtYXNrLnBvc2l0aW9uWzFdLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShsYWJlbHMpICYmIGxhYmVscy5sZW5ndGggPiAwKSB7XG4gICAgbGV0IGNhbnZhcyA9IHRoaXMuZ2V0Q2FudmFzKCk7XG4gICAgbGV0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGN0eC5maWxsU3R5bGUgPSBsYWJlbENvbG9yO1xuICAgIGN0eC5mb250ID0gbGFiZWxGb250O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4obWFza3MubGVuZ3RoLCBsYWJlbHMubGVuZ3RoKTsgaSsrKSB7XG4gICAgICBsZXQgcG9zaXRpb24gPSBsYWJlbHNQb3NpdGlvbltpXSA/IGxhYmVsc1Bvc2l0aW9uW2ldIDogbWFza3NbaV0ucG9zaXRpb247XG4gICAgICBjdHguZmlsbFRleHQobGFiZWxzW2ldLCBwb3NpdGlvblswXSwgcG9zaXRpb25bMV0pO1xuICAgIH1cbiAgICB0aGlzLmRhdGEgPSBVaW50OEFycmF5LmZyb20oXG4gICAgICBjdHguZ2V0SW1hZ2VEYXRhKDAsIDAsIHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0KS5kYXRhLFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHplcm9zTWF0cml4KGhlaWdodCwgd2lkdGgpIHtcbiAgbGV0IG1hdHJpeCA9IG5ldyBBcnJheShoZWlnaHQpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhlaWdodDsgaSsrKSB7XG4gICAgbWF0cml4W2ldID0gbmV3IEFycmF5KHdpZHRoKS5maWxsKDApO1xuICB9XG4gIHJldHVybiBtYXRyaXg7XG59XG4iLCJpbXBvcnQgSW1hZ2UgZnJvbSAnLi4vaW1hZ2UvSW1hZ2UnO1xuaW1wb3J0IHsgQklOQVJZIH0gZnJvbSAnLi4vaW1hZ2UvY29yZS9raW5kTmFtZXMnO1xuXG5pbXBvcnQgemVyb3NNYXRyaXggZnJvbSAnLi96ZXJvc01hdHJpeCc7XG5cbmNvbnN0IGNyb3NzID0gW1xuICBbMCwgMCwgMSwgMCwgMF0sXG4gIFswLCAwLCAxLCAwLCAwXSxcbiAgWzEsIDEsIDEsIDEsIDFdLFxuICBbMCwgMCwgMSwgMCwgMF0sXG4gIFswLCAwLCAxLCAwLCAwXSxcbl07XG5cbmNvbnN0IHNtYWxsQ3Jvc3MgPSBbXG4gIFswLCAxLCAwXSxcbiAgWzEsIDEsIDFdLFxuICBbMCwgMSwgMF0sXG5dO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhIHNoYXBlXG4gKiBAY2xhc3MgU2hhcGVcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5raW5kPSdjcm9zcyddIC0gUHJlZGVmaW5lZCBtYXRyaXggc2hhcGUsICdjcm9zcycgb3IgJ3NtYWxsQ3Jvc3MnXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc2hhcGVdIC0gVmFsdWUgbWF5IGJlICdzcXVhcmUnLCAncmVjdGFuZ2xlJywgJ2NpcmNsZScsICdlbGxpcHNlJyBvciAndHJpYW5nbGUnXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaGUgc2l6ZSBvZiB0aGUgc2hhcGUgd2lsbCBiZSBkZXRlcm1pbmVkIGJ5IHRoZSBzaXplLCB3aWR0aCBhbmQgaGVpZ2h0LlxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQSBTaGFwZSBpcyBieSBkZWZhdWx0IGZpbGxlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5zaXplXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLndpZHRoPW9wdGlvbnMuc2l6ZV0gLSB3aWR0aCBvZiB0aGUgc2hhcGUuIE11c3QgYmUgb2RkLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmhlaWdodD1vcHRpb25zLnNpemVdIC0gd2lkdGggb2YgdGhlIHNoYXBlLiBNdXN0IGJlIG9kZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuZmlsbGVkPXRydWVdIC0gSWYgZmFsc2Ugb25seSB0aGUgYm9yZGVyIG90IHRoZSBzaGFwZSBpcyB0YWtlbiBpbnRvIGFjY291bnQuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNoYXBlIHtcbiAgY29uc3RydWN0b3Iob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsga2luZCA9ICdjcm9zcycsIHNoYXBlLCBzaXplLCB3aWR0aCwgaGVpZ2h0LCBmaWxsZWQgPSB0cnVlIH0gPSBvcHRpb25zO1xuICAgIGlmIChzaXplKSB7XG4gICAgICB3aWR0aCA9IHNpemU7XG4gICAgICBoZWlnaHQgPSBzaXplO1xuICAgIH1cblxuICAgIGlmIChzaGFwZSkge1xuICAgICAgc3dpdGNoIChzaGFwZS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ3NxdWFyZSc6XG4gICAgICAgIGNhc2UgJ3JlY3RhbmdsZSc6XG4gICAgICAgICAgdGhpcy5tYXRyaXggPSByZWN0YW5nbGUod2lkdGgsIGhlaWdodCwgeyBmaWxsZWQgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgJ2NpcmNsZSc6XG4gICAgICAgIGNhc2UgJ2VsbGlwc2UnOlxuICAgICAgICAgIHRoaXMubWF0cml4ID0gZWxsaXBzZSh3aWR0aCwgaGVpZ2h0LCB7IGZpbGxlZCB9KTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgY2FzZSAndHJpYW5nbGUnOlxuICAgICAgICAgIHRoaXMubWF0cml4ID0gdHJpYW5nbGUod2lkdGgsIGhlaWdodCwgeyBmaWxsZWQgfSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaGFwZTogdW5leHBlY3RlZCBzaGFwZTogJHtzaGFwZX1gKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtpbmQpIHtcbiAgICAgIHN3aXRjaCAoa2luZC50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICAgIGNhc2UgJ2Nyb3NzJzpcbiAgICAgICAgICB0aGlzLm1hdHJpeCA9IGNyb3NzO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlICdzbWFsbGNyb3NzJzpcbiAgICAgICAgICB0aGlzLm1hdHJpeCA9IHNtYWxsQ3Jvc3M7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBTaGFwZTogdW5leHBlY3RlZCBraW5kOiAke2tpbmR9YCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2hhcGU6IGV4cGVjdGVkIGEga2luZCBvciBhIHNoYXBlIG9wdGlvbicpO1xuICAgIH1cbiAgICB0aGlzLmhlaWdodCA9IHRoaXMubWF0cml4Lmxlbmd0aDtcbiAgICB0aGlzLndpZHRoID0gdGhpcy5tYXRyaXhbMF0ubGVuZ3RoO1xuICAgIHRoaXMuaGFsZkhlaWdodCA9ICh0aGlzLmhlaWdodCAvIDIpID4+IDA7XG4gICAgdGhpcy5oYWxmV2lkdGggPSAodGhpcy53aWR0aCAvIDIpID4+IDA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBbeCx5XSBwb2ludHNcbiAgICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IC0gQXJyYXkgb2YgW3gseV0gcG9pbnRzXG4gICAqL1xuICBnZXRQb2ludHMoKSB7XG4gICAgbGV0IG1hdHJpeCA9IHRoaXMubWF0cml4O1xuICAgIGxldCBwb2ludHMgPSBbXTtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IG1hdHJpeC5sZW5ndGg7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCBtYXRyaXhbMF0ubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgaWYgKG1hdHJpeFt5XVt4XSkge1xuICAgICAgICAgIHBvaW50cy5wdXNoKFt4IC0gdGhpcy5oYWxmV2lkdGgsIHkgLSB0aGlzLmhhbGZIZWlnaHRdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcG9pbnRzO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBNYXNrICgxIGJpdCBJbWFnZSkgY29ycmVzcG9uZGluZyB0byB0aGlzIHNoYXBlLlxuICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICovXG4gIGdldE1hc2soKSB7XG4gICAgbGV0IGltZyA9IG5ldyBJbWFnZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwge1xuICAgICAga2luZDogQklOQVJZLFxuICAgIH0pO1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5tYXRyaXgubGVuZ3RoOyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5tYXRyaXhbMF0ubGVuZ3RoOyB4KyspIHtcbiAgICAgICAgaWYgKHRoaXMubWF0cml4W3ldW3hdKSB7XG4gICAgICAgICAgaW1nLnNldEJpdFhZKHgsIHkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpbWc7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVjdGFuZ2xlKHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcbiAgY29uc3QgbWF0cml4ID0gemVyb3NNYXRyaXgoaGVpZ2h0LCB3aWR0aCk7XG4gIGlmIChvcHRpb25zLmZpbGxlZCkge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBtYXRyaXhbeV1beF0gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCB5IG9mIFswLCBoZWlnaHQgLSAxXSkge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB3aWR0aDsgeCsrKSB7XG4gICAgICAgIG1hdHJpeFt5XVt4XSA9IDE7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggb2YgWzAsIHdpZHRoIC0gMV0pIHtcbiAgICAgICAgbWF0cml4W3ldW3hdID0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWF0cml4O1xufVxuXG5mdW5jdGlvbiBlbGxpcHNlKHdpZHRoLCBoZWlnaHQsIG9wdGlvbnMpIHtcbiAgY29uc3QgbWF0cml4ID0gemVyb3NNYXRyaXgoaGVpZ2h0LCB3aWR0aCwgb3B0aW9ucyk7XG4gIGxldCB5RXZlbiA9IDEgLSAoaGVpZ2h0ICUgMik7XG4gIGxldCB4RXZlbiA9IDEgLSAod2lkdGggJSAyKTtcbiAgbGV0IGEgPSBNYXRoLmZsb29yKCh3aWR0aCAtIDEpIC8gMik7IC8vIGhvcml6b250YWwgZWxsaXBzZSBheGVcbiAgbGV0IGIgPSBNYXRoLmZsb29yKChoZWlnaHQgLSAxKSAvIDIpOyAvLyB2ZXJ0aWNhbCBlbGxpcHNlIGF4ZVxuICBsZXQgYTIgPSBhICogYTtcbiAgbGV0IGIyID0gYiAqIGI7XG4gIGlmIChvcHRpb25zLmZpbGxlZCkge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDw9IGI7IHkrKykge1xuICAgICAgbGV0IHNoaWZ0ID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoYTIgLSAoYTIgKiB5ICogeSkgLyBiMikpO1xuICAgICAgZm9yIChsZXQgeCA9IGEgLSBzaGlmdDsgeCA8PSBhOyB4KyspIHtcbiAgICAgICAgbWF0cml4W2IgLSB5XVt4XSA9IDE7XG4gICAgICAgIG1hdHJpeFtiICsgeSArIHlFdmVuXVt4XSA9IDE7XG4gICAgICAgIG1hdHJpeFtiIC0geV1bd2lkdGggLSB4IC0gMV0gPSAxO1xuICAgICAgICBtYXRyaXhbYiArIHkgKyB5RXZlbl1bd2lkdGggLSB4IC0gMV0gPSAxO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8PSBiOyB5KyspIHtcbiAgICAgIGxldCBzaGlmdCA9IE1hdGguZmxvb3IoTWF0aC5zcXJ0KGEyIC0gKGEyICogeSAqIHkpIC8gYjIpKTtcbiAgICAgIGxldCB4ID0gYSAtIHNoaWZ0O1xuICAgICAgbWF0cml4W2IgLSB5XVt4XSA9IDE7XG4gICAgICBtYXRyaXhbYiArIHkgKyB5RXZlbl1beF0gPSAxO1xuICAgICAgbWF0cml4W2IgLSB5XVt3aWR0aCAtIHggLSAxXSA9IDE7XG4gICAgICBtYXRyaXhbYiArIHkgKyB5RXZlbl1bd2lkdGggLSB4IC0gMV0gPSAxO1xuICAgIH1cblxuICAgIGZvciAobGV0IHggPSAwOyB4IDw9IGE7IHgrKykge1xuICAgICAgbGV0IHNoaWZ0ID0gTWF0aC5mbG9vcihNYXRoLnNxcnQoYjIgLSAoYjIgKiB4ICogeCkgLyBhMikpO1xuICAgICAgbGV0IHkgPSBiIC0gc2hpZnQ7XG4gICAgICBtYXRyaXhbeV1bYSAtIHhdID0gMTtcbiAgICAgIG1hdHJpeFt5XVthICsgeCArIHhFdmVuXSA9IDE7XG4gICAgICBtYXRyaXhbaGVpZ2h0IC0geSAtIDFdW2EgLSB4XSA9IDE7XG4gICAgICBtYXRyaXhbaGVpZ2h0IC0geSAtIDFdW2EgKyB4ICsgeEV2ZW5dID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdHJpeDtcbn1cblxuZnVuY3Rpb24gdHJpYW5nbGUod2lkdGgsIGhlaWdodCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMuZmlsbGVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCdOb24gZmlsbGVkIHRyaWFuZ2xlIGlzIG5vdCBpbXBsZW1lbnRlZCcpO1xuICB9XG4gIGNvbnN0IG1hdHJpeCA9IHplcm9zTWF0cml4KGhlaWdodCwgd2lkdGgsIG9wdGlvbnMpO1xuICBmb3IgKGxldCB5ID0gMDsgeSA8IGhlaWdodDsgeSsrKSB7XG4gICAgbGV0IHNoaWZ0ID0gTWF0aC5mbG9vcigoKDEgLSB5IC8gaGVpZ2h0KSAqIHdpZHRoKSAvIDIpO1xuICAgIGZvciAobGV0IHggPSBzaGlmdDsgeCA8IHdpZHRoIC0gc2hpZnQ7IHgrKykge1xuICAgICAgbWF0cml4W3ldW3hdID0gMTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1hdHJpeDtcbn1cbiIsImltcG9ydCBTaGFwZSBmcm9tICcuLi8uLi91dGlsL1NoYXBlJztcbmltcG9ydCB7IGdldENvbG9ycyB9IGZyb20gJy4uLy4uL3V0aWwvY29sb3InO1xuXG4vKipcbiAqIFBhaW50IHBpeGVscyBvbiB0aGUgY3VycmVudCBpbWFnZS5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBwb2ludHMgLSBBcnJheSBvZiBbeCx5XSBwb2ludHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPnxzdHJpbmd9ICAgICBbb3B0aW9ucy5jb2xvcl0gLSBBcnJheSBvZiAzIGVsZW1lbnRzIChSLCBHLCBCKSBvciBhIHZhbGlkIGNzcyBjb2xvci5cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj58QXJyYXk8c3RyaW5nPn0gW29wdGlvbnMuY29sb3JzXSAtIEFycmF5IG9mIEFycmF5IG9mIDMgZWxlbWVudHMgKFIsIEcsIEIpIGZvciBlYWNoIGNvbG9yIG9mIGVhY2ggbWFza1xuICogQHBhcmFtIHtib29sZWFufSAgICAgICAgICAgICBbb3B0aW9ucy5yYW5kb21Db2xvcnM9dHJ1ZV0gLSBUbyBwYWludCBlYWNoIG1hc2sgd2l0aCBhIHJhbmRvbSBjb2xvciBpZiBjb2xvciBhbmQgY29sb3JzIGFyZSB1bmRlZmluZWRcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgW29wdGlvbnMuZGlzdGluY3RDb2xvcnM9ZmFsc2VdIC0gVG8gcGFpbnQgZWFjaCBtYXNrIHdpdGggYSBkaWZmZXJlbnQgY29sb3IgaWYgY29sb3IgYW5kIGNvbG9ycyBhcmUgdW5kZWZpbmVkXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMuc2hhcGVdIC0gRGVmaW5pdGlvbiBvZiB0aGUgc2hhcGUsIHNlZSBTaGFwZSBjb250cnVjdG9yLlxuICogQHJldHVybiB7dGhpc30gVGhlIG9yaWdpbmFsIHBhaW50ZWQgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFpbnRQb2ludHMocG9pbnRzLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgc2hhcGUgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdwYWludFBvaW50cycsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG5cbiAgbGV0IGNvbG9ycyA9IGdldENvbG9ycyhcbiAgICBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zLCB7IG51bWJlckNvbG9yczogcG9pbnRzLmxlbmd0aCB9KSxcbiAgKTtcblxuICBsZXQgc2hhcGVQaXhlbHMgPSBuZXcgU2hhcGUoc2hhcGUpLmdldFBvaW50cygpO1xuXG4gIGxldCBudW1iZXJDaGFubmVscyA9IE1hdGgubWluKHRoaXMuY2hhbm5lbHMsIGNvbG9yc1swXS5sZW5ndGgpO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGNvbG9yID0gY29sb3JzW2kgJSBjb2xvcnMubGVuZ3RoXTtcbiAgICBsZXQgeFAgPSBwb2ludHNbaV1bMF07XG4gICAgbGV0IHlQID0gcG9pbnRzW2ldWzFdO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgc2hhcGVQaXhlbHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCB4UyA9IHNoYXBlUGl4ZWxzW2pdWzBdO1xuICAgICAgbGV0IHlTID0gc2hhcGVQaXhlbHNbal1bMV07XG4gICAgICBpZiAoXG4gICAgICAgIHhQICsgeFMgPj0gMCAmJlxuICAgICAgICB5UCArIHlTID49IDAgJiZcbiAgICAgICAgeFAgKyB4UyA8IHRoaXMud2lkdGggJiZcbiAgICAgICAgeVAgKyB5UyA8IHRoaXMuaGVpZ2h0XG4gICAgICApIHtcbiAgICAgICAgbGV0IHBvc2l0aW9uID0gKHhQICsgeFMgKyAoeVAgKyB5UykgKiB0aGlzLndpZHRoKSAqIHRoaXMuY2hhbm5lbHM7XG4gICAgICAgIGZvciAobGV0IGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgbnVtYmVyQ2hhbm5lbHM7IGNoYW5uZWwrKykge1xuICAgICAgICAgIHRoaXMuZGF0YVtwb3NpdGlvbiArIGNoYW5uZWxdID0gY29sb3JbY2hhbm5lbF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsIi8qKlxuICogUGFpbnQgYSBwb2x5bGluZSBkZWZpbmVkIGJ5IGFuIGFycmF5IG9mIHBvaW50cy5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBwb2ludHMgLSBBcnJheSBvZiBbeCx5XSBwb2ludHNcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gW29wdGlvbnMuY29sb3I9W21heCwwLDBdXSAtIEFycmF5IG9mIDMgZWxlbWVudHMgKFIsIEcsIEIpLCBkZWZhdWx0IGlzIHJlZC5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMuY2xvc2VkPWZhbHNlXSAtIENsb3NlIHRoZSBwb2x5bGluZS5cbiAqIEByZXR1cm4ge3RoaXN9IFRoZSBvcmlnaW5hbCBwYWludGVkIGltYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhaW50UG9seWxpbmUocG9pbnRzLCBvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgY29sb3IgPSBbdGhpcy5tYXhWYWx1ZSwgMCwgMF0sIGNsb3NlZCA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgncGFpbnRQb2ludHMnLCB7XG4gICAgYml0RGVwdGg6IFsxLCA4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCBudW1iZXJDaGFubmVscyA9IE1hdGgubWluKHRoaXMuY2hhbm5lbHMsIGNvbG9yLmxlbmd0aCk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoIC0gMSArIGNsb3NlZDsgaSsrKSB7XG4gICAgbGV0IGZyb20gPSBwb2ludHNbaV07XG4gICAgbGV0IHRvID0gcG9pbnRzWyhpICsgMSkgJSBwb2ludHMubGVuZ3RoXTtcblxuICAgIGxldCBkeCA9IHRvWzBdIC0gZnJvbVswXTtcbiAgICBsZXQgZHkgPSB0b1sxXSAtIGZyb21bMV07XG4gICAgbGV0IHN0ZXBzID0gTWF0aC5tYXgoTWF0aC5hYnMoZHgpLCBNYXRoLmFicyhkeSkpO1xuXG4gICAgbGV0IHhJbmNyZW1lbnQgPSBkeCAvIHN0ZXBzO1xuICAgIGxldCB5SW5jcmVtZW50ID0gZHkgLyBzdGVwcztcblxuICAgIGxldCB4ID0gZnJvbVswXTtcbiAgICBsZXQgeSA9IGZyb21bMV07XG5cbiAgICBmb3IgKGxldCBqID0gMDsgaiA8PSBzdGVwczsgaisrKSB7XG4gICAgICBsZXQgeFBvaW50ID0gTWF0aC5yb3VuZCh4KTtcbiAgICAgIGxldCB5UG9pbnQgPSBNYXRoLnJvdW5kKHkpO1xuICAgICAgaWYgKFxuICAgICAgICB4UG9pbnQgPj0gMCAmJlxuICAgICAgICB5UG9pbnQgPj0gMCAmJlxuICAgICAgICB4UG9pbnQgPCB0aGlzLndpZHRoICYmXG4gICAgICAgIHlQb2ludCA8IHRoaXMuaGVpZ2h0XG4gICAgICApIHtcbiAgICAgICAgaWYgKHRoaXMuYml0RGVwdGggPT09IDEpIHtcbiAgICAgICAgICB0aGlzLnNldEJpdFhZKHhQb2ludCwgeVBvaW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsZXQgcG9zaXRpb24gPSAoeFBvaW50ICsgeVBvaW50ICogdGhpcy53aWR0aCkgKiB0aGlzLmNoYW5uZWxzO1xuICAgICAgICAgIGZvciAobGV0IGNoYW5uZWwgPSAwOyBjaGFubmVsIDwgbnVtYmVyQ2hhbm5lbHM7IGNoYW5uZWwrKykge1xuICAgICAgICAgICAgdGhpcy5kYXRhW3Bvc2l0aW9uICsgY2hhbm5lbF0gPSBjb2xvcltjaGFubmVsXTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgeCA9IHggKyB4SW5jcmVtZW50O1xuICAgICAgeSA9IHkgKyB5SW5jcmVtZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiaW1wb3J0IHsgZ2V0Q29sb3JzIH0gZnJvbSAnLi4vLi4vdXRpbC9jb2xvcic7XG5cbi8qKlxuICogUGFpbnQgcG9seWxpbmVzIG9uIHRoZSBjdXJyZW50IGltYWdlLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHBvbHlsaW5lcyAtIEFycmF5IG9mIGFycmF5IG9mIFt4LHldIHBvaW50c1xuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fHN0cmluZ30gICAgIFtvcHRpb25zLmNvbG9yXSAtIEFycmF5IG9mIDMgZWxlbWVudHMgKFIsIEcsIEIpIG9yIGEgdmFsaWQgY3NzIGNvbG9yLlxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+PnxBcnJheTxzdHJpbmc+fSBbb3B0aW9ucy5jb2xvcnNdIC0gQXJyYXkgb2YgQXJyYXkgb2YgMyBlbGVtZW50cyAoUiwgRywgQikgZm9yIGVhY2ggY29sb3Igb2YgZWFjaCBtYXNrXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgIFtvcHRpb25zLnJhbmRvbUNvbG9ycz10cnVlXSAtIFRvIHBhaW50IGVhY2ggbWFzayB3aXRoIGEgcmFuZG9tIGNvbG9yIGlmIGNvbG9yIGFuZCBjb2xvcnMgYXJlIHVuZGVmaW5lZFxuICogQHBhcmFtIHtib29sZWFufSAgICAgICAgICAgICBbb3B0aW9ucy5kaXN0aW5jdENvbG9ycz1mYWxzZV0gLSBUbyBwYWludCBlYWNoIG1hc2sgd2l0aCBhIGRpZmZlcmVudCBjb2xvciBpZiBjb2xvciBhbmQgY29sb3JzIGFyZSB1bmRlZmluZWRcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucy5zaGFwZV0gLSBEZWZpbml0aW9uIG9mIHRoZSBzaGFwZSwgc2VlIFNoYXBlIGNvbnRydWN0b3IuXG4gKiBAcmV0dXJuIHt0aGlzfSBUaGUgb3JpZ2luYWwgcGFpbnRlZCBpbWFnZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYWludFBvbHlsaW5lcyhwb2x5bGluZXMsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgb3B0aW9uc0NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3BhaW50UG9seWxpbmVzJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICB9KTtcblxuICBsZXQgY29sb3JzID0gZ2V0Q29sb3JzKFxuICAgIE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMsIHsgbnVtYmVyQ29sb3JzOiBwb2x5bGluZXMubGVuZ3RoIH0pLFxuICApO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9seWxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgb3B0aW9uc0NvcHkuY29sb3IgPSBjb2xvcnNbaSAlIGNvbG9ycy5sZW5ndGhdO1xuICAgIHRoaXMucGFpbnRQb2x5bGluZShwb2x5bGluZXNbaV0sIG9wdGlvbnNDb3B5KTtcbiAgfVxuXG4gIHJldHVybiB0aGlzO1xufVxuIiwiLyoqXG4gKiBQYWludCBhIHBvbHlnb24gZGVmaW5lZCBieSBhbiBhcnJheSBvZiBwb2ludHMuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gcG9pbnRzIC0gQXJyYXkgb2YgW3gseV0gcG9pbnRzXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFtvcHRpb25zLmNvbG9yPVttYXgsMCwwXV0gLSBBcnJheSBvZiAzIGVsZW1lbnRzIChSLCBHLCBCKSwgZGVmYXVsdCBpcyByZWQuXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IFtvcHRpb25zLmZpbGxlZD1mYWxzZV0gLSBJZiB5b3Ugd2FudCB0aGUgcG9seWdvbiB0byBiZSBmaWxsZWQgb3Igbm90LlxuICogQHJldHVybiB7dGhpc30gVGhlIG9yaWdpbmFsIHBhaW50ZWQgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcGFpbnRQb2x5Z29uKHBvaW50cywgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGNvbG9yID0gW3RoaXMubWF4VmFsdWUsIDAsIDBdLCBmaWxsZWQgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3BhaW50UG9pbnRzJywge1xuICAgIGJpdERlcHRoOiBbMSwgOCwgMTZdLFxuICB9KTtcblxuICBvcHRpb25zLmNsb3NlZCA9IHRydWU7XG5cbiAgbGV0IGZpbHRlcmVkUG9pbnRzID0gZGVsZXRlRG91YmxlKHBvaW50cyk7XG4gIGlmIChmaWxsZWQgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIHRoaXMucGFpbnRQb2x5bGluZShwb2ludHMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIGxldCBtYXRyaXhCaW5hcnkgPSBBcnJheSh0aGlzLmhlaWdodCk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSsrKSB7XG4gICAgICBtYXRyaXhCaW5hcnlbaV0gPSBbXTtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy53aWR0aDsgaisrKSB7XG4gICAgICAgIG1hdHJpeEJpbmFyeVtpXS5wdXNoKDApO1xuICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBwID0gMDsgcCA8IGZpbHRlcmVkUG9pbnRzLmxlbmd0aDsgcCsrKSB7XG4gICAgICBjb25zdCBsaW5lID0gbGluZUJldHdlZW5Ud29Qb2ludHMoXG4gICAgICAgIGZpbHRlcmVkUG9pbnRzW3BdLFxuICAgICAgICBmaWx0ZXJlZFBvaW50c1socCArIDEpICUgZmlsdGVyZWRQb2ludHMubGVuZ3RoXSxcbiAgICAgICk7XG4gICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgICBpZiAoaXNBdFRoZVJpZ2h0T2ZUaGVMaW5lKHgsIHksIGxpbmUsIHRoaXMuaGVpZ2h0KSkge1xuICAgICAgICAgICAgbWF0cml4QmluYXJ5W3ldW3hdID0gbWF0cml4QmluYXJ5W3ldW3hdID09PSAwID8gMSA6IDA7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgaWYgKG1hdHJpeEJpbmFyeVt5XVt4XSA9PT0gMSkge1xuICAgICAgICAgIGlmICh0aGlzLmJpdERlcHRoID09PSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNldEJpdFhZKHgsIHkpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgbnVtYmVyQ2hhbm5lbHMgPSBNYXRoLm1pbih0aGlzLmNoYW5uZWxzLCBjb2xvci5sZW5ndGgpO1xuICAgICAgICAgICAgbGV0IHBvc2l0aW9uID0gKHggKyB5ICogdGhpcy53aWR0aCkgKiB0aGlzLmNoYW5uZWxzO1xuICAgICAgICAgICAgZm9yIChsZXQgY2hhbm5lbCA9IDA7IGNoYW5uZWwgPCBudW1iZXJDaGFubmVsczsgY2hhbm5lbCsrKSB7XG4gICAgICAgICAgICAgIHRoaXMuZGF0YVtwb3NpdGlvbiArIGNoYW5uZWxdID0gY29sb3JbY2hhbm5lbF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLnBhaW50UG9seWxpbmUocG9pbnRzLCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBkZWxldGVEb3VibGUocG9pbnRzKSB7XG4gIGxldCBmaW5hbFBvaW50cyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGlmIChcbiAgICAgIHBvaW50c1tpXVswXSA9PT0gcG9pbnRzWyhpICsgMSkgJSBwb2ludHMubGVuZ3RoXVswXSAmJlxuICAgICAgcG9pbnRzW2ldWzFdID09PSBwb2ludHNbKGkgKyAxKSAlIHBvaW50cy5sZW5ndGhdWzFdXG4gICAgKSB7XG4gICAgICBjb250aW51ZTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgcG9pbnRzW2ldWzBdID09PSBwb2ludHNbKGkgLSAxICsgcG9pbnRzLmxlbmd0aCkgJSBwb2ludHMubGVuZ3RoXVswXSAmJlxuICAgICAgcG9pbnRzW2ldWzFdID09PSBwb2ludHNbKGkgLSAxICsgcG9pbnRzLmxlbmd0aCkgJSBwb2ludHMubGVuZ3RoXVsxXVxuICAgICkge1xuICAgICAgY29udGludWU7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHBvaW50c1soaSArIDEpICUgcG9pbnRzLmxlbmd0aF1bMF0gPT09XG4gICAgICAgIHBvaW50c1soaSAtIDEgKyBwb2ludHMubGVuZ3RoKSAlIHBvaW50cy5sZW5ndGhdWzBdICYmXG4gICAgICBwb2ludHNbKGkgLSAxICsgcG9pbnRzLmxlbmd0aCkgJSBwb2ludHMubGVuZ3RoXVsxXSA9PT1cbiAgICAgICAgcG9pbnRzWyhpICsgMSkgJSBwb2ludHMubGVuZ3RoXVsxXVxuICAgICkge1xuICAgICAgY29udGludWU7IC8vIHdlIGRvbid0IGNvbnNpZGVyIHRoaXMgcG9pbnQgb25seVxuICAgIH0gZWxzZSB7XG4gICAgICBmaW5hbFBvaW50cy5wdXNoKHBvaW50c1tpXSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBmaW5hbFBvaW50cztcbn1cblxuZnVuY3Rpb24gbGluZUJldHdlZW5Ud29Qb2ludHMocDEsIHAyKSB7XG4gIGlmIChwMVswXSA9PT0gcDJbMF0pIHtcbiAgICByZXR1cm4geyBhOiAwLCBiOiBwMVswXSwgdmVydGljYWw6IHRydWUgfTsgLy8gd2Ugc3RvcmUgdGhlIHggb2YgdGhlIHZlcnRpY2FsIGxpbmUgaW50byBiXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29lZmZBID0gKHAyWzFdIC0gcDFbMV0pIC8gKHAyWzBdIC0gcDFbMF0pO1xuICAgIGNvbnN0IGNvZWZmQiA9IHAxWzFdIC0gY29lZmZBICogcDFbMF07XG4gICAgcmV0dXJuIHsgYTogY29lZmZBLCBiOiBjb2VmZkIsIHZlcnRpY2FsOiBmYWxzZSB9O1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzQXRUaGVSaWdodE9mVGhlTGluZSh4LCB5LCBsaW5lLCBoZWlnaHQpIHtcbiAgaWYgKGxpbmUudmVydGljYWwgPT09IHRydWUpIHtcbiAgICByZXR1cm4gbGluZS5iIDw9IHg7XG4gIH0gZWxzZSB7XG4gICAgaWYgKGxpbmUuYSA9PT0gMCkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB4bGluZSA9ICh5IC0gbGluZS5iKSAvIGxpbmUuYTtcbiAgICAgIHJldHVybiB4bGluZSA8IHggJiYgeGxpbmUgPj0gMCAmJiB4bGluZSA8PSBoZWlnaHQ7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBnZXRDb2xvcnMgfSBmcm9tICcuLi8uLi91dGlsL2NvbG9yJztcblxuLyoqXG4gKiBQYWludCBhbiBhcnJheSBvZiBwb2x5Z29uIG9uIHRoZSBjdXJyZW50IGltYWdlLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHBvbHlnb25zIC0gQXJyYXkgb2YgYXJyYXkgb2YgW3gseV0gcG9pbnRzXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj58c3RyaW5nfSAgICAgW29wdGlvbnMuY29sb3JdIC0gQXJyYXkgb2YgMyBlbGVtZW50cyAoUiwgRywgQikgb3IgYSB2YWxpZCBjc3MgY29sb3IuXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fEFycmF5PHN0cmluZz59IFtvcHRpb25zLmNvbG9yc10gLSBBcnJheSBvZiBBcnJheSBvZiAzIGVsZW1lbnRzIChSLCBHLCBCKSBmb3IgZWFjaCBjb2xvciBvZiBlYWNoIG1hc2tcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gICAgICAgICAgICAgW29wdGlvbnMucmFuZG9tQ29sb3JzPXRydWVdIC0gVG8gcGFpbnQgZWFjaCBtYXNrIHdpdGggYSByYW5kb20gY29sb3IgaWYgY29sb3IgYW5kIGNvbG9ycyBhcmUgdW5kZWZpbmVkXG4gKiBAcGFyYW0ge2Jvb2xlYW59ICAgICAgICAgICAgIFtvcHRpb25zLmRpc3RpbmN0Q29sb3JzPWZhbHNlXSAtIFRvIHBhaW50IGVhY2ggbWFzayB3aXRoIGEgZGlmZmVyZW50IGNvbG9yIGlmIGNvbG9yIGFuZCBjb2xvcnMgYXJlIHVuZGVmaW5lZFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zLnNoYXBlXSAtIERlZmluaXRpb24gb2YgdGhlIHNoYXBlLCBzZWUgU2hhcGUgY29udHJ1Y3Rvci5cbiAqIEByZXR1cm4ge3RoaXN9IFRoZSBvcmlnaW5hbCBwYWludGVkIGltYWdlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhaW50UG9seWdvbnMocG9seWdvbnMsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgb3B0aW9uc0NvcHkgPSBPYmplY3QuYXNzaWduKHt9LCBvcHRpb25zKTtcblxuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3BhaW50UG9seWdvbnMnLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCBjb2xvcnMgPSBnZXRDb2xvcnMoXG4gICAgT2JqZWN0LmFzc2lnbih7fSwgb3B0aW9ucywgeyBudW1iZXJDb2xvcnM6IHBvbHlnb25zLmxlbmd0aCB9KSxcbiAgKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvbHlnb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgb3B0aW9uc0NvcHkuY29sb3IgPSBjb2xvcnNbaSAlIGNvbG9ycy5sZW5ndGhdO1xuICAgIHRoaXMucGFpbnRQb2x5Z29uKHBvbHlnb25zW2ldLCBvcHRpb25zQ29weSk7XG4gIH1cblxuICByZXR1cm4gdGhpcztcbn1cbiIsImltcG9ydCBpc0ludGVnZXIgZnJvbSAnaXMtaW50ZWdlcic7XG5pbXBvcnQgbmV3QXJyYXkgZnJvbSAnbmV3LWFycmF5JztcblxuLyoqXG4gKiBSZXR1cm5zIGEgaGlzdG9ncmFtIGZvciB0aGUgc3BlY2lmaWVkIGNoYW5uZWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4U2xvdHM9MjU2XVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmNoYW5uZWxdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnVzZUFscGhhPXRydWVdXG4gKiBAcmV0dXJuIHtudW1iZXJbXX1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEhpc3RvZ3JhbShvcHRpb25zID0ge30pIHtcbiAgbGV0IHsgbWF4U2xvdHMgPSAyNTYsIGNoYW5uZWwsIHVzZUFscGhhID0gdHJ1ZSB9ID0gb3B0aW9ucztcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRIaXN0b2dyYW0nLCB7XG4gICAgYml0RGVwdGg6IFsxLCA4LCAxNl0sXG4gIH0pO1xuICBpZiAoY2hhbm5lbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50cyA+IDEpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFxuICAgICAgICAnWW91IG5lZWQgdG8gZGVmaW5lIHRoZSBjaGFubmVsIGZvciBhbiBpbWFnZSB0aGF0IGNvbnRhaW5zIG1vcmUgdGhhbiBvbmUgY2hhbm5lbCcsXG4gICAgICApO1xuICAgIH1cbiAgICBjaGFubmVsID0gMDtcbiAgfVxuICByZXR1cm4gZ2V0Q2hhbm5lbEhpc3RvZ3JhbS5jYWxsKHRoaXMsIGNoYW5uZWwsIHsgdXNlQWxwaGEsIG1heFNsb3RzIH0pO1xufVxuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgKG51bWJlciBvZiBjaGFubmVscykgb2YgYXJyYXkgKG51bWJlciBvZiBzbG90cykgY29udGFpbmluZ1xuICogdGhlIG51bWJlciBvZiBkYXRhIG9mIGEgc3BlY2lmaWMgaW50ZW5zaXR5LlxuICogSW50ZW5zaXR5IG1heSBiZSBncm91cGVkIGJ5IHRoZSBtYXhTbG90cyBwYXJhbWV0ZXIuXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFNsb3RzXSAtIE51bWJlciBvZiBzbG90cyBpbiB0aGUgcmVzdWx0aW5nXG4gKiAgICAgIGFycmF5LiBUaGUgaW50ZW5zaXR5IHdpbGwgYmUgZXZlbnRseSBkaXN0cmlidXRlZCBiZXR3ZWVuIDAgYW5kXG4gKiAgICAgIHRoZSBtYXhWYWx1ZSBhbGxvd2VkIGZvciB0aGlzIGltYWdlICgyNTUgZm9yIHVzdWFsIGltYWdlcykuXG4gKiAgICAgIElmIG1heFNsb3RzID0gOCwgYWxsIHRoZSBpbnRlbnNpdGllcyBiZXR3ZWVuIDAgYW5kIDMxIHdpbGwgYmVcbiAqICAgICAgcGxhY2VkIGluIHRoZSBzbG90IDAsIDMyIHRvIDYzIGluIHNsb3QgMSwgLi4uXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn1cbiAqIEBleGFtcGxlXG4gKiAgICAgIGltYWdlLmdldEhpc3RvZ3JhbXMoe1xuICogICAgICAgICAgbWF4U2xvdHM6IDgsXG4gKiAgICAgICAgICB1c2VBbHBoYTogZmFsc2VcbiAqICAgICAgfSk7XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRIaXN0b2dyYW1zKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IG1heFNsb3RzID0gMjU2LCB1c2VBbHBoYSA9IHRydWUgfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZ2V0SGlzdG9ncmFtcycsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgfSk7XG4gIGxldCByZXN1bHRzID0gbmV3IEFycmF5KHVzZUFscGhhID8gdGhpcy5jb21wb25lbnRzIDogdGhpcy5jaGFubmVscyk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcmVzdWx0cy5sZW5ndGg7IGkrKykge1xuICAgIHJlc3VsdHNbaV0gPSBnZXRDaGFubmVsSGlzdG9ncmFtLmNhbGwodGhpcywgaSwgeyB1c2VBbHBoYSwgbWF4U2xvdHMgfSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGdldENoYW5uZWxIaXN0b2dyYW0oY2hhbm5lbCwgb3B0aW9ucykge1xuICBsZXQgeyB1c2VBbHBoYSwgbWF4U2xvdHMgfSA9IG9wdGlvbnM7XG5cbiAgLy8gZm9yIGEgbWFzaywgcmV0dXJuIGEgbnVtYmVyIGFycmF5IGNvbnRhaW5pbmcgY291bnQgb2YgYmxhY2sgYW5kIHdoaXRlIHBvaW50cyAoYmxhY2sgPSBhcnJheVswXSwgd2hpdGUgPSBhcnJheVsxXSlcblxuICBpZiAodGhpcy5iaXREZXB0aCA9PT0gMSkge1xuICAgIGxldCBibGFja1doaXRlQ291bnQgPSBbMCwgMF07XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmhlaWdodDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMud2lkdGg7IGorKykge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmdldEJpdFhZKGksIGopO1xuICAgICAgICBpZiAodmFsdWUgPT09IDApIHtcbiAgICAgICAgICBibGFja1doaXRlQ291bnRbMF0gKz0gMTtcbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA9PT0gMSkge1xuICAgICAgICAgIGJsYWNrV2hpdGVDb3VudFsxXSArPSAxO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBibGFja1doaXRlQ291bnQ7XG4gIH1cblxuICBsZXQgYml0U2xvdHMgPSBNYXRoLmxvZzIobWF4U2xvdHMpO1xuICBpZiAoIWlzSW50ZWdlcihiaXRTbG90cykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICdtYXhTbG90cyBtdXN0IGJlIGEgcG93ZXIgb2YgMiwgZm9yIGV4YW1wbGU6IDY0LCAyNTYsIDEwMjQnLFxuICAgICk7XG4gIH1cbiAgLy8gd2Ugd2lsbCBjb21wYXJlIHRoZSBiaXRTbG90cyB0byB0aGUgYml0RGVwdGggb2YgdGhlIGltYWdlXG4gIC8vIGJhc2VkIG9uIHRoaXMgd2Ugd2lsbCBzaGlmdCB0aGUgdmFsdWVzLiBUaGlzIGFsbG93cyB0byBnZW5lcmF0ZSBhIGhpc3RvZ3JhbVxuICAvLyBvZiAxNiBncmV5IGV2ZW4gaWYgdGhlIGltYWdlcyBoYXMgMjU2IHNoYWRlIG9mIGdyZXlcblxuICBsZXQgYml0U2hpZnQgPSAwO1xuICBpZiAodGhpcy5iaXREZXB0aCA+IGJpdFNsb3RzKSB7XG4gICAgYml0U2hpZnQgPSB0aGlzLmJpdERlcHRoIC0gYml0U2xvdHM7XG4gIH1cblxuICBsZXQgZGF0YSA9IHRoaXMuZGF0YTtcbiAgbGV0IHJlc3VsdCA9IG5ld0FycmF5KE1hdGgucG93KDIsIE1hdGgubWluKHRoaXMuYml0RGVwdGgsIGJpdFNsb3RzKSksIDApO1xuICBpZiAodXNlQWxwaGEgJiYgdGhpcy5hbHBoYSkge1xuICAgIGxldCBhbHBoYUNoYW5uZWxEaWZmID0gdGhpcy5jaGFubmVscyAtIGNoYW5uZWwgLSAxO1xuXG4gICAgZm9yIChsZXQgaSA9IGNoYW5uZWw7IGkgPCBkYXRhLmxlbmd0aDsgaSArPSB0aGlzLmNoYW5uZWxzKSB7XG4gICAgICByZXN1bHRbZGF0YVtpXSA+PiBiaXRTaGlmdF0gKz0gZGF0YVtpICsgYWxwaGFDaGFubmVsRGlmZl0gLyB0aGlzLm1heFZhbHVlO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBmb3IgKGxldCBpID0gY2hhbm5lbDsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIHJlc3VsdFtkYXRhW2ldID4+IGJpdFNoaWZ0XSsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgbmV3QXJyYXkgZnJvbSAnbmV3LWFycmF5JztcblxuLyoqXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy51c2VBbHBoYT10cnVlXVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm5iU2xvdHM9NTEyXVxuICogQHJldHVybiB7bnVtYmVyW119XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldENvbG9ySGlzdG9ncmFtKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyB1c2VBbHBoYSA9IHRydWUsIG5iU2xvdHMgPSA1MTIgfSA9IG9wdGlvbnM7XG5cbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRDb2xvckhpc3RvZ3JhbScsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgICBjb21wb25lbnRzOiBbM10sXG4gIH0pO1xuXG4gIGxldCBuYlNsb3RzQ2hlY2sgPSBNYXRoLmxvZyhuYlNsb3RzKSAvIE1hdGgubG9nKDgpO1xuICBpZiAobmJTbG90c0NoZWNrICE9PSBNYXRoLmZsb29yKG5iU2xvdHNDaGVjaykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcbiAgICAgICduYlNsb3RzIG11c3QgYmUgYSBwb3dlciBvZiA4LiBVc3VhbGx5IDgsIDY0LCA1MTIgb3IgNDA5NicsXG4gICAgKTtcbiAgfVxuXG4gIGxldCBiaXRTaGlmdCA9IHRoaXMuYml0RGVwdGggLSBuYlNsb3RzQ2hlY2s7XG5cbiAgbGV0IGRhdGEgPSB0aGlzLmRhdGE7XG4gIGxldCByZXN1bHQgPSBuZXdBcnJheShNYXRoLnBvdyg4LCBuYlNsb3RzQ2hlY2spLCAwKTtcbiAgbGV0IGZhY3RvcjIgPSBNYXRoLnBvdygyLCBuYlNsb3RzQ2hlY2sgKiAyKTtcbiAgbGV0IGZhY3RvcjEgPSBNYXRoLnBvdygyLCBuYlNsb3RzQ2hlY2spO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgIGxldCBzbG90ID1cbiAgICAgIChkYXRhW2ldID4+IGJpdFNoaWZ0KSAqIGZhY3RvcjIgK1xuICAgICAgKGRhdGFbaSArIDFdID4+IGJpdFNoaWZ0KSAqIGZhY3RvcjEgK1xuICAgICAgKGRhdGFbaSArIDJdID4+IGJpdFNoaWZ0KTtcbiAgICBpZiAodXNlQWxwaGEgJiYgdGhpcy5hbHBoYSkge1xuICAgICAgcmVzdWx0W3Nsb3RdICs9IGRhdGFbaSArIHRoaXMuY2hhbm5lbHMgLSAxXSAvIHRoaXMubWF4VmFsdWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFtzbG90XSsrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG4iLCJpbXBvcnQgbmV3QXJyYXkgZnJvbSAnbmV3LWFycmF5JztcblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IHdpdGggdGhlIG1pbmltYWwgdmFsdWUgb2YgZWFjaCBjaGFubmVsXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7bnVtYmVyW119IEFycmF5IGhhdmluZyBoYXMgc2l6ZSB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbigpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdtaW4nLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNiwgMzJdLFxuICB9KTtcblxuICBsZXQgcmVzdWx0ID0gbmV3QXJyYXkodGhpcy5jaGFubmVscywgK0luZmluaXR5KTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jaGFubmVsczsgYysrKSB7XG4gICAgICBpZiAodGhpcy5kYXRhW2kgKyBjXSA8IHJlc3VsdFtjXSkge1xuICAgICAgICByZXN1bHRbY10gPSB0aGlzLmRhdGFbaSArIGNdO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiaW1wb3J0IG5ld0FycmF5IGZyb20gJ25ldy1hcnJheSc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBtYXhpbWFsIHZhbHVlIG9mIGVhY2ggY2hhbm5lbFxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge251bWJlcltdfSBBcnJheSBoYXZpbmcgaGFzIHNpemUgdGhlIG51bWJlciBvZiBjaGFubmVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYXgoKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnbWF4Jywge1xuICAgIGJpdERlcHRoOiBbOCwgMTYsIDMyXSxcbiAgfSk7XG5cbiAgbGV0IHJlc3VsdCA9IG5ld0FycmF5KHRoaXMuY2hhbm5lbHMsIC1JbmZpbml0eSk7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICBmb3IgKGxldCBjID0gMDsgYyA8IHRoaXMuY2hhbm5lbHM7IGMrKykge1xuICAgICAgaWYgKHRoaXMuZGF0YVtpICsgY10gPiByZXN1bHRbY10pIHtcbiAgICAgICAgcmVzdWx0W2NdID0gdGhpcy5kYXRhW2kgKyBjXTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBuZXdBcnJheSBmcm9tICduZXctYXJyYXknO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgc3VtIG9mIHRoZSB2YWx1ZXMgb2YgZWFjaCBjaGFubmVsXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7bnVtYmVyW119IEFycmF5IGhhdmluZyBoYXMgc2l6ZSB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN1bSgpIHtcbiAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdzdW0nLCB7XG4gICAgYml0RGVwdGg6IFs4LCAxNl0sXG4gIH0pO1xuXG4gIGxldCByZXN1bHQgPSBuZXdBcnJheSh0aGlzLmNoYW5uZWxzLCAwKTtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkgKz0gdGhpcy5jaGFubmVscykge1xuICAgIGZvciAobGV0IGMgPSAwOyBjIDwgdGhpcy5jaGFubmVsczsgYysrKSB7XG4gICAgICByZXN1bHRbY10gKz0gdGhpcy5kYXRhW2kgKyBjXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsIi8qKlxuICogUmV0dXJucyB0aGUgbW9tZW50IG9mIGFuIGltYWdlIChodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9JbWFnZV9tb21lbnQpXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtudW1iZXJ9IFt4UG93ZXI9MF1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbeVBvd2VyPTBdXG4gKiBAcmV0dXJuIHtudW1iZXJ9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldE1vbWVudCh4UG93ZXIgPSAwLCB5UG93ZXIgPSAwKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZ2V0TW9tZW50Jywge1xuICAgIGJpdERlcHRoOiBbMV0sXG4gIH0pO1xuXG4gIGxldCBtID0gMDtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgICAgaWYgKHRoaXMuZ2V0Qml0WFkoeCwgeSkgPT09IDEpIHtcbiAgICAgICAgbSArPSB4ICoqIHhQb3dlciAqIHkgKiogeVBvd2VyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbTtcbn1cbiIsIi8qKlxuICogUmV0dXJucyBhbiBhcnJheSBvZiBvYmplY3Qgd2l0aCBwb3NpdGlvbi5cbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5tYXNrXSAtIFJlZ2lvbiBvZiB0aGUgaW1hZ2UgdGhhdCBpcyBhbmFseXplZC4gVGhlIHJlc3QgaXMgb21pdHRlZC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5yZWdpb249M10gLSAgMSwgMiBvciAzLiBEZWZpbmUgdGhlIHJlZ2lvbiBhcm91bmQgZWFjaCBwb2ludHMgdGhhdCBpcyBhbmFseXplZC4gMSBjb3JyZXNwb25kcyB0byA0IGNyb3NzIHBvaW50cywgMiB0b1xuICogICAgICAgIHRoZSA4IHBvaW50cyBhcm91bmQgYW5kIDMgdG8gdGhlIDEyIHBvaW50cyBhcm91bmQgdGhlIGNlbnRyYWwgcGl4ZWwuXG4gKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucmVtb3ZlQ2xvc2VQb2ludHM9MF0gLSBSZW1vdmUgcHRzIHdoaWNoIGhhdmUgYSBkaXN0YW5jZSBiZXR3ZWVuIHRoZW0gc21hbGxlciB0aGFuIHRoaXMgcGFyYW0uXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmludmVydD1mYWxzZV0gLSBTZWFyY2ggZm9yIG1pbmltYSBpbnN0ZWFkIG9mIG1heGltYVxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heEVxdWFscz0yXSAtIE1heGltYWwgbnVtYmVyIG9mIHZhbHVlcyB0aGF0IG1heSBiZSBlcXVhbCB0byB0aGUgbWF4aW11bVxuICogQHJldHVybiB7bnVtYmVyW119IEFycmF5IHdob3NlIHNpemUgaXMgdGhlIG51bWJlciBvZiBjaGFubmVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2NhbE1heGltYShvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBtYXNrLFxuICAgIHJlZ2lvbiA9IDMsXG4gICAgcmVtb3ZlQ2xvc2VQb2ludHMgPSAwLFxuICAgIGludmVydCA9IGZhbHNlLFxuICAgIG1heEVxdWFscyA9IDIsXG4gIH0gPSBvcHRpb25zO1xuICBsZXQgaW1hZ2UgPSB0aGlzO1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2xvY2FsTWF4aW1hJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gIH0pO1xuICByZWdpb24gKj0gNDtcblxuICBsZXQgbWFza0V4cGVjdGVkVmFsdWUgPSBpbnZlcnQgPyAwIDogMTtcblxuICBsZXQgZHggPSBbKzEsIDAsIC0xLCAwLCArMSwgKzEsIC0xLCAtMSwgKzIsIDAsIC0yLCAwLCArMiwgKzIsIC0yLCAtMl07XG4gIGxldCBkeSA9IFswLCArMSwgMCwgLTEsICsxLCAtMSwgKzEsIC0xLCAwLCArMiwgMCwgLTIsICsyLCAtMiwgKzIsIC0yXTtcbiAgbGV0IHNoaWZ0ID0gcmVnaW9uIDw9IDggPyAxIDogMjtcbiAgbGV0IHBvaW50cyA9IFtdO1xuICBmb3IgKGxldCBjdXJyZW50WSA9IHNoaWZ0OyBjdXJyZW50WSA8IGltYWdlLmhlaWdodCAtIHNoaWZ0OyBjdXJyZW50WSsrKSB7XG4gICAgZm9yIChsZXQgY3VycmVudFggPSBzaGlmdDsgY3VycmVudFggPCBpbWFnZS53aWR0aCAtIHNoaWZ0OyBjdXJyZW50WCsrKSB7XG4gICAgICBpZiAobWFzayAmJiBtYXNrLmdldEJpdFhZKGN1cnJlbnRYLCBjdXJyZW50WSkgIT09IG1hc2tFeHBlY3RlZFZhbHVlKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgbGV0IGNvdW50ZXIgPSAwO1xuICAgICAgbGV0IG5iRXF1YWxzID0gMDtcbiAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBpbWFnZS5kYXRhW2N1cnJlbnRYICsgY3VycmVudFkgKiBpbWFnZS53aWR0aF07XG4gICAgICBmb3IgKGxldCBkaXIgPSAwOyBkaXIgPCByZWdpb247IGRpcisrKSB7XG4gICAgICAgIGlmIChpbnZlcnQpIHtcbiAgICAgICAgICAvLyB3ZSBzZWFyY2ggZm9yIG1pbmltYVxuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGltYWdlLmRhdGFbXG4gICAgICAgICAgICAgIGN1cnJlbnRYICsgZHhbZGlyXSArIChjdXJyZW50WSArIGR5W2Rpcl0pICogaW1hZ2Uud2lkdGhcbiAgICAgICAgICAgIF0gPiBjdXJyZW50VmFsdWVcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGNvdW50ZXIrKztcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgaW1hZ2UuZGF0YVtcbiAgICAgICAgICAgICAgY3VycmVudFggKyBkeFtkaXJdICsgKGN1cnJlbnRZICsgZHlbZGlyXSkgKiBpbWFnZS53aWR0aFxuICAgICAgICAgICAgXSA8IGN1cnJlbnRWYWx1ZVxuICAgICAgICAgICkge1xuICAgICAgICAgICAgY291bnRlcisrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgaW1hZ2UuZGF0YVtcbiAgICAgICAgICAgIGN1cnJlbnRYICsgZHhbZGlyXSArIChjdXJyZW50WSArIGR5W2Rpcl0pICogaW1hZ2Uud2lkdGhcbiAgICAgICAgICBdID09PSBjdXJyZW50VmFsdWVcbiAgICAgICAgKSB7XG4gICAgICAgICAgbmJFcXVhbHMrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvdW50ZXIgKyBuYkVxdWFscyA9PT0gcmVnaW9uICYmIG5iRXF1YWxzIDw9IG1heEVxdWFscykge1xuICAgICAgICBwb2ludHMucHVzaChbY3VycmVudFgsIGN1cnJlbnRZXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8vIFRPRE8gSG93IHRvIG1ha2UgYSBtb3JlIHBlcmZvcm1hbnQgYW5kIGdlbmVyYWwgd2F5XG4gIC8vIHdlIGRvbid0IGRlYWwgY29ycmVjdGx5IGhlcmUgd2l0aCBncm91cHMgb2YgcG9pbnRzIHRoYXQgc2hvdWxkIGJlIGdyb3VwZWQgaWYgYXQgdGhlXG4gIC8vIGJlZ2lubmluZyBvbmUgb2YgdGhlbSBpcyBjbG9zZXIgdG8gYW5vdGhlclxuICAvLyBTZWVtcyB0aGF0IHdlIHdvdWxkIGVuZWQgdG8gY2FsY3VsYXRlIGEgbWF0cml4IGFuZCB0aGVuIHNwbGl0IHRoaXMgbWF0cml4IGluICdpbmRlcGVuZGFudCBtYXRyaWNlcydcbiAgLy8gT3IgdG8gYXNzaWduIGEgY2x1c3RlciB0byBlYWNoIHBvaW50IGFuZCByZWdyb3VwIHRoZW0gaWYgMiBjbHVzdGVycyBhcmUgY2xvc2UgdG8gZWFjaCBvdGhlclxuICAvLyBsYXRlciBhcHByb2FjaCBzZWVtcyBtdWNoIGJldHRlclxuICBpZiAocmVtb3ZlQ2xvc2VQb2ludHMgPiAwKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgTWF0aC5zcXJ0KFxuICAgICAgICAgICAgTWF0aC5wb3cocG9pbnRzW2ldWzBdIC0gcG9pbnRzW2pdWzBdLCAyKSArXG4gICAgICAgICAgICAgIE1hdGgucG93KHBvaW50c1tpXVsxXSAtIHBvaW50c1tqXVsxXSwgMiksXG4gICAgICAgICAgKSA8IHJlbW92ZUNsb3NlUG9pbnRzXG4gICAgICAgICkge1xuICAgICAgICAgIHBvaW50c1tpXVswXSA9IChwb2ludHNbaV1bMF0gKyBwb2ludHNbal1bMF0pID4+IDE7XG4gICAgICAgICAgcG9pbnRzW2ldWzFdID0gKHBvaW50c1tpXVsxXSArIHBvaW50c1tqXVsxXSkgPj4gMTtcbiAgICAgICAgICBwb2ludHMuc3BsaWNlKGosIDEpO1xuICAgICAgICAgIGotLTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuIiwiaW1wb3J0IHsgbWVhbiBhcyBoaXN0b2dyYW1NZWFuIH0gZnJvbSAnLi4vLi4vdXRpbC9oaXN0b2dyYW0nO1xuXG4vKipcbiAqIFJldHVybnMgYW4gYXJyYXkgd2l0aCB0aGUgYXZlcmFnZSB2YWx1ZSBvZiBlYWNoIGNoYW5uZWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtudW1iZXJbXX0gQXJyYXkgaGF2aW5nIGhhcyBzaXplIHRoZSBudW1iZXIgb2YgY2hhbm5lbHNcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVhbigpIHtcbiAgbGV0IGhpc3RvZ3JhbXMgPSB0aGlzLmdldEhpc3RvZ3JhbXMoeyBtYXhTbG90czogdGhpcy5tYXhWYWx1ZSArIDEgfSk7XG4gIGxldCByZXN1bHQgPSBuZXcgQXJyYXkoaGlzdG9ncmFtcy5sZW5ndGgpO1xuICBmb3IgKGxldCBjID0gMDsgYyA8IGhpc3RvZ3JhbXMubGVuZ3RoOyBjKyspIHtcbiAgICBsZXQgaGlzdG9ncmFtID0gaGlzdG9ncmFtc1tjXTtcbiAgICByZXN1bHRbY10gPSBoaXN0b2dyYW1NZWFuKGhpc3RvZ3JhbSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCB7IG1lZGlhbiBhcyBoaXN0b2dyYW1NZWRpYW4gfSBmcm9tICcuLi8uLi91dGlsL2hpc3RvZ3JhbSc7XG5cbi8qKlxuICogUmV0dXJucyBhbiBhcnJheSB3aXRoIHRoZSBtZWRpYW4gdmFsdWUgb2YgZWFjaCBjaGFubmVsXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHJldHVybiB7bnVtYmVyW119IEFycmF5IGhhdmluZyBoYXMgc2l6ZSB0aGUgbnVtYmVyIG9mIGNoYW5uZWxzXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lZGlhbigpIHtcbiAgbGV0IGhpc3RvZ3JhbXMgPSB0aGlzLmdldEhpc3RvZ3JhbXMoeyBtYXhTbG90czogdGhpcy5tYXhWYWx1ZSArIDEgfSk7XG4gIGxldCByZXN1bHQgPSBuZXcgQXJyYXkoaGlzdG9ncmFtcy5sZW5ndGgpO1xuICBmb3IgKGxldCBjID0gMDsgYyA8IGhpc3RvZ3JhbXMubGVuZ3RoOyBjKyspIHtcbiAgICBsZXQgaGlzdG9ncmFtID0gaGlzdG9ncmFtc1tjXTtcbiAgICByZXN1bHRbY10gPSBoaXN0b2dyYW1NZWRpYW4oaGlzdG9ncmFtKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuIiwiLyoqXG4gKiBBbGxvd3MgdG8gZ2VuZXJhdGUgYW4gYXJyYXkgb2YgcG9pbnRzIGZvciBhIGJpbmFyeSBpbWFnZSAoYml0IGRlcHRoID0gMSlcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gLSBhbiBhcnJheSBvZiBbeCx5XSBjb3JyZXNwb25kaW5nIHRvIHRoZSBzZXQgcGl4ZWxzIGluIHRoZSBiaW5hcnkgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcG9pbnRzKCkge1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ3BvaW50cycsIHtcbiAgICBiaXREZXB0aDogWzFdLFxuICB9KTtcblxuICBjb25zdCBwaXhlbHMgPSBbXTtcbiAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGlmICh0aGlzLmdldEJpdFhZKHgsIHkpID09PSAxKSB7XG4gICAgICAgIHBpeGVscy5wdXNoKFt4LCB5XSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBwaXhlbHM7XG59XG4iLCIvKipcbiAqIEFsbG93cyB0byBnZW5lcmF0ZSBhbiBhcnJheSBvZiBwb2ludHMgZm9yIGEgYmluYXJ5IGltYWdlIChiaXQgZGVwdGggPSAxKVxuICogVGhlIHBvaW50cyBjb25zaWRlciB0aGUgYmVnaW5uaW5nIGFuZCB0aGUgZW5kIG9mIGVhY2ggcGl4ZWxcbiAqIEBtZW1iZXJvZiBJbWFnZVxuICogQGluc3RhbmNlXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gLSBhbiBhcnJheSBvZiBbeCx5XSBjb3JyZXNwb25kaW5nIHRvIHRoZSBzZXQgcGl4ZWxzIGluIHRoZSBiaW5hcnkgaW1hZ2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZXh0ZW5kZWRQb2ludHMoKSB7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZXh0ZW5kZWRQb2ludHMnLCB7XG4gICAgYml0RGVwdGg6IFsxXSxcbiAgfSk7XG5cbiAgY29uc3QgcGl4ZWxzID0gW107XG4gIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICBpZiAodGhpcy5nZXRCaXRYWSh4LCB5KSA9PT0gMSkge1xuICAgICAgICBwaXhlbHMucHVzaChbeCwgeV0pO1xuICAgICAgICBpZiAodGhpcy5nZXRCaXRYWSh4ICsgMSwgeSkgIT09IDEpIHtcbiAgICAgICAgICBwaXhlbHMucHVzaChbeCArIDEsIHldKTtcbiAgICAgICAgICBwaXhlbHMucHVzaChbeCArIDEsIHkgKyAxXSk7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0Qml0WFkoeCwgeSArIDEpICE9PSAxKSB7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChbeCwgeSArIDFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKHRoaXMuZ2V0Qml0WFkoeCwgeSArIDEpICE9PSAxKSB7XG4gICAgICAgICAgICBwaXhlbHMucHVzaChbeCwgeSArIDFdKTtcbiAgICAgICAgICAgIHBpeGVscy5wdXNoKFt4ICsgMSwgeSArIDFdKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHBpeGVscztcbn1cbiIsIi8qKlxuICogQW4gaW1hZ2UgbWF5IGJlIGRlcml2ZWQgZnJvbSBhbm90aGVyIGltYWdlIGVpdGhlciBieSBhIGNyb3BcbiAqIG9yIGJlY2F1c2UgaXQgaXMgYSBST0kgKHJlZ2lvbiBvZiBpbnRlcmVzdClcbiAqIEFsc28gYSByZWdpb24gb2YgaW50ZXJlc3QgY2FuIGJlIHJlcHJvY2Vzc2VkIHRvIGdlbmVyYXRlZCBhbm90aGVyXG4gKiBzZXQgb2YgcmVnaW9uIG9mIGludGVyZXN0cy5cbiAqIEl0IGlzIHRoZXJlZm9yZSBpbXBvcnRhbnQgdG8ga2VlcCB0aGUgaGllcmFyY2h5IG9mIGltYWdlcyB0byBrbm93XG4gKiB3aGljaCBpbWFnZSBpcyBkZXJpdmVkIGZyb20gd2hpY2ggb25lIGFuZCBiZSBhYmxlIHRvIGdldCB0aGVcbiAqIHJlbGF0aXZlIHBvc2l0aW9uIG9mIG9uZSBpbWFnZSBpbiBhbm90aGVyXG4gKiBUaGlzIG1ldGhvZHMgdGFrZXMgY2FyZSBvZiB0aGlzLlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7SW1hZ2V9IHRhcmdldEltYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmRlZmF1bHRGdXJ0aGVyPWZhbHNlXSBJZiBzZXQgdG8gdHJ1ZSBhbmQgbm8gcGFyZW50IGZvdW5kIHJldHVybnMgdGhlIHJlbGF0aXZlIHBvc2l0aW9uXG4gKiAgICAgIHRvIHRoZSBmdXJ0aGVyIHBhcmVudFxuICogQHJldHVybiB7bnVtYmVyW118Ym9vbGVhbn1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbih0YXJnZXRJbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0aGlzID09PSB0YXJnZXRJbWFnZSkge1xuICAgIHJldHVybiBbMCwgMF07XG4gIH1cbiAgbGV0IHBvc2l0aW9uID0gWzAsIDBdO1xuXG4gIGxldCBjdXJyZW50SW1hZ2UgPSB0aGlzO1xuICB3aGlsZSAoY3VycmVudEltYWdlKSB7XG4gICAgaWYgKGN1cnJlbnRJbWFnZSA9PT0gdGFyZ2V0SW1hZ2UpIHtcbiAgICAgIHJldHVybiBwb3NpdGlvbjtcbiAgICB9XG4gICAgaWYgKGN1cnJlbnRJbWFnZS5wb3NpdGlvbikge1xuICAgICAgcG9zaXRpb25bMF0gKz0gY3VycmVudEltYWdlLnBvc2l0aW9uWzBdO1xuICAgICAgcG9zaXRpb25bMV0gKz0gY3VycmVudEltYWdlLnBvc2l0aW9uWzFdO1xuICAgIH1cbiAgICBjdXJyZW50SW1hZ2UgPSBjdXJyZW50SW1hZ2UucGFyZW50O1xuICB9XG4gIC8vIHdlIHNob3VsZCBuZXZlciByZWFjaCB0aGlzIHBsYWNlLCB0aGlzIG1lYW5zIHdlIGNvdWxkIG5vdCBmaW5kIHRoZSBwYXJlbnRcbiAgLy8gdGhyb3cgRXJyb3IoJ1BhcmVudCBpbWFnZSB3YXMgbm90IGZvdW5kLCBjYW4gbm90IGdldCByZWxhdGl2ZSBwb3NpdGlvbi4nKVxuICBpZiAob3B0aW9ucy5kZWZhdWx0RnVydGhlcikgcmV0dXJuIHBvc2l0aW9uO1xuXG4gIHJldHVybiBmYWxzZTtcbn1cbiIsIi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHRyYW5zcGFyZW50IHBpeGVsc1xuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5hbHBoYT0xXSAtIFZhbHVlIG9mIHRoZSBhbHBoYSB2YWx1ZSB0byBjb3VudC5cbiAqIEByZXR1cm4ge251bWJlcn0gTnVtYmVyIG9mIHRyYW5zcGFyZW50IHBpeGVsc1xuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjb3VudEFscGhhUGl4ZWxzKG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBhbHBoYSA9IDEgfSA9IG9wdGlvbnM7XG4gIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnY291bnRBbHBoYVBpeGVscycsIHtcbiAgICBiaXREZXB0aDogWzgsIDE2XSxcbiAgICBhbHBoYTogMSxcbiAgfSk7XG5cbiAgbGV0IGNvdW50ID0gMDtcblxuICBpZiAoYWxwaGEgIT09IHVuZGVmaW5lZCkge1xuICAgIGZvciAobGV0IGkgPSB0aGlzLmNvbXBvbmVudHM7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpICs9IHRoaXMuY2hhbm5lbHMpIHtcbiAgICAgIGlmICh0aGlzLmRhdGFbaV0gPT09IGFscGhhKSB7XG4gICAgICAgIGNvdW50Kys7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3VudDtcbiAgfSBlbHNlIHtcbiAgICAvLyBiZWNhdXNlIHRoZXJlIGlzIGFuIGFscGhhIGNoYW5uZWwgYWxsIHRoZSBwaXhlbHMgaGF2ZSBhbiBhbHBoYVxuICAgIHJldHVybiB0aGlzLnNpemU7XG4gIH1cbn1cbiIsIi8qKlxuICogQ29tcHV0ZXMgdGhlIGNvbnZleCBodWxsIG9mIGEgYmluYXJ5IGltYWdlIHVzaW5nIEFuZHJldydzIE1vbm90b25lIENoYWluIEFsZ29yaXRobVxuICogaHR0cDovL3d3dy5hbGdvcml0aG1pc3QuY29tL2luZGV4LnBocC9Nb25vdG9uZV9DaGFpbl9Db252ZXhfSHVsbFxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gcG9pbnRzIC0gQW4gYXJyYXkgb2YgcG9pbnRzICh0d28gZWxlbWVudHMgYXJyYXlzKVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5zb3J0ZWQ9ZmFsc2VdXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gQ29vcmRpbmF0ZXMgb2YgdGhlIGNvbnZleCBodWxsIGluIGNsb2Nrd2lzZSBvcmRlclxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb25vdG9uZUNoYWluQ29udmV4SHVsbChwb2ludHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghb3B0aW9ucy5zb3J0ZWQpIHtcbiAgICAgICAgcG9pbnRzLnNvcnQoYnlYVGhlblkpO1xuICAgIH1cblxuICAgIGNvbnN0IG4gPSBwb2ludHMubGVuZ3RoO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBBcnJheShuICogMik7XG4gICAgdmFyIGsgPSAwO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuOyBpKyspIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIHdoaWxlIChrID49IDIgJiYgY3cocmVzdWx0W2sgLSAyXSwgcmVzdWx0W2sgLSAxXSwgcG9pbnQpIDw9IDApIHtcbiAgICAgICAgICAgIGstLTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbaysrXSA9IHBvaW50O1xuICAgIH1cblxuICAgIGNvbnN0IHQgPSBrICsgMTtcbiAgICBmb3IgKGkgPSBuIC0gMjsgaSA+PSAwOyBpLS0pIHtcbiAgICAgICAgY29uc3QgcG9pbnQgPSBwb2ludHNbaV07XG4gICAgICAgIHdoaWxlIChrID49IHQgJiYgY3cocmVzdWx0W2sgLSAyXSwgcmVzdWx0W2sgLSAxXSwgcG9pbnQpIDw9IDApIHtcbiAgICAgICAgICAgIGstLTtcbiAgICAgICAgfVxuICAgICAgICByZXN1bHRbaysrXSA9IHBvaW50O1xuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQuc2xpY2UoMCwgayAtIDEpO1xufVxuXG5mdW5jdGlvbiBjdyhwMSwgcDIsIHAzKSB7XG4gICAgcmV0dXJuIChwMlsxXSAtIHAxWzFdKSAqIChwM1swXSAtIHAxWzBdKSAtIChwMlswXSAtIHAxWzBdKSAqIChwM1sxXSAtIHAxWzFdKTtcbn1cblxuZnVuY3Rpb24gYnlYVGhlblkocG9pbnQxLCBwb2ludDIpIHtcbiAgICBpZiAocG9pbnQxWzBdID09PSBwb2ludDJbMF0pIHtcbiAgICAgICAgcmV0dXJuIHBvaW50MVsxXSAtIHBvaW50MlsxXTtcbiAgICB9XG4gICAgcmV0dXJuIHBvaW50MVswXSAtIHBvaW50MlswXTtcbn1cbiIsImltcG9ydCBtY2NoIGZyb20gJ21vbm90b25lLWNoYWluLWNvbnZleC1odWxsJztcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjb252ZXggaHVsbCBvZiBhIGJpbmFyeSBpbWFnZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtb25vdG9uZUNoYWluQ29udmV4SHVsbCgpIHtcbiAgcmV0dXJuIG1jY2godGhpcy5leHRlbmRlZFBvaW50cywgeyBzb3J0ZWQ6IGZhbHNlIH0pO1xufVxuIiwiLyoqXG4gKiBSb3VuZHMgYWxsIHRoZSB4IGFuZCB5IHZhbHVlcyBvZiBhbiBhcnJheSBvZiBwb2ludHNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHBvaW50c1xuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IG1vZGlmaWVkIGlucHV0IHZhbHVlXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm91bmQocG9pbnRzKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgcG9pbnRzW2ldWzBdID0gTWF0aC5yb3VuZChwb2ludHNbaV1bMF0pO1xuICAgIHBvaW50c1tpXVsxXSA9IE1hdGgucm91bmQocG9pbnRzW2ldWzFdKTtcbiAgfVxuICByZXR1cm4gcG9pbnRzO1xufVxuXG4vKipcbiAqIENhbGN1bGF0ZXMgYSBuZXcgcG9pbnQgdGhhdCBpcyB0aGUgZGlmZmVyZW5jZSBwMSAtIHAyXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHAxXG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHAyXG4gKiBAcmV0dXJuIHtBcnJheTxudW1iZXI+fVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRpZmZlcmVuY2UocDEsIHAyKSB7XG4gIHJldHVybiBbcDFbMF0gLSBwMlswXSwgcDFbMV0gLSBwMlsxXV07XG59XG5cbi8qKlxuICogTm9ybWFsaXplIGEgcG9pbnRcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcFxuICogQHJldHVybiB7QXJyYXk8bnVtYmVyPn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBub3JtYWxpemUocCkge1xuICBsZXQgbGVuZ3RoID0gTWF0aC5zcXJ0KHBbMF0gKiogMiArIHBbMV0gKiogMik7XG4gIHJldHVybiBbcFswXSAvIGxlbmd0aCwgcFsxXSAvIGxlbmd0aF07XG59XG5cbi8qKlxuICogV2Ugcm90YXRlIGFuIGFycmF5IG9mIHBvaW50c1xuICogQHBhcmFtIHtudW1iZXJ9IHJhZGlhbnNcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHNyY1BvaW50c1xuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gZGVzdFBvaW50c1xuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59XG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcm90YXRlKHJhZGlhbnMsIHNyY1BvaW50cywgZGVzdFBvaW50cykge1xuICBpZiAoZGVzdFBvaW50cyA9PT0gdW5kZWZpbmVkKSBkZXN0UG9pbnRzID0gbmV3IEFycmF5KHNyY1BvaW50cy5sZW5ndGgpO1xuICBsZXQgY29zID0gTWF0aC5jb3MocmFkaWFucyk7XG4gIGxldCBzaW4gPSBNYXRoLnNpbihyYWRpYW5zKTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXN0UG9pbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgZGVzdFBvaW50c1tpXSA9IFtcbiAgICAgIGNvcyAqIHNyY1BvaW50c1tpXVswXSAtIHNpbiAqIHNyY1BvaW50c1tpXVsxXSxcbiAgICAgIHNpbiAqIHNyY1BvaW50c1tpXVswXSArIGNvcyAqIHNyY1BvaW50c1tpXVsxXSxcbiAgICBdO1xuICB9XG4gIHJldHVybiBkZXN0UG9pbnRzO1xufVxuXG4vKipcbiAqIERvdCBwcm9kdWN0cyBvZiAyIHBvaW50cyBhc3N1bWluZyB2ZWN0b3JzIHN0YXJ0aW5nIGZyb20gKDAsMClcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcDFcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcDJcbiAqIEByZXR1cm4ge251bWJlcn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3QocDEsIHAyKSB7XG4gIHJldHVybiBwMVswXSAqIHAyWzBdICsgcDFbMV0gKiBwMlsxXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBhbmdsZSBiZXR3ZWVuIDMgcG9pbnRzLiBUaGUgZmlyc3Qgb25lIGlzIGEgY29tbW9uIHBvaW50XG4gKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IG9yaWdpblxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwMVxuICogQHBhcmFtIHtBcnJheTxudW1iZXI+fSBwMlxuICogQHJldHVybiB7bnVtYmVyfVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGFuZ2xlKG9yaWdpbiwgcDEsIHAyKSB7XG4gIGxldCB2MSA9IG5vcm1hbGl6ZShkaWZmZXJlbmNlKHAxLCBvcmlnaW4pKTtcbiAgbGV0IHYyID0gbm9ybWFsaXplKGRpZmZlcmVuY2UocDIsIG9yaWdpbikpO1xuICBsZXQgZG90UHJvZHVjdCA9IGRvdCh2MSwgdjIpO1xuICAvLyBUT0RPIHRoaXMgY29kZSBpcyBub3QgY29ycmVjdCBiZWNhdXNlIGl0IG1heSB5aWVsZCB0aGUgb3Bwb3NpdGUgYW5nbGVcbiAgcmV0dXJuIE1hdGguYWNvcyhkb3RQcm9kdWN0KTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSA0IHBvaW50cyBvZiBhbiBob3Jpem9udGFsIHJlY3RhbmdsZSB0aGF0IGluY2x1ZGVzIGFsbCB0aGUgcG9pbnRzXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBwb2ludHNcbiAqIEByZXR1cm4ge0FycmF5PEFycmF5PG51bWJlcj4+fVxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGJvdW5kYXJ5KHBvaW50cykge1xuICBsZXQgbWluTWF4VmFsdWVzID0gbWluTWF4KHBvaW50cyk7XG4gIGxldCB4TWluID0gbWluTWF4VmFsdWVzWzBdWzBdO1xuICBsZXQgeU1pbiA9IG1pbk1heFZhbHVlc1swXVsxXTtcbiAgbGV0IHhNYXggPSBtaW5NYXhWYWx1ZXNbMV1bMF07XG4gIGxldCB5TWF4ID0gbWluTWF4VmFsdWVzWzFdWzFdO1xuICByZXR1cm4gW1xuICAgIFt4TWluLCB5TWluXSxcbiAgICBbeE1heCwgeU1pbl0sXG4gICAgW3hNYXgsIHlNYXhdLFxuICAgIFt4TWluLCB5TWF4XSxcbiAgXTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBwZXJpbWV0ZXIgcmVwcmVzZW50ZWQgYnkgdGhlIHBvaW50cyAoYSBwb2x5Z29uKVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gcG9pbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwZXJpbWV0ZXIodmVydGljZXMpIHtcbiAgbGV0IHRvdGFsID0gMDtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBmcm9tWCA9IHZlcnRpY2VzW2ldWzBdO1xuICAgIGxldCBmcm9tWSA9IHZlcnRpY2VzW2ldWzFdO1xuICAgIGxldCB0b1ggPSB2ZXJ0aWNlc1tpID09PSB2ZXJ0aWNlcy5sZW5ndGggLSAxID8gMCA6IGkgKyAxXVswXTtcbiAgICBsZXQgdG9ZID0gdmVydGljZXNbaSA9PT0gdmVydGljZXMubGVuZ3RoIC0gMSA/IDAgOiBpICsgMV1bMV07XG4gICAgdG90YWwgKz0gTWF0aC5zcXJ0KCh0b1ggLSBmcm9tWCkgKiogMiArICh0b1kgLSBmcm9tWSkgKiogMik7XG4gIH1cbiAgcmV0dXJuIHRvdGFsO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIHN1cmZhY2UgcmVwcmVzZW50ZWQgYnkgdGhlIHBvaW50cyAoYSBwb2x5Z29uKVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gcG9pbnRzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdXJmYWNlKHZlcnRpY2VzKSB7XG4gIGxldCB0b3RhbCA9IDA7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0aWNlcy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhZGRYID0gdmVydGljZXNbaV1bMF07XG4gICAgbGV0IGFkZFkgPSB2ZXJ0aWNlc1tpID09PSB2ZXJ0aWNlcy5sZW5ndGggLSAxID8gMCA6IGkgKyAxXVsxXTtcbiAgICBsZXQgc3ViWCA9IHZlcnRpY2VzW2kgPT09IHZlcnRpY2VzLmxlbmd0aCAtIDEgPyAwIDogaSArIDFdWzBdO1xuICAgIGxldCBzdWJZID0gdmVydGljZXNbaV1bMV07XG5cbiAgICB0b3RhbCArPSBhZGRYICogYWRkWSAqIDAuNTtcbiAgICB0b3RhbCAtPSBzdWJYICogc3ViWSAqIDAuNTtcbiAgfVxuXG4gIHJldHVybiBNYXRoLmFicyh0b3RhbCk7XG59XG5cbi8qKlxuICogUmV0dXJucyAyIHBvaW50cyB3aXRoIG1pbmltYWwgYW5kIG1heGltYWwgWFlcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHBvaW50c1xuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59XG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gbWluTWF4KHBvaW50cykge1xuICBsZXQgeE1pbiA9ICtJbmZpbml0eTtcbiAgbGV0IHlNaW4gPSArSW5maW5pdHk7XG4gIGxldCB4TWF4ID0gLUluZmluaXR5O1xuICBsZXQgeU1heCA9IC1JbmZpbml0eTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAocG9pbnRzW2ldWzBdIDwgeE1pbikgeE1pbiA9IHBvaW50c1tpXVswXTtcbiAgICBpZiAocG9pbnRzW2ldWzBdID4geE1heCkgeE1heCA9IHBvaW50c1tpXVswXTtcbiAgICBpZiAocG9pbnRzW2ldWzFdIDwgeU1pbikgeU1pbiA9IHBvaW50c1tpXVsxXTtcbiAgICBpZiAocG9pbnRzW2ldWzFdID4geU1heCkgeU1heCA9IHBvaW50c1tpXVsxXTtcbiAgfVxuICByZXR1cm4gW1xuICAgIFt4TWluLCB5TWluXSxcbiAgICBbeE1heCwgeU1heF0sXG4gIF07XG59XG5cbi8qKlxuICogTW92ZXMgdGhlIG1pblgsIG1pblkgdG8gMCwwXG4gKiBBbGwgdGhlIHBvaW50cyB3aWxsIGJlIHBvc2l0aXZlIGFmdGVyIHRoaXMgbW92ZVxuICogQHBhcmFtIHtBcnJheTxBcnJheTxudW1iZXI+Pn0gc3JjUG9pbnRzXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBkZXN0UG9pbnRzXG4gKiBAcmV0dXJuIHtBcnJheTxBcnJheTxudW1iZXI+Pn1cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtb3ZlVG9aZXJvWmVybyhzcmNQb2ludHMsIGRlc3RQb2ludHMpIHtcbiAgaWYgKGRlc3RQb2ludHMgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlc3RQb2ludHMgPSBuZXcgQXJyYXkoc3JjUG9pbnRzLmxlbmd0aCkuZmlsbCgwKS5tYXAoKCkgPT4gW10pO1xuICB9XG4gIGxldCBtaW5NYXhWYWx1ZXMgPSBtaW5NYXgoc3JjUG9pbnRzKTtcbiAgbGV0IHhNaW4gPSBtaW5NYXhWYWx1ZXNbMF1bMF07XG4gIGxldCB5TWluID0gbWluTWF4VmFsdWVzWzBdWzFdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHNyY1BvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGRlc3RQb2ludHNbaV1bMF0gPSBzcmNQb2ludHNbaV1bMF0gLSB4TWluO1xuICAgIGRlc3RQb2ludHNbaV1bMV0gPSBzcmNQb2ludHNbaV1bMV0gLSB5TWluO1xuICB9XG4gIHJldHVybiBkZXN0UG9pbnRzO1xufVxuIiwiaW1wb3J0IHsgcm90YXRlLCBkaWZmZXJlbmNlLCBub3JtYWxpemUgfSBmcm9tICcuLi8uLi91dGlsL3BvaW50cyc7XG5cbmltcG9ydCBjb252ZXhIdWxsRnVuY3Rpb24gZnJvbSAnLi9tb25vdG9uZUNoYWluQ29udmV4SHVsbCc7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIG1pbmltdW0gYm91bmRpbmcgYm94IGFyb3VuZCBhIGJpbmFyeSBpbWFnZVxuICogaHR0cHM6Ly93d3cucmVzZWFyY2hnYXRlLm5ldC9wcm9maWxlL0xlbm5lcnRfRGVuX0JvZXIyL3B1YmxpY2F0aW9uLzMwMzc4MzQ3Ml9BX0Zhc3RfQWxnb3JpdGhtX2Zvcl9HZW5lcmF0aW5nX2FfTWluaW1hbF9Cb3VuZGluZ19SZWN0YW5nbGUvbGlua3MvNTc1MWExNDEwOGFlNjgwN2ZhZmIyYWE1LnBkZlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFtvcHRpb25zLm9yaWdpbmFsUG9pbnRzXVxuICogQHJldHVybiB7QXJyYXk8QXJyYXk8bnVtYmVyPj59XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1pbmltYWxCb3VuZGluZ1JlY3RhbmdsZShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBvcmlnaW5hbFBvaW50cyA9IGNvbnZleEh1bGxGdW5jdGlvbi5jYWxsKHRoaXMpIH0gPSBvcHRpb25zO1xuICBpZiAob3JpZ2luYWxQb2ludHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG5cbiAgaWYgKG9yaWdpbmFsUG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiBbXG4gICAgICBvcmlnaW5hbFBvaW50c1swXSxcbiAgICAgIG9yaWdpbmFsUG9pbnRzWzBdLFxuICAgICAgb3JpZ2luYWxQb2ludHNbMF0sXG4gICAgICBvcmlnaW5hbFBvaW50c1swXSxcbiAgICBdO1xuICB9XG5cbiAgY29uc3QgcCA9IG5ldyBBcnJheShvcmlnaW5hbFBvaW50cy5sZW5ndGgpO1xuXG4gIGxldCBtaW5TdXJmYWNlID0gK0luZmluaXR5O1xuICBsZXQgbWluU3VyZmFjZUFuZ2xlID0gMDtcbiAgbGV0IG1icjtcblxuICBmb3IgKGxldCBpID0gMDsgaSA8IHAubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgYW5nbGUgPSBnZXRBbmdsZShvcmlnaW5hbFBvaW50c1tpXSwgb3JpZ2luYWxQb2ludHNbKGkgKyAxKSAlIHAubGVuZ3RoXSk7XG5cbiAgICByb3RhdGUoLWFuZ2xlLCBvcmlnaW5hbFBvaW50cywgcCk7XG5cbiAgICAvLyB3ZSByb3RhdGUgYW5kIHRyYW5zbGF0ZSBzbyB0aGF0IHRoaXMgYXhlIGlzIGluIHRoZSBib3R0b21cbiAgICBsZXQgYVggPSBwW2ldWzBdO1xuICAgIGxldCBhWSA9IHBbaV1bMV07XG4gICAgbGV0IGJYID0gcFsoaSArIDEpICUgcC5sZW5ndGhdWzBdO1xuICAgIGxldCBiWSA9IHBbKGkgKyAxKSAlIHAubGVuZ3RoXVsxXTtcblxuICAgIGxldCB0VW5kZWZpbmVkID0gdHJ1ZTtcbiAgICBsZXQgdE1pbiA9IDA7XG4gICAgbGV0IHRNYXggPSAwO1xuICAgIGxldCBtYXhXaWR0aCA9IDA7XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBwLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgY1ggPSBwW2pdWzBdO1xuICAgICAgbGV0IGNZID0gcFtqXVsxXTtcbiAgICAgIGxldCB0ID0gKGNYIC0gYVgpIC8gKGJYIC0gYVgpO1xuICAgICAgaWYgKHRVbmRlZmluZWQgPT09IHRydWUpIHtcbiAgICAgICAgdFVuZGVmaW5lZCA9IGZhbHNlO1xuICAgICAgICB0TWluID0gdDtcbiAgICAgICAgdE1heCA9IHQ7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAodCA8IHRNaW4pIHRNaW4gPSB0O1xuICAgICAgICBpZiAodCA+IHRNYXgpIHRNYXggPSB0O1xuICAgICAgfVxuICAgICAgbGV0IHdpZHRoID0gKC0oYlggLSBhWCkgKiBjWSArIGJYICogYVkgLSBiWSAqIGFYKSAvIChiWCAtIGFYKTtcblxuICAgICAgaWYgKE1hdGguYWJzKHdpZHRoKSA+IE1hdGguYWJzKG1heFdpZHRoKSkgbWF4V2lkdGggPSB3aWR0aDtcbiAgICB9XG4gICAgbGV0IHBNaW4gPSBbYVggKyB0TWluICogKGJYIC0gYVgpLCBhWV07XG4gICAgbGV0IHBNYXggPSBbYVggKyB0TWF4ICogKGJYIC0gYVgpLCBhWV07XG5cbiAgICBsZXQgY3VycmVudFN1cmZhY2UgPSBNYXRoLmFicyhtYXhXaWR0aCAqICh0TWluIC0gdE1heCkgKiAoYlggLSBhWCkpO1xuXG4gICAgaWYgKGN1cnJlbnRTdXJmYWNlIDwgbWluU3VyZmFjZSkge1xuICAgICAgbWluU3VyZmFjZUFuZ2xlID0gYW5nbGU7XG4gICAgICBtaW5TdXJmYWNlID0gY3VycmVudFN1cmZhY2U7XG4gICAgICBtYnIgPSBbXG4gICAgICAgIHBNaW4sXG4gICAgICAgIHBNYXgsXG4gICAgICAgIFtwTWF4WzBdLCBwTWF4WzFdIC0gbWF4V2lkdGhdLFxuICAgICAgICBbcE1pblswXSwgcE1pblsxXSAtIG1heFdpZHRoXSxcbiAgICAgIF07XG4gICAgfVxuICB9XG4gIHJvdGF0ZShtaW5TdXJmYWNlQW5nbGUsIG1iciwgbWJyKTtcbiAgcmV0dXJuIG1icjtcbn1cblxuLy8gdGhlIGFuZ2xlIHRoYXQgYWxsb3dzIHRvIG1ha2UgdGhlIGxpbmUgZ29pbmcgdGhyb3VnaCBwMSBhbmQgcDIgaG9yaXpvbnRhbFxuLy8gdGhpcyBpcyBhbiBvcHRpbWl6ZWQgdmVyc2lvbiBiZWNhdXNlIGl0IGFzc3VtZSBvbmUgdmVjdG9yIGlzIGhvcml6b250YWxcbmZ1bmN0aW9uIGdldEFuZ2xlKHAxLCBwMikge1xuICBsZXQgZGlmZiA9IGRpZmZlcmVuY2UocDIsIHAxKTtcbiAgbGV0IHZlY3RvciA9IG5vcm1hbGl6ZShkaWZmKTtcbiAgbGV0IGFuZ2xlID0gTWF0aC5hY29zKHZlY3RvclswXSk7XG4gIGlmICh2ZWN0b3JbMV0gPCAwKSByZXR1cm4gLWFuZ2xlO1xuICByZXR1cm4gYW5nbGU7XG59XG4iLCJpbXBvcnQgeyByb3RhdGUsIGRpZmZlcmVuY2UsIG5vcm1hbGl6ZSB9IGZyb20gJy4uLy4uL3V0aWwvcG9pbnRzJztcbmltcG9ydCBjb252ZXhIdWxsRnVuY3Rpb24gZnJvbSAnLi4vY29tcHV0ZS9tb25vdG9uZUNoYWluQ29udmV4SHVsbCc7XG5cbi8qKlxuICogQ29tcHV0ZXMgdGhlIEZlcmV0IGRpYW1ldGVyc1xuICogaHR0cHM6Ly93d3cuc3ltcGF0ZWMuY29tL2VuL3BhcnRpY2xlLW1lYXN1cmVtZW50L2dsb3NzYXJ5L3BhcnRpY2xlLXNoYXBlLyNcbiAqIGh0dHA6Ly9wb3J0YWwuczJuYW5vLm9yZzo4MjgyL2ZpbGVzL1RFTV9wcm90b2NvbF9OQU5vUkVHLnBkZlxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAaW5zdGFuY2VcbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IFtvcHRpb25zLm9yaWdpbmFsUG9pbnRzXVxuICogQHJldHVybiB7b2JqZWN0fSBPYmplY3Qgd2l0aCB7bWluLCBtYXgsIG1pbkxpbmU6IHtBcnJheTxBcnJheTxudW1iZXI+Pn0sIG1heExpbmU6IHtBcnJheTxBcnJheTxudW1iZXI+Pn19XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZlcmV0RGlhbWV0ZXJzKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IG9yaWdpbmFsUG9pbnRzID0gY29udmV4SHVsbEZ1bmN0aW9uLmNhbGwodGhpcykgfSA9IG9wdGlvbnM7XG4gIGlmIChvcmlnaW5hbFBvaW50cy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4geyBtaW46IDAsIG1heDogMCwgbWluTGluZTogW10sIG1heExpbmU6IFtdLCBhc3BlY3RSYXRpbzogMSB9O1xuICB9XG5cbiAgaWYgKG9yaWdpbmFsUG9pbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgIHJldHVybiB7XG4gICAgICBtaW46IDEsXG4gICAgICBtYXg6IDEsXG4gICAgICBtaW5MaW5lOiBbb3JpZ2luYWxQb2ludHNbMF0sIG9yaWdpbmFsUG9pbnRzWzBdXSxcbiAgICAgIG1heExpbmU6IFtvcmlnaW5hbFBvaW50c1swXSwgb3JpZ2luYWxQb2ludHNbMF1dLFxuICAgICAgYXNwZWN0UmF0aW86IDEsXG4gICAgfTtcbiAgfVxuXG4gIGNvbnN0IHRlbXBvcmFyeVBvaW50cyA9IG5ldyBBcnJheShvcmlnaW5hbFBvaW50cy5sZW5ndGgpO1xuXG4gIC8vIENBTENVTEFURSBNSU4gVkFMVUVcbiAgbGV0IG1pbldpZHRoID0gK0luZmluaXR5O1xuICBsZXQgbWluV2lkdGhBbmdsZSA9IDA7XG4gIGxldCBtaW5MaW5lID0gW107XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBvcmlnaW5hbFBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBhbmdsZSA9IGdldEFuZ2xlKFxuICAgICAgb3JpZ2luYWxQb2ludHNbaV0sXG4gICAgICBvcmlnaW5hbFBvaW50c1soaSArIDEpICUgb3JpZ2luYWxQb2ludHMubGVuZ3RoXSxcbiAgICApO1xuXG4gICAgLy8gd2Ugcm90YXRlIHNvIHRoYXQgaXQgaXMgcGFyYWxsZWwgdG8gWCBheGlzXG4gICAgcm90YXRlKC1hbmdsZSwgb3JpZ2luYWxQb2ludHMsIHRlbXBvcmFyeVBvaW50cyk7XG5cbiAgICBsZXQgY3VycmVudFdpZHRoID0gMDtcbiAgICBsZXQgY3VycmVudE1pbkxpbmUgPSBbXTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IG9yaWdpbmFsUG9pbnRzLmxlbmd0aDsgaisrKSB7XG4gICAgICBsZXQgYWJzV2lkdGggPSBNYXRoLmFicyh0ZW1wb3JhcnlQb2ludHNbaV1bMV0gLSB0ZW1wb3JhcnlQb2ludHNbal1bMV0pO1xuICAgICAgaWYgKGFic1dpZHRoID4gY3VycmVudFdpZHRoKSB7XG4gICAgICAgIGN1cnJlbnRXaWR0aCA9IGFic1dpZHRoO1xuICAgICAgICBjdXJyZW50TWluTGluZSA9IFtdO1xuICAgICAgICBjdXJyZW50TWluTGluZS5wdXNoKFxuICAgICAgICAgIFt0ZW1wb3JhcnlQb2ludHNbal1bMF0sIHRlbXBvcmFyeVBvaW50c1tpXVsxXV0sXG4gICAgICAgICAgW3RlbXBvcmFyeVBvaW50c1tqXVswXSwgdGVtcG9yYXJ5UG9pbnRzW2pdWzFdXSxcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGN1cnJlbnRXaWR0aCA8IG1pbldpZHRoKSB7XG4gICAgICBtaW5XaWR0aCA9IGN1cnJlbnRXaWR0aDtcbiAgICAgIG1pbldpZHRoQW5nbGUgPSBhbmdsZTtcbiAgICAgIG1pbkxpbmUgPSBjdXJyZW50TWluTGluZTtcbiAgICB9XG4gIH1cbiAgcm90YXRlKG1pbldpZHRoQW5nbGUsIG1pbkxpbmUsIG1pbkxpbmUpO1xuXG4gIC8vIENBTENVTEFURSBNQVggVkFMVUVcbiAgbGV0IG1heFdpZHRoID0gMDtcbiAgbGV0IG1heExpbmUgPSBbXTtcbiAgbGV0IG1heFNxdWFyZWRXaWR0aCA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgb3JpZ2luYWxQb2ludHMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgZm9yIChsZXQgaiA9IGkgKyAxOyBqIDwgb3JpZ2luYWxQb2ludHMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGxldCBjdXJyZW50U3F1YXJlZFdpZHRoID1cbiAgICAgICAgKG9yaWdpbmFsUG9pbnRzW2ldWzBdIC0gb3JpZ2luYWxQb2ludHNbal1bMF0pICoqIDIgK1xuICAgICAgICAob3JpZ2luYWxQb2ludHNbaV1bMV0gLSBvcmlnaW5hbFBvaW50c1tqXVsxXSkgKiogMjtcbiAgICAgIGlmIChjdXJyZW50U3F1YXJlZFdpZHRoID4gbWF4U3F1YXJlZFdpZHRoKSB7XG4gICAgICAgIG1heFNxdWFyZWRXaWR0aCA9IGN1cnJlbnRTcXVhcmVkV2lkdGg7XG4gICAgICAgIG1heFdpZHRoID0gTWF0aC5zcXJ0KGN1cnJlbnRTcXVhcmVkV2lkdGgpO1xuICAgICAgICBtYXhMaW5lID0gW29yaWdpbmFsUG9pbnRzW2ldLCBvcmlnaW5hbFBvaW50c1tqXV07XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBtaW46IG1pbldpZHRoLFxuICAgIG1pbkxpbmUsXG4gICAgbWF4OiBtYXhXaWR0aCxcbiAgICBtYXhMaW5lLFxuICAgIGFzcGVjdFJhdGlvOiBtaW5XaWR0aCAvIG1heFdpZHRoLFxuICB9O1xufVxuXG4vLyB0aGUgYW5nbGUgdGhhdCBhbGxvd3MgdG8gbWFrZSB0aGUgbGluZSBnb2luZyB0aHJvdWdoIHAxIGFuZCBwMiBob3Jpem9udGFsXG4vLyB0aGlzIGlzIGFuIG9wdGltaXplZCB2ZXJzaW9uIGJlY2F1c2UgaXQgYXNzdW1lIG9uZSB2ZWN0b3IgaXMgaG9yaXpvbnRhbFxuZnVuY3Rpb24gZ2V0QW5nbGUocDEsIHAyKSB7XG4gIGxldCBkaWZmID0gZGlmZmVyZW5jZShwMiwgcDEpO1xuICBsZXQgdmVjdG9yID0gbm9ybWFsaXplKGRpZmYpO1xuICBsZXQgYW5nbGUgPSBNYXRoLmFjb3ModmVjdG9yWzBdKTtcbiAgaWYgKHZlY3RvclsxXSA8IDApIHJldHVybiAtYW5nbGU7XG4gIHJldHVybiBhbmdsZTtcbn1cbiIsImltcG9ydCBtY2NoIGZyb20gJ21vbm90b25lLWNoYWluLWNvbnZleC1odWxsJztcbmltcG9ydCByb2J1c3RQb2ludEluUG9seWdvbiBmcm9tICdyb2J1c3QtcG9pbnQtaW4tcG9seWdvbic7XG5cbmltcG9ydCBTaGFwZSBmcm9tICcuLi8uLi91dGlsL1NoYXBlJztcbmltcG9ydCB7XG4gIHJvdW5kLFxuICBtaW5NYXggYXMgbWluTWF4RmN0LFxuICBtb3ZlVG9aZXJvWmVybyxcbiAgcGVyaW1ldGVyLFxuICBzdXJmYWNlLFxufSBmcm9tICcuLi8uLi91dGlsL3BvaW50cyc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuaW1wb3J0IG1pbmltYWxCb3VuZGluZ1JlY3RhbmdsZSBmcm9tICcuLi9jb21wdXRlL21pbmltYWxCb3VuZGluZ1JlY3RhbmdsZSc7XG5pbXBvcnQgKiBhcyBLaW5kTmFtZXMgZnJvbSAnLi4vY29yZS9raW5kTmFtZXMnO1xuXG5pbXBvcnQgZmVyZXREaWFtZXRlcnMgZnJvbSAnLi9mZXJldERpYW1ldGVycyc7XG5cbi8vIE1hbnkgbWVhc3VyZW1lbnRzOlxuLy8gaHR0cHM6Ly93d3cuc3ltcGF0ZWMuY29tL2VuL3BhcnRpY2xlLW1lYXN1cmVtZW50L2dsb3NzYXJ5L3BhcnRpY2xlLXNoYXBlLyNcblxuLyoqXG4gKiBDbGFzcyB0byBtYW5hZ2UgUmVnaW9uIE9mIEludGVyZXN0c1xuICogQGNsYXNzIFJvaVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2kge1xuICBjb25zdHJ1Y3RvcihtYXAsIGlkKSB7XG4gICAgdGhpcy5tYXAgPSBtYXA7XG4gICAgdGhpcy5pZCA9IGlkO1xuICAgIHRoaXMubWluWCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcbiAgICB0aGlzLm1heFggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG4gICAgdGhpcy5taW5ZID0gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZO1xuICAgIHRoaXMubWF4WSA9IE51bWJlci5ORUdBVElWRV9JTkZJTklUWTtcbiAgICB0aGlzLm1lYW5YID0gMDtcbiAgICB0aGlzLm1lYW5ZID0gMDtcbiAgICB0aGlzLnN1cmZhY2UgPSAwO1xuICAgIHRoaXMuY29tcHV0ZWQgPSB7fTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgYmluYXJ5IGltYWdlIChtYXNrKSBmb3IgdGhlIGNvcnJlc3BvbmRpbmcgUk9JXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLnNjYWxlPTFdIC0gU2NhbGluZyBmYWN0b3IgdG8gYXBwbHkgdG8gdGhlIG1hc2tcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmtpbmQ9J25vcm1hbCddIC0gJ2NvbnRvdXInLCAnYm94JywgJ2ZpbGxlZCcsICdjZW50ZXInLCAnaHVsbCcgb3IgJ25vcm1hbCdcbiAgICogQHJldHVybiB7SW1hZ2V9IC0gUmV0dXJucyBhIG1hc2sgKDEgYml0IEltYWdlKVxuICAgKi9cbiAgZ2V0TWFzayhvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IHNjYWxlID0gMSwga2luZCA9ICcnIH0gPSBvcHRpb25zO1xuICAgIGxldCBtYXNrO1xuICAgIHN3aXRjaCAoa2luZCkge1xuICAgICAgY2FzZSAnY29udG91cic6XG4gICAgICAgIG1hc2sgPSB0aGlzLmNvbnRvdXJNYXNrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2JveCc6XG4gICAgICAgIG1hc2sgPSB0aGlzLmJveE1hc2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZmlsbGVkJzpcbiAgICAgICAgbWFzayA9IHRoaXMuZmlsbGVkTWFzaztcbiAgICAgICAgYnJlYWs7XG4gICAgICBjYXNlICdjZW50ZXInOlxuICAgICAgICBtYXNrID0gdGhpcy5jZW50ZXJNYXNrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ21icic6XG4gICAgICAgIG1hc2sgPSB0aGlzLm1ickZpbGxlZE1hc2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnaHVsbCc6XG4gICAgICAgIG1hc2sgPSB0aGlzLmNvbnZleEh1bGxGaWxsZWRNYXNrO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgJ2h1bGxDb250b3VyJzpcbiAgICAgICAgbWFzayA9IHRoaXMuY29udmV4SHVsbE1hc2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnbWJyQ29udG91cic6XG4gICAgICAgIG1hc2sgPSB0aGlzLm1ick1hc2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgY2FzZSAnZmVyZXQnOlxuICAgICAgICBtYXNrID0gdGhpcy5mZXJldE1hc2s7XG4gICAgICAgIGJyZWFrO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgbWFzayA9IHRoaXMubWFzaztcbiAgICB9XG5cbiAgICBpZiAoc2NhbGUgPCAxKSB7XG4gICAgICAvLyBieSByZWFzc2lnbmluZyB0aGUgbWFzayB3ZSBsb29zZSB0aGUgcGFyZW50IGFuZCB0aGVyZWZvcmUgdGhlIHBvc2l0aW9uXG4gICAgICAvLyB3ZSB3aWxsIGhhdmUgdG8gZm9yY2UgaXQgYmFja1xuICAgICAgbWFzayA9IG1hc2sucmVzaXplKHsgZmFjdG9yOiBzY2FsZSB9KTtcbiAgICAgIG1hc2sucGFyZW50ID0gdGhpcy5tYXNrLnBhcmVudDtcbiAgICAgIG1hc2sucG9zaXRpb25bMF0gKz0gdGhpcy5taW5YO1xuICAgICAgbWFzay5wb3NpdGlvblsxXSArPSB0aGlzLm1pblk7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1hc2s7XG4gIH1cblxuICBnZXQgbWVhbigpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvaSBtZWFuIG5vdCBpbXBsZW1lbnRlZCB5ZXQnKTtcbiAgICAvLyByZXR1cm4gW3RoaXMubWVhblgsdGhpcy5tZWFuWV07XG4gIH1cblxuICBnZXQgY2VudGVyKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5jZW50ZXIpIHtcbiAgICAgIHRoaXMuY29tcHV0ZWQuY2VudGVyID0gWyh0aGlzLndpZHRoIC8gMikgPj4gMCwgKHRoaXMuaGVpZ2h0IC8gMikgPj4gMF07XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmNlbnRlcjtcbiAgfVxuXG4gIGdldCByYXRpbygpIHtcbiAgICByZXR1cm4gdGhpcy53aWR0aCAvIHRoaXMuaGVpZ2h0O1xuICB9XG5cbiAgZ2V0IHdpZHRoKCkge1xuICAgIHJldHVybiB0aGlzLm1heFggLSB0aGlzLm1pblggKyAxO1xuICB9XG5cbiAgZ2V0IGhlaWdodCgpIHtcbiAgICByZXR1cm4gdGhpcy5tYXhZIC0gdGhpcy5taW5ZICsgMTtcbiAgfVxuXG4gIF9jb21wdXRFeHRlcm5hbElEcygpIHtcbiAgICAvLyB0YWtlIGFsbCB0aGUgYm9yZGVycyBhbmQgcmVtb3ZlIHRoZSBpbnRlcm5hbCBvbmUgLi4uXG4gICAgbGV0IGJvcmRlcnMgPSB0aGlzLmJvcmRlcklEcztcbiAgICBsZXQgbGVuZ3RocyA9IHRoaXMuYm9yZGVyTGVuZ3RocztcblxuICAgIHRoaXMuY29tcHV0ZWQuZXh0ZXJuYWxJRHMgPSBbXTtcbiAgICB0aGlzLmNvbXB1dGVkLmV4dGVybmFsTGVuZ3RocyA9IFtdO1xuXG4gICAgbGV0IGludGVybmFscyA9IHRoaXMuaW50ZXJuYWxJRHM7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGJvcmRlcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICghaW50ZXJuYWxzLmluY2x1ZGVzKGJvcmRlcnNbaV0pKSB7XG4gICAgICAgIHRoaXMuY29tcHV0ZWQuZXh0ZXJuYWxJRHMucHVzaChib3JkZXJzW2ldKTtcbiAgICAgICAgdGhpcy5jb21wdXRlZC5leHRlcm5hbExlbmd0aHMucHVzaChsZW5ndGhzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBnZXQgZXh0ZXJuYWxJRHMoKSB7XG4gICAgaWYgKHRoaXMuY29tcHV0ZWQuZXh0ZXJuYWxJRHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmV4dGVybmFsSURzO1xuICAgIH1cbiAgICB0aGlzLl9jb21wdXRFeHRlcm5hbElEcygpO1xuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmV4dGVybmFsSURzO1xuICB9XG5cbiAgZ2V0IGV4dGVybmFsTGVuZ3RocygpIHtcbiAgICBpZiAodGhpcy5jb21wdXRlZC5leHRlcm5hbExlbmd0aHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmV4dGVybmFsTGVuZ3RocztcbiAgICB9XG4gICAgdGhpcy5fY29tcHV0RXh0ZXJuYWxJRHMoKTtcbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5leHRlcm5hbExlbmd0aHM7XG4gIH1cblxuICBfY29tcHV0ZUJvcmRlcklEcygpIHtcbiAgICBsZXQgYm9yZGVycyA9IGdldEJvcmRlcnModGhpcyk7XG4gICAgdGhpcy5jb21wdXRlZC5ib3JkZXJJRHMgPSBib3JkZXJzLmlkcztcbiAgICB0aGlzLmNvbXB1dGVkLmJvcmRlckxlbmd0aHMgPSBib3JkZXJzLmxlbmd0aHM7XG4gIH1cblxuICAvKipcbiAgICAgUmV0cmlldmUgYWxsIHRoZSBJRHMgKGFycmF5IG9mIG51bWJlcikgb2YgdGhlIHJlZ2lvbnMgdGhhdCBhcmUgaW4gY29udGFjdCB3aXRoIHRoaXNcbiAgICAgc3BlY2lmaWMgcmVnaW9uLiBJdCBtYXkgYmUgZXh0ZXJuYWwgb3IgaW50ZXJuYWxcbiAgICAgKi9cbiAgZ2V0IGJvcmRlcklEcygpIHtcbiAgICBpZiAodGhpcy5jb21wdXRlZC5ib3JkZXJJRHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmJvcmRlcklEcztcbiAgICB9XG4gICAgdGhpcy5fY29tcHV0ZUJvcmRlcklEcygpO1xuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmJvcmRlcklEcztcbiAgfVxuXG4gIC8qKlxuICAgICBSZXRyaWV2ZSBhbGwgdGhlIGxlbmd0aCAoYXJyYXkgb2YgbnVtYmVyKSBvZiB0aGUgY29udGFjdHMgd2l0aCB0aGlzXG4gICAgIHNwZWNpZmljIHJlZ2lvbi4gSXQgbWF5IGJlIGV4dGVybmFsIG9yIGludGVybmFsXG4gICAgICovXG4gIGdldCBib3JkZXJMZW5ndGhzKCkge1xuICAgIGlmICh0aGlzLmNvbXB1dGVkLmJvcmRlckxlbmd0aHMpIHtcbiAgICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmJvcmRlckxlbmd0aHM7XG4gICAgfVxuICAgIHRoaXMuX2NvbXB1dGVCb3JkZXJJRHMoKTtcbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5ib3JkZXJMZW5ndGhzO1xuICB9XG5cbiAgLyoqXG4gICAgIFJldHJpZXZlIGFsbCB0aGUgSURzIG9yIHRoZSBSb2kgdG91Y2hpbmcgdGhlIGJveCBzdXJyb3VkaW5nIHRoZSByZWdpb25cblxuICAgICBJdCBzaG91bGQgcmVhbGx5IGJlIGFuIGFycmF5IHRvIHNvbHZlIGNvbXBsZXggY2FzZXMgcmVsYXRlZCB0byBib3JkZXIgZWZmZWN0XG5cbiAgICAgTGlrZSB0aGUgaW1hZ2VcbiAgICAgPHByZT5cbiAgICAgMDAwMFxuICAgICAxMTExXG4gICAgIDAwMDBcbiAgICAgMTExMVxuICAgICA8L3ByZT5cblxuICAgICBUaGUgZmlyc3Qgcm93IG9mIDEgd2lsbCBiZSBzdXJyb3VuZWQgYnkgMiBkaWZmZXJlbnRzIHpvbmVzXG5cbiAgICAgT3IgZXZlbiB3b3JzZVxuICAgICA8cHJlPlxuICAgICAwMTBcbiAgICAgMTExXG4gICAgIDAxMFxuICAgICA8L3ByZT5cbiAgICAgVGhlIGNyb3NzIHdpbGwgYmUgc3Vycm91bmVkIGJ5IDQgZGlmZmVyZW50cyB6b25lc1xuXG4gICAgIEhvd2V2ZXIgaW4gbW9zdCBvZiB0aGUgY2FzZXMgaXQgd2lsbCBiZSBhbiBhcnJheSBvZiBvbmUgZWxlbWVudFxuICAgICAqL1xuICBnZXQgYm94SURzKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5ib3hJRHMpIHtcbiAgICAgIHRoaXMuY29tcHV0ZWQuYm94SURzID0gZ2V0Qm94SURzKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5ib3hJRHM7XG4gIH1cblxuICBnZXQgaW50ZXJuYWxJRHMoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmludGVybmFsSURzKSB7XG4gICAgICB0aGlzLmNvbXB1dGVkLmludGVybmFsSURzID0gZ2V0SW50ZXJuYWxJRHModGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmludGVybmFsSURzO1xuICB9XG5cbiAgLyoqXG4gICAgIE51bWJlciBvZiBwaXhlbHMgb2YgdGhlIFJvaSB0aGF0IHRvdWNoIHRoZSByZWN0YW5nbGVcbiAgICAgVGhpcyBpcyB1c2VmdWwgZm9yIHRoZSBjYWxjdWxhdGlvbiBvZiB0aGUgYm9yZGVyXG4gICAgIGJlY2F1c2Ugd2Ugd2lsbCBpZ25vcmUgdGhvc2Ugc3BlY2lhbCBwaXhlbHMgb2YgdGhlIHJlY3RhbmdsZVxuICAgICBib3JkZXIgdGhhdCBkb24ndCBoYXZlIG5laWdoYm91cnMgYWxsIGFyb3VuZCB0aGVtLlxuICAgICAqL1xuICBnZXQgYm94KCkge1xuICAgIC8vIHBvaW50cyBvZiB0aGUgUm9pIHRoYXQgdG91Y2ggdGhlIHJlY3Rhbmd1bGFyIHNoYXBlXG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmJveCkge1xuICAgICAgdGhpcy5jb21wdXRlZC5ib3ggPSBnZXRCb3godGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmJveDtcbiAgfVxuXG4gIC8qKlxuICAgICBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgYXJlIGluIHRoZSBleHRlcm5hbCBib3JkZXIgb2YgdGhlIFJvaVxuICAgICBDb250b3VyIGFyZSBhbGwgdGhlIHBpeGVscyB0aGF0IHRvdWNoIGFuIGV4dGVybmFsIFwiem9uZVwiLlxuICAgICBBbGwgdGhlIHBpeGVscyB0aGF0IHRvdWNoIHRoZSBib3ggYXJlIHBhcnQgb2YgdGhlIGJvcmRlciBhbmRcbiAgICAgYXJlIGNhbGN1bGF0ZWQgaW4gdGhlIGdldEJveFBpeGVscyBwcm9jZWR1cmVcbiAgICAgKi9cbiAgZ2V0IGV4dGVybmFsKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5leHRlcm5hbCkge1xuICAgICAgdGhpcy5jb21wdXRlZC5leHRlcm5hbCA9IGdldEV4dGVybmFsKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5leHRlcm5hbDtcbiAgfVxuXG4gIC8qKlxuICAgICBDYWxjdWxhdGVzIGluZm9ybWF0aW9uIGFib3V0IGhvbGVzXG4gICAgICovXG4gIGdldCBob2xlc0luZm8oKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmhvbGVzSW5mbykge1xuICAgICAgdGhpcy5jb21wdXRlZC5ob2xlc0luZm8gPSBnZXRIb2xlc0luZm8odGhpcyk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmhvbGVzSW5mbztcbiAgfVxuXG4gIC8qKlxuICAgICBDYWxjdWxhdGVzIHRoZSBudW1iZXIgb2YgcGl4ZWxzIHRoYXQgYXJlIGludm9sdmVkIGluIGJvcmRlclxuICAgICBCb3JkZXIgYXJlIGFsbCB0aGUgcGl4ZWxzIHRoYXQgdG91Y2ggYW5vdGhlciBcInpvbmVcIi4gSXQgY291bGQgYmUgZXh0ZXJuYWxcbiAgICAgb3IgaW50ZXJuYWwuIElmIHRoZXJlIGlzIGEgaG9sZSBpbiB0aGUgem9uZSBpdCB3aWxsIGJlIGNvdW50ZWQgYXMgYSBib3JkZXIuXG4gICAgIEFsbCB0aGUgcGl4ZWxzIHRoYXQgdG91Y2ggdGhlIGJveCBhcmUgcGFydCBvZiB0aGUgYm9yZGVyIGFuZFxuICAgICBhcmUgY2FsY3VsYXRlZCBpbiB0aGUgZ2V0Qm94UGl4ZWxzIHByb2NlZHVyZVxuICAgICAqL1xuICBnZXQgYm9yZGVyKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5ib3JkZXIpIHtcbiAgICAgIHRoaXMuY29tcHV0ZWQuYm9yZGVyID0gZ2V0Qm9yZGVyKHRoaXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5ib3JkZXI7XG4gIH1cblxuICAvKipcbiAgICBSZXR1cm5zIGEgYmluYXJ5IGltYWdlIChtYXNrKSBjb250YWluaW5nIG9ubHkgdGhlIGJvcmRlciBvZiB0aGUgbWFza1xuICAqL1xuICBnZXQgY29udG91ck1hc2soKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmNvbnRvdXJNYXNrKSB7XG4gICAgICBsZXQgaW1nID0gbmV3IEltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmROYW1lcy5CSU5BUlksXG4gICAgICAgIHBvc2l0aW9uOiBbdGhpcy5taW5YLCB0aGlzLm1pblldLFxuICAgICAgICBwYXJlbnQ6IHRoaXMubWFwLnBhcmVudCxcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLm1hcC5kYXRhW3ggKyB0aGlzLm1pblggKyAoeSArIHRoaXMubWluWSkgKiB0aGlzLm1hcC53aWR0aF0gPT09XG4gICAgICAgICAgICB0aGlzLmlkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICAvLyBpdCBhbHNvIGhhcyB0byBiZSBvbiBhIGJvcmRlciAuLi5cbiAgICAgICAgICAgIGlmICh4ID4gMCAmJiB4IDwgdGhpcy53aWR0aCAtIDEgJiYgeSA+IDAgJiYgeSA8IHRoaXMuaGVpZ2h0IC0gMSkge1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZGF0YVtcbiAgICAgICAgICAgICAgICAgIHggLSAxICsgdGhpcy5taW5YICsgKHkgKyB0aGlzLm1pblkpICogdGhpcy5tYXAud2lkdGhcbiAgICAgICAgICAgICAgICBdICE9PSB0aGlzLmlkIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZGF0YVtcbiAgICAgICAgICAgICAgICAgIHggKyAxICsgdGhpcy5taW5YICsgKHkgKyB0aGlzLm1pblkpICogdGhpcy5tYXAud2lkdGhcbiAgICAgICAgICAgICAgICBdICE9PSB0aGlzLmlkIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZGF0YVtcbiAgICAgICAgICAgICAgICAgIHggKyB0aGlzLm1pblggKyAoeSAtIDEgKyB0aGlzLm1pblkpICogdGhpcy5tYXAud2lkdGhcbiAgICAgICAgICAgICAgICBdICE9PSB0aGlzLmlkIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5tYXAuZGF0YVtcbiAgICAgICAgICAgICAgICAgIHggKyB0aGlzLm1pblggKyAoeSArIDEgKyB0aGlzLm1pblkpICogdGhpcy5tYXAud2lkdGhcbiAgICAgICAgICAgICAgICBdICE9PSB0aGlzLmlkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGltZy5zZXRCaXRYWSh4LCB5KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgaW1nLnNldEJpdFhZKHgsIHkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jb21wdXRlZC5jb250b3VyTWFzayA9IGltZztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQuY29udG91ck1hc2s7XG4gIH1cblxuICBnZXQgYm94TWFzaygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQuYm94TWFzaykge1xuICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwge1xuICAgICAgICBraW5kOiBLaW5kTmFtZXMuQklOQVJZLFxuICAgICAgICBwb3NpdGlvbjogW3RoaXMubWluWCwgdGhpcy5taW5ZXSxcbiAgICAgICAgcGFyZW50OiB0aGlzLm1hcC5wYXJlbnQsXG4gICAgICB9KTtcblxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgaW1nLnNldEJpdFhZKHgsIDApO1xuICAgICAgICBpbWcuc2V0Qml0WFkoeCwgdGhpcy5oZWlnaHQgLSAxKTtcbiAgICAgIH1cbiAgICAgIGZvciAobGV0IHkgPSAwOyB5IDwgdGhpcy5oZWlnaHQ7IHkrKykge1xuICAgICAgICBpbWcuc2V0Qml0WFkoMCwgeSk7XG4gICAgICAgIGltZy5zZXRCaXRYWSh0aGlzLndpZHRoIC0gMSwgeSk7XG4gICAgICB9XG4gICAgICB0aGlzLmNvbXB1dGVkLmJveE1hc2sgPSBpbWc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmJveE1hc2s7XG4gIH1cblxuICAvKipcbiAgICAgUmV0dXJucyBhIGJpbmFyeSBpbWFnZSBjb250YWluaW5nIHRoZSBtYXNrXG4gICAgICovXG4gIGdldCBtYXNrKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5tYXNrKSB7XG4gICAgICBsZXQgaW1nID0gbmV3IEltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmROYW1lcy5CSU5BUlksXG4gICAgICAgIHBvc2l0aW9uOiBbdGhpcy5taW5YLCB0aGlzLm1pblldLFxuICAgICAgICBwYXJlbnQ6IHRoaXMubWFwLnBhcmVudCxcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLm1hcC5kYXRhW3ggKyB0aGlzLm1pblggKyAoeSArIHRoaXMubWluWSkgKiB0aGlzLm1hcC53aWR0aF0gPT09XG4gICAgICAgICAgICB0aGlzLmlkXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBpbWcuc2V0Qml0WFkoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNvbXB1dGVkLm1hc2sgPSBpbWc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLm1hc2s7XG4gIH1cblxuICBnZXQgZmlsbGVkTWFzaygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQuZmlsbGVkTWFzaykge1xuICAgICAgbGV0IGltZyA9IG5ldyBJbWFnZSh0aGlzLndpZHRoLCB0aGlzLmhlaWdodCwge1xuICAgICAgICBraW5kOiBLaW5kTmFtZXMuQklOQVJZLFxuICAgICAgICBwb3NpdGlvbjogW3RoaXMubWluWCwgdGhpcy5taW5ZXSxcbiAgICAgICAgcGFyZW50OiB0aGlzLm1hcC5wYXJlbnQsXG4gICAgICB9KTtcblxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgbGV0IHRhcmdldCA9IHggKyB0aGlzLm1pblggKyAoeSArIHRoaXMubWluWSkgKiB0aGlzLm1hcC53aWR0aDtcbiAgICAgICAgICBpZiAodGhpcy5pbnRlcm5hbElEcy5pbmNsdWRlcyh0aGlzLm1hcC5kYXRhW3RhcmdldF0pKSB7XG4gICAgICAgICAgICBpbWcuc2V0Qml0WFkoeCwgeSk7XG4gICAgICAgICAgfSAvLyBieSBkZWZhdWx0IGEgcGl4ZWwgaXMgdG8gMCBzbyBubyBwcm9ibGVtcywgaXQgd2lsbCBiZSB0cmFuc3BhcmVudFxuICAgICAgICB9XG4gICAgICB9XG4gICAgICB0aGlzLmNvbXB1dGVkLmZpbGxlZE1hc2sgPSBpbWc7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLmZpbGxlZE1hc2s7XG4gIH1cblxuICBnZXQgY2VudGVyTWFzaygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQuY2VudGVyTWFzaykge1xuICAgICAgbGV0IGltZyA9IG5ldyBTaGFwZSh7IGtpbmQ6ICdzbWFsbENyb3NzJyB9KS5nZXRNYXNrKCk7XG5cbiAgICAgIGltZy5wYXJlbnQgPSB0aGlzLm1hcC5wYXJlbnQ7XG4gICAgICBpbWcucG9zaXRpb24gPSBbXG4gICAgICAgIHRoaXMubWluWCArIHRoaXMuY2VudGVyWzBdIC0gMSxcbiAgICAgICAgdGhpcy5taW5ZICsgdGhpcy5jZW50ZXJbMV0gLSAxLFxuICAgICAgXTtcblxuICAgICAgdGhpcy5jb21wdXRlZC5jZW50ZXJNYXNrID0gaW1nO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5jZW50ZXJNYXNrO1xuICB9XG5cbiAgZ2V0IGNvbnZleEh1bGwoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmNvbnZleEh1bGwpIHtcbiAgICAgIGNvbnN0IGNhbGN1bGF0aW9uUG9pbnRzID0gW107XG4gICAgICAvLyBzbG93IGFwcHJvYWNoLCB3ZSBjaGVjayBhbGwgdGhlIHBvaW50c1xuICAgICAgLy8gZm9yIGVhY2ggcG9pbnQgd2UgdGFrZSB0aGUgNCBjb3JuZXJzICEhISFcblxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCB0aGlzLndpZHRoOyB4KyspIHtcbiAgICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgdGhpcy5tYXAuZGF0YVt4ICsgdGhpcy5taW5YICsgKHkgKyB0aGlzLm1pblkpICogdGhpcy5tYXAud2lkdGhdID09PVxuICAgICAgICAgICAgdGhpcy5pZFxuICAgICAgICAgICkge1xuICAgICAgICAgICAgLy8gaXQgYWxzbyBoYXMgdG8gYmUgb24gYSBib3JkZXIgLi4uXG4gICAgICAgICAgICBpZiAoeCA+IDAgJiYgeCA8IHRoaXMud2lkdGggLSAxICYmIHkgPiAwICYmIHkgPCB0aGlzLmhlaWdodCAtIDEpIHtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgIHRoaXMubWFwLmRhdGFbXG4gICAgICAgICAgICAgICAgICB4IC0gMSArIHRoaXMubWluWCArICh5ICsgdGhpcy5taW5ZKSAqIHRoaXMubWFwLndpZHRoXG4gICAgICAgICAgICAgICAgXSAhPT0gdGhpcy5pZCB8fFxuICAgICAgICAgICAgICAgIHRoaXMubWFwLmRhdGFbXG4gICAgICAgICAgICAgICAgICB4ICsgMSArIHRoaXMubWluWCArICh5ICsgdGhpcy5taW5ZKSAqIHRoaXMubWFwLndpZHRoXG4gICAgICAgICAgICAgICAgXSAhPT0gdGhpcy5pZCB8fFxuICAgICAgICAgICAgICAgIHRoaXMubWFwLmRhdGFbXG4gICAgICAgICAgICAgICAgICB4ICsgdGhpcy5taW5YICsgKHkgLSAxICsgdGhpcy5taW5ZKSAqIHRoaXMubWFwLndpZHRoXG4gICAgICAgICAgICAgICAgXSAhPT0gdGhpcy5pZCB8fFxuICAgICAgICAgICAgICAgIHRoaXMubWFwLmRhdGFbXG4gICAgICAgICAgICAgICAgICB4ICsgdGhpcy5taW5YICsgKHkgKyAxICsgdGhpcy5taW5ZKSAqIHRoaXMubWFwLndpZHRoXG4gICAgICAgICAgICAgICAgXSAhPT0gdGhpcy5pZFxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGlvblBvaW50cy5wdXNoKFt4LCB5XSk7XG4gICAgICAgICAgICAgICAgY2FsY3VsYXRpb25Qb2ludHMucHVzaChbeCArIDEsIHldKTtcbiAgICAgICAgICAgICAgICBjYWxjdWxhdGlvblBvaW50cy5wdXNoKFt4LCB5ICsgMV0pO1xuICAgICAgICAgICAgICAgIGNhbGN1bGF0aW9uUG9pbnRzLnB1c2goW3ggKyAxLCB5ICsgMV0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjYWxjdWxhdGlvblBvaW50cy5wdXNoKFt4LCB5XSk7XG4gICAgICAgICAgICAgIGNhbGN1bGF0aW9uUG9pbnRzLnB1c2goW3ggKyAxLCB5XSk7XG4gICAgICAgICAgICAgIGNhbGN1bGF0aW9uUG9pbnRzLnB1c2goW3gsIHkgKyAxXSk7XG4gICAgICAgICAgICAgIGNhbGN1bGF0aW9uUG9pbnRzLnB1c2goW3ggKyAxLCB5ICsgMV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBjb25zdCBjb252ZXhIdWxsID0gbWNjaChjYWxjdWxhdGlvblBvaW50cyk7XG5cbiAgICAgIHRoaXMuY29tcHV0ZWQuY29udmV4SHVsbCA9IHtcbiAgICAgICAgcG9seWxpbmU6IGNvbnZleEh1bGwsXG4gICAgICAgIHN1cmZhY2U6IHN1cmZhY2UoY29udmV4SHVsbCksXG4gICAgICAgIHBlcmltZXRlcjogcGVyaW1ldGVyKGNvbnZleEh1bGwpLFxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQuY29udmV4SHVsbDtcbiAgfVxuXG4gIGdldCBjb252ZXhIdWxsTWFzaygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQuY29udmV4SHVsbE1hc2spIHtcbiAgICAgIGNvbnN0IGNvbnZleEh1bGwgPSB0aGlzLmNvbnZleEh1bGw7XG4gICAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UodGhpcy53aWR0aCArIDEsIHRoaXMuaGVpZ2h0ICsgMSwge1xuICAgICAgICBraW5kOiBLaW5kTmFtZXMuQklOQVJZLFxuICAgICAgICBwb3NpdGlvbjogW3RoaXMubWluWCwgdGhpcy5taW5ZXSxcbiAgICAgICAgcGFyZW50OiB0aGlzLm1hcC5wYXJlbnQsXG4gICAgICB9KTtcbiAgICAgIGltZy5wYWludFBvbHlsaW5lKGNvbnZleEh1bGwucG9seWxpbmUsIHsgY2xvc2VkOiB0cnVlIH0pO1xuICAgICAgdGhpcy5jb21wdXRlZC5jb252ZXhIdWxsTWFzayA9IGltZztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQuY29udmV4SHVsbE1hc2s7XG4gIH1cblxuICBnZXQgY29udmV4SHVsbEZpbGxlZE1hc2soKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmNvbnZleEh1bGxGaWxsZWRNYXNrKSB7XG4gICAgICBjb25zdCBjb252ZXhIdWxsID0gdGhpcy5jb252ZXhIdWxsO1xuICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmROYW1lcy5CSU5BUlksXG4gICAgICAgIHBvc2l0aW9uOiBbdGhpcy5taW5YLCB0aGlzLm1pblldLFxuICAgICAgICBwYXJlbnQ6IHRoaXMubWFwLnBhcmVudCxcbiAgICAgIH0pO1xuXG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICBpZiAocm9idXN0UG9pbnRJblBvbHlnb24oY29udmV4SHVsbC5wb2x5bGluZSwgW3gsIHldKSAhPT0gMSkge1xuICAgICAgICAgICAgaW1nLnNldEJpdFhZKHgsIHkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICB0aGlzLmNvbXB1dGVkLmNvbnZleEh1bGxGaWxsZWRNYXNrID0gaW1nO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5jb252ZXhIdWxsRmlsbGVkTWFzaztcbiAgfVxuXG4gIGdldCBtYnIoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLm1icikge1xuICAgICAgbGV0IG1iciA9IG1pbmltYWxCb3VuZGluZ1JlY3RhbmdsZSh7XG4gICAgICAgIG9yaWdpbmFsUG9pbnRzOiB0aGlzLmNvbnZleEh1bGwucG9seWxpbmUsXG4gICAgICB9KTtcbiAgICAgIGlmIChtYnIubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHRoaXMuY29tcHV0ZWQubWJyID0ge1xuICAgICAgICAgIHdpZHRoOiAwLFxuICAgICAgICAgIGhlaWdodDogMCxcbiAgICAgICAgICBzdXJmYWNlOiAwLFxuICAgICAgICAgIHBlcmltZXRlcjogMCxcbiAgICAgICAgICByZWN0YW5nbGU6IG1icixcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxldCBmaXJzdCA9IG1iclswXTtcbiAgICAgICAgbGV0IHNlY29uZCA9IG1iclsxXTtcbiAgICAgICAgbGV0IHRoaXJkID0gbWJyWzJdO1xuICAgICAgICBsZXQgd2lkdGggPSBNYXRoLnNxcnQoXG4gICAgICAgICAgKGZpcnN0WzBdIC0gc2Vjb25kWzBdKSAqKiAyICsgKGZpcnN0WzFdIC0gc2Vjb25kWzFdKSAqKiAyLFxuICAgICAgICApO1xuICAgICAgICBsZXQgaGVpZ2h0ID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICh0aGlyZFswXSAtIHNlY29uZFswXSkgKiogMiArICh0aGlyZFsxXSAtIHNlY29uZFsxXSkgKiogMixcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcy5jb21wdXRlZC5tYnIgPSB7XG4gICAgICAgICAgd2lkdGgsXG4gICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgIGVsb25nYXRpb246IDEgLSB3aWR0aCAvIGhlaWdodCxcbiAgICAgICAgICBhc3BlY3RSYXRpbzogd2lkdGggLyBoZWlnaHQsXG4gICAgICAgICAgc3VyZmFjZTogd2lkdGggKiBoZWlnaHQsXG4gICAgICAgICAgcGVyaW1ldGVyOiAod2lkdGggKyBoZWlnaHQpICogMixcbiAgICAgICAgICByZWN0YW5nbGU6IG1icixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQubWJyO1xuICB9XG5cbiAgZ2V0IGZpbGxSYXRpbygpIHtcbiAgICByZXR1cm4gdGhpcy5zdXJmYWNlIC8gKHRoaXMuc3VyZmFjZSArIHRoaXMuaG9sZXNJbmZvLnN1cmZhY2UpO1xuICB9XG5cbiAgZ2V0IGZlcmV0RGlhbWV0ZXJzKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5mZXJldERpYW1ldGVycykge1xuICAgICAgdGhpcy5jb21wdXRlZC5mZXJldERpYW1ldGVycyA9IGZlcmV0RGlhbWV0ZXJzKHtcbiAgICAgICAgb3JpZ2luYWxQb2ludHM6IHRoaXMuY29udmV4SHVsbC5wb2x5bGluZSxcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5mZXJldERpYW1ldGVycztcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiBhIGNpcmNsZSBvZiBlcXVhbCBwcm9qZWN0aW9uIGFyZWFcbiAgICovXG4gIGdldCBlcXBjKCkge1xuICAgIGlmICghdGhpcy5jb21wdXRlZC5lcXBjKSB7XG4gICAgICB0aGlzLmNvbXB1dGVkLmVxcGMgPSAyICogTWF0aC5zcXJ0KHRoaXMuc3VyZmFjZSAvIE1hdGguUEkpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5lcXBjO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY2F0ZWdvcnkgaW4gd2hpY2ggZWFjaCBleHRlcm5hbCBwaXhlbCBiZWxvbmdzXG4gICAqL1xuICBnZXQgcGVyaW1ldGVySW5mbygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQucGVyaW1ldGVySW5mbykge1xuICAgICAgdGhpcy5jb21wdXRlZC5wZXJpbWV0ZXJJbmZvID0gZ2V0UGVyaW1ldGVySW5mbyh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQucGVyaW1ldGVySW5mbztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm4gdGhlIHBlcmltZXRlciBvZiB0aGUgUk9JXG4gICAqL1xuICBnZXQgcGVyaW1ldGVyKCkge1xuICAgIGxldCBpbmZvID0gdGhpcy5wZXJpbWV0ZXJJbmZvO1xuICAgIGxldCBkZWx0YSA9IDIgLSBNYXRoLnNxcnQoMik7XG4gICAgcmV0dXJuIChcbiAgICAgIGluZm8ub25lICtcbiAgICAgIGluZm8udHdvICogMiArXG4gICAgICBpbmZvLnRocmVlICogMyArXG4gICAgICBpbmZvLmZvdXIgKiA0IC1cbiAgICAgIGRlbHRhICogKGluZm8udHdvICsgaW5mby50aHJlZSAqIDIgKyBpbmZvLmZvdXIpXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBEaWFtZXRlciBvZiBhIGNpcmNsZSBvZiBlcXVhbCBwZXJpbWV0ZXJcbiAgICovXG4gIGdldCBwZWQoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLnBlZCkge1xuICAgICAgdGhpcy5jb21wdXRlZC5wZWQgPSB0aGlzLnBlcmltZXRlciAvIE1hdGguUEk7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLnBlZDtcbiAgfVxuXG4gIGdldCBmZXJldE1hc2soKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmZlcmV0TWFzaykge1xuICAgICAgY29uc3QgaW1hZ2UgPSBuZXcgSW1hZ2UodGhpcy53aWR0aCArIDEsIHRoaXMuaGVpZ2h0ICsgMSwge1xuICAgICAgICBraW5kOiBLaW5kTmFtZXMuQklOQVJZLFxuICAgICAgICBwb3NpdGlvbjogW3RoaXMubWluWCwgdGhpcy5taW5ZXSxcbiAgICAgICAgcGFyZW50OiB0aGlzLm1hcC5wYXJlbnQsXG4gICAgICB9KTtcblxuICAgICAgaW1hZ2UucGFpbnRQb2x5bGluZSh0aGlzLmZlcmV0RGlhbWV0ZXJzLm1pbkxpbmUpO1xuICAgICAgaW1hZ2UucGFpbnRQb2x5bGluZSh0aGlzLmZlcmV0RGlhbWV0ZXJzLm1heExpbmUpO1xuICAgICAgdGhpcy5jb21wdXRlZC5mZXJldE1hc2sgPSBpbWFnZTtcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQuZmVyZXRNYXNrO1xuICB9XG5cbiAgZ2V0IG1ick1hc2soKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLm1ick1hc2spIHtcbiAgICAgIGxldCByZWN0YW5nbGUgPSByb3VuZCh0aGlzLm1ici5yZWN0YW5nbGUpO1xuICAgICAgaWYgKHJlY3RhbmdsZS5sZW5ndGggPiAwKSB7XG4gICAgICAgIC8vIHRoZSBwcm9ibGVtIGlzIHRoYXQgdGhlIHJlY3RhbmdsZSBtYXkgYmUgb3V0c2lkZSB0aGUgcm9pXG4gICAgICAgIGNvbnN0IG1pbk1heCA9IG1pbk1heEZjdChyZWN0YW5nbGUpO1xuXG4gICAgICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZShcbiAgICAgICAgICBtaW5NYXhbMV1bMF0gLSBtaW5NYXhbMF1bMF0gKyAxLFxuICAgICAgICAgIG1pbk1heFsxXVsxXSAtIG1pbk1heFswXVsxXSArIDEsXG4gICAgICAgICAge1xuICAgICAgICAgICAga2luZDogS2luZE5hbWVzLkJJTkFSWSxcbiAgICAgICAgICAgIHBvc2l0aW9uOiBbdGhpcy5taW5YICsgbWluTWF4WzBdWzBdLCB0aGlzLm1pblkgKyBtaW5NYXhbMF1bMV1dLFxuICAgICAgICAgICAgcGFyZW50OiB0aGlzLm1hcC5wYXJlbnQsXG4gICAgICAgICAgfSxcbiAgICAgICAgKTtcblxuICAgICAgICByZWN0YW5nbGUgPSBtb3ZlVG9aZXJvWmVybyhyZWN0YW5nbGUpO1xuXG4gICAgICAgIGltZy5wYWludFBvbHlsaW5lKHJlY3RhbmdsZSwgeyBjbG9zZWQ6IHRydWUgfSk7XG4gICAgICAgIHRoaXMuY29tcHV0ZWQubWJyTWFzayA9IGltZztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuY29tcHV0ZWQubWJyTWFzayA9IG5ldyBJbWFnZSgxLCAxLCB7XG4gICAgICAgICAga2luZDogS2luZE5hbWVzLkJJTkFSWSxcbiAgICAgICAgICBwb3NpdGlvbjogW3RoaXMubWluWCwgdGhpcy5taW5ZXSxcbiAgICAgICAgICBwYXJlbnQ6IHRoaXMubWFwLnBhcmVudCxcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLm1ick1hc2s7XG4gIH1cblxuICBnZXQgbWJyRmlsbGVkTWFzaygpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQubWJyRmlsbGVkTWFzaykge1xuICAgICAgY29uc3QgaW1nID0gbmV3IEltYWdlKHRoaXMud2lkdGgsIHRoaXMuaGVpZ2h0LCB7XG4gICAgICAgIGtpbmQ6IEtpbmROYW1lcy5CSU5BUlksXG4gICAgICAgIHBvc2l0aW9uOiBbdGhpcy5taW5YLCB0aGlzLm1pblldLFxuICAgICAgICBwYXJlbnQ6IHRoaXMubWFwLnBhcmVudCxcbiAgICAgIH0pO1xuXG4gICAgICBjb25zdCBtYnIgPSB0aGlzLm1hc2subWluaW1hbEJvdW5kaW5nUmVjdGFuZ2xlKCk7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHRoaXMuaGVpZ2h0OyB5KyspIHtcbiAgICAgICAgICBpZiAocm9idXN0UG9pbnRJblBvbHlnb24obWJyLCBbeCwgeV0pICE9PSAxKSB7XG4gICAgICAgICAgICBpbWcuc2V0Qml0WFkoeCwgeSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHRoaXMuY29tcHV0ZWQubWJyRmlsbGVkTWFzayA9IGltZztcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuY29tcHV0ZWQubWJyRmlsbGVkTWFzaztcbiAgfVxuXG4gIGdldCBwb2ludHMoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLnBvaW50cykge1xuICAgICAgbGV0IHBvaW50cyA9IFtdO1xuICAgICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy53aWR0aDsgeCsrKSB7XG4gICAgICAgICAgbGV0IHRhcmdldCA9ICh5ICsgdGhpcy5taW5ZKSAqIHRoaXMubWFwLndpZHRoICsgeCArIHRoaXMubWluWDtcbiAgICAgICAgICBpZiAodGhpcy5tYXAuZGF0YVt0YXJnZXRdID09PSB0aGlzLmlkKSB7XG4gICAgICAgICAgICBwb2ludHMucHVzaChbeCwgeV0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jb21wdXRlZC5wb2ludHMgPSBwb2ludHM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLnBvaW50cztcbiAgfVxuXG4gIGdldCBtYXhMZW5ndGhQb2ludHMoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLm1heExlbmd0aFBvaW50cykge1xuICAgICAgbGV0IG1heExlbmd0aCA9IDA7XG4gICAgICBsZXQgbWF4TGVuZ3RoUG9pbnRzO1xuICAgICAgY29uc3QgcG9pbnRzID0gdGhpcy5wb2ludHM7XG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IHBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgICAgIGxldCBjdXJyZW50TUwgPVxuICAgICAgICAgICAgTWF0aC5wb3cocG9pbnRzW2ldWzBdIC0gcG9pbnRzW2pdWzBdLCAyKSArXG4gICAgICAgICAgICBNYXRoLnBvdyhwb2ludHNbaV1bMV0gLSBwb2ludHNbal1bMV0sIDIpO1xuICAgICAgICAgIGlmIChjdXJyZW50TUwgPj0gbWF4TGVuZ3RoKSB7XG4gICAgICAgICAgICBtYXhMZW5ndGggPSBjdXJyZW50TUw7XG4gICAgICAgICAgICBtYXhMZW5ndGhQb2ludHMgPSBbcG9pbnRzW2ldLCBwb2ludHNbal1dO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdGhpcy5jb21wdXRlZC5tYXhMZW5ndGhQb2ludHMgPSBtYXhMZW5ndGhQb2ludHM7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLm1heExlbmd0aFBvaW50cztcbiAgfVxuXG4gIC8qKlxuICAgICAgICBDYWxjdWxhdGVzIHRoZSBtYXhpbXVtIGxlbmd0aCBiZXR3ZWVuIHR3byBwaXhlbHMgb2YgdGhlIFJvaS5cbiAgICAgKi9cbiAgZ2V0IG1heExlbmd0aCgpIHtcbiAgICBpZiAoIXRoaXMuY29tcHV0ZWQubWF4TGVuZ3RoKSB7XG4gICAgICBsZXQgbWF4TGVuZ3RoID0gTWF0aC5zcXJ0KFxuICAgICAgICBNYXRoLnBvdyh0aGlzLm1heExlbmd0aFBvaW50c1swXVswXSAtIHRoaXMubWF4TGVuZ3RoUG9pbnRzWzFdWzBdLCAyKSArXG4gICAgICAgICAgTWF0aC5wb3codGhpcy5tYXhMZW5ndGhQb2ludHNbMF1bMV0gLSB0aGlzLm1heExlbmd0aFBvaW50c1sxXVsxXSwgMiksXG4gICAgICApO1xuICAgICAgdGhpcy5jb21wdXRlZC5tYXhMZW5ndGggPSBtYXhMZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiB0aGlzLmNvbXB1dGVkLm1heExlbmd0aDtcbiAgfVxuXG4gIGdldCByb3VuZG5lc3MoKSB7XG4gICAgLypTbGlkZSAyNCBodHRwczovL3N0YXRpYy5ob3JpYmEuY29tL2ZpbGVhZG1pbi9Ib3JpYmEvUHJvZHVjdHMvU2NpZW50aWZpYy9QYXJ0aWNsZV9DaGFyYWN0ZXJpemF0aW9uL1dlYmluYXJzL1NsaWRlcy9URTAxMS5wZGYgKi9cbiAgICByZXR1cm4gKDQgKiB0aGlzLnN1cmZhY2UpIC8gKE1hdGguUEkgKiB0aGlzLmZlcmV0RGlhbWV0ZXJzLm1heCAqKiAyKTtcbiAgfVxuXG4gIGdldCBzcGhlcmljaXR5KCkge1xuICAgIHJldHVybiAoMiAqIE1hdGguc3FydCh0aGlzLnN1cmZhY2UgKiBNYXRoLlBJKSkgLyB0aGlzLnBlcmltZXRlcjtcbiAgfVxuXG4gIGdldCBzb2xpZGl0eSgpIHtcbiAgICByZXR1cm4gdGhpcy5zdXJmYWNlIC8gdGhpcy5jb252ZXhIdWxsLnN1cmZhY2U7XG4gIH1cblxuICBnZXQgYW5nbGUoKSB7XG4gICAgaWYgKCF0aGlzLmNvbXB1dGVkLmFuZ2xlKSB7XG4gICAgICBsZXQgcG9pbnRzID0gdGhpcy5tYXhMZW5ndGhQb2ludHM7XG4gICAgICBsZXQgYW5nbGUgPVxuICAgICAgICAoLU1hdGguYXRhbjIocG9pbnRzWzBdWzFdIC0gcG9pbnRzWzFdWzFdLCBwb2ludHNbMF1bMF0gLSBwb2ludHNbMV1bMF0pICpcbiAgICAgICAgICAxODApIC9cbiAgICAgICAgTWF0aC5QSTtcblxuICAgICAgdGhpcy5jb21wdXRlZC5hbmdsZSA9IGFuZ2xlO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5jb21wdXRlZC5hbmdsZTtcbiAgfVxuXG4gIHRvSlNPTigpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaWQ6IHRoaXMuaWQsXG4gICAgICBtaW5YOiB0aGlzLm1pblgsXG4gICAgICBtYXhYOiB0aGlzLm1heFgsXG4gICAgICBtaW5ZOiB0aGlzLm1pblksXG4gICAgICBtYXhZOiB0aGlzLm1heFksXG4gICAgICBtZWFuWDogdGhpcy5tZWFuWCxcbiAgICAgIG1lYW5ZOiB0aGlzLm1lYW5ZLFxuICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodCxcbiAgICAgIHdpZHRoOiB0aGlzLndpZHRoLFxuICAgICAgc3VyZmFjZTogdGhpcy5zdXJmYWNlLFxuICAgICAgbWJyV2lkdGg6IHRoaXMubWJyLndpZHRoLFxuICAgICAgbWJySGVpZ2h0OiB0aGlzLm1ici5oZWlnaHQsXG4gICAgICBtYnJTdXJmYWNlOiB0aGlzLm1ici5zdXJmYWNlLFxuICAgICAgZXFwYzogdGhpcy5lcXBjLFxuICAgICAgcGVkOiB0aGlzLnBlZCxcbiAgICAgIGZlcmV0RGlhbWV0ZXJNaW46IHRoaXMuZmVyZXREaWFtZXRlcnMubWluLFxuICAgICAgZmVyZXREaWFtZXRlck1heDogdGhpcy5mZXJldERpYW1ldGVycy5tYXgsXG4gICAgICBhc3BlY3RSYXRpbzogdGhpcy5mZXJldERpYW1ldGVycy5hc3BlY3RSYXRpbyxcbiAgICAgIGZpbGxSYXRpbzogdGhpcy5maWxsUmF0aW8sXG4gICAgICBzcGhlcmljaXR5OiB0aGlzLnNwaGVyaWNpdHksXG4gICAgICByb3VuZG5lc3M6IHRoaXMucm91bmRuZXNzLFxuICAgICAgc29saWRpdHk6IHRoaXMuc29saWRpdHksXG4gICAgICBwZXJpbWV0ZXI6IHRoaXMucGVyaW1ldGVyLFxuICAgIH07XG4gIH1cbn1cblxuLy8gVE9ETyB3ZSBzaG91bGQgZm9sbG93IHRoZSByZWdpb24gaW4gb3JkZXIgdG8gaW5jcmVhc2UgdGhlIHNwZWVkXG5cbmZ1bmN0aW9uIGdldEJvcmRlcnMocm9pKSB7XG4gIGxldCByb2lNYXAgPSByb2kubWFwO1xuICBsZXQgZGF0YSA9IHJvaU1hcC5kYXRhO1xuICBsZXQgc3Vycm91ZGluZ0lEcyA9IG5ldyBTZXQoKTsgLy8gYWxsb3dzIHRvIGdldCBhIHVuaXF1ZSBsaXN0IHdpdGhvdXQgaW5kZXhPZlxuICBsZXQgc3Vycm91bmRpbmdCb3JkZXJzID0gbmV3IE1hcCgpO1xuICBsZXQgdmlzaXRlZERhdGEgPSBuZXcgU2V0KCk7XG4gIGxldCBkeCA9IFsrMSwgMCwgLTEsIDBdO1xuICBsZXQgZHkgPSBbMCwgKzEsIDAsIC0xXTtcblxuICBmb3IgKGxldCB4ID0gcm9pLm1pblg7IHggPD0gcm9pLm1heFg7IHgrKykge1xuICAgIGZvciAobGV0IHkgPSByb2kubWluWTsgeSA8PSByb2kubWF4WTsgeSsrKSB7XG4gICAgICBsZXQgdGFyZ2V0ID0geCArIHkgKiByb2lNYXAud2lkdGg7XG4gICAgICBpZiAoZGF0YVt0YXJnZXRdID09PSByb2kuaWQpIHtcbiAgICAgICAgZm9yIChsZXQgZGlyID0gMDsgZGlyIDwgNDsgZGlyKyspIHtcbiAgICAgICAgICBsZXQgbmV3WCA9IHggKyBkeFtkaXJdO1xuICAgICAgICAgIGxldCBuZXdZID0geSArIGR5W2Rpcl07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgbmV3WCA+PSAwICYmXG4gICAgICAgICAgICBuZXdZID49IDAgJiZcbiAgICAgICAgICAgIG5ld1ggPCByb2lNYXAud2lkdGggJiZcbiAgICAgICAgICAgIG5ld1kgPCByb2lNYXAuaGVpZ2h0XG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBsZXQgbmVpZ2hib3VyID0gbmV3WCArIG5ld1kgKiByb2lNYXAud2lkdGg7XG5cbiAgICAgICAgICAgIGlmIChkYXRhW25laWdoYm91cl0gIT09IHJvaS5pZCAmJiAhdmlzaXRlZERhdGEuaGFzKG5laWdoYm91cikpIHtcbiAgICAgICAgICAgICAgdmlzaXRlZERhdGEuYWRkKG5laWdoYm91cik7XG4gICAgICAgICAgICAgIHN1cnJvdWRpbmdJRHMuYWRkKGRhdGFbbmVpZ2hib3VyXSk7XG4gICAgICAgICAgICAgIGxldCBzdXJyb3VuZGluZ0JvcmRlciA9IHN1cnJvdW5kaW5nQm9yZGVycy5nZXQoZGF0YVtuZWlnaGJvdXJdKTtcbiAgICAgICAgICAgICAgaWYgKCFzdXJyb3VuZGluZ0JvcmRlcikge1xuICAgICAgICAgICAgICAgIHN1cnJvdW5kaW5nQm9yZGVycy5zZXQoZGF0YVtuZWlnaGJvdXJdLCAxKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBzdXJyb3VuZGluZ0JvcmRlcnMuc2V0KGRhdGFbbmVpZ2hib3VyXSwgKytzdXJyb3VuZGluZ0JvcmRlcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgbGV0IGlkcyA9IEFycmF5LmZyb20oc3Vycm91ZGluZ0lEcyk7XG4gIGxldCBib3JkZXJMZW5ndGhzID0gaWRzLm1hcChmdW5jdGlvbiAoaWQpIHtcbiAgICByZXR1cm4gc3Vycm91bmRpbmdCb3JkZXJzLmdldChpZCk7XG4gIH0pO1xuICByZXR1cm4ge1xuICAgIGlkczogaWRzLFxuICAgIGxlbmd0aHM6IGJvcmRlckxlbmd0aHMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldEJveElEcyhyb2kpIHtcbiAgbGV0IHN1cnJvdW5kaW5nSURzID0gbmV3IFNldCgpOyAvLyBhbGxvd3MgdG8gZ2V0IGEgdW5pcXVlIGxpc3Qgd2l0aG91dCBpbmRleE9mXG5cbiAgbGV0IHJvaU1hcCA9IHJvaS5tYXA7XG4gIGxldCBkYXRhID0gcm9pTWFwLmRhdGE7XG5cbiAgLy8gd2UgY2hlY2sgdGhlIGZpcnN0IGxpbmUgYW5kIHRoZSBsYXN0IGxpbmVcbiAgZm9yIChsZXQgeSBvZiBbMCwgcm9pLmhlaWdodCAtIDFdKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCByb2kud2lkdGg7IHgrKykge1xuICAgICAgbGV0IHRhcmdldCA9ICh5ICsgcm9pLm1pblkpICogcm9pTWFwLndpZHRoICsgeCArIHJvaS5taW5YO1xuICAgICAgaWYgKFxuICAgICAgICB4IC0gcm9pLm1pblggPiAwICYmXG4gICAgICAgIGRhdGFbdGFyZ2V0XSA9PT0gcm9pLmlkICYmXG4gICAgICAgIGRhdGFbdGFyZ2V0IC0gMV0gIT09IHJvaS5pZFxuICAgICAgKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGFbdGFyZ2V0IC0gMV07XG4gICAgICAgIHN1cnJvdW5kaW5nSURzLmFkZCh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBpZiAoXG4gICAgICAgIHJvaU1hcC53aWR0aCAtIHggLSByb2kubWluWCA+IDEgJiZcbiAgICAgICAgZGF0YVt0YXJnZXRdID09PSByb2kuaWQgJiZcbiAgICAgICAgZGF0YVt0YXJnZXQgKyAxXSAhPT0gcm9pLmlkXG4gICAgICApIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZGF0YVt0YXJnZXQgKyAxXTtcbiAgICAgICAgc3Vycm91bmRpbmdJRHMuYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB3ZSBjaGVjayB0aGUgZmlyc3QgY29sdW1uIGFuZCB0aGUgbGFzdCBjb2x1bW5cbiAgZm9yIChsZXQgeCBvZiBbMCwgcm9pLndpZHRoIC0gMV0pIHtcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHJvaS5oZWlnaHQ7IHkrKykge1xuICAgICAgbGV0IHRhcmdldCA9ICh5ICsgcm9pLm1pblkpICogcm9pTWFwLndpZHRoICsgeCArIHJvaS5taW5YO1xuICAgICAgaWYgKFxuICAgICAgICB5IC0gcm9pLm1pblkgPiAwICYmXG4gICAgICAgIGRhdGFbdGFyZ2V0XSA9PT0gcm9pLmlkICYmXG4gICAgICAgIGRhdGFbdGFyZ2V0IC0gcm9pTWFwLndpZHRoXSAhPT0gcm9pLmlkXG4gICAgICApIHtcbiAgICAgICAgbGV0IHZhbHVlID0gZGF0YVt0YXJnZXQgLSByb2lNYXAud2lkdGhdO1xuICAgICAgICBzdXJyb3VuZGluZ0lEcy5hZGQodmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICByb2lNYXAuaGVpZ2h0IC0geSAtIHJvaS5taW5ZID4gMSAmJlxuICAgICAgICBkYXRhW3RhcmdldF0gPT09IHJvaS5pZCAmJlxuICAgICAgICBkYXRhW3RhcmdldCArIHJvaU1hcC53aWR0aF0gIT09IHJvaS5pZFxuICAgICAgKSB7XG4gICAgICAgIGxldCB2YWx1ZSA9IGRhdGFbdGFyZ2V0ICsgcm9pTWFwLndpZHRoXTtcbiAgICAgICAgc3Vycm91bmRpbmdJRHMuYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gQXJyYXkuZnJvbShzdXJyb3VuZGluZ0lEcyk7IC8vIHRoZSBzZWxlY3Rpb24gdGFrZXMgdGhlIHdob2xlIHJlY3RhbmdsZVxufVxuXG5mdW5jdGlvbiBnZXRCb3gocm9pKSB7XG4gIGxldCB0b3RhbCA9IDA7XG4gIGxldCByb2lNYXAgPSByb2kubWFwO1xuICBsZXQgZGF0YSA9IHJvaU1hcC5kYXRhO1xuXG4gIGxldCB0b3BCb3R0b20gPSBbMF07XG4gIGlmIChyb2kuaGVpZ2h0ID4gMSkge1xuICAgIHRvcEJvdHRvbVsxXSA9IHJvaS5oZWlnaHQgLSAxO1xuICB9XG4gIGZvciAobGV0IHkgb2YgdG9wQm90dG9tKSB7XG4gICAgZm9yIChsZXQgeCA9IDE7IHggPCByb2kud2lkdGggLSAxOyB4KyspIHtcbiAgICAgIGxldCB0YXJnZXQgPSAoeSArIHJvaS5taW5ZKSAqIHJvaU1hcC53aWR0aCArIHggKyByb2kubWluWDtcbiAgICAgIGlmIChkYXRhW3RhcmdldF0gPT09IHJvaS5pZCkge1xuICAgICAgICB0b3RhbCsrO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBsZWZ0UmlnaHQgPSBbMF07XG4gIGlmIChyb2kud2lkdGggPiAxKSB7XG4gICAgbGVmdFJpZ2h0WzFdID0gcm9pLndpZHRoIC0gMTtcbiAgfVxuICBmb3IgKGxldCB4IG9mIGxlZnRSaWdodCkge1xuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgcm9pLmhlaWdodDsgeSsrKSB7XG4gICAgICBsZXQgdGFyZ2V0ID0gKHkgKyByb2kubWluWSkgKiByb2lNYXAud2lkdGggKyB4ICsgcm9pLm1pblg7XG4gICAgICBpZiAoZGF0YVt0YXJnZXRdID09PSByb2kuaWQpIHtcbiAgICAgICAgdG90YWwrKztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRvdGFsO1xufVxuXG5mdW5jdGlvbiBnZXRCb3JkZXIocm9pKSB7XG4gIGxldCB0b3RhbCA9IDA7XG4gIGxldCByb2lNYXAgPSByb2kubWFwO1xuICBsZXQgZGF0YSA9IHJvaU1hcC5kYXRhO1xuXG4gIGZvciAobGV0IHggPSAxOyB4IDwgcm9pLndpZHRoIC0gMTsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDE7IHkgPCByb2kuaGVpZ2h0IC0gMTsgeSsrKSB7XG4gICAgICBsZXQgdGFyZ2V0ID0gKHkgKyByb2kubWluWSkgKiByb2lNYXAud2lkdGggKyB4ICsgcm9pLm1pblg7XG4gICAgICBpZiAoZGF0YVt0YXJnZXRdID09PSByb2kuaWQpIHtcbiAgICAgICAgLy8gaWYgYSBwb2ludCBhcm91bmQgaXMgbm90IHJvaS5pZCBpdCBpcyBhIGJvcmRlclxuICAgICAgICBpZiAoXG4gICAgICAgICAgZGF0YVt0YXJnZXQgLSAxXSAhPT0gcm9pLmlkIHx8XG4gICAgICAgICAgZGF0YVt0YXJnZXQgKyAxXSAhPT0gcm9pLmlkIHx8XG4gICAgICAgICAgZGF0YVt0YXJnZXQgLSByb2lNYXAud2lkdGhdICE9PSByb2kuaWQgfHxcbiAgICAgICAgICBkYXRhW3RhcmdldCArIHJvaU1hcC53aWR0aF0gIT09IHJvaS5pZFxuICAgICAgICApIHtcbiAgICAgICAgICB0b3RhbCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0b3RhbCArIHJvaS5ib3g7XG59XG5cbmZ1bmN0aW9uIGdldFBlcmltZXRlckluZm8ocm9pKSB7XG4gIGxldCByb2lNYXAgPSByb2kubWFwO1xuICBsZXQgZGF0YSA9IHJvaU1hcC5kYXRhO1xuICBsZXQgb25lID0gMDtcbiAgbGV0IHR3byA9IDA7XG4gIGxldCB0aHJlZSA9IDA7XG4gIGxldCBmb3VyID0gMDtcblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IHJvaS53aWR0aDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCByb2kuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGxldCB0YXJnZXQgPSAoeSArIHJvaS5taW5ZKSAqIHJvaU1hcC53aWR0aCArIHggKyByb2kubWluWDtcbiAgICAgIGlmIChkYXRhW3RhcmdldF0gPT09IHJvaS5pZCkge1xuICAgICAgICBsZXQgbmJBcm91bmQgPSAwO1xuICAgICAgICBpZiAoeCA9PT0gMCkge1xuICAgICAgICAgIG5iQXJvdW5kKys7XG4gICAgICAgIH0gZWxzZSBpZiAocm9pLmV4dGVybmFsSURzLmluY2x1ZGVzKGRhdGFbdGFyZ2V0IC0gMV0pKSB7XG4gICAgICAgICAgbmJBcm91bmQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh4ID09PSByb2kud2lkdGggLSAxKSB7XG4gICAgICAgICAgbmJBcm91bmQrKztcbiAgICAgICAgfSBlbHNlIGlmIChyb2kuZXh0ZXJuYWxJRHMuaW5jbHVkZXMoZGF0YVt0YXJnZXQgKyAxXSkpIHtcbiAgICAgICAgICBuYkFyb3VuZCsrO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHkgPT09IDApIHtcbiAgICAgICAgICBuYkFyb3VuZCsrO1xuICAgICAgICB9IGVsc2UgaWYgKHJvaS5leHRlcm5hbElEcy5pbmNsdWRlcyhkYXRhW3RhcmdldCAtIHJvaU1hcC53aWR0aF0pKSB7XG4gICAgICAgICAgbmJBcm91bmQrKztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh5ID09PSByb2kuaGVpZ2h0IC0gMSkge1xuICAgICAgICAgIG5iQXJvdW5kKys7XG4gICAgICAgIH0gZWxzZSBpZiAocm9pLmV4dGVybmFsSURzLmluY2x1ZGVzKGRhdGFbdGFyZ2V0ICsgcm9pTWFwLndpZHRoXSkpIHtcbiAgICAgICAgICBuYkFyb3VuZCsrO1xuICAgICAgICB9XG4gICAgICAgIHN3aXRjaCAobmJBcm91bmQpIHtcbiAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICBvbmUrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgIHR3bysrO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgdGhyZWUrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGNhc2UgNDpcbiAgICAgICAgICAgIGZvdXIrKztcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHsgb25lLCB0d28sIHRocmVlLCBmb3VyIH07XG59XG5cbmZ1bmN0aW9uIGdldEV4dGVybmFsKHJvaSkge1xuICBsZXQgdG90YWwgPSAwO1xuICBsZXQgcm9pTWFwID0gcm9pLm1hcDtcbiAgbGV0IGRhdGEgPSByb2lNYXAuZGF0YTtcblxuICBmb3IgKGxldCB4ID0gMTsgeCA8IHJvaS53aWR0aCAtIDE7IHgrKykge1xuICAgIGZvciAobGV0IHkgPSAxOyB5IDwgcm9pLmhlaWdodCAtIDE7IHkrKykge1xuICAgICAgbGV0IHRhcmdldCA9ICh5ICsgcm9pLm1pblkpICogcm9pTWFwLndpZHRoICsgeCArIHJvaS5taW5YO1xuICAgICAgaWYgKGRhdGFbdGFyZ2V0XSA9PT0gcm9pLmlkKSB7XG4gICAgICAgIC8vIGlmIGEgcG9pbnQgYXJvdW5kIGlzIG5vdCByb2kuaWQgaXQgaXMgYSBib3JkZXJcbiAgICAgICAgaWYgKFxuICAgICAgICAgIHJvaS5leHRlcm5hbElEcy5pbmNsdWRlcyhkYXRhW3RhcmdldCAtIDFdKSB8fFxuICAgICAgICAgIHJvaS5leHRlcm5hbElEcy5pbmNsdWRlcyhkYXRhW3RhcmdldCArIDFdKSB8fFxuICAgICAgICAgIHJvaS5leHRlcm5hbElEcy5pbmNsdWRlcyhkYXRhW3RhcmdldCAtIHJvaU1hcC53aWR0aF0pIHx8XG4gICAgICAgICAgcm9pLmV4dGVybmFsSURzLmluY2x1ZGVzKGRhdGFbdGFyZ2V0ICsgcm9pTWFwLndpZHRoXSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdG90YWwrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdG90YWwgKyByb2kuYm94O1xufVxuXG5mdW5jdGlvbiBnZXRIb2xlc0luZm8ocm9pKSB7XG4gIGxldCBzdXJmYWNlID0gMDtcbiAgbGV0IHdpZHRoID0gcm9pLm1hcC53aWR0aDtcbiAgbGV0IGRhdGEgPSByb2kubWFwLmRhdGE7XG4gIGZvciAobGV0IHggPSAxOyB4IDwgcm9pLndpZHRoIC0gMTsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDE7IHkgPCByb2kuaGVpZ2h0IC0gMTsgeSsrKSB7XG4gICAgICBsZXQgdGFyZ2V0ID0gKHkgKyByb2kubWluWSkgKiB3aWR0aCArIHggKyByb2kubWluWDtcbiAgICAgIGlmIChyb2kuaW50ZXJuYWxJRHMuaW5jbHVkZXMoZGF0YVt0YXJnZXRdKSAmJiBkYXRhW3RhcmdldF0gIT09IHJvaS5pZCkge1xuICAgICAgICBzdXJmYWNlKys7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB7XG4gICAgbnVtYmVyOiByb2kuaW50ZXJuYWxJRHMubGVuZ3RoIC0gMSxcbiAgICBzdXJmYWNlLFxuICB9O1xufVxuXG4vKlxuV2Ugd2lsbCBjYWxjdWxhdGUgYWxsIHRoZSBpZHMgb2YgdGhlIG1hcCB0aGF0IGFyZSBcImludGVybmFsXCJcblRoaXMgd2lsbCBhbGxvdyB0byBleHRyYWN0IHRoZSAncGxhaW4nIGltYWdlXG4gKi9cbmZ1bmN0aW9uIGdldEludGVybmFsSURzKHJvaSkge1xuICBsZXQgaW50ZXJuYWwgPSBbcm9pLmlkXTtcbiAgbGV0IHJvaU1hcCA9IHJvaS5tYXA7XG4gIGxldCBkYXRhID0gcm9pTWFwLmRhdGE7XG5cbiAgaWYgKHJvaS5oZWlnaHQgPiAyKSB7XG4gICAgZm9yIChsZXQgeCA9IDA7IHggPCByb2kud2lkdGg7IHgrKykge1xuICAgICAgbGV0IHRhcmdldCA9IHJvaS5taW5ZICogcm9pTWFwLndpZHRoICsgeCArIHJvaS5taW5YO1xuICAgICAgaWYgKGludGVybmFsLmluY2x1ZGVzKGRhdGFbdGFyZ2V0XSkpIHtcbiAgICAgICAgbGV0IGlkID0gZGF0YVt0YXJnZXQgKyByb2lNYXAud2lkdGhdO1xuICAgICAgICBpZiAoIWludGVybmFsLmluY2x1ZGVzKGlkKSAmJiAhcm9pLmJveElEcy5pbmNsdWRlcyhpZCkpIHtcbiAgICAgICAgICBpbnRlcm5hbC5wdXNoKGlkKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBhcnJheSA9IG5ldyBBcnJheSg0KTtcbiAgZm9yIChsZXQgeCA9IDE7IHggPCByb2kud2lkdGggLSAxOyB4KyspIHtcbiAgICBmb3IgKGxldCB5ID0gMTsgeSA8IHJvaS5oZWlnaHQgLSAxOyB5KyspIHtcbiAgICAgIGxldCB0YXJnZXQgPSAoeSArIHJvaS5taW5ZKSAqIHJvaU1hcC53aWR0aCArIHggKyByb2kubWluWDtcbiAgICAgIGlmIChpbnRlcm5hbC5pbmNsdWRlcyhkYXRhW3RhcmdldF0pKSB7XG4gICAgICAgIC8vIHdlIGNoZWNrIGlmIG9uZSBvZiB0aGUgbmVpZ2hib3VyIGlzIG5vdCB5ZXQgaW5cblxuICAgICAgICBhcnJheVswXSA9IGRhdGFbdGFyZ2V0IC0gMV07XG4gICAgICAgIGFycmF5WzFdID0gZGF0YVt0YXJnZXQgKyAxXTtcbiAgICAgICAgYXJyYXlbMl0gPSBkYXRhW3RhcmdldCAtIHJvaU1hcC53aWR0aF07XG4gICAgICAgIGFycmF5WzNdID0gZGF0YVt0YXJnZXQgKyByb2lNYXAud2lkdGhdO1xuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNDsgaSsrKSB7XG4gICAgICAgICAgbGV0IGlkID0gYXJyYXlbaV07XG4gICAgICAgICAgaWYgKCFpbnRlcm5hbC5pbmNsdWRlcyhpZCkgJiYgIXJvaS5ib3hJRHMuaW5jbHVkZXMoaWQpKSB7XG4gICAgICAgICAgICBpbnRlcm5hbC5wdXNoKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gaW50ZXJuYWw7XG59XG4iLCJpbXBvcnQgUm9pIGZyb20gJy4vUm9pJztcblxuLyoqXG4gKiBBIGxheWVyIHRoYXQgaXMgY2FyYWN0ZXJpc2VkIGJ5IGEge0BsaW5rIFJvaU1hcH0gYW5kIHRoYXQgd2lsbFxuICogZ2VuZXJhdGVkIGF1dG9tYXRpY2FsbHkgdGhlIGNvcnJlc3BvbmRpbmcgUk9JLlxuICogUk9JIHNob3VsZCBiZSBhIGNvbnRpbnVvdXNcbiAqIHN1cmZhY2UgKGl0IGlzIG5vdCB0ZXN0ZWQgd2hlbiBpdCBpcyBub3QgY29udGlub3VzIC4uLilcbiAqIEZyb20gdGhlIHJvaU1hcCwgdGhlIFJvaUxheWVyIHdpbGwgY3JlYXRlIHRoZSBjb3JyZXNwb25kaW5nXG4gKiB7QGxpbmsgUk9JfS5cbiAqXG4gKiBAY2xhc3MgUm9pTGF5ZXJcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0ltYWdlfSBpbWFnZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb2lMYXllciB7XG4gIGNvbnN0cnVjdG9yKHJvaU1hcCwgb3B0aW9ucykge1xuICAgIHRoaXMucm9pTWFwID0gcm9pTWFwO1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy5yb2kgPSB0aGlzLmNyZWF0ZVJvaSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFJvaSBhcmUgY3JlYXRlZCBmcm9tIGEgcm9pTWFwXG4gICAqIFRoZSByb2lNYXAgY29udGFpbnMgbWFpbnR5IGFuIGFycmF5IG9mIGlkZW50aWZpZXJzIHRoYXQgZGVmaW5lXG4gICAqIGZvciBlYWNoIGRhdGEgdG8gd2hpY2ggUm9pIGl0IGJlbG9uZ3NcbiAgICogQG1lbWJlcm9mIFJvaU1hbmFnZXJcbiAgICogQGluc3RhbmNlXG4gICAqIEByZXR1cm4ge1JvaVtdfVxuICAgKi9cbiAgY3JlYXRlUm9pKCkge1xuICAgIC8vIHdlIG5lZWQgdG8gZmluZCBhbGwgYWxsIHRoZSBkaWZmZXJlbnQgSURzIHRoZXJlIGlzIGluIHRoZSBkYXRhXG4gICAgbGV0IGRhdGEgPSB0aGlzLnJvaU1hcC5kYXRhO1xuICAgIGxldCBtYXBJRHMgPSB7fTtcbiAgICB0aGlzLnJvaU1hcC5wb3NpdGl2ZSA9IDA7XG4gICAgdGhpcy5yb2lNYXAubmVnYXRpdmUgPSAwO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZGF0YVtpXSAmJiAhbWFwSURzW2RhdGFbaV1dKSB7XG4gICAgICAgIG1hcElEc1tkYXRhW2ldXSA9IHRydWU7XG4gICAgICAgIGlmIChkYXRhW2ldID4gMCkge1xuICAgICAgICAgIHRoaXMucm9pTWFwLnBvc2l0aXZlKys7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5yb2lNYXAubmVnYXRpdmUrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByb2lzID0ge307XG5cbiAgICBmb3IgKGxldCBtYXBJRCBpbiBtYXBJRHMpIHtcbiAgICAgIHJvaXNbbWFwSURdID0gbmV3IFJvaSh0aGlzLnJvaU1hcCwgbWFwSUQgKiAxKTtcbiAgICB9XG4gICAgbGV0IHdpZHRoID0gdGhpcy5yb2lNYXAud2lkdGg7XG4gICAgbGV0IGhlaWdodCA9IHRoaXMucm9pTWFwLmhlaWdodDtcblxuICAgIGZvciAobGV0IHkgPSAwOyB5IDwgaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgd2lkdGg7IHgrKykge1xuICAgICAgICBsZXQgdGFyZ2V0ID0geSAqIHdpZHRoICsgeDtcbiAgICAgICAgaWYgKGRhdGFbdGFyZ2V0XSAhPT0gMCkge1xuICAgICAgICAgIGNvbnN0IG1hcElEID0gZGF0YVt0YXJnZXRdO1xuICAgICAgICAgIGNvbnN0IHJvaSA9IHJvaXNbbWFwSURdO1xuICAgICAgICAgIGlmICh4IDwgcm9pLm1pblgpIHtcbiAgICAgICAgICAgIHJvaS5taW5YID0geDtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHggPiByb2kubWF4WCkge1xuICAgICAgICAgICAgcm9pLm1heFggPSB4O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoeSA8IHJvaS5taW5ZKSB7XG4gICAgICAgICAgICByb2kubWluWSA9IHk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh5ID4gcm9pLm1heFkpIHtcbiAgICAgICAgICAgIHJvaS5tYXhZID0geTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcm9pLm1lYW5YICs9IHg7XG4gICAgICAgICAgcm9pLm1lYW5ZICs9IHk7XG4gICAgICAgICAgcm9pLnN1cmZhY2UrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBsZXQgcm9pQXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBtYXBJRCBpbiBtYXBJRHMpIHtcbiAgICAgIHJvaXNbbWFwSURdLm1lYW5YIC89IHJvaXNbbWFwSURdLnN1cmZhY2U7XG4gICAgICByb2lzW21hcElEXS5tZWFuWSAvPSByb2lzW21hcElEXS5zdXJmYWNlO1xuICAgICAgcm9pQXJyYXkucHVzaChyb2lzW21hcElEXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJvaUFycmF5O1xuICB9XG59XG4iLCIvKipcbiAqIEluIHBsYWNlIG1vZGlmaWNhdGlvbiBvZiB0aGUgcm9pTWFwIHRoYXQgam9pbnMgcmVnaW9ucyBvZiBpbnRlcmVzdFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtzdHJpbmd8ZnVuY3Rpb24ob2JqZWN0LG51bWJlcixudW1iZXIpfSBbb3B0aW9ucy5hbGdvcml0aG09J2NvbW1vbkJvcmRlckxlbmd0aCddIGFsZ29yaXRobSB1c2VkIHRvIGRlY2lkZSB3aGljaCBST0lzIGFyZSBtZXJnZWQuXG4gKiAgICAgIEN1cnJlbnQgaW1wbGVtZW50ZWQgYWxnb3JpdGhtcyBhcmUgJ2NvbW1vbkJvcmRlckxlbmd0aCcgdGhhdCB1c2UgdGhlIHBhcmFtZXRlcnNcbiAqICAgICAgJ21pbkNvbW1vbkJvcmRlckxlbmd0aCcgYW5kICdtYXhDb21tb25Cb3JkZXJMZW5ndGgnIGFzIHdlbGwgYXMgJ2NvbW1vbkJvcmRlclJhdGlvJyB0aGF0IHVzZXNcbiAqICAgICAgdGhlIHBhcmFtZXRlcnMgJ21pbkNvbW1vbkJvcmRlclJhdGlvJyBhbmQgJ21heENvbW1vbkJvcmRlclJhdGlvJy5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5Db21tb25Cb3JkZXJMZW5ndGg9NV0gbWluaW1hbCBjb21tb24gbnVtYmVyIG9mIHBpeGVscyBmb3IgbWVyZ2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heENvbW1vbkJvcmRlckxlbmd0aD0xMDBdIG1heGltYWwgY29tbW9uIG51bWJlciBvZiBwaXhlbHMgZm9yIG1lcmdpbmdcbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5Db21tb25Cb3JkZXJSYXRpbz0wLjNdIG1pbmltYWwgY29tbW9uIGJvcmRlciByYXRpbyBmb3IgbWVyZ2luZ1xuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heENvbW1vbkJvcmRlclJhdGlvPTFdIG1heGltYWwgY29tbW9uIGJvcmRlciByYXRpbyBmb3IgbWVyZ2luZ1xuICogQHJldHVybiB7dGhpc31cbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG1lcmdlUm9pKG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7XG4gICAgYWxnb3JpdGhtID0gJ2NvbW1vbkJvcmRlckxlbmd0aCcsXG4gICAgbWluQ29tbW9uQm9yZGVyTGVuZ3RoID0gNSxcbiAgICBtYXhDb21tb25Cb3JkZXJMZW5ndGggPSAxMDAsXG4gICAgbWluQ29tbW9uQm9yZGVyUmF0aW8gPSAwLjMsXG4gICAgbWF4Q29tbW9uQm9yZGVyUmF0aW8gPSAxLFxuICB9ID0gb3B0aW9ucztcblxuICBsZXQgY2hlY2tGdW5jdGlvbiA9IGZ1bmN0aW9uIChjdXJyZW50SW5mbywgY3VycmVudElELCBuZWlnaGJvdXJJRCkge1xuICAgIHJldHVybiAoXG4gICAgICBjdXJyZW50SW5mb1tuZWlnaGJvdXJJRF0gPj0gbWluQ29tbW9uQm9yZGVyTGVuZ3RoICYmXG4gICAgICBjdXJyZW50SW5mb1tuZWlnaGJvdXJJRF0gPD0gbWF4Q29tbW9uQm9yZGVyTGVuZ3RoXG4gICAgKTtcbiAgfTtcbiAgaWYgKHR5cGVvZiBhbGdvcml0aG0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBjaGVja0Z1bmN0aW9uID0gYWxnb3JpdGhtO1xuICB9XG4gIGlmIChhbGdvcml0aG0udG9Mb3dlckNhc2UoKSA9PT0gJ2NvbW1vbmJvcmRlcnJhdGlvJykge1xuICAgIGNoZWNrRnVuY3Rpb24gPSBmdW5jdGlvbiAoY3VycmVudEluZm8sIGN1cnJlbnRJRCwgbmVpZ2hib3VySUQpIHtcbiAgICAgIGxldCByYXRpbyA9IE1hdGgubWluKFxuICAgICAgICBjdXJyZW50SW5mb1tuZWlnaGJvdXJJRF0gLyBjdXJyZW50SW5mb1tjdXJyZW50SURdLFxuICAgICAgICAxLFxuICAgICAgKTtcbiAgICAgIHJldHVybiByYXRpbyA+PSBtaW5Db21tb25Cb3JkZXJSYXRpbyAmJiByYXRpbyA8PSBtYXhDb21tb25Cb3JkZXJSYXRpbztcbiAgICB9O1xuICB9XG4gIGNvbnN0IHJvaU1hcCA9IHRoaXM7XG4gIGNvbnN0IGJvcmRlckxlbmd0aHMgPSByb2lNYXAuY29tbW9uQm9yZGVyTGVuZ3RoO1xuICBsZXQgbmV3TWFwID0ge307XG4gIGxldCBvbGRUb05ldyA9IHt9O1xuXG4gIGZvciAobGV0IGN1cnJlbnRJRCBvZiBPYmplY3Qua2V5cyhib3JkZXJMZW5ndGhzKSkge1xuICAgIGxldCBjdXJyZW50SW5mbyA9IGJvcmRlckxlbmd0aHNbY3VycmVudElEXTtcbiAgICBsZXQgbmVpZ2hib3VySURzID0gT2JqZWN0LmtleXMoY3VycmVudEluZm8pO1xuICAgIGZvciAobGV0IG5laWdoYm91cklEIG9mIG5laWdoYm91cklEcykge1xuICAgICAgaWYgKG5laWdoYm91cklEICE9PSBjdXJyZW50SUQpIHtcbiAgICAgICAgLy8gaXQgaXMgbm90IG15c2VsZiAuLi5cbiAgICAgICAgaWYgKGNoZWNrRnVuY3Rpb24oY3VycmVudEluZm8sIGN1cnJlbnRJRCwgbmVpZ2hib3VySUQpKSB7XG4gICAgICAgICAgLy8gdGhlIGNvbW1vbiBib3JkZXIgYXJlIGluIHRoZSByYW5nZS4gV2Ugc2hvdWxkIG1lcmdlXG4gICAgICAgICAgbGV0IG5ld05laWdoYm91cklEID0gbmVpZ2hib3VySUQ7XG4gICAgICAgICAgaWYgKG9sZFRvTmV3W25laWdoYm91cklEXSkgbmV3TmVpZ2hib3VySUQgPSBvbGRUb05ld1tuZWlnaGJvdXJJRF07XG4gICAgICAgICAgbGV0IG5ld0N1cnJlbnRJRCA9IGN1cnJlbnRJRDtcbiAgICAgICAgICBpZiAob2xkVG9OZXdbY3VycmVudElEXSkgbmV3Q3VycmVudElEID0gb2xkVG9OZXdbY3VycmVudElEXTtcblxuICAgICAgICAgIGlmIChOdW1iZXIobmV3TmVpZ2hib3VySUQpICE9PSBuZXdDdXJyZW50SUQpIHtcbiAgICAgICAgICAgIGxldCBzbWFsbGVySUQgPSBNYXRoLm1pbihuZXdOZWlnaGJvdXJJRCwgbmV3Q3VycmVudElEKTtcbiAgICAgICAgICAgIGxldCBsYXJnZXJJRCA9IE1hdGgubWF4KG5ld05laWdoYm91cklELCBuZXdDdXJyZW50SUQpO1xuXG4gICAgICAgICAgICBpZiAoIW5ld01hcFtzbWFsbGVySURdKSB7XG4gICAgICAgICAgICAgIG5ld01hcFtzbWFsbGVySURdID0ge307XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdNYXBbc21hbGxlcklEXVtsYXJnZXJJRF0gPSB0cnVlO1xuICAgICAgICAgICAgb2xkVG9OZXdbbGFyZ2VySURdID0gc21hbGxlcklEO1xuICAgICAgICAgICAgaWYgKG5ld01hcFtsYXJnZXJJRF0pIHtcbiAgICAgICAgICAgICAgLy8gbmVlZCB0byBwdXQgZXZlcnl0aGluZyB0byBzbWFsbGVySUQgYW5kIHJlbW92ZSBwcm9wZXJ0eVxuICAgICAgICAgICAgICBmb3IgKGxldCBpZCBvZiBPYmplY3Qua2V5cyhuZXdNYXBbbGFyZ2VySURdKSkge1xuICAgICAgICAgICAgICAgIG5ld01hcFtzbWFsbGVySURdW2lkXSA9IHRydWU7XG4gICAgICAgICAgICAgICAgb2xkVG9OZXdbaWRdID0gc21hbGxlcklEO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGRlbGV0ZSBuZXdNYXBbbGFyZ2VySURdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBtaW5NYXggPSByb2lNYXAubWluTWF4O1xuICBsZXQgc2hpZnQgPSAtbWluTWF4Lm1pbjtcbiAgbGV0IG1heCA9IG1pbk1heC5tYXggKyBzaGlmdDtcbiAgbGV0IG9sZFRvTmV3QXJyYXkgPSBuZXcgQXJyYXkobWF4ICsgMSkuZmlsbCgwKTtcbiAgZm9yIChsZXQga2V5IG9mIE9iamVjdC5rZXlzKG9sZFRvTmV3KSkge1xuICAgIG9sZFRvTmV3QXJyYXlbTnVtYmVyKGtleSkgKyBzaGlmdF0gPSBvbGRUb05ld1trZXldO1xuICB9XG4gIC8vIHRpbWUgdG8gY2hhbmdlIHRoZSByb2lNYXBcbiAgbGV0IGRhdGEgPSByb2lNYXAuZGF0YTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGRhdGFbaV07XG4gICAgaWYgKGN1cnJlbnRWYWx1ZSAhPT0gMCkge1xuICAgICAgbGV0IG5ld1ZhbHVlID0gb2xkVG9OZXdBcnJheVtjdXJyZW50VmFsdWUgKyBzaGlmdF07XG4gICAgICBpZiAobmV3VmFsdWUgIT09IDApIHtcbiAgICAgICAgZGF0YVtpXSA9IG5ld1ZhbHVlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJvaU1hcC5jb21wdXRlZCA9IHt9O1xuICByZXR1cm4gcm9pTWFwO1xufVxuIiwiLyoqXG4gKiBUaGUgcm9pTWFwIGlzIGFuIGFycmF5IG9mIHRoZSBzaXplIG9mIHRoZSBvcmlnaW5hbCBpbWFnZSBkYXRhIHRoYXQgY29udGFpbnNcbiAqIHBvc2l0aXZlIGFuZCBuZWdhdGl2ZSBudW1iZXJzLiBXaGVuIHRoZSBudW1iZXIgaXMgY29tbW9uLCBpdCBjb3JyZXNwb25kc1xuICogdG8gb25lIHJlZ2lvbiBvZiBpbnRlcmVzdCAoUk9JKVxuICpcbiAqIEBjbGFzcyBSb2lNYXBcbiAqIEBwcml2YXRlXG4gKi9cbmltcG9ydCBjb21tb25Cb3JkZXJMZW5ndGggZnJvbSAnLi91dGlsL2NvbW1vbkJvcmRlckxlbmd0aCc7XG5pbXBvcnQgbWVyZ2VSb2kgZnJvbSAnLi91dGlsL21lcmdlUm9pJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm9pTWFwIHtcbiAgY29uc3RydWN0b3IocGFyZW50LCBkYXRhKSB7XG4gICAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gICAgdGhpcy53aWR0aCA9IHBhcmVudC53aWR0aDtcbiAgICB0aGlzLmhlaWdodCA9IHBhcmVudC5oZWlnaHQ7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLm5lZ2F0aXZlID0gMDtcbiAgICB0aGlzLnBvc2l0aXZlID0gMDtcbiAgfVxuXG4gIGdldCB0b3RhbCgpIHtcbiAgICByZXR1cm4gdGhpcy5uZWdhdGl2ZSArIHRoaXMucG9zaXRpdmU7XG4gIH1cblxuICBnZXQgbWluTWF4KCkge1xuICAgIGxldCBtaW4gPSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUjtcbiAgICBsZXQgbWF4ID0gTnVtYmVyLk1JTl9TQUZFX0lOVEVHRVI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmRhdGEubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0aGlzLmRhdGFbaV0gPCBtaW4pIG1pbiA9IHRoaXMuZGF0YVtpXTtcbiAgICAgIGlmICh0aGlzLmRhdGFbaV0gPiBtYXgpIG1heCA9IHRoaXMuZGF0YVtpXTtcbiAgICB9XG4gICAgcmV0dXJuIHsgbWluLCBtYXggfTtcbiAgfVxuXG4gIGdldCBjb21tb25Cb3JkZXJMZW5ndGgoKSB7XG4gICAgcmV0dXJuIGNvbW1vbkJvcmRlckxlbmd0aCh0aGlzKTtcbiAgfVxuXG4gIG1lcmdlUm9pKG9wdGlvbnMgPSB7fSkge1xuICAgIHJldHVybiBtZXJnZVJvaS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xuICB9XG5cbiAgbWVyZ2VSb2lzKHJvaXMpIHtcbiAgICBjb25zdCBmaXJzdCA9IHJvaXNbMF07XG4gICAgY29uc3Qgb3RoZXJzID0gcm9pcy5zbGljZSgxKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMuZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKG90aGVycy5pbmNsdWRlcyh0aGlzLmRhdGFbaV0pKSB7XG4gICAgICAgIHRoaXMuZGF0YVtpXSA9IGZpcnN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJvd3NJbmZvKCkge1xuICAgIGxldCByb3dzSW5mbyA9IG5ldyBBcnJheSh0aGlzLmhlaWdodCk7XG4gICAgbGV0IGN1cnJlbnRSb3cgPSAwO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5kYXRhLmxlbmd0aDsgaSArPSB0aGlzLndpZHRoKSB7XG4gICAgICBsZXQgaW5mbyA9IHtcbiAgICAgICAgcm93OiBjdXJyZW50Um93LFxuICAgICAgICBwb3NpdGl2ZVBpeGVsOiAwLFxuICAgICAgICBuZWdhdGl2ZVBpeGVsOiAwLFxuICAgICAgICB6ZXJvUGl4ZWw6IDAsXG4gICAgICAgIHBvc2l0aXZlUm9pOiAwLFxuICAgICAgICBuZWdhdGl2ZVJvaTogMCxcbiAgICAgICAgbWVkaWFuQ2hhbmdlOiAwLFxuICAgICAgfTtcbiAgICAgIHJvd3NJbmZvW2N1cnJlbnRSb3crK10gPSBpbmZvO1xuICAgICAgbGV0IHBvc2l0aXZlcyA9IHt9O1xuICAgICAgbGV0IG5lZ2F0aXZlcyA9IHt9O1xuICAgICAgbGV0IGNoYW5nZXMgPSBbXTtcbiAgICAgIGxldCBwcmV2aW91cyA9IHRoaXMuZGF0YVtpXTtcbiAgICAgIGxldCBjdXJyZW50ID0gMDtcbiAgICAgIGZvciAobGV0IGogPSBpOyBqIDwgaSArIHRoaXMud2lkdGg7IGorKykge1xuICAgICAgICBsZXQgdmFsdWUgPSB0aGlzLmRhdGFbal07XG4gICAgICAgIGlmIChwcmV2aW91cyAhPT0gdmFsdWUpIHtcbiAgICAgICAgICBwcmV2aW91cyA9IHZhbHVlO1xuICAgICAgICAgIGNoYW5nZXMucHVzaChjdXJyZW50KTtcbiAgICAgICAgICBjdXJyZW50ID0gMDtcbiAgICAgICAgfVxuICAgICAgICBjdXJyZW50Kys7XG4gICAgICAgIGlmICh2YWx1ZSA+IDApIHtcbiAgICAgICAgICBpbmZvLnBvc2l0aXZlUGl4ZWwrKztcbiAgICAgICAgICBpZiAoIXBvc2l0aXZlc1t2YWx1ZV0pIHtcbiAgICAgICAgICAgIHBvc2l0aXZlc1t2YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcbiAgICAgICAgICBpbmZvLm5lZ2F0aXZlUGl4ZWwrKztcbiAgICAgICAgICBpZiAoIW5lZ2F0aXZlc1t2YWx1ZV0pIHtcbiAgICAgICAgICAgIG5lZ2F0aXZlc1t2YWx1ZV0gPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpbmZvLnplcm9QaXhlbCsrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGFuZ2VzLnB1c2goY3VycmVudCk7XG4gICAgICAvLyBUT0RPIHVzZSBtZWRpYW4gcGFja2FnZVxuICAgICAgaW5mby5tZWRpYW5DaGFuZ2UgPSBjaGFuZ2VzLnNvcnQoKGEsIGIpID0+IGEgLSBiKVtcbiAgICAgICAgTWF0aC5mbG9vcihjaGFuZ2VzLmxlbmd0aCAvIDIpXG4gICAgICBdO1xuICAgICAgaW5mby5wb3NpdGl2ZVJvaUlEcyA9IE9iamVjdC5rZXlzKHBvc2l0aXZlcyk7XG4gICAgICBpbmZvLm5lZ2F0aXZlUm9pSURzID0gT2JqZWN0LmtleXMobmVnYXRpdmVzKTtcbiAgICAgIGluZm8ucG9zaXRpdmVSb2kgPSBpbmZvLnBvc2l0aXZlUm9pSURzLmxlbmd0aDtcbiAgICAgIGluZm8ubmVnYXRpdmVSb2kgPSBpbmZvLm5lZ2F0aXZlUm9pSURzLmxlbmd0aDtcbiAgICB9XG4gICAgcmV0dXJuIHJvd3NJbmZvO1xuICB9XG5cbiAgY29sc0luZm8oKSB7XG4gICAgbGV0IGNvbHNJbmZvID0gbmV3IEFycmF5KHRoaXMud2lkdGgpO1xuICAgIGxldCBjdXJyZW50Q29sID0gMDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMud2lkdGg7IGkrKykge1xuICAgICAgbGV0IGluZm8gPSB7XG4gICAgICAgIGNvbDogY3VycmVudENvbCxcbiAgICAgICAgcG9zaXRpdmVQaXhlbDogMCxcbiAgICAgICAgbmVnYXRpdmVQaXhlbDogMCxcbiAgICAgICAgemVyb1BpeGVsOiAwLFxuICAgICAgICBwb3NpdGl2ZVJvaTogMCxcbiAgICAgICAgbmVnYXRpdmVSb2k6IDAsXG4gICAgICAgIG1lZGlhbkNoYW5nZTogMCxcbiAgICAgIH07XG4gICAgICBjb2xzSW5mb1tjdXJyZW50Q29sKytdID0gaW5mbztcbiAgICAgIGxldCBwb3NpdGl2ZXMgPSB7fTtcbiAgICAgIGxldCBuZWdhdGl2ZXMgPSB7fTtcbiAgICAgIGxldCBjaGFuZ2VzID0gW107XG4gICAgICBsZXQgcHJldmlvdXMgPSB0aGlzLmRhdGFbaV07XG4gICAgICBsZXQgY3VycmVudCA9IDA7XG4gICAgICBmb3IgKGxldCBqID0gaTsgaiA8IGkgKyB0aGlzLmRhdGEubGVuZ3RoOyBqICs9IHRoaXMud2lkdGgpIHtcbiAgICAgICAgbGV0IHZhbHVlID0gdGhpcy5kYXRhW2pdO1xuICAgICAgICBpZiAocHJldmlvdXMgIT09IHZhbHVlKSB7XG4gICAgICAgICAgcHJldmlvdXMgPSB2YWx1ZTtcbiAgICAgICAgICBjaGFuZ2VzLnB1c2goY3VycmVudCk7XG4gICAgICAgICAgY3VycmVudCA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgY3VycmVudCsrO1xuICAgICAgICBpZiAodmFsdWUgPiAwKSB7XG4gICAgICAgICAgaW5mby5wb3NpdGl2ZVBpeGVsKys7XG4gICAgICAgICAgaWYgKCFwb3NpdGl2ZXNbdmFsdWVdKSB7XG4gICAgICAgICAgICBwb3NpdGl2ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAodmFsdWUgPCAwKSB7XG4gICAgICAgICAgaW5mby5uZWdhdGl2ZVBpeGVsKys7XG4gICAgICAgICAgaWYgKCFuZWdhdGl2ZXNbdmFsdWVdKSB7XG4gICAgICAgICAgICBuZWdhdGl2ZXNbdmFsdWVdID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW5mby56ZXJvUGl4ZWwrKztcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY2hhbmdlcy5wdXNoKGN1cnJlbnQpO1xuICAgICAgLy8gVE9ETyB1c2UgbWVkaWFuIHBhY2thZ2VcbiAgICAgIGluZm8ubWVkaWFuQ2hhbmdlID0gY2hhbmdlcy5zb3J0KChhLCBiKSA9PiBhIC0gYilbXG4gICAgICAgIE1hdGguZmxvb3IoY2hhbmdlcy5sZW5ndGggLyAyKVxuICAgICAgXTtcbiAgICAgIGluZm8ucG9zaXRpdmVSb2lJRHMgPSBPYmplY3Qua2V5cyhwb3NpdGl2ZXMpO1xuICAgICAgaW5mby5uZWdhdGl2ZVJvaUlEcyA9IE9iamVjdC5rZXlzKG5lZ2F0aXZlcyk7XG4gICAgICBpbmZvLnBvc2l0aXZlUm9pID0gaW5mby5wb3NpdGl2ZVJvaUlEcy5sZW5ndGg7XG4gICAgICBpbmZvLm5lZ2F0aXZlUm9pID0gaW5mby5uZWdhdGl2ZVJvaUlEcy5sZW5ndGg7XG4gICAgfVxuICAgIHJldHVybiBjb2xzSW5mbztcbiAgfVxufVxuIiwiLy8gV2UgY2FsY3VsYXRlIGFsbCB0aGUgYm9yZGVyIGxlbmd0aCB3aXRoIHRoZSBuZWlnaGJvdXJzXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbW1vbkJvcmRlckxlbmd0aChyb2lNYXApIHtcbiAgbGV0IGRhdGEgPSByb2lNYXAuZGF0YTtcbiAgbGV0IGR4ID0gWysxLCAwLCAtMSwgMF07XG4gIGxldCBkeSA9IFswLCArMSwgMCwgLTFdO1xuXG4gIGxldCBtaW5NYXggPSByb2lNYXAubWluTWF4O1xuICBsZXQgc2hpZnQgPSAtbWluTWF4Lm1pbjtcbiAgbGV0IG1heCA9IG1pbk1heC5tYXggKyBzaGlmdDtcbiAgbGV0IGJvcmRlckluZm8gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPD0gbWF4OyBpKyspIHtcbiAgICBib3JkZXJJbmZvLnB1c2goT2JqZWN0LmNyZWF0ZShudWxsKSk7XG4gIH1cblxuICBmb3IgKGxldCB4ID0gMDsgeCA8IHJvaU1hcC53aWR0aDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCByb2lNYXAuaGVpZ2h0OyB5KyspIHtcbiAgICAgIGxldCB0YXJnZXQgPSB4ICsgeSAqIHJvaU1hcC53aWR0aDtcbiAgICAgIGxldCBjdXJyZW50Um9pSUQgPSBkYXRhW3RhcmdldF07XG4gICAgICBpZiAoY3VycmVudFJvaUlEICE9PSAwKSB7XG4gICAgICAgIC8vIGVhY2ggcGl4ZWwgbWF5IG9ubHkgY29udHJpYnV0ZSBvbmUgdGltZSB0byBhIGJvcmRlclxuICAgICAgICBsZXQgdXNlZCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICAgIGxldCBpc0JvcmRlciA9IGZhbHNlO1xuICAgICAgICBmb3IgKGxldCBkaXIgPSAwOyBkaXIgPCA0OyBkaXIrKykge1xuICAgICAgICAgIGxldCBuZXdYID0geCArIGR4W2Rpcl07XG4gICAgICAgICAgbGV0IG5ld1kgPSB5ICsgZHlbZGlyXTtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBuZXdYID49IDAgJiZcbiAgICAgICAgICAgIG5ld1kgPj0gMCAmJlxuICAgICAgICAgICAgbmV3WCA8IHJvaU1hcC53aWR0aCAmJlxuICAgICAgICAgICAgbmV3WSA8IHJvaU1hcC5oZWlnaHRcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGxldCBuZWlnaGJvdXJSb2lJRCA9IGRhdGFbbmV3WCArIG5ld1kgKiByb2lNYXAud2lkdGhdO1xuICAgICAgICAgICAgaWYgKGN1cnJlbnRSb2lJRCAhPT0gbmVpZ2hib3VyUm9pSUQpIHtcbiAgICAgICAgICAgICAgaXNCb3JkZXIgPSB0cnVlO1xuICAgICAgICAgICAgICBpZiAobmVpZ2hib3VyUm9pSUQgIT09IDAgJiYgdXNlZFtuZWlnaGJvdXJSb2lJRF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHVzZWRbbmVpZ2hib3VyUm9pSURdID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBpZiAoIWJvcmRlckluZm9bbmVpZ2hib3VyUm9pSUQgKyBzaGlmdF1bY3VycmVudFJvaUlEXSkge1xuICAgICAgICAgICAgICAgICAgYm9yZGVySW5mb1tuZWlnaGJvdXJSb2lJRCArIHNoaWZ0XVtjdXJyZW50Um9pSURdID0gMTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYm9yZGVySW5mb1tuZWlnaGJvdXJSb2lJRCArIHNoaWZ0XVtjdXJyZW50Um9pSURdKys7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlzQm9yZGVyID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gd2Ugd2lsbCBhbHNvIGFkZCBhbiBpbmZvcm1hdGlvbiB0byBzcGVjaWZ5IHRoZSBib3JkZXIgbGVuZ3RoXG4gICAgICAgIGlmIChpc0JvcmRlcikge1xuICAgICAgICAgIGlmICghYm9yZGVySW5mb1tjdXJyZW50Um9pSUQgKyBzaGlmdF1bY3VycmVudFJvaUlEXSkge1xuICAgICAgICAgICAgYm9yZGVySW5mb1tjdXJyZW50Um9pSUQgKyBzaGlmdF1bY3VycmVudFJvaUlEXSA9IDE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGJvcmRlckluZm9bY3VycmVudFJvaUlEICsgc2hpZnRdW2N1cnJlbnRSb2lJRF0rKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyB3ZSBjb252ZXJ0IG5vdyB0aGUgcmVzdWx0IHRvIGFuIG9iamVjdCBmb3IgZmFzdCBsb29rdXAgYW5kIHdlIHdpbGwgcmVzaGlmdCB0aGUgcmVzdWx0XG4gIGxldCByZXN1bHQgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBib3JkZXJJbmZvLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGJvcmRlckluZm9baV0pLmxlbmd0aCA+IDApIHtcbiAgICAgIHJlc3VsdFtpIC0gc2hpZnRdID0gYm9yZGVySW5mb1tpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cbiIsImltcG9ydCBSb2lNYXAgZnJvbSAnLi4vUm9pTWFwJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgUm9pTWFuYWdlclxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0ltYWdlfSBtYXNrXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtSb2lNYXB9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21NYXNrKG1hc2ssIG9wdGlvbnMgPSB7fSkge1xuICBjb25zdCB7IGFsbG93Q29ybmVycyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuXG4gIGNvbnN0IE1BWF9BUlJBWSA9IDB4MDBmZmZmOyAvLyA2NTUzNSBzaG91bGQgYmUgZW5vdWdoIGZvciBtb3N0IG9mIHRoZSBjYXNlc1xuXG4gIC8vIGJhc2VkIG9uIGEgYmluYXJ5IGltYWdlIHdlIHdpbGwgY3JlYXRlIHBsZW50eSBvZiBzbWFsbCBpbWFnZXNcbiAgbGV0IGRhdGEgPSBuZXcgSW50MTZBcnJheShtYXNrLnNpemUpOyAvLyBtYXhWYWx1ZTogMzI3NjcsIG1pblZhbHVlOiAtMzI3NjhcblxuICAvLyBzcGxpdCB3aWxsIGFsd2F5cyByZXR1cm4gYW4gYXJyYXkgb2YgaW1hZ2VzXG4gIGxldCBwb3NpdGl2ZUlEID0gMDtcbiAgbGV0IG5lZ2F0aXZlSUQgPSAwO1xuXG4gIGxldCB4VG9Qcm9jZXNzID0gbmV3IFVpbnQxNkFycmF5KE1BWF9BUlJBWSArIDEpOyAvLyBhc3NpZ24gZHluYW1pY2FsbHkgPz8/P1xuICBsZXQgeVRvUHJvY2VzcyA9IG5ldyBVaW50MTZBcnJheShNQVhfQVJSQVkgKyAxKTsgLy8gbWFzayArMSBpcyBvZiBjb3Vyc2UgbWFuZGF0b3J5ICEhIVxuXG4gIGZvciAobGV0IHggPSAwOyB4IDwgbWFzay53aWR0aDsgeCsrKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCBtYXNrLmhlaWdodDsgeSsrKSB7XG4gICAgICBpZiAoZGF0YVt5ICogbWFzay53aWR0aCArIHhdID09PSAwKSB7XG4gICAgICAgIC8vIG5lZWQgdG8gcHJvY2VzcyB0aGUgd2hvbGUgc3VyZmFjZVxuICAgICAgICBhbmFseXNlU3VyZmFjZSh4LCB5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhbmFseXNlU3VyZmFjZSh4LCB5KSB7XG4gICAgbGV0IGZyb20gPSAwO1xuICAgIGxldCB0byA9IDA7XG4gICAgbGV0IHRhcmdldFN0YXRlID0gbWFzay5nZXRCaXRYWSh4LCB5KTtcbiAgICBsZXQgaWQgPSB0YXJnZXRTdGF0ZSA/ICsrcG9zaXRpdmVJRCA6IC0tbmVnYXRpdmVJRDtcbiAgICBpZiAocG9zaXRpdmVJRCA+IDMyNzY3IHx8IG5lZ2F0aXZlSUQgPCAtMzI3NjgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignVG9vIG1hbnkgcmVnaW9ucyBvZiBpbnRlcmVzdCcpO1xuICAgIH1cbiAgICB4VG9Qcm9jZXNzWzBdID0geDtcbiAgICB5VG9Qcm9jZXNzWzBdID0geTtcbiAgICB3aGlsZSAoZnJvbSA8PSB0bykge1xuICAgICAgbGV0IGN1cnJlbnRYID0geFRvUHJvY2Vzc1tmcm9tICYgTUFYX0FSUkFZXTtcbiAgICAgIGxldCBjdXJyZW50WSA9IHlUb1Byb2Nlc3NbZnJvbSAmIE1BWF9BUlJBWV07XG4gICAgICBkYXRhW2N1cnJlbnRZICogbWFzay53aWR0aCArIGN1cnJlbnRYXSA9IGlkO1xuICAgICAgLy8gbmVlZCB0byBjaGVjayBhbGwgYXJvdW5kIG1hc2sgcGl4ZWxcbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFggPiAwICYmXG4gICAgICAgIGRhdGFbY3VycmVudFkgKiBtYXNrLndpZHRoICsgY3VycmVudFggLSAxXSA9PT0gMCAmJlxuICAgICAgICBtYXNrLmdldEJpdFhZKGN1cnJlbnRYIC0gMSwgY3VycmVudFkpID09PSB0YXJnZXRTdGF0ZVxuICAgICAgKSB7XG4gICAgICAgIC8vIExFRlRcbiAgICAgICAgdG8rKztcbiAgICAgICAgeFRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSBjdXJyZW50WCAtIDE7XG4gICAgICAgIHlUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFk7XG4gICAgICAgIGRhdGFbY3VycmVudFkgKiBtYXNrLndpZHRoICsgY3VycmVudFggLSAxXSA9IC0zMjc2ODtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFkgPiAwICYmXG4gICAgICAgIGRhdGFbKGN1cnJlbnRZIC0gMSkgKiBtYXNrLndpZHRoICsgY3VycmVudFhdID09PSAwICYmXG4gICAgICAgIG1hc2suZ2V0Qml0WFkoY3VycmVudFgsIGN1cnJlbnRZIC0gMSkgPT09IHRhcmdldFN0YXRlXG4gICAgICApIHtcbiAgICAgICAgLy8gVE9QXG4gICAgICAgIHRvKys7XG4gICAgICAgIHhUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFg7XG4gICAgICAgIHlUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFkgLSAxO1xuICAgICAgICBkYXRhWyhjdXJyZW50WSAtIDEpICogbWFzay53aWR0aCArIGN1cnJlbnRYXSA9IC0zMjc2ODtcbiAgICAgIH1cbiAgICAgIGlmIChcbiAgICAgICAgY3VycmVudFggPCBtYXNrLndpZHRoIC0gMSAmJlxuICAgICAgICBkYXRhW2N1cnJlbnRZICogbWFzay53aWR0aCArIGN1cnJlbnRYICsgMV0gPT09IDAgJiZcbiAgICAgICAgbWFzay5nZXRCaXRYWShjdXJyZW50WCArIDEsIGN1cnJlbnRZKSA9PT0gdGFyZ2V0U3RhdGVcbiAgICAgICkge1xuICAgICAgICAvLyBSSUdIVFxuICAgICAgICB0bysrO1xuICAgICAgICB4VG9Qcm9jZXNzW3RvICYgTUFYX0FSUkFZXSA9IGN1cnJlbnRYICsgMTtcbiAgICAgICAgeVRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSBjdXJyZW50WTtcbiAgICAgICAgZGF0YVtjdXJyZW50WSAqIG1hc2sud2lkdGggKyBjdXJyZW50WCArIDFdID0gLTMyNzY4O1xuICAgICAgfVxuICAgICAgaWYgKFxuICAgICAgICBjdXJyZW50WSA8IG1hc2suaGVpZ2h0IC0gMSAmJlxuICAgICAgICBkYXRhWyhjdXJyZW50WSArIDEpICogbWFzay53aWR0aCArIGN1cnJlbnRYXSA9PT0gMCAmJlxuICAgICAgICBtYXNrLmdldEJpdFhZKGN1cnJlbnRYLCBjdXJyZW50WSArIDEpID09PSB0YXJnZXRTdGF0ZVxuICAgICAgKSB7XG4gICAgICAgIC8vIEJPVFRPTVxuICAgICAgICB0bysrO1xuICAgICAgICB4VG9Qcm9jZXNzW3RvICYgTUFYX0FSUkFZXSA9IGN1cnJlbnRYO1xuICAgICAgICB5VG9Qcm9jZXNzW3RvICYgTUFYX0FSUkFZXSA9IGN1cnJlbnRZICsgMTtcbiAgICAgICAgZGF0YVsoY3VycmVudFkgKyAxKSAqIG1hc2sud2lkdGggKyBjdXJyZW50WF0gPSAtMzI3Njg7XG4gICAgICB9XG4gICAgICBpZiAoYWxsb3dDb3JuZXJzKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBjdXJyZW50WCA+IDAgJiZcbiAgICAgICAgICBjdXJyZW50WSA+IDAgJiZcbiAgICAgICAgICBkYXRhWyhjdXJyZW50WSAtIDEpICogbWFzay53aWR0aCArIGN1cnJlbnRYIC0gMV0gPT09IDAgJiZcbiAgICAgICAgICBtYXNrLmdldEJpdFhZKGN1cnJlbnRYIC0gMSwgY3VycmVudFkgLSAxKSA9PT0gdGFyZ2V0U3RhdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gVE9QIExFRlRcbiAgICAgICAgICB0bysrO1xuICAgICAgICAgIHhUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFggLSAxO1xuICAgICAgICAgIHlUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFkgLSAxO1xuICAgICAgICAgIGRhdGFbKGN1cnJlbnRZIC0gMSkgKiBtYXNrLndpZHRoICsgY3VycmVudFggLSAxXSA9IC0zMjc2ODtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY3VycmVudFggPCBtYXNrLndpZHRoIC0gMSAmJlxuICAgICAgICAgIGN1cnJlbnRZID4gMCAmJlxuICAgICAgICAgIGRhdGFbKGN1cnJlbnRZIC0gMSkgKiBtYXNrLndpZHRoICsgY3VycmVudFggKyAxXSA9PT0gMCAmJlxuICAgICAgICAgIG1hc2suZ2V0Qml0WFkoY3VycmVudFggKyAxLCBjdXJyZW50WSAtIDEpID09PSB0YXJnZXRTdGF0ZVxuICAgICAgICApIHtcbiAgICAgICAgICAvLyBUT1AgUklHSFRcbiAgICAgICAgICB0bysrO1xuICAgICAgICAgIHhUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFggKyAxO1xuICAgICAgICAgIHlUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFkgLSAxO1xuICAgICAgICAgIGRhdGFbKGN1cnJlbnRZIC0gMSkgKiBtYXNrLndpZHRoICsgY3VycmVudFggKyAxXSA9IC0zMjc2ODtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY3VycmVudFggPiAwICYmXG4gICAgICAgICAgY3VycmVudFkgPCBtYXNrLmhlaWdodCAtIDEgJiZcbiAgICAgICAgICBkYXRhWyhjdXJyZW50WSArIDEpICogbWFzay53aWR0aCArIGN1cnJlbnRYIC0gMV0gPT09IDAgJiZcbiAgICAgICAgICBtYXNrLmdldEJpdFhZKGN1cnJlbnRYIC0gMSwgY3VycmVudFkgKyAxKSA9PT0gdGFyZ2V0U3RhdGVcbiAgICAgICAgKSB7XG4gICAgICAgICAgLy8gQk9UVE9NIExFRlRcbiAgICAgICAgICB0bysrO1xuICAgICAgICAgIHhUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFggLSAxO1xuICAgICAgICAgIHlUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0gY3VycmVudFkgKyAxO1xuICAgICAgICAgIGRhdGFbKGN1cnJlbnRZICsgMSkgKiBtYXNrLndpZHRoICsgY3VycmVudFggLSAxXSA9IC0zMjc2ODtcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgY3VycmVudFggPCBtYXNrLndpZHRoIC0gMSAmJlxuICAgICAgICAgIGN1cnJlbnRZIDwgbWFzay5oZWlnaHQgLSAxICYmXG4gICAgICAgICAgZGF0YVsoY3VycmVudFkgKyAxKSAqIG1hc2sud2lkdGggKyBjdXJyZW50WCArIDFdID09PSAwICYmXG4gICAgICAgICAgbWFzay5nZXRCaXRYWShjdXJyZW50WCArIDEsIGN1cnJlbnRZICsgMSkgPT09IHRhcmdldFN0YXRlXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIEJPVFRPTSBSSUdIVFxuICAgICAgICAgIHRvKys7XG4gICAgICAgICAgeFRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSBjdXJyZW50WCArIDE7XG4gICAgICAgICAgeVRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSBjdXJyZW50WSArIDE7XG4gICAgICAgICAgZGF0YVsoY3VycmVudFkgKyAxKSAqIG1hc2sud2lkdGggKyBjdXJyZW50WCArIDFdID0gLTMyNzY4O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGZyb20rKztcblxuICAgICAgaWYgKHRvIC0gZnJvbSA+IE1BWF9BUlJBWSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ2FuYWx5c2VNYXNrIGNhbiBub3QgZmluaXNoLCB0aGUgYXJyYXkgdG8gbWFuYWdlIGludGVybmFsIGRhdGEgaXMgbm90IGJpZyBlbm91Z2guJyArXG4gICAgICAgICAgICAnWW91IGNvdWxkIGltcHJvdmUgbWFzayBieSBjaGFuZ2luZyBNQVhfQVJSQVknLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gbmV3IFJvaU1hcChtYXNrLCBkYXRhKTtcbn1cbiIsIi8qXG5UaGlzIGFsZ29yaXRobSBpcyBuaWNlIGFuZCBpcyB0aGVyZWZvcmUga2VwdCBoZXJlXG5Ib3dldmVyIGl0IHNlZW1zIHRvIGJlIHNsb3dlciB0aGFuIHRoZSBnZXQgbWFzayBhbmRcbmFsc28gcHJvdmlkZXMgb25seSB0aGUgcG9zaXRpdmUgUk9JXG5XZSB0aGVyZWZvcmUgZG9uJ3QgZXhwb3NlIGl0IGluIHRoZSByb2lNYW5hZ2VyXG4gKi9cblxuaW1wb3J0IERpc2pvaW50U2V0IGZyb20gJ21sLWRpc2pvaW50LXNldCc7XG5cbmltcG9ydCBSb2lNYXAgZnJvbSAnLi4vUm9pTWFwJztcblxuY29uc3QgZGlyZWN0aW9uNFggPSBbLTEsIDBdO1xuY29uc3QgZGlyZWN0aW9uNFkgPSBbMCwgLTFdO1xuY29uc3QgbmVpZ2hib3VyczQgPSBbbnVsbCwgbnVsbF07XG5cbmNvbnN0IGRpcmVjdGlvbjhYID0gWy0xLCAtMSwgMCwgMV07XG5jb25zdCBkaXJlY3Rpb244WSA9IFswLCAtMSwgLTEsIC0xXTtcbmNvbnN0IG5laWdoYm91cnM4ID0gW251bGwsIG51bGwsIG51bGwsIG51bGxdO1xuXG4vKlxuSW1wbGVtZW50YXRpb24gb2YgdGhlIGNvbm5lY3RlZC1jb21wb25lbnQgbGFiZWxpbmcgYWxnb3JpdGhtXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0oXG4gIG1hc2ssXG4gIG9wdGlvbnMgPSB7fSxcbikge1xuICBjb25zdCB7IGFsbG93Q29ybmVycyA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICBsZXQgbmVpZ2hib3VycyA9IDQ7XG4gIGlmIChhbGxvd0Nvcm5lcnMpIHtcbiAgICBuZWlnaGJvdXJzID0gODtcbiAgfVxuXG4gIGxldCBkaXJlY3Rpb25YO1xuICBsZXQgZGlyZWN0aW9uWTtcbiAgbGV0IG5laWdoYm91cnNMaXN0O1xuICBpZiAobmVpZ2hib3VycyA9PT0gOCkge1xuICAgIGRpcmVjdGlvblggPSBkaXJlY3Rpb244WDtcbiAgICBkaXJlY3Rpb25ZID0gZGlyZWN0aW9uOFk7XG4gICAgbmVpZ2hib3Vyc0xpc3QgPSBuZWlnaGJvdXJzODtcbiAgfSBlbHNlIGlmIChuZWlnaGJvdXJzID09PSA0KSB7XG4gICAgZGlyZWN0aW9uWCA9IGRpcmVjdGlvbjRYO1xuICAgIGRpcmVjdGlvblkgPSBkaXJlY3Rpb240WTtcbiAgICBuZWlnaGJvdXJzTGlzdCA9IG5laWdoYm91cnM0O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKGB1bnN1cHBvcnRlZCBuZWlnaGJvdXJzIGNvdW50OiAke25laWdoYm91cnN9YCk7XG4gIH1cblxuICBjb25zdCBzaXplID0gbWFzay5zaXplO1xuICBjb25zdCB3aWR0aCA9IG1hc2sud2lkdGg7XG4gIGNvbnN0IGhlaWdodCA9IG1hc2suaGVpZ2h0O1xuICBjb25zdCBsYWJlbHMgPSBuZXcgQXJyYXkoc2l6ZSk7XG4gIGNvbnN0IGRhdGEgPSBuZXcgVWludDMyQXJyYXkoc2l6ZSk7XG4gIGNvbnN0IGxpbmtlZCA9IG5ldyBEaXNqb2ludFNldCgpO1xuXG4gIGxldCBjdXJyZW50TGFiZWwgPSAxO1xuICBmb3IgKGxldCBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgICAvLyB0cnVlIG1lYW5zIG91dCBvZiBiYWNrZ3JvdW5kXG4gICAgICBjb25zdCBpbmRleCA9IGkgKyBqICogd2lkdGg7XG4gICAgICBpZiAobWFzay5nZXRCaXQoaW5kZXgpKSB7XG4gICAgICAgIGxldCBzbWFsbGVzdE5laWdoYm91ciA9IG51bGw7XG4gICAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgbmVpZ2hib3Vyc0xpc3QubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICBjb25zdCBpaSA9IGkgKyBkaXJlY3Rpb25YW2tdO1xuICAgICAgICAgIGNvbnN0IGpqID0gaiArIGRpcmVjdGlvbllba107XG4gICAgICAgICAgaWYgKGlpID49IDAgJiYgamogPj0gMCAmJiBpaSA8IHdpZHRoICYmIGpqIDwgaGVpZ2h0KSB7XG4gICAgICAgICAgICBjb25zdCBpbmRleCA9IGlpICsgamogKiB3aWR0aDtcbiAgICAgICAgICAgIGxldCBuZWlnaGJvdXIgPSBsYWJlbHNbaW5kZXhdO1xuICAgICAgICAgICAgaWYgKCFuZWlnaGJvdXIpIHtcbiAgICAgICAgICAgICAgbmVpZ2hib3Vyc0xpc3Rba10gPSBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmVpZ2hib3Vyc0xpc3Rba10gPSBuZWlnaGJvdXI7XG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAhc21hbGxlc3ROZWlnaGJvdXIgfHxcbiAgICAgICAgICAgICAgICBuZWlnaGJvdXJzTGlzdFtrXS52YWx1ZSA8IHNtYWxsZXN0TmVpZ2hib3VyLnZhbHVlXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHNtYWxsZXN0TmVpZ2hib3VyID0gbmVpZ2hib3Vyc0xpc3Rba107XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFzbWFsbGVzdE5laWdoYm91cikge1xuICAgICAgICAgIGxhYmVsc1tpbmRleF0gPSBsaW5rZWQuYWRkKGN1cnJlbnRMYWJlbCsrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBsYWJlbHNbaW5kZXhdID0gc21hbGxlc3ROZWlnaGJvdXI7XG4gICAgICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCBuZWlnaGJvdXJzTGlzdC5sZW5ndGg7IGsrKykge1xuICAgICAgICAgICAgaWYgKG5laWdoYm91cnNMaXN0W2tdICYmIG5laWdoYm91cnNMaXN0W2tdICE9PSBzbWFsbGVzdE5laWdoYm91cikge1xuICAgICAgICAgICAgICBsaW5rZWQudW5pb24oc21hbGxlc3ROZWlnaGJvdXIsIG5laWdoYm91cnNMaXN0W2tdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBqID0gMDsgaiA8IGhlaWdodDsgaisrKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB3aWR0aDsgaSsrKSB7XG4gICAgICBjb25zdCBpbmRleCA9IGkgKyBqICogd2lkdGg7XG4gICAgICBpZiAobWFzay5nZXRCaXQoaW5kZXgpKSB7XG4gICAgICAgIGRhdGFbaW5kZXhdID0gbGlua2VkLmZpbmQobGFiZWxzW2luZGV4XSkudmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSb2lNYXAobWFzaywgZGF0YSk7XG59XG4iLCJpbXBvcnQgUm9pTWFwIGZyb20gJy4uL1JvaU1hcCc7XG5cbi8qKlxuICogQG1lbWJlcm9mIFJvaU1hbmFnZXJcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5hbGxvd0Nvcm5lcj10cnVlXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5vbmx5VG9wPWZhbHNlXVxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbnZlcnQ9ZmFsc2VdXG4gKiBAcmV0dXJuIHtSb2lNYXB9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21NYXhpbWEob3B0aW9ucyA9IHt9KSB7XG4gIGxldCB7IGFsbG93Q29ybmVyID0gdHJ1ZSwgb25seVRvcCA9IGZhbHNlLCBpbnZlcnQgPSBmYWxzZSB9ID0gb3B0aW9ucztcblxuICBsZXQgaW1hZ2UgPSB0aGlzO1xuICBpbWFnZS5jaGVja1Byb2Nlc3NhYmxlKCdmcm9tTWF4aW1hJywgeyBjb21wb25lbnRzOiBbMV0gfSk7XG5cbiAgY29uc3QgUFJPQ0VTU19UT1AgPSAxO1xuICBjb25zdCBQUk9DRVNTX05PUk1BTCA9IDI7XG5cbiAgLy8gc3BsaXQgd2lsbCBhbHdheXMgcmV0dXJuIGFuIGFycmF5IG9mIGltYWdlc1xuICBsZXQgcG9zaXRpdmVJRCA9IDA7XG4gIGxldCBuZWdhdGl2ZUlEID0gMDtcblxuICBsZXQgZGF0YSA9IG5ldyBJbnQxNkFycmF5KGltYWdlLnNpemUpOyAvLyBtYXhWYWx1ZTogMzI3NjcsIG1pblZhbHVlOiAtMzI3NjhcbiAgbGV0IHByb2Nlc3NlZCA9IG5ldyBJbnQ4QXJyYXkoaW1hZ2Uuc2l6ZSk7XG4gIGxldCB2YXJpYXRpb25zID0gbmV3IEZsb2F0MzJBcnJheShpbWFnZS5zaXplKTtcblxuICBsZXQgTUFYX0FSUkFZID0gMHgwZmZmZmY7IC8vIHNob3VsZCBiZSBlbm91Z2ggZm9yIG1vc3Qgb2YgdGhlIGNhc2VzXG4gIGxldCB4VG9Qcm9jZXNzID0gbmV3IFVpbnQxNkFycmF5KE1BWF9BUlJBWSArIDEpOyAvLyBhc3NpZ24gZHluYW1pY2FsbHkgPz8/P1xuICBsZXQgeVRvUHJvY2VzcyA9IG5ldyBVaW50MTZBcnJheShNQVhfQVJSQVkgKyAxKTsgLy8gbWFzayArMSBpcyBvZiBjb3Vyc2UgbWFuZGF0b3J5ICEhIVxuXG4gIGxldCBmcm9tID0gMDtcbiAgbGV0IHRvID0gMDtcblxuICBsZXQgeFRvUHJvY2Vzc1RvcCA9IG5ldyBVaW50MTZBcnJheShNQVhfQVJSQVkgKyAxKTsgLy8gYXNzaWduIGR5bmFtaWNhbGx5ID8/Pz9cbiAgbGV0IHlUb1Byb2Nlc3NUb3AgPSBuZXcgVWludDE2QXJyYXkoTUFYX0FSUkFZICsgMSk7IC8vIG1hc2sgKzEgaXMgb2YgY291cnNlIG1hbmRhdG9yeSAhISFcblxuICBsZXQgZnJvbVRvcCA9IDA7XG4gIGxldCB0b1RvcCA9IDA7XG5cbiAgYXBwZW5kTWF4aW1hKGltYWdlLCB7IG1heGltYTogIWludmVydCB9KTtcblxuICB3aGlsZSAoZnJvbSA8IHRvKSB7XG4gICAgbGV0IGN1cnJlbnRYID0geFRvUHJvY2Vzc1tmcm9tICYgTUFYX0FSUkFZXTtcbiAgICBsZXQgY3VycmVudFkgPSB5VG9Qcm9jZXNzW2Zyb20gJiBNQVhfQVJSQVldO1xuICAgIHByb2Nlc3MoY3VycmVudFgsIGN1cnJlbnRZLCBQUk9DRVNTX05PUk1BTCk7XG4gICAgZnJvbSsrO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSb2lNYXAoaW1hZ2UsIGRhdGEpO1xuXG4gIC8vIHdlIHdpbGwgbG9vayBmb3IgdGhlIG1heGltYSAob3IgbWluaW1hKSB0aGF0IGlzIHByZXNlbnQgaW4gdGhlIHBpY3R1cmVcbiAgLy8gYSBtYXhpbWEgaXMgYSBwb2ludCB0aGF0IGlzIHN1cnJvdW5kZWQgYnkgbG93ZXIgdmFsdWVzXG4gIC8vIHNob3VsZCBkZWFsIHdpdGggYWxsb3dDb3JuZXIgYW5kIGludmVydFxuICBmdW5jdGlvbiBhcHBlbmRNYXhpbWEoeyBtYXhpbWEgPSB0cnVlIH0pIHtcbiAgICBmb3IgKGxldCB5ID0gMTsgeSA8IGltYWdlLmhlaWdodCAtIDE7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDE7IHggPCBpbWFnZS53aWR0aCAtIDE7IHgrKykge1xuICAgICAgICBsZXQgaW5kZXggPSB4ICsgeSAqIGltYWdlLndpZHRoO1xuICAgICAgICBpZiAocHJvY2Vzc2VkW2luZGV4XSA9PT0gMCkge1xuICAgICAgICAgIGxldCBjdXJyZW50VmFsdWUgPSBtYXhpbWFcbiAgICAgICAgICAgID8gaW1hZ2UuZGF0YVtpbmRleF1cbiAgICAgICAgICAgIDogLWltYWdlLmRhdGFbeCArIHkgKiBpbWFnZS53aWR0aF07XG4gICAgICAgICAgaWYgKGltYWdlLmRhdGFbeSAqIGltYWdlLndpZHRoICsgeCAtIDFdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBMRUZUXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGltYWdlLmRhdGFbeSAqIGltYWdlLndpZHRoICsgeCArIDFdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBSSUdIVFxuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChpbWFnZS5kYXRhWyh5IC0gMSkgKiBpbWFnZS53aWR0aCArIHhdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAvLyBUT1BcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaW1hZ2UuZGF0YVsoeSArIDEpICogaW1hZ2Uud2lkdGggKyB4XSA+IGN1cnJlbnRWYWx1ZSkge1xuICAgICAgICAgICAgLy8gQk9UVE9NXG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGFsbG93Q29ybmVyKSB7XG4gICAgICAgICAgICBpZiAoaW1hZ2UuZGF0YVsoeSAtIDEpICogaW1hZ2Uud2lkdGggKyB4IC0gMV0gPiBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgLy8gTEVGVCBUT1BcbiAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaW1hZ2UuZGF0YVsoeSAtIDEpICogaW1hZ2Uud2lkdGggKyB4ICsgMV0gPiBjdXJyZW50VmFsdWUpIHtcbiAgICAgICAgICAgICAgLy8gUklHSFQgVE9QXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGltYWdlLmRhdGFbKHkgKyAxKSAqIGltYWdlLndpZHRoICsgeCAtIDFdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgIC8vIExFRlQgQk9UVE9NXG4gICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGltYWdlLmRhdGFbKHkgKyAxKSAqIGltYWdlLndpZHRoICsgeCArIDFdID4gY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgIC8vIFJJR0hUIEJPVFRPTVxuICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkYXRhW2luZGV4XSA9IG1heGltYSA/ICsrcG9zaXRpdmVJRCA6IC0tbmVnYXRpdmVJRDtcblxuICAgICAgICAgIGxldCB2YWxpZCA9IHByb2Nlc3NUb3AoeCwgeSwgUFJPQ0VTU19UT1ApO1xuICAgICAgICAgIGlmICghdmFsaWQpIHtcbiAgICAgICAgICAgIGlmIChtYXhpbWEpIHtcbiAgICAgICAgICAgICAgLS1wb3NpdGl2ZUlEO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgKytuZWdhdGl2ZUlEO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIHdlIHdpbGwgdHJ5IHRvIGdldCBhbGwgdGhlIHBvaW50cyBvZiB0aGUgdG9wIChzYW1lIHZhbHVlKVxuICAvLyBhbmQgdG8gY2hlY2sgaWYgdGhlIHdob2xlIGdyb3VwIGlzIHN1cnJvdW5kZWQgYnkgbG93ZXIgdmFsdWVcbiAgLy8gYXMgc29vbiBhcyBvbmUgb2YgdGhlbSBpZiBub3QgcGFydCB3ZSBuZWVkIHRvIHJldmVyc2UgdGhlIHByb2Nlc3NcbiAgLy8gYW5kIGp1c3QgZm9yIGdldCB0aG9zZSBwb2ludHNcbiAgZnVuY3Rpb24gcHJvY2Vzc1RvcCh4VG9Qcm9jZXNzLCB5VG9Qcm9jZXNzKSB7XG4gICAgbGV0IGN1cnJlbnRUbyA9IHRvOyAvLyBpbiBjYXNlIGlmIGZhaWxzIHdlIGNvbWUgYmFja1xuICAgIGZyb21Ub3AgPSAwO1xuICAgIHRvVG9wID0gMTtcbiAgICB4VG9Qcm9jZXNzVG9wWzBdID0geFRvUHJvY2VzcztcbiAgICB5VG9Qcm9jZXNzVG9wWzBdID0geVRvUHJvY2VzcztcbiAgICBsZXQgdmFsaWQgPSB0cnVlO1xuICAgIHdoaWxlIChmcm9tVG9wIDwgdG9Ub3ApIHtcbiAgICAgIGxldCBjdXJyZW50WCA9IHhUb1Byb2Nlc3NUb3BbZnJvbVRvcCAmIE1BWF9BUlJBWV07XG4gICAgICBsZXQgY3VycmVudFkgPSB5VG9Qcm9jZXNzVG9wW2Zyb21Ub3AgJiBNQVhfQVJSQVldO1xuICAgICAgdmFsaWQgJj0gcHJvY2VzcyhjdXJyZW50WCwgY3VycmVudFksIFBST0NFU1NfVE9QKTtcbiAgICAgIGZyb21Ub3ArKztcbiAgICB9XG4gICAgaWYgKCF2YWxpZCkge1xuICAgICAgLy8gbmVlZCB0byBjbGVhciBhbGwgdGhlIGNhbGN1bGF0ZWQgZGF0YSBiZWNhdXNlIHRoZSB0b3AgaXMgbm90IHN1cnJvdW5kZWQgYnkgbmVnYXRpdmUgdmFsdWVzXG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRvVG9wOyBpKyspIHtcbiAgICAgICAgbGV0IGN1cnJlbnRYID0geFRvUHJvY2Vzc1RvcFtpICYgTUFYX0FSUkFZXTtcbiAgICAgICAgbGV0IGN1cnJlbnRZID0geVRvUHJvY2Vzc1RvcFtpICYgTUFYX0FSUkFZXTtcbiAgICAgICAgbGV0IGluZGV4ID0gY3VycmVudFkgKiBpbWFnZS53aWR0aCArIGN1cnJlbnRYO1xuICAgICAgICBkYXRhW2luZGV4XSA9IDA7XG4gICAgICB9XG4gICAgICB0byA9IGN1cnJlbnRUbztcbiAgICB9XG4gICAgcmV0dXJuIHZhbGlkO1xuICB9XG5cbiAgLypcbiAgICAgRm9yIGEgc3BlY2lmaWMgcG9pbnQgd2Ugd2lsbCBjaGVjayB0aGUgcG9pbnRzIGFyb3VuZCwgaW5jcmVhc2UgdGhlIGFyZWEgb2YgaW50ZXJlc3RzIGFuZCBhZGRcbiAgICAgdGhlbSB0byB0aGUgcHJvY2Vzc2luZyBsaXN0XG4gICAgIHR5cGU9MCA6IHRvcFxuICAgICB0eXBlPTEgOiBub3JtYWxcbiAgICAgKi9cbiAgZnVuY3Rpb24gcHJvY2Vzcyh4Q2VudGVyLCB5Q2VudGVyLCB0eXBlKSB7XG4gICAgbGV0IGN1cnJlbnRJRCA9IGRhdGFbeUNlbnRlciAqIGltYWdlLndpZHRoICsgeENlbnRlcl07XG4gICAgbGV0IGN1cnJlbnRWYWx1ZSA9IGltYWdlLmRhdGFbeUNlbnRlciAqIGltYWdlLndpZHRoICsgeENlbnRlcl07XG4gICAgZm9yIChsZXQgeSA9IHlDZW50ZXIgLSAxOyB5IDw9IHlDZW50ZXIgKyAxOyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSB4Q2VudGVyIC0gMTsgeCA8PSB4Q2VudGVyICsgMTsgeCsrKSB7XG4gICAgICAgIGxldCBpbmRleCA9IHkgKiBpbWFnZS53aWR0aCArIHg7XG4gICAgICAgIGlmIChwcm9jZXNzZWRbaW5kZXhdID09PSAwKSB7XG4gICAgICAgICAgcHJvY2Vzc2VkW2luZGV4XSA9IDE7XG4gICAgICAgICAgLy8gd2Ugc3RvcmUgdGhlIHZhcmlhdGlvbiBjb21wYXJlIHRvIHRoZSBwYXJlbnQgcGl4ZWxcbiAgICAgICAgICB2YXJpYXRpb25zW2luZGV4XSA9IGltYWdlLmRhdGFbaW5kZXhdIC0gY3VycmVudFZhbHVlO1xuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSBQUk9DRVNTX1RPUDpcbiAgICAgICAgICAgICAgaWYgKHZhcmlhdGlvbnNbaW5kZXhdID09PSAwKSB7XG4gICAgICAgICAgICAgICAgLy8gd2UgbG9vayBmb3IgbWF4aW1hXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UgYXJlIG5leHQgdG8gYSBib3JkZXIgLi4uIGl0IGlzIG5vdCBzdXJyb3VuZGVkICFcbiAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICB4ID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICB5ID09PSAwIHx8XG4gICAgICAgICAgICAgICAgICB4ID09PSBpbWFnZS53aWR0aCAtIDEgfHxcbiAgICAgICAgICAgICAgICAgIHkgPT09IGltYWdlLmhlaWdodCAtIDFcbiAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZGF0YVtpbmRleF0gPSBjdXJyZW50SUQ7XG4gICAgICAgICAgICAgICAgeFRvUHJvY2Vzc1RvcFt0b1RvcCAmIE1BWF9BUlJBWV0gPSB4O1xuICAgICAgICAgICAgICAgIHlUb1Byb2Nlc3NUb3BbdG9Ub3AgJiBNQVhfQVJSQVldID0geTtcbiAgICAgICAgICAgICAgICB0b1RvcCsrO1xuICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZhcmlhdGlvbnNbaW5kZXhdID4gMCkge1xuICAgICAgICAgICAgICAgIC8vIG5vdCBhIGdsb2JhbCBtYXhpbXVtXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIGEgcG9pbnQgd2Ugd2lsbCBoYXZlIHRvIHByb2Nlc3NcbiAgICAgICAgICAgICAgICBpZiAoIW9ubHlUb3ApIHtcbiAgICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gY3VycmVudElEO1xuICAgICAgICAgICAgICAgICAgeFRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSB4O1xuICAgICAgICAgICAgICAgICAgeVRvUHJvY2Vzc1t0byAmIE1BWF9BUlJBWV0gPSB5O1xuICAgICAgICAgICAgICAgICAgdG8rKztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBST0NFU1NfTk9STUFMOlxuICAgICAgICAgICAgICBpZiAodmFyaWF0aW9uc1tpbmRleF0gPD0gMCkge1xuICAgICAgICAgICAgICAgIC8vIHdlIGxvb2sgZm9yIG1heGltYVxuICAgICAgICAgICAgICAgIGRhdGFbaW5kZXhdID0gY3VycmVudElEO1xuICAgICAgICAgICAgICAgIHhUb1Byb2Nlc3NbdG8gJiBNQVhfQVJSQVldID0geDtcbiAgICAgICAgICAgICAgICB5VG9Qcm9jZXNzW3RvICYgTUFYX0FSUkFZXSA9IHk7XG4gICAgICAgICAgICAgICAgdG8rKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigndW5yZWFjaGFibGUnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbn1cbiIsImltcG9ydCBTaGFwZSBmcm9tICcuLi8uLi8uLi91dGlsL1NoYXBlJztcbmltcG9ydCBSb2lNYXAgZnJvbSAnLi4vUm9pTWFwJztcblxuLyoqXG4gKiBAbWVtYmVyb2YgUm9pTWFuYWdlclxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBwb2ludHNUb1BhaW50IC0gYW4gYXJyYXkgb2YgcG9pbnRzXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcmV0dXJuIHtSb2lNYXB9XG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZyb21Qb2ludHMocG9pbnRzVG9QYWludCwgb3B0aW9ucyA9IHt9KSB7XG4gIGxldCBzaGFwZSA9IG5ldyBTaGFwZShvcHRpb25zKTtcblxuICAvLyBiYXNlZCBvbiBhIGJpbmFyeSBpbWFnZSB3ZSB3aWxsIGNyZWF0ZSBwbGVudHkgb2Ygc21hbGwgaW1hZ2VzXG4gIGxldCBkYXRhID0gbmV3IEludDE2QXJyYXkodGhpcy5zaXplKTsgLy8gbWF4VmFsdWU6IDMyNzY3LCBtaW5WYWx1ZTogLTMyNzY4XG4gIGxldCBwb3NpdGl2ZUlEID0gMDtcbiAgbGV0IHNoYXBlUG9pbnRzID0gc2hhcGUuZ2V0UG9pbnRzKCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzVG9QYWludC5sZW5ndGg7IGkrKykge1xuICAgIHBvc2l0aXZlSUQrKztcbiAgICBsZXQgeFAgPSBwb2ludHNUb1BhaW50W2ldWzBdO1xuICAgIGxldCB5UCA9IHBvaW50c1RvUGFpbnRbaV1bMV07XG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCBzaGFwZVBvaW50cy5sZW5ndGg7IGorKykge1xuICAgICAgbGV0IHhTID0gc2hhcGVQb2ludHNbal1bMF07XG4gICAgICBsZXQgeVMgPSBzaGFwZVBvaW50c1tqXVsxXTtcbiAgICAgIGlmIChcbiAgICAgICAgeFAgKyB4UyA+PSAwICYmXG4gICAgICAgIHlQICsgeVMgPj0gMCAmJlxuICAgICAgICB4UCArIHhTIDwgdGhpcy53aWR0aCAmJlxuICAgICAgICB5UCArIHlTIDwgdGhpcy5oZWlnaHRcbiAgICAgICkge1xuICAgICAgICBkYXRhW3hQICsgeFMgKyAoeVAgKyB5UykgKiB0aGlzLndpZHRoXSA9IHBvc2l0aXZlSUQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBSb2lNYXAodGhpcywgZGF0YSk7XG59XG4iLCJleHBvcnQgY29uc3QgZHhzID0gWysxLCAwLCAtMSwgMCwgKzEsICsxLCAtMSwgLTFdO1xuZXhwb3J0IGNvbnN0IGR5cyA9IFswLCArMSwgMCwgLTEsICsxLCAtMSwgKzEsIC0xXTtcbiIsImltcG9ydCBQcmlvcml0eVF1ZXVlIGZyb20gJ2pzLXByaW9yaXR5LXF1ZXVlJztcblxuaW1wb3J0IHsgZHhzLCBkeXMgfSBmcm9tICcuLi8uLi8uLi91dGlsL2R4ZHkuanMnO1xuaW1wb3J0IFJvaU1hcCBmcm9tICcuLi9Sb2lNYXAnO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGFsbG93cyB0byBjcmVhdGUgYSBST0lNYXAgdXNpbmcgdGhlIHdhdGVyIHNoZWQgYWxnb3JpdGhtLiBCeSBkZWZhdWx0IHRoaXMgYWxnb3JpdGhtXG4gKiB3aWxsIGZpbGwgdGhlIGhvbGVzIGFuZCB0aGVyZWZvcmUgdGhlIGxvd2VzdCB2YWx1ZSBvZiB0aGUgaW1hZ2UgKGJsYWNrIHpvbmVzKS5cbiAqIElmIG5vIHBvaW50cyBhcmUgZ2l2ZW4sIHRoZSBmdW5jdGlvbiB3aWxsIGxvb2sgZm9yIGFsbCB0aGUgbWluaW1hbCBwb2ludHMuXG4gKiBJZiBubyBtYXNrIGlzIGdpdmVuIHRoZSBhbGdvcml0aG0gd2lsbCBjb21wbGV0ZWx5IGZpbGwgdGhlIGltYWdlLlxuICogUGxlYXNlIHRha2UgY2FyZSBhYm91dCB0aGUgdmFsdWUgdGhhdCBoYXMgYmUgaW4gdGhlIG1hc2sgISBJbiBvcmRlciB0byBiZSBjb2hlcmVudCB3aXRoIHRoZSBleHBlY3RlZCBtYXNrLFxuICogbWVhbmluZyB0aGF0IGlmIGl0IGlzIGEgZGFyayB6b25lLCB0aGUgbWFzayB3aWxsIGJlIGRhcmsgdGhlIG5vcm1hbCBiZWhhdmlvdXIgdG8gZmlsbCBhIHpvbmVcbiAqIGlzIHRoYXQgdGhlIG1hc2sgcGl4ZWwgaXMgY2xlYXIgKHZhbHVlIG9mIDApICFcbiAqIEhvd2V2ZXIgaWYgeW91IHdvcmsgaW4gdGhlICdpbnZlcnQnIG1vZGUsIHRoZSBtYXNrIHZhbHVlIGhhcyB0byBiZSAnc2V0JyBhbmQgdGhlIG1ldGhvZCB3aWxsIGxvb2sgZm9yXG4gKiBtYXhpbWEuXG4gKiBAbWVtYmVyb2YgUm9pTWFuYWdlclxuICogQGluc3RhbmNlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dXG4gKiBAcGFyYW0ge0FycmF5PEFycmF5PG51bWJlcj4+fSBbb3B0aW9ucy5wb2ludHNdIC0gQXJyYXkgb2YgcG9pbnRzIFtbeDEseTFdLCBbeDIseTJdLCAuLi5dLlxuICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLmZpbGxNYXhWYWx1ZV0gLSBMaW1pdCBvZiBmaWxsaW5nLiBCeSBleGFtcGxlLCB3ZSBjYW4gZmlsbCB0byBhIG1heGltdW0gdmFsdWUgMzIwMDAgb2YgYSAxNiBiaXREZXB0aCBpbWFnZS5cbiAqICAgICAgICAgIElmIGludmVydCB0aGlzIHdpbGwgY29ycmVzcG9uZHMgdG8gdGhlIG1pbmltYWwgdmFsdWVcbiAqIEBwYXJhbSB7SW1hZ2V9IFtvcHRpb25zLmltYWdlPXRoaXNdIC0gQnkgZGVmYXVsdCB0aGUgd2F0ZXJTaGVkIHdpbGwgYmUgYXBwbGllZCBvbiB0aGUgY3VycmVudCBpbWFnZS4gSG93ZXZlciB3YXRlclNoZWQgY2FuIG9ubHkgYmUgYXBwbGllZFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbiAxIGNvbXBvbmVudCBpbWFnZS4gVGhpcyBhbGxvd3MgdG8gc3BlY2lmeSBhIGdyZXkgc2NhbGUgaW1hZ2Ugb24gd2hpY2ggdG8gYXBwbHkgd2F0ZXJTaGVkLi5cbiAqIEBwYXJhbSB7SW1hZ2V9IFtvcHRpb25zLm1hc2tdIC0gQSBiaW5hcnkgaW1hZ2UsIHRoZSBzYW1lIHNpemUgYXMgdGhlIGltYWdlLiBUaGUgYWxnb3JpdGhtIHdpbGwgZmlsbCBvbmx5IGlmIHRoZSBjdXJyZW50IHBpeGVsIGluIHRoZSBiaW5hcnkgbWFzayBpcyB0cnVlLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5pbnZlcnQ9ZmFsc2VdIC0gQnkgZGVmYXVsdCB3ZSBmaWxsIHRoZSBtaW5pbWFcbiAqIEByZXR1cm4ge1JvaU1hcH1cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZnJvbVdhdGVyU2hlZChvcHRpb25zID0ge30pIHtcbiAgbGV0IHtcbiAgICBwb2ludHMsXG4gICAgbWFzayxcbiAgICBpbWFnZSxcbiAgICBmaWxsTWF4VmFsdWUgPSB0aGlzLm1heFZhbHVlLFxuICAgIGludmVydCA9IGZhbHNlLFxuICB9ID0gb3B0aW9ucztcbiAgbGV0IGN1cnJlbnRJbWFnZSA9IGltYWdlIHx8IHRoaXM7XG4gIGN1cnJlbnRJbWFnZS5jaGVja1Byb2Nlc3NhYmxlKCdmcm9tV2F0ZXJTaGVkJywge1xuICAgIGJpdERlcHRoOiBbOCwgMTZdLFxuICAgIGNvbXBvbmVudHM6IDEsXG4gIH0pO1xuXG4gIC8qXG4gICAgIFdlIG5lZWQgdG8gaW52ZXJ0IHRoZSBsb2dpYyBiZWNhdXNlIHdlIGFyZSBhbHdheXMgdXNpbmcgbWV0aG9kIHRvIGxvb2sgZm9yIG1heGltYSBhbmQgbm90IG1pbmltYSBhbmRcbiAgICAgaGVyZSB3YXRlciBpcyBleHBlY3RlZCB0byBmaWxsIHRoZSBtaW5pbWEgZmlyc3QgLi4uXG4gICAgKi9cblxuICBpbnZlcnQgPSAhaW52ZXJ0O1xuXG4gIC8vIFdhdGVyU2hlZCBpcyBkb25lIGZyb20gcG9pbnRzIGluIHRoZSBpbWFnZS4gV2UgY2FuIGVpdGhlciBzcGVjaWZ5IHRob3NlIHBvaW50cyBpbiBvcHRpb25zLFxuICAvLyBvciBpdCBpcyBnb25uYSB0YWtlIHRoZSBtaW5pbXVtIGxvY2FscyBvZiB0aGUgaW1hZ2UgYnkgZGVmYXVsdC5cbiAgaWYgKCFwb2ludHMpIHtcbiAgICBwb2ludHMgPSBjdXJyZW50SW1hZ2UuZ2V0TG9jYWxNYXhpbWEoe1xuICAgICAgaW52ZXJ0LFxuICAgICAgbWFzayxcbiAgICB9KTtcbiAgfVxuXG4gIGxldCBtYXNrRXhwZWN0ZWRWYWx1ZSA9IGludmVydCA/IDAgOiAxO1xuXG4gIGxldCBkYXRhID0gbmV3IEludDE2QXJyYXkoY3VycmVudEltYWdlLnNpemUpO1xuICBsZXQgd2lkdGggPSBjdXJyZW50SW1hZ2Uud2lkdGg7XG4gIGxldCBoZWlnaHQgPSBjdXJyZW50SW1hZ2UuaGVpZ2h0O1xuICBsZXQgdG9Qcm9jZXNzID0gbmV3IFByaW9yaXR5UXVldWUoe1xuICAgIGNvbXBhcmF0b3I6IChhLCBiKSA9PiBhWzJdIC0gYlsyXSxcbiAgICBzdHJhdGVneTogUHJpb3JpdHlRdWV1ZS5CaW5hcnlIZWFwU3RyYXRlZ3ksXG4gIH0pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50cy5sZW5ndGg7IGkrKykge1xuICAgIGxldCBpbmRleCA9IHBvaW50c1tpXVswXSArIHBvaW50c1tpXVsxXSAqIHdpZHRoO1xuICAgIGRhdGFbaW5kZXhdID0gaSArIDE7XG4gICAgbGV0IGludGVuc2l0eSA9IGN1cnJlbnRJbWFnZS5kYXRhW2luZGV4XTtcbiAgICBpZiAoXG4gICAgICAoaW52ZXJ0ICYmIGludGVuc2l0eSA8PSBmaWxsTWF4VmFsdWUpIHx8XG4gICAgICAoIWludmVydCAmJiBpbnRlbnNpdHkgPj0gZmlsbE1heFZhbHVlKVxuICAgICkge1xuICAgICAgdG9Qcm9jZXNzLnF1ZXVlKFtwb2ludHNbaV1bMF0sIHBvaW50c1tpXVsxXSwgaW50ZW5zaXR5XSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhlbiB3ZSBpdGVyYXRlIHRocm91Z2ggZWFjaCBwb2ludHNcbiAgd2hpbGUgKHRvUHJvY2Vzcy5sZW5ndGggPiAwKSB7XG4gICAgbGV0IGN1cnJlbnRQb2ludCA9IHRvUHJvY2Vzcy5kZXF1ZXVlKCk7XG4gICAgbGV0IGN1cnJlbnRWYWx1ZUluZGV4ID0gY3VycmVudFBvaW50WzBdICsgY3VycmVudFBvaW50WzFdICogd2lkdGg7XG5cbiAgICBmb3IgKGxldCBkaXIgPSAwOyBkaXIgPCA0OyBkaXIrKykge1xuICAgICAgbGV0IG5ld1ggPSBjdXJyZW50UG9pbnRbMF0gKyBkeHNbZGlyXTtcbiAgICAgIGxldCBuZXdZID0gY3VycmVudFBvaW50WzFdICsgZHlzW2Rpcl07XG4gICAgICBpZiAobmV3WCA+PSAwICYmIG5ld1kgPj0gMCAmJiBuZXdYIDwgd2lkdGggJiYgbmV3WSA8IGhlaWdodCkge1xuICAgICAgICBsZXQgY3VycmVudE5laWdoYm91ckluZGV4ID0gbmV3WCArIG5ld1kgKiB3aWR0aDtcbiAgICAgICAgaWYgKCFtYXNrIHx8IG1hc2suZ2V0Qml0KGN1cnJlbnROZWlnaGJvdXJJbmRleCkgPT09IG1hc2tFeHBlY3RlZFZhbHVlKSB7XG4gICAgICAgICAgbGV0IGludGVuc2l0eSA9IGN1cnJlbnRJbWFnZS5kYXRhW2N1cnJlbnROZWlnaGJvdXJJbmRleF07XG4gICAgICAgICAgaWYgKFxuICAgICAgICAgICAgKGludmVydCAmJiBpbnRlbnNpdHkgPD0gZmlsbE1heFZhbHVlKSB8fFxuICAgICAgICAgICAgKCFpbnZlcnQgJiYgaW50ZW5zaXR5ID49IGZpbGxNYXhWYWx1ZSlcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIGlmIChkYXRhW2N1cnJlbnROZWlnaGJvdXJJbmRleF0gPT09IDApIHtcbiAgICAgICAgICAgICAgZGF0YVtjdXJyZW50TmVpZ2hib3VySW5kZXhdID0gZGF0YVtjdXJyZW50VmFsdWVJbmRleF07XG4gICAgICAgICAgICAgIHRvUHJvY2Vzcy5xdWV1ZShbXG4gICAgICAgICAgICAgICAgY3VycmVudFBvaW50WzBdICsgZHhzW2Rpcl0sXG4gICAgICAgICAgICAgICAgY3VycmVudFBvaW50WzFdICsgZHlzW2Rpcl0sXG4gICAgICAgICAgICAgICAgaW50ZW5zaXR5LFxuICAgICAgICAgICAgICBdKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbmV3IFJvaU1hcChjdXJyZW50SW1hZ2UsIGRhdGEpO1xufVxuIiwiaW1wb3J0IFF0eSBmcm9tICdqcy1xdWFudGl0aWVzJztcblxuaW1wb3J0IGRlZXBWYWx1ZSBmcm9tICcuLi8uLi91dGlsL2RlZXBWYWx1ZSc7XG5pbXBvcnQgSW1hZ2UgZnJvbSAnLi4vSW1hZ2UnO1xuXG5pbXBvcnQgUm9pTGF5ZXIgZnJvbSAnLi9Sb2lMYXllcic7XG5pbXBvcnQgUm9pTWFwIGZyb20gJy4vUm9pTWFwJztcbmltcG9ydCBmcm9tTWFzayBmcm9tICcuL2NyZWF0b3IvZnJvbU1hc2snO1xuaW1wb3J0IGZyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0gZnJvbSAnLi9jcmVhdG9yL2Zyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0nO1xuaW1wb3J0IGZyb21NYXhpbWEgZnJvbSAnLi9jcmVhdG9yL2Zyb21NYXhpbWEnO1xuaW1wb3J0IGZyb21Qb2ludHMgZnJvbSAnLi9jcmVhdG9yL2Zyb21Qb2ludHMnO1xuaW1wb3J0IGZyb21XYXRlclNoZWQgZnJvbSAnLi9jcmVhdG9yL2Zyb21XYXRlclNoZWQnO1xuXG4vKipcbiAqIEEgbWFuYWdlciBvZiBSZWdpb25zIG9mIEludGVyZXN0LiBBIFJvaU1hbmFnZXIgaXMgcmVsYXRlZCB0byBhIHNwZWNpZmljIEltYWdlXG4gKiBhbmQgbWF5IGNvbnRhaW4gbXVsdGlwbGUgbGF5ZXJzLiBFYWNoIGxheWVyIGlzIGNoYXJhY3Rlcml6ZWQgYnkgYSBsYWJlbCB3aG9zZSBpc1xuICogbmFtZSBieSBkZWZhdWx0ICdkZWZhdWx0J1xuICogQGNsYXNzIFJvaU1hbmFnZXJcbiAqIEBwYXJhbSB7SW1hZ2V9IGltYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvaU1hbmFnZXIge1xuICBjb25zdHJ1Y3RvcihpbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gICAgdGhpcy5faW1hZ2UgPSBpbWFnZTtcbiAgICB0aGlzLl9vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAoIXRoaXMuX29wdGlvbnMubGFiZWwpIHtcbiAgICAgIHRoaXMuX29wdGlvbnMubGFiZWwgPSAnZGVmYXVsdCc7XG4gICAgfVxuICAgIHRoaXMuX2xheWVycyA9IHt9O1xuICAgIHRoaXMuX3BhaW50ZWQgPSBudWxsO1xuICB9XG5cbiAgLy8gZG9jcyBpcyBpbiB0aGUgY29ycmVzcG9uZGluZyBmaWxlXG4gIGZyb21NYXhpbWEob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCByb2lNYXAgPSBmcm9tTWF4aW1hLmNhbGwodGhpcy5faW1hZ2UsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2xheWVyc1tvcHQubGFiZWxdID0gbmV3IFJvaUxheWVyKHJvaU1hcCwgb3B0KTtcbiAgfVxuXG4gIC8vIGRvY3MgaXMgaW4gdGhlIGNvcnJlc3BvbmRpbmcgZmlsZVxuICBmcm9tUG9pbnRzKHBvaW50cywgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCByb2lNYXAgPSBmcm9tUG9pbnRzLmNhbGwodGhpcy5faW1hZ2UsIHBvaW50cywgb3B0aW9ucyk7XG4gICAgdGhpcy5fbGF5ZXJzW29wdC5sYWJlbF0gPSBuZXcgUm9pTGF5ZXIocm9pTWFwLCBvcHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEBwYXJhbSB7bnVtYmVyW119IG1hcFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm4ge3RoaXN9XG4gICAqL1xuICBwdXRNYXAobWFwLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgcm9pTWFwID0gbmV3IFJvaU1hcCh0aGlzLl9pbWFnZSwgbWFwKTtcbiAgICBsZXQgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5fbGF5ZXJzW29wdC5sYWJlbF0gPSBuZXcgUm9pTGF5ZXIocm9pTWFwLCBvcHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLy8gZG9jcyBpcyBpbiB0aGUgY29ycmVzcG9uZGluZyBmaWxlXG4gIGZyb21XYXRlclNoZWQob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCByb2lNYXAgPSBmcm9tV2F0ZXJTaGVkLmNhbGwodGhpcy5faW1hZ2UsIG9wdGlvbnMpO1xuICAgIHRoaXMuX2xheWVyc1tvcHQubGFiZWxdID0gbmV3IFJvaUxheWVyKHJvaU1hcCwgb3B0KTtcbiAgfVxuXG4gIC8vIGRvY3MgaXMgaW4gdGhlIGNvcnJlc3BvbmRpbmcgZmlsZVxuICBmcm9tTWFzayhtYXNrLCBvcHRpb25zID0ge30pIHtcbiAgICBsZXQgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgbGV0IHJvaU1hcCA9IGZyb21NYXNrLmNhbGwodGhpcy5faW1hZ2UsIG1hc2ssIG9wdGlvbnMpO1xuICAgIHRoaXMuX2xheWVyc1tvcHQubGFiZWxdID0gbmV3IFJvaUxheWVyKHJvaU1hcCwgb3B0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGZyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0obWFzaywgb3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG9wdCA9IE9iamVjdC5hc3NpZ24oe30sIHRoaXMuX29wdGlvbnMsIG9wdGlvbnMpO1xuICAgIGxldCByb2lNYXAgPSBmcm9tTWFza0Nvbm5lY3RlZENvbXBvbmVudExhYmVsaW5nQWxnb3JpdGhtLmNhbGwoXG4gICAgICB0aGlzLl9pbWFnZSxcbiAgICAgIG1hc2ssXG4gICAgICBvcHRpb25zLFxuICAgICk7XG4gICAgdGhpcy5fbGF5ZXJzW29wdC5sYWJlbF0gPSBuZXcgUm9pTGF5ZXIocm9pTWFwLCBvcHQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybiB7Um9pTWFwfVxuICAgKi9cbiAgZ2V0TWFwKG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBvcHQgPSBPYmplY3QuYXNzaWduKHt9LCB0aGlzLl9vcHRpb25zLCBvcHRpb25zKTtcbiAgICB0aGlzLl9hc3NlcnRMYXllcldpdGhMYWJlbChvcHQubGFiZWwpO1xuICAgIHJldHVybiB0aGlzLl9sYXllcnNbb3B0LmxhYmVsXS5yb2lNYXA7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHN0YXRpc3RpY3MgYWJvdXQgcm93c1xuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm4ge29iamVjdFtdfVxuICAgKi9cbiAgcm93c0luZm8ob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWFwKG9wdGlvbnMpLnJvd3NJbmZvKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHN0YXRpc3RpY3MgYWJvdXQgY29sdW1uc1xuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm4ge29iamVjdFtdfVxuICAgKi9cbiAgY29sc0luZm8ob3B0aW9ucyA9IHt9KSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0TWFwKG9wdGlvbnMpLnJvd3NJbmZvKCk7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJuIHRoZSBJRHMgb2YgdGhlIFJlZ2lvbnMgT2YgSW50ZXJlc3QgKFJvaSkgYXMgYW4gYXJyYXkgb2YgbnVtYmVyXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybiB7bnVtYmVyW119XG4gICAqL1xuICBnZXRSb2lJZHMob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHJvaXMgPSB0aGlzLmdldFJvaXMob3B0aW9ucyk7XG4gICAgaWYgKHJvaXMpIHtcbiAgICAgIGxldCBpZHMgPSBuZXcgQXJyYXkocm9pcy5sZW5ndGgpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCByb2lzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlkc1tpXSA9IHJvaXNbaV0uaWQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gaWRzO1xuICAgIH1cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1JPSXMgbm90IGZvdW5kJyk7XG4gIH1cblxuICAvKipcbiAgICogQWxsb3dzIHRvIHNlbGVjdCBST0kgYmFzZWQgb24gc2l6ZSwgbGFiZWwgYW5kIHNpZ24uXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9ucz17fV1cbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLmxhYmVsPSdkZWZhdWx0J10gTGFiZWwgb2YgdGhlIGxheWVyIGNvbnRhaW5pbmcgdGhlIFJPSVxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLnBvc2l0aXZlPXRydWVdIFNlbGVjdCB0aGUgcG9zaXRpdmUgcmVnaW9uIG9mIGludGVyZXN0XG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW29wdGlvbnMubmVnYXRpdmU9dHJ1ZV0gU2VsZWN0IGhlIG5lZ2F0aXZlIHJlZ2lvbiBvZiBpbnRlcmVzdFxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluU3VyZmFjZT0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4U3VyZmFjZT1OdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFldXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5XaWR0aD0wXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluSGVpZ2h0PU51bWJlci5QT1NJVElWRV9JTkZJTklUWV1cbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFdpZHRoPTBdXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhIZWlnaHQ9TnVtYmVyLlBPU0lUSVZFX0lORklOSVRZXVxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluUmF0aW89MF0gUmF0aW8gd2lkdGggLyBoZWlnaHRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heFJhdGlvPU51bWJlci5QT1NJVElWRV9JTkZJTklUWV1cbiAgICogQHJldHVybiB7Um9pW119XG4gICAqL1xuICBnZXRSb2lzKG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCB7XG4gICAgICBsYWJlbCA9IHRoaXMuX29wdGlvbnMubGFiZWwsXG4gICAgICBwb3NpdGl2ZSA9IHRydWUsXG4gICAgICBuZWdhdGl2ZSA9IHRydWUsXG4gICAgICBtaW5TdXJmYWNlID0gMCxcbiAgICAgIG1heFN1cmZhY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICBtaW5XaWR0aCA9IDAsXG4gICAgICBtYXhXaWR0aCA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICAgIG1pbkhlaWdodCA9IDAsXG4gICAgICBtYXhIZWlnaHQgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFksXG4gICAgICBtaW5SYXRpbyA9IDAsXG4gICAgICBtYXhSYXRpbyA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSxcbiAgICB9ID0gb3B0aW9ucztcblxuICAgIGlmICghdGhpcy5fbGF5ZXJzW2xhYmVsXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0aGlzIFJvaSBsYXllciAoJHtsYWJlbH0pIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxuXG4gICAgY29uc3QgYWxsUm9pcyA9IHRoaXMuX2xheWVyc1tsYWJlbF0ucm9pO1xuXG4gICAgY29uc3Qgcm9pcyA9IFtdO1xuICAgIGZvciAoY29uc3Qgcm9pIG9mIGFsbFJvaXMpIHtcbiAgICAgIGlmIChcbiAgICAgICAgKChyb2kuaWQgPCAwICYmIG5lZ2F0aXZlKSB8fCAocm9pLmlkID4gMCAmJiBwb3NpdGl2ZSkpICYmXG4gICAgICAgIHJvaS5zdXJmYWNlID49IG1pblN1cmZhY2UgJiZcbiAgICAgICAgcm9pLnN1cmZhY2UgPD0gbWF4U3VyZmFjZSAmJlxuICAgICAgICByb2kud2lkdGggPj0gbWluV2lkdGggJiZcbiAgICAgICAgcm9pLndpZHRoIDw9IG1heFdpZHRoICYmXG4gICAgICAgIHJvaS5oZWlnaHQgPj0gbWluSGVpZ2h0ICYmXG4gICAgICAgIHJvaS5oZWlnaHQgPD0gbWF4SGVpZ2h0ICYmXG4gICAgICAgIHJvaS5yYXRpbyA+PSBtaW5SYXRpbyAmJlxuICAgICAgICByb2kucmF0aW8gPD0gbWF4UmF0aW9cbiAgICAgICkge1xuICAgICAgICByb2lzLnB1c2gocm9pKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJvaXM7XG4gIH1cblxuICAvKipcbiAgICogR2V0IGFuIFJPSSBieSBpdHMgaWQuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSByb2lJZFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnM9e31dXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5sYWJlbD0nZGVmYXVsdCddIExhYmVsIG9mIHRoZSBsYXllciBjb250YWluaW5nIHRoZSBST0lcbiAgICogQHJldHVybiB7Um9pfVxuICAgKi9cbiAgZ2V0Um9pKHJvaUlkLCBvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGxhYmVsID0gdGhpcy5fb3B0aW9ucy5sYWJlbCB9ID0gb3B0aW9ucztcblxuICAgIGlmICghdGhpcy5fbGF5ZXJzW2xhYmVsXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGB0aGlzIFJvaSBsYXllciAoJHtsYWJlbH0pIGRvZXMgbm90IGV4aXN0YCk7XG4gICAgfVxuXG4gICAgY29uc3Qgcm9pID0gdGhpcy5fbGF5ZXJzW2xhYmVsXS5yb2kuZmluZCgocm9pKSA9PiByb2kuaWQgPT09IHJvaUlkKTtcbiAgICBpZiAoIXJvaSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBmb3VuZCBubyBSb2kgd2l0aCBpZCAke3JvaUlkfWApO1xuICAgIH1cblxuICAgIHJldHVybiByb2k7XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyBhbiBhcnJheSBvZiBtYXNrc1xuICAgKiBTZWUge0BsaW5rIFJvaS5nZXRNYXNrfSBmb3IgdGhlIG9wdGlvbnNcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJuIHtJbWFnZVtdfSBSZXR1bnMgYW4gYXJyYXkgb2YgbWFza3MgKDEgYml0IEltYWdlKVxuICAgKi9cbiAgZ2V0TWFza3Mob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHJvaXMgPSB0aGlzLmdldFJvaXMob3B0aW9ucyk7XG5cbiAgICBsZXQgbWFza3MgPSBuZXcgQXJyYXkocm9pcy5sZW5ndGgpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm9pcy5sZW5ndGg7IGkrKykge1xuICAgICAgbWFza3NbaV0gPSByb2lzW2ldLmdldE1hc2sob3B0aW9ucyk7XG4gICAgfVxuICAgIHJldHVybiBtYXNrcztcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIG1hc2tzXG4gICAqIFNlZSB7QGxpbmsgUm9pLmdldEFuYWx5c2lzTWFza3N9IGZvciB0aGUgb3B0aW9uc1xuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm4ge0ltYWdlW119IFJldHVucyBhbiBhcnJheSBvZiBtYXNrcyAoMSBiaXQgSW1hZ2UpXG4gICAqL1xuICBnZXRBbmFseXNpc01hc2tzKG9wdGlvbnMgPSB7fSkge1xuICAgIGNvbnN0IHsgYW5hbHlzaXNQcm9wZXJ0eSB9ID0gb3B0aW9ucztcbiAgICBsZXQgbWFza1Byb3BlcnR5ID0gYCR7YW5hbHlzaXNQcm9wZXJ0eX1NYXNrYDtcbiAgICBsZXQgcm9pcyA9IHRoaXMuZ2V0Um9pcyhvcHRpb25zKTtcblxuICAgIGlmIChyb2lzLmxlbmd0aCA9PT0gMCB8fCAhcm9pc1swXVttYXNrUHJvcGVydHldKSByZXR1cm4gW107XG4gICAgcmV0dXJuIHJvaXMubWFwKChyb2kpID0+IHJvaVttYXNrUHJvcGVydHldKTtcbiAgfVxuXG4gIC8qKlxuICAgKlxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEByZXR1cm4ge251bWJlcltdfVxuICAgKi9cbiAgZ2V0RGF0YShvcHRpb25zID0ge30pIHtcbiAgICBsZXQgb3B0ID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5fb3B0aW9ucywgb3B0aW9ucyk7XG4gICAgdGhpcy5fYXNzZXJ0TGF5ZXJXaXRoTGFiZWwob3B0LmxhYmVsKTtcbiAgICByZXR1cm4gdGhpcy5fbGF5ZXJzW29wdC5sYWJlbF0ucm9pTWFwLmRhdGE7XG4gIH1cblxuICAvKipcbiAgICogUGFpbnQgdGhlIFJPSSBvbiBhIGNvcHkgb2YgdGhlIGltYWdlIGFuZCByZXR1cm4gdGhpcyBpbWFnZS5cbiAgICogRm9yIHBhaW50aW5nIG9wdGlvbnMge0BsaW5rIEltYWdlLnBhaW50TWFza3N9XG4gICAqIEZvciBST0kgc2VsZWN0aW9uIG9wdGlvbnMsIHNlZSB7QGxpbmsgUm9pTWFuYWdlci5nZXRNYXNrc31cbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXSAtIGFsbCB0aGUgb3B0aW9ucyB0byBzZWxlY3QgUk9Jc1xuICAgKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubGFiZWxQcm9wZXJ0eV0gLSBQYWludCBhIG1hc2sgcHJvcGVydHkgb24gdGhlIGltYWdlLlxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXkgYmUgYW55IHByb3BlcnR5IG9mIHRoZSBST0kgbGlrZVxuICAgKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgZXhhbXBsZSBpZCwgc3VyZmFjZSwgd2lkdGgsIGhlaWdodCwgbWVhblgsIG1lYW5ZLlxuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMucGl4ZWxTaXplXSBTaXplIG9mIGEgcGl4ZWwgaW4gU0lcbiAgICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnVuaXQ9XCJwaXhlbFwiXSBVbml0IGluIHdoaWNoIHRvIGRpc3BsYXkgdGhlIHZhbHVlc1xuICAgKiBAcmV0dXJuIHtJbWFnZX0gLSBUaGUgcGFpbnRlZCBSR0JBIDggYml0cyBpbWFnZVxuICAgKi9cbiAgcGFpbnQob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IHsgbGFiZWxQcm9wZXJ0eSwgYW5hbHlzaXNQcm9wZXJ0eSB9ID0gb3B0aW9ucztcblxuICAgIGlmICghdGhpcy5fcGFpbnRlZCkge1xuICAgICAgdGhpcy5fcGFpbnRlZCA9IHRoaXMuX2ltYWdlLnJnYmE4KCk7XG4gICAgfVxuICAgIGxldCBtYXNrcyA9IHRoaXMuZ2V0TWFza3Mob3B0aW9ucyk7XG5cbiAgICBpZiAobGFiZWxQcm9wZXJ0eSkge1xuICAgICAgY29uc3Qgcm9pcyA9IHRoaXMuZ2V0Um9pcyhvcHRpb25zKTtcbiAgICAgIG9wdGlvbnMubGFiZWxzID0gcm9pcy5tYXAoKHJvaSkgPT4gZGVlcFZhbHVlKHJvaSwgbGFiZWxQcm9wZXJ0eSkpO1xuICAgICAgY29uc3QgbWF4ID0gTWF0aC5tYXgoLi4ub3B0aW9ucy5sYWJlbHMpO1xuXG4gICAgICBsZXQgaXNTdXJmYWNlID0gZmFsc2U7XG4gICAgICBsZXQgaXNEaXN0YW5jZSA9IGZhbHNlO1xuICAgICAgaWYgKGxhYmVsUHJvcGVydHkuaW5jbHVkZXMoJ3N1cmZhY2UnKSkge1xuICAgICAgICBpc1N1cmZhY2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgLyg/OnBlcmltZXRlcnxtaW58bWF4fGV4dGVybmFsfHdpZHRofGhlaWdodHxsZW5ndGgpLy50ZXN0KGxhYmVsUHJvcGVydHkpXG4gICAgICApIHtcbiAgICAgICAgaXNEaXN0YW5jZSA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Zpbml0ZShtYXgpKSB7XG4gICAgICAgIGxldCB1bml0TGFiZWwgPSAnJztcbiAgICAgICAgaWYgKFxuICAgICAgICAgIG9wdGlvbnMudW5pdCAhPT0gJ3BpeGVsJyAmJlxuICAgICAgICAgIG9wdGlvbnMucGl4ZWxTaXplICYmXG4gICAgICAgICAgKGlzRGlzdGFuY2UgfHwgaXNTdXJmYWNlKVxuICAgICAgICApIHtcbiAgICAgICAgICB1bml0TGFiZWwgPSBpc1N1cmZhY2UgPyBgJHtvcHRpb25zLnVuaXR9XjJgIDogb3B0aW9ucy51bml0O1xuICAgICAgICAgIGxldCBzaUxhYmVsID0gaXNTdXJmYWNlID8gJ21eMicgOiAnbSc7XG4gICAgICAgICAgbGV0IGZhY3RvciA9IGlzU3VyZmFjZSA/IG9wdGlvbnMucGl4ZWxTaXplICoqIDIgOiBvcHRpb25zLnBpeGVsU2l6ZTtcbiAgICAgICAgICBjb25zdCBjb252ZXJ0ID0gUXR5LnN3aWZ0Q29udmVydGVyKHNpTGFiZWwsIHVuaXRMYWJlbCk7XG4gICAgICAgICAgb3B0aW9ucy5sYWJlbHMgPSBvcHRpb25zLmxhYmVscy5tYXAoKHZhbHVlKSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY29udmVydChmYWN0b3IgKiB2YWx1ZSk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobWF4ID4gNTApIHtcbiAgICAgICAgICBvcHRpb25zLmxhYmVscyA9IG9wdGlvbnMubGFiZWxzLm1hcChcbiAgICAgICAgICAgIChudW1iZXIpID0+IE1hdGgucm91bmQobnVtYmVyKSArIHVuaXRMYWJlbCxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2UgaWYgKG1heCA+IDEwKSB7XG4gICAgICAgICAgb3B0aW9ucy5sYWJlbHMgPSBvcHRpb25zLmxhYmVscy5tYXAoXG4gICAgICAgICAgICAobnVtYmVyKSA9PiBudW1iZXIudG9GaXhlZCgxKSArIHVuaXRMYWJlbCxcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG9wdGlvbnMubGFiZWxzID0gb3B0aW9ucy5sYWJlbHMubWFwKFxuICAgICAgICAgICAgKG51bWJlcikgPT4gbnVtYmVyLnRvRml4ZWQoMikgKyB1bml0TGFiZWwsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgb3B0aW9ucy5sYWJlbHNQb3NpdGlvbiA9IHJvaXMubWFwKChyb2kpID0+IFtyb2kubWVhblgsIHJvaS5tZWFuWV0pO1xuICAgIH1cblxuICAgIHRoaXMuX3BhaW50ZWQucGFpbnRNYXNrcyhtYXNrcywgb3B0aW9ucyk7XG5cbiAgICBpZiAoYW5hbHlzaXNQcm9wZXJ0eSkge1xuICAgICAgbGV0IGFuYWx5c2lzTWFza3MgPSB0aGlzLmdldEFuYWx5c2lzTWFza3Mob3B0aW9ucyk7XG5cbiAgICAgIHRoaXMuX3BhaW50ZWQucGFpbnRNYXNrcyhhbmFseXNpc01hc2tzLCB7XG4gICAgICAgIGNvbG9yOiBvcHRpb25zLmFuYWx5c2lzQ29sb3IsXG4gICAgICAgIGFscGhhOiBvcHRpb25zLmFuYWx5c2lzQWxwaGEsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5fcGFpbnRlZDtcbiAgfVxuXG4gIC8vIHJldHVybiBhIG1hc2sgY29ycmVzcG9uZGluZyB0byBhbGwgdGhlIHNlbGVjdGVkIG1hc2tzXG4gIGdldE1hc2sob3B0aW9ucyA9IHt9KSB7XG4gICAgbGV0IG1hc2sgPSBuZXcgSW1hZ2UodGhpcy5faW1hZ2Uud2lkdGgsIHRoaXMuX2ltYWdlLmhlaWdodCwge1xuICAgICAga2luZDogJ0JJTkFSWScsXG4gICAgfSk7XG4gICAgbGV0IG1hc2tzID0gdGhpcy5nZXRNYXNrcyhvcHRpb25zKTtcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbWFza3MubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCByb2kgPSBtYXNrc1tpXTtcbiAgICAgIC8vIHdlIG5lZWQgdG8gZmluZCB0aGUgcGFyZW50IGltYWdlIHRvIGNhbGN1bGF0ZSB0aGUgcmVsYXRpdmUgcG9zaXRpb25cblxuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPCByb2kud2lkdGg7IHgrKykge1xuICAgICAgICBmb3IgKGxldCB5ID0gMDsgeSA8IHJvaS5oZWlnaHQ7IHkrKykge1xuICAgICAgICAgIGlmIChyb2kuZ2V0Qml0WFkoeCwgeSkpIHtcbiAgICAgICAgICAgIG1hc2suc2V0Qml0WFkoeCArIHJvaS5wb3NpdGlvblswXSwgeSArIHJvaS5wb3NpdGlvblsxXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBtYXNrO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlc2V0IHRoZSBjaGFuZ2VzIHRvIHRoZSBjdXJyZW50IHBhaW50ZWQgaWFtZ2UgdG8gdGhlIGltYWdlIHRoYXQgd2FzXG4gICAqIHVzZWQgZHVyaW5nIHRoZSBjcmVhdGlvbiBvZiB0aGUgUm9pTWFuYWdlciBleGNlcHQgaWYgYSBuZXcgaW1hZ2UgaXNcbiAgICogc3BlY2lmaWVkIGFzIHBhcmFtZXRlcjtcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcGFyYW0ge0ltYWdlfSBbb3B0aW9ucy5pbWFnZV0gQSBuZXcgaWFtZ2UgdGhhdCB5b3Ugd291bGQgbGlrZSB0byBzdWUgZm9yIHBhaW50aW5nIG92ZXJcbiAgICovXG4gIHJlc2V0UGFpbnRlZChvcHRpb25zID0ge30pIHtcbiAgICBjb25zdCB7IGltYWdlIH0gPSBvcHRpb25zO1xuICAgIGlmIChpbWFnZSkge1xuICAgICAgdGhpcy5fcGFpbnRlZCA9IHRoaXMuaW1hZ2UucmdiYTgoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fcGFpbnRlZCA9IHRoaXMuX2ltYWdlLnJnYmE4KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEluIHBsYWNlIG1vZGlmaWNhdGlvbiBvZiB0aGUgcm9pTWFwIHRoYXQgam9pbnMgcmVnaW9ucyBvZiBpbnRlcmVzdFxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gICAqIEBwYXJhbSB7c3RyaW5nfGZ1bmN0aW9uKG9iamVjdCxudW1iZXIsbnVtYmVyKX0gW29wdGlvbnMuYWxnb3JpdGhtPSdjb21tb25Cb3JkZXJMZW5ndGgnXSBhbGdvcml0aG0gdXNlZCB0byBkZWNpZGUgd2hpY2ggUk9JcyBhcmUgbWVyZ2VkLlxuICAgKiAgICAgIEN1cnJlbnQgaW1wbGVtZW50ZWQgYWxnb3JpdGhtcyBhcmUgJ2NvbW1vbkJvcmRlckxlbmd0aCcgdGhhdCB1c2UgdGhlIHBhcmFtZXRlcnNcbiAgICogICAgICAnbWluQ29tbW9uQm9yZGVyTGVuZ3RoJyBhbmQgJ21heENvbW1vbkJvcmRlckxlbmd0aCcgYXMgd2VsbCBhcyAnY29tbW9uQm9yZGVyUmF0aW8nIHRoYXQgdXNlc1xuICAgKiAgICAgIHRoZSBwYXJhbWV0ZXJzICdtaW5Db21tb25Cb3JkZXJSYXRpbycgYW5kICdtYXhDb21tb25Cb3JkZXJSYXRpbycuXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5taW5Db21tb25Cb3JkZXJMZW5ndGg9NV0gbWluaW1hbCBjb21tb24gbnVtYmVyIG9mIHBpeGVscyBmb3IgbWVyZ2luZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWF4Q29tbW9uQm9yZGVyTGVuZ3RoPTEwMF0gbWF4aW1hbCBjb21tb24gbnVtYmVyIG9mIHBpeGVscyBmb3IgbWVyZ2luZ1xuICAgKiBAcGFyYW0ge251bWJlcn0gW29wdGlvbnMubWluQ29tbW9uQm9yZGVyUmF0aW89MC4zXSBtaW5pbWFsIGNvbW1vbiBib3JkZXIgcmF0aW8gZm9yIG1lcmdpbmdcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtvcHRpb25zLm1heENvbW1vbkJvcmRlclJhdGlvPTFdIG1heGltYWwgY29tbW9uIGJvcmRlciByYXRpbyBmb3IgbWVyZ2luZ1xuICAgKiBAcmV0dXJuIHt0aGlzfVxuICAgKi9cbiAgbWVyZ2VSb2kob3B0aW9ucyA9IHt9KSB7XG4gICAgY29uc3Qgcm9pTWFwID0gdGhpcy5nZXRNYXAob3B0aW9ucyk7XG4gICAgcm9pTWFwLm1lcmdlUm9pKG9wdGlvbnMpO1xuICAgIHRoaXMucHV0TWFwKHJvaU1hcC5kYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSBtdWx0aXBsZSByb2lzIGludG8gb25lLlxuICAgKiBBbGwgcm9pcyBpbiB0aGUgcHJvdmlkZWQgYXJyYXkgd2lsbCBiZSBtZXJnZWQgaW50byB0aGUgZmlyc3Qgb25lLlxuICAgKiBAcGFyYW0ge0FycmF5PG51bWJlcj59IHJvaUlkcyAtIEEgbGlzdCBvZiBSb2kgaWRzIHRvIG1lcmdlXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICovXG4gIG1lcmdlUm9pcyhyb2lJZHMsIG9wdGlvbnMgPSB7fSkge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShyb2lJZHMpIHx8IHJvaUlkcy5zb21lKChpZCkgPT4gIU51bWJlci5pc0ludGVnZXIoaWQpKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdSb2kgaWRzIG11c3QgYmUgYW4gYXJyYXkgb2YgaW50ZWdlcnMnKTtcbiAgICB9XG4gICAgaWYgKHJvaUlkcy5sZW5ndGggPCAyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1JvaSBpZHMgbXVzdCBoYXZlIGF0IGxlYXN0IHR3byBlbGVtZW50cycpO1xuICAgIH1cbiAgICBpZiAobmV3IFNldChyb2lJZHMpLnNpemUgIT09IHJvaUlkcy5sZW5ndGgpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUm9pIGlkcyBtdXN0IGJlIGFsbCBkaWZmZXJlbnQnKTtcbiAgICB9XG4gICAgLy8gVGhyb3dzIGlmIG9uZSBvZiB0aGUgaWRzIGlzIHdyb25nXG4gICAgcm9pSWRzLmZvckVhY2goKHJvaUlkKSA9PiB0aGlzLmdldFJvaShyb2lJZCkpO1xuXG4gICAgY29uc3Qgcm9pTWFwID0gdGhpcy5nZXRNYXAob3B0aW9ucyk7XG4gICAgcm9pTWFwLm1lcmdlUm9pcyhyb2lJZHMpO1xuICAgIHRoaXMucHV0TWFwKHJvaU1hcC5kYXRhLCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBGaW5kcyBhbGwgY29ycmVzcG9uZGluZyBST0lzIGZvciBhbGwgUk9JcyBpbiB0aGUgbWFuYWdlclxuICAgKiBAcGFyYW0ge251bWJlcltdfSByb2lNYXBcbiAgICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICAgKiBAcmV0dXJuIHtBcnJheX0gYXJyYXkgb2Ygb2JqZWN0cyByZXR1cm5lZCBpbiBjb3JyZXNwb25kaW5nUm9pc0luZm9ybWF0aW9uXG4gICAqL1xuICBmaW5kQ29ycmVzcG9uZGluZ1JvaShyb2lNYXAsIG9wdGlvbnMgPSB7fSkge1xuICAgIGxldCBhbGxSb2lzID0gdGhpcy5nZXRSb2lzKG9wdGlvbnMpO1xuICAgIGxldCBhbGxSZWxhdGVkID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhbGxSb2lzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgY3VycmVudFJvaSA9IGFsbFJvaXNbaV07XG4gICAgICBsZXQgeCA9IGN1cnJlbnRSb2kubWluWDtcbiAgICAgIGxldCB5ID0gY3VycmVudFJvaS5taW5ZO1xuICAgICAgbGV0IGFsbFBvaW50cyA9IGN1cnJlbnRSb2kucG9pbnRzO1xuICAgICAgbGV0IHJvaVNpZ24gPSBNYXRoLnNpZ24oY3VycmVudFJvaS5pZCk7XG4gICAgICBsZXQgY3VycmVudFJlbGF0ZWQgPSBjb3JyZXNwb25kaW5nUm9pc0luZm9ybWF0aW9uKFxuICAgICAgICB4LFxuICAgICAgICB5LFxuICAgICAgICBhbGxQb2ludHMsXG4gICAgICAgIHJvaU1hcCxcbiAgICAgICAgcm9pU2lnbixcbiAgICAgICk7XG4gICAgICBhbGxSZWxhdGVkLnB1c2goY3VycmVudFJlbGF0ZWQpO1xuICAgIH1cbiAgICByZXR1cm4gYWxsUmVsYXRlZDtcbiAgfVxuXG4gIF9hc3NlcnRMYXllcldpdGhMYWJlbChsYWJlbCkge1xuICAgIGlmICghdGhpcy5fbGF5ZXJzW2xhYmVsXSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGBubyBsYXllciB3aXRoIGxhYmVsICR7bGFiZWx9YCk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogRm9yIGEgZ2l2ZW4gUk9JLCBmaW5kIGNvcnJlc3BvbmRpbmcgUk9JcyBhbmQgcHJvcGVydGllcyBpbiBnaXZlbiBST0lNYXAuXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBjb250YWluaW5nIHRoZSBJRCBvZiBST0lzLCB0aGUgc3VyZmFjZSBzaGFyZWQgYnkgZ2l2ZW4gYW5kIGNvcnJlc3BvbmRpbmcgUk9JcyxcbiAqIHRoZSBwZXJjZW50YWdlIG9mIGdpdmVuIFJPSSBzdXJmYWNlIGNvdmVyZWQgYnkgdGhlIGNvcnJlc3BvbmRpbmcgUk9JLCB0aGUgbnVtYmVyIG9mIHBvaW50cyB3aXRoIHNhbWUgYW5kIG9wcG9zaXRlIHNpZ25zLFxuICogdGhlIHRvdGFsIG51bWJlciBvZiBwb2ludHMgKHNhbWUgYW5kIG9wcG9zaXRlKS5cbiAqIEBwYXJhbSB7bnVtYmVyfSB4IC0gbWluWCB2YWx1ZSBvZiBST0lcbiAqIEBwYXJhbSB7bnVtYmVyfSB5IC0gbWluWSB2YWx1ZSBvZiBST0lcbiAqIEBwYXJhbSB7QXJyYXk8QXJyYXk8bnVtYmVyPj59IHBvaW50cyAtIHBvaW50cyBvZiBST0lcbiAqIEBwYXJhbSB7QXJyYXk8bnVtYmVyPn0gcm9pTWFwIC0gcm9pTWFwIGZyb20gd2hpY2ggd2UgZ2V0IHRoZSBjb3JyZXNwb25kaW5nIFJPSVxuICogQHBhcmFtIHtudW1iZXJ9IHJvaVNpZ24gLSBzaWduIG9mIFJPSVxuICogQHJldHVybiB7b2JqZWN0fSB7e2lkOiBBcnJheSwgc3VyZmFjZTogQXJyYXksIHJvaVN1cmZhY2VDb3ZlcmVkOiBBcnJheSwgc2FtZTogbnVtYmVyLCBvcHBvc2l0ZTogbnVtYmVyLCB0b3RhbDogbnVtYmVyfX1cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvcnJlc3BvbmRpbmdSb2lzSW5mb3JtYXRpb24oeCwgeSwgcG9pbnRzLCByb2lNYXAsIHJvaVNpZ24pIHtcbiAgbGV0IGNvcnJlc3BvbmRpbmdSb2lzID0ge1xuICAgIGlkOiBbXSxcbiAgICBzdXJmYWNlOiBbXSxcbiAgICByb2lTdXJmYWNlQ292ZXJlZDogW10sXG4gICAgc2FtZTogMCxcbiAgICBvcHBvc2l0ZTogMCxcbiAgICB0b3RhbDogMCxcbiAgfTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICBsZXQgY3VycmVudFBvaW50ID0gcG9pbnRzW2ldO1xuICAgIGxldCBjdXJyZW50WCA9IGN1cnJlbnRQb2ludFswXTtcbiAgICBsZXQgY3VycmVudFkgPSBjdXJyZW50UG9pbnRbMV07XG4gICAgbGV0IGNvcnJlc3BvbmRpbmdSb2lNYXBJbmRleCA9IGN1cnJlbnRYICsgeCArIChjdXJyZW50WSArIHkpICogcm9pTWFwLndpZHRoO1xuICAgIGxldCB2YWx1ZSA9IHJvaU1hcC5kYXRhW2NvcnJlc3BvbmRpbmdSb2lNYXBJbmRleF07XG5cbiAgICBpZiAodmFsdWUgPiAwIHx8IHZhbHVlIDwgMCkge1xuICAgICAgaWYgKGNvcnJlc3BvbmRpbmdSb2lzLmlkLmluY2x1ZGVzKHZhbHVlKSkge1xuICAgICAgICBjb3JyZXNwb25kaW5nUm9pcy5zdXJmYWNlW2NvcnJlc3BvbmRpbmdSb2lzLmlkLmluZGV4T2YodmFsdWUpXSArPSAxO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29ycmVzcG9uZGluZ1JvaXMuaWQucHVzaCh2YWx1ZSk7XG4gICAgICAgIGNvcnJlc3BvbmRpbmdSb2lzLnN1cmZhY2UucHVzaCgxKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvcnJlc3BvbmRpbmdSb2lzLmlkLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGN1cnJlbnRTaWduID0gTWF0aC5zaWduKGNvcnJlc3BvbmRpbmdSb2lzLmlkW2ldKTtcbiAgICBpZiAoY3VycmVudFNpZ24gPT09IHJvaVNpZ24pIHtcbiAgICAgIGNvcnJlc3BvbmRpbmdSb2lzLnNhbWUgKz0gY29ycmVzcG9uZGluZ1JvaXMuc3VyZmFjZVtpXTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29ycmVzcG9uZGluZ1JvaXMub3Bwb3NpdGUgKz0gY29ycmVzcG9uZGluZ1JvaXMuc3VyZmFjZVtpXTtcbiAgICB9XG4gICAgY29ycmVzcG9uZGluZ1JvaXMucm9pU3VyZmFjZUNvdmVyZWRbaV0gPVxuICAgICAgY29ycmVzcG9uZGluZ1JvaXMuc3VyZmFjZVtpXSAvIHBvaW50cy5sZW5ndGg7XG4gIH1cbiAgY29ycmVzcG9uZGluZ1JvaXMudG90YWwgPSBjb3JyZXNwb25kaW5nUm9pcy5vcHBvc2l0ZSArIGNvcnJlc3BvbmRpbmdSb2lzLnNhbWU7XG5cbiAgcmV0dXJuIGNvcnJlc3BvbmRpbmdSb2lzO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVlcFZhbHVlKG9iamVjdCwgcGF0aCA9ICcnKSB7XG4gIGxldCBwYXJ0cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgZm9yIChsZXQgcGFydCBvZiBwYXJ0cykge1xuICAgIGlmIChvYmplY3RbcGFydF0gPT09IHVuZGVmaW5lZCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICBvYmplY3QgPSBvYmplY3RbcGFydF07XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cbiIsImltcG9ydCBiaXRNZXRob2RzIGZyb20gJy4vY29yZS9iaXRNZXRob2RzJztcbmltcG9ydCBjaGVja1Byb2Nlc3NhYmxlIGZyb20gJy4vY29yZS9jaGVja1Byb2Nlc3NhYmxlJztcbmltcG9ydCBleHBvcnRNZXRob2RzIGZyb20gJy4vY29yZS9leHBvcnQnO1xuaW1wb3J0IHsgZXh0ZW5kTWV0aG9kLCBleHRlbmRQcm9wZXJ0eSB9IGZyb20gJy4vY29yZS9leHRlbmQnO1xuaW1wb3J0IGdldFJHQkFEYXRhIGZyb20gJy4vY29yZS9nZXRSR0JBRGF0YSc7XG5pbXBvcnQge1xuICBnZXRLaW5kLFxuICB2ZXJpZnlLaW5kRGVmaW5pdGlvbixcbiAgY3JlYXRlUGl4ZWxBcnJheSxcbiAgZ2V0VGhlb3JldGljYWxQaXhlbEFycmF5U2l6ZSxcbn0gZnJvbSAnLi9jb3JlL2tpbmQnO1xuaW1wb3J0IHsgUkdCQSB9IGZyb20gJy4vY29yZS9raW5kTmFtZXMnO1xuaW1wb3J0IGxvYWQgZnJvbSAnLi9jb3JlL2xvYWQnO1xuaW1wb3J0IHZhbHVlTWV0aG9kcyBmcm9tICcuL2NvcmUvdmFsdWVNZXRob2RzJztcbmltcG9ydCBleHRlbmQgZnJvbSAnLi9leHRlbmQnO1xuaW1wb3J0IGdldEltYWdlUGFyYW1ldGVycyBmcm9tICcuL2ludGVybmFsL2dldEltYWdlUGFyYW1ldGVycyc7XG5pbXBvcnQgUm9pTWFuYWdlciBmcm9tICcuL3JvaS9tYW5hZ2VyJztcblxuY29uc3Qgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xuXG4vKipcbiAqIENsYXNzIHJlcHJlc2VudGluZyBhbiBpbWFnZS5cbiAqIFRoaXMgY2xhc3MgYWxsb3dzIHRvIG1hbmlwdWxhdGUgZWFzaWx5IGltYWdlcyBkaXJlY3RseSBpbiB0aGUgYnJvd3NlciBvciBpbiBub2RlLlxuICpcbiAqIFRoaXMgbGlicmFyeSBpcyBkZXNpZ25lZCB0byBkZWFsIHdpdGggc2NpZW50aWZpYyBpbWFnZXMgKDggb3IgMTYgYml0IGRlcHRoKSBhbmQgd2lsbCBiZSBhYmxlIHRvIG9wZW5cbiAqIGFuZCBwcm9jZXNzIGpwZWcsIHBuZyBhbmQgdW5jb21wcmVzc2VkIHRpZmYgaW1hZ2VzLiBJdCBpcyBkZXNpZ25lZCB0byB3b3JrIGluIHRoZSBicm93c2VyXG4gKiBhcyBvbiB0aGUgc2VydmVyIHNpZGUgaW4gbm9kZS5cbiAqXG4gKiBBbiBpbWFnZSBpcyBjaGFyYWN0ZXJpemVkIGJ5OlxuICogKiB3aWR0aCBhbmQgaGVpZ2h0XG4gKiAqIGNvbG9yTW9kZWwgKFJHQiwgSFNMLCBDTVlLLCBHUkVZLCAuLi4pXG4gKiAqIGNvbXBvbmVudHM6IG51bWJlciBvZiBjb21wb25lbnRzLCBHcmV5IHNjYWxlIGltYWdlcyB3aWxsIGhhdmUgMSBjb21wb25lbnQgd2hpbGUgUkdCIHdpbGwgaGF2ZSAzIGFuZCBDTVlLIDQuXG4gKiAqIGFscGhhOiAwIG9yIDEgZGVwZW5kaW5nIGlmIHRoZXJlIGlzIGFuIGFscGhhIGNoYW5uZWwuIFRoZVxuICogICAgICBhbHBoYSBjaGFubmVsIGRlZmluZSB0aGUgb3BhY2l0eSBvZiBlYWNoIHBpeGVsXG4gKiAqIGNoYW5uZWxzOiBudW1iZXIgb2YgY2hhbm5lbHMgKGNvbXBvbmVudHMgKyBhbHBoYSlcbiAqICogYml0RGVwdGggOiBudW1iZXIgb2YgYml0cyB0byBkZWZpbmUgdGhlIGludGVuc2l0eSBvZiBhIHBvaW50LlxuICogICAgICBUaGUgdmFsdWVzIG1heSBiZSAxIGZvciBhIGJpbmFyeSBpbWFnZSAobWFzayksIDggZm9yIGEgbm9ybWFsIGltYWdlIChlYWNoXG4gKiAgICAgIGNoYW5uZWwgY29udGFpbnMgdmFsdWVzIGJldHdlZW4gMCBhbmQgMjU1KSBhbmQgMTYgZm9yIHNjaWVudGlmaWMgaW1hZ2VzXG4gKiAgICAgIChlYWNoIGNoYW5uZWwgY29udGFpbnMgdmFsdWVzIGJldHdlZW4gMCBhbmQgNjU1MzUpLlxuICogICAgICBUaGUgcG5nIGxpYnJhcnkgYW5kIHRpZmYgbGlicmFyeSBpbmNsdWRlZCBpbiBpbWFnZS1qcyBhbGxvdyB0byBkZWFsIGNvcnJlY3RseSB3aXRoXG4gKiAgICAgIDggYW5kIDE2IGJpdCBkZXB0aCBpbWFnZXMuXG4gKiAqIHBvc2l0aW9uIDogYW4gYXJyYXkgb2YgMiBlbGVtZW50cyB0aGF0IGFsbG93cyB0byBkZWZpbmUgYSByZWxhdGl2ZSBwb3NpdGlvblxuICogICAgICB0byBhIHBhcmVudCBpbWFnZS4gVGhpcyB3aWxsIGJlIHVzZWQgaW4gYSBjcm9wIG9yIGluIHRoZSBtYW5hZ2VtZW50XG4gKiAgICAgIG9mIFJlZ2lvbiBPZiBJbnRlcmVzdHMgKFJvaSkgZm9yIGV4bWFwbGVcbiAqICogZGF0YSA6IGFuIGFycmF5IHRoYXQgY29udGFpbnMgYWxsIHRoZSBwb2ludHMgb2YgdGhlIGltYWdlLlxuICogICAgICBEZXBlbmRpbmcgdGhlIGJpdERlcHRoIFVpbnQ4QXJyYXkgKDEgYml0KSwgVWludDhBcnJheSAoOCBiaXRzKSxcbiAqICAgICAgVWludDE2QXJyYXkgKDE2IGJpdHMpLCBGbG9hdDMyQXJyYXkgKDMyIGJpdHMpXG4gKlxuICogSW4gYW4gaW1hZ2UgdGhlcmUgYXJlIHBpeGVscyBhbmQgcG9pbnRzOlxuICogKiBBIHBpeGVsIGlzIGFuIGFycmF5IHRoYXQgaGFzIGFzIHNpemUgdGhlIG51bWJlciBvZiBjaGFubmVsc1xuICogYW5kIHRoYXQgY29udGFpbnMgYWxsIHRoZSB2YWx1ZXMgdGhhdCBkZWZpbmUgYSBwYXJ0aWN1bGFyIHBpeGVsIG9mIHRoZSBpbWFnZS5cbiAqICogQSBwb2ludCBpcyBhbiBhcnJheSBvZiAyIGVsZW1lbnRzIHRoYXQgY29udGFpbnMgdGhlIHggLyB5IGNvb3JkaW5hdGVcbiAqIG9mIGEgc3BlY2lmaWMgcGl4ZWwgb2YgdGhlIGltYWdlXG4gKlxuICpcbiAqIEBjbGFzcyBJbWFnZVxuICogQHBhcmFtIHtudW1iZXJ9IFt3aWR0aD0xXVxuICogQHBhcmFtIHtudW1iZXJ9IFtoZWlnaHQ9MV1cbiAqIEBwYXJhbSB7QXJyYXl9IFtkYXRhXSAtIEltYWdlIGRhdGEgdG8gbG9hZFxuICogQHBhcmFtIHtvYmplY3R9IFtvcHRpb25zXVxuICpcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSmF2YVNjcmlwdCBjb2RlIHVzaW5nIE5vZGUuanMgdG8gZ2V0IHNvbWUgaW5mbyBhYm91dCB0aGUgaW1hZ2UuXG4gKiAvLyBXZSBsb2FkIHRoZSBsaWJyYXJ5IHRoYXQgd2FzIGluc3RhbGxlZCB1c2luZyAnbnBtIGluc3RhbGwgaW1hZ2UtanMnXG4gKiBjb25zdCB7IEltYWdlIH0gPSByZXF1aXJlKCdpbWFnZS1qcycpO1xuICpcbiAqIC8vIExvYWRpbmcgYW4gaW1hZ2UgaXMgYXN5bmNocm9ub3VzIGFuZCB3aWxsIHJldHVybiBhIFByb21pc2UuXG4gKiBJbWFnZS5sb2FkKCdjYXQuanBnJykudGhlbihmdW5jdGlvbiAoaW1hZ2UpIHtcbiAqICAgY29uc29sZS5sb2coJ1dpZHRoJywgaW1hZ2Uud2lkdGgpO1xuICogICBjb25zb2xlLmxvZygnSGVpZ2h0JywgaW1hZ2UuaGVpZ2h0KTtcbiAqICAgY29uc29sZS5sb2coJ2NvbG9yTW9kZWwnLCBpbWFnZS5jb2xvck1vZGVsKTtcbiAqICAgY29uc29sZS5sb2coJ2NvbXBvbmVudHMnLCBpbWFnZS5jb21wb25lbnRzKTtcbiAqICAgY29uc29sZS5sb2coJ2FscGhhJywgaW1hZ2UuYWxwaGEpO1xuICogICBjb25zb2xlLmxvZygnY2hhbm5lbHMnLCBpbWFnZS5jaGFubmVscyk7XG4gKiAgIGNvbnNvbGUubG9nKCdiaXREZXB0aCcsIGltYWdlLmJpdERlcHRoKTtcbiAqIH0pO1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBDb252ZXJ0IGFuIGltYWdlIHRvIGdyZXlzY2FsZVxuICogY29uc3QgeyBJbWFnZSB9ID0gcmVxdWlyZSgnaW1hZ2UtanMnKTtcbiAqXG4gKiBJbWFnZS5sb2FkKCdjYXQuanBnJykudGhlbihmdW5jdGlvbiAoaW1hZ2UpIHtcbiAqICAgdmFyIGdyZXkgPSBpbWFnZS5ncmV5KCk7XG4gKiAgIGdyZXkuc2F2ZSgnY2F0LWdyZXkuanBnJyk7XG4gKiB9KTtcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gU3BsaXQgYW4gUkdCIGltYWdlIGluIGl0cyBjb21wb25lbnRzXG4gKiBjb25zdCB7IEltYWdlIH0gPSByZXF1aXJlKCdpbWFnZS1qcycpO1xuICpcbiAqIEltYWdlLmxvYWQoJ2NhdC5qcGcnKS50aGVuKGZ1bmN0aW9uIChpbWFnZSkge1xuICogICB2YXIgY29tcG9uZW50cyA9IGltYWdlLnNwbGl0KCk7XG4gKiAgIGNvbXBvbmVudHNbMF0uc2F2ZSgnY2F0LXJlZC5qcGcnKTtcbiAqICAgY29tcG9uZW50c1sxXS5zYXZlKCdjYXQtZ3JlZW4uanBnJyk7XG4gKiAgIGNvbXBvbmVudHNbMl0uc2F2ZSgnY2F0LWJsdXIuanBnJyk7XG4gKiB9KTtcbiAqXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGlzIGV4YW1wbGUgeW91IHdpbGwgbmVlZCB0aGUgcGljdHVyZSBvZiBhbiBlY3N0YXN5IHBpbGwgdGhhdCBpcyBhdmFpbGFibGUgb25cbiAqIC8vIHdnZXQgaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ltYWdlLWpzL2NvcmUvODU0ZTcwZjUwZDYzY2M3M2QyZGRlMWQyMDIwZmU2MWJhMWI1ZWMwNS90ZXN0L2ltZy94dGMucG5nIC8vIHRoZSBnb2FsIGlzIHRvIGlzb2xhdGUgdGhlIHBpY3R1cmUgYW5kIHRvIGdldCBhIFJHQiBoaXN0b2dyYW0gb2YgdGhlIHBpbGwuXG4gKiAvLyBQcmFjdGljYWxseSB0aGlzIGFsbG93cyB0byBjbGFzc2lmeSBwaWxscyBiYXNlZCBvbiB0aGUgaGlzdG9ncmFtIHNpbWlsYXJpdHlcbiAqIC8vIFRoaXMgd29yayB3YXMgcHVibGlzaGVkIGF0OiBodHRwOi8vZHguZG9pLm9yZy8xMC4xMDE2L2ouZm9yc2NpaW50LjIwMTIuMTAuMDA0XG4gKlxuICogY29uc3QgeyBJbWFnZSB9ID0gcmVxdWlyZSgnaW1hZ2UtanMnKTtcbiAqXG4gKiBjb25zdCBpbWFnZSA9IGF3YWl0IEltYWdlLmxvYWQoJ3h0Yy5wbmcnKTtcbiAqXG4gKiBjb25zdCBncmV5ID0gaW1hZ2UuZ3JleSh7XG4gKiAgIGFsZ29yaXRobTonbGlnaHRuZXNzJ1xuICogfSk7XG4gKiAvLyB3ZSBjcmVhdGUgYSBtYXNrLCB3aGljaCBpcyBiYXNpY2FsbHkgYSBiaW5hcnkgaW1hZ2VcbiAqIC8vIGEgbWFzayBoYXMgYXMgc291cmNlIGEgZ3JleSBpbWFnZSBhbmQgd2Ugd2lsbCBkZWNpZGUgaG93IHRvIGRldGVybWluZVxuICogLy8gdGhlIHRocmVzaG9sZCB0byBkZWZpbmUgd2hhdCBpcyB3aGl0ZSBhbmQgd2hhdCBpcyBibGFja1xuICogdmFyIG1hc2sgPSBncmV5Lm1hc2soe1xuICogICBhbGdvcml0aG06ICdsaSdcbiAqIH0pO1xuICpcbiAqIC8vIGl0IGlzIHBvc3NpYmxlIHRvIGNyZWF0ZSBhbiBhcnJheSBvZiBSZWdpb24gT2YgSW50ZXJlc3QgKFJvaSkgdXNpbmdcbiAqIC8vIHRoZSBSb2lNYW5hZ2VyLiBBIFJvaU1hbmFnZXIgd2lsbCBiZSBhcHBsaWVkIG9uIHRoZSBvcmlnaW5hbCBpbWFnZVxuICogLy8gaW4gb3JkZXIgdG8gYmUgYWJsZSB0byBleHRyYWN0IGZyb20gdGhlIG9yaWdpbmFsIGltYWdlIHRoZSByZWdpb25zXG4gKlxuICogLy8gdGhlIHJlc3VsdCBvZiB0aGlzIGNvbnNvbGUubG9nIHJlc3VsdCBjYW4gZGlyZXRseSBiZSBwYXN0ZWRcbiAqIC8vIGluIHRoZSBicm93c2VyXG4gKiAvLyBjb25zb2xlLmxvZyhtYXNrLnRvRGF0YVVSTCgpKTtcbiAqXG4gKlxuICogdmFyIG1hbmFnZXIgPSBpbWFnZS5nZXRSb2lNYW5hZ2VyKCk7XG4gKiBtYW5hZ2VyLmZyb21NYXNrKG1hc2spO1xuICogdmFyIHJvaXMgPSBtYW5hZ2VyLmdldFJvaSh7XG4gKiAgIHBvc2l0aXZlOiB0cnVlLFxuICogICBuZWdhdGl2ZTogZmFsc2UsXG4gKiAgIG1pblN1cmZhY2U6IDEwMFxuICogfSk7XG4gKlxuICogLy8gY29uc29sZS5sb2cocm9pcyk7XG4gKlxuICogLy8gd2UgY2FuIHNvcnQgdGVoIHJvaXMgYnkgc3VyZmFjZVxuICogLy8gZm9yIGRlbW9uc3RyYXRpb24gd2UgdXNlIGFuIGFycm93IGZ1bmN0aW9uXG4gKiByb2lzLnNvcnQoKGEsIGIpID0+IGIuc3VyZmFjZSAtIGEuc3VyZmFjZSk7XG4gKlxuICogLy8gdGhlIGZpcnN0IFJvaSAodGhlIGJpZ2dlc3QgaXMgZXhwZWN0ZWQgdG8gYmUgdGhlIHBpbGwpXG4gKlxuICogdmFyIHBpbGxNYXNrID0gcm9pc1swXS5nZXRNYXNrKHtcbiAqICAgc2NhbGU6IDAuNyAgIC8vIHdlIHdpbGwgc2NhbGUgZG93biB0aGUgbWFzayB0byB0YWtlIGp1c3QgdGhlIGNlbnRlciBvZiB0aGUgcGlsbCBhbmQgYXZvaWQgYm9yZGVyIGVmZmVjdHNcbiAqIH0pO1xuICpcbiAqIC8vIGltYWdlLWpzIHJlbWVtYmVycyB0aGUgcGFyZW50IG9mIHRoZSBpbWFnZSBhbmQgdGhlIHJlbGF0aXZlXG4gKiAvLyBwb3NpdGlvbiBvZiBhIGRlcml2ZWQgaW1hZ2UuIFRoaXMgaXMgdGhlIGNhc2UgZm9yIGEgY3JvcCBhc1xuICogLy8gd2VsbCBhcyBmb3IgUm9pXG4gKlxuICogdmFyIHBpbGwgPSBpbWFnZS5leHRyYWN0KHBpbGxNYXNrKTtcbiAqIHBpbGwuc2F2ZSgncGlsbC5qcGcnKTtcbiAqXG4gKiB2YXIgaGlzdG9ncmFtID0gcGlsbC5nZXRIaXN0b2dyYW1zKHsgbWF4U2xvdHM6IDE2IH0pO1xuICpcbiAqIGNvbnNvbGUubG9nKGhpc3RvZ3JhbSk7XG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEV4YW1wbGUgb2YgdXNlIG9mIElKUyBpbiB0aGUgYnJvd3NlclxuICpcbiAqIDxzY3JpcHQ+XG4gKiAgdmFyIGNhbnZhcyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdteUNhbnZhc0lEJyk7XG4gKiAgdmFyIGltYWdlID0gSUpTLmZyb21DYW52YXMoY2FudmFzKTtcbiAqIDwvc2NyaXB0PlxuICovXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBJbWFnZSB7XG4gIGNvbnN0cnVjdG9yKHdpZHRoLCBoZWlnaHQsIGRhdGEsIG9wdGlvbnMpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgb3B0aW9ucyA9IHdpZHRoO1xuICAgICAgKHsgd2lkdGgsIGhlaWdodCwgZGF0YSB9ID0gb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmIChkYXRhICYmICFkYXRhLmxlbmd0aCkge1xuICAgICAgb3B0aW9ucyA9IGRhdGE7XG4gICAgICAoeyBkYXRhIH0gPSBvcHRpb25zKTtcbiAgICB9XG4gICAgaWYgKHdpZHRoID09PSB1bmRlZmluZWQpIHdpZHRoID0gMTtcbiAgICBpZiAoaGVpZ2h0ID09PSB1bmRlZmluZWQpIGhlaWdodCA9IDE7XG4gICAgaWYgKG9wdGlvbnMgPT09IHVuZGVmaW5lZCkgb3B0aW9ucyA9IHt9O1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0JyB8fCBvcHRpb25zID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gICAgfVxuXG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKHdpZHRoKSB8fCB3aWR0aCA8PSAwKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignd2lkdGggbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICB9XG4gICAgaWYgKCFOdW1iZXIuaXNJbnRlZ2VyKGhlaWdodCkgfHwgaGVpZ2h0IDw9IDApIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdoZWlnaHQgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXInKTtcbiAgICB9XG5cbiAgICBjb25zdCB7IGtpbmQgPSBSR0JBIH0gPSBvcHRpb25zO1xuICAgIGlmICh0eXBlb2Yga2luZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ2tpbmQgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIH1cbiAgICBjb25zdCB0aGVLaW5kID0gZ2V0S2luZChraW5kKTtcbiAgICBjb25zdCBraW5kRGVmaW5pdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbnMpO1xuICAgIGZvciAoY29uc3QgcHJvcCBpbiB0aGVLaW5kKSB7XG4gICAgICBpZiAoa2luZERlZmluaXRpb25bcHJvcF0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBraW5kRGVmaW5pdGlvbltwcm9wXSA9IHRoZUtpbmRbcHJvcF07XG4gICAgICB9XG4gICAgfVxuICAgIHZlcmlmeUtpbmREZWZpbml0aW9uKGtpbmREZWZpbml0aW9uKTtcblxuICAgIGNvbnN0IHsgY29tcG9uZW50cywgYml0RGVwdGgsIGNvbG9yTW9kZWwgfSA9IGtpbmREZWZpbml0aW9uO1xuICAgIGNvbnN0IGFscGhhID0ga2luZERlZmluaXRpb24uYWxwaGEgKyAwO1xuICAgIGNvbnN0IHNpemUgPSB3aWR0aCAqIGhlaWdodDtcbiAgICBjb25zdCBjaGFubmVscyA9IGNvbXBvbmVudHMgKyBhbHBoYTtcbiAgICBjb25zdCBtYXhWYWx1ZSA9IGJpdERlcHRoID09PSAzMiA/IE51bWJlci5NQVhfVkFMVUUgOiAyICoqIGJpdERlcHRoIC0gMTtcblxuICAgIGlmIChkYXRhID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGRhdGEgPSBjcmVhdGVQaXhlbEFycmF5KFxuICAgICAgICBzaXplLFxuICAgICAgICBjb21wb25lbnRzLFxuICAgICAgICBhbHBoYSxcbiAgICAgICAgY2hhbm5lbHMsXG4gICAgICAgIGJpdERlcHRoLFxuICAgICAgICBtYXhWYWx1ZSxcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGV4cGVjdGVkTGVuZ3RoID0gZ2V0VGhlb3JldGljYWxQaXhlbEFycmF5U2l6ZShcbiAgICAgICAgc2l6ZSxcbiAgICAgICAgY2hhbm5lbHMsXG4gICAgICAgIGJpdERlcHRoLFxuICAgICAgKTtcbiAgICAgIGlmIChkYXRhLmxlbmd0aCAhPT0gZXhwZWN0ZWRMZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXG4gICAgICAgICAgYGluY29ycmVjdCBkYXRhIHNpemU6ICR7ZGF0YS5sZW5ndGh9LiBTaG91bGQgYmUgJHtleHBlY3RlZExlbmd0aH1gLFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFdpZHRoIG9mIHRoZSBpbWFnZS5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xuXG4gICAgLyoqXG4gICAgICogSGVpZ2h0IG9mIHRoZSBpbWFnZS5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XG5cbiAgICAvKipcbiAgICAgKiBUeXBlZCBhcnJheSBob2xkaW5nIHRoZSBpbWFnZSBkYXRhLlxuICAgICAqIEBtZW1iZXIge1R5cGVkQXJyYXl9XG4gICAgICovXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcblxuICAgIC8qKlxuICAgICAqIFRvdGFsIG51bWJlciBvZiBwaXhlbHMgKHdpZHRoICogaGVpZ2h0KS5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5zaXplID0gc2l6ZTtcblxuICAgIC8qKlxuICAgICAqIE51bWJlciBvZiBjb2xvciBjaGFubmVscyBpbiB0aGUgaW1hZ2UuXG4gICAgICogQSBncmV5IGltYWdlIGhhcyAxIGNvbXBvbmVudC4gQW4gUkdCIGltYWdlIGhhcyAzIGNvbXBvbmVudHMuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY29tcG9uZW50cyA9IGNvbXBvbmVudHM7XG5cbiAgICAvKipcbiAgICAgKiBBbHBoYSBpcyAxIGlmIHRoZXJlIGlzIGFuIGFscGhhIGNoYW5uZWwsIDAgb3RoZXJ3aXNlLlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmFscGhhID0gYWxwaGE7XG5cbiAgICAvKipcbiAgICAgKiBOdW1iZXIgb2YgYml0cyBwZXIgdmFsdWUgaW4gZWFjaCBjaGFubmVsLlxuICAgICAqIEBtZW1iZXIge251bWJlcn1cbiAgICAgKi9cbiAgICB0aGlzLmJpdERlcHRoID0gYml0RGVwdGg7XG5cbiAgICAvKipcbiAgICAgKiBNYXhpbXVtIHZhbHVlIHRoYXQgYSBwaXhlbCBjYW4gaGF2ZS5cbiAgICAgKiBAbWVtYmVyIHtudW1iZXJ9XG4gICAgICovXG4gICAgdGhpcy5tYXhWYWx1ZSA9IG1heFZhbHVlO1xuXG4gICAgLyoqXG4gICAgICogQ29sb3IgbW9kZWwgb2YgdGhlIGltYWdlLlxuICAgICAqIEBtZW1iZXIge0NvbG9yTW9kZWx9XG4gICAgICovXG4gICAgdGhpcy5jb2xvck1vZGVsID0gY29sb3JNb2RlbDtcblxuICAgIC8qKlxuICAgICAqIFRvdGFsIG51bWJlciBvZiBjaGFubmVscy4gSXMgZXF1YWwgdG8gYGltYWdlLmNvbXBvbmVudHMgKyBpbWFnZS5hbHBoYWAuXG4gICAgICogQG1lbWJlciB7bnVtYmVyfVxuICAgICAqL1xuICAgIHRoaXMuY2hhbm5lbHMgPSBjaGFubmVscztcblxuICAgIC8qKlxuICAgICAqIE1ldGFkYXRhIGFzc29jaWF0ZWQgd2l0aCB0aGUgaW1hZ2UuXG4gICAgICogQG1lbWJlciB7b2JqZWN0fVxuICAgICAqL1xuICAgIHRoaXMubWV0YSA9IG9wdGlvbnMubWV0YSB8fCB7fTtcblxuICAgIC8vIFRPRE8gcmV2aWV3IHRob3NlIHByb3BzXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsICdwYXJlbnQnLCB7XG4gICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgdmFsdWU6IG9wdGlvbnMucGFyZW50IHx8IG51bGwsXG4gICAgfSk7XG4gICAgdGhpcy5wb3NpdGlvbiA9IG9wdGlvbnMucG9zaXRpb24gfHwgWzAsIDBdO1xuXG4gICAgdGhpcy5jb21wdXRlZCA9IG51bGw7XG4gICAgdGhpcy5zaXplcyA9IFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF07XG4gICAgdGhpcy5tdWx0aXBsaWVyWCA9IHRoaXMuY2hhbm5lbHM7XG4gICAgdGhpcy5tdWx0aXBsaWVyWSA9IHRoaXMuY2hhbm5lbHMgKiB0aGlzLndpZHRoO1xuICAgIHRoaXMuaXNDbGFtcGVkID0gdGhpcy5iaXREZXB0aCA8IDMyO1xuICAgIHRoaXMuYm9yZGVyU2l6ZXMgPSBbMCwgMF07IC8vIHdoZW4gYSBmaWx0ZXIgY3JlYXRlcyBhIGJvcmRlciwgaXQgbWF5IGhhdmUgaW1wYWN0IG9uIGZ1dHVyZSBwcm9jZXNzaW5nIGxpa2UgUm9pXG4gIH1cblxuICBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKSB7XG4gICAgcmV0dXJuICdJSlNJbWFnZSc7XG4gIH1cblxuICBzdGF0aWMgaXNJbWFnZShvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0VG9TdHJpbmcuY2FsbChvYmplY3QpID09PSAnW29iamVjdCBJSlNJbWFnZV0nO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYW4gaW1hZ2UgZnJvbSBhbiBIVE1MIENhbnZhcyBvYmplY3RcbiAgICogQHBhcmFtIHtDYW52YXN9IGNhbnZhc1xuICAgKiBAcmV0dXJuIHtJbWFnZX1cbiAgICovXG4gIHN0YXRpYyBmcm9tQ2FudmFzKGNhbnZhcykge1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICByZXR1cm4gbmV3IEltYWdlKGltYWdlRGF0YS53aWR0aCwgaW1hZ2VEYXRhLmhlaWdodCwgaW1hZ2VEYXRhLmRhdGEpO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyBJbWFnZSBiYXNlZCBvbiB0aGUgY2hhcmFjdGVyaXN0aWNzIG9mIGFub3RoZXIgb25lLlxuICAgKiBAcGFyYW0ge0ltYWdlfSBvdGhlclxuICAgKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gT3ZlcnJpZGUgb3B0aW9ucyB0byBjaGFuZ2Ugc29tZSBwYXJhbWV0ZXJzXG4gICAqIEByZXR1cm4ge0ltYWdlfVxuICAgKiBAZXhhbXBsZVxuICAgKiBjb25zdCBuZXdJbWFnZSA9IEltYWdlLmNyZWF0ZUZyb20oaW1hZ2UsIHsgd2lkdGg6IDEwMCB9KTtcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVGcm9tKG90aGVyLCBvcHRpb25zKSB7XG4gICAgY29uc3QgbmV3T3B0aW9ucyA9IGdldEltYWdlUGFyYW1ldGVycyhvdGhlcik7XG4gICAgT2JqZWN0LmFzc2lnbihcbiAgICAgIG5ld09wdGlvbnMsXG4gICAgICB7XG4gICAgICAgIHBhcmVudDogb3RoZXIsXG4gICAgICAgIHBvc2l0aW9uOiBbMCwgMF0sXG4gICAgICB9LFxuICAgICAgb3B0aW9ucyxcbiAgICApO1xuICAgIHJldHVybiBuZXcgSW1hZ2UobmV3T3B0aW9ucyk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IG1hbmFnZXIgZm9yIHJlZ2lvbnMgb2YgaW50ZXJlc3QgYmFzZWQgb24gdGhlIGN1cnJlbnQgaW1hZ2UuXG4gICAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc11cbiAgICogQHJldHVybiB7Um9pTWFuYWdlcn1cbiAgICovXG4gIGdldFJvaU1hbmFnZXIob3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgUm9pTWFuYWdlcih0aGlzLCBvcHRpb25zKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBjb3B5IGEgdGhlIGN1cnJlbnQgaW1hZ2UsIGluY2x1ZGluZyBpdHMgZGF0YS5cbiAgICogQGluc3RhbmNlXG4gICAqIEByZXR1cm4ge0ltYWdlfVxuICAgKi9cbiAgY2xvbmUoKSB7XG4gICAgY29uc3QgbmV3RGF0YSA9IHRoaXMuZGF0YS5zbGljZSgpO1xuICAgIHJldHVybiBuZXcgSW1hZ2UodGhpcy53aWR0aCwgdGhpcy5oZWlnaHQsIG5ld0RhdGEsIHRoaXMpO1xuICB9XG5cbiAgYXBwbHkoZmlsdGVyKSB7XG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmhlaWdodDsgeSsrKSB7XG4gICAgICBmb3IgKGxldCB4ID0gMDsgeCA8IHRoaXMud2lkdGg7IHgrKykge1xuICAgICAgICBsZXQgaW5kZXggPSAoeSAqIHRoaXMud2lkdGggKyB4KSAqIHRoaXMuY2hhbm5lbHM7XG4gICAgICAgIGZpbHRlci5jYWxsKHRoaXMsIGluZGV4KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxudmFsdWVNZXRob2RzKEltYWdlKTtcbmJpdE1ldGhvZHMoSW1hZ2UpO1xuZXhwb3J0TWV0aG9kcyhJbWFnZSk7XG5cbkltYWdlLnByb3RvdHlwZS5jaGVja1Byb2Nlc3NhYmxlID0gY2hlY2tQcm9jZXNzYWJsZTtcbkltYWdlLnByb3RvdHlwZS5nZXRSR0JBRGF0YSA9IGdldFJHQkFEYXRhO1xuXG5JbWFnZS5sb2FkID0gbG9hZDtcbkltYWdlLmV4dGVuZE1ldGhvZCA9IGV4dGVuZE1ldGhvZDtcbkltYWdlLmV4dGVuZFByb3BlcnR5ID0gZXh0ZW5kUHJvcGVydHk7XG5leHRlbmQoSW1hZ2UpO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCBjaGVja3MgaWYgYSBwcm9jZXNzIGNhbiBiZSBhcHBsaWVkIG9uIHRoZSBjdXJyZW50IGltYWdlXG4gKiBAbWVtYmVyb2YgSW1hZ2VcbiAqIEBpbnN0YW5jZVxuICogQHBhcmFtIHtzdHJpbmd9IHByb2Nlc3NOYW1lXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNoZWNrUHJvY2Vzc2FibGUocHJvY2Vzc05hbWUsIG9wdGlvbnMgPSB7fSkge1xuICBsZXQgeyBiaXREZXB0aCwgYWxwaGEsIGNvbG9yTW9kZWwsIGNvbXBvbmVudHMsIGNoYW5uZWxzIH0gPSBvcHRpb25zO1xuICBpZiAodHlwZW9mIHByb2Nlc3NOYW1lICE9PSAnc3RyaW5nJyB8fCBwcm9jZXNzTmFtZS5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdwcm9jZXNzTmFtZSBtdXN0IGJlIGEgc3RyaW5nJyk7XG4gIH1cbiAgaWYgKGJpdERlcHRoKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGJpdERlcHRoKSkge1xuICAgICAgYml0RGVwdGggPSBbYml0RGVwdGhdO1xuICAgIH1cbiAgICBpZiAoIWJpdERlcHRoLmluY2x1ZGVzKHRoaXMuYml0RGVwdGgpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgVGhlIHByb2Nlc3M6ICR7cHJvY2Vzc05hbWV9IGNhbiBvbmx5IGJlIGFwcGxpZWQgaWYgYml0IGRlcHRoIGlzIGluOiAke2JpdERlcHRofWAsXG4gICAgICApO1xuICAgIH1cbiAgfVxuICBpZiAoYWxwaGEpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoYWxwaGEpKSB7XG4gICAgICBhbHBoYSA9IFthbHBoYV07XG4gICAgfVxuICAgIGlmICghYWxwaGEuaW5jbHVkZXModGhpcy5hbHBoYSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXG4gICAgICAgIGBUaGUgcHJvY2VzczogJHtwcm9jZXNzTmFtZX0gY2FuIG9ubHkgYmUgYXBwbGllZCBpZiBhbHBoYSBpcyBpbjogJHthbHBoYX1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbG9yTW9kZWwpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29sb3JNb2RlbCkpIHtcbiAgICAgIGNvbG9yTW9kZWwgPSBbY29sb3JNb2RlbF07XG4gICAgfVxuICAgIGlmICghY29sb3JNb2RlbC5pbmNsdWRlcyh0aGlzLmNvbG9yTW9kZWwpKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICBgVGhlIHByb2Nlc3M6ICR7cHJvY2Vzc05hbWV9IGNhbiBvbmx5IGJlIGFwcGxpZWQgaWYgY29sb3IgbW9kZWwgaXMgaW46ICR7Y29sb3JNb2RlbH1gLFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgaWYgKGNvbXBvbmVudHMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoY29tcG9uZW50cykpIHtcbiAgICAgIGNvbXBvbmVudHMgPSBbY29tcG9uZW50c107XG4gICAgfVxuICAgIGlmICghY29tcG9uZW50cy5pbmNsdWRlcyh0aGlzLmNvbXBvbmVudHMpKSB7XG4gICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gb25seSBiZSBhcHBsaWVkIGlmIHRoZSBudW1iZXIgb2YgY29tcG9uZW50cyBpcyBpbjogJHtjb21wb25lbnRzfWA7XG4gICAgICBpZiAoY29tcG9uZW50cy5sZW5ndGggPT09IDEgJiYgY29tcG9uZW50c1swXSA9PT0gMSkge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFxuICAgICAgICAgIGAke2Vycm9yTWVzc2FnZX0uXFxyWW91IHNob3VsZCB0cmFuc2Zvcm0geW91ciBpbWFnZSB1c2luZyBcImltYWdlLmdyZXkoKVwiIGJlZm9yZSBhcHBseWluZyB0aGUgYWxnb3JpdGhtLmAsXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGlmIChjaGFubmVscykge1xuICAgIGlmICghQXJyYXkuaXNBcnJheShjaGFubmVscykpIHtcbiAgICAgIGNoYW5uZWxzID0gW2NoYW5uZWxzXTtcbiAgICB9XG4gICAgaWYgKCFjaGFubmVscy5pbmNsdWRlcyh0aGlzLmNoYW5uZWxzKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcbiAgICAgICAgYFRoZSBwcm9jZXNzOiAke3Byb2Nlc3NOYW1lfSBjYW4gb25seSBiZSBhcHBsaWVkIGlmIHRoZSBudW1iZXIgb2YgY2hhbm5lbHMgaXMgaW46ICR7Y2hhbm5lbHN9YCxcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBSR0IgfSBmcm9tICcuLi9tb2RlbC9tb2RlbCc7XG5cbi8qKlxuICogUmV0cmlldmUgdGhlIGRhdGEgb2YgdGhlIGN1cnJlbnQgaW1hZ2UgYXMgUkdCQSA4IGJpdHNcbiAqIFRoZSBzb3VyY2UgaW1hZ2UgbWF5IGJlOlxuICogKiBhIG1hc2sgKGJpbmFyeSBpbWFnZSlcbiAqICogYSBncmV5IGltYWdlICg4IDE2IGJpdHMpIHdpdGggb3Igd2l0aG91dCBhbHBoYSBjaGFubmVsXG4gKiAqIGEgY29sb3IgaW1hZ2UgKDggb3IgMTYgYml0cykgd2l0aCBvciB3aXRob3V0IGFscGhhIGNoYW5uZWwgaW4gd2l0aCBSR0IgbW9kZWxcbiAqIEBpbnN0YW5jZVxuICogQG1lbWJlcm9mIEltYWdlXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtvcHRpb25zLmNsYW1wZWRdIC0gSWYgdHJ1ZSwgdGhlIGZ1bmN0aW9uIHdpbGwgcmV0dXJuIGEgVWludDhDbGFtcGVkQXJyYXlcbiAqIEByZXR1cm4ge1VpbnQ4QXJyYXl8VWludDhDbGFtcGVkQXJyYXl9IC0gQXJyYXkgd2l0aCB0aGUgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRSR0JBRGF0YShvcHRpb25zID0ge30pIHtcbiAgY29uc3QgeyBjbGFtcGVkIH0gPSBvcHRpb25zO1xuICB0aGlzLmNoZWNrUHJvY2Vzc2FibGUoJ2dldFJHQkFEYXRhJywge1xuICAgIGNvbXBvbmVudHM6IFsxLCAzXSxcbiAgICBiaXREZXB0aDogWzEsIDgsIDE2LCAzMl0sXG4gIH0pO1xuICBjb25zdCBhcnJheUxlbmd0aCA9IHRoaXMud2lkdGggKiB0aGlzLmhlaWdodCAqIDQ7XG4gIGxldCBuZXdEYXRhID0gY2xhbXBlZFxuICAgID8gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGFycmF5TGVuZ3RoKVxuICAgIDogbmV3IFVpbnQ4QXJyYXkoYXJyYXlMZW5ndGgpO1xuICBpZiAodGhpcy5iaXREZXB0aCA9PT0gMSkge1xuICAgIGZpbGxEYXRhRnJvbUJpbmFyeSh0aGlzLCBuZXdEYXRhKTtcbiAgfSBlbHNlIGlmICh0aGlzLmJpdERlcHRoID09PSAzMikge1xuICAgIHRoaXMuY2hlY2tQcm9jZXNzYWJsZSgnZ2V0UkdCQURhdGEnLCB7IGFscGhhOiAwIH0pO1xuICAgIGlmICh0aGlzLmNvbXBvbmVudHMgPT09IDEpIHtcbiAgICAgIGZpbGxEYXRhRnJvbUdyZXkzMih0aGlzLCBuZXdEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50cyA9PT0gMykge1xuICAgICAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRSR0JBRGF0YScsIHsgY29sb3JNb2RlbDogW1JHQl0gfSk7XG4gICAgICBmaWxsRGF0YUZyb21SR0IzMih0aGlzLCBuZXdEYXRhKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHRoaXMuY29tcG9uZW50cyA9PT0gMSkge1xuICAgICAgZmlsbERhdGFGcm9tR3JleSh0aGlzLCBuZXdEYXRhKTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuY29tcG9uZW50cyA9PT0gMykge1xuICAgICAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRSR0JBRGF0YScsIHsgY29sb3JNb2RlbDogW1JHQl0gfSk7XG4gICAgICBmaWxsRGF0YUZyb21SR0IodGhpcywgbmV3RGF0YSk7XG4gICAgfVxuICB9XG4gIGlmICh0aGlzLmFscGhhID09PSAxKSB7XG4gICAgdGhpcy5jaGVja1Byb2Nlc3NhYmxlKCdnZXRSR0JBRGF0YScsIHsgYml0RGVwdGg6IFs4LCAxNl0gfSk7XG4gICAgY29weUFscGhhKHRoaXMsIG5ld0RhdGEpO1xuICB9IGVsc2Uge1xuICAgIGZpbGxBbHBoYSh0aGlzLCBuZXdEYXRhKTtcbiAgfVxuICByZXR1cm4gbmV3RGF0YTtcbn1cblxuZnVuY3Rpb24gZmlsbERhdGFGcm9tQmluYXJ5KGltYWdlLCBuZXdEYXRhKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgaW1hZ2Uuc2l6ZTsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBpbWFnZS5nZXRCaXQoaSk7XG4gICAgbmV3RGF0YVtpICogNF0gPSB2YWx1ZSAqIDI1NTtcbiAgICBuZXdEYXRhW2kgKiA0ICsgMV0gPSB2YWx1ZSAqIDI1NTtcbiAgICBuZXdEYXRhW2kgKiA0ICsgMl0gPSB2YWx1ZSAqIDI1NTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsRGF0YUZyb21HcmV5MzIoaW1hZ2UsIG5ld0RhdGEpIHtcbiAgY29uc3QgbWluID0gaW1hZ2UubWluWzBdO1xuICBjb25zdCBtYXggPSBpbWFnZS5tYXhbMF07XG4gIGNvbnN0IHJhbmdlID0gbWF4IC0gbWluO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlLnNpemU7IGkrKykge1xuICAgIGNvbnN0IHZhbCA9IE1hdGguZmxvb3IoKDI1NSAqIChpbWFnZS5kYXRhW2ldIC0gbWluKSkgLyByYW5nZSk7XG4gICAgbmV3RGF0YVtpICogNF0gPSB2YWw7XG4gICAgbmV3RGF0YVtpICogNCArIDFdID0gdmFsO1xuICAgIG5ld0RhdGFbaSAqIDQgKyAyXSA9IHZhbDtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsRGF0YUZyb21SR0IzMihpbWFnZSwgbmV3RGF0YSkge1xuICBjb25zdCBtaW4gPSBNYXRoLm1pbiguLi5pbWFnZS5taW4pO1xuICBjb25zdCBtYXggPSBNYXRoLm1heCguLi5pbWFnZS5tYXgpO1xuICBjb25zdCByYW5nZSA9IG1heCAtIG1pbjtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5zaXplOyBpKyspIHtcbiAgICBjb25zdCB2YWwxID0gTWF0aC5mbG9vcigoMjU1ICogKGltYWdlLmRhdGFbaSAqIDNdIC0gbWluKSkgLyByYW5nZSk7XG4gICAgY29uc3QgdmFsMiA9IE1hdGguZmxvb3IoKDI1NSAqIChpbWFnZS5kYXRhW2kgKiAzICsgMV0gLSBtaW4pKSAvIHJhbmdlKTtcbiAgICBjb25zdCB2YWwzID0gTWF0aC5mbG9vcigoMjU1ICogKGltYWdlLmRhdGFbaSAqIDMgKyAyXSAtIG1pbikpIC8gcmFuZ2UpO1xuICAgIG5ld0RhdGFbaSAqIDRdID0gdmFsMTtcbiAgICBuZXdEYXRhW2kgKiA0ICsgMV0gPSB2YWwyO1xuICAgIG5ld0RhdGFbaSAqIDQgKyAyXSA9IHZhbDM7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmlsbERhdGFGcm9tR3JleShpbWFnZSwgbmV3RGF0YSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGltYWdlLnNpemU7IGkrKykge1xuICAgIG5ld0RhdGFbaSAqIDRdID0gaW1hZ2UuZGF0YVtpICogaW1hZ2UuY2hhbm5lbHNdID4+PiAoaW1hZ2UuYml0RGVwdGggLSA4KTtcbiAgICBuZXdEYXRhW2kgKiA0ICsgMV0gPVxuICAgICAgaW1hZ2UuZGF0YVtpICogaW1hZ2UuY2hhbm5lbHNdID4+PiAoaW1hZ2UuYml0RGVwdGggLSA4KTtcbiAgICBuZXdEYXRhW2kgKiA0ICsgMl0gPVxuICAgICAgaW1hZ2UuZGF0YVtpICogaW1hZ2UuY2hhbm5lbHNdID4+PiAoaW1hZ2UuYml0RGVwdGggLSA4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsRGF0YUZyb21SR0IoaW1hZ2UsIG5ld0RhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5zaXplOyBpKyspIHtcbiAgICBuZXdEYXRhW2kgKiA0XSA9IGltYWdlLmRhdGFbaSAqIGltYWdlLmNoYW5uZWxzXSA+Pj4gKGltYWdlLmJpdERlcHRoIC0gOCk7XG4gICAgbmV3RGF0YVtpICogNCArIDFdID1cbiAgICAgIGltYWdlLmRhdGFbaSAqIGltYWdlLmNoYW5uZWxzICsgMV0gPj4+IChpbWFnZS5iaXREZXB0aCAtIDgpO1xuICAgIG5ld0RhdGFbaSAqIDQgKyAyXSA9XG4gICAgICBpbWFnZS5kYXRhW2kgKiBpbWFnZS5jaGFubmVscyArIDJdID4+PiAoaW1hZ2UuYml0RGVwdGggLSA4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjb3B5QWxwaGEoaW1hZ2UsIG5ld0RhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5zaXplOyBpKyspIHtcbiAgICBuZXdEYXRhW2kgKiA0ICsgM10gPVxuICAgICAgaW1hZ2UuZGF0YVtpICogaW1hZ2UuY2hhbm5lbHMgKyBpbWFnZS5jb21wb25lbnRzXSA+PiAoaW1hZ2UuYml0RGVwdGggLSA4KTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmaWxsQWxwaGEoaW1hZ2UsIG5ld0RhdGEpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbWFnZS5zaXplOyBpKyspIHtcbiAgICBuZXdEYXRhW2kgKiA0ICsgM10gPSAyNTU7XG4gIH1cbn1cbiIsIi8qIGVzbGludC1kaXNhYmxlIGltcG9ydC9vcmRlciAqL1xuXG4vLyBmaWx0ZXJzXG5pbXBvcnQgYWJzRmlsdGVyIGZyb20gJy4vZmlsdGVyL2Ficyc7XG5pbXBvcnQgaW52ZXJ0RmlsdGVyIGZyb20gJy4vZmlsdGVyL2ludmVydCc7XG5pbXBvcnQgZmxpcFhGaWx0ZXIgZnJvbSAnLi9maWx0ZXIvZmxpcFgnO1xuaW1wb3J0IGZsaXBZRmlsdGVyIGZyb20gJy4vZmlsdGVyL2ZsaXBZJztcbmltcG9ydCBibHVyRmlsdGVyIGZyb20gJy4vZmlsdGVyL2JsdXJGaWx0ZXInO1xuaW1wb3J0IG1lZGlhbkZpbHRlciBmcm9tICcuL2ZpbHRlci9tZWRpYW5GaWx0ZXInO1xuaW1wb3J0IGdhdXNzaWFuRmlsdGVyIGZyb20gJy4vZmlsdGVyL2dhdXNzaWFuRmlsdGVyJztcbmltcG9ydCBzb2JlbEZpbHRlciBmcm9tICcuL2ZpbHRlci9zb2JlbEZpbHRlcic7XG5pbXBvcnQgc2NoYXJyRmlsdGVyIGZyb20gJy4vZmlsdGVyL3NjaGFyckZpbHRlcic7XG5pbXBvcnQgZ3JhZGllbnRGaWx0ZXIgZnJvbSAnLi9maWx0ZXIvZ3JhZGllbnRGaWx0ZXInO1xuaW1wb3J0IGxldmVsRmlsdGVyIGZyb20gJy4vZmlsdGVyL2xldmVsJztcbmltcG9ydCBhZGRGaWx0ZXIgZnJvbSAnLi9maWx0ZXIvYWRkJztcbmltcG9ydCBzdWJ0cmFjdEZpbHRlciBmcm9tICcuL2ZpbHRlci9zdWJ0cmFjdCc7XG5pbXBvcnQgc3VidHJhY3RJbWFnZSBmcm9tICcuL2ZpbHRlci9zdWJ0cmFjdEltYWdlJztcbmltcG9ydCBoeXBvdGVudXNlRmlsdGVyIGZyb20gJy4vZmlsdGVyL2h5cG90ZW51c2UnO1xuaW1wb3J0IG11bHRpcGx5RmlsdGVyIGZyb20gJy4vZmlsdGVyL211bHRpcGx5JztcbmltcG9ydCBkaXZpZGVGaWx0ZXIgZnJvbSAnLi9maWx0ZXIvZGl2aWRlJztcbmltcG9ydCBiYWNrZ3JvdW5kRmlsdGVyIGZyb20gJy4vZmlsdGVyL2JhY2tncm91bmQnO1xuXG4vLyBtb3JwaG9sb2d5IHRyYW5zZm9ybXNcbmltcG9ydCBkaWxhdGUgZnJvbSAnLi9tb3JwaG9sb2d5L2RpbGF0ZSc7XG5pbXBvcnQgZXJvZGUgZnJvbSAnLi9tb3JwaG9sb2d5L2Vyb2RlJztcbmltcG9ydCBvcGVuIGZyb20gJy4vbW9ycGhvbG9neS9vcGVuJztcbmltcG9ydCBjbG9zZSBmcm9tICcuL21vcnBob2xvZ3kvY2xvc2UnO1xuaW1wb3J0IHRvcEhhdCBmcm9tICcuL21vcnBob2xvZ3kvdG9wSGF0JztcbmltcG9ydCBibGFja0hhdCBmcm9tICcuL21vcnBob2xvZ3kvYmxhY2tIYXQnO1xuaW1wb3J0IG1vcnBob2xvZ2ljYWxHcmFkaWVudCBmcm9tICcuL21vcnBob2xvZ3kvbW9ycGhvbG9naWNhbEdyYWRpZW50JztcblxuLy8gdHJhbnNmb3Jtc1xuaW1wb3J0IHdhcnBpbmdGb3VyUG9pbnRzIGZyb20gJy4vdHJhbnNmb3JtL3dhcnBpbmcnO1xuaW1wb3J0IGNyb3AgZnJvbSAnLi90cmFuc2Zvcm0vY3JvcCc7XG5pbXBvcnQgY3JvcEFscGhhIGZyb20gJy4vdHJhbnNmb3JtL2Nyb3BBbHBoYSc7XG5pbXBvcnQgcmVzaXplIGZyb20gJy4vdHJhbnNmb3JtL3Jlc2l6ZS9yZXNpemUnO1xuaW1wb3J0IGhzdiBmcm9tICcuL3RyYW5zZm9ybS9oc3YnO1xuaW1wb3J0IGhzbCBmcm9tICcuL3RyYW5zZm9ybS9oc2wnO1xuaW1wb3J0IGNteWsgZnJvbSAnLi90cmFuc2Zvcm0vY215ayc7XG5pbXBvcnQgcmdiYTggZnJvbSAnLi90cmFuc2Zvcm0vcmdiYTgnO1xuaW1wb3J0IGdyZXkgZnJvbSAnLi90cmFuc2Zvcm0vZ3JleSc7XG5pbXBvcnQgbWFzayBmcm9tICcuL3RyYW5zZm9ybS9tYXNrL21hc2snO1xuaW1wb3J0IHBhZCBmcm9tICcuL3RyYW5zZm9ybS9wYWQnO1xuaW1wb3J0IGNvbG9yRGVwdGggZnJvbSAnLi90cmFuc2Zvcm0vY29sb3JEZXB0aCc7XG5pbXBvcnQgeyByb3RhdGUsIHJvdGF0ZUxlZnQsIHJvdGF0ZVJpZ2h0IH0gZnJvbSAnLi90cmFuc2Zvcm0vcm90YXRlJztcbmltcG9ydCBpbnNlcnQgZnJvbSAnLi90cmFuc2Zvcm0vaW5zZXJ0JztcblxuLy8gdXRpbGl0eVxuaW1wb3J0IHNldEJvcmRlciBmcm9tICcuL3V0aWxpdHkvc2V0Qm9yZGVyJztcbmltcG9ydCBzcGxpdCBmcm9tICcuL3V0aWxpdHkvc3BsaXQnO1xuaW1wb3J0IGdldENoYW5uZWwgZnJvbSAnLi91dGlsaXR5L2dldENoYW5uZWwnO1xuaW1wb3J0IGNvbWJpbmVDaGFubmVscyBmcm9tICcuL3V0aWxpdHkvY29tYmluZUNoYW5uZWxzJztcbmltcG9ydCBzZXRDaGFubmVsIGZyb20gJy4vdXRpbGl0eS9zZXRDaGFubmVsJztcbmltcG9ydCBnZXRTaW1pbGFyaXR5IGZyb20gJy4vdXRpbGl0eS9nZXRTaW1pbGFyaXR5JztcbmltcG9ydCBnZXRQaXhlbHNHcmlkIGZyb20gJy4vdXRpbGl0eS9nZXRQaXhlbHNHcmlkJztcbmltcG9ydCBnZXRCZXN0TWF0Y2ggZnJvbSAnLi91dGlsaXR5L2dldEJlc3RNYXRjaCc7XG5pbXBvcnQgZ2V0Um93IGZyb20gJy4vdXRpbGl0eS9nZXRSb3cnO1xuaW1wb3J0IGdldENvbHVtbiBmcm9tICcuL3V0aWxpdHkvZ2V0Q29sdW1uJztcbmltcG9ydCBnZXRNYXRyaXggZnJvbSAnLi91dGlsaXR5L2dldE1hdHJpeCc7XG5pbXBvcnQgc2V0TWF0cml4IGZyb20gJy4vdXRpbGl0eS9zZXRNYXRyaXgnO1xuaW1wb3J0IGdldFBpeGVsc0FycmF5IGZyb20gJy4vdXRpbGl0eS9nZXRQaXhlbHNBcnJheSc7XG5pbXBvcnQgZ2V0SW50ZXJzZWN0aW9uIGZyb20gJy4vdXRpbGl0eS9nZXRJbnRlcnNlY3Rpb24nO1xuaW1wb3J0IGdldENsb3Nlc3RDb21tb25QYXJlbnQgZnJvbSAnLi91dGlsaXR5L2dldENsb3Nlc3RDb21tb25QYXJlbnQnO1xuaW1wb3J0IGdldFRocmVzaG9sZCBmcm9tICcuL3V0aWxpdHkvZ2V0VGhyZXNob2xkJztcblxuLy8gb3BlcmF0b3JzXG5pbXBvcnQgY2FubnlFZGdlIGZyb20gJy4vb3BlcmF0b3IvY2FubnlFZGdlJztcbmltcG9ydCBjb252b2x1dGlvbiBmcm9tICcuL29wZXJhdG9yL2NvbnZvbHV0aW9uJztcbmltcG9ydCBleHRyYWN0IGZyb20gJy4vb3BlcmF0b3IvZXh0cmFjdCc7XG5pbXBvcnQgZmxvb2RGaWxsIGZyb20gJy4vb3BlcmF0b3IvZmxvb2RGaWxsJztcbmltcG9ydCBwYWludExhYmVscyBmcm9tICcuL29wZXJhdG9yL3BhaW50TGFiZWxzJztcbmltcG9ydCBwYWludE1hc2tzIGZyb20gJy4vb3BlcmF0b3IvcGFpbnRNYXNrcyc7XG5pbXBvcnQgcGFpbnRQb2ludHMgZnJvbSAnLi9vcGVyYXRvci9wYWludFBvaW50cyc7XG5pbXBvcnQgcGFpbnRQb2x5bGluZSBmcm9tICcuL29wZXJhdG9yL3BhaW50UG9seWxpbmUnO1xuaW1wb3J0IHBhaW50UG9seWxpbmVzIGZyb20gJy4vb3BlcmF0b3IvcGFpbnRQb2x5bGluZXMnO1xuaW1wb3J0IHBhaW50UG9seWdvbiBmcm9tICcuL29wZXJhdG9yL3BhaW50UG9seWdvbic7XG5pbXBvcnQgcGFpbnRQb2x5Z29ucyBmcm9tICcuL29wZXJhdG9yL3BhaW50UG9seWdvbnMnO1xuXG4vLyBjb21wdXRlcnNcbmltcG9ydCB7IGdldEhpc3RvZ3JhbSwgZ2V0SGlzdG9ncmFtcyB9IGZyb20gJy4vY29tcHV0ZS9oaXN0b2dyYW0nO1xuaW1wb3J0IGdldENvbG9ySGlzdG9ncmFtIGZyb20gJy4vY29tcHV0ZS9jb2xvckhpc3RvZ3JhbSc7XG5pbXBvcnQgZ2V0TWluIGZyb20gJy4vY29tcHV0ZS9taW4nO1xuaW1wb3J0IGdldE1heCBmcm9tICcuL2NvbXB1dGUvbWF4JztcbmltcG9ydCBnZXRTdW0gZnJvbSAnLi9jb21wdXRlL3N1bSc7XG5pbXBvcnQgZ2V0TW9tZW50IGZyb20gJy4vY29tcHV0ZS9tb21lbnQnO1xuaW1wb3J0IGdldExvY2FsTWF4aW1hIGZyb20gJy4vY29tcHV0ZS9sb2NhbE1heGltYSc7XG5pbXBvcnQgZ2V0TWVhbiBmcm9tICcuL2NvbXB1dGUvbWVhbic7XG5pbXBvcnQgZ2V0TWVkaWFuIGZyb20gJy4vY29tcHV0ZS9tZWRpYW4nO1xuaW1wb3J0IGdldFBvaW50cyBmcm9tICcuL2NvbXB1dGUvcG9pbnRzJztcbmltcG9ydCBnZXRFeHRlbmRlZFBvaW50cyBmcm9tICcuL2NvbXB1dGUvZXh0ZW5kZWRQb2ludHMnO1xuaW1wb3J0IGdldFJlbGF0aXZlUG9zaXRpb24gZnJvbSAnLi9jb21wdXRlL3JlbGF0aXZlUG9zaXRpb24nO1xuaW1wb3J0IGNvdW50QWxwaGFQaXhlbHMgZnJvbSAnLi9jb21wdXRlL2NvdW50QWxwaGFQaXhlbHMnO1xuaW1wb3J0IG1vbm90b25lQ2hhaW5Db252ZXhIdWxsIGZyb20gJy4vY29tcHV0ZS9tb25vdG9uZUNoYWluQ29udmV4SHVsbCc7XG5pbXBvcnQgbWluaW1hbEJvdW5kaW5nUmVjdGFuZ2xlIGZyb20gJy4vY29tcHV0ZS9taW5pbWFsQm91bmRpbmdSZWN0YW5nbGUnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmQoSW1hZ2UpIHtcbiAgbGV0IGluUGxhY2UgPSB7IGluUGxhY2U6IHRydWUgfTtcblxuICBJbWFnZS5leHRlbmRNZXRob2QoJ2ludmVydCcsIGludmVydEZpbHRlcik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnYWJzJywgYWJzRmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdsZXZlbCcsIGxldmVsRmlsdGVyLCBpblBsYWNlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdhZGQnLCBhZGRGaWx0ZXIsIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3N1YnRyYWN0Jywgc3VidHJhY3RGaWx0ZXIsIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3N1YnRyYWN0SW1hZ2UnLCBzdWJ0cmFjdEltYWdlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdtdWx0aXBseScsIG11bHRpcGx5RmlsdGVyLCBpblBsYWNlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdkaXZpZGUnLCBkaXZpZGVGaWx0ZXIsIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2h5cG90ZW51c2UnLCBoeXBvdGVudXNlRmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdiYWNrZ3JvdW5kJywgYmFja2dyb3VuZEZpbHRlcik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZmxpcFgnLCBmbGlwWEZpbHRlcik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZmxpcFknLCBmbGlwWUZpbHRlcik7XG5cbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdibHVyRmlsdGVyJywgYmx1ckZpbHRlcik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnbWVkaWFuRmlsdGVyJywgbWVkaWFuRmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnYXVzc2lhbkZpbHRlcicsIGdhdXNzaWFuRmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdzb2JlbEZpbHRlcicsIHNvYmVsRmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdncmFkaWVudEZpbHRlcicsIGdyYWRpZW50RmlsdGVyKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdzY2hhcnJGaWx0ZXInLCBzY2hhcnJGaWx0ZXIpO1xuXG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZGlsYXRlJywgZGlsYXRlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdlcm9kZScsIGVyb2RlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdvcGVuJywgb3Blbik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnY2xvc2UnLCBjbG9zZSk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgndG9wSGF0JywgdG9wSGF0KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdibGFja0hhdCcsIGJsYWNrSGF0KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdtb3JwaG9sb2dpY2FsR3JhZGllbnQnLCBtb3JwaG9sb2dpY2FsR3JhZGllbnQpO1xuXG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnd2FycGluZ0ZvdXJQb2ludHMnLCB3YXJwaW5nRm91clBvaW50cyk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnY3JvcCcsIGNyb3ApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2Nyb3BBbHBoYScsIGNyb3BBbHBoYSk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgncmVzaXplJywgcmVzaXplKS5leHRlbmRNZXRob2QoJ3NjYWxlJywgcmVzaXplKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdoc3YnLCBoc3YpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2hzbCcsIGhzbCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnY215aycsIGNteWspO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3JnYmE4JywgcmdiYTgpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dyZXknLCBncmV5KS5leHRlbmRNZXRob2QoJ2dyYXknLCBncmV5KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdtYXNrJywgbWFzayk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgncGFkJywgcGFkKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdjb2xvckRlcHRoJywgY29sb3JEZXB0aCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnc2V0Qm9yZGVyJywgc2V0Qm9yZGVyLCBpblBsYWNlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdyb3RhdGUnLCByb3RhdGUpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3JvdGF0ZUxlZnQnLCByb3RhdGVMZWZ0KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdyb3RhdGVSaWdodCcsIHJvdGF0ZVJpZ2h0KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdpbnNlcnQnLCBpbnNlcnQpO1xuXG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZ2V0Um93JywgZ2V0Um93KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRDb2x1bW4nLCBnZXRDb2x1bW4pO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldE1hdHJpeCcsIGdldE1hdHJpeCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnc2V0TWF0cml4Jywgc2V0TWF0cml4KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRQaXhlbHNBcnJheScsIGdldFBpeGVsc0FycmF5KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRJbnRlcnNlY3Rpb24nLCBnZXRJbnRlcnNlY3Rpb24pO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldENsb3Nlc3RDb21tb25QYXJlbnQnLCBnZXRDbG9zZXN0Q29tbW9uUGFyZW50KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRUaHJlc2hvbGQnLCBnZXRUaHJlc2hvbGQpO1xuXG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnc3BsaXQnLCBzcGxpdCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZ2V0Q2hhbm5lbCcsIGdldENoYW5uZWwpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2NvbWJpbmVDaGFubmVscycsIGNvbWJpbmVDaGFubmVscyk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnc2V0Q2hhbm5lbCcsIHNldENoYW5uZWwpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldFNpbWlsYXJpdHknLCBnZXRTaW1pbGFyaXR5KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRQaXhlbHNHcmlkJywgZ2V0UGl4ZWxzR3JpZCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZ2V0QmVzdE1hdGNoJywgZ2V0QmVzdE1hdGNoKTtcblxuICBJbWFnZS5leHRlbmRNZXRob2QoJ2Nhbm55RWRnZScsIGNhbm55RWRnZSk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnY29udm9sdXRpb24nLCBjb252b2x1dGlvbik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZXh0cmFjdCcsIGV4dHJhY3QpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2Zsb29kRmlsbCcsIGZsb29kRmlsbCk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgncGFpbnRMYWJlbHMnLCBwYWludExhYmVscywgaW5QbGFjZSk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgncGFpbnRNYXNrcycsIHBhaW50TWFza3MsIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3BhaW50UG9pbnRzJywgcGFpbnRQb2ludHMsIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3BhaW50UG9seWxpbmUnLCBwYWludFBvbHlsaW5lLCBpblBsYWNlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdwYWludFBvbHlsaW5lcycsIHBhaW50UG9seWxpbmVzLCBpblBsYWNlKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdwYWludFBvbHlnb24nLCBwYWludFBvbHlnb24sIGluUGxhY2UpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ3BhaW50UG9seWdvbnMnLCBwYWludFBvbHlnb25zLCBpblBsYWNlKTtcblxuICBJbWFnZS5leHRlbmRNZXRob2QoJ2NvdW50QWxwaGFQaXhlbHMnLCBjb3VudEFscGhhUGl4ZWxzKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdtb25vdG9uZUNoYWluQ29udmV4SHVsbCcsIG1vbm90b25lQ2hhaW5Db252ZXhIdWxsKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdtaW5pbWFsQm91bmRpbmdSZWN0YW5nbGUnLCBtaW5pbWFsQm91bmRpbmdSZWN0YW5nbGUpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldEhpc3RvZ3JhbScsIGdldEhpc3RvZ3JhbSkuZXh0ZW5kUHJvcGVydHkoXG4gICAgJ2hpc3RvZ3JhbScsXG4gICAgZ2V0SGlzdG9ncmFtLFxuICApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldEhpc3RvZ3JhbXMnLCBnZXRIaXN0b2dyYW1zKS5leHRlbmRQcm9wZXJ0eShcbiAgICAnaGlzdG9ncmFtcycsXG4gICAgZ2V0SGlzdG9ncmFtcyxcbiAgKTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRDb2xvckhpc3RvZ3JhbScsIGdldENvbG9ySGlzdG9ncmFtKS5leHRlbmRQcm9wZXJ0eShcbiAgICAnY29sb3JIaXN0b2dyYW0nLFxuICAgIGdldENvbG9ySGlzdG9ncmFtLFxuICApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldE1pbicsIGdldE1pbikuZXh0ZW5kUHJvcGVydHkoJ21pbicsIGdldE1pbik7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZ2V0TWF4JywgZ2V0TWF4KS5leHRlbmRQcm9wZXJ0eSgnbWF4JywgZ2V0TWF4KTtcbiAgSW1hZ2UuZXh0ZW5kTWV0aG9kKCdnZXRTdW0nLCBnZXRTdW0pLmV4dGVuZFByb3BlcnR5KCdzdW0nLCBnZXRTdW0pO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldE1vbWVudCcsIGdldE1vbWVudCkuZXh0ZW5kUHJvcGVydHkoXG4gICAgJ21vbWVudCcsXG4gICAgZ2V0TW9tZW50LFxuICApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldExvY2FsTWF4aW1hJywgZ2V0TG9jYWxNYXhpbWEpO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldE1lZGlhbicsIGdldE1lZGlhbikuZXh0ZW5kUHJvcGVydHkoXG4gICAgJ21lZGlhbicsXG4gICAgZ2V0TWVkaWFuLFxuICApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldE1lYW4nLCBnZXRNZWFuKS5leHRlbmRQcm9wZXJ0eSgnbWVhbicsIGdldE1lYW4pO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldFBvaW50cycsIGdldFBvaW50cykuZXh0ZW5kUHJvcGVydHkoXG4gICAgJ3BvaW50cycsXG4gICAgZ2V0UG9pbnRzLFxuICApO1xuICBJbWFnZS5leHRlbmRNZXRob2QoJ2dldEV4dGVuZGVkUG9pbnRzJywgZ2V0RXh0ZW5kZWRQb2ludHMpLmV4dGVuZFByb3BlcnR5KFxuICAgICdleHRlbmRlZFBvaW50cycsXG4gICAgZ2V0RXh0ZW5kZWRQb2ludHMsXG4gICk7XG4gIEltYWdlLmV4dGVuZE1ldGhvZCgnZ2V0UmVsYXRpdmVQb3NpdGlvbicsIGdldFJlbGF0aXZlUG9zaXRpb24pO1xufVxuIiwiaW1wb3J0IEltYWdlIGZyb20gJy4uLy4uLy4uL2ltYWdlL0ltYWdlJztcblxuY29uc3QgZGVmYXVsdE9wdGlvbnMgPSB7XG4gIHJlZ3Jlc3Npb246IHtcbiAgICBrZXJuZWxUeXBlOiAncG9seW5vbWlhbCcsXG4gICAga2VybmVsT3B0aW9uczogeyBkZWdyZWU6IDIsIGNvbnN0YW50OiAxIH0sXG4gIH0sXG4gIHRocmVzaG9sZDogMC4wMixcbiAgcm9pOiB7XG4gICAgbWluU3VyZmFjZTogMTAwLFxuICAgIHBvc2l0aXZlOiBmYWxzZSxcbiAgfSxcbiAgc2FtcGxpbmc6IDIwLFxuICBpbmNsdWRlOiBbXSxcbn07XG5cbmZ1bmN0aW9uIHJ1bihpbWFnZSwgb3B0aW9ucywgb25TdGVwKSB7XG4gIG9wdGlvbnMgPSBPYmplY3QuYXNzaWduKHt9LCBkZWZhdWx0T3B0aW9ucywgb3B0aW9ucyk7XG4gIGNvbnN0IG1hbmFnZXIgPSB0aGlzLm1hbmFnZXI7XG4gIGlmIChBcnJheS5pc0FycmF5KGltYWdlKSkge1xuICAgIHJldHVybiBQcm9taXNlLmFsbChcbiAgICAgIGltYWdlLm1hcChmdW5jdGlvbiAoaW1nKSB7XG4gICAgICAgIGNvbnN0IHJ1biA9IHJ1bk9uY2UobWFuYWdlciwgaW1nLCBvcHRpb25zKTtcbiAgICAgICAgaWYgKHR5cGVvZiBvblN0ZXAgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBydW4udGhlbihvblN0ZXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBydW47XG4gICAgICB9KSxcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBydW5PbmNlKG1hbmFnZXIsIGltYWdlLCBvcHRpb25zKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBydW5PbmNlKG1hbmFnZXIsIGltYWdlLCBvcHRpb25zKSB7XG4gIHJldHVybiBtYW5hZ2VyLnBvc3QoJ2RhdGEnLCBbaW1hZ2UsIG9wdGlvbnNdKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIGZvciAobGV0IGkgaW4gcmVzcG9uc2UpIHtcbiAgICAgIHJlc3BvbnNlW2ldID0gbmV3IEltYWdlKHJlc3BvbnNlW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9KTtcbn1cblxuZnVuY3Rpb24gd29yaygpIHtcbiAgd29ya2VyLm9uKCdkYXRhJywgZnVuY3Rpb24gKHNlbmQsIGltYWdlLCBvcHRpb25zKSB7XG4gICAgaW1hZ2UgPSBuZXcgSUpTKGltYWdlKTtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBjb25zdCB0b1RyYW5zZmVyID0gW107XG5cbiAgICBjb25zdCBncmV5ID0gaW1hZ2UuZ3JleSgpO1xuXG4gICAgY29uc3Qgc29iZWwgPSBncmV5LnNvYmVsRmlsdGVyKCk7XG4gICAgbWF5YmVJbmNsdWRlKCdzb2JlbCcsIHNvYmVsKTtcblxuICAgIGNvbnN0IG1hc2sgPSBzb2JlbC5sZXZlbCgpLm1hc2soeyB0aHJlc2hvbGQ6IG9wdGlvbnMudGhyZXNob2xkIH0pO1xuICAgIG1heWJlSW5jbHVkZSgnbWFzaycsIG1hc2spO1xuXG4gICAgY29uc3Qgcm9pTWFuYWdlciA9IHNvYmVsLmdldFJvaU1hbmFnZXIoKTtcbiAgICByb2lNYW5hZ2VyLmZyb21NYXNrKG1hc2spO1xuICAgIGNvbnN0IHJlYWxNYXNrID0gcm9pTWFuYWdlci5nZXRNYXNrKG9wdGlvbnMucm9pKTtcbiAgICBtYXliZUluY2x1ZGUoJ3JlYWxNYXNrJywgcmVhbE1hc2spO1xuXG4gICAgY29uc3QgcGl4ZWxzID0gZ3JleS5nZXRQaXhlbHNHcmlkKHtcbiAgICAgIHNhbXBsaW5nOiBvcHRpb25zLnNhbXBsaW5nLFxuICAgICAgbWFzazogcmVhbE1hc2ssXG4gICAgfSk7XG5cbiAgICBjb25zdCBiYWNrZ3JvdW5kID0gaW1hZ2UuZ2V0QmFja2dyb3VuZChcbiAgICAgIHBpeGVscy54eVMsXG4gICAgICBwaXhlbHMuelMsXG4gICAgICBvcHRpb25zLnJlZ3Jlc3Npb24sXG4gICAgKTtcbiAgICBtYXliZUluY2x1ZGUoJ2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kKTtcblxuICAgIGNvbnN0IGNvcnJlY3RlZCA9IGltYWdlLnN1YnRyYWN0KGJhY2tncm91bmQpO1xuXG4gICAgcmVzdWx0LnJlc3VsdCA9IGNvcnJlY3RlZDtcbiAgICB0b1RyYW5zZmVyLnB1c2goY29ycmVjdGVkLmRhdGEuYnVmZmVyKTtcbiAgICBzZW5kKHJlc3VsdCwgdG9UcmFuc2Zlcik7XG5cbiAgICBmdW5jdGlvbiBtYXliZUluY2x1ZGUobmFtZSwgaW1hZ2UpIHtcbiAgICAgIGlmIChvcHRpb25zLmluY2x1ZGUuaW5jbHVkZXMobmFtZSkpIHtcbiAgICAgICAgcmVzdWx0W25hbWVdID0gaW1hZ2U7XG4gICAgICAgIHRvVHJhbnNmZXIucHVzaChpbWFnZS5kYXRhLmJ1ZmZlcik7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbn1cblxuY29uc3QgYmFja2dyb3VuZCA9IHsgcnVuLCB3b3JrIH07XG5leHBvcnQgZGVmYXVsdCBiYWNrZ3JvdW5kO1xuIiwiaW1wb3J0IFdvcmtlck1hbmFnZXIgZnJvbSAnd2ViLXdvcmtlci1tYW5hZ2VyJztcblxuaW1wb3J0IGV4dGVuZCBmcm9tICcuL2V4dGVuZCc7XG5cbmNsYXNzIFdvcmtlciB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMuX3VybCA9IG51bGw7XG4gICAgdGhpcy5fZGVwcyA9IFtudWxsXTtcbiAgfVxuICBjaGVja1VybCgpIHtcbiAgICBpZiAodGhpcy5fdXJsID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ2ltYWdlIHdvcmtlciBtdXN0IGJlIGluaXRpYWxpemVkIHdpdGggYW4gVVJMJyk7XG4gICAgfVxuICB9XG4gIGdldCB1cmwoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VybDtcbiAgfVxuICBzZXQgdXJsKHZhbHVlKSB7XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ3dvcmtlciBVUkwgbXVzdCBiZSBhIHN0cmluZycpO1xuICAgIH1cbiAgICB0aGlzLl91cmwgPSB2YWx1ZTtcbiAgICB0aGlzLl9kZXBzWzBdID0gdmFsdWU7XG4gIH1cbiAgc3RhdGljIGV4dGVuZE1ldGhvZChuYW1lLCBtZXRob2QpIHtcbiAgICBsZXQgbWFuYWdlcjtcbiAgICBsZXQgdXJsO1xuICAgIGxldCBydW5uZXIgPSB7fTtcbiAgICBmdW5jdGlvbiBydW4oLi4uYXJncykge1xuICAgICAgaWYgKCFtYW5hZ2VyKSB7XG4gICAgICAgIHRoaXMuY2hlY2tVcmwoKTtcbiAgICAgICAgdXJsID0gdGhpcy51cmw7XG4gICAgICAgIG1hbmFnZXIgPSBuZXcgV29ya2VyTWFuYWdlcihtZXRob2Qud29yaywgeyBkZXBzOiB1cmwgfSk7XG4gICAgICAgIHJ1bm5lci5tYW5hZ2VyID0gbWFuYWdlcjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBtZXRob2QucnVuLmNhbGwocnVubmVyLCAuLi5hcmdzKTtcbiAgICB9XG4gICAgcnVuLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKG1hbmFnZXIpIHtcbiAgICAgICAgbWFuYWdlci50ZXJtaW5hdGUoKTtcbiAgICAgICAgbWFuYWdlciA9IG5ldyBXb3JrZXJNYW5hZ2VyKG1ldGhvZC53b3JrLCB7IGRlcHM6IHVybCB9KTtcbiAgICAgICAgcnVubmVyLm1hbmFnZXIgPSBtYW5hZ2VyO1xuICAgICAgfVxuICAgIH07XG4gICAgV29ya2VyLnByb3RvdHlwZVtuYW1lXSA9IHJ1bjtcbiAgfVxufVxuXG5leHRlbmQoV29ya2VyKTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3IFdvcmtlcigpO1xuIiwiaW1wb3J0IGJhY2tncm91bmQgZnJvbSAnLi9wcm9jZXNzL2JhY2tncm91bmQnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBleHRlbmQoV29ya2VyKSB7XG4gIFdvcmtlci5leHRlbmRNZXRob2QoJ2JhY2tncm91bmQnLCBiYWNrZ3JvdW5kKTtcbn1cbiIsImltcG9ydCB7IFN1YmplY3QsIFJlcGxheVN1YmplY3QsIE9ic2VydmFibGUgfSBmcm9tICdyeGpzJ1xuaW1wb3J0IHsgUm9ib3RJbWFnZURhdGEsIFJvYm90U3RhdGUsIFJvYm90RGF0YSB9IGZyb20gJy4vZW50aXRpZXMnXG5pbXBvcnQgeyBJbWFnZSB9IGZyb20gJ2ltYWdlLWpzJ1xuaW1wb3J0IHsgQnVmZmVyIH0gZnJvbSAnYnVmZmVyLydcbmltcG9ydCB7IElPcGVyYXRvclByb3BzIH0gZnJvbSAnLi9lbnRpdGllcydcblxuZXhwb3J0IGludGVyZmFjZSBJSW1hZ2VSZWNlaXZlciB7XG4gIGltYWdlU3ViamVjdDogT2JzZXJ2YWJsZTxSb2JvdEltYWdlRGF0YT5cbiAgZGVwdGhTdWJqZWN0OiBPYnNlcnZhYmxlPEltYWdlPlxuICBkYXRhU3ViamVjdDogT2JzZXJ2YWJsZTxSb2JvdERhdGE+XG4gIHN0YXRlU3ViamVjdDogT2JzZXJ2YWJsZTxSb2JvdFN0YXRlPlxuXG4gIHNodXRkb3duKCk6IHZvaWRcbn1cblxuZXhwb3J0IGNsYXNzIFdlYlNvY2tldEltYWdlUmVjZWl2ZXIgaW1wbGVtZW50cyBJSW1hZ2VSZWNlaXZlciB7XG4gIGRhdGFXZWJzb2NrZXQ6IFdlYlNvY2tldFxuICBzdGF0ZVdlYnNvY2tldDogV2ViU29ja2V0XG4gIGRhdGFVUkw6IHN0cmluZ1xuICByb2JvdE5hbWU6IHN0cmluZ1xuICBhY2Nlc3NUb2tlbjogc3RyaW5nXG5cbiAgcHVibGljIGNvbnN0cnVjdG9yKHNldHRpbmdzOiBJT3BlcmF0b3JQcm9wcykge1xuICAgIHRoaXMuZGF0YVVSTCA9IHNldHRpbmdzLmRhdGFXU1VybFxuICAgIHRoaXMucm9ib3ROYW1lID0gc2V0dGluZ3Mucm9ib3ROYW1lXG4gICAgdGhpcy5hY2Nlc3NUb2tlbiA9IHNldHRpbmdzLmFjY2Vzc1Rva2VuXG5cbiAgICB0aGlzLm9wZW5EYXRhV2Vic29ja2V0KClcbiAgICB0aGlzLm9wZW5TdGF0ZVdlYnNvY2tldCgpXG4gIH1cblxuICBvcGVuRGF0YVdlYnNvY2tldCgpIHtcbiAgICB0aGlzLmRhdGFXZWJzb2NrZXQgPSBuZXcgV2ViU29ja2V0KHRoaXMuZGF0YVVSTClcbiAgICB0aGlzLmRhdGFXZWJzb2NrZXQub25vcGVuID0gdGhpcy5vbkRhdGFPcGVuXG4gICAgdGhpcy5kYXRhV2Vic29ja2V0Lm9uY2xvc2UgPSB0aGlzLm9uRGF0YUNsb3NlZFxuICAgIHRoaXMuZGF0YVdlYnNvY2tldC5vbmVycm9yID0gdGhpcy5vbkRhdGFFcnJvclxuICAgIHRoaXMuZGF0YVdlYnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLm9uRGF0YU1lc3NhZ2VcbiAgfVxuXG4gIHNlbmREYXRhSW5pdFBhY2tldCgpIHtcbiAgICBsZXQgY29udHJvbFBhY2tldCA9IHtcbiAgICAgIGNvbW1hbmQ6ICdwdWxsJyxcbiAgICAgIGV4Y2hhbmdlOiBgY2FtZXJhMGAsXG4gICAgICByb2JvdF9uYW1lOiB0aGlzLnJvYm90TmFtZSxcbiAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLmFjY2Vzc1Rva2VuXG4gICAgfVxuICAgIC8vIGNvbnNvbGUubG9nKFwiU2VuZGluZ1wiLCBjb250cm9sUGFja2V0KTtcbiAgICB0aGlzLmRhdGFXZWJzb2NrZXQuc2VuZChKU09OLnN0cmluZ2lmeShjb250cm9sUGFja2V0KSlcbiAgfVxuXG4gIGltYWdlU3ViamVjdCA9IG5ldyBSZXBsYXlTdWJqZWN0PFJvYm90SW1hZ2VEYXRhPigxKVxuICBkZXB0aFN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxJbWFnZT4oMSlcbiAgZGF0YVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxSb2JvdERhdGE+KDEpXG5cbiAgb25EYXRhT3BlbiA9IChldjogRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnRGF0YSBXZWJzb2NrZXQgT3BlbmVkJywgZXYpXG4gICAgdGhpcy5zZW5kRGF0YUluaXRQYWNrZXQoKVxuICB9XG5cbiAgb25EYXRhQ2xvc2VkID0gKGV2OiBDbG9zZUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0RhdGEgV2Vic29ja2V0IENsb3NlZCcsIGV2KVxuICAgIGNvbnNvbGUubG9nKCdUcnlpbmcgdG8gb3BlbiB0aGUgd2Vic29ja2V0IGFnYWluJylcbiAgICB0aGlzLm9wZW5EYXRhV2Vic29ja2V0KClcbiAgfVxuXG4gIG9uRGF0YUVycm9yID0gKGV2OiBFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdEYXRhIFdlYnNvY2tldCBFcnJvcicsIGV2KVxuICB9XG5cbiAgb25EYXRhTWVzc2FnZSA9IChldjogYW55KSA9PiB7XG4gICAgdGhpcy51bnBhY2tEYXRhKGV2LmRhdGEpXG4gIH1cblxuICBhc3luYyB1bnBhY2tEYXRhKGRhdGE6IEJsb2IgfCBzdHJpbmcpIHtcbiAgICBpZiAodHlwZW9mIGRhdGEgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciB1bnBhY2tpbmcgdmlkZW8gZmVlZDonLCBkYXRhKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGxldCBkYXRhVHlwZSA9IG5ldyBVaW50OEFycmF5KGF3YWl0IGRhdGEuc2xpY2UoMCwgMSkuYXJyYXlCdWZmZXIoKSlbMF1cbiAgICBpZiAoZGF0YVR5cGUgPT09IDEpIHtcbiAgICAgIGNvbnN0IEhFQURFUl9FTkQgPSAxM1xuICAgICAgLy8gMXN0IGJ5dGUgaXMgdGhlIHR5cGUgb2YgaW1hZ2UsIGZvciBub3cgYXNzdW1pbmcgaXQncyBKUEcrUE5HIGFuZCBza2lwIGl0XG4gICAgICBsZXQgbGVuZ3RocyA9IG5ldyBVaW50MzJBcnJheShcbiAgICAgICAgYXdhaXQgZGF0YS5zbGljZSgxLCBIRUFERVJfRU5EKS5hcnJheUJ1ZmZlcigpXG4gICAgICApXG4gICAgICAvLyBHZXQgYmxvYnMgZm9yIGVhY2ggb2YgdGhlIGltYWdlcyArIHRleHRcbiAgICAgIC8vIGltYWdlIGlzIHRoZSB2aWRlbyBmZWVkIGluIEpQR1xuICAgICAgbGV0IGltYWdlQmxvYiA9IGRhdGEuc2xpY2UoSEVBREVSX0VORCwgSEVBREVSX0VORCArIGxlbmd0aHNbMF0pXG4gICAgICAvLyBkZXB0aCBpcyBpbiBQTkdcbiAgICAgIGxldCBkZXB0aEJsb2IgPSBkYXRhLnNsaWNlKFxuICAgICAgICBIRUFERVJfRU5EICsgbGVuZ3Roc1swXSxcbiAgICAgICAgSEVBREVSX0VORCArIGxlbmd0aHNbMF0gKyBsZW5ndGhzWzFdXG4gICAgICApXG4gICAgICBsZXQgc3RhdHVzQmxvYiA9IGRhdGEuc2xpY2UoXG4gICAgICAgIEhFQURFUl9FTkQgKyBsZW5ndGhzWzBdICsgbGVuZ3Roc1sxXSxcbiAgICAgICAgSEVBREVSX0VORCArIGxlbmd0aHNbMF0gKyBsZW5ndGhzWzFdICsgbGVuZ3Roc1syXVxuICAgICAgKVxuXG4gICAgICBpbWFnZUJsb2IuYXJyYXlCdWZmZXIoKS50aGVuKFxuICAgICAgICAodmFsKSA9PiB7XG4gICAgICAgICAgbGV0IGltRGF0YSA9IHtcbiAgICAgICAgICAgIGRhdGE6IEJ1ZmZlci5mcm9tKHZhbCksXG4gICAgICAgICAgICB0eXBlOiAnaW1hZ2UvanBnJ1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLmltYWdlU3ViamVjdC5uZXh0KGltRGF0YSlcbiAgICAgICAgfSxcbiAgICAgICAgKGVycikgPT4gY29uc29sZS5sb2coJ0Vycm9yIHdoaWxlIHNlbmRpbmcgaW1hZ2U6JywgZXJyKVxuICAgICAgKVxuXG4gICAgICBkZXB0aEJsb2JcbiAgICAgICAgLmFycmF5QnVmZmVyKClcbiAgICAgICAgLnRoZW4oXG4gICAgICAgICAgKHZhbCkgPT4gSW1hZ2UubG9hZCh2YWwpLFxuICAgICAgICAgIChlcnIpID0+IGNvbnNvbGUubG9nKCdFcnJvciB3aGlsZSBsb2FkaW5nIGRlcHRoIG1hcDogJywgZXJyKVxuICAgICAgICApXG4gICAgICAgIC50aGVuKChkZXB0aCkgPT4ge1xuICAgICAgICAgIGlmICghZGVwdGgpIHJldHVyblxuICAgICAgICAgIHRoaXMuZGVwdGhTdWJqZWN0Lm5leHQoZGVwdGgpXG4gICAgICAgIH0pXG5cbiAgICAgIHN0YXR1c0Jsb2IudGV4dCgpLnRoZW4oXG4gICAgICAgICh2YWwpID0+IHRoaXMuZGF0YVN1YmplY3QubmV4dChKU09OLnBhcnNlKHZhbCkpLFxuICAgICAgICAoZXJyKSA9PiBjb25zb2xlLmxvZygnRXJyb3Igd2hpbGUgZ2V0dGluZyBzdGF0dXM6JywgZXJyKVxuICAgICAgKVxuICAgIH0gZWxzZSBpZiAoZGF0YVR5cGUgPT09IDIpIHtcbiAgICAgIGxldCBsZW5ndGhzID0gbmV3IFVpbnQzMkFycmF5KGF3YWl0IGRhdGEuc2xpY2UoMSwgMTMpLmFycmF5QnVmZmVyKCkpXG4gICAgICBsZXQganBnQmxvYiA9IGRhdGEuc2xpY2UoOSwgOSArIGxlbmd0aHNbMF0pXG5cbiAgICAgIGpwZ0Jsb2IuYXJyYXlCdWZmZXIoKS50aGVuKCh2YWw6IEFycmF5QnVmZmVyKSA9PiB7XG4gICAgICAgIHZhciBpbURhdGEgPSB7XG4gICAgICAgICAgZGF0YTogQnVmZmVyLmZyb20odmFsKSxcbiAgICAgICAgICB0eXBlOiAnaW1hZ2UvanBnJ1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW1hZ2VTdWJqZWN0Lm5leHQoaW1EYXRhKVxuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYERhdGEgdHlwZSAke2RhdGFUeXBlfSBpc24ndCBKUEcrUE5HKDEpYClcbiAgICB9XG4gIH1cblxuICBzdGF0ZVN1YmplY3QgPSBuZXcgUmVwbGF5U3ViamVjdDxSb2JvdFN0YXRlPigxKVxuXG4gIG9wZW5TdGF0ZVdlYnNvY2tldCgpIHtcbiAgICB0aGlzLnN0YXRlV2Vic29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLmRhdGFVUkwpXG4gICAgdGhpcy5zdGF0ZVdlYnNvY2tldC5vbm9wZW4gPSB0aGlzLm9uU3RhdGVPcGVuXG4gICAgdGhpcy5zdGF0ZVdlYnNvY2tldC5vbmNsb3NlID0gdGhpcy5vblN0YXRlQ2xvc2VkXG4gICAgdGhpcy5zdGF0ZVdlYnNvY2tldC5vbmVycm9yID0gdGhpcy5vblN0YXRlRXJyb3JcbiAgICB0aGlzLnN0YXRlV2Vic29ja2V0Lm9ubWVzc2FnZSA9IHRoaXMub25TdGF0ZU1lc3NhZ2VcbiAgfVxuXG4gIHNlbmRTdGF0ZUluaXRQYWNrZXQoKSB7XG4gICAgbGV0IGNvbnRyb2xQYWNrZXQgPSB7XG4gICAgICBjb21tYW5kOiAncHVsbCcsXG4gICAgICBleGNoYW5nZTogYHN0YXRlYCxcbiAgICAgIHJvYm90X25hbWU6IHRoaXMucm9ib3ROYW1lLFxuICAgICAgYWNjZXNzVG9rZW46IHRoaXMuYWNjZXNzVG9rZW5cbiAgICB9XG4gICAgdGhpcy5zdGF0ZVdlYnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGNvbnRyb2xQYWNrZXQpKVxuICB9XG5cbiAgb25TdGF0ZUNsb3NlZCA9IChldjogQ2xvc2VFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdTdGF0ZSBXZWJzb2NrZXQgQ2xvc2VkJywgZXYpXG4gICAgY29uc29sZS5sb2coJ1RyeWluZyB0byBvcGVuIHRoZSB3ZWJzb2NrZXQgYWdhaW4nKVxuICAgIHRoaXMub3BlblN0YXRlV2Vic29ja2V0KClcbiAgfVxuXG4gIG9uU3RhdGVPcGVuID0gKGV2OiBFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdTdGF0ZSBXZWJzb2NrZXQgT3BlbmVkJywgZXYpXG4gICAgdGhpcy5zZW5kU3RhdGVJbml0UGFja2V0KClcbiAgfVxuXG4gIG9uU3RhdGVFcnJvciA9IChldjogRXZlbnQpID0+IHtcbiAgICBjb25zb2xlLmxvZygnU3RhdGUgV2Vic29ja2V0IEVycm9yJywgZXYpXG4gIH1cblxuICBvblN0YXRlTWVzc2FnZSA9IChldjogYW55KSA9PiB7XG4gICAgdGhpcy51bnBhY2tTdGF0ZShldi5kYXRhKVxuICB9XG5cbiAgdW5wYWNrU3RhdGUoZGF0YTogQmxvYiB8IHN0cmluZykge1xuICAgIGlmICh0eXBlb2YgZGF0YSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHVucGFja2luZyByb2JvdCBzdGF0ZTonLCBkYXRhKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGRhdGEudGV4dCgpLnRoZW4oKHJlcykgPT4gdGhpcy5zdGF0ZVN1YmplY3QubmV4dChKU09OLnBhcnNlKHJlcykpKVxuICB9XG5cbiAgcHVibGljIHNodXRkb3duKCkge1xuICAgIHRoaXMuZGF0YVdlYnNvY2tldC5vbmNsb3NlID0gbnVsbFxuICAgIHRoaXMuc3RhdGVXZWJzb2NrZXQub25jbG9zZSA9IG51bGxcbiAgICB0aGlzLmRhdGFXZWJzb2NrZXQuY2xvc2UoKVxuICAgIHRoaXMuc3RhdGVXZWJzb2NrZXQuY2xvc2UoKVxuICB9XG59XG4iLCJpbXBvcnQgeyBJT3BlcmF0b3JQcm9wcywgUG9pbnQsIFJlY3RhbmdsZSwgUm9ib3REYXRhIH0gZnJvbSAnLi9lbnRpdGllcydcbmltcG9ydCB7IE9wZXJhdG9yQ29tbWFuZCB9IGZyb20gJy4vY29tbWFuZHMvY29tbWFuZC1iYXNlJ1xuXG5leHBvcnQgaW50ZXJmYWNlIElOZXR3b3JrT3BlcmF0b3Ige1xuICBlbnF1ZXVlQ29tbWFuZChjb21tYW5kOiBPcGVyYXRvckNvbW1hbmQpOiB2b2lkXG5cbiAgc2h1dGRvd24oKTogdm9pZFxufVxuXG50eXBlIE1lc3NhZ2UgPSB7XG4gIGNvbW1hbmQ6IHN0cmluZ1xuICBleGNoYW5nZTogc3RyaW5nXG4gIHJvYm90X25hbWU6IHN0cmluZ1xuICBtZXNzYWdlOiBPcGVyYXRvckNvbW1hbmRcbiAgYWNjZXNzVG9rZW46IHN0cmluZ1xufVxuXG5leHBvcnQgY2xhc3MgTmV0d29ya09wZXJhdG9yIGltcGxlbWVudHMgSU5ldHdvcmtPcGVyYXRvciB7XG4gIHByaXZhdGUgY29tbWFuZFdlYnNvY2tldDogV2ViU29ja2V0XG4gIHByaXZhdGUgc2V0dGluZ3M6IElPcGVyYXRvclByb3BzXG5cbiAgLy8gcHJpdmF0ZSBoYXNTZW50Q29tbWFuZCA9IGZhbHNlO1xuXG4gIHByaXZhdGUgbWVzc2FnZVF1ZXVlOiBNZXNzYWdlW10gPSBbXVxuXG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzOiBJT3BlcmF0b3JQcm9wcykge1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5nc1xuICAgIHRoaXMub3BlbldlYnNvY2tldCgpXG4gIH1cblxuICBlbnF1ZXVlQ29tbWFuZChjb21tYW5kOiBPcGVyYXRvckNvbW1hbmQpOiB2b2lkIHtcbiAgICBsZXQgbWVzc2FnZU9iajogTWVzc2FnZSA9IHtcbiAgICAgIGNvbW1hbmQ6ICdwdXNoJyxcbiAgICAgIGV4Y2hhbmdlOiBgY29tbWFuZHNgLFxuICAgICAgcm9ib3RfbmFtZTogdGhpcy5zZXR0aW5ncy5yb2JvdE5hbWUsXG4gICAgICBtZXNzYWdlOiBjb21tYW5kLFxuICAgICAgYWNjZXNzVG9rZW46IHRoaXMuc2V0dGluZ3MuYWNjZXNzVG9rZW5cbiAgICB9XG4gICAgY29uc29sZS5sb2coeyBtZXNzYWdlT2JqIH0pXG4gICAgY29uc29sZS5sb2coJ0VucXVldWluZyBjb21tYW5kOicsIGNvbW1hbmQpXG4gICAgdGhpcy5tZXNzYWdlUXVldWUucHVzaChtZXNzYWdlT2JqKVxuICAgIHRoaXMuc2VuZFF1ZXVlZENvbW1hbmRzKClcbiAgfVxuXG4gIHByaXZhdGUgc2VuZFF1ZXVlZENvbW1hbmRzKCk6IHZvaWQge1xuICAgIGlmICh0aGlzLm1lc3NhZ2VRdWV1ZS5sZW5ndGggPT0gMCkgcmV0dXJuXG4gICAgLy8gc2VuZGluZyBjb21tYW5kcyBvbmUgYnkgb25lLCBzaW5jZSB0aGUgd2Vic29ja2V0IGNsb3NlcyBhZnRlciBlYWNoIG9uZVxuICAgIHdoaWxlIChcbiAgICAgIHRoaXMubWVzc2FnZVF1ZXVlLmxlbmd0aCAmJlxuICAgICAgdGhpcy5jb21tYW5kV2Vic29ja2V0LnJlYWR5U3RhdGUgPT09IFdlYlNvY2tldC5PUEVOXG4gICAgKSB7XG4gICAgICBsZXQgY29tbWFuZCA9IHRoaXMubWVzc2FnZVF1ZXVlLnNoaWZ0KClcbiAgICAgIGNvbnNvbGUuZGVidWcoJ1NlbmRpbmc6JywgY29tbWFuZClcbiAgICAgIHRoaXMuY29tbWFuZFdlYnNvY2tldC5zZW5kKEpTT04uc3RyaW5naWZ5KGNvbW1hbmQpKVxuICAgIH1cbiAgfVxuXG4gIG9wZW5XZWJzb2NrZXQoKSB7XG4gICAgdGhpcy5jb21tYW5kV2Vic29ja2V0ID0gbmV3IFdlYlNvY2tldCh0aGlzLnNldHRpbmdzLmRhdGFXU1VybClcbiAgICB0aGlzLmNvbW1hbmRXZWJzb2NrZXQub25vcGVuID0gdGhpcy5vbldTT3BlblxuICAgIHRoaXMuY29tbWFuZFdlYnNvY2tldC5vbmNsb3NlID0gdGhpcy5vbldTQ2xvc2VkXG4gICAgdGhpcy5jb21tYW5kV2Vic29ja2V0Lm9uZXJyb3IgPSB0aGlzLm9uV1NFcnJvclxuICAgIHRoaXMuY29tbWFuZFdlYnNvY2tldC5vbm1lc3NhZ2UgPSB0aGlzLm9uV1NNZXNzYWdlXG4gIH1cblxuICBvbldTQ2xvc2VkID0gKGV2OiBDbG9zZUV2ZW50KSA9PiB7XG4gICAgY29uc29sZS5kZWJ1ZygnQ29tbWFuZCBXZWJzb2NrZXQgQ2xvc2VkJywgZXYpXG4gICAgY29uc29sZS5kZWJ1ZygnVHJ5aW5nIHRvIG9wZW4gdGhlIHdlYnNvY2tldCBhZ2FpbicpXG4gICAgdGhpcy5vcGVuV2Vic29ja2V0KClcbiAgfVxuXG4gIG9uV1NPcGVuID0gKGV2OiBFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUuZGVidWcoJ0NvbW1hbmQgV2Vic29ja2V0IE9wZW5lZCcsIGV2KVxuICAgIC8vIHRoaXMuaGFzU2VudENvbW1hbmQgPSBmYWxzZTtcbiAgICBpZiAodGhpcy5tZXNzYWdlUXVldWUubGVuZ3RoKSB7XG4gICAgICBjb25zb2xlLmxvZygnVGhlcmUgYXJlIHVuc2VudCBtZXNzYWdlcyBpbiB0aGUgcXVldWUsIHNlbmRpbmcgdGhlbScpXG4gICAgICB0aGlzLnNlbmRRdWV1ZWRDb21tYW5kcygpXG4gICAgfVxuICB9XG5cbiAgb25XU0Vycm9yID0gKGV2OiBFdmVudCkgPT4ge1xuICAgIGNvbnNvbGUubG9nKCdDb21tYW5kIFdlYnNvY2tldCBFcnJvcicsIGV2KVxuICB9XG5cbiAgb25XU01lc3NhZ2UgPSAoZXY6IGFueSkgPT4ge1xuICAgIHRoaXMudW5wYWNrRGF0YShldi5kYXRhKVxuICB9XG5cbiAgdW5wYWNrRGF0YShkYXRhOiBCbG9iIHwgc3RyaW5nKSB7XG4gICAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc29sZS5sb2coJ0NvbW1hbmQgYW5zd2VyOicsIGRhdGEpXG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgZGF0YS50ZXh0KCkudGhlbigocmVzKSA9PiBjb25zb2xlLmxvZyhKU09OLnBhcnNlKHJlcykpKVxuICB9XG5cbiAgcHVibGljIHNodXRkb3duKCkge1xuICAgIHRoaXMuY29tbWFuZFdlYnNvY2tldC5vbmNsb3NlID0gbnVsbFxuICAgIHRoaXMuY29tbWFuZFdlYnNvY2tldC5jbG9zZSgpXG4gICAgdGhpcy5jb21tYW5kV2Vic29ja2V0ID0gbnVsbFxuICB9XG59XG4iLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YmplY3QgfSBmcm9tICcuL1N1YmplY3QnO1xudmFyIEJlaGF2aW9yU3ViamVjdCA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEJlaGF2aW9yU3ViamVjdCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBCZWhhdmlvclN1YmplY3QoX3ZhbHVlKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLl92YWx1ZSA9IF92YWx1ZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoQmVoYXZpb3JTdWJqZWN0LnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuX3N1YnNjcmliZSA9IGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3VwZXIucHJvdG90eXBlLl9zdWJzY3JpYmUuY2FsbCh0aGlzLCBzdWJzY3JpYmVyKTtcbiAgICAgICAgIXN1YnNjcmlwdGlvbi5jbG9zZWQgJiYgc3Vic2NyaWJlci5uZXh0KHRoaXMuX3ZhbHVlKTtcbiAgICAgICAgcmV0dXJuIHN1YnNjcmlwdGlvbjtcbiAgICB9O1xuICAgIEJlaGF2aW9yU3ViamVjdC5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMsIGhhc0Vycm9yID0gX2EuaGFzRXJyb3IsIHRocm93bkVycm9yID0gX2EudGhyb3duRXJyb3IsIF92YWx1ZSA9IF9hLl92YWx1ZTtcbiAgICAgICAgaWYgKGhhc0Vycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyB0aHJvd25FcnJvcjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl90aHJvd0lmQ2xvc2VkKCk7XG4gICAgICAgIHJldHVybiBfdmFsdWU7XG4gICAgfTtcbiAgICBCZWhhdmlvclN1YmplY3QucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5uZXh0LmNhbGwodGhpcywgKHRoaXMuX3ZhbHVlID0gdmFsdWUpKTtcbiAgICB9O1xuICAgIHJldHVybiBCZWhhdmlvclN1YmplY3Q7XG59KFN1YmplY3QpKTtcbmV4cG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QmVoYXZpb3JTdWJqZWN0LmpzLm1hcCIsImltcG9ydCB7IFJvYm90RGF0YSB9IGZyb20gJy4uL2VudGl0aWVzJ1xuXG5leHBvcnQgaW50ZXJmYWNlIE9wZXJhdG9yQ29tbWFuZCB7XG4gIG9wOiBzdHJpbmdcbiAgc291cmNlOiBzdHJpbmdcbiAgdGltZXN0YW1wPzogbnVtYmVyXG4gIGZyYW1lX3RpbWVzdGFtcD86IG51bWJlclxufVxuXG5leHBvcnQgY2xhc3MgQ29tbWFuZFNldHRpbmdzIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IENvbW1hbmRTZXR0aW5nc1xuICBwdWJsaWMgc291cmNlOiBzdHJpbmcgPSAnb3BlcmF0b3InXG5cbiAgcHVibGljIHN0YXRpYyBnZXRJbnN0YW5jZSgpOiBDb21tYW5kU2V0dGluZ3Mge1xuICAgIGlmICghQ29tbWFuZFNldHRpbmdzLmluc3RhbmNlKSB7XG4gICAgICBDb21tYW5kU2V0dGluZ3MuaW5zdGFuY2UgPSBuZXcgQ29tbWFuZFNldHRpbmdzKClcbiAgICB9XG4gICAgcmV0dXJuIENvbW1hbmRTZXR0aW5ncy5pbnN0YW5jZVxuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kQmFzZSBpbXBsZW1lbnRzIE9wZXJhdG9yQ29tbWFuZCB7XG4gIG9wOiBzdHJpbmdcbiAgc291cmNlID0gQ29tbWFuZFNldHRpbmdzLmdldEluc3RhbmNlKCkuc291cmNlXG4gIHRpbWVzdGFtcCA9IERhdGUubm93KClcbiAgZnJhbWVfdGltZXN0YW1wOiBudW1iZXJcblxuICBjb25zdHJ1Y3RvcihvcDogc3RyaW5nLCByb2JvdFN0YXR1czogUm9ib3REYXRhKSB7XG4gICAgdGhpcy5vcCA9IG9wXG4gICAgdGhpcy5mcmFtZV90aW1lc3RhbXAgPSByb2JvdFN0YXR1cy5mcmFtZWluZGV4XG4gICAgdGhpcy50aW1lc3RhbXAgPSByb2JvdFN0YXR1cy50aW1lXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIFNldENvbW1hbmRPcGVyYXRvclZhbHVlKG9wZXJhdG9yOiBzdHJpbmcpIHtcbiAgQ29tbWFuZFNldHRpbmdzLmdldEluc3RhbmNlKCkuc291cmNlID0gb3BlcmF0b3Jcbn1cbiIsImltcG9ydCB7IFBvaW50LCBSZWN0YW5nbGUsIFJvYm90RGF0YSB9IGZyb20gXCIuLi9lbnRpdGllc1wiO1xuaW1wb3J0IHsgQ29tbWFuZEJhc2UgfSBmcm9tIFwiLi9jb21tYW5kLWJhc2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbW1hbmRHb3RvIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuXG4gICAgcG9zOiBudW1iZXJbXTsgICAgICAgICAgIC8vIFBoeXNpY2FsIFhZWiBjb29yZGluYXRlcyBvZiB0aGUgc2VsZWN0ZWQgcG9pbnRcbiAgICBwaWNrX3BvaW50OiBudW1iZXJbXTsgICAgLy8gUGl4ZWwgWFkgY29vcmRpbmF0ZXMgb2YgdGhlIHNlbGVjdGVkIHBvaW50IFxuICAgIG9iamVjdF9yZWN0OiBudW1iZXJbXVtdOyAvLyBTZWxlY3RlZCBhcmVhXG5cbiAgICBjb25zdHJ1Y3Rvcihyb2JvdFN0YXR1czogUm9ib3REYXRhLCBzZWxlY3Rpb25Qb2ludDogUG9pbnQsIHNlbGVjdGlvbkFyZWE6IFJlY3RhbmdsZSwgZGVwdGhWYWxBdFNlbGVjdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKFwiZ290b1wiLCByb2JvdFN0YXR1cyk7XG5cbiAgICAgICAgdGhpcy5waWNrX3BvaW50ID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLnBvcyA9IHVuZGVmaW5lZDtcbiAgICAgICAgdGhpcy5vYmplY3RfcmVjdCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBpZiAoc2VsZWN0aW9uUG9pbnQpIHtcbiAgICAgICAgICAgIHRoaXMucGlja19wb2ludCA9IFtzZWxlY3Rpb25Qb2ludC54LCBzZWxlY3Rpb25Qb2ludC55XTtcbiAgICAgICAgfSBcblxuICAgICAgICBpZiAoc2VsZWN0aW9uQXJlYSkge1xuICAgICAgICAgICAgdGhpcy5vYmplY3RfcmVjdCA9IFtcbiAgICAgICAgICAgICAgICBbc2VsZWN0aW9uQXJlYS5Ub3BMZWZ0LngsIHNlbGVjdGlvbkFyZWEuVG9wTGVmdC55XSxcbiAgICAgICAgICAgICAgICBbc2VsZWN0aW9uQXJlYS5Cb3R0b21SaWdodC54LCBzZWxlY3Rpb25BcmVhLkJvdHRvbVJpZ2h0LnldXG4gICAgICAgICAgICBdO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGRlcHRoVmFsQXRTZWxlY3Rpb24gJiYgc2VsZWN0aW9uUG9pbnQpIHtcbiAgICAgICAgICAgIGxldCB6ID0gZGVwdGhWYWxBdFNlbGVjdGlvbiAqIHJvYm90U3RhdHVzLmRlcHRoX3VuaXQ7XG4gICAgICAgICAgICBpZiAoeikge1xuICAgICAgICAgICAgICAgIGxldCB4ID0gKHNlbGVjdGlvblBvaW50LnggLSByb2JvdFN0YXR1cy5wcHgpICogeiAvIHJvYm90U3RhdHVzLmZ4O1xuICAgICAgICAgICAgICAgIGxldCB5ID0gKHNlbGVjdGlvblBvaW50LnkgLSByb2JvdFN0YXR1cy5wcHkpICogeiAvIHJvYm90U3RhdHVzLmZ5O1xuICAgICAgICAgICAgICAgIHRoaXMucG9zID0gW3gsIHksIHpdO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufSIsImltcG9ydCB7IFJvYm90RGF0YSB9IGZyb20gXCIuLi9lbnRpdGllc1wiO1xuaW1wb3J0IHsgQ29tbWFuZEJhc2UgfSBmcm9tIFwiLi9jb21tYW5kLWJhc2VcIjtcblxuZXhwb3J0IGNsYXNzIENvbW1hbmRXYWl0Rm9ySWRsZSBleHRlbmRzIENvbW1hbmRCYXNlIHtcbiAgICBjb25zdHJ1Y3Rvcihyb2JvdFN0YXR1czogUm9ib3REYXRhKSB7XG4gICAgICAgIHN1cGVyKFwid2FpdC1mb3ItaWRsZVwiLCByb2JvdFN0YXR1cyk7XG4gICAgfVxufSIsImltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGhhc0xpZnQoc291cmNlKSB7XG4gICAgcmV0dXJuIGlzRnVuY3Rpb24oc291cmNlID09PSBudWxsIHx8IHNvdXJjZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogc291cmNlLmxpZnQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG9wZXJhdGUoaW5pdCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICAgIGlmIChoYXNMaWZ0KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2UubGlmdChmdW5jdGlvbiAobGlmdGVkU291cmNlKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGluaXQobGlmdGVkU291cmNlLCB0aGlzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5hYmxlIHRvIGxpZnQgdW5rbm93biBPYnNlcnZhYmxlIHR5cGUnKTtcbiAgICB9O1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGlmdC5qcy5tYXAiLCJpbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IFN1YnNjcmliZXIgfSBmcm9tICcuLi9TdWJzY3JpYmVyJztcbnZhciBPcGVyYXRvclN1YnNjcmliZXIgPSAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhPcGVyYXRvclN1YnNjcmliZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gT3BlcmF0b3JTdWJzY3JpYmVyKGRlc3RpbmF0aW9uLCBvbk5leHQsIG9uQ29tcGxldGUsIG9uRXJyb3IsIG9uRmluYWxpemUpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgZGVzdGluYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLm9uRmluYWxpemUgPSBvbkZpbmFsaXplO1xuICAgICAgICBfdGhpcy5fbmV4dCA9IG9uTmV4dFxuICAgICAgICAgICAgPyBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbk5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlc3RpbmF0aW9uLmVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgOiBfc3VwZXIucHJvdG90eXBlLl9uZXh0O1xuICAgICAgICBfdGhpcy5fZXJyb3IgPSBvbkVycm9yXG4gICAgICAgICAgICA/IGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkVycm9yKGVycik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2Vycm9yO1xuICAgICAgICBfdGhpcy5fY29tcGxldGUgPSBvbkNvbXBsZXRlXG4gICAgICAgICAgICA/IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBvbkNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24uZXJyb3IoZXJyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICA6IF9zdXBlci5wcm90b3R5cGUuX2NvbXBsZXRlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9wZXJhdG9yU3Vic2NyaWJlci5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdmFyIGNsb3NlZCA9IHRoaXMuY2xvc2VkO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgICFjbG9zZWQgJiYgKChfYSA9IHRoaXMub25GaW5hbGl6ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmNhbGwodGhpcykpO1xuICAgIH07XG4gICAgcmV0dXJuIE9wZXJhdG9yU3Vic2NyaWJlcjtcbn0oU3Vic2NyaWJlcikpO1xuZXhwb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1PcGVyYXRvclN1YnNjcmliZXIuanMubWFwIiwiaW1wb3J0IHsgaWRlbnRpdHkgfSBmcm9tICcuLi91dGlsL2lkZW50aXR5JztcbmltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuZXhwb3J0IGZ1bmN0aW9uIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGNvbXBhcmF0b3IsIGtleVNlbGVjdG9yKSB7XG4gICAgaWYgKGtleVNlbGVjdG9yID09PSB2b2lkIDApIHsga2V5U2VsZWN0b3IgPSBpZGVudGl0eTsgfVxuICAgIGNvbXBhcmF0b3IgPSBjb21wYXJhdG9yICE9PSBudWxsICYmIGNvbXBhcmF0b3IgIT09IHZvaWQgMCA/IGNvbXBhcmF0b3IgOiBkZWZhdWx0Q29tcGFyZTtcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBwcmV2aW91c0tleTtcbiAgICAgICAgdmFyIGZpcnN0ID0gdHJ1ZTtcbiAgICAgICAgc291cmNlLnN1YnNjcmliZShuZXcgT3BlcmF0b3JTdWJzY3JpYmVyKHN1YnNjcmliZXIsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGN1cnJlbnRLZXkgPSBrZXlTZWxlY3Rvcih2YWx1ZSk7XG4gICAgICAgICAgICBpZiAoZmlyc3QgfHwgIWNvbXBhcmF0b3IocHJldmlvdXNLZXksIGN1cnJlbnRLZXkpKSB7XG4gICAgICAgICAgICAgICAgZmlyc3QgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBwcmV2aW91c0tleSA9IGN1cnJlbnRLZXk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSkpO1xuICAgIH0pO1xufVxuZnVuY3Rpb24gZGVmYXVsdENvbXBhcmUoYSwgYikge1xuICAgIHJldHVybiBhID09PSBiO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZGlzdGluY3RVbnRpbENoYW5nZWQuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTdWJzY3JpcHRpb24gfSBmcm9tICcuLi9TdWJzY3JpcHRpb24nO1xudmFyIEFjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFjdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBBY3Rpb24oc2NoZWR1bGVyLCB3b3JrKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBBY3Rpb24ucHJvdG90eXBlLnNjaGVkdWxlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAoZGVsYXkgPT09IHZvaWQgMCkgeyBkZWxheSA9IDA7IH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICByZXR1cm4gQWN0aW9uO1xufShTdWJzY3JpcHRpb24pKTtcbmV4cG9ydCB7IEFjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QWN0aW9uLmpzLm1hcCIsImltcG9ydCB7IF9fcmVhZCwgX19zcHJlYWRBcnJheSB9IGZyb20gXCJ0c2xpYlwiO1xuZXhwb3J0IHZhciBpbnRlcnZhbFByb3ZpZGVyID0ge1xuICAgIHNldEludGVydmFsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW107XG4gICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBhcmd1bWVudHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgICAgICBhcmdzW19pXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLnNldEludGVydmFsKSB8fCBzZXRJbnRlcnZhbCkuYXBwbHkodm9pZCAwLCBfX3NwcmVhZEFycmF5KFtdLCBfX3JlYWQoYXJncykpKTtcbiAgICB9LFxuICAgIGNsZWFySW50ZXJ2YWw6IGZ1bmN0aW9uIChoYW5kbGUpIHtcbiAgICAgICAgdmFyIGRlbGVnYXRlID0gaW50ZXJ2YWxQcm92aWRlci5kZWxlZ2F0ZTtcbiAgICAgICAgcmV0dXJuICgoZGVsZWdhdGUgPT09IG51bGwgfHwgZGVsZWdhdGUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlbGVnYXRlLmNsZWFySW50ZXJ2YWwpIHx8IGNsZWFySW50ZXJ2YWwpKGhhbmRsZSk7XG4gICAgfSxcbiAgICBkZWxlZ2F0ZTogdW5kZWZpbmVkLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWludGVydmFsUHJvdmlkZXIuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBY3Rpb24gfSBmcm9tICcuL0FjdGlvbic7XG5pbXBvcnQgeyBpbnRlcnZhbFByb3ZpZGVyIH0gZnJvbSAnLi9pbnRlcnZhbFByb3ZpZGVyJztcbmltcG9ydCB7IGFyclJlbW92ZSB9IGZyb20gJy4uL3V0aWwvYXJyUmVtb3ZlJztcbnZhciBBc3luY0FjdGlvbiA9IChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKEFzeW5jQWN0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIEFzeW5jQWN0aW9uKHNjaGVkdWxlciwgd29yaykge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBzY2hlZHVsZXIsIHdvcmspIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnNjaGVkdWxlciA9IHNjaGVkdWxlcjtcbiAgICAgICAgX3RoaXMud29yayA9IHdvcms7XG4gICAgICAgIF90aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAoc3RhdGUsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgdmFyIGlkID0gdGhpcy5pZDtcbiAgICAgICAgdmFyIHNjaGVkdWxlciA9IHRoaXMuc2NoZWR1bGVyO1xuICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQoc2NoZWR1bGVyLCBpZCwgZGVsYXkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZyA9IHRydWU7XG4gICAgICAgIHRoaXMuZGVsYXkgPSBkZWxheTtcbiAgICAgICAgdGhpcy5pZCA9IHRoaXMuaWQgfHwgdGhpcy5yZXF1ZXN0QXN5bmNJZChzY2hlZHVsZXIsIHRoaXMuaWQsIGRlbGF5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVxdWVzdEFzeW5jSWQgPSBmdW5jdGlvbiAoc2NoZWR1bGVyLCBfaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gaW50ZXJ2YWxQcm92aWRlci5zZXRJbnRlcnZhbChzY2hlZHVsZXIuZmx1c2guYmluZChzY2hlZHVsZXIsIHRoaXMpLCBkZWxheSk7XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUucmVjeWNsZUFzeW5jSWQgPSBmdW5jdGlvbiAoX3NjaGVkdWxlciwgaWQsIGRlbGF5KSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICBpZiAoZGVsYXkgIT0gbnVsbCAmJiB0aGlzLmRlbGF5ID09PSBkZWxheSAmJiB0aGlzLnBlbmRpbmcgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gaWQ7XG4gICAgICAgIH1cbiAgICAgICAgaW50ZXJ2YWxQcm92aWRlci5jbGVhckludGVydmFsKGlkKTtcbiAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICB9O1xuICAgIEFzeW5jQWN0aW9uLnByb3RvdHlwZS5leGVjdXRlID0gZnVuY3Rpb24gKHN0YXRlLCBkZWxheSkge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRXJyb3IoJ2V4ZWN1dGluZyBhIGNhbmNlbGxlZCBhY3Rpb24nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnBlbmRpbmcgPSBmYWxzZTtcbiAgICAgICAgdmFyIGVycm9yID0gdGhpcy5fZXhlY3V0ZShzdGF0ZSwgZGVsYXkpO1xuICAgICAgICBpZiAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybiBlcnJvcjtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnBlbmRpbmcgPT09IGZhbHNlICYmIHRoaXMuaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5pZCA9IHRoaXMucmVjeWNsZUFzeW5jSWQodGhpcy5zY2hlZHVsZXIsIHRoaXMuaWQsIG51bGwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUuX2V4ZWN1dGUgPSBmdW5jdGlvbiAoc3RhdGUsIF9kZWxheSkge1xuICAgICAgICB2YXIgZXJyb3JlZCA9IGZhbHNlO1xuICAgICAgICB2YXIgZXJyb3JWYWx1ZTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHRoaXMud29yayhzdGF0ZSk7XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgIGVycm9yZWQgPSB0cnVlO1xuICAgICAgICAgICAgZXJyb3JWYWx1ZSA9IGUgPyBlIDogbmV3IEVycm9yKCdTY2hlZHVsZWQgYWN0aW9uIHRocmV3IGZhbHN5IGVycm9yJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVycm9yZWQpIHtcbiAgICAgICAgICAgIHRoaXMudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIHJldHVybiBlcnJvclZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBBc3luY0FjdGlvbi5wcm90b3R5cGUudW5zdWJzY3JpYmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHZhciBfYSA9IHRoaXMsIGlkID0gX2EuaWQsIHNjaGVkdWxlciA9IF9hLnNjaGVkdWxlcjtcbiAgICAgICAgICAgIHZhciBhY3Rpb25zID0gc2NoZWR1bGVyLmFjdGlvbnM7XG4gICAgICAgICAgICB0aGlzLndvcmsgPSB0aGlzLnN0YXRlID0gdGhpcy5zY2hlZHVsZXIgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5wZW5kaW5nID0gZmFsc2U7XG4gICAgICAgICAgICBhcnJSZW1vdmUoYWN0aW9ucywgdGhpcyk7XG4gICAgICAgICAgICBpZiAoaWQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaWQgPSB0aGlzLnJlY3ljbGVBc3luY0lkKHNjaGVkdWxlciwgaWQsIG51bGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5kZWxheSA9IG51bGw7XG4gICAgICAgICAgICBfc3VwZXIucHJvdG90eXBlLnVuc3Vic2NyaWJlLmNhbGwodGhpcyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBBc3luY0FjdGlvbjtcbn0oQWN0aW9uKSk7XG5leHBvcnQgeyBBc3luY0FjdGlvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9QXN5bmNBY3Rpb24uanMubWFwIiwiaW1wb3J0IHsgZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIH0gZnJvbSAnLi9zY2hlZHVsZXIvZGF0ZVRpbWVzdGFtcFByb3ZpZGVyJztcbnZhciBTY2hlZHVsZXIgPSAoZnVuY3Rpb24gKCkge1xuICAgIGZ1bmN0aW9uIFNjaGVkdWxlcihzY2hlZHVsZXJBY3Rpb25DdG9yLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdGhpcy5zY2hlZHVsZXJBY3Rpb25DdG9yID0gc2NoZWR1bGVyQWN0aW9uQ3RvcjtcbiAgICAgICAgdGhpcy5ub3cgPSBub3c7XG4gICAgfVxuICAgIFNjaGVkdWxlci5wcm90b3R5cGUuc2NoZWR1bGUgPSBmdW5jdGlvbiAod29yaywgZGVsYXksIHN0YXRlKSB7XG4gICAgICAgIGlmIChkZWxheSA9PT0gdm9pZCAwKSB7IGRlbGF5ID0gMDsgfVxuICAgICAgICByZXR1cm4gbmV3IHRoaXMuc2NoZWR1bGVyQWN0aW9uQ3Rvcih0aGlzLCB3b3JrKS5zY2hlZHVsZShzdGF0ZSwgZGVsYXkpO1xuICAgIH07XG4gICAgU2NoZWR1bGVyLm5vdyA9IGRhdGVUaW1lc3RhbXBQcm92aWRlci5ub3c7XG4gICAgcmV0dXJuIFNjaGVkdWxlcjtcbn0oKSk7XG5leHBvcnQgeyBTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVNjaGVkdWxlci5qcy5tYXAiLCJpbXBvcnQgeyBBc3luY0FjdGlvbiB9IGZyb20gJy4vQXN5bmNBY3Rpb24nO1xuaW1wb3J0IHsgQXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuL0FzeW5jU2NoZWR1bGVyJztcbmV4cG9ydCB2YXIgYXN5bmNTY2hlZHVsZXIgPSBuZXcgQXN5bmNTY2hlZHVsZXIoQXN5bmNBY3Rpb24pO1xuZXhwb3J0IHZhciBhc3luYyA9IGFzeW5jU2NoZWR1bGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXN5bmMuanMubWFwIiwiaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBTY2hlZHVsZXIgfSBmcm9tICcuLi9TY2hlZHVsZXInO1xudmFyIEFzeW5jU2NoZWR1bGVyID0gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoQXN5bmNTY2hlZHVsZXIsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gQXN5bmNTY2hlZHVsZXIoU2NoZWR1bGVyQWN0aW9uLCBub3cpIHtcbiAgICAgICAgaWYgKG5vdyA9PT0gdm9pZCAwKSB7IG5vdyA9IFNjaGVkdWxlci5ub3c7IH1cbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgU2NoZWR1bGVyQWN0aW9uLCBub3cpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmFjdGlvbnMgPSBbXTtcbiAgICAgICAgX3RoaXMuX2FjdGl2ZSA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5fc2NoZWR1bGVkID0gdW5kZWZpbmVkO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIEFzeW5jU2NoZWR1bGVyLnByb3RvdHlwZS5mbHVzaCA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgdmFyIGFjdGlvbnMgPSB0aGlzLmFjdGlvbnM7XG4gICAgICAgIGlmICh0aGlzLl9hY3RpdmUpIHtcbiAgICAgICAgICAgIGFjdGlvbnMucHVzaChhY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBlcnJvcjtcbiAgICAgICAgdGhpcy5fYWN0aXZlID0gdHJ1ZTtcbiAgICAgICAgZG8ge1xuICAgICAgICAgICAgaWYgKChlcnJvciA9IGFjdGlvbi5leGVjdXRlKGFjdGlvbi5zdGF0ZSwgYWN0aW9uLmRlbGF5KSkpIHtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpO1xuICAgICAgICB0aGlzLl9hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgaWYgKGVycm9yKSB7XG4gICAgICAgICAgICB3aGlsZSAoKGFjdGlvbiA9IGFjdGlvbnMuc2hpZnQoKSkpIHtcbiAgICAgICAgICAgICAgICBhY3Rpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gQXN5bmNTY2hlZHVsZXI7XG59KFNjaGVkdWxlcikpO1xuZXhwb3J0IHsgQXN5bmNTY2hlZHVsZXIgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFzeW5jU2NoZWR1bGVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBnZXRTeW1ib2xJdGVyYXRvcigpIHtcbiAgICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCAhU3ltYm9sLml0ZXJhdG9yKSB7XG4gICAgICAgIHJldHVybiAnQEBpdGVyYXRvcic7XG4gICAgfVxuICAgIHJldHVybiBTeW1ib2wuaXRlcmF0b3I7XG59XG5leHBvcnQgdmFyIGl0ZXJhdG9yID0gZ2V0U3ltYm9sSXRlcmF0b3IoKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWl0ZXJhdG9yLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNWYWx1ZXMsIF9fYXdhaXRlciwgX19nZW5lcmF0b3IsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0FycmF5TGlrZSB9IGZyb20gJy4uL3V0aWwvaXNBcnJheUxpa2UnO1xuaW1wb3J0IHsgaXNQcm9taXNlIH0gZnJvbSAnLi4vdXRpbC9pc1Byb21pc2UnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNJbnRlcm9wT2JzZXJ2YWJsZSB9IGZyb20gJy4uL3V0aWwvaXNJbnRlcm9wT2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBpc0FzeW5jSXRlcmFibGUgfSBmcm9tICcuLi91dGlsL2lzQXN5bmNJdGVyYWJsZSc7XG5pbXBvcnQgeyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciB9IGZyb20gJy4uL3V0aWwvdGhyb3dVbm9ic2VydmFibGVFcnJvcic7XG5pbXBvcnQgeyBpc0l0ZXJhYmxlIH0gZnJvbSAnLi4vdXRpbC9pc0l0ZXJhYmxlJztcbmltcG9ydCB7IGlzUmVhZGFibGVTdHJlYW1MaWtlLCByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yIH0gZnJvbSAnLi4vdXRpbC9pc1JlYWRhYmxlU3RyZWFtTGlrZSc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi4vdXRpbC9pc0Z1bmN0aW9uJztcbmltcG9ydCB7IHJlcG9ydFVuaGFuZGxlZEVycm9yIH0gZnJvbSAnLi4vdXRpbC9yZXBvcnRVbmhhbmRsZWRFcnJvcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuZXhwb3J0IGZ1bmN0aW9uIGlubmVyRnJvbShpbnB1dCkge1xuICAgIGlmIChpbnB1dCBpbnN0YW5jZW9mIE9ic2VydmFibGUpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgIH1cbiAgICBpZiAoaW5wdXQgIT0gbnVsbCkge1xuICAgICAgICBpZiAoaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSW50ZXJvcE9ic2VydmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0FycmF5TGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNQcm9taXNlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Qcm9taXNlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBc3luY0l0ZXJhYmxlKGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKGlucHV0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNJdGVyYWJsZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tSXRlcmFibGUoaW5wdXQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1JlYWRhYmxlU3RyZWFtTGlrZShpbnB1dCkpIHtcbiAgICAgICAgICAgIHJldHVybiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKGlucHV0KTtcbiAgICAgICAgfVxuICAgIH1cbiAgICB0aHJvdyBjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvcihpbnB1dCk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUludGVyb3BPYnNlcnZhYmxlKG9iaikge1xuICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZShmdW5jdGlvbiAoc3Vic2NyaWJlcikge1xuICAgICAgICB2YXIgb2JzID0gb2JqW1N5bWJvbF9vYnNlcnZhYmxlXSgpO1xuICAgICAgICBpZiAoaXNGdW5jdGlvbihvYnMuc3Vic2NyaWJlKSkge1xuICAgICAgICAgICAgcmV0dXJuIG9icy5zdWJzY3JpYmUoc3Vic2NyaWJlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignUHJvdmlkZWQgb2JqZWN0IGRvZXMgbm90IGNvcnJlY3RseSBpbXBsZW1lbnQgU3ltYm9sLm9ic2VydmFibGUnKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXJyYXlMaWtlKGFycmF5KSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoICYmICFzdWJzY3JpYmVyLmNsb3NlZDsgaSsrKSB7XG4gICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQoYXJyYXlbaV0pO1xuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUHJvbWlzZShwcm9taXNlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAgIC50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKCFzdWJzY3JpYmVyLmNsb3NlZCkge1xuICAgICAgICAgICAgICAgIHN1YnNjcmliZXIubmV4dCh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCBmdW5jdGlvbiAoZXJyKSB7IHJldHVybiBzdWJzY3JpYmVyLmVycm9yKGVycik7IH0pXG4gICAgICAgICAgICAudGhlbihudWxsLCByZXBvcnRVbmhhbmRsZWRFcnJvcik7XG4gICAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gZnJvbUl0ZXJhYmxlKGl0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgaXRlcmFibGVfMSA9IF9fdmFsdWVzKGl0ZXJhYmxlKSwgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCk7ICFpdGVyYWJsZV8xXzEuZG9uZTsgaXRlcmFibGVfMV8xID0gaXRlcmFibGVfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVyYWJsZV8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAoc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8xXzEpIHsgZV8xID0geyBlcnJvcjogZV8xXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKGl0ZXJhYmxlXzFfMSAmJiAhaXRlcmFibGVfMV8xLmRvbmUgJiYgKF9hID0gaXRlcmFibGVfMS5yZXR1cm4pKSBfYS5jYWxsKGl0ZXJhYmxlXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tQXN5bmNJdGVyYWJsZShhc3luY0l0ZXJhYmxlKSB7XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikuY2F0Y2goZnVuY3Rpb24gKGVycikgeyByZXR1cm4gc3Vic2NyaWJlci5lcnJvcihlcnIpOyB9KTtcbiAgICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBmcm9tUmVhZGFibGVTdHJlYW1MaWtlKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIGZyb21Bc3luY0l0ZXJhYmxlKHJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IocmVhZGFibGVTdHJlYW0pKTtcbn1cbmZ1bmN0aW9uIHByb2Nlc3MoYXN5bmNJdGVyYWJsZSwgc3Vic2NyaWJlcikge1xuICAgIHZhciBhc3luY0l0ZXJhYmxlXzEsIGFzeW5jSXRlcmFibGVfMV8xO1xuICAgIHZhciBlXzIsIF9hO1xuICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHZhbHVlLCBlXzJfMTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgX2IudHJ5cy5wdXNoKFswLCA1LCA2LCAxMV0pO1xuICAgICAgICAgICAgICAgICAgICBhc3luY0l0ZXJhYmxlXzEgPSBfX2FzeW5jVmFsdWVzKGFzeW5jSXRlcmFibGUpO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDE7XG4gICAgICAgICAgICAgICAgY2FzZSAxOiByZXR1cm4gWzQsIGFzeW5jSXRlcmFibGVfMS5uZXh0KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgMjpcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEoYXN5bmNJdGVyYWJsZV8xXzEgPSBfYi5zZW50KCksICFhc3luY0l0ZXJhYmxlXzFfMS5kb25lKSkgcmV0dXJuIFszLCA0XTtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBhc3luY0l0ZXJhYmxlXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaWJlci5uZXh0KHZhbHVlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1YnNjcmliZXIuY2xvc2VkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzJdO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMztcbiAgICAgICAgICAgICAgICBjYXNlIDM6IHJldHVybiBbMywgMV07XG4gICAgICAgICAgICAgICAgY2FzZSA0OiByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDU6XG4gICAgICAgICAgICAgICAgICAgIGVfMl8xID0gX2Iuc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICBlXzIgPSB7IGVycm9yOiBlXzJfMSB9O1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzMsIDExXTtcbiAgICAgICAgICAgICAgICBjYXNlIDY6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbNiwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBpZiAoIShhc3luY0l0ZXJhYmxlXzFfMSAmJiAhYXN5bmNJdGVyYWJsZV8xXzEuZG9uZSAmJiAoX2EgPSBhc3luY0l0ZXJhYmxlXzEucmV0dXJuKSkpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX2EuY2FsbChhc3luY0l0ZXJhYmxlXzEpXTtcbiAgICAgICAgICAgICAgICBjYXNlIDc6XG4gICAgICAgICAgICAgICAgICAgIF9iLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgX2IubGFiZWwgPSA4O1xuICAgICAgICAgICAgICAgIGNhc2UgODogcmV0dXJuIFszLCAxMF07XG4gICAgICAgICAgICAgICAgY2FzZSA5OlxuICAgICAgICAgICAgICAgICAgICBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbN107XG4gICAgICAgICAgICAgICAgY2FzZSAxMDogcmV0dXJuIFs3XTtcbiAgICAgICAgICAgICAgICBjYXNlIDExOlxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5uZXJGcm9tLmpzLm1hcCIsImltcG9ydCB7IG9wZXJhdGUgfSBmcm9tICcuLi91dGlsL2xpZnQnO1xuaW1wb3J0IHsgT3BlcmF0b3JTdWJzY3JpYmVyIH0gZnJvbSAnLi9PcGVyYXRvclN1YnNjcmliZXInO1xuaW1wb3J0IHsgaW5uZXJGcm9tIH0gZnJvbSAnLi4vb2JzZXJ2YWJsZS9pbm5lckZyb20nO1xuZXhwb3J0IHZhciBkZWZhdWx0VGhyb3R0bGVDb25maWcgPSB7XG4gICAgbGVhZGluZzogdHJ1ZSxcbiAgICB0cmFpbGluZzogZmFsc2UsXG59O1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlKGR1cmF0aW9uU2VsZWN0b3IsIF9hKSB7XG4gICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IGRlZmF1bHRUaHJvdHRsZUNvbmZpZyA6IF9hLCBsZWFkaW5nID0gX2IubGVhZGluZywgdHJhaWxpbmcgPSBfYi50cmFpbGluZztcbiAgICByZXR1cm4gb3BlcmF0ZShmdW5jdGlvbiAoc291cmNlLCBzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBoYXNWYWx1ZSA9IGZhbHNlO1xuICAgICAgICB2YXIgc2VuZFZhbHVlID0gbnVsbDtcbiAgICAgICAgdmFyIHRocm90dGxlZCA9IG51bGw7XG4gICAgICAgIHZhciBpc0NvbXBsZXRlID0gZmFsc2U7XG4gICAgICAgIHZhciBlbmRUaHJvdHRsaW5nID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhyb3R0bGVkID09PSBudWxsIHx8IHRocm90dGxlZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogdGhyb3R0bGVkLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICB0aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgaWYgKHRyYWlsaW5nKSB7XG4gICAgICAgICAgICAgICAgc2VuZCgpO1xuICAgICAgICAgICAgICAgIGlzQ29tcGxldGUgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgY2xlYW51cFRocm90dGxpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB0aHJvdHRsZWQgPSBudWxsO1xuICAgICAgICAgICAgaXNDb21wbGV0ZSAmJiBzdWJzY3JpYmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzdGFydFRocm90dGxlID0gZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICByZXR1cm4gKHRocm90dGxlZCA9IGlubmVyRnJvbShkdXJhdGlvblNlbGVjdG9yKHZhbHVlKSkuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZW5kVGhyb3R0bGluZywgY2xlYW51cFRocm90dGxpbmcpKSk7XG4gICAgICAgIH07XG4gICAgICAgIHZhciBzZW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaWYgKGhhc1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaGFzVmFsdWUgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWUgPSBzZW5kVmFsdWU7XG4gICAgICAgICAgICAgICAgc2VuZFZhbHVlID0gbnVsbDtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQodmFsdWUpO1xuICAgICAgICAgICAgICAgICFpc0NvbXBsZXRlICYmIHN0YXJ0VGhyb3R0bGUodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICBzb3VyY2Uuc3Vic2NyaWJlKG5ldyBPcGVyYXRvclN1YnNjcmliZXIoc3Vic2NyaWJlciwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICBoYXNWYWx1ZSA9IHRydWU7XG4gICAgICAgICAgICBzZW5kVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgICEodGhyb3R0bGVkICYmICF0aHJvdHRsZWQuY2xvc2VkKSAmJiAobGVhZGluZyA/IHNlbmQoKSA6IHN0YXJ0VGhyb3R0bGUodmFsdWUpKTtcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaXNDb21wbGV0ZSA9IHRydWU7XG4gICAgICAgICAgICAhKHRyYWlsaW5nICYmIGhhc1ZhbHVlICYmIHRocm90dGxlZCAmJiAhdGhyb3R0bGVkLmNsb3NlZCkgJiYgc3Vic2NyaWJlci5jb21wbGV0ZSgpO1xuICAgICAgICB9KSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZS5qcy5tYXAiLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBJbWFnZSBmcm9tIFwiaW1hZ2UtanNcIjtcbmltcG9ydCB7UmVjdGFuZ2xlLCBQb2ludCwgUm9ib3RJbWFnZURhdGEsXG4gICAgICAgIFJvYm90RGF0YSwgUm9ib3RTdGF0ZX0gZnJvbSBcIi4vZW50aXRpZXNcIjtcbmltcG9ydCB7IElJbWFnZVJlY2VpdmVyLCBXZWJTb2NrZXRJbWFnZVJlY2VpdmVyIH0gZnJvbSBcIi4vaW1hZ2UtcmVjZWl2ZXJcIjtcbmltcG9ydCB7IElOZXR3b3JrT3BlcmF0b3IsIE5ldHdvcmtPcGVyYXRvciB9IGZyb20gXCIuL25ldHdvcmstb3BlcmF0b3JcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCwgU3Vic2NyaXB0aW9uIH0gZnJvbSBcInJ4anNcIjtcbmltcG9ydCB7IENvbW1hbmRHb3RvLCBDb21tYW5kV2FpdEZvcklkbGUgfSBmcm9tIFwiLi9jb21tYW5kcy9vcGVyYXRvci1jb21tYW5kc1wiO1xuaW1wb3J0IHsgZGlzdGluY3RVbnRpbENoYW5nZWQsIGRpc3RpbmN0VW50aWxLZXlDaGFuZ2VkLCB0aHJvdHRsZVRpbWUgfSBmcm9tIFwicnhqcy9vcGVyYXRvcnNcIjtcbmltcG9ydCB7IElPcGVyYXRvclByb3BzIH0gZnJvbSBcIi4vZW50aXRpZXNcIjtcbi8vIGltcG9ydCB7IElJbWFnZVJlY2VpdmVyIH0gZnJvbSBcIi4vaW1hZ2UtcmVjZWl2ZXJcIjtcbi8vIGltcG9ydCB7IE5ldHdvcmtPcGVyYXRvciB9IGZyb20gXCIuL25ldHdvcmstb3BlcmF0b3JcIjtcblxuZXhwb3J0IGNsYXNzIE9wZXJhdG9yQ2FudmFzIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcblxuICAgIHByaXZhdGUgY2FudmFzUmVmOiBSZWFjdC5SZWZPYmplY3Q8SFRNTENhbnZhc0VsZW1lbnQ+O1xuXG4gICAgLyoqXG4gICAgICogQ2FudmFzIG9uIHdoaWNoIG91ciBzZWxlY3Rpb24gd2lsbCBiZSBjb2xvcmVkIGFjY29yZGluZyB0byB0aGUgZGVwdGggbWFwXG4gICAgICogVGhlIGNhbnZhcyBpcyBtaXhlZCBpbiB3aXRoIHRoZSByYXcgaW1hZ2UgY2FudmFzIFxuICAgICAqL1xuICAgIHByaXZhdGUgZGVwdGhDYW52YXM6IEhUTUxDYW52YXNFbGVtZW50O1xuICAgIC8qKlxuICAgICAqIEN1cnJlbnQgaW1hZ2Ugb2YgdGhlIGRlcHRoIG1hcFxuICAgICAqL1xuICAgIHByaXZhdGUgZGVwdGhEYXRhOiBJbWFnZTtcblxuICAgIC8vIFBvaW50IHJlbGF0aXZlIHRvIHdoaWNoIHdlJ3JlIGNhbGN1bGF0aW5nIHRoZSBkZXB0aCBpbiB0aGUgc2VsZWN0aW9uXG4gICAgcHJpdmF0ZSBtZWRpYW5Qb2ludDogUG9pbnQ7XG4gICAgLy8gRGVwdGggZGF0YSBhdCB0aGUgbWVkaWFuIHBvaW50XG4gICAgcHJpdmF0ZSBtZWRpYW5Qb2ludFZhbHVlOiBudW1iZXI7XG5cbiAgICBwcml2YXRlIHJvYm90U3RhdGU6IFJvYm90U3RhdGUgPSB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIGhhc0ltYWdlOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBpbWc6IEhUTUxJbWFnZUVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW1nXCIpO1xuXG4gICAgcHJpdmF0ZSBfaW1hZ2VSZWNlaXZlcjogSUltYWdlUmVjZWl2ZXI7XG4gICAgcHJpdmF0ZSBfbmV0d29ya09wZXJhdG9yOiBJTmV0d29ya09wZXJhdG9yO1xuXG4gICAgLy8gV2hpbGUgYSB1c2VyIGEgc2VsZWN0aW5nLCB0aGlzIHN0b3JlcyB0aGUgcG9pbnQgb2Ygb3JpZ2luXG4gICAgLy8gT25jZSB1c2VyIGhhcyBzZWxlY3RlZCBhbiBhcmVhLCBpdCdzIHN0b3JlZCBpbiBzZWxlY3Rpb24sIGFuZCB0aGlzIG9uZSBpcyBzZXQgdG8gbnVsbFxuICAgIHByaXZhdGUgc2VsZWN0aW9uU3RhcnQ6IFBvaW50O1xuICAgIFxuICAgIC8vIE1vdXNlIHBvc2l0aW9uIGluIHRoZSBjYW52YXMsIHVzZWQgdG8gZHJhdyB0aGUgY3Jvc3NoYWlyXG4gICAgcHJpdmF0ZSBtb3VzZVBvczogUG9pbnQ7XG5cbiAgICAvLyBEZWZpbmVzIHRoZSBzZWxlY3RlZCBhcmVhXG4gICAgcHJpdmF0ZSBzZWxlY3Rpb246IFJlY3RhbmdsZTtcblxuICAgIHByaXZhdGUgcm9ib3REYXRhOiBSb2JvdERhdGE7XG4gICAgcHJpdmF0ZSBzZXR0aW5nczogSU9wZXJhdG9yUHJvcHM7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG5cbiAgICBwcml2YXRlIHNlbGVjdGlvblN1YmplY3QgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PFJlY3RhbmdsZT4odW5kZWZpbmVkKTtcblxuXG4gICAgY29uc3RydWN0b3IocHJvcHM6IElPcGVyYXRvclByb3BzKSB7XG4gICAgICAgIHN1cGVyKHByb3BzKTtcbiAgICAgICAgdGhpcy5zZXR0aW5ncyA9IHtcbiAgICAgICAgICAgIGRhdGFXU1VybDogcHJvcHMuZGF0YVdTVXJsLFxuICAgICAgICAgICAgcm9ib3ROYW1lOiBwcm9wcy5yb2JvdE5hbWUsXG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogcHJvcHMuYWNjZXNzVG9rZW4sXG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuY2FudmFzUmVmID0gUmVhY3QuY3JlYXRlUmVmKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHJlbmRlcigpIHtcbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICAgIDxjYW52YXMgcmVmPXt0aGlzLmNhbnZhc1JlZn0gd2lkdGg9XCIxMjgwXCIgaGVpZ2h0PVwiNzIwXCJcbiAgICAgICAgICAgICAgICAgICAgb25Db250ZXh0TWVudT17KGUpID0+IHtlLnByZXZlbnREZWZhdWx0KCl9fSBcbiAgICAgICAgICAgICAgICAgICAgdGFiSW5kZXg9ezF9IFxuICAgICAgICAgICAgICAgICAgICBvbk1vdXNlRG93bj17dGhpcy5wcmVzc0V2ZW50SGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZU1vdmU9e3RoaXMuZHJhZ0V2ZW50SGFuZGxlcn1cbiAgICAgICAgICAgICAgICAgICAgb25Nb3VzZVVwPXt0aGlzLnJlbGVhc2VFdmVudEhhbmRsZXJ9XG4gICAgICAgICAgICAgICAgICAgIG9uS2V5VXA9e3RoaXMua2V5UHJlc3NFdmVudEhhbmRsZXJ9Lz5cbiAgICAgICAgKVxuICAgIH1cblxuICAgIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgICAgICB0aGlzLmRlcHRoQ2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgICAgICAgdGhpcy5kZXB0aENhbnZhcy53aWR0aCA9IDEyODA7XG4gICAgICAgIHRoaXMuZGVwdGhDYW52YXMuaGVpZ2h0ID0gNzIwO1xuICAgIFxuICAgICAgICB0aGlzLl9pbWFnZVJlY2VpdmVyID0gbmV3IFdlYlNvY2tldEltYWdlUmVjZWl2ZXIodGhpcy5zZXR0aW5ncyk7XG4gICAgICAgIHRoaXMuX25ldHdvcmtPcGVyYXRvciA9IG5ldyBOZXR3b3JrT3BlcmF0b3IodGhpcy5zZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5pbWcub25sb2FkID0gKCkgPT4gdGhpcy5yZWRyYXcoKTtcbiAgICAgICAgLy8gU3Vic2NyaWJpbmcgdG8gYWxsIHRoZSByZXF1aXJlZCBvYnNlcnZhYmxlc1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3ViamVjdC5zdWJzY3JpYmUocyA9PiB0aGlzLnJlZHJhd0RlcHRoKHMpKSxcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlUmVjZWl2ZXIuaW1hZ2VTdWJqZWN0LnN1YnNjcmliZShkID0+IHRoaXMuc2V0VmlkZW9GZWVkKGQpKSxcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlUmVjZWl2ZXIuZGVwdGhTdWJqZWN0LnN1YnNjcmliZShkID0+IHRoaXMuc2V0RGVwdGhEYXRhKGQpKSxcbiAgICAgICAgICAgIHRoaXMuX2ltYWdlUmVjZWl2ZXIuZGF0YVN1YmplY3Quc3Vic2NyaWJlKGQgPT4gdGhpcy51cGRhdGVTdGF0dXMoZCkpLFxuICAgICAgICAgICAgdGhpcy5faW1hZ2VSZWNlaXZlci5zdGF0ZVN1YmplY3RcbiAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoXCJzdGF0ZV9tYWNoaW5lXCIpLFxuICAgICAgICAgICAgICAgICAgICB0aHJvdHRsZVRpbWUoMTAwMClcbiAgICAgICAgICAgICAgICApLnN1YnNjcmliZShkID0+IHRoaXMudXBkYXRlU3RhdGUoZCkpLFxuICAgICAgICApO1xuICAgIH1cblxuICAgIGNvbXBvbmVudFdpbGxVbm1vdW50KCkge1xuICAgICAgICB0aGlzLl9pbWFnZVJlY2VpdmVyPy5zaHV0ZG93bigpO1xuICAgICAgICB0aGlzLl9uZXR3b3JrT3BlcmF0b3I/LnNodXRkb3duKCk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5mb3JFYWNoKHMgPT4gcy51bnN1YnNjcmliZSgpKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zID0gW107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBzZXRWaWRlb0ZlZWQoaW1hZ2VEYXRhOiBSb2JvdEltYWdlRGF0YSkge1xuICAgICAgICAvLyBBc3N1bWluZyB3ZSBhcmUgZ2V0dGluZyBQTkcgZm9yIG5vd1xuICAgICAgICBpZiAoaW1hZ2VEYXRhID09PSB1bmRlZmluZWQpXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRoaXMuaGFzSW1hZ2UgPSBmYWxzZTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhc0ltYWdlID0gdHJ1ZTtcbiAgICAgICAgbGV0IGJ1ZiA9IGltYWdlRGF0YS5kYXRhLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgdGhpcy5pbWcuc3JjID0gYGRhdGE6JHtpbWFnZURhdGEudHlwZX07YmFzZTY0LGArYnVmO1xuICAgIH1cblxuICAgIHByaXZhdGUgc2V0RGVwdGhEYXRhKGRlcHRoRGF0YTogSW1hZ2UpIHtcbiAgICAgICAgdGhpcy5kZXB0aERhdGEgPSBkZXB0aERhdGE7XG4gICAgICAgIHRoaXMucmVkcmF3RGVwdGgodGhpcy5zZWxlY3Rpb24pO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgIH1cblxuICAgIHByaXZhdGUgdXBkYXRlU3RhdHVzKHN0YXR1czogUm9ib3REYXRhKSB7XG4gICAgICAgIHRoaXMucm9ib3REYXRhID0gc3RhdHVzO1xuICAgIH1cbiAgICBcbiAgICBwcml2YXRlIHVwZGF0ZVN0YXRlKHN0YXRlOiBSb2JvdFN0YXRlKSB7XG4gICAgICAgIHRoaXMucm9ib3RTdGF0ZSA9IHN0YXRlO1xuICAgICAgICB0aGlzLnJlZHJhdygpO1xuICAgIH1cblxuXG4gICAgcHJpdmF0ZSByZWRyYXcoKSB7XG4gICAgICAgIGNvbnN0IGNhbnZhcyA9IHRoaXMuY2FudmFzUmVmLmN1cnJlbnQ7XG4gICAgICAgIGlmIChjYW52YXMpIHsgICAgICAgIFxuICAgICAgICAgICAgY29uc3QgY3R4ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzSW1hZ2UpIHtcbiAgICAgICAgICAgICAgICAvLyBCYXNlOiBpbWFnZSBmcm9tIHRoZSByb2JvdFxuICAgICAgICAgICAgICAgIGN0eC5kcmF3SW1hZ2UodGhpcy5pbWcsIDAsIDAsIDEyODAsIDcyMCk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ29tcG9zaXRpbmcgZGVwdGggY2FsY3VsYXRpb24gb24gdG9wXG4gICAgICAgICAgICAgICAgY3R4LnNhdmUoKTtcbiAgICAgICAgICAgICAgICBjdHguZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzY3JlZW5cIjtcbiAgICAgICAgICAgICAgICBjdHguZHJhd0ltYWdlKHRoaXMuZGVwdGhDYW52YXMsIDAsIDApO1xuICAgICAgICAgICAgICAgIGN0eC5yZXN0b3JlKCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBTZWxlY3Rpb24gYXJlYVxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldENhbnZhc1N0eWxlKGN0eCwgU3Ryb2tlU3R5bGUuU2VsZWN0aW9uUmVjdGFuZ2xlKTtcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlY3QgPSB0aGlzLnNlbGVjdGlvbjtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kb0NhbnZhc1JlY3QoY3R4LCBDYW52YXNBY3Rpb24uU3Ryb2tlLCByZWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBNZWRpYW4gcG9pbnRcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZWRpYW5Qb2ludCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLlNldENhbnZhc1N0eWxlKGN0eCwgU3Ryb2tlU3R5bGUuTWVkaWFuUG9pbnQpO1xuICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5hcmModGhpcy5tZWRpYW5Qb2ludC54LCB0aGlzLm1lZGlhblBvaW50LnksXG4gICAgICAgICAgICAgICAgICAgICAgICAxMCwgMCwgMiAqIE1hdGguUEkpO1xuICAgICAgICAgICAgICAgICAgICBjdHguZmlsbCgpO1xuICAgICAgICAgICAgICAgICAgICBjdHguc3Ryb2tlKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gQ3Jvc3NoYWlyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubW91c2VQb3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5TZXRDYW52YXNTdHlsZShjdHgsIFN0cm9rZVN0eWxlLkNyb3NzaGFpcik7XG4gICAgICAgICAgICAgICAgICAgIC8vIGhvcml6b250YWwgbGluZVxuICAgICAgICAgICAgICAgICAgICBjdHguYmVnaW5QYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5tb3ZlVG8oMCwgdGhpcy5tb3VzZVBvcy55KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LmxpbmVUbyhjYW52YXMud2lkdGgsIHRoaXMubW91c2VQb3MueSk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5zdHJva2UoKVxuICAgICAgICAgICAgICAgICAgICBjdHguY2xvc2VQYXRoKCk7XG4gICAgICAgICAgICAgICAgICAgIC8vIHZlcnRpY2FsIGxpbmVcbiAgICAgICAgICAgICAgICAgICAgY3R4LmJlZ2luUGF0aCgpO1xuICAgICAgICAgICAgICAgICAgICBjdHgubW92ZVRvKHRoaXMubW91c2VQb3MueCwgMCk7XG4gICAgICAgICAgICAgICAgICAgIGN0eC5saW5lVG8odGhpcy5tb3VzZVBvcy54LCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgICAgICAgICAgY3R4LnN0cm9rZSgpXG4gICAgICAgICAgICAgICAgICAgIGN0eC5jbG9zZVBhdGgoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuU2V0Q2FudmFzU3R5bGUoY3R4LCBTdHJva2VTdHlsZS5Ob0ltYWdlX0JHKTtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnN0IGNhbnZhc1JlY3QgPSBuZXcgUmVjdGFuZ2xlKDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCk7XG4gICAgICAgICAgICAgICAgdGhpcy5TZXRDYW52YXNTdHlsZShjdHgsIFN0cm9rZVN0eWxlLk5vSW1hZ2VfVGV4dCk7XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxUZXh0KFwiTm8gSW1hZ2VcIiwgY2FudmFzUmVjdC5DZW50ZXIueCwgY2FudmFzUmVjdC5DZW50ZXIueSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIFxuICAgICAgICAgICAgLy8gUGxhcXVlIHdpdGggcm9ib3QncyBzdGF0dXNcbiAgICAgICAgICAgIHRoaXMuU2V0Q2FudmFzU3R5bGUoY3R4LCBTdHJva2VTdHlsZS5QbGFxdWVCYWNrZ3JvdW5kKVxuICAgICAgICAgICAgbGV0IHBsYXF1ZVdpZHRoID0gNTAwO1xuICAgICAgICAgICAgbGV0IHBsYXF1ZUhlaWdodCA9IDYwO1xuICAgICAgICAgICAgbGV0IHBsYXF1ZVJlY3QgPSBuZXcgUmVjdGFuZ2xlKFxuICAgICAgICAgICAgICAgIChjYW52YXMub2Zmc2V0V2lkdGggLSBwbGFxdWVXaWR0aCkgLyAyLFxuICAgICAgICAgICAgICAgICBjYW52YXMub2Zmc2V0SGVpZ2h0IC0gcGxhcXVlSGVpZ2h0LFxuICAgICAgICAgICAgICAgIHBsYXF1ZVdpZHRoLFxuICAgICAgICAgICAgICAgIHBsYXF1ZUhlaWdodFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZG9DYW52YXNSZWN0KGN0eCwgQ2FudmFzQWN0aW9uLkZpbGwsIHBsYXF1ZVJlY3QpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBUZXh0IG9mIHJvYm90J3Mgc3RhdHVzXG4gICAgICAgICAgICBpZiAodGhpcy5yb2JvdFN0YXRlKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzLnJvYm90U3RhdGUuc3RhdGVfbWFjaGluZTtcbiAgICAgICAgICAgICAgICB0aGlzLlNldENhbnZhc1N0eWxlKGN0eCwgU3Ryb2tlU3R5bGUuUGxhcXVlVGV4dClcbiAgICAgICAgICAgICAgICBjdHguZmlsbFRleHQoc3RhdGUsIHBsYXF1ZVJlY3QuQ2VudGVyLngsIHBsYXF1ZVJlY3QuQ2VudGVyLnkpO1xuICAgICAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgICAgIC8vIEJvcmRlclxuICAgICAgICAgICAgdGhpcy5TZXRDYW52YXNTdHlsZShjdHgsIFN0cm9rZVN0eWxlLkJvcmRlcik7XG4gICAgICAgICAgICBjdHguc3Ryb2tlUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBSZWRyYXdzIHRoZSBkZXB0aCBjYWxjdWxhdGlvblxuICAgIHByaXZhdGUgcmVkcmF3RGVwdGgoc2VsZWN0aW9uOiBSZWN0YW5nbGUpIHtcbiAgICAgICAgLy8gSW4gdGhlIHByb2Nlc3Mgb2Ygc2VsZWN0aW9uIC0gc2tpcFxuICAgICAgICBpZiAodGhpcy5zZWxlY3Rpb25TdGFydCB8fCAoIXRoaXMubWVkaWFuUG9pbnQpKSByZXR1cm47XG5cbiAgICAgICAgbGV0IGRlcHRoQ2FudmFzID0gdGhpcy5kZXB0aENhbnZhcztcbiAgICAgICAgbGV0IGN0eCA9IGRlcHRoQ2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcbiAgICAgICAgY3R4LmNsZWFyUmVjdCgwLCAwLCBkZXB0aENhbnZhcy53aWR0aCwgZGVwdGhDYW52YXMuaGVpZ2h0KTtcblxuICAgICAgICBsZXQgaW1hZ2VDYW52YXMgPSB0aGlzLmNhbnZhc1JlZi5jdXJyZW50O1xuXG4gICAgICAgIC8vIE5vIHNlbGVjdGlvbiBvciBubyBkZXB0aCBkYXRhIC0gc2tpcFxuICAgICAgICBpZiAoIXNlbGVjdGlvbiB8fCAhdGhpcy5kZXB0aERhdGEpIHJldHVybjtcblxuICAgICAgICAvLyBjbGFtcGluZyBzZWxlY3Rpb24gdG8gZWRnZXMgc28gd2UgZG9uJ3QgY3JvcCBvdXRzaWRlIHRoZSByYW5nZSBhY2NpZGVudGFsbHlcbiAgICAgICAgaWYgKHNlbGVjdGlvbi54ICsgc2VsZWN0aW9uLncgPiBpbWFnZUNhbnZhcy53aWR0aCkge1xuICAgICAgICAgICAgc2VsZWN0aW9uLncgPSBpbWFnZUNhbnZhcy53aWR0aCAtIHNlbGVjdGlvbi54O1xuICAgICAgICB9XG4gICAgICAgIGlmIChzZWxlY3Rpb24ueSArIHNlbGVjdGlvbi5oID4gaW1hZ2VDYW52YXMuaGVpZ2h0KSB7XG4gICAgICAgICAgICBzZWxlY3Rpb24uaCA9IGltYWdlQ2FudmFzLmhlaWdodCAtIHNlbGVjdGlvbi55O1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gbm90IGhhbmRsaW5nIGVtcHR5IHNlbGVjdGlvbnNcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uLncgKiB0aGlzLnNlbGVjdGlvbi5oID09IDApIHJldHVybjtcbiAgICAgICBcbiAgICAgICAgbGV0IGNyb3BwZWRfZGVwdGggPSB0aGlzLmRlcHRoRGF0YS5jcm9wKHtcbiAgICAgICAgICAgIHg6IHNlbGVjdGlvbi54LFxuICAgICAgICAgICAgeTogc2VsZWN0aW9uLnksXG4gICAgICAgICAgICB3aWR0aDogc2VsZWN0aW9uLncsXG4gICAgICAgICAgICBoZWlnaHQ6IHNlbGVjdGlvbi5oXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGxldCBtZWRpYW4gPSB0aGlzLmdldE1lZGlhbkZvclBvaW50KHRoaXMuZGVwdGhEYXRhLCB0aGlzLm1lZGlhblBvaW50KTtcbiAgICAgICAgdGhpcy5tZWRpYW5Qb2ludFZhbHVlID0gbWVkaWFuO1xuICAgICAgICAvLyBnZXQgdGhlIG1hcCB3ZSdkIHVzZSBmb3IgcGl4ZWxzIHRoYXQgYXJlIGNsb3NlIHRvIHRoZSBtZWRpYW5cbiAgICAgICAgbGV0IGNvbG9yTWFwID0gdGhpcy5jYWxjdWxhdGVEZXB0aERldkNvbG9ycyhtZWRpYW4sIDMwKTtcbiAgICAgICAgY29uc3QgbkNoYW5uZWxzID0gNDtcblxuICAgICAgICAvLyBjYWxjdWxhdGUgdGhlIEltYWdlRGF0YSB0aGF0IHdlIHdpbGwgZHJhd1xuICAgICAgICBsZXQgcGl4ZWxzVG9EcmF3ID0gbmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG5DaGFubmVscyAqIGNyb3BwZWRfZGVwdGguc2l6ZSk7XG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IG5ldyBJbWFnZURhdGEoc2VsZWN0aW9uLncsIHNlbGVjdGlvbi5oKTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjcm9wcGVkX2RlcHRoLnNpemU7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgZGVwdGhQaXhlbCA9IGNyb3BwZWRfZGVwdGguZ2V0UGl4ZWwoaSk7XG4gICAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRlcHRoUGl4ZWxbMF07XG4gICAgICAgICAgICBpZiAoIWNvbG9yTWFwLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGNvbG9yID0gY29sb3JNYXAuZ2V0KHZhbHVlKTtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgNDsgaisrKSB7XG4gICAgICAgICAgICAgICAgcGl4ZWxzVG9EcmF3W2kqbkNoYW5uZWxzICsgal0gPSBjb2xvcltqXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpbWFnZURhdGEuZGF0YS5zZXQocGl4ZWxzVG9EcmF3KTtcbiAgICAgICAgLy8gRHJhdyBpdCB0byB0aGUgY2FudmFzXG4gICAgICAgIGN0eC5wdXRJbWFnZURhdGEoaW1hZ2VEYXRhLCBzZWxlY3Rpb24ueCwgc2VsZWN0aW9uLnkpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0TWVkaWFuRm9yUG9pbnQoaW1hZ2U6IEltYWdlLCBwb2ludDogUG9pbnQpOiBudW1iZXIge1xuICAgICAgICBjb25zdCBjcm9wUmFkaXVzID0gMTA7XG5cbiAgICAgICAgbGV0IGNyb3BYID0gcG9pbnQueCAtIGNyb3BSYWRpdXMgLyAyO1xuICAgICAgICBpZiAoY3JvcFggPCAwKSBjcm9wWCA9IDA7XG4gICAgICAgIGxldCBjcm9wWSA9IHBvaW50LnkgLSBjcm9wUmFkaXVzIC8gMjtcbiAgICAgICAgaWYgKGNyb3BZIDwgMCkgY3JvcFkgPSAwO1xuXG4gICAgICAgIGxldCBjcm9wVyA9IChjcm9wWCArIGNyb3BSYWRpdXMgPCBpbWFnZS53aWR0aCkgPyBjcm9wUmFkaXVzIDogaW1hZ2Uud2lkdGggLSBjcm9wWDtcbiAgICAgICAgbGV0IGNyb3BIID0gKGNyb3BZICsgY3JvcFJhZGl1cyA8IGltYWdlLmhlaWdodCkgPyBjcm9wUmFkaXVzIDogaW1hZ2UuaGVpZ2h0IC0gY3JvcFk7XG4gICAgICAgIGxldCBjcm9wID0gaW1hZ2UuY3JvcCh7XG4gICAgICAgICAgICB4OiBjcm9wWCxcbiAgICAgICAgICAgIHk6IGNyb3BZLFxuICAgICAgICAgICAgd2lkdGg6IGNyb3BXLFxuICAgICAgICAgICAgaGVpZ2h0OiBjcm9wSFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIChjcm9wIGFzIGFueSkubWVkaWFuWzBdO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgYSBncmFkaWVudCBvZiByZWQteWVsbG93LWdyZWVuIGluIHRoZSBpbnRlcnZhbFxuICAgICAqIFttZWRpYW4tc3ByZWFkLCBtZWRpYW4rc3ByZWFkXVxuICAgICAqIEBwYXJhbSBtZWRpYW4gdGhlIG1lZGlhbiB2YWx1ZSwgdGhhdCB3aWxsIGJlLCB3ZWxsLCBpbiB0aGUgbWlkZGxlXG4gICAgICogQHBhcmFtIHNwcmVhZCB0aGUgc3ByZWFkIG9mIHRoZSB2YWx1ZXMgXG4gICAgICovXG4gICAgcHJpdmF0ZSBjYWxjdWxhdGVEZXB0aERldkNvbG9ycyhtZWRpYW46IG51bWJlciwgc3ByZWFkOiBudW1iZXIgPSAyMCk6IE1hcDxudW1iZXIsIG51bWJlcltdPiB7XG4gICAgICAgIGxldCBtYXAgPSBuZXcgTWFwPG51bWJlciwgbnVtYmVyW10+KCk7XG4gICAgICAgIFxuICAgICAgICBjb25zdCBjb2xvck5lYXIgPSBbMjU1LCAwLCAwLCAyNTVdOyAgICAgICAgLy9yZWRcbiAgICAgICAgY29uc3QgY29sb3JNZWRpYW4gPSBbMjU1LCAyNTUsIDAsIDI1NV07ICAgIC8veWVsbG93XG4gICAgICAgIGNvbnN0IGNvbG9yRmFyID0gWzAsIDI1NSwgMCwgMjU1XTsgICAgICAgICAvL2dyZWVuXG4gICAgICAgIC8vIENhbGN1bGF0aW5nIG5lYXItbWVkIGdyYWRpZW50IHZhbHVlc1xuICAgICAgICBmb3IgKGxldCBpID0gbWVkaWFuIC0gc3ByZWFkOyBpIDwgbWVkaWFuOyBpKyspIHtcbiAgICAgICAgICAgIGxldCBwID0gKGkgLSAobWVkaWFuIC0gc3ByZWFkKSkgLyBzcHJlYWQ7IC8vIHBlcmNlbnRhZ2UgaG93IGZhciBhbG9uZyB0aGUgZ3JhZGllbnQgd2UgYXJlXG4gICAgICAgICAgICBsZXQgY29sb3IgPSBbXG4gICAgICAgICAgICAgICAgY29sb3JOZWFyWzBdICsgcCooY29sb3JNZWRpYW5bMF0gLSBjb2xvck5lYXJbMF0pLFxuICAgICAgICAgICAgICAgIGNvbG9yTmVhclsxXSArIHAqKGNvbG9yTWVkaWFuWzFdIC0gY29sb3JOZWFyWzFdKSxcbiAgICAgICAgICAgICAgICBjb2xvck5lYXJbMl0gKyBwKihjb2xvck1lZGlhblsyXSAtIGNvbG9yTmVhclsyXSksXG4gICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgbWFwLnNldChpLCBjb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQ2FsY3VsYXRpbmcgbWVkLWZhciBncmFkaWVudCB2YWx1ZXNcbiAgICAgICAgZm9yIChsZXQgaSA9IG1lZGlhbjsgaSA8PSBtZWRpYW4gKyBzcHJlYWQ7IGkrKykge1xuICAgICAgICAgICAgbGV0IHAgPSAoaSAtIG1lZGlhbikgLyBzcHJlYWQ7IC8vIHBlcmNlbnRhZ2UgaG93IGZhciBhbG9uZyB0aGUgZ3JhZGllbnQgd2UgYXJlXG4gICAgICAgICAgICBsZXQgY29sb3IgPSBbXG4gICAgICAgICAgICAgICAgY29sb3JNZWRpYW5bMF0gKyBwKihjb2xvckZhclswXSAtIGNvbG9yTWVkaWFuWzBdKSxcbiAgICAgICAgICAgICAgICBjb2xvck1lZGlhblsxXSArIHAqKGNvbG9yRmFyWzFdIC0gY29sb3JNZWRpYW5bMV0pLFxuICAgICAgICAgICAgICAgIGNvbG9yTWVkaWFuWzJdICsgcCooY29sb3JGYXJbMl0gLSBjb2xvck1lZGlhblsyXSksXG4gICAgICAgICAgICAgICAgMjU1LFxuICAgICAgICAgICAgXVxuICAgICAgICAgICAgbWFwLnNldChpLCBjb2xvcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHNlbmRDb21tYW5kKCkge1xuICAgICAgICB2YXIgY21kR290byA9IG5ldyBDb21tYW5kR290byhcbiAgICAgICAgICAgIHRoaXMucm9ib3REYXRhLFxuICAgICAgICAgICAgdGhpcy5tZWRpYW5Qb2ludCxcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uLFxuICAgICAgICAgICAgdGhpcy5tZWRpYW5Qb2ludFZhbHVlKTtcbiAgICAgICAgdGhpcy5fbmV0d29ya09wZXJhdG9yLmVucXVldWVDb21tYW5kKGNtZEdvdG8pXG4gICAgICAgIHZhciBjbWRJZGxlID0gbmV3IENvbW1hbmRXYWl0Rm9ySWRsZSh0aGlzLnJvYm90RGF0YSk7XG4gICAgICAgIHRoaXMuX25ldHdvcmtPcGVyYXRvci5lbnF1ZXVlQ29tbWFuZChjbWRJZGxlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbGVhc2VFdmVudEhhbmRsZXIgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICAvLyBJZiByaWdodCBjbGljayB3YXMgcHJlc3NlZCAtIGlnbm9yZVxuICAgICAgICBpZiAoZS5idXR0b24gPT0gMikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEZpbmlzaCBzZWxlY3Rpb25cbiAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IG51bGw7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGlvbikge1xuICAgICAgICAgICAgLy8gU2VuZGluZyBvdXQgdGhhdCB3ZSBoYXZlIGZpbmlzaGVkIHRoZSBzZWxlY3Rpb24gdG8gc3Vic2NyaWJlcnNcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uU3ViamVjdC5uZXh0KHRoaXMuc2VsZWN0aW9uKTtcbiAgICAgICAgICAgIHRoaXMubWVkaWFuUG9pbnQgPSB0aGlzLnNlbGVjdGlvbi5DZW50ZXI7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGtleVByZXNzRXZlbnRIYW5kbGVyID0gKGU6IFJlYWN0LktleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgaWYgKGUua2V5ID09IFwiIFwiKSB7XG4gICAgICAgICAgICB0aGlzLnNlbmRDb21tYW5kKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIHByZXNzRXZlbnRIYW5kbGVyID0gKGU6IFJlYWN0Lk1vdXNlRXZlbnQpID0+IHtcbiAgICAgICAgbGV0IHBvaW50ID0gdGhpcy5nZXRYWShlKTtcbiAgICAgICAgaWYgKGUuYnV0dG9uID09IDIpIHtcbiAgICAgICAgICAgIC8vIHJpZ2h0IGNsaWNrIC0gY2hhbmdlIG1lZGlhbiBwb2ludFxuICAgICAgICAgICAgdGhpcy5tZWRpYW5Qb2ludCA9IHBvaW50O1xuICAgICAgICAgICAgdGhpcy5yZWRyYXdEZXB0aCh0aGlzLnNlbGVjdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBMZWZ0IGNsaWNrIG9yIHRhcFxuICAgICAgICAgICAgLy8gcmVzdGFydCBzZWxlY3Rpb24gcHJvY2Vzc1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb24gPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3Rpb25TdGFydCA9IHBvaW50O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZWRyYXcoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRyYWdFdmVudEhhbmRsZXIgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgICAgICBsZXQgcG9pbnQgPSB0aGlzLmdldFhZKGUpO1xuICAgICAgICB0aGlzLm1vdXNlUG9zID0gcG9pbnQ7XG5cbiAgICAgICAgLy8gaWYgd2UncmUgY3VycmVudGx5IHNlbGVjdGluZywgcmVmcmVzaCBzZWxlY3Rpb25cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0aW9uU3RhcnQpIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0aW9uID0gUmVjdGFuZ2xlLmZyb21Qb2ludHModGhpcy5zZWxlY3Rpb25TdGFydCwgcG9pbnQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVkcmF3KCk7XG5cbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0WFkoZTogUmVhY3QuTW91c2VFdmVudCk6IFBvaW50IHtcbiAgICAgICAgbGV0IG1vdXNlWCA9IGUucGFnZVg7XG4gICAgICAgIGxldCBtb3VzZVkgPSBlLnBhZ2VZO1xuICAgICAgICBtb3VzZVggLT0gdGhpcy5jYW52YXNSZWYuY3VycmVudC5vZmZzZXRMZWZ0O1xuICAgICAgICBtb3VzZVkgLT0gdGhpcy5jYW52YXNSZWYuY3VycmVudC5vZmZzZXRUb3A7XG4gICAgICAgIHJldHVybiB7eDogbW91c2VYLCB5OiBtb3VzZVl9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZG9DYW52YXNSZWN0KGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBhY3Rpb246IENhbnZhc0FjdGlvbiwgcmVjdDogUmVjdGFuZ2xlKSB7XG4gICAgICAgIGxldCB4ID0gcmVjdC54O1xuICAgICAgICBsZXQgeSA9IHJlY3QueTtcbiAgICAgICAgbGV0IHcgPSByZWN0Lnc7XG4gICAgICAgIGxldCBoID0gcmVjdC5oO1xuICAgICAgICBzd2l0Y2ggKGFjdGlvbikge1xuICAgICAgICAgICAgY2FzZSBDYW52YXNBY3Rpb24uRmlsbDpcbiAgICAgICAgICAgICAgICBjdHguZmlsbFJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIENhbnZhc0FjdGlvbi5TdHJva2U6XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVJlY3QoeCwgeSwgdywgaCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIFNldENhbnZhc1N0eWxlKGN0eDogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBzdHlsZTogU3Ryb2tlU3R5bGUpIHtcbiAgICAgICAgc3dpdGNoIChzdHlsZSkge1xuICAgICAgICAgICAgY2FzZSBTdHJva2VTdHlsZS5Cb3JkZXI6XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJncmVlblwiO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAyMDtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3Ryb2tlU3R5bGUuU2VsZWN0aW9uUmVjdGFuZ2xlOlxuICAgICAgICAgICAgICAgIGN0eC5zdHJva2VTdHlsZSA9IFwicmVkXCI7XG4gICAgICAgICAgICAgICAgY3R4LmxpbmVXaWR0aCA9IDc7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFN0cm9rZVN0eWxlLlBsYXF1ZUJhY2tncm91bmQ6XG4gICAgICAgICAgICAgICAgY3R4LmZpbGxTdHlsZSA9IFwiYmxhY2tcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3Ryb2tlU3R5bGUuUGxhcXVlVGV4dDpcbiAgICAgICAgICAgICAgICBjdHgudGV4dEFsaWduID0gXCJjZW50ZXJcIjtcbiAgICAgICAgICAgICAgICBjdHgudGV4dEJhc2VsaW5lID0gXCJtaWRkbGVcIjtcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgICAgIGN0eC5mb250ID0gXCJib2xkIDQ4cHggc2Fucy1zZXJpZlwiO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJva2VTdHlsZS5Dcm9zc2hhaXI6XG4gICAgICAgICAgICAgICAgY3R4LnN0cm9rZVN0eWxlID0gXCJ3aGl0ZVwiO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAyO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJva2VTdHlsZS5NZWRpYW5Qb2ludDpcbiAgICAgICAgICAgICAgICBjdHguZmlsbFN0eWxlID0gXCIjYWFhYWFhOTlcIjtcbiAgICAgICAgICAgICAgICBjdHguc3Ryb2tlU3R5bGUgPSBcIiMwMDAwMDBiYlwiO1xuICAgICAgICAgICAgICAgIGN0eC5saW5lV2lkdGggPSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBTdHJva2VTdHlsZS5Ob0ltYWdlX0JHOlxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNhYWFhYWFcIjtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgU3Ryb2tlU3R5bGUuTm9JbWFnZV9UZXh0OlxuICAgICAgICAgICAgICAgIGN0eC5maWxsU3R5bGUgPSBcIiNlZWVlZWVcIjtcbiAgICAgICAgICAgICAgICBjdHguZm9udCA9IFwiYm9sZCAyMDBweCBzYW5zLXNlcmlmXCI7XG4gICAgICAgICAgICAgICAgY3R4LnRleHRBbGlnbiA9IFwiY2VudGVyXCI7XG4gICAgICAgICAgICAgICAgY3R4LnRleHRCYXNlbGluZSA9IFwibWlkZGxlXCI7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9XG59XG5cblxuXG5lbnVtIENhbnZhc0FjdGlvbiB7XG4gICAgU3Ryb2tlLFxuICAgIEZpbGwsXG59XG5cbmVudW0gU3Ryb2tlU3R5bGUge1xuICAgIEJvcmRlcixcbiAgICBDcm9zc2hhaXIsXG4gICAgU2VsZWN0aW9uUmVjdGFuZ2xlLFxuICAgIFBsYXF1ZUJhY2tncm91bmQsXG4gICAgUGxhcXVlVGV4dCxcbiAgICBNZWRpYW5Qb2ludCxcbiAgICBOb0ltYWdlX0JHLFxuICAgIE5vSW1hZ2VfVGV4dFxufVxuXG4iLCJpbXBvcnQgeyBhc3luY1NjaGVkdWxlciB9IGZyb20gJy4uL3NjaGVkdWxlci9hc3luYyc7XG5pbXBvcnQgeyBkZWZhdWx0VGhyb3R0bGVDb25maWcsIHRocm90dGxlIH0gZnJvbSAnLi90aHJvdHRsZSc7XG5pbXBvcnQgeyB0aW1lciB9IGZyb20gJy4uL29ic2VydmFibGUvdGltZXInO1xuZXhwb3J0IGZ1bmN0aW9uIHRocm90dGxlVGltZShkdXJhdGlvbiwgc2NoZWR1bGVyLCBjb25maWcpIHtcbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICBpZiAoY29uZmlnID09PSB2b2lkIDApIHsgY29uZmlnID0gZGVmYXVsdFRocm90dGxlQ29uZmlnOyB9XG4gICAgdmFyIGR1cmF0aW9uJCA9IHRpbWVyKGR1cmF0aW9uLCBzY2hlZHVsZXIpO1xuICAgIHJldHVybiB0aHJvdHRsZShmdW5jdGlvbiAoKSB7IHJldHVybiBkdXJhdGlvbiQ7IH0sIGNvbmZpZyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvdHRsZVRpbWUuanMubWFwIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJy4uL09ic2VydmFibGUnO1xuaW1wb3J0IHsgYXN5bmMgYXMgYXN5bmNTY2hlZHVsZXIgfSBmcm9tICcuLi9zY2hlZHVsZXIvYXN5bmMnO1xuaW1wb3J0IHsgaXNTY2hlZHVsZXIgfSBmcm9tICcuLi91dGlsL2lzU2NoZWR1bGVyJztcbmltcG9ydCB7IGlzVmFsaWREYXRlIH0gZnJvbSAnLi4vdXRpbC9pc0RhdGUnO1xuZXhwb3J0IGZ1bmN0aW9uIHRpbWVyKGR1ZVRpbWUsIGludGVydmFsT3JTY2hlZHVsZXIsIHNjaGVkdWxlcikge1xuICAgIGlmIChkdWVUaW1lID09PSB2b2lkIDApIHsgZHVlVGltZSA9IDA7IH1cbiAgICBpZiAoc2NoZWR1bGVyID09PSB2b2lkIDApIHsgc2NoZWR1bGVyID0gYXN5bmNTY2hlZHVsZXI7IH1cbiAgICB2YXIgaW50ZXJ2YWxEdXJhdGlvbiA9IC0xO1xuICAgIGlmIChpbnRlcnZhbE9yU2NoZWR1bGVyICE9IG51bGwpIHtcbiAgICAgICAgaWYgKGlzU2NoZWR1bGVyKGludGVydmFsT3JTY2hlZHVsZXIpKSB7XG4gICAgICAgICAgICBzY2hlZHVsZXIgPSBpbnRlcnZhbE9yU2NoZWR1bGVyO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaW50ZXJ2YWxEdXJhdGlvbiA9IGludGVydmFsT3JTY2hlZHVsZXI7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ldyBPYnNlcnZhYmxlKGZ1bmN0aW9uIChzdWJzY3JpYmVyKSB7XG4gICAgICAgIHZhciBkdWUgPSBpc1ZhbGlkRGF0ZShkdWVUaW1lKSA/ICtkdWVUaW1lIC0gc2NoZWR1bGVyLm5vdygpIDogZHVlVGltZTtcbiAgICAgICAgaWYgKGR1ZSA8IDApIHtcbiAgICAgICAgICAgIGR1ZSA9IDA7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIG4gPSAwO1xuICAgICAgICByZXR1cm4gc2NoZWR1bGVyLnNjaGVkdWxlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGlmICghc3Vic2NyaWJlci5jbG9zZWQpIHtcbiAgICAgICAgICAgICAgICBzdWJzY3JpYmVyLm5leHQobisrKTtcbiAgICAgICAgICAgICAgICBpZiAoMCA8PSBpbnRlcnZhbER1cmF0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2NoZWR1bGUodW5kZWZpbmVkLCBpbnRlcnZhbER1cmF0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmliZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIGR1ZSk7XG4gICAgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aW1lci5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc1NjaGVkdWxlcih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnNjaGVkdWxlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzU2NoZWR1bGVyLmpzLm1hcCIsImV4cG9ydCBmdW5jdGlvbiBpc1ZhbGlkRGF0ZSh2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSBpbnN0YW5jZW9mIERhdGUgJiYgIWlzTmFOKHZhbHVlKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzRGF0ZS5qcy5tYXAiLCJpbXBvcnQgeyBvYnNlcnZhYmxlIGFzIFN5bWJvbF9vYnNlcnZhYmxlIH0gZnJvbSAnLi4vc3ltYm9sL29ic2VydmFibGUnO1xuaW1wb3J0IHsgaXNGdW5jdGlvbiB9IGZyb20gJy4vaXNGdW5jdGlvbic7XG5leHBvcnQgZnVuY3Rpb24gaXNJbnRlcm9wT2JzZXJ2YWJsZShpbnB1dCkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKGlucHV0W1N5bWJvbF9vYnNlcnZhYmxlXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0ludGVyb3BPYnNlcnZhYmxlLmpzLm1hcCIsImV4cG9ydCB2YXIgaXNBcnJheUxpa2UgPSAoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHggJiYgdHlwZW9mIHgubGVuZ3RoID09PSAnbnVtYmVyJyAmJiB0eXBlb2YgeCAhPT0gJ2Z1bmN0aW9uJzsgfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FycmF5TGlrZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSBcIi4vaXNGdW5jdGlvblwiO1xuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvbWlzZSh2YWx1ZSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB2b2lkIDAgPyB2b2lkIDAgOiB2YWx1ZS50aGVuKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWlzUHJvbWlzZS5qcy5tYXAiLCJpbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiBpc0FzeW5jSXRlcmFibGUob2JqKSB7XG4gICAgcmV0dXJuIFN5bWJvbC5hc3luY0l0ZXJhdG9yICYmIGlzRnVuY3Rpb24ob2JqID09PSBudWxsIHx8IG9iaiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb2JqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0FzeW5jSXRlcmFibGUuanMubWFwIiwiaW1wb3J0IHsgaXRlcmF0b3IgYXMgU3ltYm9sX2l0ZXJhdG9yIH0gZnJvbSAnLi4vc3ltYm9sL2l0ZXJhdG9yJztcbmltcG9ydCB7IGlzRnVuY3Rpb24gfSBmcm9tICcuL2lzRnVuY3Rpb24nO1xuZXhwb3J0IGZ1bmN0aW9uIGlzSXRlcmFibGUoaW5wdXQpIHtcbiAgICByZXR1cm4gaXNGdW5jdGlvbihpbnB1dCA9PT0gbnVsbCB8fCBpbnB1dCA9PT0gdm9pZCAwID8gdm9pZCAwIDogaW5wdXRbU3ltYm9sX2l0ZXJhdG9yXSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pc0l0ZXJhYmxlLmpzLm1hcCIsImltcG9ydCB7IF9fYXN5bmNHZW5lcmF0b3IsIF9fYXdhaXQsIF9fZ2VuZXJhdG9yIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uIH0gZnJvbSAnLi9pc0Z1bmN0aW9uJztcbmV4cG9ydCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yKHJlYWRhYmxlU3RyZWFtKSB7XG4gICAgcmV0dXJuIF9fYXN5bmNHZW5lcmF0b3IodGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiByZWFkYWJsZVN0cmVhbUxpa2VUb0FzeW5jR2VuZXJhdG9yXzEoKSB7XG4gICAgICAgIHZhciByZWFkZXIsIF9hLCB2YWx1ZSwgZG9uZTtcbiAgICAgICAgcmV0dXJuIF9fZ2VuZXJhdG9yKHRoaXMsIGZ1bmN0aW9uIChfYikge1xuICAgICAgICAgICAgc3dpdGNoIChfYi5sYWJlbCkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgcmVhZGVyID0gcmVhZGFibGVTdHJlYW0uZ2V0UmVhZGVyKCk7XG4gICAgICAgICAgICAgICAgICAgIF9iLmxhYmVsID0gMTtcbiAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgIF9iLnRyeXMucHVzaChbMSwgLCA5LCAxMF0pO1xuICAgICAgICAgICAgICAgICAgICBfYi5sYWJlbCA9IDI7XG4gICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRydWUpIHJldHVybiBbMywgOF07XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbNCwgX19hd2FpdChyZWFkZXIucmVhZCgpKV07XG4gICAgICAgICAgICAgICAgY2FzZSAzOlxuICAgICAgICAgICAgICAgICAgICBfYSA9IF9iLnNlbnQoKSwgdmFsdWUgPSBfYS52YWx1ZSwgZG9uZSA9IF9hLmRvbmU7XG4gICAgICAgICAgICAgICAgICAgIGlmICghZG9uZSkgcmV0dXJuIFszLCA1XTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0LCBfX2F3YWl0KHZvaWQgMCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogcmV0dXJuIFsyLCBfYi5zZW50KCldO1xuICAgICAgICAgICAgICAgIGNhc2UgNTogcmV0dXJuIFs0LCBfX2F3YWl0KHZhbHVlKV07XG4gICAgICAgICAgICAgICAgY2FzZSA2OiByZXR1cm4gWzQsIF9iLnNlbnQoKV07XG4gICAgICAgICAgICAgICAgY2FzZSA3OlxuICAgICAgICAgICAgICAgICAgICBfYi5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbMywgMl07XG4gICAgICAgICAgICAgICAgY2FzZSA4OiByZXR1cm4gWzMsIDEwXTtcbiAgICAgICAgICAgICAgICBjYXNlIDk6XG4gICAgICAgICAgICAgICAgICAgIHJlYWRlci5yZWxlYXNlTG9jaygpO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzddO1xuICAgICAgICAgICAgICAgIGNhc2UgMTA6IHJldHVybiBbMl07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUmVhZGFibGVTdHJlYW1MaWtlKG9iaikge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKG9iaiA9PT0gbnVsbCB8fCBvYmogPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9iai5nZXRSZWFkZXIpO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aXNSZWFkYWJsZVN0cmVhbUxpa2UuanMubWFwIiwiZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUludmFsaWRPYnNlcnZhYmxlVHlwZUVycm9yKGlucHV0KSB7XG4gICAgcmV0dXJuIG5ldyBUeXBlRXJyb3IoXCJZb3UgcHJvdmlkZWQgXCIgKyAoaW5wdXQgIT09IG51bGwgJiYgdHlwZW9mIGlucHV0ID09PSAnb2JqZWN0JyA/ICdhbiBpbnZhbGlkIG9iamVjdCcgOiBcIidcIiArIGlucHV0ICsgXCInXCIpICsgXCIgd2hlcmUgYSBzdHJlYW0gd2FzIGV4cGVjdGVkLiBZb3UgY2FuIHByb3ZpZGUgYW4gT2JzZXJ2YWJsZSwgUHJvbWlzZSwgUmVhZGFibGVTdHJlYW0sIEFycmF5LCBBc3luY0l0ZXJhYmxlLCBvciBJdGVyYWJsZS5cIik7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD10aHJvd1Vub2JzZXJ2YWJsZUVycm9yLmpzLm1hcCIsImltcG9ydCB7IGRpc3RpbmN0VW50aWxDaGFuZ2VkIH0gZnJvbSAnLi9kaXN0aW5jdFVudGlsQ2hhbmdlZCc7XG5leHBvcnQgZnVuY3Rpb24gZGlzdGluY3RVbnRpbEtleUNoYW5nZWQoa2V5LCBjb21wYXJlKSB7XG4gICAgcmV0dXJuIGRpc3RpbmN0VW50aWxDaGFuZ2VkKGZ1bmN0aW9uICh4LCB5KSB7IHJldHVybiBjb21wYXJlID8gY29tcGFyZSh4W2tleV0sIHlba2V5XSkgOiB4W2tleV0gPT09IHlba2V5XTsgfSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1kaXN0aW5jdFVudGlsS2V5Q2hhbmdlZC5qcy5tYXAiLCJpbXBvcnQgeyBSb2JvdERhdGEgfSBmcm9tIFwiLi4vZW50aXRpZXNcIjtcbmltcG9ydCB7IENvbW1hbmRCYXNlIH0gZnJvbSBcIi4vY29tbWFuZC1iYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kU2V0Sm9pbnRzIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIGpvaW50czogbnVtYmVyW107XG5cbiAgICBjb25zdHJ1Y3Rvcihqb2ludHM6IG51bWJlcltdLCByb2JvdFN0YXR1czogUm9ib3REYXRhKSB7XG4gICAgICAgIHN1cGVyKFwic2V0SlwiLCByb2JvdFN0YXR1cyk7XG4gICAgICAgIHRoaXMuam9pbnRzID0gam9pbnRzO1xuICAgIH1cbn0iLCJpbXBvcnQgeyBSb2JvdERhdGEgfSBmcm9tIFwiLi4vZW50aXRpZXNcIjtcbmltcG9ydCB7IENvbW1hbmRCYXNlIH0gZnJvbSBcIi4vY29tbWFuZC1iYXNlXCI7XG5cbmV4cG9ydCBjbGFzcyBDb21tYW5kU2V0VGFnIGV4dGVuZHMgQ29tbWFuZEJhc2Uge1xuICAgIHRhZ19pZDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IodGFnX2lkOiBudW1iZXIsIHJvYm90U3RhdHVzOiBSb2JvdERhdGEpIHtcbiAgICAgICAgc3VwZXIoXCJjYWxpYnJhdGlvbi9zZXQtdGFnXCIsIHJvYm90U3RhdHVzKTtcbiAgICAgICAgdGhpcy50YWdfaWQgPSB0YWdfaWQ7XG4gICAgfVxufSIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vb3BlcmF0b3ItZGVidWcuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL29wZXJhdG9yLWRlYnVnLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgeyBzdGF0IH0gZnJvbSBcImZzXCI7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBDb21tYW5kQmFzZSwgQ29tbWFuZFNldHRpbmdzIH0gZnJvbSBcIi4vY29tbWFuZHMvY29tbWFuZC1iYXNlXCI7XG5pbXBvcnQgeyBDb21tYW5kU2V0Sm9pbnRzIH0gZnJvbSBcIi4vY29tbWFuZHMvY29tbWFuZC1zZXQtam9pbnRzXCI7XG5pbXBvcnQgeyBDb21tYW5kU2V0VGFnIH0gZnJvbSBcIi4vY29tbWFuZHMvY29tbWFuZC1zZXQtdGFnXCI7XG5pbXBvcnQgeyBJT3BlcmF0b3JQcm9wcywgUm9ib3REYXRhLCBSb2JvdEltYWdlRGF0YSwgUm9ib3RTdGF0ZSB9IGZyb20gXCIuL2VudGl0aWVzXCI7XG5pbXBvcnQgeyBJSW1hZ2VSZWNlaXZlciwgV2ViU29ja2V0SW1hZ2VSZWNlaXZlciB9IGZyb20gXCIuL2ltYWdlLXJlY2VpdmVyXCI7XG5pbXBvcnQgeyBJTmV0d29ya09wZXJhdG9yLCBOZXR3b3JrT3BlcmF0b3IgfSBmcm9tIFwiLi9uZXR3b3JrLW9wZXJhdG9yXCI7XG5pbXBvcnQgXCIuL29wZXJhdG9yLWRlYnVnLnNjc3NcIjtcblxuaW50ZXJmYWNlIElPcGVyYXRvclN0YXRlIHtcbiAgICB3c1VybDogc3RyaW5nLFxuICAgIHJvYm90TmFtZTogc3RyaW5nLFxuICAgIGFjY2Vzc1Rva2VuOiBzdHJpbmcsXG4gICAgZGVwdGhEYXRhOiBzdHJpbmcsXG4gICAgaW1hZ2VEYXRhOiBzdHJpbmcsXG4gICAgZnBzOiBudW1iZXIsXG4gICAgY29ubmVjdGVkOiBib29sZWFuLFxuICAgIGlzQ2FsaWJyYXRpbmc6IGJvb2xlYW4sXG4gICAgdGFnc0NhbGlicmF0ZWQ6IHtbdGFnOiBzdHJpbmddOiBib29sZWFufSxcbiAgICBqb2ludHM6IG51bWJlcltdLFxuICAgIGNvbW1hbmRMaXN0OiBhbnlbXSxcbiAgICBjb21tYW5kTmFtZUlucHV0OiBzdHJpbmcsXG4gICAgY29tbWFuZE9wSW5wdXQ6IHN0cmluZyxcbiAgICBzdGF0ZV9tYWNoaW5lOiBzdHJpbmcsXG59XG5cbmV4cG9ydCBjbGFzcyBPcGVyYXRvckRlYnVnIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PElPcGVyYXRvclByb3BzLCBJT3BlcmF0b3JTdGF0ZT4ge1xuXG4gICAgcHJpdmF0ZSBfaW1hZ2VSZWNlaXZlcjogSUltYWdlUmVjZWl2ZXI7XG4gICAgcHJpdmF0ZSBfbmV0d29ya09wZXJhdG9yOiBJTmV0d29ya09wZXJhdG9yO1xuXG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb25zOiBTdWJzY3JpcHRpb25bXSA9IFtdO1xuXG4gICAgcHJpdmF0ZSBsYXN0RnJhbWVEYXRlID0gRGF0ZS5ub3coKTtcbiAgICBwcml2YXRlIHJvYm90RGF0YTogUm9ib3REYXRhO1xuICAgIHByaXZhdGUgcm9ib3RTdGF0ZTogUm9ib3RTdGF0ZTtcblxuICAgIGNvbnN0cnVjdG9yKHByb3BzOiBJT3BlcmF0b3JQcm9wcykge1xuICAgICAgICBzdXBlcihwcm9wcyk7XG5cbiAgICAgICAgbGV0IHRhZ3MgPSBbNiwgOCwgMTBdO1xuICAgICAgICBsZXQgdGFnU2V0cyA9IHt9O1xuICAgICAgICB0YWdzLm1hcCh0ID0+IHRhZ1NldHNbdF0gPSBmYWxzZSk7XG4gICAgICAgIFxuICAgICAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgICAgICAgd3NVcmw6IHRoaXMucHJvcHMuZGF0YVdTVXJsLFxuICAgICAgICAgICAgcm9ib3ROYW1lOiB0aGlzLnByb3BzLnJvYm90TmFtZSxcbiAgICAgICAgICAgIGFjY2Vzc1Rva2VuOiB0aGlzLnByb3BzLmFjY2Vzc1Rva2VuLFxuICAgICAgICAgICAgZnBzOiAwLFxuICAgICAgICAgICAgZGVwdGhEYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgICBpbWFnZURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGNvbm5lY3RlZDogZmFsc2UsXG4gICAgICAgICAgICBpc0NhbGlicmF0aW5nOiBmYWxzZSxcbiAgICAgICAgICAgIHRhZ3NDYWxpYnJhdGVkOiB0YWdTZXRzLFxuICAgICAgICAgICAgam9pbnRzOiBbXSxcbiAgICAgICAgICAgIGNvbW1hbmRMaXN0OltdLFxuICAgICAgICAgICAgY29tbWFuZE5hbWVJbnB1dDpcIlwiLFxuICAgICAgICAgICAgY29tbWFuZE9wSW5wdXQ6XCJcIixcbiAgICAgICAgICAgIHN0YXRlX21hY2hpbmU6XCJcIlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGlvblNldHRpbmdDaGFuZ2VkKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSB7XG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgICAgICAgLi4udGhpcy5zdGF0ZSxcbiAgICAgICAgICAgIFtlLnRhcmdldC5uYW1lXTogZS50YXJnZXQudmFsdWV9KTtcbiAgICB9XG5cbiAgICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuXG4gICAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgICAgIHRoaXMuY29ubmVjdCgpO1xuICAgICAgICBjb25zdCBjb21tYW5kcyA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oXCJyZW1icmFpbl9kZWJ1Z19vcGVyYXRvcl9jb21tYW5kc1wiKSlcbiAgICAgICAgY29tbWFuZHMgJiYgdGhpcy5zZXRTdGF0ZSh7Y29tbWFuZExpc3Q6IGNvbW1hbmRzfSlcbiAgICB9XG5cbiAgICBhZGRDb21tYW5kICgpIHtcbiAgICAgICAgY29uc3Qge2NvbW1hbmROYW1lSW5wdXQ6IG5hbWUsIGNvbW1hbmRPcElucHV0OiBvcH0gPSB0aGlzLnN0YXRlO1xuICAgICAgICBpZiAobmFtZSAmJiBvcCkge1xuICAgICAgICAgICAgY29uc3QgbmV3TGlzdCA9IFsuLi50aGlzLnN0YXRlLmNvbW1hbmRMaXN0LCB7bmFtZSxvcH1dXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb21tYW5kTGlzdDogbmV3TGlzdH0pICAgIFxuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJyZW1icmFpbl9kZWJ1Z19vcGVyYXRvcl9jb21tYW5kc1wiLEpTT04uc3RyaW5naWZ5KG5ld0xpc3QpKVxuICAgICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7Y29tbWFuZE5hbWVJbnB1dDogXCJcIiwgY29tbWFuZE9wSW5wdXQ6IFwiXCJ9KVxuICAgICAgICB9XG4gICAgICAgIFxuICAgIH1cblxuICAgIHJlbW92ZUNvbW1hbmQgKG5hbWUpIHtcbiAgICAgICAgY29uc3QgaWR4ID0gdGhpcy5zdGF0ZS5jb21tYW5kTGlzdC5maW5kSW5kZXgoKGVsKSA9PiBlbC5uYW1lPT09bmFtZSlcbiAgICAgICAgY29uc3Qge2NvbW1hbmRMaXN0fSA9IHRoaXMuc3RhdGVcbiAgICAgICAgY29uc3QgbmV3TGlzdCA9IFsuLi5jb21tYW5kTGlzdC5zbGljZSgwLGlkeCksIC4uLmNvbW1hbmRMaXN0LnNsaWNlKGlkeCsxKV1cbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGNvbW1hbmRMaXN0OiBuZXdMaXN0fSlcbiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oXCJyZW1icmFpbl9kZWJ1Z19vcGVyYXRvcl9jb21tYW5kc1wiLEpTT04uc3RyaW5naWZ5KG5ld0xpc3QpKVxuICAgIH1cblxuICAgIGNvbm5lY3QoKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKHRoaXMuc3RhdGUpO1xuICAgICAgICBsZXQgc2V0dGluZ3MgPSB7XG4gICAgICAgICAgICBhY2Nlc3NUb2tlbjogdGhpcy5zdGF0ZS5hY2Nlc3NUb2tlbixcbiAgICAgICAgICAgIGRhdGFXU1VybDogdGhpcy5zdGF0ZS53c1VybCxcbiAgICAgICAgICAgIHJvYm90TmFtZTogdGhpcy5zdGF0ZS5yb2JvdE5hbWVcbiAgICAgICAgfTtcbiAgICAgICAgbGV0IG5ldG9wID0gbmV3IE5ldHdvcmtPcGVyYXRvcihzZXR0aW5ncyk7XG4gICAgICAgIGxldCBpbWdyZWMgPSBuZXcgV2ViU29ja2V0SW1hZ2VSZWNlaXZlcihzZXR0aW5ncyk7XG5cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goaW1ncmVjLmltYWdlU3ViamVjdC5zdWJzY3JpYmUoY2FtZXJhID0+IHRoaXMuZ290Q2FtZXJhRGF0YShjYW1lcmEpKSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGltZ3JlYy5kZXB0aFN1YmplY3Quc3Vic2NyaWJlKGRlcHRoID0+IHRoaXMuZ290RGVwdGhEYXRhKGRlcHRoKSkpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMucHVzaChpbWdyZWMuc3RhdGVTdWJqZWN0LnN1YnNjcmliZShzdGF0ZSA9PiB0aGlzLmdvdFJvYm90U3RhdGUoc3RhdGUpKSk7XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKGltZ3JlYy5kYXRhU3ViamVjdC5zdWJzY3JpYmUoZGF0YSA9PiB0aGlzLmdvdFJvYm90RGF0YShkYXRhKSkpO1xuXG4gICAgICAgIHRoaXMuX2ltYWdlUmVjZWl2ZXIgPSBpbWdyZWM7XG4gICAgICAgIHRoaXMuX25ldHdvcmtPcGVyYXRvciA9IG5ldG9wO1xuXG4gICAgICAgIHRoaXMuc2V0U3RhdGUoe2Nvbm5lY3RlZDogdHJ1ZX0pO1xuICAgIH1cblxuICAgIGRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIHRoaXMuX25ldHdvcmtPcGVyYXRvcj8uc2h1dGRvd24oKTtcbiAgICAgICAgdGhpcy5faW1hZ2VSZWNlaXZlcj8uc2h1dGRvd24oKTtcbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLmZvckVhY2gocyA9PiBzLnVuc3Vic2NyaWJlKCkpO1xuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnMgPSBbXTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICAgICAgICBjb25uZWN0ZWQ6IGZhbHNlLFxuICAgICAgICAgICAgaXNDYWxpYnJhdGluZzogZmFsc2UsXG4gICAgICAgICAgICBqb2ludHM6IFtdLFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBcblxuICAgIGdvdENhbWVyYURhdGEoY2FtZXJhRGF0YTogUm9ib3RJbWFnZURhdGEpIHtcbiAgICAgICAgaWYgKGNhbWVyYURhdGEgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICBsZXQgYnVmID0gY2FtZXJhRGF0YS5kYXRhLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7aW1hZ2VEYXRhOiBgZGF0YToke2NhbWVyYURhdGEudHlwZX07YmFzZTY0LGArYnVmfSk7XG4gICAgICAgIHRoaXMucmVjYWxjdWxhdGVGUFMoKTtcbiAgICB9XG5cbiAgICByZWNhbGN1bGF0ZUZQUygpIHtcbiAgICAgICAgY29uc3QgbmV3RnJhbWVEYXRlID0gRGF0ZS5ub3coKTtcbiAgICAgICAgY29uc3QgZGVsdGEgPSBuZXdGcmFtZURhdGUgLSB0aGlzLmxhc3RGcmFtZURhdGU7XG4gICAgICAgIGNvbnN0IGZwcyA9IDEwMDAgLyBkZWx0YTtcbiAgICAgICAgdGhpcy5sYXN0RnJhbWVEYXRlID0gbmV3RnJhbWVEYXRlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtmcHM6IGZwc30pO1xuICAgIH1cblxuICAgIGdvdERlcHRoRGF0YShkZXB0aERhdGE6IGFueSkge1xuICAgICAgICBjb25zdCB0eXBlID0gXCJpbWFnZS9wbmdcIjtcbiAgICAgICAgZGVwdGhEYXRhLm11bHRpcGx5KDY0KTsgLy8gTXVsdGlwbHkgYnkgMioqOCB0byBtb3ZlIGl0IGZyb20gMTZiaXQgdG8gYnJvd3Nlci12aXNpYmxlIDhiaXQgc3BhY2VcbiAgICAgICAgbGV0IGJ1ZiA9IGRlcHRoRGF0YS50b0Jhc2U2NCgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtkZXB0aERhdGE6IGBkYXRhOiR7dHlwZX07YmFzZTY0LGArYnVmfSk7XG4gICAgfVxuXG4gICAgZ290Um9ib3RTdGF0ZShzdGF0ZTogUm9ib3RTdGF0ZSkge1xuICAgICAgICBpZiAoc3RhdGUgPT09IHVuZGVmaW5lZCkgcmV0dXJuO1xuICAgICAgICAvLyBjb25zb2xlLmxvZyhcIlN0YXRlOlwiLCBzdGF0ZSk7XG4gICAgICAgIHRoaXMucm9ib3RTdGF0ZSA9IHN0YXRlO1xuICAgICAgICBpZiAodGhpcy5yb2JvdFN0YXRlLmpvaW50cykge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtqb2ludHM6IHN0YXRlLmpvaW50cywgc3RhdGVfbWFjaGluZTogc3RhdGUuc3RhdGVfbWFjaGluZX0pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ290Um9ib3REYXRhKGRhdGE6IFJvYm90RGF0YSkge1xuICAgICAgICBpZiAoZGF0YSA9PT0gdW5kZWZpbmVkKSByZXR1cm47XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKFwiRGF0YTpcIiwgZGF0YSk7XG4gICAgICAgIHRoaXMucm9ib3REYXRhID0gZGF0YTtcbiAgICB9XG5cbiAgICBjYWxpYnJhdGlvblN0YXJ0KCkge1xuICAgICAgICB0aGlzLnNlbmRPcChcImFza19mb3JfbWFudWFsXCIpO1xuICAgICAgICB0aGlzLnNlbmRPcChcImNhbGlicmF0aW9uL3RhZ19kZXRlY3Rpb25cIik7XG4gICAgICAgIHRoaXMucmVzZXRUYWdTdGF0ZSgpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHtpc0NhbGlicmF0aW5nOiB0cnVlfSk7XG4gICAgfVxuXG4gICAgY2FuRmluaXNoQ2FsaWJyYXRpb24oKSB7XG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS5pc0NhbGlicmF0aW5nKSByZXR1cm4gZmFsc2U7XG4gICAgICAgIGNvbnN0IHRhZ3MgPSB0aGlzLnN0YXRlLnRhZ3NDYWxpYnJhdGVkO1xuICAgICAgICBjb25zdCB1bnNldCA9IE9iamVjdC5rZXlzKHRhZ3MpLmZpbHRlcih0ID0+ICF0YWdzW3RdKTtcbiAgICAgICAgcmV0dXJuIHVuc2V0Lmxlbmd0aCA9PSAwO1xuICAgIH1cbiAgICBcbiAgICBmaW5pc2hDYWxpYnJhdGlvbigpIHtcbiAgICAgICAgdGhpcy5zZW5kT3AoXCJjYWxpYmFydGlvbi90YWdfY2FsaWJyYXRpb25cIik7XG4gICAgICAgIHRoaXMuc2VuZE9wKFwiYXNrX2Zvcl9pZGxlXCIpO1xuICAgICAgICB0aGlzLnJlc2V0VGFnU3RhdGUoKTtcbiAgICAgICAgdGhpcy5zZXRTdGF0ZSh7aXNDYWxpYnJhdGluZzogZmFsc2V9KTtcbiAgICB9XG5cbiAgICByZXNldFRhZ1N0YXRlKCkge1xuICAgICAgICBsZXQgdGFncyA9IHRoaXMuc3RhdGUudGFnc0NhbGlicmF0ZWQ7XG4gICAgICAgIE9iamVjdC5rZXlzKHRhZ3MpLmZvckVhY2godCA9PiB0YWdzW3RdID0gZmFsc2UpO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHt0YWdzQ2FsaWJyYXRlZDogdGFnc30pO1xuICAgIH1cbiAgICBcbiAgICBkZXRlY3RDYWxpYnJhdGlvblRhZ3MoKSB7XG4gICAgICAgIHRoaXMuc2VuZE9wKFwiY2FsaWJyYXRpb24vdGFnX2RldGVjdGlvblwiKTtcbiAgICB9XG5cbiAgICB0YWdDbGlja2VkKHRhZzogc3RyaW5nKSB7XG4gICAgICAgIC8vIFNlbmQgdGhlIGNvbW1hbmRcbiAgICAgICAgbGV0IGNtZCA9IG5ldyBDb21tYW5kU2V0VGFnKE51bWJlcih0YWcpLCB0aGlzLnJvYm90RGF0YSk7XG4gICAgICAgIHRoaXMuX25ldHdvcmtPcGVyYXRvci5lbnF1ZXVlQ29tbWFuZChjbWQpO1xuICAgICAgICAvLyBTZXR0aW5nIHRoaXMgdGFnIGFzIGNsaWNrZWRcbiAgICAgICAgbGV0IHRhZ3MgPSB0aGlzLnN0YXRlLnRhZ3NDYWxpYnJhdGVkO1xuICAgICAgICB0YWdzW3RhZ10gPSB0cnVlO1xuICAgICAgICB0aGlzLnNldFN0YXRlKHt0YWdzQ2FsaWJyYXRlZDogdGFnc30pO1xuICAgIH1cblxuICAgIHJlbmRlclRhZ0J1dHRvbnMoKSB7XG4gICAgICAgIGNvbnN0IHRhZ3MgPSBPYmplY3Qua2V5cyh0aGlzLnN0YXRlLnRhZ3NDYWxpYnJhdGVkKTtcbiAgICAgICAgbGV0IHRhZ09ianMgPSB0YWdzLm1hcCh0YWcgPT4gXG4gICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMudGFnQ2xpY2tlZCh0YWcpfVxuICAgICAgICAgICAgICAgICAgICBrZXk9e3RhZ31cbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmlzQ2FsaWJyYXRpbmd9PlxuICAgICAgICAgICAgICAgIHt0aGlzLnN0YXRlLnRhZ3NDYWxpYnJhdGVkW3RhZ10gPyBcIlJlc2V0XCIgOiBcIlRhZ1wifSAje3RhZ31cbiAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ0YWdzXCJcbiAgICAgICAgICAgICAgICAgc3R5bGU9e3tncmlkVGVtcGxhdGVDb2x1bW5zOiBcInJlcGVhdChcIiArIHRhZ3MubGVuZ3RoICsgXCIsIDFmcilcIn19PlxuICAgICAgICAgICAgICAgIHt0YWdPYmpzfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVuZGVySm9pbnRzKCkge1xuICAgICAgICBpZiAodGhpcy5zdGF0ZS5qb2ludHMubGVuZ3RoID09IDApIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgIGxldCBqb2ludENvbnRyb2xzID0gdGhpcy5zdGF0ZS5qb2ludHMubWFwKChqLCBpKSA9PiBcbiAgICAgICAgICAgIDxkaXYga2V5PXtpfSBjbGFzc05hbWU9XCJqb2ludC1jb250cm9scyBcIj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImpvaW50LW51bVwiPntpfTo8L2Rpdj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMubW92ZUpvaW50KGksIC0xNSl9Pi0xNcKwPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLm1vdmVKb2ludChpLCAtNSl9Pi01wrA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImpvaW50LWRlZ3JlZXNcIj57dGhpcy5yYWRpYW5Ub0RlZ3JlZXMoaikudG9GaXhlZCgyKX3CsDwvZGl2PlxuICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17KCkgPT4gdGhpcy5tb3ZlSm9pbnQoaSwgNSl9Pis1wrA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMubW92ZUpvaW50KGksIDE1KX0+KzE1wrA8L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiAoPGRpdj5cbiAgICAgICAgICAgIDxzcGFuPkpvaW50czwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAge2pvaW50Q29udHJvbHN9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICApO1xuICAgIH1cblxuICAgIG1vdmVKb2ludChqb2ludE51bTogbnVtYmVyLCBkZWdyZWVzOiBudW1iZXIpIHtcbiAgICAgICAgLy8gQWxsIGpvaW50IHZhbHVlcyBhcmUgc2VudCBvdXQgaW4gZGVncmVlc1xuICAgICAgICBsZXQgam9pbnRzID0gdGhpcy5zdGF0ZS5qb2ludHMubWFwKGogPT4gdGhpcy5yYWRpYW5Ub0RlZ3JlZXMoaikpO1xuICAgICAgICBqb2ludHNbam9pbnROdW1dICs9IGRlZ3JlZXM7XG4gICAgICAgIC8vIGpvaW50c1tqb2ludE51bV0gKz0gdGhpcy5kZWdyZWVzVG9SYWRpYW4oZGVncmVlcyk7XG4gICAgICAgIGxldCBjbWQgPSBuZXcgQ29tbWFuZFNldEpvaW50cyhqb2ludHMsIHRoaXMucm9ib3REYXRhKTtcbiAgICAgICAgdGhpcy5fbmV0d29ya09wZXJhdG9yLmVucXVldWVDb21tYW5kKGNtZCk7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKGpvaW50cyk7XG4gICAgfVxuXG4gICAgcmFkaWFuVG9EZWdyZWVzID0gKHJhZDogbnVtYmVyKSA9PiByYWQgKiAxODAgLyBNYXRoLlBJO1xuICAgIGRlZ3JlZXNUb1JhZGlhbiA9IChkZWc6IG51bWJlcikgPT4gZGVnICogTWF0aC5QSSAvIDE4MDtcblxuXG4gICAgc2VuZE9wID0gKG9wOiBzdHJpbmcpID0+IHRoaXMuX25ldHdvcmtPcGVyYXRvci5lbnF1ZXVlQ29tbWFuZChcbiAgICAgICAgbmV3IENvbW1hbmRCYXNlKG9wLCB0aGlzLnJvYm90RGF0YSlcbiAgICApO1xuXG4gICAgc2VuZE9wQ2xvc3VyZSA9IChvcDogc3RyaW5nKSA9PiAoKSA9PiB0aGlzLnNlbmRPcChvcCk7XG5cbiAgICByZW5kZXIoKSB7XG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlYnVnLW9wZXJhdG9yLWNvbnRhaW5lclwiPlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY2FtZXJhLXZpZXdcIj5cbiAgICAgICAgICAgICAgICAgICAgPGltZyB3aWR0aD1cIjg1NFwiIGhlaWdodD1cIjQ4MFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgc3JjPXt0aGlzLnN0YXRlLmltYWdlRGF0YX0vPlxuICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiZGVidWctY29tbWFuZC1jb250YWluZXJcIiBvbkNvbnRleHRNZW51PXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWFuZC1pbnB1dFwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1hbmQtaW5wdXQtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+Q29tbWFuZCBuYW1lPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFN0YXRlKHtjb21tYW5kTmFtZUlucHV0OmUudGFyZ2V0LnZhbHVlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmNvbW1hbmROYW1lSW5wdXR9Lz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29tbWFuZC1pbnB1dC1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Db21tYW5kIE9QPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuY29tbWFuZE9wSW5wdXR9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0U3RhdGUoe2NvbW1hbmRPcElucHV0OmUudGFyZ2V0LnZhbHVlfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIHN0eWxlPXt7bWFyZ2luVG9wOjEwfX0gb25DbGljaz17KCkgPT4gdGhpcy5hZGRDb21tYW5kKCl9PkFkZCBjb21tYW5kPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1hbmQtaXRlbS1jb250YWluZXJcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge3RoaXMuc3RhdGUuY29tbWFuZExpc3QubWFwKGNvbW1hbmQgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ9e2NvbW1hbmQubmFtZX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lPVwiY29tbWFuZC1pdGVtXCIgb25DbGljaz17KCkgPT4gXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5fbmV0d29ya09wZXJhdG9yLmVucXVldWVDb21tYW5kKHtvcDogY29tbWFuZC5vcCwgc291cmNlOiBDb21tYW5kU2V0dGluZ3MuZ2V0SW5zdGFuY2UoKS5zb3VyY2UgKyBcIiBcIisgdGhpcy5zdGF0ZS5hY2Nlc3NUb2tlbn0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPntjb21tYW5kLm5hbWV9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNvbW1hbmQtaXRlbS1pY29uXCIgb25DbGljaz17KGV2KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldi5zdG9wUHJvcGFnYXRpb24oKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yZW1vdmVDb21tYW5kKGNvbW1hbmQubmFtZSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxzdmcgd2lkdGg9ezEwfSBhcmlhLWhpZGRlbj1cInRydWVcIiBmb2N1c2FibGU9XCJmYWxzZVwiIGRhdGEtcHJlZml4PVwiZmFzXCIgZGF0YS1pY29uPVwieG1hcmtcIiByb2xlPVwiaW1nXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMzIwIDUxMlwiPjxwYXRoIGZpbGw9XCJjdXJyZW50Q29sb3JcIiBkPVwiTTMxMC42IDM2MS40YzEyLjUgMTIuNSAxMi41IDMyLjc1IDAgNDUuMjVDMzA0LjQgNDEyLjkgMjk2LjIgNDE2IDI4OCA0MTZzLTE2LjM4LTMuMTI1LTIyLjYyLTkuMzc1TDE2MCAzMDEuM0w1NC42MyA0MDYuNkM0OC4zOCA0MTIuOSA0MC4xOSA0MTYgMzIgNDE2UzE1LjYzIDQxMi45IDkuMzc1IDQwNi42Yy0xMi41LTEyLjUtMTIuNS0zMi43NSAwLTQ1LjI1bDEwNS40LTEwNS40TDkuMzc1IDE1MC42Yy0xMi41LTEyLjUtMTIuNS0zMi43NSAwLTQ1LjI1czMyLjc1LTEyLjUgNDUuMjUgMEwxNjAgMjEwLjhsMTA1LjQtMTA1LjRjMTIuNS0xMi41IDMyLjc1LTEyLjUgNDUuMjUgMHMxMi41IDMyLjc1IDAgNDUuMjVsLTEwNS40IDEwNS40TDMxMC42IDM2MS40elwiPjwvcGF0aD48L3N2Zz5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPVwiY29udHJvbHNcIj5cbiAgICAgICAgICAgICAgICB7Lyo8c3Bhbj5Db25uZWN0aW9uPC9zcGFuPiovfVxuICAgICAgICAgICAgICAgIHsvKjxkaXYgY2xhc3NOYW1lPVwiaW5wdXQtY29udGFpbmVyIGNvbm5lY3Rpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VXJsOjwvc3Bhbj5cbiAgICAgICAgICAgICAgICAgICAgPGlucHV0IG5hbWU9XCJ3c1VybFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS53c1VybH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uQ2hhbmdlPXsoZSkgPT4gdGhpcy5jb25uZWN0aW9uU2V0dGluZ0NoYW5nZWQoZSl9Lz5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+Um9ib3Q6PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8aW5wdXQgbmFtZT1cInJvYm90TmFtZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZT17dGhpcy5zdGF0ZS5yb2JvdE5hbWV9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLmNvbm5lY3Rpb25TZXR0aW5nQ2hhbmdlZChlKX0vPlxuICAgICAgICAgICAgICAgICAgICA8c3Bhbj5Ub2tlbjo8L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDxpbnB1dCBuYW1lPVwiYWNjZXNzVG9rZW5cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWU9e3RoaXMuc3RhdGUuYWNjZXNzVG9rZW59IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DaGFuZ2U9eyhlKSA9PiB0aGlzLmNvbm5lY3Rpb25TZXR0aW5nQ2hhbmdlZChlKX0vPlxuICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuZGlzY29ubmVjdCgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXshdGhpcy5zdGF0ZS5jb25uZWN0ZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgRGlzY29ubmVjdFxuICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmNvbm5lY3QoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17dGhpcy5zdGF0ZS5jb25uZWN0ZWR9PlxuICAgICAgICAgICAgICAgICAgICAgICAgQ29ubmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+Ki99XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJvcGVyYXRvci1idXR0b25zXCI+XG5cbiAgICAgICAgICAgICAgICAgICAge3RoaXMucmVuZGVySm9pbnRzKCl9XG5cbiAgICAgICAgICAgICAgICAgICAgPHNwYW4+VmFjdXVtPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lciB2YWN1dW1cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxidXR0b24gb25DbGljaz17dGhpcy5zZW5kT3BDbG9zdXJlKFwibWFudWFsX3ZhY3V1bV9vblwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNvbm5lY3RlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT25cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnNlbmRPcENsb3N1cmUoXCJtYW51YWxfdmFjdXVtX29mZlwiKX1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNvbm5lY3RlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT2ZmXG4gICAgICAgICAgICAgICAgICAgICAgICA8L2J1dHRvbj5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuPkNhbGlicmF0aW9uPC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImlucHV0LWNvbnRhaW5lciBjYWxpYnJhdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGRpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8YnV0dG9uIG9uQ2xpY2s9eygpID0+IHRoaXMuY2FsaWJyYXRpb25TdGFydCgpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNvbm5lY3RlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0IGNhbGlicmF0aW9uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXt0aGlzLnNlbmRPcENsb3N1cmUoXCJjYWxpYnJhdGlvbi90YWdfZGV0ZWN0aW9uXCIpfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNvbm5lY3RlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERldGVjdCB0YWdzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgICAgIHt0aGlzLnJlbmRlclRhZ0J1dHRvbnMoKX1cbiAgICAgICAgICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGJ1dHRvbiBvbkNsaWNrPXsoKSA9PiB0aGlzLmZpbmlzaENhbGlicmF0aW9uKCl9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17IXRoaXMuY2FuRmluaXNoQ2FsaWJyYXRpb24oKX0+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbmlzaCBjYWxpYnJhdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDwvYnV0dG9uPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImRlYnVnLW9wZXJhdG9yLWluZm8tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj57YEZQUzogJHt0aGlzLnN0YXRlLmZwcy50b0ZpeGVkKDIpfWB9PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4+e2BTdGF0ZTogJHt0aGlzLnN0YXRlLnN0YXRlX21hY2hpbmV9YH08L3NwYW4+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDxkaXY+XG4gICAgICAgICAgICAgICAgICAgIDxidXR0b24gY2xhc3NOYW1lPVwiYnRuLXNlbmQtaG9tZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb25DbGljaz17dGhpcy5zZW5kT3BDbG9zdXJlKFwiZ29faG9tZV9zYWZlbHlcIil9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9eyF0aGlzLnN0YXRlLmNvbm5lY3RlZH0+XG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5kIGhvbWVcbiAgICAgICAgICAgICAgICAgICAgPC9idXR0b24+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJkZXB0aC12aWV3XCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWcgd2lkdGg9XCIzMjBcIiBoZWlnaHQ9XCIxODBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz17dGhpcy5zdGF0ZS5kZXB0aERhdGF9Lz5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgKVxuICAgIH1cbn0iXSwibmFtZXMiOlsicm9vdCIsImZhY3RvcnkiLCJleHBvcnRzIiwibW9kdWxlIiwiZGVmaW5lIiwiYW1kIiwic2VsZiIsImJ5dGVMZW5ndGgiLCJiNjQiLCJsZW5zIiwiZ2V0TGVucyIsInZhbGlkTGVuIiwicGxhY2VIb2xkZXJzTGVuIiwidG9CeXRlQXJyYXkiLCJ0bXAiLCJpIiwiYXJyIiwiQXJyIiwiX2J5dGVMZW5ndGgiLCJjdXJCeXRlIiwibGVuIiwicmV2TG9va3VwIiwiY2hhckNvZGVBdCIsImZyb21CeXRlQXJyYXkiLCJ1aW50OCIsImxlbmd0aCIsImV4dHJhQnl0ZXMiLCJwYXJ0cyIsIm1heENodW5rTGVuZ3RoIiwibGVuMiIsInB1c2giLCJlbmNvZGVDaHVuayIsImxvb2t1cCIsImpvaW4iLCJVaW50OEFycmF5IiwiQXJyYXkiLCJjb2RlIiwiRXJyb3IiLCJpbmRleE9mIiwic3RhcnQiLCJlbmQiLCJudW0iLCJvdXRwdXQiLCJiYXNlNjQiLCJpZWVlNzU0IiwiY3VzdG9tSW5zcGVjdFN5bWJvbCIsIlN5bWJvbCIsIkJ1ZmZlciIsIktfTUFYX0xFTkdUSCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJidWYiLCJPYmplY3QiLCJzZXRQcm90b3R5cGVPZiIsInByb3RvdHlwZSIsImFyZyIsImVuY29kaW5nT3JPZmZzZXQiLCJUeXBlRXJyb3IiLCJhbGxvY1Vuc2FmZSIsImZyb20iLCJ2YWx1ZSIsInN0cmluZyIsImVuY29kaW5nIiwiaXNFbmNvZGluZyIsImFjdHVhbCIsIndyaXRlIiwic2xpY2UiLCJmcm9tU3RyaW5nIiwiQXJyYXlCdWZmZXIiLCJpc1ZpZXciLCJhcnJheVZpZXciLCJpc0luc3RhbmNlIiwiY29weSIsImZyb21BcnJheUJ1ZmZlciIsImJ1ZmZlciIsImJ5dGVPZmZzZXQiLCJmcm9tQXJyYXlMaWtlIiwiZnJvbUFycmF5VmlldyIsIlNoYXJlZEFycmF5QnVmZmVyIiwidmFsdWVPZiIsImIiLCJvYmoiLCJpc0J1ZmZlciIsImNoZWNrZWQiLCJ1bmRlZmluZWQiLCJudW1iZXJJc05hTiIsInR5cGUiLCJpc0FycmF5IiwiZGF0YSIsImZyb21PYmplY3QiLCJ0b1ByaW1pdGl2ZSIsImFzc2VydFNpemUiLCJzaXplIiwiYXJyYXkiLCJ0b1N0cmluZyIsIm11c3RNYXRjaCIsImFyZ3VtZW50cyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwidG9Mb3dlckNhc2UiLCJzbG93VG9TdHJpbmciLCJ0aGlzIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJuIiwibSIsImJpZGlyZWN0aW9uYWxJbmRleE9mIiwidmFsIiwiZGlyIiwiYXJyYXlJbmRleE9mIiwiY2FsbCIsImxhc3RJbmRleE9mIiwiaW5kZXhTaXplIiwiYXJyTGVuZ3RoIiwidmFsTGVuZ3RoIiwiU3RyaW5nIiwicmVhZCIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImoiLCJoZXhXcml0ZSIsIm9mZnNldCIsIk51bWJlciIsInJlbWFpbmluZyIsInN0ckxlbiIsInBhcnNlZCIsInBhcnNlSW50Iiwic3Vic3RyIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJzdHIiLCJieXRlQXJyYXkiLCJhc2NpaVRvQnl0ZXMiLCJiYXNlNjRXcml0ZSIsInVjczJXcml0ZSIsInVuaXRzIiwiYyIsImhpIiwibG8iLCJ1dGYxNmxlVG9CeXRlcyIsIk1hdGgiLCJtaW4iLCJyZXMiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwic2Vjb25kQnl0ZSIsInRoaXJkQnl0ZSIsImZvdXJ0aEJ5dGUiLCJ0ZW1wQ29kZVBvaW50IiwiY29kZVBvaW50cyIsIk1BWF9BUkdVTUVOVFNfTEVOR1RIIiwiZnJvbUNoYXJDb2RlIiwiYXBwbHkiLCJkZWNvZGVDb2RlUG9pbnRzQXJyYXkiLCJUWVBFRF9BUlJBWV9TVVBQT1JUIiwicHJvdG8iLCJmb28iLCJlIiwidHlwZWRBcnJheVN1cHBvcnQiLCJjb25zb2xlIiwiZXJyb3IiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJwb29sU2l6ZSIsImFsbG9jIiwiZmlsbCIsImFsbG9jVW5zYWZlU2xvdyIsIl9pc0J1ZmZlciIsImNvbXBhcmUiLCJhIiwieCIsInkiLCJjb25jYXQiLCJsaXN0IiwicG9zIiwic2V0Iiwic3dhcDE2Iiwic3dhcDMyIiwic3dhcDY0IiwidG9Mb2NhbGVTdHJpbmciLCJlcXVhbHMiLCJpbnNwZWN0IiwibWF4IiwicmVwbGFjZSIsInRyaW0iLCJ0YXJnZXQiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJpc0Zpbml0ZSIsInRvSlNPTiIsIl9hcnIiLCJyZXQiLCJvdXQiLCJoZXhTbGljZUxvb2t1cFRhYmxlIiwiYnl0ZXMiLCJjaGVja09mZnNldCIsImV4dCIsImNoZWNrSW50Iiwid3J0QmlnVUludDY0TEUiLCJjaGVja0ludEJJIiwiQmlnSW50Iiwid3J0QmlnVUludDY0QkUiLCJjaGVja0lFRUU3NTQiLCJ3cml0ZUZsb2F0IiwibGl0dGxlRW5kaWFuIiwibm9Bc3NlcnQiLCJ3cml0ZURvdWJsZSIsIm5ld0J1ZiIsInN1YmFycmF5IiwicmVhZFVpbnRMRSIsInJlYWRVSW50TEUiLCJtdWwiLCJyZWFkVWludEJFIiwicmVhZFVJbnRCRSIsInJlYWRVaW50OCIsInJlYWRVSW50OCIsInJlYWRVaW50MTZMRSIsInJlYWRVSW50MTZMRSIsInJlYWRVaW50MTZCRSIsInJlYWRVaW50MzJMRSIsInJlYWRVSW50MzJMRSIsInJlYWRVaW50MzJCRSIsInJlYWRVSW50MzJCRSIsInJlYWRCaWdVSW50NjRMRSIsImRlZmluZUJpZ0ludE1ldGhvZCIsInZhbGlkYXRlTnVtYmVyIiwiZmlyc3QiLCJsYXN0IiwiYm91bmRzRXJyb3IiLCJyZWFkQmlnVUludDY0QkUiLCJyZWFkSW50TEUiLCJwb3ciLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEJpZ0ludDY0TEUiLCJyZWFkQmlnSW50NjRCRSIsInJlYWRGbG9hdExFIiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVpbnRMRSIsIndyaXRlVUludExFIiwid3JpdGVVaW50QkUiLCJ3cml0ZVVJbnRCRSIsIndyaXRlVWludDgiLCJ3cml0ZVVJbnQ4Iiwid3JpdGVVaW50MTZMRSIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVpbnQxNkJFIiwid3JpdGVVSW50MTZCRSIsIndyaXRlVWludDMyTEUiLCJ3cml0ZVVJbnQzMkxFIiwid3JpdGVVaW50MzJCRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUJpZ1VJbnQ2NExFIiwid3JpdGVCaWdVSW50NjRCRSIsIndyaXRlSW50TEUiLCJsaW1pdCIsInN1YiIsIndyaXRlSW50QkUiLCJ3cml0ZUludDgiLCJ3cml0ZUludDE2TEUiLCJ3cml0ZUludDE2QkUiLCJ3cml0ZUludDMyTEUiLCJ3cml0ZUludDMyQkUiLCJ3cml0ZUJpZ0ludDY0TEUiLCJ3cml0ZUJpZ0ludDY0QkUiLCJ3cml0ZUZsb2F0TEUiLCJ3cml0ZUZsb2F0QkUiLCJ3cml0ZURvdWJsZUxFIiwid3JpdGVEb3VibGVCRSIsInRhcmdldFN0YXJ0IiwiY29weVdpdGhpbiIsImVycm9ycyIsIkUiLCJzeW0iLCJnZXRNZXNzYWdlIiwiQmFzZSIsImNvbnN0cnVjdG9yIiwic3VwZXIiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsIm5hbWUiLCJzdGFjayIsIm1lc3NhZ2UiLCJhZGROdW1lcmljYWxTZXBhcmF0b3IiLCJyYW5nZSIsIkVSUl9PVVRfT0ZfUkFOR0UiLCJjaGVja0JvdW5kcyIsIkVSUl9JTlZBTElEX0FSR19UWVBFIiwiZmxvb3IiLCJFUlJfQlVGRkVSX09VVF9PRl9CT1VORFMiLCJpbnB1dCIsIm1zZyIsInJlY2VpdmVkIiwiaXNJbnRlZ2VyIiwiYWJzIiwiSU5WQUxJRF9CQVNFNjRfUkUiLCJJbmZpbml0eSIsImxlYWRTdXJyb2dhdGUiLCJzcGxpdCIsImJhc2U2NGNsZWFuIiwic3JjIiwiZHN0IiwiYWxwaGFiZXQiLCJ0YWJsZSIsImkxNiIsImZuIiwiQnVmZmVyQmlnSW50Tm90RGVmaW5lZCIsImNhbnZhcyIsInBhcmVudCIsInNjYWxlIiwiaXNTVkciLCJub2RlTmFtZSIsInRvVXBwZXJDYXNlIiwic3R5bGUiLCJwb3NpdGlvbiIsInRvcCIsImxlZnQiLCJyZXNpemUiLCJwYXJzZUZsb2F0IiwicCIsInBhcmVudE5vZGUiLCJkaW1zIiwic2NyYXRjaCIsIndpZHRoIiwiaGVpZ2h0IiwiZG9jdW1lbnQiLCJib2R5IiwicHNpemUiLCJ3aW5kb3ciLCJpbm5lcldpZHRoIiwiaW5uZXJIZWlnaHQiLCJzZXRBdHRyaWJ1dGUiLCJGbG9hdDMyQXJyYXkiLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsImlkIiwiY3NzV2l0aE1hcHBpbmdUb1N0cmluZyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwibmVlZExheWVyIiwibW9kdWxlcyIsIm1lZGlhIiwiZGVkdXBlIiwic3VwcG9ydHMiLCJsYXllciIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJrIiwiX2siLCJjc3NNYXBwaW5nIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsInNvdXJjZU1hcHBpbmciLCJzb3VyY2VVUkxzIiwic291cmNlcyIsInNvdXJjZSIsInNvdXJjZVJvb3QiLCJwYXJzZSIsInByb3AiLCJlbGVtZW50IiwidGVtcG9yYXJ5IiwiYXBwZW5kQ2hpbGQiLCJib3VuZHMiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJzdHlsZXMiLCJnZXRDb21wdXRlZFN0eWxlIiwiZ2V0UHJvcGVydHlWYWx1ZSIsInJlbW92ZUNoaWxkIiwidXRmOCIsImNoYXJBcnJheSIsIm9wdGlvbnMiLCJkYXRhSXNHaXZlbiIsIl9sYXN0V3JpdHRlbkJ5dGUiLCJkdk9mZnNldCIsIl9kYXRhIiwiRGF0YVZpZXciLCJfbWFyayIsIl9tYXJrcyIsImF2YWlsYWJsZSIsImlzTGl0dGxlRW5kaWFuIiwic2V0TGl0dGxlRW5kaWFuIiwiaXNCaWdFbmRpYW4iLCJzZXRCaWdFbmRpYW4iLCJza2lwIiwic2VlayIsIm1hcmsiLCJyZXNldCIsInB1c2hNYXJrIiwicG9wTWFyayIsInBvcCIsInJld2luZCIsImVuc3VyZUF2YWlsYWJsZSIsIm5ld0xlbmd0aCIsIm5ld0FycmF5IiwicmVhZEJvb2xlYW4iLCJnZXRJbnQ4IiwiZ2V0VWludDgiLCJyZWFkQnl0ZSIsInJlYWRCeXRlcyIsInJlYWRJbnQxNiIsImdldEludDE2IiwicmVhZFVpbnQxNiIsImdldFVpbnQxNiIsInJlYWRJbnQzMiIsImdldEludDMyIiwicmVhZFVpbnQzMiIsImdldFVpbnQzMiIsInJlYWRGbG9hdDMyIiwiZ2V0RmxvYXQzMiIsInJlYWRGbG9hdDY0IiwiZ2V0RmxvYXQ2NCIsInJlYWRDaGFyIiwicmVhZENoYXJzIiwicmVhZFV0ZjgiLCJiU3RyaW5nIiwiZGVjb2RlIiwid3JpdGVCb29sZWFuIiwic2V0SW50OCIsIl91cGRhdGVMYXN0V3JpdHRlbkJ5dGUiLCJzZXRVaW50OCIsIndyaXRlQnl0ZSIsIndyaXRlQnl0ZXMiLCJ3cml0ZUludDE2Iiwic2V0SW50MTYiLCJ3cml0ZVVpbnQxNiIsInNldFVpbnQxNiIsIndyaXRlSW50MzIiLCJzZXRJbnQzMiIsIndyaXRlVWludDMyIiwic2V0VWludDMyIiwid3JpdGVGbG9hdDMyIiwic2V0RmxvYXQzMiIsIndyaXRlRmxvYXQ2NCIsInNldEZsb2F0NjQiLCJ3cml0ZUNoYXIiLCJ3cml0ZUNoYXJzIiwid3JpdGVVdGY4IiwiZW5jb2RlIiwidG9BcnJheSIsImdldEJ1ZmZlciIsIkJJVE1BUFY1SEVBREVSIiwiTG9naWNhbENvbG9yU3BhY2UiLCJMQ1NfQ0FMSUJSQVRFRF9SR0IiLCJMQ1Nfc1JHQiIsIkxDU19XSU5ET1dTX0NPTE9SX1NQQUNFIiwiQ29tcHJlc3Npb24iLCJCSV9SR0IiLCJCSV9STEU4IiwiQklfUkxFNCIsIkJJX0JJVEZJRUxEUyIsIkJJX0pQRUciLCJCSV9QTkciLCJCSV9DTVlLIiwiQklfQ01ZS1JMRTgiLCJCSV9DTVlLUkxFNCIsIkdhbXV0TWFwcGluZ0ludGVudCIsIkxDU19HTV9BQlNfQ09MT1JJTUVUUklDIiwiTENTX0dNX0JVU0lORVNTIiwiTENTX0dNX0dSQVBISUNTIiwiTENTX0dNX0lNQUdFUyIsIklPQnVmZmVyIiwiY29uc3RhbnRzIiwidGFibGVMZWZ0IiwiaW1hZ2VEYXRhIiwiYml0RGVwdGgiLCJjb21wb25lbnRzIiwiY2hhbm5lbHMiLCJpbyIsImltZ0RhdGEiLCJ3cml0ZUJpdG1hcFY1SGVhZGVyIiwid3JpdGVDb2xvclRhYmxlIiwiaW1hZ2VPZmZzZXQiLCJyb3dTaXplIiwiZGF0YVJvd1NpemUiLCJjZWlsIiwic2tpcFNpemUiLCJiaXRPdmVyZmxvdyIsImJpdFNraXAiLCJ0b3RhbEJ5dGVzIiwiYnl0ZUEiLCJieXRlQiIsImlvRGF0YSIsInJlbE9mZnNldCIsImlPZmZzZXQiLCJsYXN0Um93IiwibGFzdENvbCIsIndyaXRlUGl4ZWxBcnJheSIsIndyaXRlQml0bWFwRmlsZUhlYWRlciIsIlRJRkZEZWNvZGVyIiwidGFncyIsInN0YW5kYXJkIiwiZXhpZiIsImdwcyIsImtpbmQiLCJmaWVsZHMiLCJNYXAiLCJfbWFwIiwidGFnIiwidGFnc0J5TmFtZSIsInRhZ2xpc3QiLCJ0YWdzQnlJZCIsImtleSIsImtleXMiLCJ0eXBlcyIsImRlY29kZXIiLCJjb3VudCIsInN0cmluZ3MiLCJjdXJyZW50U3RyaW5nIiwiY2hhciIsIlVpbnQxNkFycmF5IiwiVWludDMyQXJyYXkiLCJyYXRpb25hbHMiLCJJbnQ4QXJyYXkiLCJJbnQxNkFycmF5IiwiSW50MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsImdldEJ5dGVMZW5ndGgiLCJyZWFkRGF0YSIsIklGRCIsIlRpZmZJRkQiLCJJRkRWYWx1ZSIsImRlZmF1bHRPcHRpb25zIiwiaWdub3JlSW1hZ2VEYXRhIiwib25seUZpcnN0IiwiZmlsbDhiaXQiLCJkYXRhVG8iLCJkYXRhRnJvbSIsImluZGV4IiwiZmlsbDE2Yml0IiwiZmlsbEZsb2F0MzIiLCJ1bnN1cHBvcnRlZCIsIl9uZXh0SUZEIiwiYXNzaWduIiwicmVzdWx0IiwiZGVjb2RlSGVhZGVyIiwiZGVjb2RlSUZEIiwiaWZkIiwibnVtRW50cmllcyIsImRlY29kZUlGREVudHJ5IiwiZGVjb2RlSW1hZ2VEYXRhIiwibnVtVmFsdWVzIiwiY3VycmVudE9mZnNldCIsIm9yaWVudGF0aW9uIiwicmVhZFN0cmlwRGF0YSIsImJpdERlcHRoQXJyYXkiLCJ2YWxpZGF0ZUJpdERlcHRoIiwiYml0c1BlclNhbXBsZSIsInNhbXBsZUZvcm1hdCIsImdldERhdGFBcnJheSIsImNvbXByZXNzaW9uIiwibWF4UGl4ZWxzIiwicm93c1BlclN0cmlwIiwic3RyaXBPZmZzZXRzIiwic3RyaXBCeXRlQ291bnRzIiwicGl4ZWwiLCJzdHJpcERhdGEiLCJnZXRTdHJpcERhdGEiLCJieXRlQ291bnRzIiwiSWZkIiwiZGF0ZVRpbWVSZWdleCIsImFsd2F5c0FycmF5IiwiaW1hZ2VXaWR0aCIsImltYWdlTGVuZ3RoIiwic2FtcGxlc1BlclBpeGVsIiwiZGF0ZSIsIkRhdGUiLCJleGVjIiwiZGF0ZVRpbWUiLCJzZXRGdWxsWWVhciIsInNldEhvdXJzIiwibmV3U3ViZmlsZVR5cGUiLCJmaWxsT3JkZXIiLCJkb2N1bWVudE5hbWUiLCJpbWFnZURlc2NyaXB0aW9uIiwibWluU2FtcGxlVmFsdWUiLCJtYXhTYW1wbGVWYWx1ZSIsInhSZXNvbHV0aW9uIiwieVJlc29sdXRpb24iLCJwbGFuYXJDb25maWd1cmF0aW9uIiwicmVzb2x1dGlvblVuaXQiLCJwcmVkaWN0b3IiLCJzTWluU2FtcGxlVmFsdWUiLCJzTWF4U2FtcGxlVmFsdWUiLCJ0aWZmIiwiaGVhZGVyIiwiSXRlbSIsInByZXYiLCJuZXh0IiwiRmFzdExpc3QiLCJfaGVhZCIsIl90YWlsIiwidCIsInVuc2hpZnQiLCJzaGlmdCIsImgiLCJkcm9wIiwiZm9yRWFjaCIsInRoaXNwIiwidiIsIm1lIiwiZmlsdGVyIiwicmVkdWNlIiwic2NvcGUiLCJGYXN0VGV4dEVuY29kZXIiLCJ1dGZMYWJlbCIsIkZhc3RUZXh0RGVjb2RlciIsImZhdGFsIiwic3RyZWFtIiwiYXQiLCJ0bGVuIiwiZXh0cmEiLCJ1cGRhdGUiLCJieXRlMSIsImJ5dGUyIiwiYnl0ZTMiLCJjb2RlcG9pbnQiLCJGRlQiLCJfY3NpemUiLCJhbmdsZSIsIlBJIiwiY29zIiwic2luIiwicG93ZXIiLCJfd2lkdGgiLCJfYml0cmV2IiwicmV2U2hpZnQiLCJfb3V0IiwiX2ludiIsImZyb21Db21wbGV4QXJyYXkiLCJjb21wbGV4Iiwic3RvcmFnZSIsImNyZWF0ZUNvbXBsZXhBcnJheSIsInRvQ29tcGxleEFycmF5IiwiY29tcGxldGVTcGVjdHJ1bSIsInNwZWN0cnVtIiwiaGFsZiIsInRyYW5zZm9ybSIsIl90cmFuc2Zvcm00IiwicmVhbFRyYW5zZm9ybSIsIl9yZWFsVHJhbnNmb3JtNCIsImludmVyc2VUcmFuc2Zvcm0iLCJvdXRPZmYiLCJzdGVwIiwiYml0cmV2Iiwib2ZmIiwiX3NpbmdsZVRyYW5zZm9ybTIiLCJfc2luZ2xlVHJhbnNmb3JtNCIsImludiIsInF1YXJ0ZXJMZW4iLCJBIiwiQiIsIkMiLCJEIiwiQXIiLCJBaSIsIkJyIiwiQmkiLCJDciIsIkNpIiwiRHIiLCJEaSIsIk1BciIsIk1BaSIsInRhYmxlQnIiLCJ0YWJsZUJpIiwiTUJyIiwiTUJpIiwidGFibGVDciIsInRhYmxlQ2kiLCJNQ3IiLCJNQ2kiLCJ0YWJsZURyIiwidGFibGVEaSIsIk1EciIsIk1EaSIsIlQwciIsIlQwaSIsIlQxciIsIlQxaSIsIlQyciIsIlQyaSIsIlQzciIsIlQzaSIsIkZBciIsIkZBaSIsIkZDciIsIkZDaSIsIkZCciIsIkZCaSIsIkZEciIsIkZEaSIsImV2ZW5SIiwiZXZlbkkiLCJvZGRSIiwib2RkSSIsImxlZnRSIiwibGVmdEkiLCJyaWdodFIiLCJyaWdodEkiLCJzdGVwMiIsInN0ZXAzIiwiX3NpbmdsZVJlYWxUcmFuc2Zvcm0yIiwiX3NpbmdsZVJlYWxUcmFuc2Zvcm00IiwiaGFsZkxlbiIsImhxdWFydGVyTGVuIiwiU0ZBciIsIlNGQWkiLCJTRkJyIiwiU0ZCaSIsIlNBIiwiU0IiLCJ0b0J5dGVzIiwicyIsInhwaVppcEZpbGVuYW1lIiwib3htbENvbnRlbnRUeXBlcyIsIm94bWxSZWxzIiwicmVhZFVJbnQ2NExFIiwiZmlsZVR5cGUiLCJjaGVjayIsIm1hc2siLCJjaGVja1N0cmluZyIsIm1pbWUiLCJmaW5kTmV4dFppcEhlYWRlckluZGV4Iiwic3RhcnRBdCIsImZpbmRJbmRleCIsImVsIiwiemlwSGVhZGVySW5kZXgiLCJveG1sRm91bmQiLCJzbGljZWQiLCJpZFBvcyIsImRvY1R5cGVQb3MiLCJmaW5kRG9jVHlwZSIsImV2ZXJ5Iiwib2JqZWN0U2l6ZSIsInJlYWRhYmxlU3RyZWFtIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJldmFsIiwib25jZSIsInBhc3MiLCJQYXNzVGhyb3VnaCIsImNodW5rIiwibWluaW11bUJ5dGVzIiwicGlwZWxpbmUiLCJwaXBlIiwiaGFzT3duUHJvcGVydHkiLCJ2ZXJzaW9uIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJkIiwiTmFOIiwicnQiLCJpc05hTiIsImxvZyIsIkxOMiIsImltYWdlRXh0cyIsIlNldCIsImltYWdlVHlwZSIsImhhcyIsIl9pbmNyZW1lbnQiLCJuZXdJbmNyZW1lbnQiLCJib29sIiwiaXNBbnlBcnJheSIsIm9iamVjdCIsImVuZHNXaXRoIiwiSnBlZ0ltYWdlIiwiZGN0WmlnWmFnIiwiZGN0Q29zMSIsImRjdFNpbjEiLCJkY3RDb3MzIiwiZGN0U2luMyIsImRjdENvczYiLCJkY3RTaW42IiwiZGN0U3FydDIiLCJkY3RTcXJ0MWQyIiwiYnVpbGRIdWZmbWFuVGFibGUiLCJjb2RlTGVuZ3RocyIsInZhbHVlcyIsImNoaWxkcmVuIiwicSIsImRlY29kZVNjYW4iLCJmcmFtZSIsInJlc2V0SW50ZXJ2YWwiLCJzcGVjdHJhbFN0YXJ0Iiwic3BlY3RyYWxFbmQiLCJzdWNjZXNzaXZlUHJldiIsInN1Y2Nlc3NpdmUiLCJvcHRzIiwicHJlY2lzaW9uIiwic2FtcGxlc1BlckxpbmUiLCJzY2FuTGluZXMiLCJtY3VzUGVyTGluZSIsInByb2dyZXNzaXZlIiwic3RhcnRPZmZzZXQiLCJtYXhIIiwibWF4ViIsImJpdHNEYXRhIiwiYml0c0NvdW50IiwicmVhZEJpdCIsIm5leHRCeXRlIiwiZGVjb2RlSHVmZm1hbiIsInRyZWUiLCJiaXQiLCJub2RlIiwicmVjZWl2ZSIsInJlY2VpdmVBbmRFeHRlbmQiLCJzdWNjZXNzaXZlQUNOZXh0VmFsdWUiLCJlb2JydW4iLCJzdWNjZXNzaXZlQUNTdGF0ZSIsImRlY29kZU1jdSIsImNvbXBvbmVudCIsIm1jdSIsInJvdyIsImNvbCIsIm1jdUNvbCIsImJsb2NrUm93IiwiYmxvY2tDb2wiLCJibG9ja3MiLCJ0b2xlcmFudERlY29kaW5nIiwiZGVjb2RlQmxvY2siLCJibG9ja3NQZXJMaW5lIiwiZGVjb2RlRm4iLCJjb21wb25lbnRzTGVuZ3RoIiwienoiLCJodWZmbWFuVGFibGVEQyIsImRpZmYiLCJwcmVkIiwicnMiLCJodWZmbWFuVGFibGVBQyIsInIiLCJ6IiwiZGlyZWN0aW9uIiwibWFya2VyIiwibWN1RXhwZWN0ZWQiLCJibG9ja3NQZXJDb2x1bW4iLCJtY3VzUGVyQ29sdW1uIiwiYnVpbGRDb21wb25lbnREYXRhIiwibGluZXMiLCJSIiwicXVhbnRpemVBbmRJbnZlcnNlIiwiZGF0YU91dCIsImRhdGFJbiIsInYwIiwidjEiLCJ2MiIsInYzIiwidjQiLCJ2NSIsInY2IiwidjciLCJxdCIsInF1YW50aXphdGlvblRhYmxlIiwic2FtcGxlIiwicmVxdWVzdE1lbW9yeUFsbG9jYXRpb24iLCJzY2FuTGluZSIsImxpbmUiLCJjbGFtcFRvOGJpdCIsImxvYWQiLCJwYXRoIiwieGhyIiwiWE1MSHR0cFJlcXVlc3QiLCJvcGVuIiwicmVzcG9uc2VUeXBlIiwib25sb2FkIiwicmVzcG9uc2UiLCJtb3pSZXNwb25zZUFycmF5QnVmZmVyIiwiYmluZCIsInNlbmQiLCJtYXhSZXNvbHV0aW9uSW5QaXhlbHMiLCJtYXhSZXNvbHV0aW9uSW5NUCIsInByZXBhcmVDb21wb25lbnRzIiwiY29tcG9uZW50SWQiLCJibG9ja3NQZXJMaW5lRm9yTWN1IiwiYmxvY2tzUGVyQ29sdW1uRm9yTWN1IiwiamZpZiIsImFkb2JlIiwicXVhbnRpemF0aW9uVGFibGVzIiwiZnJhbWVzIiwiaHVmZm1hblRhYmxlc0FDIiwiaHVmZm1hblRhYmxlc0RDIiwiZmlsZU1hcmtlciIsIm1hbGZvcm1lZERhdGFPZmZzZXQiLCJjb21tZW50cyIsImFwcERhdGEiLCJjb21tZW50IiwibWFqb3IiLCJtaW5vciIsImRlbnNpdHlVbml0cyIsInhEZW5zaXR5IiwieURlbnNpdHkiLCJ0aHVtYldpZHRoIiwidGh1bWJIZWlnaHQiLCJ0aHVtYkRhdGEiLCJleGlmQnVmZmVyIiwiZmxhZ3MwIiwiZmxhZ3MxIiwidHJhbnNmb3JtQ29kZSIsInF1YW50aXphdGlvblRhYmxlc0VuZCIsInF1YW50aXphdGlvblRhYmxlU3BlYyIsInRhYmxlRGF0YSIsImV4dGVuZGVkIiwiY29tcG9uZW50c09yZGVyIiwicGl4ZWxzSW5GcmFtZSIsImV4Y2VlZGVkQW1vdW50IiwiY29tcG9uZW50c0NvdW50IiwicUlkIiwicXVhbnRpemF0aW9uSWR4IiwiaHVmZm1hbkxlbmd0aCIsImh1ZmZtYW5UYWJsZVNwZWMiLCJjb2RlTGVuZ3RoU3VtIiwiaHVmZm1hblZhbHVlcyIsInNlbGVjdG9yc0NvdW50IiwidGFibGVTcGVjIiwic3VjY2Vzc2l2ZUFwcHJveGltYXRpb24iLCJwcm9jZXNzZWQiLCJuZXh0T2Zmc2V0IiwiY3AiLCJzY2FsZVgiLCJzY2FsZVkiLCJnZXREYXRhIiwiY29tcG9uZW50MSIsImNvbXBvbmVudDIiLCJjb21wb25lbnQzIiwiY29tcG9uZW50NCIsImNvbXBvbmVudDFMaW5lIiwiY29tcG9uZW50MkxpbmUiLCJjb21wb25lbnQzTGluZSIsImNvbXBvbmVudDRMaW5lIiwiWSIsIkNiIiwiSyIsIk0iLCJZZSIsIkciLCJjb2xvclRyYW5zZm9ybSIsImRhdGFMZW5ndGgiLCJjb3B5VG9JbWFnZURhdGEiLCJmb3JtYXRBc1JHQkEiLCJpbWFnZURhdGFBcnJheSIsInRvdGFsQnl0ZXNBbGxvY2F0ZWQiLCJtYXhNZW1vcnlVc2FnZUJ5dGVzIiwiaW5jcmVhc2VBbW91bnQiLCJ0b3RhbE1lbW9yeUltcGFjdEJ5dGVzIiwicmVzZXRNYXhNZW1vcnlVc2FnZSIsIm1heE1lbW9yeVVzYWdlQnl0ZXNfIiwiZ2V0Qnl0ZXNBbGxvY2F0ZWQiLCJqcGVnRGF0YSIsInVzZXJPcHRzIiwidXNlVEFycmF5IiwibWF4TWVtb3J5VXNhZ2VJbk1CIiwiYnl0ZXNOZWVkZWQiLCJpbWFnZSIsImVyciIsIkpQRUdFbmNvZGVyIiwicXVhbGl0eSIsInJvdW5kIiwiWURDX0hUIiwiVVZEQ19IVCIsIllBQ19IVCIsIlVWQUNfSFQiLCJjdXJyZW50UXVhbGl0eSIsImZmbG9vciIsIllUYWJsZSIsIlVWVGFibGUiLCJmZHRibF9ZIiwiZmR0YmxfVVYiLCJiaXRjb2RlIiwiY2F0ZWdvcnkiLCJvdXRwdXRmRENUUXVhbnQiLCJEVSIsImJ5dGVvdXQiLCJieXRlbmV3IiwiYnl0ZXBvcyIsIllEVSIsIlVEVSIsIlZEVSIsImNsdCIsIlJHQl9ZVVZfVEFCTEUiLCJaaWdaYWciLCJzdGRfZGNfbHVtaW5hbmNlX25yY29kZXMiLCJzdGRfZGNfbHVtaW5hbmNlX3ZhbHVlcyIsInN0ZF9hY19sdW1pbmFuY2VfbnJjb2RlcyIsInN0ZF9hY19sdW1pbmFuY2VfdmFsdWVzIiwic3RkX2RjX2Nocm9taW5hbmNlX25yY29kZXMiLCJzdGRfZGNfY2hyb21pbmFuY2VfdmFsdWVzIiwic3RkX2FjX2Nocm9taW5hbmNlX25yY29kZXMiLCJzdGRfYWNfY2hyb21pbmFuY2VfdmFsdWVzIiwiY29tcHV0ZUh1ZmZtYW5UYmwiLCJucmNvZGVzIiwic3RkX3RhYmxlIiwiY29kZXZhbHVlIiwicG9zX2luX3RhYmxlIiwiSFQiLCJ3cml0ZUJpdHMiLCJicyIsInBvc3ZhbCIsIndyaXRlV29yZCIsInByb2Nlc3NEVSIsIkNEVSIsImZkdGJsIiwiREMiLCJIVERDIiwiSFRBQyIsIkVPQiIsIk0xNnplcm9lcyIsIkRVX0RDVCIsImQwIiwiZDEiLCJkMiIsImQzIiwiZDQiLCJkNSIsImQ2IiwiZDciLCJmRENUUXVhbnQiLCJkYXRhT2ZmIiwidG1wMCIsInRtcDciLCJ0bXAxIiwidG1wNiIsInRtcDIiLCJ0bXA1IiwidG1wMyIsInRtcDQiLCJ0bXAxMCIsInRtcDEzIiwidG1wMTEiLCJ0bXAxMiIsInoxIiwiejUiLCJ6MiIsIno0IiwiejMiLCJ6MTEiLCJ6MTMiLCJ0bXAwcDIiLCJ0bXA3cDIiLCJ0bXAxcDIiLCJ0bXA2cDIiLCJ0bXAycDIiLCJ0bXA1cDIiLCJ0bXAzcDIiLCJ0bXA0cDIiLCJ0bXAxMHAyIiwidG1wMTNwMiIsInRtcDExcDIiLCJ0bXAxMnAyIiwiejFwMiIsIno1cDIiLCJ6MnAyIiwiejRwMiIsInozcDIiLCJ6MTFwMiIsInoxM3AyIiwiRGlmZiIsImVuZDBwb3MiLCJsbmciLCJzdGFydHBvcyIsIm5yemVyb2VzIiwibnJtYXJrZXIiLCJzZXRRdWFsaXR5Iiwic2YiLCJZUVQiLCJVVlFUIiwidSIsImFhc2YiLCJpbml0UXVhbnRUYWJsZXMiLCJnZXRUaW1lIiwid3JpdGVBUFAxIiwid3JpdGVEUVQiLCJ3cml0ZVNPRjAiLCJsIiwibyIsIndyaXRlREhUIiwiRENZIiwiRENVIiwiRENWIiwiZGlzcGxheU5hbWUiLCJnIiwicXVhZFdpZHRoIiwiZmlsbGJpdHMiLCJzZmNjIiwiaW5pdENoYXJMb29rdXBUYWJsZSIsIm5ybG93ZXIiLCJucnVwcGVyIiwiY2F0IiwibnIiLCJucm5lZyIsImluaXRDYXRlZ29yeU51bWJlciIsImluaXRSR0JZVVZUYWJsZSIsInF1IiwiZiIsIl9kZXJlcV8iLCJBYnN0cmFjdFByaW9yaXR5UXVldWUiLCJBcnJheVN0cmF0ZWd5IiwiQkhlYXBTdHJhdGVneSIsIkJpbmFyeUhlYXBTdHJhdGVneSIsIlByaW9yaXR5UXVldWUiLCJoYXNQcm9wIiwic3VwZXJDbGFzcyIsInN0cmF0ZWd5IiwiY29tcGFyYXRvciIsIl9fc3VwZXJfXyIsImNoaWxkIiwiY3RvciIsImV4dGVuZCIsInJlZiIsInByaXYiLCJpbml0aWFsVmFsdWVzIiwicXVldWUiLCJkZXF1ZXVlIiwicGVlayIsImNsZWFyIiwiYmluYXJ5U2VhcmNoRm9ySW5kZXhSZXZlcnNlZCIsImhpZ2giLCJsb3ciLCJtaWQiLCJzb3J0IiwicmV2ZXJzZSIsInNwbGljZSIsInJlZjEiLCJwYWdlU2l6ZSIsIl9zaGlmdCIsIl9lbXB0eU1lbW9yeVBhZ2VUZW1wbGF0ZSIsIl9tZW1vcnkiLCJfbWFzayIsIl93cml0ZSIsIl9idWJibGVVcCIsIl9yZWFkIiwiX2J1YmJsZURvd24iLCJwYWdlIiwiaW5kZXhJblBhZ2UiLCJwYXJlbnRJbmRleCIsInBhcmVudFZhbHVlIiwiY2hpbGRJbmRleDEiLCJjaGlsZEluZGV4MiIsImNoaWxkVmFsdWUxIiwiY2hpbGRWYWx1ZTIiLCJfaGVhcGlmeSIsIm1pbkluZGV4IiwicmlnaHQiLCJpc1N0cmluZyIsImlzRmluaXRlSW1wbCIsImlzTnVtYmVyIiwiaWRlbnRpdHkiLCJjb21wYXJlQXJyYXkiLCJhcnJheTEiLCJhcnJheTIiLCJwcm9wZXJ0aWVzIiwibXVsU2FmZSIsImRlY2ltYWxzIiwiZ2V0RnJhY3Rpb25hbCIsImRpdlNhZmUiLCJkZW4iLCJmYWN0b3IiLCJRdHlFcnJvciIsImNyZWF0ZSIsInRocm93SW5jb21wYXRpYmxlVW5pdHMiLCJVTklUUyIsIkJBU0VfVU5JVFMiLCJVTklUWSIsIlVOSVRZX0FSUkFZIiwidmFsaWRhdGVVbml0RGVmaW5pdGlvbiIsInVuaXREZWYiLCJkZWZpbml0aW9uIiwic2NhbGFyIiwibnVtZXJhdG9yIiwiZGVub21pbmF0b3IiLCJ1bml0IiwiUFJFRklYX1ZBTFVFUyIsIlBSRUZJWF9NQVAiLCJVTklUX1ZBTFVFUyIsIlVOSVRfTUFQIiwiT1VUUFVUX01BUCIsIlNJR05BVFVSRV9WRUNUT1IiLCJ1bml0U2lnbmF0dXJlIiwic2lnbmF0dXJlIiwidmVjdG9yIiwidW5pdFNpZ25hdHVyZVZlY3RvciIsInByZXZpb3VzIiwiY3VycmVudCIsImlzQmFzZSIsInRvQmFzZSIsIlFUWV9TVFJJTkdfUkVHRVgiLCJSZWdFeHAiLCJUT1BfUkVHRVgiLCJCT1RUT01fUkVHRVgiLCJzY2FsYXJNYXRjaCIsIm54IiwiYm90dG9tIiwiVU5JVF9URVNUX1JFR0VYIiwidGVzdCIsInBhcnNlVW5pdHMiLCJVTklUX01BVENIIiwiVU5JVF9NQVRDSF9SRUdFWCIsInBhcnNlZFVuaXRzQ2FjaGUiLCJjYWNoZWQiLCJ1bml0TWF0Y2giLCJub3JtYWxpemVkVW5pdHMiLCJpc1F0eSIsIlF0eSIsImluaXRWYWx1ZSIsImluaXRVbml0cyIsImFzc2VydFZhbGlkQ29uc3RydWN0b3JBcmdzIiwiYmFzZVNjYWxhciIsIl9jb252ZXJzaW9uQ2FjaGUiLCJpc0RlZmluaXRpb25PYmplY3QiLCJ1cGRhdGVCYXNlU2NhbGFyIiwiaXNUZW1wZXJhdHVyZSIsImJhc2UiLCJLSU5EUyIsImFkZFRlbXBEZWdyZWVzIiwidGVtcCIsImRlZyIsInRlbXBEZWdyZWVzIiwidG8iLCJnZXREZWdyZWVVbml0cyIsInRvRGVncmVlcyIsImRzdFNjYWxhciIsInNyY0RlZ0siLCJxdHkiLCJtYXRjaCIsInRvRGVnSyIsImRzdFVuaXRzIiwiaXNEZWdyZWVzIiwib3RoZXIiLCJpc0NvbXBhdGlibGUiLCJ0b1RlbXAiLCJpc0ludmVyc2UiLCJpbnZlcnNlIiwidG9UZW1wSyIsImJhc2VVbml0Q2FjaGUiLCJ0b0Jhc2VVbml0cyIsInRvRmxvYXQiLCJpc1VuaXRsZXNzIiwidG9QcmVjIiwicHJlY1F1YW50aXR5IiwiY2xlYW5UZXJtcyIsIm51bTEiLCJkZW4xIiwibnVtMiIsImRlbjIiLCJub3RVbml0eSIsImNvbWJpbmVkIiwiY29tYmluZVRlcm1zIiwidGVybXMiLCJwcmVmaXgiLCJwcmVmaXhWYWx1ZSIsImNvbWJpbmVkUHJlZml4VmFsdWUiLCJOZXN0ZWRNYXAiLCJnZXRVbml0cyIsInVuaXRLZXlzIiwiZ2V0S2luZHMiLCJnZXRBbGlhc2VzIiwidW5pdE5hbWUiLCJrbm93blNpZ25hdHVyZSIsInNlZW4iLCJzd2lmdENvbnZlcnRlciIsInNyY1VuaXRzIiwiY29udmVydCIsInNyY1F0eSIsImRzdFF0eSIsImVxIiwiYWRkIiwicmhzIiwibGhzVW5pdHMiLCJsaHMiLCJyaHNDb252ZXJ0ZWQiLCJkc3REZWdyZWVzIiwib3AxIiwib3AyIiwibnVtZGVuc2NhbGUiLCJkaXYiLCJjb21wYXJlVG8iLCJsdCIsImx0ZSIsImd0IiwiZ3RlIiwic2FtZSIsIl9pc0Jhc2UiLCJjaGlsZE1hcCIsImZvcm1hdHRlciIsIl91bml0cyIsIm51bUlzVW5pdHkiLCJkZW5Jc1VuaXR5IiwibnVtVW5pdHMiLCJzdHJpbmdpZnlVbml0cyIsImRlblVuaXRzIiwidGFyZ2V0VW5pdHNPck1heERlY2ltYWxzT3JQcmVjIiwibWF4RGVjaW1hbHMiLCJ0YXJnZXRVbml0cyIsImZvcm1hdCIsInRhcmdldFF0eSIsInN0cmluZ2lmaWVkVW5pdHNDYWNoZSIsInN0cmluZ2lmaWVkIiwiYWNjIiwidW5pdENvdW50ZXIiLCJ1bml0Q291bnQiLCJzaW1wbGlmeSIsInRva2VuIiwidG9rZW5OZXh0IiwidW5pdE5hbWVzIiwiZ2V0T3V0cHV0TmFtZXMiLCJfcmVmIiwibWVkaWFuIiwiRGlzam9pbnRTZXROb2RlIiwicmFuayIsIm5vZGVzIiwidW5pb24iLCJyb290WCIsImZpbmQiLCJyb290WSIsInRvVXBkYXRlWCIsInRvVXBkYXRlUGFyZW50IiwiY29ubmVjdGVkIiwic3F1YXJlZEV1Y2xpZGVhbiIsImV1Y2xpZGVhbiIsInNxcnQiLCJGRlRVdGlscyIsIkRFQlVHIiwiaWZmdDJEQXJyYXkiLCJmdCIsImZ0Um93cyIsImZ0Q29scyIsInRlbXBUcmFuc2Zvcm0iLCJuUm93cyIsIm5Db2xzIiwiaW5pdCIsInRtcENvbHMiLCJyZSIsImltIiwiaUNvbCIsImlSb3ciLCJidCIsImZpbmFsVHJhbnNmb3JtIiwidG1wUm93cyIsImluZGV4QiIsImZmdDJEQXJyYXkiLCJvcHQiLCJpbnBsYWNlIiwiaVJvdzAiLCJpUm93MSIsImlSb3cyIiwiaVJvdzMiLCJyb3cxIiwicm93MiIsImZmdDFkIiwicmVjb25zdHJ1Y3RUd29SZWFsRkZUIiwiZm91cmllclRyYW5zZm9ybSIsInJlYWxUcmFuc2Zvcm0xIiwicmVhbFRyYW5zZm9ybTIiLCJybSIsInJwIiwiaXAiLCJjb252b2x1dGUyREkiLCJmdFNpZ25hbCIsImZ0RmlsdGVyIiwiY29udm9sdXRlIiwia2VybmVsIiwiZnRTcGVjdHJ1bSIsImRpbVIiLCJkaW1DIiwiZnRGaWx0ZXJEYXRhIiwic2hpZnRSIiwic2hpZnRDIiwiaXIiLCJpYyIsInRvUmFkaXgyIiwiaXJvdyIsImljb2wiLCJjb2xzIiwicm93cyIsImNyb3AiLCJkZXN0aW55Um93Iiwic291cmNlUm93IiwiX24iLCJfY3N0YiIsImNvcmUiLCJfaW5pdEFycmF5IiwiX21ha2VCaXRSZXZlcnNhbFRhYmxlIiwiX21ha2VDb3NTaW5UYWJsZSIsImZmdCIsImlmZnQxZCIsImJ0MWQiLCJmZnQyZCIsInRyZSIsInRpbSIsIngxIiwieDIiLCJ5MSIsInkyIiwiaWZmdDJkIiwiaWsiLCJ3ciIsIndpIiwieHIiLCJ4aSIsIm40IiwiX3BhZGRpbmdaZXJvIiwibjIiLCJuOCIsIm4ycDQiLCJkYyIsImRzIiwiYXBpcyIsImlmZnQiLCJzaWdtYSIsImRpdmlzb3IiLCJjb21wdXRlIiwiZGlzdGFuY2UiLCJleHAiLCJkZWdyZWUiLCJjb25zdGFudCIsInN1bSIsImFscGhhIiwidGFuaCIsIk1hdHJpeCIsIk1hdHJpeFRyYW5zcG9zZVZpZXciLCJHYXVzc2lhbktlcm5lbCIsIlBvbHlub21pYWxLZXJuZWwiLCJTaWdtb2lkS2VybmVsIiwiQU5PVkFLZXJuZWwiLCJDYXVjaHlLZXJuZWwiLCJFeHBvbmVudGlhbEtlcm5lbCIsIkhpc3RvZ3JhbUtlcm5lbCIsImtlcm5lbFR5cGUiLCJnYXVzc2lhbiIsInJiZiIsInBvbHlub21pYWwiLCJwb2x5IiwiYW5vdmEiLCJjYXVjaHkiLCJleHBvbmVudGlhbCIsImhpc3RvZ3JhbSIsImxhcGxhY2lhbiIsIm11bHRpcXVhZHJhdGljIiwicmF0aW9uYWwiLCJzaWdtb2lkIiwibWxwIiwiS2VybmVsQ29uc3RydWN0b3IiLCJrZXJuZWxGdW5jdGlvbiIsImlucHV0cyIsImxhbmRtYXJrcyIsImNoZWNrTWF0cml4IiwibW11bCIsImtlcm5lbE1hdHJpeCIsImdldFJvdyIsIm1hdHJpeDJBcnJheSIsImlucHV0RGF0YSIsIm5vcm1hbGl6ZSIsImtIZWlnaHQiLCJrV2lkdGgiLCJyYWRpeDJTaXplZCIsImNvbnYiLCJkaXJlY3QiLCJrVmFsIiwiaEhlaWdodCIsImhXaWR0aCIsImtlcm5lbEZhY3RvcnkiLCJMb0ciLCJuUG9pbnRzIiwiY2VudGVyIiwic2lnbWEyIiwiTHVEZWNvbXBvc2l0aW9uIiwibWF0cml4IiwiTFVjb2xqIiwia21heCIsImx1IiwiY2xvbmUiLCJjb2x1bW5zIiwicGl2b3RWZWN0b3IiLCJwaXZvdFNpZ24iLCJMVSIsImlzU2luZ3VsYXIiLCJzb2x2ZSIsIlgiLCJzdWJNYXRyaXhSb3ciLCJkZXRlcm1pbmFudCIsImlzU3F1YXJlIiwibG93ZXJUcmlhbmd1bGFyTWF0cml4IiwidXBwZXJUcmlhbmd1bGFyTWF0cml4IiwicGl2b3RQZXJtdXRhdGlvblZlY3RvciIsIlFyRGVjb21wb3NpdGlvbiIsInFyIiwicmRpYWciLCJucm0iLCJRUiIsIlJkaWFnIiwiaXNGdWxsUmFuayIsInN1Yk1hdHJpeCIsIm9ydGhvZ29uYWxNYXRyaXgiLCJTaW5ndWxhclZhbHVlRGVjb21wb3NpdGlvbiIsImlzRW1wdHkiLCJjb21wdXRlTGVmdFNpbmd1bGFyVmVjdG9ycyIsImNvbXB1dGVSaWdodFNpbmd1bGFyVmVjdG9ycyIsImF1dG9UcmFuc3Bvc2UiLCJ3YW50dSIsIkJvb2xlYW4iLCJ3YW50diIsInN3YXBwZWQiLCJ0cmFuc3Bvc2UiLCJhdXgiLCJ3YXJuIiwibnUiLCJuaSIsIlUiLCJWIiwid29yayIsInNpIiwibmN0IiwibnJ0IiwibXJjIiwicHAiLCJpdGVyIiwiZXBzIiwiRVBTSUxPTiIsImthc2UiLCJNSU5fVkFMVUUiLCJrcyIsImNzIiwic24iLCJzcCIsInNwbTEiLCJlcG0xIiwic2siLCJlayIsInRocmVzaG9sZCIsInNjb2xzIiwiTHMiLCJyaWdodFNpbmd1bGFyVmVjdG9ycyIsIlZMIiwidnJvd3MiLCJ1cm93cyIsIlZMVSIsInNvbHZlRm9yRGlhZ29uYWwiLCJ2Y29scyIsInVjb2xzIiwiY29uZGl0aW9uIiwibm9ybTIiLCJ0b2wiLCJpaSIsImRpYWdvbmFsIiwibGVmdFNpbmd1bGFyVmVjdG9ycyIsImRpYWdvbmFsTWF0cml4IiwiaHlwb3RlbnVzZSIsInVzZVNWRCIsImxlZnRIYW5kU2lkZSIsInJpZ2h0SGFuZFNpZGUiLCJNYXRyaXhDb2x1bW5WaWV3IiwiY29sdW1uIiwicm93SW5kZXgiLCJjb2x1bW5JbmRleCIsIk1hdHJpeENvbHVtblNlbGVjdGlvblZpZXciLCJjb2x1bW5JbmRpY2VzIiwiTWF0cml4RmxpcENvbHVtblZpZXciLCJNYXRyaXhGbGlwUm93VmlldyIsIk1hdHJpeFJvd1ZpZXciLCJNYXRyaXhSb3dTZWxlY3Rpb25WaWV3Iiwicm93SW5kaWNlcyIsIk1hdHJpeFNlbGVjdGlvblZpZXciLCJpbmRpY2VzIiwiTWF0cml4U3ViVmlldyIsInN0YXJ0Um93IiwiZW5kUm93Iiwic3RhcnRDb2x1bW4iLCJlbmRDb2x1bW4iLCJXcmFwcGVyTWF0cml4MUQiLCJfY2FsY3VsYXRlSW5kZXgiLCJ3cmFwIiwiV3JhcHBlck1hdHJpeDJEIiwic3ViTWF0cml4MCIsInN1Yk1hdHJpeDEiLCJzdWJNYXRyaXgyIiwieHJhbmdlIiwiZXhjZXB0aW9uIiwiZGVwZW5kZW5jaWVzT25lUm93IiwidGhyZXNob2xkVmFsdWUiLCJ0aHJlc2hvbGRFcnJvciIsInJldHVybkFycmF5IiwiYWRkUm93IiwidG8xREFycmF5IiwibGluZWFyRGVwZW5kZW5jaWVzIiwicmVzdWx0cyIsIkFiaXMiLCJzZXRSb3ciLCJwc2V1ZG9JbnZlcnNlIiwic3ZkU29sdXRpb24iLCJjb3ZhcmlhbmNlIiwieE1hdHJpeCIsInlNYXRyaXgiLCJ5SXNTYW1lIiwiY292IiwiY29ycmVsYXRpb24iLCJzZHgiLCJzdGFuZGFyZERldmlhdGlvbiIsInVuYmlhc2VkIiwic2R5IiwiY29yciIsIkVpZ2VudmFsdWVEZWNvbXBvc2l0aW9uIiwiYXNzdW1lU3ltbWV0cmljIiwiaXNTeW1tZXRyaWMiLCJoaCIsInRyZWQyIiwiZGwxIiwiYzIiLCJjMyIsImVsMSIsInMyIiwidHN0MSIsInRxbDIiLCJIIiwib3J0Iiwib3J0aGVzIiwibm4iLCJ3IiwicmEiLCJzYSIsInZyIiwidmkiLCJub3RsYXN0IiwiY2RpdnJlcyIsImV4c2hpZnQiLCJub3JtIiwiY2RpdiIsImhxcjIiLCJyZWFsRWlnZW52YWx1ZXMiLCJpbWFnaW5hcnlFaWdlbnZhbHVlcyIsImVpZ2VudmVjdG9yTWF0cml4IiwieXIiLCJ5aSIsIkNob2xlc2t5RGVjb21wb3NpdGlvbiIsImRpbWVuc2lvbiIsInBvc2l0aXZlRGVmaW5pdGUiLCJMIiwiaXNQb3NpdGl2ZURlZmluaXRlIiwibmlwYWxzIiwic2NhbGVTY29yZXMiLCJtYXhJdGVyYXRpb25zIiwidGVybWluYXRpb25Dcml0ZXJpYSIsImdldENvbHVtblZlY3RvciIsInRPbGQiLCJjb3VudGVyIiwieFJlc2lkdWFsIiwicmVzaWR1YWwiLCJ5UmVzaWR1YWwiLCJtdWxTIiwiYmV0YXMiLCJfb3B0aW9ucyRmcm9tSW5kZXgiLCJmcm9tSW5kZXgiLCJfb3B0aW9ucyR0b0luZGV4IiwidG9JbmRleCIsIm1heFZhbHVlIiwibWluVmFsdWUiLCJyZXNjYWxlIiwiY3VycmVudE1pbiIsImN1cnJlbnRNYXgiLCJfb3B0aW9ucyRtaW4iLCJhdXRvTWluTWF4IiwiX29wdGlvbnMkbWF4IiwiaW5kZW50IiwicmVwZWF0IiwiaW5kZW50RGF0YSIsImluc3BlY3RNYXRyaXhXaXRoT3B0aW9ucyIsIm1heFJvd3MiLCJtYXhDb2x1bW5zIiwibWF4TnVtU2l6ZSIsIm1heEkiLCJtYXhKIiwiZm9ybWF0TnVtYmVyIiwiaW5zcGVjdERhdGEiLCJudW1TdHIiLCJwYWRFbmQiLCJwcmVjaXNlIiwidG9QcmVjaXNpb24iLCJ0b0V4cG9uZW50aWFsIiwiZUluZGV4IiwiQWJzdHJhY3RNYXRyaXgiLCJzdGF0aWMiLCJuZXdSb3dzIiwibmV3Q29sdW1ucyIsIm5ld0RhdGEiLCJuZXdNYXRyaXgiLCJyYW5kb20iLCJpbnRlcnZhbCIsInplcm9zIiwibWF0cml4MSIsIm1hdHJpeDIiLCJpc01hdHJpeCIsImtsYXNzIiwiY2FsbGJhY2siLCJ0bzJEQXJyYXkiLCJpc1Jvd1ZlY3RvciIsImlzQ29sdW1uVmVjdG9yIiwiaXNWZWN0b3IiLCJpc0VjaGVsb25Gb3JtIiwicHJldmlvdXNDb2x1bW4iLCJpc1JlZHVjZWRFY2hlbG9uRm9ybSIsImVjaGVsb25Gb3JtIiwiaU1heCIsInN3YXBSb3dzIiwicmVkdWNlZEVjaGVsb25Gb3JtIiwibWF4Um93IiwicGl2b3QiLCJzZXRTdWJNYXRyaXgiLCJuZWciLCJnZXRSb3dWZWN0b3IiLCJyb3dWZWN0b3IiLCJnZXRDb2x1bW4iLCJjb2x1bW5WZWN0b3IiLCJzZXRDb2x1bW4iLCJzd2FwQ29sdW1ucyIsImNvbHVtbjEiLCJjb2x1bW4yIiwiYWRkUm93VmVjdG9yIiwic3ViUm93VmVjdG9yIiwibXVsUm93VmVjdG9yIiwiZGl2Um93VmVjdG9yIiwiYWRkQ29sdW1uVmVjdG9yIiwic3ViQ29sdW1uVmVjdG9yIiwibXVsQ29sdW1uVmVjdG9yIiwiZGl2Q29sdW1uVmVjdG9yIiwibXVsUm93IiwibXVsQ29sdW1uIiwibWF4SW5kZXgiLCJpZHgiLCJtYXhSb3dJbmRleCIsIm1pblJvdyIsIm1pblJvd0luZGV4IiwibWF4Q29sdW1uIiwibWF4Q29sdW1uSW5kZXgiLCJtaW5Db2x1bW4iLCJtaW5Db2x1bW5JbmRleCIsImRpYWciLCJjdW11bGF0aXZlU3VtIiwiZG90IiwidmVjdG9yMiIsInZlY3RvcjEiLCJCY29saiIsInN0cmFzc2VuMngyIiwiYTExIiwiYjExIiwiYTEyIiwiYjEyIiwiYTIxIiwiYjIxIiwiYTIyIiwiYjIyIiwibTEiLCJtMiIsIm0zIiwibTQiLCJtNSIsImMwMCIsImMwMSIsImMxMCIsImMxMSIsInN0cmFzc2VuM3gzIiwiYTAwIiwiYTAxIiwiYTAyIiwiYTEwIiwiYTIwIiwiYjAwIiwiYjAxIiwiYjAyIiwiYjEwIiwiYjIwIiwibTYiLCJtNyIsIm04IiwibTkiLCJtMTIiLCJtMTMiLCJtMTQiLCJtMTUiLCJtMTYiLCJtMTciLCJtMTgiLCJjMDIiLCJjMTIiLCJjMjAiLCJjMjEiLCJjMjIiLCJtbXVsU3RyYXNzZW4iLCJyMSIsImMxIiwicjIiLCJlbWJlZCIsIm1hdCIsInJlc3VsdGF0IiwiYmxvY2tNdWx0IiwiaGFsZlJvd3MiLCJoYWxmQ29scyIsInNjYWxlUm93cyIsInNjYWxlQ29sdW1ucyIsImZsaXBSb3dzIiwibWlkZGxlIiwiZmxpcENvbHVtbnMiLCJrcm9uZWNrZXJQcm9kdWN0Iiwia3JvbmVja2VyU3VtIiwiQXhJIiwiZXllIiwiSXhCIiwic29ydFJvd3MiLCJjb21wYXJlRnVuY3Rpb24iLCJjb21wYXJlTnVtYmVycyIsInNvcnRDb2x1bW5zIiwic3ViTWF0cml4Q29sdW1uIiwic2VsZWN0aW9uIiwidHJhY2UiLCJieSIsInN1bUJ5Um93Iiwic3VtQnlDb2x1bW4iLCJzdW1BbGwiLCJwcm9kdWN0IiwicHJvZHVjdEJ5Um93IiwicHJvZHVjdEJ5Q29sdW1uIiwicHJvZHVjdEFsbCIsIm1lYW4iLCJ2YXJpYW5jZSIsInN1bTEiLCJzdW0yIiwidmFyaWFuY2VCeVJvdyIsInZhcmlhbmNlQnlDb2x1bW4iLCJ2YXJpYW5jZUFsbCIsImNlbnRlckJ5Um93IiwiY2VudGVyQnlDb2x1bW4iLCJjZW50ZXJBbGwiLCJnZXRTY2FsZUJ5Um93Iiwic2NhbGVCeVJvdyIsImdldFNjYWxlQnlDb2x1bW4iLCJzY2FsZUJ5Q29sdW1uIiwiZGl2aWRlciIsImdldFNjYWxlQWxsIiwic2NhbGVBbGwiLCJmb3IiLCJyYW5kIiwicmFuZG9tSW50IiwicmFuZEludCIsIm5lZ2F0ZSIsInRlbnNvclByb2R1Y3QiLCJuQ29sdW1ucyIsImFycmF5RGF0YSIsInJlbW92ZVJvdyIsInJlbW92ZUNvbHVtbiIsIm5ld1JvdyIsImFkZENvbHVtbiIsImFkZFMiLCJhZGRNIiwic3ViUyIsInN1Yk0iLCJzdWJ0cmFjdCIsInN1YnRyYWN0UyIsInN1YnRyYWN0TSIsIm11bE0iLCJtdWx0aXBseSIsIm11bHRpcGx5UyIsIm11bHRpcGx5TSIsImRpdlMiLCJkaXZNIiwiZGl2aWRlIiwiZGl2aWRlUyIsImRpdmlkZU0iLCJtb2QiLCJtb2RTIiwibW9kTSIsIm1vZHVsdXMiLCJtb2R1bHVzUyIsIm1vZHVsdXNNIiwiYW5kIiwiYW5kUyIsImFuZE0iLCJvciIsIm9yUyIsIm9yTSIsInhvciIsInhvclMiLCJ4b3JNIiwibGVmdFNoaWZ0IiwibGVmdFNoaWZ0UyIsImxlZnRTaGlmdE0iLCJzaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0Iiwic2lnblByb3BhZ2F0aW5nUmlnaHRTaGlmdFMiLCJzaWduUHJvcGFnYXRpbmdSaWdodFNoaWZ0TSIsInJpZ2h0U2hpZnQiLCJyaWdodFNoaWZ0UyIsInJpZ2h0U2hpZnRNIiwiemVyb0ZpbGxSaWdodFNoaWZ0IiwiemVyb0ZpbGxSaWdodFNoaWZ0UyIsInplcm9GaWxsUmlnaHRTaGlmdE0iLCJub3QiLCJhY29zIiwiYWNvc2giLCJhc2luIiwiYXNpbmgiLCJhdGFuIiwiYXRhbmgiLCJjYnJ0IiwiY2x6MzIiLCJjb3NoIiwiZXhwbTEiLCJmcm91bmQiLCJsb2cxcCIsImxvZzEwIiwibG9nMiIsInNpZ24iLCJzaW5oIiwidGFuIiwidHJ1bmMiLCJhcmcwIiwicG93UyIsInBvd00iLCJpbnN0YWxsTWF0aE9wZXJhdGlvbnMiLCJjaGVja1Jvd0luZGV4Iiwib3V0ZXIiLCJjaGVja0NvbHVtbkluZGV4IiwiY2hlY2tSb3dWZWN0b3IiLCJjaGVja0NvbHVtblZlY3RvciIsImNoZWNrSW5kaWNlcyIsImNoZWNrUm93SW5kaWNlcyIsImNoZWNrQ29sdW1uSW5kaWNlcyIsInNvbWUiLCJjaGVja1JhbmdlIiwiY2hlY2tOdW1iZXIiLCJjaGVja05vbkVtcHR5IiwiQmFzZVZpZXciLCJhc3NlcnROdW1iZXIiLCJudW1iZXIiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInRlc3QxIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInRlc3QyIiwidGVzdDMiLCJsZXR0ZXIiLCJzaG91bGRVc2VOYXRpdmUiLCJzeW1ib2xzIiwiRnJhZ21lbnQiLCJTdHJpY3RNb2RlIiwiUHJvZmlsZXIiLCJTdXNwZW5zZSIsIml0ZXJhdG9yIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsInByb3BzIiwiY29udGV4dCIsInJlZnMiLCJ1cGRhdGVyIiwiaXNSZWFjdENvbXBvbmVudCIsInNldFN0YXRlIiwiZm9yY2VVcGRhdGUiLCJGIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJJIiwiX19zZWxmIiwiX19zb3VyY2UiLCJKIiwiZGVmYXVsdFByb3BzIiwiJCR0eXBlb2YiLCJfb3duZXIiLCJOIiwiZXNjYXBlIiwiTyIsImRvbmUiLCJQIiwiUSIsIl9zdGF0dXMiLCJfcmVzdWx0IiwidGhlbiIsImRlZmF1bHQiLCJTIiwiVCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInRyYW5zaXRpb24iLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJvbmx5IiwiQ29tcG9uZW50IiwiUHVyZUNvbXBvbmVudCIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiY3JlYXRlQ29udGV4dCIsIl9jYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9jdXJyZW50VmFsdWUiLCJfY3VycmVudFZhbHVlMiIsIl90aHJlYWRDb3VudCIsIlByb3ZpZGVyIiwiQ29uc3VtZXIiLCJfY29udGV4dCIsImNyZWF0ZUVsZW1lbnQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsInJlbmRlciIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9wYXlsb2FkIiwiX2luaXQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwidHdvUHJvZHVjdCIsInJvYnVzdFN1bSIsInJvYnVzdFNjYWxlIiwicm9idXN0U3VidHJhY3QiLCJvcmllbnRhdGlvbl8zIiwicHJvZCIsIm0wIiwib3JpZW50YXRpb25fNCIsIm9yaWVudGF0aW9uXzUiLCJvcmllbnRhdGlvbjNFeGFjdCIsIm9yaWVudGF0aW9uNEV4YWN0IiwiQ0FDSEVEIiwiZGV0IiwiYWR4IiwiYmR4IiwiY2R4IiwiYWR5IiwiYmR5IiwiY2R5IiwiYWR6IiwiYmR6IiwiY2R6IiwiYmR4Y2R5IiwiY2R4YmR5IiwiY2R4YWR5IiwiYWR4Y2R5IiwiYWR4YmR5IiwiYmR4YWR5Iiwic2xvd09yaWVudCIsImFyZ3MiLCJwcm9jIiwic2xvdyIsIm8wIiwibzEiLCJvMiIsIm8zIiwibzQiLCJvNSIsImEwIiwiYTEiLCJhMiIsImEzIiwiYTQiLCJnZW5lcmF0ZU9yaWVudGF0aW9uUHJvYyIsInZzIiwicG9pbnQiLCJpbnNpZGUiLCJsaW0iLCJ5aiIsIm9yaWVudCIsInlrIiwieDAiLCJweCIsInkwIiwidHdvU3VtIiwidHMiLCJwcSIsIm5lIiwibmYiLCJidiIsInNjYWxhclNjYWxhciIsImVwdHIiLCJmcHRyIiwiZWkiLCJlYSIsImZpIiwiZmEiLCJfeCIsIl9idiIsInEwIiwicTEiLCJzdHlsZXNJbkRPTSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImluZGV4QnlJZGVudGlmaWVyIiwiY3NzIiwic291cmNlTWFwIiwicmVmZXJlbmNlcyIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJhcGkiLCJkb21BUEkiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2kiLCJfaW5kZXgiLCJpbnNlcnQiLCJzdHlsZVRhcmdldCIsInF1ZXJ5U2VsZWN0b3IiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsInN0eWxlRWxlbWVudCIsIm5vbmNlIiwiaW5zZXJ0U3R5bGVFbGVtZW50Iiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJyZW1vdmVTdHlsZUVsZW1lbnQiLCJzdHlsZVNoZWV0IiwiY3NzVGV4dCIsImZpcnN0Q2hpbGQiLCJjcmVhdGVUZXh0Tm9kZSIsIlNQTElUVEVSIiwiYWhpIiwiYWxvIiwiYmhpIiwiYmxvIiwiYnIiLCJhciIsImZyZWVHbG9iYWwiLCJnbG9iYWwiLCJieXRlQ291bnQiLCJieXRlSW5kZXgiLCJzdHJpbmdGcm9tQ2hhckNvZGUiLCJ1Y3MyZGVjb2RlIiwiY2hlY2tTY2FsYXJWYWx1ZSIsImNyZWF0ZUJ5dGUiLCJlbmNvZGVDb2RlUG9pbnQiLCJzeW1ib2wiLCJyZWFkQ29udGludWF0aW9uQnl0ZSIsImNvbnRpbnVhdGlvbkJ5dGUiLCJkZWNvZGVTeW1ib2wiLCJieXRlU3RyaW5nIiwidWNzMmVuY29kZSIsIndvcmtlclRlbXBsYXRlIiwiQ09SRVMiLCJuYXZpZ2F0b3IiLCJoYXJkd2FyZUNvbmN1cnJlbmN5IiwiV29ya2VyTWFuYWdlciIsImZ1bmMiLCJfd29ya2VyQ29kZSIsIm1heFdvcmtlcnMiLCJfbnVtV29ya2VycyIsIl93b3JrZXJzIiwiX3RpbWVvdXQiLCJ0aW1lb3V0IiwiX3Rlcm1pbmF0ZU9uRXJyb3IiLCJ0ZXJtaW5hdGVPbkVycm9yIiwiZGVwcyIsIl9pZCIsIl90ZXJtaW5hdGVkIiwiX3dvcmtpbmciLCJfd2FpdGluZyIsIkZ1bmN0aW9uIiwid29ya2VyVVJMIiwibmV3V29ya2VyVVJMIiwid29ya2VyIiwiV29ya2VyIiwib25tZXNzYWdlIiwiX29ubWVzc2FnZSIsIm9uZXJyb3IiLCJfb25lcnJvciIsInJ1bm5pbmciLCJVUkwiLCJyZXZva2VPYmplY3RVUkwiLCJ0ZXJtaW5hdGUiLCJfZXhlYyIsImV2ZW50IiwiZXhlY0luZm8iLCJwb3N0TWVzc2FnZSIsImFjdGlvbiIsInRpbWUiLCJub3ciLCJlbnRyeSIsInBvc3RBbGwiLCJwcm9taXNlcyIsInBvc3QiLCJhbGwiLCJ0cmFuc2ZlcmFibGUiLCJ3b3JrZXJTdHIiLCJNYW5hZ2VkV29ya2VyIiwiX2xpc3RlbmVycyIsIm9uIiwiX3NlbmQiLCJfdHJpZ2dlciIsImJsb2IiLCJCbG9iIiwiY3JlYXRlT2JqZWN0VVJMIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJjaHVua0lkIiwiZ2xvYmFsVGhpcyIsInRvU3RyaW5nVGFnIiwibm1kIiwicGF0aHMiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwibG9jYXRpb24iLCJjdXJyZW50U2NyaXB0Iiwic2NyaXB0cyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwiYmFzZVVSSSIsImhyZWYiLCJXc0hPQyIsIkNhbnZhcyIsImlzT24iLCJ3ZWJzb2NrZXRVUkwiLCJyb2JvdE5hbWUiLCJleGNoYW5nZSIsImhhbmRsZUVycm9yIiwic2V0SW1hZ2UiLCJJbWFnZSIsInNldFdvcmtlciIsIndlYndvcmtlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJwYXlsb2FkIiwibmV3SW1nIiwiY29udHJvbFBhY2tldCIsImNvbW1hbmQiLCJhY2Nlc3NUb2tlbiIsInJvYm90X25hbWUiLCJ1cmwiLCJwb3NYIiwicG9zWSIsInBsYWNlaG9sZGVyVGV4dCIsImNhbnZhc1JlZiIsImdldENvbnRleHQiLCJkcmF3SW1hZ2UiLCJjYW52YXNEcmF3IiwiY2xlYXJSZWN0IiwiZmlsbFN0eWxlIiwidGV4dEFsaWduIiwiZm9udCIsInRleHRCYXNlbGluZSIsImZpbGxUZXh0IiwiZHJhd1BsYWNlaG9sZGVyIiwibWF4V2lkdGgiLCJtaW5XaWR0aCIsImFzcGVjdFJhdGlvIiwicmVzaXplVGltZW91dCIsImRyYXdpbmciLCJzZXREcmF3aW5nIiwiZHJhdyIsImN0eCIsImhhbmRsZVJlc2l6ZSIsImNsZWFyVGltZW91dCIsInNldFRpbWVvdXQiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwicGFkZGluZyIsIm1hcmdpbiIsImRpc3BsYXkiLCJSZW1icmFpbkltYWdlIiwiYWx0Iiwib25Mb2FkIiwib25FcnJvciIsInNldFNyYyIsImZldGNoIiwiaGVhZGVycyIsIkF1dGhvcml6YXRpb24iLCJyZXNwIiwiYmxvYlJlc3AiLCJvYmplY3RVcmwiLCJ3ZWJraXRVUkwiLCJjYXRjaCIsImNsYXNzTmFtZSIsIlJlY3RhbmdsZSIsInAxIiwicDIiLCJ0b3BMZWZ0IiwiYm90dG9tUmlnaHQiLCJUb3BMZWZ0IiwiVG9wUmlnaHQiLCJCb3R0b21MZWZ0IiwiQm90dG9tUmlnaHQiLCJDZW50ZXIiLCJDZW50ZXJUb3AiLCJDZW50ZXJCb3R0b20iLCJleHRlbmRTdGF0aWNzIiwiX19wcm90b19fIiwiX19leHRlbmRzIiwiX18iLCJfX2dlbmVyYXRvciIsInRoaXNBcmciLCJfIiwibGFiZWwiLCJzZW50IiwidHJ5cyIsIm9wcyIsInZlcmIiLCJvcCIsIl9fdmFsdWVzIiwiX19yZWFkIiwiX19zcHJlYWRBcnJheSIsImlsIiwiX19hd2FpdCIsIl9fYXN5bmNHZW5lcmF0b3IiLCJfYXJndW1lbnRzIiwiZ2VuZXJhdG9yIiwiYXN5bmNJdGVyYXRvciIsInJlc3VtZSIsImZ1bGZpbGwiLCJzZXR0bGUiLCJpc0Z1bmN0aW9uIiwiY3JlYXRlRXJyb3JDbGFzcyIsImNyZWF0ZUltcGwiLCJjdG9yRnVuYyIsImluc3RhbmNlIiwiVW5zdWJzY3JpcHRpb25FcnJvciIsIl9zdXBlciIsImFyclJlbW92ZSIsIlN1YnNjcmlwdGlvbiIsImluaXRpYWxUZWFyZG93biIsImNsb3NlZCIsIl9wYXJlbnRhZ2UiLCJfdGVhcmRvd25zIiwidW5zdWJzY3JpYmUiLCJlXzEiLCJfYSIsImVfMiIsIl9iIiwiX3BhcmVudGFnZV8xIiwiX3BhcmVudGFnZV8xXzEiLCJlXzFfMSIsInJldHVybiIsIl90ZWFyZG93bnNfMSIsIl90ZWFyZG93bnNfMV8xIiwidGVhcmRvd25fMSIsImV4ZWNUZWFyZG93biIsImVfMl8xIiwidGVhcmRvd24iLCJfaGFzUGFyZW50IiwiX2FkZFBhcmVudCIsIl9yZW1vdmVQYXJlbnQiLCJFTVBUWSIsImVtcHR5IiwiRU1QVFlfU1VCU0NSSVBUSU9OIiwiaXNTdWJzY3JpcHRpb24iLCJjb25maWciLCJ0aW1lb3V0UHJvdmlkZXIiLCJkZWxlZ2F0ZSIsImhhbmRsZSIsInJlcG9ydFVuaGFuZGxlZEVycm9yIiwibm9vcCIsIkNPTVBMRVRFX05PVElGSUNBVElPTiIsImNyZWF0ZU5vdGlmaWNhdGlvbiIsImVycm9yQ29udGV4dCIsImNiIiwiaXNSb290IiwiZXJyb3JUaHJvd24iLCJjYXB0dXJlRXJyb3IiLCJTdWJzY3JpYmVyIiwiZGVzdGluYXRpb24iLCJfdGhpcyIsImlzU3RvcHBlZCIsIkVNUFRZX09CU0VSVkVSIiwiY29tcGxldGUiLCJTYWZlU3Vic2NyaWJlciIsImhhbmRsZVN0b3BwZWROb3RpZmljYXRpb24iLCJuZXh0Tm90aWZpY2F0aW9uIiwiX25leHQiLCJfZXJyb3IiLCJfY29tcGxldGUiLCJvYnNlcnZlck9yTmV4dCIsImNvbnRleHRfMSIsIndyYXBGb3JFcnJvckhhbmRsaW5nIiwiZGVmYXVsdEVycm9ySGFuZGxlciIsImhhbmRsZXIiLCJub3RpZmljYXRpb24iLCJzdWJzY3JpYmVyIiwib25TdG9wcGVkTm90aWZpY2F0aW9uIiwib2JzZXJ2YWJsZSIsInBpcGVGcm9tQXJyYXkiLCJmbnMiLCJPYnNlcnZhYmxlIiwic3Vic2NyaWJlIiwiX3N1YnNjcmliZSIsImxpZnQiLCJvcGVyYXRvciIsImlzT2JzZXJ2ZXIiLCJfdHJ5U3Vic2NyaWJlIiwic2luayIsInByb21pc2VDdG9yIiwiZ2V0UHJvbWlzZUN0b3IiLCJzdWJzY3JpcHRpb24iLCJvcGVyYXRpb25zIiwidG9Qcm9taXNlIiwiT2JqZWN0VW5zdWJzY3JpYmVkRXJyb3IiLCJTdWJqZWN0Iiwib2JzZXJ2ZXJzIiwiaGFzRXJyb3IiLCJ0aHJvd25FcnJvciIsInN1YmplY3QiLCJBbm9ueW1vdXNTdWJqZWN0IiwiX3Rocm93SWZDbG9zZWQiLCJjb3B5XzEiLCJjb3B5XzFfMSIsIl9jaGVja0ZpbmFsaXplZFN0YXR1c2VzIiwiX2lubmVyU3Vic2NyaWJlIiwiYXNPYnNlcnZhYmxlIiwiZGF0ZVRpbWVzdGFtcFByb3ZpZGVyIiwiUmVwbGF5U3ViamVjdCIsIl9idWZmZXJTaXplIiwiX3dpbmRvd1RpbWUiLCJfdGltZXN0YW1wUHJvdmlkZXIiLCJfYnVmZmVyIiwiX2luZmluaXRlVGltZVdpbmRvdyIsIl90cmltQnVmZmVyIiwiYWRqdXN0ZWRCdWZmZXJTaXplIiwiYml0TWV0aG9kcyIsImdldEJpdCIsImdldFNsb3QiLCJnZXRTaGlmdCIsInNldEJpdCIsImNsZWFyQml0IiwidG9nZ2xlQml0IiwiZ2V0Qml0WFkiLCJzZXRCaXRYWSIsImNsZWFyQml0WFkiLCJ0b2dnbGVCaXRYWSIsImNhbnZhc1RvQmxvYiIsInRvQmxvYiIsImRhdGFVUkwiLCJidWlsZGVyIiwiQmxvYkJ1aWxkZXIiLCJNU0Jsb2JCdWlsZGVyIiwiTW96QmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsImFwcGVuZCIsImdldEJsb2IiLCJjcmVhdGVCbG9iIiwiYmluYXJ5U3RyaW5nVG9BcnJheUJ1ZmZlciIsImF0b2IiLCJkYXRhVVJMVG9CbG9iIiwidG9EYXRhVVJMIiwiYmluYXJ5IiwiVGV4dERlY29kZXIiLCJlbmNvZGVyIiwiVGV4dEVuY29kZXIiLCJsYXN0V3JpdHRlbkJ5dGUiLCJ6ZXJvJDEiLCJleHRyYV9sYml0cyIsImV4dHJhX2RiaXRzIiwiZXh0cmFfYmxiaXRzIiwiYmxfb3JkZXIiLCJzdGF0aWNfbHRyZWUiLCJzdGF0aWNfZHRyZWUiLCJEX0NPREVTJDEiLCJfZGlzdF9jb2RlIiwiX2xlbmd0aF9jb2RlIiwiTUFYX01BVENIJDEiLCJiYXNlX2xlbmd0aCIsImJhc2VfZGlzdCIsIlN0YXRpY1RyZWVEZXNjIiwic3RhdGljX3RyZWUiLCJleHRyYV9iaXRzIiwiZXh0cmFfYmFzZSIsImVsZW1zIiwibWF4X2xlbmd0aCIsImhhc19zdHJlZSIsInN0YXRpY19sX2Rlc2MiLCJzdGF0aWNfZF9kZXNjIiwic3RhdGljX2JsX2Rlc2MiLCJUcmVlRGVzYyIsImR5bl90cmVlIiwic3RhdF9kZXNjIiwibWF4X2NvZGUiLCJkX2NvZGUiLCJkaXN0IiwicHV0X3Nob3J0IiwicGVuZGluZ19idWYiLCJwZW5kaW5nIiwic2VuZF9iaXRzIiwiYmlfdmFsaWQiLCJiaV9idWYiLCJzZW5kX2NvZGUiLCJiaV9yZXZlcnNlIiwiZ2VuX2NvZGVzIiwiYmxfY291bnQiLCJuZXh0X2NvZGUiLCJNQVhfQklUUyQxIiwiYml0cyIsImluaXRfYmxvY2siLCJMSVRFUkFMUyQxIiwiZHluX2x0cmVlIiwiZHluX2R0cmVlIiwiYmxfdHJlZSIsIkVORF9CTE9DSyIsIm9wdF9sZW4iLCJzdGF0aWNfbGVuIiwibGFzdF9saXQiLCJtYXRjaGVzIiwiYmlfd2luZHVwIiwic21hbGxlciIsImRlcHRoIiwiX24yIiwiX20yIiwicHFkb3duaGVhcCIsImhlYXAiLCJoZWFwX2xlbiIsImNvbXByZXNzX2Jsb2NrIiwibHRyZWUiLCJkdHJlZSIsImxjIiwibHgiLCJkX2J1ZiIsImxfYnVmIiwiYnVpbGRfdHJlZSIsImRlc2MiLCJzdHJlZSIsImhlYXBfbWF4IiwieGJpdHMiLCJvdmVyZmxvdyIsImdlbl9iaXRsZW4iLCJzY2FuX3RyZWUiLCJjdXJsZW4iLCJwcmV2bGVuIiwibmV4dGxlbiIsIm1heF9jb3VudCIsIm1pbl9jb3VudCIsIlJFUF8zXzYiLCJSRVBaXzNfMTAiLCJSRVBaXzExXzEzOCIsInNlbmRfdHJlZSIsInN0YXRpY19pbml0X2RvbmUiLCJfdHJfc3RvcmVkX2Jsb2NrJDEiLCJzdG9yZWRfbGVuIiwiY29weV9ibG9jayIsInRyZWVzIiwiX3RyX2luaXQiLCJMRU5HVEhfQ09ERVMkMSIsIkxfQ09ERVMkMSIsInRyX3N0YXRpY19pbml0IiwibF9kZXNjIiwiZF9kZXNjIiwiYmxfZGVzYyIsIl90cl9zdG9yZWRfYmxvY2siLCJfdHJfZmx1c2hfYmxvY2siLCJvcHRfbGVuYiIsInN0YXRpY19sZW5iIiwibWF4X2JsaW5kZXgiLCJsZXZlbCIsInN0cm0iLCJkYXRhX3R5cGUiLCJibGFja19tYXNrIiwiZGV0ZWN0X2RhdGFfdHlwZSIsIkJMX0NPREVTJDEiLCJidWlsZF9ibF90cmVlIiwibGNvZGVzIiwiZGNvZGVzIiwiYmxjb2RlcyIsInNlbmRfYWxsX3RyZWVzIiwiX3RyX3RhbGx5IiwibGl0X2J1ZnNpemUiLCJfdHJfYWxpZ24iLCJTVEFUSUNfVFJFRVMiLCJiaV9mbHVzaCIsImFkbGVyMzJfMSIsImFkbGVyIiwiczEiLCJjcmNUYWJsZSIsIm1ha2VUYWJsZSIsImNyYzMyXzEiLCJjcmMiLCJtZXNzYWdlcyIsImNvbnN0YW50cyQyIiwiWl9OT19GTFVTSCIsIlpfUEFSVElBTF9GTFVTSCIsIlpfU1lOQ19GTFVTSCIsIlpfRlVMTF9GTFVTSCIsIlpfRklOSVNIIiwiWl9CTE9DSyIsIlpfVFJFRVMiLCJaX09LIiwiWl9TVFJFQU1fRU5EIiwiWl9ORUVEX0RJQ1QiLCJaX0VSUk5PIiwiWl9TVFJFQU1fRVJST1IiLCJaX0RBVEFfRVJST1IiLCJaX01FTV9FUlJPUiIsIlpfQlVGX0VSUk9SIiwiWl9OT19DT01QUkVTU0lPTiIsIlpfQkVTVF9TUEVFRCIsIlpfQkVTVF9DT01QUkVTU0lPTiIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiIsIlpfRklMVEVSRUQiLCJaX0hVRkZNQU5fT05MWSIsIlpfUkxFIiwiWl9GSVhFRCIsIlpfREVGQVVMVF9TVFJBVEVHWSIsIlpfQklOQVJZIiwiWl9URVhUIiwiWl9VTktOT1dOIiwiWl9ERUZMQVRFRCIsIlpfTk9fRkxVU0gkMiIsIlpfRlVMTF9GTFVTSCQxIiwiWl9GSU5JU0gkMyIsIlpfQkxPQ0skMSIsIlpfT0skMyIsIlpfU1RSRUFNX0VORCQzIiwiWl9TVFJFQU1fRVJST1IkMiIsIlpfREFUQV9FUlJPUiQyIiwiWl9CVUZfRVJST1IkMSIsIlpfREVGQVVMVF9DT01QUkVTU0lPTiQxIiwiWl9ERUZBVUxUX1NUUkFURUdZJDEiLCJaX0RFRkxBVEVEJDIiLCJNQVhfTUFUQ0giLCJNSU5fTE9PS0FIRUFEIiwiSENSQ19TVEFURSIsIkJVU1lfU1RBVEUiLCJGSU5JU0hfU1RBVEUiLCJlcnJvckNvZGUiLCJ6ZXJvIiwiSEFTSCIsImhhc2hfc2hpZnQiLCJoYXNoX21hc2siLCJmbHVzaF9wZW5kaW5nIiwic3RhdGUiLCJhdmFpbF9vdXQiLCJwZW5kaW5nX291dCIsIm5leHRfb3V0IiwidG90YWxfb3V0IiwiZmx1c2hfYmxvY2tfb25seSIsImJsb2NrX3N0YXJ0Iiwic3Ryc3RhcnQiLCJwdXRfYnl0ZSIsInB1dFNob3J0TVNCIiwicmVhZF9idWYiLCJhdmFpbF9pbiIsIm5leHRfaW4iLCJ0b3RhbF9pbiIsImxvbmdlc3RfbWF0Y2giLCJjdXJfbWF0Y2giLCJjaGFpbl9sZW5ndGgiLCJtYXhfY2hhaW5fbGVuZ3RoIiwic2NhbiIsImJlc3RfbGVuIiwicHJldl9sZW5ndGgiLCJuaWNlX21hdGNoIiwid19zaXplIiwiX3dpbiIsIndtYXNrIiwid19tYXNrIiwic3RyZW5kIiwic2Nhbl9lbmQxIiwic2Nhbl9lbmQiLCJnb29kX21hdGNoIiwibG9va2FoZWFkIiwibWF0Y2hfc3RhcnQiLCJmaWxsX3dpbmRvdyIsIl93X3NpemUiLCJtb3JlIiwid2luZG93X3NpemUiLCJoYXNoX3NpemUiLCJpbnNfaCIsImRlZmxhdGVfZmFzdCIsImZsdXNoIiwiaGFzaF9oZWFkIiwiYmZsdXNoIiwibWF0Y2hfbGVuZ3RoIiwibWF4X2xhenlfbWF0Y2giLCJNSU5fTUFUQ0giLCJkZWZsYXRlX3Nsb3ciLCJtYXhfaW5zZXJ0IiwicHJldl9tYXRjaCIsIm1hdGNoX2F2YWlsYWJsZSIsIkNvbmZpZyIsImdvb2RfbGVuZ3RoIiwibWF4X2xhenkiLCJuaWNlX2xlbmd0aCIsIm1heF9jaGFpbiIsImNvbmZpZ3VyYXRpb25fdGFibGUiLCJtYXhfYmxvY2tfc2l6ZSIsInBlbmRpbmdfYnVmX3NpemUiLCJtYXhfc3RhcnQiLCJEZWZsYXRlU3RhdGUiLCJzdGF0dXMiLCJnemhlYWQiLCJnemluZGV4IiwibWV0aG9kIiwibGFzdF9mbHVzaCIsIndfYml0cyIsImhhc2hfYml0cyIsIkhFQVBfU0laRSIsIk1BWF9CSVRTIiwiZGVmbGF0ZVJlc2V0S2VlcCIsImRlZmxhdGVSZXNldCIsImRlZmxhdGVJbml0MiIsIndpbmRvd0JpdHMiLCJtZW1MZXZlbCIsImRlZmxhdGVfMSQyIiwiYmVnIiwib2xkX2ZsdXNoIiwidGV4dCIsImhjcmMiLCJvcyIsImxldmVsX2ZsYWdzIiwiYnN0YXRlIiwiZGVmbGF0ZV9odWZmIiwiZGVmbGF0ZV9ybGUiLCJkaWN0aW9uYXJ5IiwiZGljdExlbmd0aCIsInRtcERpY3QiLCJhdmFpbCIsIl9oYXMiLCJjb21tb24iLCJjaHVua3MiLCJTVFJfQVBQTFlfVUlBX09LIiwiX3V0ZjhsZW4iLCJtX3BvcyIsInN0cl9sZW4iLCJidWZfbGVuIiwidXRmMTZidWYiLCJjX2xlbiIsImJ1ZjJiaW5zdHJpbmciLCJ6c3RyZWFtIiwidG9TdHJpbmckMSIsIlpfTk9fRkxVU0gkMSIsIlpfRklOSVNIJDIiLCJaX09LJDIiLCJaX1NUUkVBTV9FTkQkMiIsIlpfREVGTEFURUQkMSIsIkRlZmxhdGUkMSIsImNodW5rU2l6ZSIsInJhdyIsImd6aXAiLCJlbmRlZCIsImRpY3QiLCJfZGljdF9zZXQiLCJkZWZsYXRlJDEiLCJkZWZsYXRvciIsImZsdXNoX21vZGUiLCJfZmx1c2hfbW9kZSIsIm9uRGF0YSIsIm9uRW5kIiwiZGVmbGF0ZV8xJDEiLCJEZWZsYXRlIiwiZGVmbGF0ZSIsImRlZmxhdGVSYXciLCJpbmZmYXN0IiwiX2luIiwiZG1heCIsIndzaXplIiwid2hhdmUiLCJ3bmV4dCIsInNfd2luZG93IiwiaG9sZCIsImxjb2RlIiwiZGNvZGUiLCJsbWFzayIsImRtYXNrIiwiaGVyZSIsImZyb21fc291cmNlIiwibGVuY29kZSIsImRpc3Rjb2RlIiwibGVuYml0cyIsImRpc3RiaXRzIiwiZG9sZW4iLCJtb2RlIiwiZG9kaXN0Iiwic2FuZSIsImxiYXNlIiwibGV4dCIsImRiYXNlIiwiZGV4dCIsImluZnRyZWVzIiwibGVuc19pbmRleCIsImNvZGVzIiwidGFibGVfaW5kZXgiLCJpbmNyIiwiY3VyciIsInVzZWQiLCJodWZmIiwiYmFzZV9pbmRleCIsIk1BWEJJVFMiLCJvZmZzIiwiaGVyZV9iaXRzIiwiaGVyZV9vcCIsImhlcmVfdmFsIiwiZXh0cmFfaW5kZXgiLCJaX0ZJTklTSCQxIiwiWl9PSyQxIiwiWl9TVFJFQU1fRU5EJDEiLCJaX05FRURfRElDVCQxIiwiWl9TVFJFQU1fRVJST1IkMSIsIlpfREFUQV9FUlJPUiQxIiwiWl9NRU1fRVJST1IkMSIsIlRZUEUiLCJCQUQiLCJ6c3dhcDMyIiwiSW5mbGF0ZVN0YXRlIiwiaGF2ZWRpY3QiLCJmbGFncyIsInRvdGFsIiwid2JpdHMiLCJuY29kZSIsIm5sZW4iLCJuZGlzdCIsImhhdmUiLCJsZW5keW4iLCJkaXN0ZHluIiwiYmFjayIsIndhcyIsImluZmxhdGVSZXNldEtlZXAiLCJpbmZsYXRlUmVzZXQiLCJpbmZsYXRlUmVzZXQyIiwiaW5mbGF0ZUluaXQyIiwibGVuZml4IiwiZGlzdGZpeCIsInZpcmdpbiIsImZpeGVkdGFibGVzIiwidXBkYXRld2luZG93IiwiaW5mbGF0ZV8xJDIiLCJwdXQiLCJsYXN0X2JpdHMiLCJsYXN0X29wIiwibGFzdF92YWwiLCJoYnVmIiwib3JkZXIiLCJpbmZfbGVhdmUiLCJ4ZmxhZ3MiLCJleHRyYV9sZW4iLCJkaWN0aWQiLCJnemhlYWRlciIsIkluZmxhdGUkMSIsImluZmxhdGUkMSIsImluZmxhdG9yIiwibGFzdF9hdmFpbF9vdXQiLCJuZXh0X291dF91dGY4IiwidGFpbCIsInV0ZjhzdHIiLCJpbmZsYXRlXzEkMSIsIkluZmxhdGUiLCJpbmZsYXRlIiwiaW5mbGF0ZVJhdyIsInVuZ3ppcCIsImRlZmxhdGVfMSIsIkluZmxhdGVfMSIsImluZmxhdGVfMSIsInBuZ1NpZ25hdHVyZSIsImluaXRpYWxDcmMiLCJjdXJyZW50Q3JjIiwidXBkYXRlQ3JjIiwiQ29sb3JUeXBlIiwiQ29tcHJlc3Npb25NZXRob2QiLCJGaWx0ZXJNZXRob2QiLCJJbnRlcmxhY2VNZXRob2QiLCJ1aW50MTYiLCJvc0lzTGl0dGxlRW5kaWFuIiwiUE5HRGVjb2RlciIsImNoZWNrQ3JjIiwiX2NoZWNrQ3JjIiwiX2luZmxhdG9yIiwiX3BuZyIsIl9lbmQiLCJfaGFzUGFsZXR0ZSIsIl9wYWxldHRlIiwiX2NvbXByZXNzaW9uTWV0aG9kIiwiVU5LTk9XTiIsIl9maWx0ZXJNZXRob2QiLCJfaW50ZXJsYWNlTWV0aG9kIiwiX2NvbG9yVHlwZSIsImRlY29kZVNpZ25hdHVyZSIsImRlY29kZUNodW5rIiwiZGVjb2RlSW1hZ2UiLCJkZWNvZGVJSERSIiwiZGVjb2RlUExURSIsImRlY29kZUlEQVQiLCJkZWNvZGV0Uk5TIiwiZGVjb2RldEVYdCIsImRlY29kZXBIWXMiLCJleHBlY3RlZENyYyIsImNyY0xlbmd0aCIsImFjdHVhbENyYyIsImNoZWNrQml0RGVwdGgiLCJjb2xvclR5cGUiLCJHUkVZU0NBTEUiLCJUUlVFQ09MT1VSIiwiSU5ERVhFRF9DT0xPVVIiLCJHUkVZU0NBTEVfQUxQSEEiLCJUUlVFQ09MT1VSX0FMUEhBIiwiREVGTEFURSIsInBhbGV0dGUiLCJrZXl3b3JkIiwicHB1WCIsInBwdVkiLCJ1bml0U3BlY2lmaWVyIiwicmVzb2x1dGlvbiIsIkFEQVBUSVZFIiwiTk9fSU5URVJMQUNFIiwiZGVjb2RlSW50ZXJsYWNlTnVsbCIsImJ5dGVzUGVyUGl4ZWwiLCJieXRlc1BlckxpbmUiLCJjdXJyZW50TGluZSIsIm5ld0xpbmUiLCJwcmV2TGluZSIsInVuZmlsdGVyTm9uZSIsInVuZmlsdGVyU3ViIiwidW5maWx0ZXJVcCIsInVuZmlsdGVyQXZlcmFnZSIsInVuZmlsdGVyUGFldGgiLCJ1aW50MTZEYXRhIiwicGFldGhQcmVkaWN0b3IiLCJwYSIsInBiIiwicGMiLCJkZWZhdWx0WmxpYk9wdGlvbnMiLCJQTkdFbmNvZGVyIiwiX3psaWJPcHRpb25zIiwiemxpYiIsIl9jaGVja0RhdGEiLCJlbmNvZGVTaWduYXR1cmUiLCJlbmNvZGVJSERSIiwiZW5jb2RlRGF0YSIsImVuY29kZUlFTkQiLCJ3cml0ZUNyYyIsImVuY29kZUlEQVQiLCJzbG90c1BlckxpbmUiLCJ3cml0ZURhdGFCeXRlcyIsIndyaXRlRGF0YVVpbnQxNiIsImNvbXByZXNzZWQiLCJyZXR1cm5WYWx1ZSIsImdldENvbG9yVHlwZSIsInBuZyIsImNoZWNrSW50ZWdlciIsImV4cGVjdGVkU2l6ZSIsIlJlc29sdXRpb25Vbml0U3BlY2lmaWVyIiwiY2hhcnMiLCJ0b0Jhc2U2NFVSTCIsInU4Iiwic3Vic3RyaW5nIiwiSW1hZ2VEYXRhIiwiRE9NSW1hZ2UiLCJjcmVhdGVDYW52YXMiLCJlbmNvZGVKcGVnIiwiZ2V0UkdCQURhdGEiLCJlbmNvZGVQbmciLCJleHBvcnRNZXRob2RzIiwic2F2ZSIsInVzZUNhbnZhcyIsImVuY29kZXJPcHRpb25zIiwiZ3JvdXBzIiwiZ2V0Q2FudmFzIiwicG5nU3RyZWFtIiwianBlZ1N0cmVhbSIsImNyZWF0ZVdyaXRlU3RyZWFtIiwid3JpdGVGaWxlIiwiZGF0YVVybCIsImdldFR5cGUiLCJ0b0J1ZmZlciIsInRvQmFzZTY0IiwiYXN5bmMiLCJjbGFtcGVkIiwicHV0SW1hZ2VEYXRhIiwiY29tcHV0ZWRQcm9wZXJ0eURlc2NyaXB0b3IiLCJHUkVZIiwiUkdCIiwiSFNMIiwiSFNWIiwiQ01ZSyIsIkJJTkFSWSIsIlJHQkEiLCJraW5kcyIsImNvbG9yTW9kZWwiLCJ2YWxpZEJpdERlcHRoIiwiX2hhc01hcCIsInN0cmluZ1RhYmxlIiwiZHVtbXlTdHJpbmciLCJMendEZWNvZGVyIiwic3RyaXBBcnJheSIsImN1cnJlbnRCaXQiLCJ0YWJsZUxlbmd0aCIsImN1cnJlbnRCaXRMZW5ndGgiLCJvdXREYXRhIiwib2xkQ29kZSIsImdldE5leHRDb2RlIiwiaW5pdGlhbGl6ZVRhYmxlIiwid3JpdGVTdHJpbmciLCJzdHJpbmdGcm9tQ29kZSIsImlzSW5UYWJsZSIsImFkZFN0cmluZ1RvVGFibGUiLCJvdXRTdHJpbmciLCJvdXRBcnJheSIsImRlIiwiZWYiLCJmZyIsImRnIiwiY2h1bmsxIiwiY2h1bmsyIiwiZGVjb21wcmVzc0x6dyIsIlRpZmZJZmQiLCJleHRyYVNhbXBsZXMiLCJhc3NvY2lhdGVkQWxwaGEiLCJ0b3RhbENvbG9ycyIsImNvbG9yTWFwIiwiZGVjb21wcmVzc1psaWIiLCJzdHJpcFVpbnQ4IiwiaW5mbGF0ZWQiLCJpc011bHRpUGFnZSIsInBhZ2VDb3VudCIsInZhbHVlQnl0ZUxlbmd0aCIsImFwcGx5UHJlZGljdG9yIiwiY29udmVydEFscGhhIiwicmVtYWluaW5nUGl4ZWxzIiwiZGF0YVRvRmlsbCIsImZpbGxVbmNvbXByZXNzZWQiLCJhcHBseUhvcml6b250YWxEaWZmZXJlbmNpbmc4Qml0IiwiYXBwbHlIb3Jpem9udGFsRGlmZmVyZW5jaW5nMTZCaXQiLCJhbHBoYVZhbHVlIiwibWF0Y2hBbmRDcm9wIiwiYWxnb3JpdGhtIiwiaWdub3JlQm9yZGVyIiwiY2hlY2tQcm9jZXNzYWJsZSIsIm1hdGNoVG9QcmV2aW91cyIsInJlbGF0aXZlUG9zaXRpb24iLCJnZXRCZXN0TWF0Y2giLCJib3JkZXIiLCJ0b3BTaGlmdCIsImJvdHRvbVNoaWZ0IiwibmV3SW1hZ2VzIiwiU3RhY2siLCJjdXJyZW50VG90YWwiLCJoaXN0b2dyYW1zIiwiZ2V0SGlzdG9ncmFtcyIsIm1heFNsb3RzIiwiZ2V0SGlzdG9ncmFtIiwic2Vjb25kSGlzdG9ncmFtIiwiaGlzdG9ncmFtTGVuZ3RoIiwic2Vjb25kSGlzdG9ncmFtcyIsImF2ZXJhZ2VJbWFnZSIsIm1heEltYWdlIiwibWluSW1hZ2UiLCJpbWFnZXMiLCJjb21wdXRlZCIsInVybHMiLCJpblBsYWNlIiwicmV0dXJuVGhpcyIsInBhcnRpYWxBcmdzIiwicHJvY2Vzc05hbWUiLCJzYW1lU2l6ZSIsInNhbWVBbHBoYSIsInNhbWVCaXREZXB0aCIsInNhbWVDb2xvck1vZGVsIiwic2FtZU51bWJlckNoYW5uZWxzIiwic3BlY2llcyIsIm5ld1N0YWNrIiwiZXh0ZW5kTWV0aG9kIiwiaXNEYXRhVVJMIiwibG9hZEJpbmFyeSIsImJhc2U2NFVybCIsInBpeGVscyIsInBpeGVsc1BlckJ5dGUiLCJoYXNBbHBoYSIsImRhdGFJbmRleCIsInBhbGV0dGVWYWx1ZSIsImxvYWRQTkdGcm9tUGFsZXR0ZSIsImxvYWRQTkciLCJkZWNvZGVkRXhpZiIsIm1ldGEiLCJnZXRNZXRhZGF0YSIsImpwZWciLCJsb2FkSlBFRyIsImdldEltYWdlRnJvbUlGRCIsImxvYWRUSUZGIiwibG9hZEdlbmVyaWMiLCJnZXRCYXNlNjQiLCJtZXRhZGF0YSIsInB0ciIsImNvbG9yIiwiZ2V0SW1hZ2VEYXRhIiwidmFsdWVNZXRob2RzIiwiZ2V0VmFsdWVYWSIsImNoYW5uZWwiLCJzZXRWYWx1ZVhZIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsImdldFBpeGVsWFkiLCJnZXRQaXhlbCIsInNldFBpeGVsWFkiLCJzZXRQaXhlbCIsImdldEltYWdlUGFyYW1ldGVycyIsImdldE91dHB1dEltYWdlIiwidGhpc0ltYWdlIiwibmV3UGFyYW1ldGVycyIsImludGVybmFsT3B0aW9ucyIsInJlcXVpcmVtZW50cyIsInByb3BlcnR5IiwiZ2V0T3V0cHV0SW1hZ2VPckluUGxhY2UiLCJhYnNvbHV0ZSIsImludmVydCIsImludmVydEJpbmFyeSIsImludmVydENvbG9yIiwiY29weUFscGhhQ2hhbm5lbCIsImZsaXBYIiwib2Zmc2V0WSIsInBvc0N1cnJlbnQiLCJwb3NPcHBvc2l0ZSIsImZsaXBZIiwiYmx1ckZpbHRlciIsInJhZGl1cyIsImNvbnZvbHV0aW9uIiwidmFsaWRhdGVBcnJheU9mQ2hhbm5lbHMiLCJhbGxvd0FscGhhIiwiZGVmYXVsdEFscGhhIiwiYWxsQ2hhbm5lbHMiLCJ2YWxpZGF0ZUNoYW5uZWwiLCJ2YWxpZGF0ZUNoYW5uZWxzIiwibWVkaWFuRmlsdGVyIiwibmV3SW1hZ2UiLCJzZXRCb3JkZXIiLCJnYXVzc2lhbkZpbHRlciIsInNpZ21hWCIsInNjYWxlMlgiLCJnZXRLZXJuZWwiLCJTT0JFTF9YIiwiU09CRUxfWSIsIlNDSEFSUl9YIiwiU0NIQVJSX1kiLCJjbGFtcCIsImRpcmVjdENvbnZvbHV0aW9uIiwiY29udm9sdXRpb25TZXBhcmFibGUiLCJzZXBhcmF0ZWRLZXJuZWwiLCJjcmVhdGVPcHRpb25zIiwiaGFsZkhlaWdodCIsImhhbGZXaWR0aCIsImtlcm5lbFdpZHRoIiwibmV3S2VybmVsIiwidmFsaWRhdGVLZXJuZWwiLCJzdmQiLCJnZXRTZXBhcmF0ZWRLZXJuZWwiLCJ0bXBSZXN1bHQiLCJpc0NsYW1wZWQiLCJ0bXBEYXRhIiwiZ3JhZGllbnRGaWx0ZXIiLCJrZXJuZWxYIiwia2VybmVsWSIsImdYIiwiZ1kiLCJzb2JlbEZpbHRlciIsInNjaGFyckZpbHRlciIsImRlbHRhIiwicHJvY2Vzc0ltYWdlIiwiY2hlY2tOdW1iZXJBcnJheSIsInN1YnRyYWN0SW1hZ2UiLCJvdGhlckltYWdlIiwiaHlwb3QiLCJwcmVkaWN0IiwiX3ByZWRpY3QiLCJ0cmFpbiIsInRvTGFUZVgiLCJzY29yZSIsInhTdW0iLCJ5U3VtIiwiY2hpMiIsInJtc2QiLCJ4U3F1YXJlZCIsInlTcXVhcmVkIiwieFkiLCJsYW1iZGEiLCJrZXJuZWxPcHRpb25zIiwiY29tcHV0ZUNvZWZmaWNpZW50IiwiS2VybmVsUmlkZ2VSZWdyZXNzaW9uIiwib3V0cHV0cyIsIm5ld0lucHV0cyIsImpzb24iLCJiYWNrZ3JvdW5kIiwiY29vcmRpbmF0ZXMiLCJtb2RlbCIsImFsbENvb3JkaW5hdGVzIiwiZGlsYXRlIiwiaXRlcmF0aW9ucyIsIm9ubHlPbmVzIiwiZGlsYXRlT25jZUJpbmFyeU9ubHlPbmVzIiwiZGlsYXRlT25jZUJpbmFyeSIsImRpbGF0ZU9uY2VHcmV5T25seU9uZXMiLCJkaWxhdGVPbmNlR3JleSIsImltZyIsImtlcm5lbEhlaWdodCIsInJhZGl1c1giLCJyYWRpdXNZIiwiamoiLCJtYXhMaXN0IiwiaW50TG9vcCIsImVyb2RlIiwiZXJvZGVPbmNlQmluYXJ5T25seU9uZXMiLCJlcm9kZU9uY2VCaW5hcnkiLCJlcm9kZU9uY2VHcmV5T25seU9uZXMiLCJlcm9kZU9uY2VHcmV5IiwibWluTGlzdCIsInRvcEhhdCIsIm9wZW5JbWFnZSIsImJsYWNrSGF0IiwiY2xvc2VJbWFnZSIsImNsb3NlIiwibW9ycGhvbG9naWNhbEdyYWRpZW50IiwiZGlsYXRlZEltYWdlIiwiZXJvZGVkSW1hZ2UiLCJkaXN0YW5jZTJQb2ludHMiLCJjcm9zc1ZlY3QiLCJkb3RWZWN0IiwicHJvamVjdGlvblBvaW50IiwibmV3WCIsIm5ld1kiLCJ3YXJwaW5nRm91clBvaW50cyIsInB0cyIsImNhbGN1bGF0ZVJhdGlvIiwid2lkdGhSZWN0IiwiaGVpZ2h0UmVjdCIsInB0MSIsInB0MiIsInB0MyIsInB0NCIsInF1YWRyaWxhdGVyaWFsIiwidGwiLCJ0ciIsImJsIiwibWluWCIsImluZGV4TWluWCIsIm1pblgyIiwiaW5kZXhNaW5YMiIsIm9yZGVyNFBvaW50cyIsIndpZHRoSW1hZ2UiLCJoZWlnaHRJbWFnZSIsImZpbmFsVyIsImZpbmFsSCIsInUwIiwiYXJWaXMiLCJrMiIsImszIiwibjMiLCJuMjEiLCJuMjIiLCJuMjMiLCJuMzEiLCJuMzIiLCJuMzMiLCJBdCIsIkF0aSIsIm4yUiIsIm4zUiIsImFyUmVhbCIsImNvbXB1dGVXaWR0aEFuZEhlaWd0aCIsIlgxIiwiWTEiLCJYMiIsIlkyIiwiWDMiLCJZMyIsIlg0IiwiWTQiLCJ4MyIsInkzIiwieDQiLCJ5NCIsIlh0Iiwic2V0TWF0cml4IiwieFdpZHRoIiwiakxlZnQiLCJqTCIsImNyb3BBbHBoYSIsImZpbmRMZWZ0IiwiZmluZFRvcCIsImZpbmRCb3R0b20iLCJmaW5kUmlnaHQiLCJjaGVja0NoYW5uZWwiLCJ2YWxpZEludGVycG9sYXRpb25zIiwibmVhcmVzdG5laWdoYm9yIiwibmVhcmVzdG5laWdoYm91ciIsImJpbGluZWFyIiwiY2hlY2tJbnRlcnBvbGF0aW9uIiwiaW50ZXJwb2xhdGlvbiIsIm5lYXJlc3ROZWlnaGJvciIsIm5ld1dpZHRoIiwibmV3SGVpZ2h0Iiwid1JhdGlvIiwiaFJhdGlvIiwicHJlc2VydmVBc3BlY3RSYXRpbyIsImludGVycG9sYXRpb25Ub1VzZSIsImdldEZhY3RvciIsImZhY3RvckRpbWVuc2lvbnMiLCJzaGlmdFgiLCJzaGlmdFkiLCJoc3YiLCJyZWQiLCJncmVlbiIsImJsdWUiLCJodWUiLCJzYXR1cmF0aW9uIiwiaHNsIiwibHVtaW5hbmNlIiwiY215ayIsImJsYWNrIiwiY3lhbiIsIm1hZ2VudGEiLCJ5ZWxsb3ciLCJyZ2JhOCIsIm1ldGhvZHMiLCJsdW1hNzA5IiwibHVtYTYwMSIsIm1heGltdW0iLCJtaW5pbXVtIiwiYXZlcmFnZSIsIm1pbm1heCIsImxpZ2h0bmVzcyIsIm5hbWVzIiwiZ3JleSIsImtlZXBBbHBoYSIsIm1lcmdlQWxwaGEiLCJiaW1vZGFsVGVzdCIsImlIaXN0byIsIm1vZGVzIiwic3VtQSIsInN1bUIiLCJzdW1DIiwic21vb3RoZWQiLCJhdUhpc3RvZ3JhbSIsImlzQmltb2RhbCIsInBlYWtzIiwicGFydGlhbFN1bSIsImVuZEluZGV4IiwiaHVhbmciLCJmaXJzdEJpbiIsImloIiwibGFzdEJpbiIsInRlcm0iLCJtdTAiLCJzdW1QaXgiLCJudW1QaXgiLCJtdTEiLCJtaW5FbnQiLCJNQVhfVkFMVUUiLCJpdCIsIm11WCIsImVudCIsImludGVybW9kZXMiLCJ0dCIsImlzb2RhdGEiLCJ0b3RoIiwidG90bCIsImxpIiwic3VtQmFjayIsInN1bU9iaiIsIm51bUJhY2siLCJudW1PYmoiLCJvbGRUaHJlc2giLCJuZXdUaHJlc2giLCJtZWFuQmFjayIsIm1lYW5PYmoiLCJ0b2xlcmFuY2UiLCJtYXhlbnRyb3B5Iiwibm9ybUhpc3RvIiwiUDEiLCJQMiIsInRvdEVudCIsImVudEJhY2siLCJlbnRPYmoiLCJtYXhFbnQiLCJtaW5lcnJvciIsIm11IiwidGF1MiIsIncwIiwidzEiLCJ3MiIsInNxdGVybSIsIlRwcmV2Iiwic3VtQTEiLCJzdW1BMiIsInN1bUIxIiwic3VtQjIiLCJzdW1DMSIsImhpc3RvZ3JhbUNvcHkiLCJoaXN0b2dyYW1CaW1vZGFsIiwibWluaW11bUJldHdlZW5QZWVrcyIsIm1vbWVudHMiLCJwMCIsImNkIiwiYzAiLCJ6MCIsIm5vcm1hbGl6ZWRIaXN0b2dyYW0iLCJvdHN1IiwiaGlzdG9ncmFtQ291bnRzIiwid0IiLCJ3RiIsIm1GIiwiYmV0d2VlbiIsInBlcmNlbnRpbGUiLCJhdmVjIiwicmVueWllbnRyb3B5Iiwib3B0VGhyZXNob2xkIiwidGhyZXNob2xkMSIsInRocmVzaG9sZDIiLCJ0aHJlc2hvbGQzIiwibWF4RW50MSIsIm1heEVudDIiLCJtYXhFbnQzIiwiZW50QmFjazEiLCJlbnRCYWNrMiIsImVudEJhY2szIiwiZW50T2JqMSIsImVudE9iajIiLCJlbnRPYmozIiwidG90RW50MSIsInRvdEVudDIiLCJ0b3RFbnQzIiwidFN0YXJzIiwib21lZ2EiLCJzaGFuYmhhZyIsInRyaWFuZ2xlIiwibWluMiIsIm55IiwiaW52ZXJ0ZWQiLCJzcGxpdERpc3RhbmNlIiwibmV3RGlzdGFuY2UiLCJ5ZW4iLCJQMVNxIiwiUDJTcSIsImNyaXQiLCJtYXhDcml0IiwiVEhSRVNIT0xEIiwidXNlQWxwaGEiLCJwYWQiLCJmcm9tSW1hZ2UiLCJ0b0ltYWdlIiwiZnJvbVdpZHRoIiwiZnJvbUhlaWdodCIsInRvV2lkdGgiLCJjb2xvckRlcHRoIiwibmV3Q29sb3JEZXB0aCIsInJvdGF0ZUZyZWUiLCJkZWdyZWVzIiwicmFkaWFucyIsImluY3JlbWVudFgiLCJpbmNyZW1lbnRZIiwicm90YXRlTmVhcmVzdE5laWdoYm9yIiwic3RyaWRlIiwieERpZmYiLCJ5RGlmZiIsInJvdGF0ZUJpbGluZWFyIiwicm90YXRlIiwicm90YXRlUmlnaHQiLCJyb3RhdGUxODAiLCJyb3RhdGVMZWZ0IiwibmV3TWF4SGVpZ2h0IiwibmV3TWF4V2lkdGgiLCJ0b0luc2VydCIsInBhcmFtZXRlcnMiLCJtYXhZIiwibWF4WCIsImxlZnRSaWdodFNpemUiLCJ0b3BCb3R0b21TaXplIiwicHJlc2VydmVBbHBoYSIsImdldENoYW5uZWwiLCJjb21iaW5lQ2hhbm5lbHMiLCJkZWZhdWx0Q29tYmluZU1ldGhvZCIsInNldENoYW5uZWwiLCJnZXRTaW1pbGFyaXR5IiwibWluWSIsInN1bVRoaXMiLCJzdW1JbWFnZSIsImluZGV4VGhpcyIsIm11bHRpcGxpZXJYIiwibXVsdGlwbGllclkiLCJpbmRleEltYWdlIiwiZ2V0UGl4ZWxzR3JpZCIsInNhbXBsaW5nIiwicGFpbnRlZCIsInhTYW1wbGluZyIsInlTYW1wbGluZyIsInh5UyIsInpTIiwieFN0ZXAiLCJ5U3RlcCIsImN1cnJlbnRYIiwiY3VycmVudFkiLCJ0b1JldHVybiIsInBhaW50UG9pbnRzIiwiZGVmYXVsdFZhbHVlIiwic2ltaWxhcml0eU1hdHJpeCIsIm1pZGRsZVgiLCJtaWRkbGVZIiwidGhlRW5kIiwidG9DYWxjdWxhdGVQb3NpdGlvbnMiLCJsb2NhbFNlYXJjaCIsInNpbWlsYXJpdHkiLCJsb2NhbE1heCIsImNoZWNrUm93IiwiYmVnaW4iLCJjaGVja0NvbHVtbiIsImdldE1hdHJpeCIsImdldFBpeGVsc0FycmF5IiwiZ2V0SW50ZXJzZWN0aW9uIiwibWFzazIiLCJtYXNrMSIsImNsb3Nlc3RQYXJlbnQiLCJnZXRDbG9zZXN0Q29tbW9uUGFyZW50Iiwic3RhcnRQb3MxIiwiZ2V0UmVsYXRpdmVQb3NpdGlvbiIsImRlZmF1bHRGdXJ0aGVyIiwiYWxsUmVsUG9zMSIsImdldFJlbGF0aXZlUG9zaXRpb25Gb3JBbGxQaXhlbHMiLCJzdGFydFBvczIiLCJhbGxSZWxQb3MyIiwiY29tbW9uU3VyZmFjZSIsInBvc2l0aW9uQXJyYXkxIiwicG9zaXRpb25BcnJheTIiLCJnZXRDb21tb25TdXJmYWNlIiwiaW50ZXJzZWN0aW9uIiwid2hpdGVQaXhlbHNNYXNrMSIsIndoaXRlUGl4ZWxzTWFzazIiLCJjb21tb25XaGl0ZVBpeGVscyIsImN1cnJlbnRSZWxhdGl2ZVBvcyIsInJlYWxQb3MxIiwicmVhbFBvczIiLCJ2YWx1ZUJpdE1hc2sxIiwidmFsdWVCaXRNYXNrMiIsInN0YXJ0UG9zaXRpb24iLCJyZWxhdGl2ZVBvc2l0aW9ucyIsIm9yaWdpbmFsUG9zIiwiZnVydGhlc3RQYXJlbnQiLCJkZXB0aE1hc2sxIiwiZ2V0RGVwdGgiLCJkZXB0aE1hc2syIiwiZ2V0RnVydGhlc3RQYXJlbnQiLCJsb2NhbE1pbiIsImxvd1RocmVzaG9sZCIsImhpZ2hUaHJlc2hvbGQiLCJnYXVzc2lhbkJsdXIiLCJHeCIsIkd5IiwiY29udk9wdGlvbnMiLCJjYW5ueUVkZ2UiLCJicmlnaHRuZXNzIiwiZ2ZPcHRpb25zIiwiZ2YiLCJncmFkaWVudFgiLCJncmFkaWVudFkiLCJubXMiLCJlZGdlcyIsImZpbmFsSW1hZ2UiLCJhdGFuMiIsImN1cnJlbnRObXMiLCJjdXJyZW50RWRnZSIsImN1cnJlbnRQaXhlbHMiLCJuZXdQaXhlbHMiLCJjYW5ueUVkZ2VEZXRlY3RvciIsImV4dHJhY3QiLCJmbG9vZEZpbGwiLCJOb2RlIiwiX2V4dGVuZHMiLCJoc2wycmdiIiwiaHNsMmhzdiIsInJnYiIsImhzdjJyZ2IiLCJjb2xvcnMiLCJhbGljZWJsdWUiLCJhbnRpcXVld2hpdGUiLCJhcXVhIiwiYXF1YW1hcmluZSIsImF6dXJlIiwiYmVpZ2UiLCJiaXNxdWUiLCJibGFuY2hlZGFsbW9uZCIsImJsdWV2aW9sZXQiLCJicm93biIsImJ1cmx5d29vZCIsImNhZGV0Ymx1ZSIsImNoYXJ0cmV1c2UiLCJjaG9jb2xhdGUiLCJjb3JhbCIsImNvcm5mbG93ZXJibHVlIiwiY29ybnNpbGsiLCJjcmltc29uIiwiZGFya2JsdWUiLCJkYXJrY3lhbiIsImRhcmtnb2xkZW5yb2QiLCJkYXJrZ3JheSIsImRhcmtncmVlbiIsImRhcmtncmV5IiwiZGFya2toYWtpIiwiZGFya21hZ2VudGEiLCJkYXJrb2xpdmVncmVlbiIsImRhcmtvcmFuZ2UiLCJkYXJrb3JjaGlkIiwiZGFya3JlZCIsImRhcmtzYWxtb24iLCJkYXJrc2VhZ3JlZW4iLCJkYXJrc2xhdGVibHVlIiwiZGFya3NsYXRlZ3JheSIsImRhcmtzbGF0ZWdyZXkiLCJkYXJrdHVycXVvaXNlIiwiZGFya3Zpb2xldCIsImRlZXBwaW5rIiwiZGVlcHNreWJsdWUiLCJkaW1ncmF5IiwiZGltZ3JleSIsImRvZGdlcmJsdWUiLCJmaXJlYnJpY2siLCJmbG9yYWx3aGl0ZSIsImZvcmVzdGdyZWVuIiwiZnVjaHNpYSIsImdhaW5zYm9ybyIsImdob3N0d2hpdGUiLCJnb2xkIiwiZ29sZGVucm9kIiwiZ3JheSIsImdyZWVueWVsbG93IiwiaG9uZXlkZXciLCJob3RwaW5rIiwiaW5kaWFucmVkIiwiaW5kaWdvIiwiaXZvcnkiLCJraGFraSIsImxhdmVuZGVyIiwibGF2ZW5kZXJibHVzaCIsImxhd25ncmVlbiIsImxlbW9uY2hpZmZvbiIsImxpZ2h0Ymx1ZSIsImxpZ2h0Y29yYWwiLCJsaWdodGN5YW4iLCJsaWdodGdvbGRlbnJvZHllbGxvdyIsImxpZ2h0Z3JheSIsImxpZ2h0Z3JlZW4iLCJsaWdodGdyZXkiLCJsaWdodHBpbmsiLCJsaWdodHNhbG1vbiIsImxpZ2h0c2VhZ3JlZW4iLCJsaWdodHNreWJsdWUiLCJsaWdodHNsYXRlZ3JheSIsImxpZ2h0c2xhdGVncmV5IiwibGlnaHRzdGVlbGJsdWUiLCJsaWdodHllbGxvdyIsImxpbWUiLCJsaW1lZ3JlZW4iLCJsaW5lbiIsIm1hcm9vbiIsIm1lZGl1bWFxdWFtYXJpbmUiLCJtZWRpdW1ibHVlIiwibWVkaXVtb3JjaGlkIiwibWVkaXVtcHVycGxlIiwibWVkaXVtc2VhZ3JlZW4iLCJtZWRpdW1zbGF0ZWJsdWUiLCJtZWRpdW1zcHJpbmdncmVlbiIsIm1lZGl1bXR1cnF1b2lzZSIsIm1lZGl1bXZpb2xldHJlZCIsIm1pZG5pZ2h0Ymx1ZSIsIm1pbnRjcmVhbSIsIm1pc3R5cm9zZSIsIm1vY2Nhc2luIiwibmF2YWpvd2hpdGUiLCJuYXZ5Iiwib2xkbGFjZSIsIm9saXZlIiwib2xpdmVkcmFiIiwib3JhbmdlIiwib3JhbmdlcmVkIiwib3JjaGlkIiwicGFsZWdvbGRlbnJvZCIsInBhbGVncmVlbiIsInBhbGV0dXJxdW9pc2UiLCJwYWxldmlvbGV0cmVkIiwicGFwYXlhd2hpcCIsInBlYWNocHVmZiIsInBlcnUiLCJwaW5rIiwicGx1bSIsInBvd2RlcmJsdWUiLCJwdXJwbGUiLCJyZWJlY2NhcHVycGxlIiwicm9zeWJyb3duIiwicm95YWxibHVlIiwic2FkZGxlYnJvd24iLCJzYWxtb24iLCJzYW5keWJyb3duIiwic2VhZ3JlZW4iLCJzZWFzaGVsbCIsInNpZW5uYSIsInNpbHZlciIsInNreWJsdWUiLCJzbGF0ZWJsdWUiLCJzbGF0ZWdyYXkiLCJzbGF0ZWdyZXkiLCJzbm93Iiwic3ByaW5nZ3JlZW4iLCJzdGVlbGJsdWUiLCJ0ZWFsIiwidGhpc3RsZSIsInRvbWF0byIsInR1cnF1b2lzZSIsInZpb2xldCIsIndoZWF0Iiwid2hpdGUiLCJ3aGl0ZXNtb2tlIiwieWVsbG93Z3JlZW4iLCJjc3MyYXJyYXkiLCJuYW1lZCIsImhleDMiLCJoZXg2IiwicmdiYSQxIiwiaHNsYSIsImh1ZTJyZ2IiLCJnZXRDb2xvcnMiLCJyYW5kb21Db2xvcnMiLCJudW1iZXJDb2xvcnMiLCJudW1Db2xvcnMiLCJnZXREaXN0aW5jdENvbG9ycyIsInBhaW50TGFiZWxzIiwibGFiZWxzIiwicG9zaXRpb25zIiwidHJhbnNsYXRlIiwicmVzdG9yZSIsInBhaW50TWFza3MiLCJtYXNrcyIsImxhYmVsc1Bvc2l0aW9uIiwibGFiZWxDb2xvciIsImxhYmVsRm9udCIsInplcm9zTWF0cml4IiwiY3Jvc3MiLCJzbWFsbENyb3NzIiwiU2hhcGUiLCJzaGFwZSIsImZpbGxlZCIsInJlY3RhbmdsZSIsInlFdmVuIiwieEV2ZW4iLCJiMiIsImVsbGlwc2UiLCJnZXRQb2ludHMiLCJwb2ludHMiLCJnZXRNYXNrIiwic2hhcGVQaXhlbHMiLCJudW1iZXJDaGFubmVscyIsInhQIiwieVAiLCJ4UyIsInlTIiwicGFpbnRQb2x5bGluZSIsImR4IiwiZHkiLCJzdGVwcyIsInhJbmNyZW1lbnQiLCJ5SW5jcmVtZW50IiwieFBvaW50IiwieVBvaW50IiwicGFpbnRQb2x5bGluZXMiLCJwb2x5bGluZXMiLCJvcHRpb25zQ29weSIsInBhaW50UG9seWdvbiIsImZpbHRlcmVkUG9pbnRzIiwiZmluYWxQb2ludHMiLCJkZWxldGVEb3VibGUiLCJtYXRyaXhCaW5hcnkiLCJsaW5lQmV0d2VlblR3b1BvaW50cyIsImlzQXRUaGVSaWdodE9mVGhlTGluZSIsInZlcnRpY2FsIiwiY29lZmZBIiwieGxpbmUiLCJwYWludFBvbHlnb25zIiwicG9seWdvbnMiLCJnZXRDaGFubmVsSGlzdG9ncmFtIiwiYmxhY2tXaGl0ZUNvdW50IiwiYml0U2xvdHMiLCJiaXRTaGlmdCIsImFscGhhQ2hhbm5lbERpZmYiLCJnZXRDb2xvckhpc3RvZ3JhbSIsIm5iU2xvdHMiLCJuYlNsb3RzQ2hlY2siLCJmYWN0b3IyIiwiZmFjdG9yMSIsInNsb3QiLCJnZXRNb21lbnQiLCJ4UG93ZXIiLCJ5UG93ZXIiLCJsb2NhbE1heGltYSIsInJlZ2lvbiIsInJlbW92ZUNsb3NlUG9pbnRzIiwibWF4RXF1YWxzIiwibWFza0V4cGVjdGVkVmFsdWUiLCJuYkVxdWFscyIsImN1cnJlbnRWYWx1ZSIsImV4dGVuZGVkUG9pbnRzIiwidGFyZ2V0SW1hZ2UiLCJjdXJyZW50SW1hZ2UiLCJjb3VudEFscGhhUGl4ZWxzIiwibW9ub3RvbmVDaGFpbkNvbnZleEh1bGwiLCJzb3J0ZWQiLCJieVhUaGVuWSIsImN3IiwicDMiLCJwb2ludDEiLCJwb2ludDIiLCJkaWZmZXJlbmNlIiwic3JjUG9pbnRzIiwiZGVzdFBvaW50cyIsInBlcmltZXRlciIsInZlcnRpY2VzIiwiZnJvbVgiLCJmcm9tWSIsInRvWCIsInRvWSIsInN1cmZhY2UiLCJ4TWluIiwieU1pbiIsInhNYXgiLCJ5TWF4IiwibWluaW1hbEJvdW5kaW5nUmVjdGFuZ2xlIiwib3JpZ2luYWxQb2ludHMiLCJtYnIiLCJtaW5TdXJmYWNlIiwibWluU3VyZmFjZUFuZ2xlIiwiZ2V0QW5nbGUiLCJhWCIsImFZIiwiYlgiLCJiWSIsInRVbmRlZmluZWQiLCJ0TWluIiwidE1heCIsImNYIiwiY1kiLCJwTWluIiwicE1heCIsImN1cnJlbnRTdXJmYWNlIiwiUm9pIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsIm1lYW5YIiwibWVhblkiLCJjb250b3VyTWFzayIsImJveE1hc2siLCJmaWxsZWRNYXNrIiwiY2VudGVyTWFzayIsIm1ickZpbGxlZE1hc2siLCJjb252ZXhIdWxsRmlsbGVkTWFzayIsImNvbnZleEh1bGxNYXNrIiwibWJyTWFzayIsImZlcmV0TWFzayIsInJhdGlvIiwiX2NvbXB1dEV4dGVybmFsSURzIiwiYm9yZGVycyIsImJvcmRlcklEcyIsImxlbmd0aHMiLCJib3JkZXJMZW5ndGhzIiwiZXh0ZXJuYWxJRHMiLCJleHRlcm5hbExlbmd0aHMiLCJpbnRlcm5hbHMiLCJpbnRlcm5hbElEcyIsIl9jb21wdXRlQm9yZGVySURzIiwicm9pIiwicm9pTWFwIiwic3Vycm91ZGluZ0lEcyIsInN1cnJvdW5kaW5nQm9yZGVycyIsInZpc2l0ZWREYXRhIiwibmVpZ2hib3VyIiwic3Vycm91bmRpbmdCb3JkZXIiLCJpZHMiLCJnZXRCb3JkZXJzIiwiYm94SURzIiwic3Vycm91bmRpbmdJRHMiLCJnZXRCb3hJRHMiLCJpbnRlcm5hbCIsImdldEludGVybmFsSURzIiwiYm94IiwidG9wQm90dG9tIiwibGVmdFJpZ2h0IiwiZ2V0Qm94IiwiZXh0ZXJuYWwiLCJnZXRFeHRlcm5hbCIsImhvbGVzSW5mbyIsImdldEhvbGVzSW5mbyIsImdldEJvcmRlciIsImNvbnZleEh1bGwiLCJjYWxjdWxhdGlvblBvaW50cyIsInBvbHlsaW5lIiwic2Vjb25kIiwidGhpcmQiLCJlbG9uZ2F0aW9uIiwiZmlsbFJhdGlvIiwiZmVyZXREaWFtZXRlcnMiLCJtaW5MaW5lIiwibWF4TGluZSIsInRlbXBvcmFyeVBvaW50cyIsIm1pbldpZHRoQW5nbGUiLCJjdXJyZW50V2lkdGgiLCJjdXJyZW50TWluTGluZSIsImFic1dpZHRoIiwibWF4U3F1YXJlZFdpZHRoIiwiY3VycmVudFNxdWFyZWRXaWR0aCIsImVxcGMiLCJwZXJpbWV0ZXJJbmZvIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwibmJBcm91bmQiLCJnZXRQZXJpbWV0ZXJJbmZvIiwiaW5mbyIsInBlZCIsIm1pbk1heCIsIm1pbk1heFZhbHVlcyIsIm1vdmVUb1plcm9aZXJvIiwibWF4TGVuZ3RoUG9pbnRzIiwibWF4TGVuZ3RoIiwiY3VycmVudE1MIiwicm91bmRuZXNzIiwic3BoZXJpY2l0eSIsInNvbGlkaXR5IiwibWJyV2lkdGgiLCJtYnJIZWlnaHQiLCJtYnJTdXJmYWNlIiwiZmVyZXREaWFtZXRlck1pbiIsImZlcmV0RGlhbWV0ZXJNYXgiLCJSb2lMYXllciIsImNyZWF0ZVJvaSIsIm1hcElEcyIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJyb2lzIiwibWFwSUQiLCJyb2lBcnJheSIsIm1lcmdlUm9pIiwibWluQ29tbW9uQm9yZGVyTGVuZ3RoIiwibWF4Q29tbW9uQm9yZGVyTGVuZ3RoIiwibWluQ29tbW9uQm9yZGVyUmF0aW8iLCJtYXhDb21tb25Cb3JkZXJSYXRpbyIsImNoZWNrRnVuY3Rpb24iLCJjdXJyZW50SW5mbyIsImN1cnJlbnRJRCIsIm5laWdoYm91cklEIiwiY29tbW9uQm9yZGVyTGVuZ3RoIiwibmV3TWFwIiwib2xkVG9OZXciLCJuZWlnaGJvdXJJRHMiLCJuZXdOZWlnaGJvdXJJRCIsIm5ld0N1cnJlbnRJRCIsInNtYWxsZXJJRCIsImxhcmdlcklEIiwib2xkVG9OZXdBcnJheSIsIm5ld1ZhbHVlIiwiUm9pTWFwIiwiTUFYX1NBRkVfSU5URUdFUiIsIk1JTl9TQUZFX0lOVEVHRVIiLCJib3JkZXJJbmZvIiwiY3VycmVudFJvaUlEIiwiaXNCb3JkZXIiLCJuZWlnaGJvdXJSb2lJRCIsIm1lcmdlUm9pcyIsIm90aGVycyIsInJvd3NJbmZvIiwiY3VycmVudFJvdyIsInBvc2l0aXZlUGl4ZWwiLCJuZWdhdGl2ZVBpeGVsIiwiemVyb1BpeGVsIiwicG9zaXRpdmVSb2kiLCJuZWdhdGl2ZVJvaSIsIm1lZGlhbkNoYW5nZSIsInBvc2l0aXZlcyIsIm5lZ2F0aXZlcyIsImNoYW5nZXMiLCJwb3NpdGl2ZVJvaUlEcyIsIm5lZ2F0aXZlUm9pSURzIiwiY29sc0luZm8iLCJjdXJyZW50Q29sIiwiZnJvbU1hc2siLCJhbGxvd0Nvcm5lcnMiLCJNQVhfQVJSQVkiLCJwb3NpdGl2ZUlEIiwibmVnYXRpdmVJRCIsInhUb1Byb2Nlc3MiLCJ5VG9Qcm9jZXNzIiwiYW5hbHlzZVN1cmZhY2UiLCJ0YXJnZXRTdGF0ZSIsImRpcmVjdGlvbjRYIiwiZGlyZWN0aW9uNFkiLCJuZWlnaGJvdXJzNCIsImRpcmVjdGlvbjhYIiwiZGlyZWN0aW9uOFkiLCJuZWlnaGJvdXJzOCIsImZyb21NYXNrQ29ubmVjdGVkQ29tcG9uZW50TGFiZWxpbmdBbGdvcml0aG0iLCJkaXJlY3Rpb25YIiwiZGlyZWN0aW9uWSIsIm5laWdoYm91cnNMaXN0IiwibmVpZ2hib3VycyIsImxpbmtlZCIsImN1cnJlbnRMYWJlbCIsInNtYWxsZXN0TmVpZ2hib3VyIiwiZnJvbU1heGltYSIsImFsbG93Q29ybmVyIiwib25seVRvcCIsInZhcmlhdGlvbnMiLCJ4VG9Qcm9jZXNzVG9wIiwieVRvUHJvY2Vzc1RvcCIsImZyb21Ub3AiLCJ0b1RvcCIsIm1heGltYSIsInByb2Nlc3NUb3AiLCJhcHBlbmRNYXhpbWEiLCJwcm9jZXNzIiwiY3VycmVudFRvIiwidmFsaWQiLCJ4Q2VudGVyIiwieUNlbnRlciIsImZyb21Qb2ludHMiLCJwb2ludHNUb1BhaW50Iiwic2hhcGVQb2ludHMiLCJkeHMiLCJkeXMiLCJmcm9tV2F0ZXJTaGVkIiwiZmlsbE1heFZhbHVlIiwiZ2V0TG9jYWxNYXhpbWEiLCJ0b1Byb2Nlc3MiLCJpbnRlbnNpdHkiLCJjdXJyZW50UG9pbnQiLCJjdXJyZW50VmFsdWVJbmRleCIsImN1cnJlbnROZWlnaGJvdXJJbmRleCIsIlJvaU1hbmFnZXIiLCJfaW1hZ2UiLCJfb3B0aW9ucyIsIl9sYXllcnMiLCJfcGFpbnRlZCIsInB1dE1hcCIsImdldE1hcCIsIl9hc3NlcnRMYXllcldpdGhMYWJlbCIsImdldFJvaUlkcyIsImdldFJvaXMiLCJtYXhTdXJmYWNlIiwibWluSGVpZ2h0IiwibWF4SGVpZ2h0IiwibWluUmF0aW8iLCJtYXhSYXRpbyIsImFsbFJvaXMiLCJnZXRSb2kiLCJyb2lJZCIsImdldE1hc2tzIiwiZ2V0QW5hbHlzaXNNYXNrcyIsImFuYWx5c2lzUHJvcGVydHkiLCJtYXNrUHJvcGVydHkiLCJwYWludCIsImxhYmVsUHJvcGVydHkiLCJwYXJ0IiwiZGVlcFZhbHVlIiwiaXNTdXJmYWNlIiwiaXNEaXN0YW5jZSIsInVuaXRMYWJlbCIsInBpeGVsU2l6ZSIsInNpTGFiZWwiLCJ0b0ZpeGVkIiwiYW5hbHlzaXNNYXNrcyIsImFuYWx5c2lzQ29sb3IiLCJhbmFseXNpc0FscGhhIiwicmVzZXRQYWludGVkIiwicm9pSWRzIiwiZmluZENvcnJlc3BvbmRpbmdSb2kiLCJhbGxSZWxhdGVkIiwiY3VycmVudFJvaSIsImN1cnJlbnRSZWxhdGVkIiwiY29ycmVzcG9uZGluZ1JvaXNJbmZvcm1hdGlvbiIsInJvaVNpZ24iLCJjb3JyZXNwb25kaW5nUm9pcyIsInJvaVN1cmZhY2VDb3ZlcmVkIiwib3Bwb3NpdGUiLCJjb3JyZXNwb25kaW5nUm9pTWFwSW5kZXgiLCJvYmplY3RUb1N0cmluZyIsInRoZUtpbmQiLCJnZXRLaW5kIiwia2luZERlZmluaXRpb24iLCJ2ZXJpZnlLaW5kRGVmaW5pdGlvbiIsImNyZWF0ZVBpeGVsQXJyYXkiLCJleHBlY3RlZExlbmd0aCIsImdldFRoZW9yZXRpY2FsUGl4ZWxBcnJheVNpemUiLCJzaXplcyIsImJvcmRlclNpemVzIiwibmV3T3B0aW9ucyIsImdldFJvaU1hbmFnZXIiLCJlcnJvck1lc3NhZ2UiLCJhcnJheUxlbmd0aCIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiZmlsbERhdGFGcm9tQmluYXJ5IiwiZmlsbERhdGFGcm9tR3JleTMyIiwidmFsMSIsInZhbDIiLCJ2YWwzIiwiZmlsbERhdGFGcm9tUkdCMzIiLCJmaWxsRGF0YUZyb21HcmV5IiwiZmlsbERhdGFGcm9tUkdCIiwiY29weUFscGhhIiwiZmlsbEFscGhhIiwiYmluYXJ5RGF0YVAiLCJlbmNvZGVkMSIsImVuY29kZWQyIiwiZW5jb2RlZDMiLCJlbmNvZGVkNCIsImJ1ZmZlckxlbmd0aCIsIndpdGhDcmVkZW50aWFscyIsImZldGNoQmluYXJ5IiwiYmluYXJ5RGF0YSIsImxvYWRVUkwiLCJleHRlbmRQcm9wZXJ0eSIsInJlZ3Jlc3Npb24iLCJpbmNsdWRlIiwicnVuT25jZSIsIm1hbmFnZXIiLCJydW4iLCJvblN0ZXAiLCJJSlMiLCJ0b1RyYW5zZmVyIiwic29iZWwiLCJtYXliZUluY2x1ZGUiLCJyb2lNYW5hZ2VyIiwicmVhbE1hc2siLCJnZXRCYWNrZ3JvdW5kIiwiY29ycmVjdGVkIiwiX3VybCIsIl9kZXBzIiwiY2hlY2tVcmwiLCJydW5uZXIiLCJXZWJTb2NrZXRJbWFnZVJlY2VpdmVyIiwic2V0dGluZ3MiLCJpbWFnZVN1YmplY3QiLCJkZXB0aFN1YmplY3QiLCJkYXRhU3ViamVjdCIsIm9uRGF0YU9wZW4iLCJldiIsInNlbmREYXRhSW5pdFBhY2tldCIsIm9uRGF0YUNsb3NlZCIsIm9wZW5EYXRhV2Vic29ja2V0Iiwib25EYXRhRXJyb3IiLCJvbkRhdGFNZXNzYWdlIiwidW5wYWNrRGF0YSIsInN0YXRlU3ViamVjdCIsIm9uU3RhdGVDbG9zZWQiLCJvcGVuU3RhdGVXZWJzb2NrZXQiLCJvblN0YXRlT3BlbiIsInNlbmRTdGF0ZUluaXRQYWNrZXQiLCJvblN0YXRlRXJyb3IiLCJvblN0YXRlTWVzc2FnZSIsInVucGFja1N0YXRlIiwiZGF0YVdTVXJsIiwiZGF0YVdlYnNvY2tldCIsIldlYlNvY2tldCIsIm9ub3BlbiIsIm9uY2xvc2UiLCJkYXRhVHlwZSIsImFycmF5QnVmZmVyIiwiSEVBREVSX0VORCIsImltYWdlQmxvYiIsImRlcHRoQmxvYiIsInN0YXR1c0Jsb2IiLCJpbURhdGEiLCJzdGF0ZVdlYnNvY2tldCIsInNodXRkb3duIiwiTmV0d29ya09wZXJhdG9yIiwibWVzc2FnZVF1ZXVlIiwib25XU0Nsb3NlZCIsImRlYnVnIiwib3BlbldlYnNvY2tldCIsIm9uV1NPcGVuIiwic2VuZFF1ZXVlZENvbW1hbmRzIiwib25XU0Vycm9yIiwib25XU01lc3NhZ2UiLCJlbnF1ZXVlQ29tbWFuZCIsIm1lc3NhZ2VPYmoiLCJjb21tYW5kV2Vic29ja2V0IiwicmVhZHlTdGF0ZSIsIk9QRU4iLCJCZWhhdmlvclN1YmplY3QiLCJfdmFsdWUiLCJDb21tYW5kU2V0dGluZ3MiLCJDb21tYW5kQmFzZSIsInJvYm90U3RhdHVzIiwiZ2V0SW5zdGFuY2UiLCJ0aW1lc3RhbXAiLCJmcmFtZV90aW1lc3RhbXAiLCJmcmFtZWluZGV4IiwiQ29tbWFuZEdvdG8iLCJzZWxlY3Rpb25Qb2ludCIsInNlbGVjdGlvbkFyZWEiLCJkZXB0aFZhbEF0U2VsZWN0aW9uIiwicGlja19wb2ludCIsIm9iamVjdF9yZWN0IiwiZGVwdGhfdW5pdCIsInBweCIsImZ4IiwicHB5IiwiZnkiLCJDb21tYW5kV2FpdEZvcklkbGUiLCJvcGVyYXRlIiwiaGFzTGlmdCIsImxpZnRlZFNvdXJjZSIsIk9wZXJhdG9yU3Vic2NyaWJlciIsIm9uTmV4dCIsIm9uQ29tcGxldGUiLCJvbkZpbmFsaXplIiwiZGVmYXVsdENvbXBhcmUiLCJBY3Rpb24iLCJzY2hlZHVsZXIiLCJzY2hlZHVsZSIsImRlbGF5IiwiaW50ZXJ2YWxQcm92aWRlciIsInNldEludGVydmFsIiwiY2xlYXJJbnRlcnZhbCIsIkFzeW5jQWN0aW9uIiwicmVjeWNsZUFzeW5jSWQiLCJyZXF1ZXN0QXN5bmNJZCIsIl9zY2hlZHVsZXIiLCJleGVjdXRlIiwiX2V4ZWN1dGUiLCJfZGVsYXkiLCJlcnJvclZhbHVlIiwiZXJyb3JlZCIsImFjdGlvbnMiLCJTY2hlZHVsZXIiLCJzY2hlZHVsZXJBY3Rpb25DdG9yIiwiYXN5bmNTY2hlZHVsZXIiLCJBc3luY1NjaGVkdWxlciIsIlNjaGVkdWxlckFjdGlvbiIsIl9hY3RpdmUiLCJfc2NoZWR1bGVkIiwiZnJvbUFzeW5jSXRlcmFibGUiLCJhc3luY0l0ZXJhYmxlIiwiYXN5bmNJdGVyYWJsZV8xIiwiYXN5bmNJdGVyYWJsZV8xXzEiLCJfX2FzeW5jVmFsdWVzIiwiZnVsZmlsbGVkIiwicmVqZWN0ZWQiLCJDYW52YXNBY3Rpb24iLCJTdHJva2VTdHlsZSIsImRlZmF1bHRUaHJvdHRsZUNvbmZpZyIsImxlYWRpbmciLCJ0cmFpbGluZyIsInRocm90dGxlVGltZSIsImR1cmF0aW9uIiwiZHVyYXRpb25TZWxlY3RvciIsImR1cmF0aW9uJCIsImR1ZVRpbWUiLCJpbnRlcnZhbE9yU2NoZWR1bGVyIiwiaW50ZXJ2YWxEdXJhdGlvbiIsImR1ZSIsImlzVmFsaWREYXRlIiwidGltZXIiLCJoYXNWYWx1ZSIsInNlbmRWYWx1ZSIsInRocm90dGxlZCIsImlzQ29tcGxldGUiLCJlbmRUaHJvdHRsaW5nIiwiY2xlYW51cFRocm90dGxpbmciLCJzdGFydFRocm90dGxlIiwiaXNJbnRlcm9wT2JzZXJ2YWJsZSIsIm9icyIsInByb21pc2UiLCJpc0FzeW5jSXRlcmFibGUiLCJpc0l0ZXJhYmxlIiwiaXRlcmFibGUiLCJpdGVyYWJsZV8xIiwiaXRlcmFibGVfMV8xIiwiZ2V0UmVhZGVyIiwiaXNSZWFkYWJsZVN0cmVhbUxpa2UiLCJyZWFkZXIiLCJyZWxlYXNlTG9jayIsInJlYWRhYmxlU3RyZWFtTGlrZVRvQXN5bmNHZW5lcmF0b3IiLCJjcmVhdGVJbnZhbGlkT2JzZXJ2YWJsZVR5cGVFcnJvciIsImlubmVyRnJvbSIsIk9wZXJhdG9yQ2FudmFzIiwicm9ib3RTdGF0ZSIsImhhc0ltYWdlIiwic3Vic2NyaXB0aW9ucyIsInNlbGVjdGlvblN1YmplY3QiLCJyZWxlYXNlRXZlbnRIYW5kbGVyIiwiYnV0dG9uIiwic2VsZWN0aW9uU3RhcnQiLCJtZWRpYW5Qb2ludCIsInJlZHJhdyIsImtleVByZXNzRXZlbnRIYW5kbGVyIiwic2VuZENvbW1hbmQiLCJwcmVzc0V2ZW50SGFuZGxlciIsImdldFhZIiwicmVkcmF3RGVwdGgiLCJkcmFnRXZlbnRIYW5kbGVyIiwibW91c2VQb3MiLCJwcmV2ZW50RGVmYXVsdCIsIm9uQ29udGV4dE1lbnUiLCJ0YWJJbmRleCIsIm9uTW91c2VEb3duIiwib25Nb3VzZU1vdmUiLCJvbk1vdXNlVXAiLCJvbktleVVwIiwiY29tcG9uZW50RGlkTW91bnQiLCJrZXlTZWxlY3RvciIsImRlcHRoQ2FudmFzIiwiX2ltYWdlUmVjZWl2ZXIiLCJfbmV0d29ya09wZXJhdG9yIiwic2V0VmlkZW9GZWVkIiwic2V0RGVwdGhEYXRhIiwidXBkYXRlU3RhdHVzIiwicHJldmlvdXNLZXkiLCJjdXJyZW50S2V5IiwidXBkYXRlU3RhdGUiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImRlcHRoRGF0YSIsInJvYm90RGF0YSIsImdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiIsIlNldENhbnZhc1N0eWxlIiwiU2VsZWN0aW9uUmVjdGFuZ2xlIiwicmVjdCIsImRvQ2FudmFzUmVjdCIsIlN0cm9rZSIsIk1lZGlhblBvaW50IiwiYmVnaW5QYXRoIiwiYXJjIiwic3Ryb2tlIiwiY2xvc2VQYXRoIiwiQ3Jvc3NoYWlyIiwibW92ZVRvIiwibGluZVRvIiwiTm9JbWFnZV9CRyIsImZpbGxSZWN0IiwiY2FudmFzUmVjdCIsIk5vSW1hZ2VfVGV4dCIsIlBsYXF1ZUJhY2tncm91bmQiLCJwbGFxdWVXaWR0aCIsInBsYXF1ZUhlaWdodCIsInBsYXF1ZVJlY3QiLCJvZmZzZXRXaWR0aCIsIm9mZnNldEhlaWdodCIsIkZpbGwiLCJzdGF0ZV9tYWNoaW5lIiwiUGxhcXVlVGV4dCIsIkJvcmRlciIsInN0cm9rZVJlY3QiLCJpbWFnZUNhbnZhcyIsImNyb3BwZWRfZGVwdGgiLCJnZXRNZWRpYW5Gb3JQb2ludCIsIm1lZGlhblBvaW50VmFsdWUiLCJjYWxjdWxhdGVEZXB0aERldkNvbG9ycyIsInBpeGVsc1RvRHJhdyIsImNyb3BYIiwiY3JvcFJhZGl1cyIsImNyb3BZIiwiY3JvcFciLCJjcm9wSCIsInNwcmVhZCIsImNvbG9yTmVhciIsImNvbG9yTWVkaWFuIiwiY29sb3JGYXIiLCJjbWRHb3RvIiwiY21kSWRsZSIsIm1vdXNlWCIsInBhZ2VYIiwibW91c2VZIiwicGFnZVkiLCJvZmZzZXRMZWZ0Iiwib2Zmc2V0VG9wIiwic3Ryb2tlU3R5bGUiLCJsaW5lV2lkdGgiLCJDb21tYW5kU2V0Sm9pbnRzIiwiam9pbnRzIiwiQ29tbWFuZFNldFRhZyIsInRhZ19pZCIsIk9wZXJhdG9yRGVidWciLCJsYXN0RnJhbWVEYXRlIiwicmFkaWFuVG9EZWdyZWVzIiwicmFkIiwiZGVncmVlc1RvUmFkaWFuIiwic2VuZE9wIiwic2VuZE9wQ2xvc3VyZSIsInRhZ1NldHMiLCJ3c1VybCIsImZwcyIsImlzQ2FsaWJyYXRpbmciLCJ0YWdzQ2FsaWJyYXRlZCIsImNvbW1hbmRMaXN0IiwiY29tbWFuZE5hbWVJbnB1dCIsImNvbW1hbmRPcElucHV0IiwiY29ubmVjdGlvblNldHRpbmdDaGFuZ2VkIiwiZGlzY29ubmVjdCIsImNvbm5lY3QiLCJjb21tYW5kcyIsImxvY2FsU3RvcmFnZSIsImdldEl0ZW0iLCJhZGRDb21tYW5kIiwic2V0SXRlbSIsInJlbW92ZUNvbW1hbmQiLCJuZXRvcCIsImltZ3JlYyIsImNhbWVyYSIsImdvdENhbWVyYURhdGEiLCJnb3REZXB0aERhdGEiLCJnb3RSb2JvdFN0YXRlIiwiZ290Um9ib3REYXRhIiwiY2FtZXJhRGF0YSIsInJlY2FsY3VsYXRlRlBTIiwibmV3RnJhbWVEYXRlIiwiY2FsaWJyYXRpb25TdGFydCIsInJlc2V0VGFnU3RhdGUiLCJjYW5GaW5pc2hDYWxpYnJhdGlvbiIsImZpbmlzaENhbGlicmF0aW9uIiwiZGV0ZWN0Q2FsaWJyYXRpb25UYWdzIiwidGFnQ2xpY2tlZCIsImNtZCIsInJlbmRlclRhZ0J1dHRvbnMiLCJ0YWdPYmpzIiwib25DbGljayIsImRpc2FibGVkIiwiZ3JpZFRlbXBsYXRlQ29sdW1ucyIsInJlbmRlckpvaW50cyIsImpvaW50Q29udHJvbHMiLCJtb3ZlSm9pbnQiLCJqb2ludE51bSIsInN0b3BQcm9wYWdhdGlvbiIsIm9uQ2hhbmdlIiwibWFyZ2luVG9wIiwiZm9jdXNhYmxlIiwicm9sZSIsInhtbG5zIiwidmlld0JveCJdLCJzb3VyY2VSb290IjoiIn0=