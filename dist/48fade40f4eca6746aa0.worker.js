!function(){var e={493:function(e,t,r){var a=r(314),o=[];e.exports=function(){var e=new Worker(r.p+"02f12583d654712674a7.worker.js",{name:"[hash].worker.js"});return a(e,o),e},addEventListener("message",(function(e){var t,r=e.data,a=r.type,o=r.method,s=r.id,i=r.params;"RPC"===a&&o&&((t=n[o])?Promise.resolve().then((function(){return t.apply(n,i)})):Promise.reject("No such method")).then((function(e){postMessage({type:"RPC",id:s,result:e})})).catch((function(e){var t={message:e};e.stack&&(t.message=e.message,t.stack=e.stack,t.name=e.name),postMessage({type:"RPC",id:s,error:t})}))})),postMessage({type:"RPC",method:"ready"})},314:function(e){e.exports=function(e,t){var r=0,n={};e.addEventListener("message",(function(t){var r=t.data;if("RPC"===r.type)if(r.id){var a=n[r.id];a&&(delete n[r.id],r.error?a[1](Object.assign(Error(r.error.message),r.error)):a[0](r.result))}else{var o=document.createEvent("Event");o.initEvent(r.method,!1,!1),o.data=r.params,e.dispatchEvent(o)}})),t.forEach((function(t){e[t]=function(){var a=arguments;return new Promise((function(o,s){var i=++r;n[i]=[o,s],e.postMessage({type:"RPC",id:i,method:t,params:[].slice.call(a)})}))}}))}}},t={};function r(n){var a=t[n];if(void 0!==a)return a.exports;var o=t[n]={exports:{}};return e[n](o,o.exports,r),o.exports}r.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),function(){var e;r.g.importScripts&&(e=r.g.location+"");var t=r.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),r.p=e}();var n=r(493)}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,