!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var t=U[B]={i:B,l:!1,exports:{}};return Q[B].call(t.exports,t,t.exports,F),t.l=!0,t.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{enumerable:!0,get:B})},F.r=function(Q){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(Q,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(Q,"__esModule",{value:!0})},F.t=function(Q,U){if(1&U&&(Q=F(Q)),8&U)return Q;if(4&U&&"object"==typeof Q&&Q&&Q.__esModule)return Q;var B=Object.create(null);if(F.r(B),Object.defineProperty(B,"default",{enumerable:!0,value:Q}),2&U&&"string"!=typeof Q)for(var t in Q)F.d(B,t,function(U){return Q[U]}.bind(null,t));return B},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=1)}([function(Q,U,F){"use strict";Q.exports=function(Q,U,F,B){var t=self||window;try{try{var s;try{s=new t.Blob([Q])}catch(U){(s=new(t.BlobBuilder||t.WebKitBlobBuilder||t.MozBlobBuilder||t.MSBlobBuilder)).append(Q),s=s.getBlob()}var L=t.URL||t.webkitURL,e=L.createObjectURL(s),i=new t[U](e,F);return L.revokeObjectURL(e),i}catch(B){return new t[U]("data:application/javascript,".concat(encodeURIComponent(Q)),F)}}catch(Q){if(!B)throw Error("Inline worker is not supported");return new t[U](B,F)}}},function(Q,U,F){"use strict";F.r(U),F.d(U,"default",(function(){return s}));var B=F(0),t=F.n(B);function s(){return t()('!function(t){var e={};function r(n){if(e[n])return e[n].exports;var o=e[n]={i:n,l:!1,exports:{}};return t[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var o in t)r.d(n,o,function(e){return t[e]}.bind(null,o));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=0)}([function(t,e,r){"use strict";var n=r(1),o=n(r(2)),i=n(r(4)),a=n(r(5)),u=null;onmessage=function(t){var e=t.data,r=e.type,n=e.payload,c=e.url;switch(r){case"open":return u&&u.close(1e3,"stay down"),u=new WebSocket(c),void function t(e,r){u&&(u.onopen=function(){u.send(e)},u.onmessage=function(){var t=(0,a.default)(o.default.mark((function t(e){var r,n,a,u,c,s;return o.default.wrap((function(t){for(;;)switch(t.prev=t.next){case 0:if(t.prev=0,r=e.data,"object"!==(0,i.default)(r)){t.next=29;break}return t.t0=Uint8Array,t.next=6,r.slice(0,1).arrayBuffer();case 6:if(t.t1=t.sent,n=new t.t0(t.t1)[0],a=null,2!==n){t.next=18;break}return t.t2=Uint32Array,t.next=13,r.slice(1,13).arrayBuffer();case 13:t.t3=t.sent,u=new t.t2(t.t3),a=r.slice(9,9+u[0]),t.next=26;break;case 18:if(1!==n){t.next=26;break}return c=13,t.t4=Uint32Array,t.next=23,r.slice(1,c).arrayBuffer();case 23:t.t5=t.sent,s=new t.t4(t.t5),a=r.slice(c,c+s[0]);case 26:a&&a.arrayBuffer().then((function(t){for(var e=new Uint8Array(t),r="",n=0;n<5;n++){var o=e.length/5;r+=String.fromCharCode.apply(null,e.slice(o*n,o*(n+1)))}var i=btoa(r),a="data:".concat("image/jpg",";base64,")+i;postMessage({type:"image",payload:a})})),t.next=30;break;case 29:postMessage("Websocket received message: ".concat(r));case 30:t.next=35;break;case 32:t.prev=32,t.t6=t.catch(0),postMessage({type:"error",payload:t.t6});case 35:case"end":return t.stop()}}),t,null,[[0,32]])})));return function(e){return t.apply(this,arguments)}}(),u.onclose=function(n){"stay down"!==n.reason?(u=new WebSocket(r),t(e,r)):postMessage({type:"image",payload:null})},u.onerror=function(t){postMessage({type:"error",payload:t})})}(n,c);case"close":return void(u&&(u.close(1e3,"stay down"),u=null))}}},function(t,e){t.exports=function(t){return t&&t.__esModule?t:{default:t}},t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e,r){t.exports=r(3)},function(t,e,r){var n=function(t){"use strict";var e=Object.prototype,r=e.hasOwnProperty,n="function"==typeof Symbol?Symbol:{},o=n.iterator||"@@iterator",i=n.asyncIterator||"@@asyncIterator",a=n.toStringTag||"@@toStringTag";function u(t,e,r){return Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}),t[e]}try{u({},"")}catch(t){u=function(t,e,r){return t[e]=r}}function c(t,e,r,n){var o=e&&e.prototype instanceof l?e:l,i=Object.create(o.prototype),a=new L(n||[]);return i._invoke=function(t,e,r){var n="suspendedStart";return function(o,i){if("executing"===n)throw new Error("Generator is already running");if("completed"===n){if("throw"===o)throw i;return j()}for(r.method=o,r.arg=i;;){var a=r.delegate;if(a){var u=w(a,r);if(u){if(u===f)continue;return u}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if("suspendedStart"===n)throw n="completed",r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n="executing";var c=s(t,e,r);if("normal"===c.type){if(n=r.done?"completed":"suspendedYield",c.arg===f)continue;return{value:c.arg,done:r.done}}"throw"===c.type&&(n="completed",r.method="throw",r.arg=c.arg)}}}(t,r,a),i}function s(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}t.wrap=c;var f={};function l(){}function p(){}function h(){}var y={};u(y,o,(function(){return this}));var d=Object.getPrototypeOf,v=d&&d(d(E([])));v&&v!==e&&r.call(v,o)&&(y=v);var g=h.prototype=l.prototype=Object.create(y);function m(t){["next","throw","return"].forEach((function(e){u(t,e,(function(t){return this._invoke(e,t)}))}))}function x(t,e){var n;this._invoke=function(o,i){function a(){return new e((function(n,a){!function n(o,i,a,u){var c=s(t[o],t,i);if("throw"!==c.type){var f=c.arg,l=f.value;return l&&"object"==typeof l&&r.call(l,"__await")?e.resolve(l.__await).then((function(t){n("next",t,a,u)}),(function(t){n("throw",t,a,u)})):e.resolve(l).then((function(t){f.value=t,a(f)}),(function(t){return n("throw",t,a,u)}))}u(c.arg)}(o,i,n,a)}))}return n=n?n.then(a,a):a()}}function w(t,e){var r=t.iterator[e.method];if(void 0===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=void 0,w(t,e),"throw"===e.method))return f;e.method="throw",e.arg=new TypeError("The iterator does not provide a \'throw\' method")}return f}var n=s(r,t.iterator,e.arg);if("throw"===n.type)return e.method="throw",e.arg=n.arg,e.delegate=null,f;var o=n.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=void 0),e.delegate=null,f):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,f)}function b(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function _(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function L(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(b,this),this.reset(!0)}function E(t){if(t){var e=t[o];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,i=function e(){for(;++n<t.length;)if(r.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=void 0,e.done=!0,e};return i.next=i}}return{next:j}}function j(){return{value:void 0,done:!0}}return p.prototype=h,u(g,"constructor",h),u(h,"constructor",p),p.displayName=u(h,a,"GeneratorFunction"),t.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===p||"GeneratorFunction"===(e.displayName||e.name))},t.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,h):(t.__proto__=h,u(t,a,"GeneratorFunction")),t.prototype=Object.create(g),t},t.awrap=function(t){return{__await:t}},m(x.prototype),u(x.prototype,i,(function(){return this})),t.AsyncIterator=x,t.async=function(e,r,n,o,i){void 0===i&&(i=Promise);var a=new x(c(e,r,n,o),i);return t.isGeneratorFunction(r)?a:a.next().then((function(t){return t.done?t.value:a.next()}))},m(g),u(g,a,"Generator"),u(g,o,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),t.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},t.values=E,L.prototype={constructor:L,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(_),!t)for(var e in this)"t"===e.charAt(0)&&r.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=void 0)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(r,n){return a.type="throw",a.arg=t,e.next=r,n&&(e.method="next",e.arg=void 0),!!n}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return n("end");if(i.tryLoc<=this.prev){var u=r.call(i,"catchLoc"),c=r.call(i,"finallyLoc");if(u&&c){if(this.prev<i.catchLoc)return n(i.catchLoc,!0);if(this.prev<i.finallyLoc)return n(i.finallyLoc)}else if(u){if(this.prev<i.catchLoc)return n(i.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return n(i.finallyLoc)}}}},abrupt:function(t,e){for(var n=this.tryEntries.length-1;n>=0;--n){var o=this.tryEntries[n];if(o.tryLoc<=this.prev&&r.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===t||"continue"===t)&&i.tryLoc<=e&&e<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=t,a.arg=e,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),f},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),_(r),f}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var o=n.arg;_(r)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,r){return this.delegate={iterator:E(t),resultName:e,nextLoc:r},"next"===this.method&&(this.arg=void 0),f}},t}(t.exports);try{regeneratorRuntime=n}catch(t){"object"==typeof globalThis?globalThis.regeneratorRuntime=n:Function("r","regeneratorRuntime = r")(n)}},function(t,e){function r(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?(t.exports=r=function(t){return typeof t},t.exports.default=t.exports,t.exports.__esModule=!0):(t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},t.exports.default=t.exports,t.exports.__esModule=!0),r(e)}t.exports=r,t.exports.default=t.exports,t.exports.__esModule=!0},function(t,e){function r(t,e,r,n,o,i,a){try{var u=t[i](a),c=u.value}catch(t){return void r(t)}u.done?e(c):Promise.resolve(c).then(n,o)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise((function(o,i){var a=t.apply(e,n);function u(t){r(a,o,i,u,c,"next",t)}function c(t){r(a,o,i,u,c,"throw",t)}u(void 0)}))}},t.exports.default=t.exports,t.exports.__esModule=!0}]);\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,',"Worker",void 0,F.p+"index.worker.worker.js")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZW1icmFpbl9zdHJlYW1zL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9ub2RlX21vZHVsZXMvd29ya2VyLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5saW5lLmpzIiwid2VicGFjazovL3JlbWJyYWluX3N0cmVhbXMvLi9zcmMvc3RyZWFtcy93cy53b3JrZXIudHMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJjb250ZW50Iiwid29ya2VyQ29uc3RydWN0b3IiLCJ3b3JrZXJPcHRpb25zIiwidXJsIiwiZ2xvYmFsU2NvcGUiLCJzZWxmIiwid2luZG93IiwiYmxvYiIsIkJsb2IiLCJlIiwiQmxvYkJ1aWxkZXIiLCJXZWJLaXRCbG9iQnVpbGRlciIsIk1vekJsb2JCdWlsZGVyIiwiTVNCbG9iQnVpbGRlciIsImFwcGVuZCIsImdldEJsb2IiLCJVUkwiLCJ3ZWJraXRVUkwiLCJvYmplY3RVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ3b3JrZXIiLCJyZXZva2VPYmplY3RVUkwiLCJjb25jYXQiLCJlbmNvZGVVUklDb21wb25lbnQiLCJFcnJvciIsIldvcmtlcl9mbiIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksRywrQkM3RXJEaEMsRUFBT0QsUUFBVSxTQUFVa0MsRUFBU0MsRUFBbUJDLEVBQWVDLEdBQ3BFLElBQUlDLEVBQWNDLE1BQVFDLE9BRTFCLElBQ0UsSUFDRSxJQUFJQyxFQUVKLElBRUVBLEVBQU8sSUFBSUgsRUFBWUksS0FBSyxDQUFDUixJQUM3QixNQUFPUyxJQUdQRixFQUFPLElBRFdILEVBQVlNLGFBQWVOLEVBQVlPLG1CQUFxQlAsRUFBWVEsZ0JBQWtCUixFQUFZUyxnQkFFbkhDLE9BQU9kLEdBQ1pPLEVBQU9BLEVBQUtRLFVBR2QsSUFBSUMsRUFBTVosRUFBWVksS0FBT1osRUFBWWEsVUFDckNDLEVBQVlGLEVBQUlHLGdCQUFnQlosR0FDaENhLEVBQVMsSUFBSWhCLEVBQVlILEdBQW1CaUIsRUFBV2hCLEdBRTNELE9BREFjLEVBQUlLLGdCQUFnQkgsR0FDYkUsRUFDUCxNQUFPWCxHQUNQLE9BQU8sSUFBSUwsRUFBWUgsR0FBbUIsK0JBQStCcUIsT0FBT0MsbUJBQW1CdkIsSUFBV0UsSUFFaEgsTUFBT08sR0FDUCxJQUFLTixFQUNILE1BQU1xQixNQUFNLGtDQUdkLE9BQU8sSUFBSXBCLEVBQVlILEdBQW1CRSxFQUFLRCxNLGdHQ2pDcEMsU0FBU3VCLElBQ3RCLE9BQU8sSUFBTywrajlCQUFzeTlCLGNBQVVDLEVBQVcsSUFBMEIiLCJmaWxlIjoiaW5kZXgud29ya2VyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZ2V0dGVyIH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSBmdW5jdGlvbihleHBvcnRzKSB7XG4gXHRcdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuIFx0XHR9XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG4gXHR9O1xuXG4gXHQvLyBjcmVhdGUgYSBmYWtlIG5hbWVzcGFjZSBvYmplY3RcbiBcdC8vIG1vZGUgJiAxOiB2YWx1ZSBpcyBhIG1vZHVsZSBpZCwgcmVxdWlyZSBpdFxuIFx0Ly8gbW9kZSAmIDI6IG1lcmdlIGFsbCBwcm9wZXJ0aWVzIG9mIHZhbHVlIGludG8gdGhlIG5zXG4gXHQvLyBtb2RlICYgNDogcmV0dXJuIHZhbHVlIHdoZW4gYWxyZWFkeSBucyBvYmplY3RcbiBcdC8vIG1vZGUgJiA4fDE6IGJlaGF2ZSBsaWtlIHJlcXVpcmVcbiBcdF9fd2VicGFja19yZXF1aXJlX18udCA9IGZ1bmN0aW9uKHZhbHVlLCBtb2RlKSB7XG4gXHRcdGlmKG1vZGUgJiAxKSB2YWx1ZSA9IF9fd2VicGFja19yZXF1aXJlX18odmFsdWUpO1xuIFx0XHRpZihtb2RlICYgOCkgcmV0dXJuIHZhbHVlO1xuIFx0XHRpZigobW9kZSAmIDQpICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUgJiYgdmFsdWUuX19lc01vZHVsZSkgcmV0dXJuIHZhbHVlO1xuIFx0XHR2YXIgbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLnIobnMpO1xuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobnMsICdkZWZhdWx0JywgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdmFsdWUgfSk7XG4gXHRcdGlmKG1vZGUgJiAyICYmIHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykgZm9yKHZhciBrZXkgaW4gdmFsdWUpIF9fd2VicGFja19yZXF1aXJlX18uZChucywga2V5LCBmdW5jdGlvbihrZXkpIHsgcmV0dXJuIHZhbHVlW2tleV07IH0uYmluZChudWxsLCBrZXkpKTtcbiBcdFx0cmV0dXJuIG5zO1xuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDEpO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiwgbm8tdXNlLWJlZm9yZS1kZWZpbmUsIG5ldy1jYXAgKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNvbnRlbnQsIHdvcmtlckNvbnN0cnVjdG9yLCB3b3JrZXJPcHRpb25zLCB1cmwpIHtcbiAgdmFyIGdsb2JhbFNjb3BlID0gc2VsZiB8fCB3aW5kb3c7XG5cbiAgdHJ5IHtcbiAgICB0cnkge1xuICAgICAgdmFyIGJsb2I7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIE5ldyBBUElcbiAgICAgICAgYmxvYiA9IG5ldyBnbG9iYWxTY29wZS5CbG9iKFtjb250ZW50XSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIEJsb2JCdWlsZGVyID0gRGVwcmVjYXRlZCwgYnV0IHdpZGVseSBpbXBsZW1lbnRlZFxuICAgICAgICB2YXIgQmxvYkJ1aWxkZXIgPSBnbG9iYWxTY29wZS5CbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5XZWJLaXRCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5Nb3pCbG9iQnVpbGRlciB8fCBnbG9iYWxTY29wZS5NU0Jsb2JCdWlsZGVyO1xuICAgICAgICBibG9iID0gbmV3IEJsb2JCdWlsZGVyKCk7XG4gICAgICAgIGJsb2IuYXBwZW5kKGNvbnRlbnQpO1xuICAgICAgICBibG9iID0gYmxvYi5nZXRCbG9iKCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBVUkwgPSBnbG9iYWxTY29wZS5VUkwgfHwgZ2xvYmFsU2NvcGUud2Via2l0VVJMO1xuICAgICAgdmFyIG9iamVjdFVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG4gICAgICB2YXIgd29ya2VyID0gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShvYmplY3RVUkwsIHdvcmtlck9wdGlvbnMpO1xuICAgICAgVVJMLnJldm9rZU9iamVjdFVSTChvYmplY3RVUkwpO1xuICAgICAgcmV0dXJuIHdvcmtlcjtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZXR1cm4gbmV3IGdsb2JhbFNjb3BlW3dvcmtlckNvbnN0cnVjdG9yXShcImRhdGE6YXBwbGljYXRpb24vamF2YXNjcmlwdCxcIi5jb25jYXQoZW5jb2RlVVJJQ29tcG9uZW50KGNvbnRlbnQpKSwgd29ya2VyT3B0aW9ucyk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKCF1cmwpIHtcbiAgICAgIHRocm93IEVycm9yKFwiSW5saW5lIHdvcmtlciBpcyBub3Qgc3VwcG9ydGVkXCIpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgZ2xvYmFsU2NvcGVbd29ya2VyQ29uc3RydWN0b3JdKHVybCwgd29ya2VyT3B0aW9ucyk7XG4gIH1cbn07IiwiXG5pbXBvcnQgd29ya2VyIGZyb20gXCIhIS4uLy4uL25vZGVfbW9kdWxlcy93b3JrZXItbG9hZGVyL2Rpc3QvcnVudGltZS9pbmxpbmUuanNcIjtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gV29ya2VyX2ZuKCkge1xuICByZXR1cm4gd29ya2VyKFwiIWZ1bmN0aW9uKHQpe3ZhciBlPXt9O2Z1bmN0aW9uIHIobil7aWYoZVtuXSlyZXR1cm4gZVtuXS5leHBvcnRzO3ZhciBvPWVbbl09e2k6bixsOiExLGV4cG9ydHM6e319O3JldHVybiB0W25dLmNhbGwoby5leHBvcnRzLG8sby5leHBvcnRzLHIpLG8ubD0hMCxvLmV4cG9ydHN9ci5tPXQsci5jPWUsci5kPWZ1bmN0aW9uKHQsZSxuKXtyLm8odCxlKXx8T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsZSx7ZW51bWVyYWJsZTohMCxnZXQ6bn0pfSxyLnI9ZnVuY3Rpb24odCl7XFxcInVuZGVmaW5lZFxcXCIhPXR5cGVvZiBTeW1ib2wmJlN5bWJvbC50b1N0cmluZ1RhZyYmT2JqZWN0LmRlZmluZVByb3BlcnR5KHQsU3ltYm9sLnRvU3RyaW5nVGFnLHt2YWx1ZTpcXFwiTW9kdWxlXFxcIn0pLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LFxcXCJfX2VzTW9kdWxlXFxcIix7dmFsdWU6ITB9KX0sci50PWZ1bmN0aW9uKHQsZSl7aWYoMSZlJiYodD1yKHQpKSw4JmUpcmV0dXJuIHQ7aWYoNCZlJiZcXFwib2JqZWN0XFxcIj09dHlwZW9mIHQmJnQmJnQuX19lc01vZHVsZSlyZXR1cm4gdDt2YXIgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKHIucihuKSxPYmplY3QuZGVmaW5lUHJvcGVydHkobixcXFwiZGVmYXVsdFxcXCIse2VudW1lcmFibGU6ITAsdmFsdWU6dH0pLDImZSYmXFxcInN0cmluZ1xcXCIhPXR5cGVvZiB0KWZvcih2YXIgbyBpbiB0KXIuZChuLG8sZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19LmJpbmQobnVsbCxvKSk7cmV0dXJuIG59LHIubj1mdW5jdGlvbih0KXt2YXIgZT10JiZ0Ll9fZXNNb2R1bGU/ZnVuY3Rpb24oKXtyZXR1cm4gdC5kZWZhdWx0fTpmdW5jdGlvbigpe3JldHVybiB0fTtyZXR1cm4gci5kKGUsXFxcImFcXFwiLGUpLGV9LHIubz1mdW5jdGlvbih0LGUpe3JldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxlKX0sci5wPVxcXCJcXFwiLHIoci5zPTApfShbZnVuY3Rpb24odCxlLHIpe1xcXCJ1c2Ugc3RyaWN0XFxcIjt2YXIgbj1yKDEpLG89bihyKDIpKSxpPW4ocig0KSksYT1uKHIoNSkpLHU9bnVsbDtvbm1lc3NhZ2U9ZnVuY3Rpb24odCl7dmFyIGU9dC5kYXRhLHI9ZS50eXBlLG49ZS5wYXlsb2FkLGM9ZS51cmw7c3dpdGNoKHIpe2Nhc2VcXFwib3BlblxcXCI6cmV0dXJuIHUmJnUuY2xvc2UoMWUzLFxcXCJzdGF5IGRvd25cXFwiKSx1PW5ldyBXZWJTb2NrZXQoYyksdm9pZCBmdW5jdGlvbiB0KGUscil7dSYmKHUub25vcGVuPWZ1bmN0aW9uKCl7dS5zZW5kKGUpfSx1Lm9ubWVzc2FnZT1mdW5jdGlvbigpe3ZhciB0PSgwLGEuZGVmYXVsdCkoby5kZWZhdWx0Lm1hcmsoKGZ1bmN0aW9uIHQoZSl7dmFyIHIsbixhLHUsYyxzO3JldHVybiBvLmRlZmF1bHQud3JhcCgoZnVuY3Rpb24odCl7Zm9yKDs7KXN3aXRjaCh0LnByZXY9dC5uZXh0KXtjYXNlIDA6aWYodC5wcmV2PTAscj1lLmRhdGEsXFxcIm9iamVjdFxcXCIhPT0oMCxpLmRlZmF1bHQpKHIpKXt0Lm5leHQ9Mjk7YnJlYWt9cmV0dXJuIHQudDA9VWludDhBcnJheSx0Lm5leHQ9NixyLnNsaWNlKDAsMSkuYXJyYXlCdWZmZXIoKTtjYXNlIDY6aWYodC50MT10LnNlbnQsbj1uZXcgdC50MCh0LnQxKVswXSxhPW51bGwsMiE9PW4pe3QubmV4dD0xODticmVha31yZXR1cm4gdC50Mj1VaW50MzJBcnJheSx0Lm5leHQ9MTMsci5zbGljZSgxLDEzKS5hcnJheUJ1ZmZlcigpO2Nhc2UgMTM6dC50Mz10LnNlbnQsdT1uZXcgdC50Mih0LnQzKSxhPXIuc2xpY2UoOSw5K3VbMF0pLHQubmV4dD0yNjticmVhaztjYXNlIDE4OmlmKDEhPT1uKXt0Lm5leHQ9MjY7YnJlYWt9cmV0dXJuIGM9MTMsdC50ND1VaW50MzJBcnJheSx0Lm5leHQ9MjMsci5zbGljZSgxLGMpLmFycmF5QnVmZmVyKCk7Y2FzZSAyMzp0LnQ1PXQuc2VudCxzPW5ldyB0LnQ0KHQudDUpLGE9ci5zbGljZShjLGMrc1swXSk7Y2FzZSAyNjphJiZhLmFycmF5QnVmZmVyKCkudGhlbigoZnVuY3Rpb24odCl7Zm9yKHZhciBlPW5ldyBVaW50OEFycmF5KHQpLHI9XFxcIlxcXCIsbj0wO248NTtuKyspe3ZhciBvPWUubGVuZ3RoLzU7cis9U3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLGUuc2xpY2UobypuLG8qKG4rMSkpKX12YXIgaT1idG9hKHIpLGE9XFxcImRhdGE6XFxcIi5jb25jYXQoXFxcImltYWdlL2pwZ1xcXCIsXFxcIjtiYXNlNjQsXFxcIikraTtwb3N0TWVzc2FnZSh7dHlwZTpcXFwiaW1hZ2VcXFwiLHBheWxvYWQ6YX0pfSkpLHQubmV4dD0zMDticmVhaztjYXNlIDI5OnBvc3RNZXNzYWdlKFxcXCJXZWJzb2NrZXQgcmVjZWl2ZWQgbWVzc2FnZTogXFxcIi5jb25jYXQocikpO2Nhc2UgMzA6dC5uZXh0PTM1O2JyZWFrO2Nhc2UgMzI6dC5wcmV2PTMyLHQudDY9dC5jYXRjaCgwKSxwb3N0TWVzc2FnZSh7dHlwZTpcXFwiZXJyb3JcXFwiLHBheWxvYWQ6dC50Nn0pO2Nhc2UgMzU6Y2FzZVxcXCJlbmRcXFwiOnJldHVybiB0LnN0b3AoKX19KSx0LG51bGwsW1swLDMyXV0pfSkpKTtyZXR1cm4gZnVuY3Rpb24oZSl7cmV0dXJuIHQuYXBwbHkodGhpcyxhcmd1bWVudHMpfX0oKSx1Lm9uY2xvc2U9ZnVuY3Rpb24obil7XFxcInN0YXkgZG93blxcXCIhPT1uLnJlYXNvbj8odT1uZXcgV2ViU29ja2V0KHIpLHQoZSxyKSk6cG9zdE1lc3NhZ2Uoe3R5cGU6XFxcImltYWdlXFxcIixwYXlsb2FkOm51bGx9KX0sdS5vbmVycm9yPWZ1bmN0aW9uKHQpe3Bvc3RNZXNzYWdlKHt0eXBlOlxcXCJlcnJvclxcXCIscGF5bG9hZDp0fSl9KX0obixjKTtjYXNlXFxcImNsb3NlXFxcIjpyZXR1cm4gdm9pZCh1JiYodS5jbG9zZSgxZTMsXFxcInN0YXkgZG93blxcXCIpLHU9bnVsbCkpfX19LGZ1bmN0aW9uKHQsZSl7dC5leHBvcnRzPWZ1bmN0aW9uKHQpe3JldHVybiB0JiZ0Ll9fZXNNb2R1bGU/dDp7ZGVmYXVsdDp0fX0sdC5leHBvcnRzLmRlZmF1bHQ9dC5leHBvcnRzLHQuZXhwb3J0cy5fX2VzTW9kdWxlPSEwfSxmdW5jdGlvbih0LGUscil7dC5leHBvcnRzPXIoMyl9LGZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1mdW5jdGlvbih0KXtcXFwidXNlIHN0cmljdFxcXCI7dmFyIGU9T2JqZWN0LnByb3RvdHlwZSxyPWUuaGFzT3duUHJvcGVydHksbj1cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgU3ltYm9sP1N5bWJvbDp7fSxvPW4uaXRlcmF0b3J8fFxcXCJAQGl0ZXJhdG9yXFxcIixpPW4uYXN5bmNJdGVyYXRvcnx8XFxcIkBAYXN5bmNJdGVyYXRvclxcXCIsYT1uLnRvU3RyaW5nVGFnfHxcXFwiQEB0b1N0cmluZ1RhZ1xcXCI7ZnVuY3Rpb24gdSh0LGUscil7cmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGUse3ZhbHVlOnIsZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsd3JpdGFibGU6ITB9KSx0W2VdfXRyeXt1KHt9LFxcXCJcXFwiKX1jYXRjaCh0KXt1PWZ1bmN0aW9uKHQsZSxyKXtyZXR1cm4gdFtlXT1yfX1mdW5jdGlvbiBjKHQsZSxyLG4pe3ZhciBvPWUmJmUucHJvdG90eXBlIGluc3RhbmNlb2YgbD9lOmwsaT1PYmplY3QuY3JlYXRlKG8ucHJvdG90eXBlKSxhPW5ldyBMKG58fFtdKTtyZXR1cm4gaS5faW52b2tlPWZ1bmN0aW9uKHQsZSxyKXt2YXIgbj1cXFwic3VzcGVuZGVkU3RhcnRcXFwiO3JldHVybiBmdW5jdGlvbihvLGkpe2lmKFxcXCJleGVjdXRpbmdcXFwiPT09bil0aHJvdyBuZXcgRXJyb3IoXFxcIkdlbmVyYXRvciBpcyBhbHJlYWR5IHJ1bm5pbmdcXFwiKTtpZihcXFwiY29tcGxldGVkXFxcIj09PW4pe2lmKFxcXCJ0aHJvd1xcXCI9PT1vKXRocm93IGk7cmV0dXJuIGooKX1mb3Ioci5tZXRob2Q9byxyLmFyZz1pOzspe3ZhciBhPXIuZGVsZWdhdGU7aWYoYSl7dmFyIHU9dyhhLHIpO2lmKHUpe2lmKHU9PT1mKWNvbnRpbnVlO3JldHVybiB1fX1pZihcXFwibmV4dFxcXCI9PT1yLm1ldGhvZClyLnNlbnQ9ci5fc2VudD1yLmFyZztlbHNlIGlmKFxcXCJ0aHJvd1xcXCI9PT1yLm1ldGhvZCl7aWYoXFxcInN1c3BlbmRlZFN0YXJ0XFxcIj09PW4pdGhyb3cgbj1cXFwiY29tcGxldGVkXFxcIixyLmFyZztyLmRpc3BhdGNoRXhjZXB0aW9uKHIuYXJnKX1lbHNlXFxcInJldHVyblxcXCI9PT1yLm1ldGhvZCYmci5hYnJ1cHQoXFxcInJldHVyblxcXCIsci5hcmcpO249XFxcImV4ZWN1dGluZ1xcXCI7dmFyIGM9cyh0LGUscik7aWYoXFxcIm5vcm1hbFxcXCI9PT1jLnR5cGUpe2lmKG49ci5kb25lP1xcXCJjb21wbGV0ZWRcXFwiOlxcXCJzdXNwZW5kZWRZaWVsZFxcXCIsYy5hcmc9PT1mKWNvbnRpbnVlO3JldHVybnt2YWx1ZTpjLmFyZyxkb25lOnIuZG9uZX19XFxcInRocm93XFxcIj09PWMudHlwZSYmKG49XFxcImNvbXBsZXRlZFxcXCIsci5tZXRob2Q9XFxcInRocm93XFxcIixyLmFyZz1jLmFyZyl9fX0odCxyLGEpLGl9ZnVuY3Rpb24gcyh0LGUscil7dHJ5e3JldHVybnt0eXBlOlxcXCJub3JtYWxcXFwiLGFyZzp0LmNhbGwoZSxyKX19Y2F0Y2godCl7cmV0dXJue3R5cGU6XFxcInRocm93XFxcIixhcmc6dH19fXQud3JhcD1jO3ZhciBmPXt9O2Z1bmN0aW9uIGwoKXt9ZnVuY3Rpb24gcCgpe31mdW5jdGlvbiBoKCl7fXZhciB5PXt9O3UoeSxvLChmdW5jdGlvbigpe3JldHVybiB0aGlzfSkpO3ZhciBkPU9iamVjdC5nZXRQcm90b3R5cGVPZix2PWQmJmQoZChFKFtdKSkpO3YmJnYhPT1lJiZyLmNhbGwodixvKSYmKHk9dik7dmFyIGc9aC5wcm90b3R5cGU9bC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZSh5KTtmdW5jdGlvbiBtKHQpe1tcXFwibmV4dFxcXCIsXFxcInRocm93XFxcIixcXFwicmV0dXJuXFxcIl0uZm9yRWFjaCgoZnVuY3Rpb24oZSl7dSh0LGUsKGZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLl9pbnZva2UoZSx0KX0pKX0pKX1mdW5jdGlvbiB4KHQsZSl7dmFyIG47dGhpcy5faW52b2tlPWZ1bmN0aW9uKG8saSl7ZnVuY3Rpb24gYSgpe3JldHVybiBuZXcgZSgoZnVuY3Rpb24obixhKXshZnVuY3Rpb24gbihvLGksYSx1KXt2YXIgYz1zKHRbb10sdCxpKTtpZihcXFwidGhyb3dcXFwiIT09Yy50eXBlKXt2YXIgZj1jLmFyZyxsPWYudmFsdWU7cmV0dXJuIGwmJlxcXCJvYmplY3RcXFwiPT10eXBlb2YgbCYmci5jYWxsKGwsXFxcIl9fYXdhaXRcXFwiKT9lLnJlc29sdmUobC5fX2F3YWl0KS50aGVuKChmdW5jdGlvbih0KXtuKFxcXCJuZXh0XFxcIix0LGEsdSl9KSwoZnVuY3Rpb24odCl7bihcXFwidGhyb3dcXFwiLHQsYSx1KX0pKTplLnJlc29sdmUobCkudGhlbigoZnVuY3Rpb24odCl7Zi52YWx1ZT10LGEoZil9KSwoZnVuY3Rpb24odCl7cmV0dXJuIG4oXFxcInRocm93XFxcIix0LGEsdSl9KSl9dShjLmFyZyl9KG8saSxuLGEpfSkpfXJldHVybiBuPW4/bi50aGVuKGEsYSk6YSgpfX1mdW5jdGlvbiB3KHQsZSl7dmFyIHI9dC5pdGVyYXRvcltlLm1ldGhvZF07aWYodm9pZCAwPT09cil7aWYoZS5kZWxlZ2F0ZT1udWxsLFxcXCJ0aHJvd1xcXCI9PT1lLm1ldGhvZCl7aWYodC5pdGVyYXRvci5yZXR1cm4mJihlLm1ldGhvZD1cXFwicmV0dXJuXFxcIixlLmFyZz12b2lkIDAsdyh0LGUpLFxcXCJ0aHJvd1xcXCI9PT1lLm1ldGhvZCkpcmV0dXJuIGY7ZS5tZXRob2Q9XFxcInRocm93XFxcIixlLmFyZz1uZXcgVHlwZUVycm9yKFxcXCJUaGUgaXRlcmF0b3IgZG9lcyBub3QgcHJvdmlkZSBhICd0aHJvdycgbWV0aG9kXFxcIil9cmV0dXJuIGZ9dmFyIG49cyhyLHQuaXRlcmF0b3IsZS5hcmcpO2lmKFxcXCJ0aHJvd1xcXCI9PT1uLnR5cGUpcmV0dXJuIGUubWV0aG9kPVxcXCJ0aHJvd1xcXCIsZS5hcmc9bi5hcmcsZS5kZWxlZ2F0ZT1udWxsLGY7dmFyIG89bi5hcmc7cmV0dXJuIG8/by5kb25lPyhlW3QucmVzdWx0TmFtZV09by52YWx1ZSxlLm5leHQ9dC5uZXh0TG9jLFxcXCJyZXR1cm5cXFwiIT09ZS5tZXRob2QmJihlLm1ldGhvZD1cXFwibmV4dFxcXCIsZS5hcmc9dm9pZCAwKSxlLmRlbGVnYXRlPW51bGwsZik6bzooZS5tZXRob2Q9XFxcInRocm93XFxcIixlLmFyZz1uZXcgVHlwZUVycm9yKFxcXCJpdGVyYXRvciByZXN1bHQgaXMgbm90IGFuIG9iamVjdFxcXCIpLGUuZGVsZWdhdGU9bnVsbCxmKX1mdW5jdGlvbiBiKHQpe3ZhciBlPXt0cnlMb2M6dFswXX07MSBpbiB0JiYoZS5jYXRjaExvYz10WzFdKSwyIGluIHQmJihlLmZpbmFsbHlMb2M9dFsyXSxlLmFmdGVyTG9jPXRbM10pLHRoaXMudHJ5RW50cmllcy5wdXNoKGUpfWZ1bmN0aW9uIF8odCl7dmFyIGU9dC5jb21wbGV0aW9ufHx7fTtlLnR5cGU9XFxcIm5vcm1hbFxcXCIsZGVsZXRlIGUuYXJnLHQuY29tcGxldGlvbj1lfWZ1bmN0aW9uIEwodCl7dGhpcy50cnlFbnRyaWVzPVt7dHJ5TG9jOlxcXCJyb290XFxcIn1dLHQuZm9yRWFjaChiLHRoaXMpLHRoaXMucmVzZXQoITApfWZ1bmN0aW9uIEUodCl7aWYodCl7dmFyIGU9dFtvXTtpZihlKXJldHVybiBlLmNhbGwodCk7aWYoXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHQubmV4dClyZXR1cm4gdDtpZighaXNOYU4odC5sZW5ndGgpKXt2YXIgbj0tMSxpPWZ1bmN0aW9uIGUoKXtmb3IoOysrbjx0Lmxlbmd0aDspaWYoci5jYWxsKHQsbikpcmV0dXJuIGUudmFsdWU9dFtuXSxlLmRvbmU9ITEsZTtyZXR1cm4gZS52YWx1ZT12b2lkIDAsZS5kb25lPSEwLGV9O3JldHVybiBpLm5leHQ9aX19cmV0dXJue25leHQ6an19ZnVuY3Rpb24gaigpe3JldHVybnt2YWx1ZTp2b2lkIDAsZG9uZTohMH19cmV0dXJuIHAucHJvdG90eXBlPWgsdShnLFxcXCJjb25zdHJ1Y3RvclxcXCIsaCksdShoLFxcXCJjb25zdHJ1Y3RvclxcXCIscCkscC5kaXNwbGF5TmFtZT11KGgsYSxcXFwiR2VuZXJhdG9yRnVuY3Rpb25cXFwiKSx0LmlzR2VuZXJhdG9yRnVuY3Rpb249ZnVuY3Rpb24odCl7dmFyIGU9XFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIHQmJnQuY29uc3RydWN0b3I7cmV0dXJuISFlJiYoZT09PXB8fFxcXCJHZW5lcmF0b3JGdW5jdGlvblxcXCI9PT0oZS5kaXNwbGF5TmFtZXx8ZS5uYW1lKSl9LHQubWFyaz1mdW5jdGlvbih0KXtyZXR1cm4gT2JqZWN0LnNldFByb3RvdHlwZU9mP09iamVjdC5zZXRQcm90b3R5cGVPZih0LGgpOih0Ll9fcHJvdG9fXz1oLHUodCxhLFxcXCJHZW5lcmF0b3JGdW5jdGlvblxcXCIpKSx0LnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKGcpLHR9LHQuYXdyYXA9ZnVuY3Rpb24odCl7cmV0dXJue19fYXdhaXQ6dH19LG0oeC5wcm90b3R5cGUpLHUoeC5wcm90b3R5cGUsaSwoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKSx0LkFzeW5jSXRlcmF0b3I9eCx0LmFzeW5jPWZ1bmN0aW9uKGUscixuLG8saSl7dm9pZCAwPT09aSYmKGk9UHJvbWlzZSk7dmFyIGE9bmV3IHgoYyhlLHIsbixvKSxpKTtyZXR1cm4gdC5pc0dlbmVyYXRvckZ1bmN0aW9uKHIpP2E6YS5uZXh0KCkudGhlbigoZnVuY3Rpb24odCl7cmV0dXJuIHQuZG9uZT90LnZhbHVlOmEubmV4dCgpfSkpfSxtKGcpLHUoZyxhLFxcXCJHZW5lcmF0b3JcXFwiKSx1KGcsbywoZnVuY3Rpb24oKXtyZXR1cm4gdGhpc30pKSx1KGcsXFxcInRvU3RyaW5nXFxcIiwoZnVuY3Rpb24oKXtyZXR1cm5cXFwiW29iamVjdCBHZW5lcmF0b3JdXFxcIn0pKSx0LmtleXM9ZnVuY3Rpb24odCl7dmFyIGU9W107Zm9yKHZhciByIGluIHQpZS5wdXNoKHIpO3JldHVybiBlLnJldmVyc2UoKSxmdW5jdGlvbiByKCl7Zm9yKDtlLmxlbmd0aDspe3ZhciBuPWUucG9wKCk7aWYobiBpbiB0KXJldHVybiByLnZhbHVlPW4sci5kb25lPSExLHJ9cmV0dXJuIHIuZG9uZT0hMCxyfX0sdC52YWx1ZXM9RSxMLnByb3RvdHlwZT17Y29uc3RydWN0b3I6TCxyZXNldDpmdW5jdGlvbih0KXtpZih0aGlzLnByZXY9MCx0aGlzLm5leHQ9MCx0aGlzLnNlbnQ9dGhpcy5fc2VudD12b2lkIDAsdGhpcy5kb25lPSExLHRoaXMuZGVsZWdhdGU9bnVsbCx0aGlzLm1ldGhvZD1cXFwibmV4dFxcXCIsdGhpcy5hcmc9dm9pZCAwLHRoaXMudHJ5RW50cmllcy5mb3JFYWNoKF8pLCF0KWZvcih2YXIgZSBpbiB0aGlzKVxcXCJ0XFxcIj09PWUuY2hhckF0KDApJiZyLmNhbGwodGhpcyxlKSYmIWlzTmFOKCtlLnNsaWNlKDEpKSYmKHRoaXNbZV09dm9pZCAwKX0sc3RvcDpmdW5jdGlvbigpe3RoaXMuZG9uZT0hMDt2YXIgdD10aGlzLnRyeUVudHJpZXNbMF0uY29tcGxldGlvbjtpZihcXFwidGhyb3dcXFwiPT09dC50eXBlKXRocm93IHQuYXJnO3JldHVybiB0aGlzLnJ2YWx9LGRpc3BhdGNoRXhjZXB0aW9uOmZ1bmN0aW9uKHQpe2lmKHRoaXMuZG9uZSl0aHJvdyB0O3ZhciBlPXRoaXM7ZnVuY3Rpb24gbihyLG4pe3JldHVybiBhLnR5cGU9XFxcInRocm93XFxcIixhLmFyZz10LGUubmV4dD1yLG4mJihlLm1ldGhvZD1cXFwibmV4dFxcXCIsZS5hcmc9dm9pZCAwKSwhIW59Zm9yKHZhciBvPXRoaXMudHJ5RW50cmllcy5sZW5ndGgtMTtvPj0wOy0tbyl7dmFyIGk9dGhpcy50cnlFbnRyaWVzW29dLGE9aS5jb21wbGV0aW9uO2lmKFxcXCJyb290XFxcIj09PWkudHJ5TG9jKXJldHVybiBuKFxcXCJlbmRcXFwiKTtpZihpLnRyeUxvYzw9dGhpcy5wcmV2KXt2YXIgdT1yLmNhbGwoaSxcXFwiY2F0Y2hMb2NcXFwiKSxjPXIuY2FsbChpLFxcXCJmaW5hbGx5TG9jXFxcIik7aWYodSYmYyl7aWYodGhpcy5wcmV2PGkuY2F0Y2hMb2MpcmV0dXJuIG4oaS5jYXRjaExvYywhMCk7aWYodGhpcy5wcmV2PGkuZmluYWxseUxvYylyZXR1cm4gbihpLmZpbmFsbHlMb2MpfWVsc2UgaWYodSl7aWYodGhpcy5wcmV2PGkuY2F0Y2hMb2MpcmV0dXJuIG4oaS5jYXRjaExvYywhMCl9ZWxzZXtpZighYyl0aHJvdyBuZXcgRXJyb3IoXFxcInRyeSBzdGF0ZW1lbnQgd2l0aG91dCBjYXRjaCBvciBmaW5hbGx5XFxcIik7aWYodGhpcy5wcmV2PGkuZmluYWxseUxvYylyZXR1cm4gbihpLmZpbmFsbHlMb2MpfX19fSxhYnJ1cHQ6ZnVuY3Rpb24odCxlKXtmb3IodmFyIG49dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO24+PTA7LS1uKXt2YXIgbz10aGlzLnRyeUVudHJpZXNbbl07aWYoby50cnlMb2M8PXRoaXMucHJldiYmci5jYWxsKG8sXFxcImZpbmFsbHlMb2NcXFwiKSYmdGhpcy5wcmV2PG8uZmluYWxseUxvYyl7dmFyIGk9bzticmVha319aSYmKFxcXCJicmVha1xcXCI9PT10fHxcXFwiY29udGludWVcXFwiPT09dCkmJmkudHJ5TG9jPD1lJiZlPD1pLmZpbmFsbHlMb2MmJihpPW51bGwpO3ZhciBhPWk/aS5jb21wbGV0aW9uOnt9O3JldHVybiBhLnR5cGU9dCxhLmFyZz1lLGk/KHRoaXMubWV0aG9kPVxcXCJuZXh0XFxcIix0aGlzLm5leHQ9aS5maW5hbGx5TG9jLGYpOnRoaXMuY29tcGxldGUoYSl9LGNvbXBsZXRlOmZ1bmN0aW9uKHQsZSl7aWYoXFxcInRocm93XFxcIj09PXQudHlwZSl0aHJvdyB0LmFyZztyZXR1cm5cXFwiYnJlYWtcXFwiPT09dC50eXBlfHxcXFwiY29udGludWVcXFwiPT09dC50eXBlP3RoaXMubmV4dD10LmFyZzpcXFwicmV0dXJuXFxcIj09PXQudHlwZT8odGhpcy5ydmFsPXRoaXMuYXJnPXQuYXJnLHRoaXMubWV0aG9kPVxcXCJyZXR1cm5cXFwiLHRoaXMubmV4dD1cXFwiZW5kXFxcIik6XFxcIm5vcm1hbFxcXCI9PT10LnR5cGUmJmUmJih0aGlzLm5leHQ9ZSksZn0sZmluaXNoOmZ1bmN0aW9uKHQpe2Zvcih2YXIgZT10aGlzLnRyeUVudHJpZXMubGVuZ3RoLTE7ZT49MDstLWUpe3ZhciByPXRoaXMudHJ5RW50cmllc1tlXTtpZihyLmZpbmFsbHlMb2M9PT10KXJldHVybiB0aGlzLmNvbXBsZXRlKHIuY29tcGxldGlvbixyLmFmdGVyTG9jKSxfKHIpLGZ9fSxjYXRjaDpmdW5jdGlvbih0KXtmb3IodmFyIGU9dGhpcy50cnlFbnRyaWVzLmxlbmd0aC0xO2U+PTA7LS1lKXt2YXIgcj10aGlzLnRyeUVudHJpZXNbZV07aWYoci50cnlMb2M9PT10KXt2YXIgbj1yLmNvbXBsZXRpb247aWYoXFxcInRocm93XFxcIj09PW4udHlwZSl7dmFyIG89bi5hcmc7XyhyKX1yZXR1cm4gb319dGhyb3cgbmV3IEVycm9yKFxcXCJpbGxlZ2FsIGNhdGNoIGF0dGVtcHRcXFwiKX0sZGVsZWdhdGVZaWVsZDpmdW5jdGlvbih0LGUscil7cmV0dXJuIHRoaXMuZGVsZWdhdGU9e2l0ZXJhdG9yOkUodCkscmVzdWx0TmFtZTplLG5leHRMb2M6cn0sXFxcIm5leHRcXFwiPT09dGhpcy5tZXRob2QmJih0aGlzLmFyZz12b2lkIDApLGZ9fSx0fSh0LmV4cG9ydHMpO3RyeXtyZWdlbmVyYXRvclJ1bnRpbWU9bn1jYXRjaCh0KXtcXFwib2JqZWN0XFxcIj09dHlwZW9mIGdsb2JhbFRoaXM/Z2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWU9bjpGdW5jdGlvbihcXFwiclxcXCIsXFxcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcXFwiKShuKX19LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcihlKXtyZXR1cm5cXFwiZnVuY3Rpb25cXFwiPT10eXBlb2YgU3ltYm9sJiZcXFwic3ltYm9sXFxcIj09dHlwZW9mIFN5bWJvbC5pdGVyYXRvcj8odC5leHBvcnRzPXI9ZnVuY3Rpb24odCl7cmV0dXJuIHR5cGVvZiB0fSx0LmV4cG9ydHMuZGVmYXVsdD10LmV4cG9ydHMsdC5leHBvcnRzLl9fZXNNb2R1bGU9ITApOih0LmV4cG9ydHM9cj1mdW5jdGlvbih0KXtyZXR1cm4gdCYmXFxcImZ1bmN0aW9uXFxcIj09dHlwZW9mIFN5bWJvbCYmdC5jb25zdHJ1Y3Rvcj09PVN5bWJvbCYmdCE9PVN5bWJvbC5wcm90b3R5cGU/XFxcInN5bWJvbFxcXCI6dHlwZW9mIHR9LHQuZXhwb3J0cy5kZWZhdWx0PXQuZXhwb3J0cyx0LmV4cG9ydHMuX19lc01vZHVsZT0hMCkscihlKX10LmV4cG9ydHM9cix0LmV4cG9ydHMuZGVmYXVsdD10LmV4cG9ydHMsdC5leHBvcnRzLl9fZXNNb2R1bGU9ITB9LGZ1bmN0aW9uKHQsZSl7ZnVuY3Rpb24gcih0LGUscixuLG8saSxhKXt0cnl7dmFyIHU9dFtpXShhKSxjPXUudmFsdWV9Y2F0Y2godCl7cmV0dXJuIHZvaWQgcih0KX11LmRvbmU/ZShjKTpQcm9taXNlLnJlc29sdmUoYykudGhlbihuLG8pfXQuZXhwb3J0cz1mdW5jdGlvbih0KXtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgZT10aGlzLG49YXJndW1lbnRzO3JldHVybiBuZXcgUHJvbWlzZSgoZnVuY3Rpb24obyxpKXt2YXIgYT10LmFwcGx5KGUsbik7ZnVuY3Rpb24gdSh0KXtyKGEsbyxpLHUsYyxcXFwibmV4dFxcXCIsdCl9ZnVuY3Rpb24gYyh0KXtyKGEsbyxpLHUsYyxcXFwidGhyb3dcXFwiLHQpfXUodm9pZCAwKX0pKX19LHQuZXhwb3J0cy5kZWZhdWx0PXQuZXhwb3J0cyx0LmV4cG9ydHMuX19lc01vZHVsZT0hMH1dKTtcXG4vLyMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247Y2hhcnNldD11dGYtODtiYXNlNjQsZXlKMlpYSnphVzl1SWpvekxDSnpiM1Z5WTJWeklqcGJJbmRsWW5CaFkyczZMeTl5WlcxaWNtRnBibDl6ZEhKbFlXMXpMekF1YVc1a1pYZ3VkMjl5YTJWeUxtcHpJbDBzSW01aGJXVnpJanBiSW0xdlpIVnNaWE1pTENKcGJuTjBZV3hzWldSTmIyUjFiR1Z6SWl3aVgxOTNaV0p3WVdOclgzSmxjWFZwY21WZlh5SXNJbTF2WkhWc1pVbGtJaXdpWlhod2IzSjBjeUlzSW0xdlpIVnNaU0lzSW1raUxDSnNJaXdpWTJGc2JDSXNJbTBpTENKaklpd2laQ0lzSW01aGJXVWlMQ0puWlhSMFpYSWlMQ0p2SWl3aVQySnFaV04wSWl3aVpHVm1hVzVsVUhKdmNHVnlkSGtpTENKbGJuVnRaWEpoWW14bElpd2laMlYwSWl3aWNpSXNJbE41YldKdmJDSXNJblJ2VTNSeWFXNW5WR0ZuSWl3aWRtRnNkV1VpTENKMElpd2liVzlrWlNJc0lsOWZaWE5OYjJSMWJHVWlMQ0p1Y3lJc0ltTnlaV0YwWlNJc0ltdGxlU0lzSW1KcGJtUWlMQ0p1SWl3aWIySnFaV04wSWl3aWNISnZjR1Z5ZEhraUxDSndjbTkwYjNSNWNHVWlMQ0pvWVhOUGQyNVFjbTl3WlhKMGVTSXNJbkFpTENKeklpd2lYMmx1ZEdWeWIzQlNaWEYxYVhKbFJHVm1ZWFZzZENJc0lsOXlaV2RsYm1WeVlYUnZjaUlzSWw5MGVYQmxiMll5SWl3aVgyRnplVzVqVkc5SFpXNWxjbUYwYjNJeUlpd2lkM01pTENKdmJtMWxjM05oWjJVaUxDSmZjbVZtTWlJc0ltUmhkR0VpTENKMGVYQmxJaXdpY0dGNWJHOWhaQ0lzSW5WeWJDSXNJbU5zYjNObElpd2lWMlZpVTI5amEyVjBJaXdpYzNSeVpXRnRVM1JoY25RaUxDSndZV05yWlhRaUxDSnZibTl3Wlc0aUxDSnpaVzVrSWl3aVgzSmxaaUlzSW1SbFptRjFiSFFpTENKdFlYSnJJaXdpWDJOaGJHeGxaU0lzSW1WMklpd2laR0YwWVZSNWNHVWlMQ0pwYldGblpVSnNiMklpTENKc1pXNW5kR2h6SWl3aVNFVkJSRVZTWDBWT1JDSXNJbDlzWlc1bmRHaHpJaXdpZDNKaGNDSXNJbDlqYjI1MFpYaDBJaXdpY0hKbGRpSXNJbTVsZUhRaUxDSjBNQ0lzSWxWcGJuUTRRWEp5WVhraUxDSnpiR2xqWlNJc0ltRnljbUY1UW5WbVptVnlJaXdpZERFaUxDSnpaVzUwSWl3aWRESWlMQ0pWYVc1ME16SkJjbkpoZVNJc0luUXpJaXdpZERRaUxDSjBOU0lzSW5Sb1pXNGlMQ0oyWVd3aUxDSjFhVzUwT0NJc0luQnlaV0owYjJGaWRXWWlMQ0pzWlc1bmRHZ2lMQ0pUZEhKcGJtY2lMQ0ptY205dFEyaGhja052WkdVaUxDSmhjSEJzZVNJc0ltSjFaaUlzSW1KMGIyRWlMQ0p6Y21NaUxDSmpiMjVqWVhRaUxDSndiM04wVFdWemMyRm5aU0lzSW5RMklpd2ljM1J2Y0NJc0lsOTRJaXdpZEdocGN5SXNJbUZ5WjNWdFpXNTBjeUlzSW05dVkyeHZjMlVpTENKeVpXRnpiMjRpTENKdmJtVnljbTl5SWl3aVpYSnlJaXdpYjJKcUlpd2ljblZ1ZEdsdFpTSXNJazl3SWl3aWFHRnpUM2R1SWl3aUpGTjViV0p2YkNJc0ltbDBaWEpoZEc5eVUzbHRZbTlzSWl3aWFYUmxjbUYwYjNJaUxDSmhjM2x1WTBsMFpYSmhkRzl5VTNsdFltOXNJaXdpWVhONWJtTkpkR1Z5WVhSdmNpSXNJblJ2VTNSeWFXNW5WR0ZuVTNsdFltOXNJaXdpWkdWbWFXNWxJaXdpWTI5dVptbG5kWEpoWW14bElpd2lkM0pwZEdGaWJHVWlMQ0pwYm01bGNrWnVJaXdpYjNWMFpYSkdiaUlzSW5ObGJHWWlMQ0owY25sTWIyTnpUR2x6ZENJc0luQnliM1J2UjJWdVpYSmhkRzl5SWl3aVIyVnVaWEpoZEc5eUlpd2laMlZ1WlhKaGRHOXlJaXdpWTI5dWRHVjRkQ0lzSWtOdmJuUmxlSFFpTENKZmFXNTJiMnRsSWl3aWMzUmhkR1VpTENKdFpYUm9iMlFpTENKaGNtY2lMQ0pGY25KdmNpSXNJbVJ2Ym1WU1pYTjFiSFFpTENKa1pXeGxaMkYwWlNJc0ltUmxiR1ZuWVhSbFVtVnpkV3gwSWl3aWJXRjVZbVZKYm5admEyVkVaV3hsWjJGMFpTSXNJa052Ym5ScGJuVmxVMlZ1ZEdsdVpXd2lMQ0pmYzJWdWRDSXNJbVJwYzNCaGRHTm9SWGhqWlhCMGFXOXVJaXdpWVdKeWRYQjBJaXdpY21WamIzSmtJaXdpZEhKNVEyRjBZMmdpTENKa2IyNWxJaXdpYldGclpVbHVkbTlyWlUxbGRHaHZaQ0lzSW1adUlpd2lSMlZ1WlhKaGRHOXlSblZ1WTNScGIyNGlMQ0pIWlc1bGNtRjBiM0pHZFc1amRHbHZibEJ5YjNSdmRIbHdaU0lzSWtsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSWl3aVoyVjBVSEp2ZEc4aUxDSm5aWFJRY205MGIzUjVjR1ZQWmlJc0lrNWhkR2wyWlVsMFpYSmhkRzl5VUhKdmRHOTBlWEJsSWl3aWRtRnNkV1Z6SWl3aVIzQWlMQ0prWldacGJtVkpkR1Z5WVhSdmNrMWxkR2h2WkhNaUxDSm1iM0pGWVdOb0lpd2lRWE41Ym1OSmRHVnlZWFJ2Y2lJc0lsQnliMjFwYzJWSmJYQnNJaXdpY0hKbGRtbHZkWE5RY205dGFYTmxJaXdpWTJGc2JFbHVkbTlyWlZkcGRHaE5aWFJvYjJSQmJtUkJjbWNpTENKeVpYTnZiSFpsSWl3aWNtVnFaV04wSWl3aWFXNTJiMnRsSWl3aWNtVnpkV3gwSWl3aVgxOWhkMkZwZENJc0luVnVkM0poY0hCbFpDSXNJbVZ5Y205eUlpd2lkVzVrWldacGJtVmtJaXdpVkhsd1pVVnljbTl5SWl3aWFXNW1ieUlzSW5KbGMzVnNkRTVoYldVaUxDSnVaWGgwVEc5aklpd2ljSFZ6YUZSeWVVVnVkSEo1SWl3aWJHOWpjeUlzSW1WdWRISjVJaXdpZEhKNVRHOWpJaXdpWTJGMFkyaE1iMk1pTENKbWFXNWhiR3g1VEc5aklpd2lZV1owWlhKTWIyTWlMQ0owY25sRmJuUnlhV1Z6SWl3aWNIVnphQ0lzSW5KbGMyVjBWSEo1Ulc1MGNua2lMQ0pqYjIxd2JHVjBhVzl1SWl3aWNtVnpaWFFpTENKcGRHVnlZV0pzWlNJc0ltbDBaWEpoZEc5eVRXVjBhRzlrSWl3aWFYTk9ZVTRpTENKa2FYTndiR0Y1VG1GdFpTSXNJbWx6UjJWdVpYSmhkRzl5Um5WdVkzUnBiMjRpTENKblpXNUdkVzRpTENKamRHOXlJaXdpWTI5dWMzUnlkV04wYjNJaUxDSnpaWFJRY205MGIzUjVjR1ZQWmlJc0lsOWZjSEp2ZEc5Zlh5SXNJbUYzY21Gd0lpd2lZWE41Ym1NaUxDSlFjbTl0YVhObElpd2lhWFJsY2lJc0ltdGxlWE1pTENKeVpYWmxjbk5sSWl3aWNHOXdJaXdpYzJ0cGNGUmxiWEJTWlhObGRDSXNJbU5vWVhKQmRDSXNJbkp2YjNSU1pXTnZjbVFpTENKeWRtRnNJaXdpWlhoalpYQjBhVzl1SWl3aWFHRnVaR3hsSWl3aWJHOWpJaXdpWTJGMVoyaDBJaXdpYUdGelEyRjBZMmdpTENKb1lYTkdhVzVoYkd4NUlpd2labWx1WVd4c2VVVnVkSEo1SWl3aVkyOXRjR3hsZEdVaUxDSm1hVzVwYzJnaUxDSmpZWFJqYUNJc0luUm9jbTkzYmlJc0ltUmxiR1ZuWVhSbFdXbGxiR1FpTENKeVpXZGxibVZ5WVhSdmNsSjFiblJwYldVaUxDSmhZMk5wWkdWdWRHRnNVM1J5YVdOMFRXOWtaU0lzSW1kc2IySmhiRlJvYVhNaUxDSkdkVzVqZEdsdmJpSXNJbDkwZVhCbGIyWWlMQ0poYzNsdVkwZGxibVZ5WVhSdmNsTjBaWEFpTENKblpXNGlMQ0pmYm1WNGRDSXNJbDkwYUhKdmR5SXNJbUZ5WjNNaVhTd2liV0Z3Y0dsdVozTWlPaUpEUVVGVExGTkJRVlZCTEVkQlJWUXNTVUZCU1VNc1JVRkJiVUlzUjBGSGRrSXNVMEZCVTBNc1JVRkJiMEpETEVkQlJ6VkNMRWRCUVVkR0xFVkJRV2xDUlN4SFFVTnVRaXhQUVVGUFJpeEZRVUZwUWtVc1IwRkJWVU1zVVVGSGJrTXNTVUZCU1VNc1JVRkJVMG9zUlVGQmFVSkZMRWRCUVZrc1EwRkRla05ITEVWQlFVZElMRVZCUTBoSkxFZEJRVWNzUlVGRFNFZ3NVVUZCVXl4SlFWVldMRTlCVGtGS0xFVkJRVkZITEVkQlFWVkxMRXRCUVV0SUxFVkJRVTlFTEZGQlFWTkRMRVZCUVZGQkxFVkJRVTlFTEZGQlFWTkdMRWRCUnk5RVJ5eEZRVUZQUlN4SFFVRkpMRVZCUjBwR0xFVkJRVTlFTEZGQlMyWkdMRVZCUVc5Q1R5eEZRVUZKVkN4RlFVZDRRa1VzUlVGQmIwSlJMRVZCUVVsVUxFVkJSM2hDUXl4RlFVRnZRbE1zUlVGQlNTeFRRVUZUVUN4RlFVRlRVU3hGUVVGTlF5eEhRVU16UTFnc1JVRkJiMEpaTEVWQlFVVldMRVZCUVZOUkxFbEJRMnhEUnl4UFFVRlBReXhsUVVGbFdpeEZRVUZUVVN4RlFVRk5MRU5CUVVWTExGbEJRVmtzUlVGQlRVTXNTVUZCUzB3c1MwRkxhRVZZTEVWQlFXOUNhVUlzUlVGQlNTeFRRVUZUWml4SFFVTllMRzlDUVVGWVowSXNVVUZCTUVKQkxFOUJRVTlETEdGQlF6RkRUaXhQUVVGUFF5eGxRVUZsV2l4RlFVRlRaMElzVDBGQlQwTXNXVUZCWVN4RFFVRkZReXhOUVVGUExGZEJSVGRFVUN4UFFVRlBReXhsUVVGbFdpeEZRVUZUTEdGQlFXTXNRMEZCUld0Q0xFOUJRVThzUzBGUmRrUndRaXhGUVVGdlFuRkNMRVZCUVVrc1UwRkJVMFFzUlVGQlQwVXNSMEZGZGtNc1IwRkVWU3hGUVVGUVFTeEpRVUZWUml4RlFVRlJjRUlzUlVGQmIwSnZRaXhKUVVNdlFpeEZRVUZRUlN4RlFVRlZMRTlCUVU5R0xFVkJRM0JDTEVkQlFWY3NSVUZCVUVVc1IwRkJPRUlzYVVKQlFWWkdMRWRCUVhOQ1FTeEhRVUZUUVN4RlFVRk5SeXhYUVVGWkxFOUJRVTlJTEVWQlEyaEdMRWxCUVVsSkxFVkJRVXRZTEU5QlFVOVpMRTlCUVU4c1RVRkhka0lzUjBGR1FYcENMRVZCUVc5Q2FVSXNSVUZCUlU4c1IwRkRkRUpZTEU5QlFVOURMR1ZCUVdWVkxFVkJRVWtzVlVGQlZ5eERRVUZGVkN4WlFVRlpMRVZCUVUxTExFMUJRVTlCTEVsQlEzUkVMRVZCUVZCRkxFZEJRVFJDTEdsQ1FVRlVSaXhGUVVGdFFpeEpRVUZKTEVsQlFVbE5MRXRCUVU5T0xFVkJRVTl3UWl4RlFVRnZRbE1zUlVGQlJXVXNSVUZCU1VVc1JVRkJTeXhUUVVGVFFTeEhRVUZQTEU5QlFVOU9MRVZCUVUxTkxFbEJRVkZETEV0QlFVc3NTMEZCVFVRc1NVRkRPVWtzVDBGQlQwWXNSMEZKVW5oQ0xFVkJRVzlDTkVJc1JVRkJTU3hUUVVGVGVrSXNSMEZEYUVNc1NVRkJTVkVzUlVGQlUxSXNSMEZCVlVFc1JVRkJUMjlDTEZkQlF6ZENMRmRCUVhkQ0xFOUJRVTl3UWl4RlFVRm5RaXhUUVVNdlF5eFhRVUU0UWl4UFFVRlBRU3hIUVVWMFF5eFBRVVJCU0N4RlFVRnZRbE1zUlVGQlJVVXNSVUZCVVN4SlFVRkxRU3hIUVVNMVFrRXNSMEZKVWxnc1JVRkJiMEpaTEVWQlFVa3NVMEZCVTJsQ0xFVkJRVkZETEVkQlFWa3NUMEZCVDJwQ0xFOUJRVTlyUWl4VlFVRlZReXhsUVVGbE1VSXNTMEZCUzNWQ0xFVkJRVkZETEVsQlIzcEhPVUlzUlVGQmIwSnBReXhGUVVGSkxFZEJTV3BDYWtNc1JVRkJiMEpCTEVWQlFXOUNhME1zUlVGQlNTeEhRVzVHY0VRc1EwRnpSa01zUTBGRlNpeFRRVUZWTDBJc1JVRkJVVVFzUlVGQlUwWXNSMEZGYWtNc1lVRkhRU3hKUVVGSmJVTXNSVUZCZVVKdVF5eEZRVUZ2UWl4SFFVVTNRMjlETEVWQlFXVkVMRVZCUVhWQ2JrTXNSVUZCYjBJc1NVRkZNVVJ4UXl4RlFVRlhSaXhGUVVGMVFtNURMRVZCUVc5Q0xFbEJSWFJFYzBNc1JVRkJjVUpJTEVWQlFYVkNia01zUlVGQmIwSXNTVUZGYUVWMVF5eEZRVUZMTEV0Qk5rbFVReXhWUVVGWkxGTkJRVzFDUXl4SFFVTTNRaXhKUVVGSlF5eEZRVUZQUkN4RlFVRk5ReXhMUVVOaVF5eEZRVUZQUkN4RlFVRkxReXhMUVVOYVF5eEZRVUZWUml4RlFVRkxSU3hSUVVObVF5eEZRVUZOU0N4RlFVRkxSeXhKUVVWbUxFOUJRVkZHTEVkQlEwNHNTVUZCU3l4UFFVOUlMRTlCVGtsS0xFZEJRMFpCTEVWQlFVZFBMRTFCUVUwc1NVRkJUU3hoUVVkcVFsQXNSVUZCU3l4SlFVRkpVU3hWUVVGVlJpeFJRWFpLVUN4VFFVRlRSeXhGUVVGWlF5eEZRVUZSU2l4SFFVTjZRMDRzU1VGRFJrRXNSVUZCUjFjc1QwRkJVeXhYUVVOV1dDeEZRVUZIV1N4TFFVRkxSaXhKUVVkV1ZpeEZRVUZIUXl4VlFVRjVRaXhYUVVNeFFpeEpRVUZKV1N4SFFVRlBMRVZCUVVsa0xFVkJRVzFDWlN4VFFVRjFRbXBDTEVWQlFXRnBRaXhSUVVGUlF5eE5RVUZMTEZOQlFWTkRMRVZCUVZGRExFZEJRMnhITEVsQlFVbGtMRVZCUVUxbExFVkJRVlZETEVWQlFWZERMRVZCUVZORExFVkJRVmxETEVWQlJYQkVMRTlCUVU5NlFpeEZRVUZoYVVJc1VVRkJVVk1zVFVGQlN5eFRRVUZyUWtNc1IwRkRha1FzVDBGRFJTeFBRVUZSUVN4RlFVRlRReXhMUVVGUFJDeEZRVUZUUlN4TlFVTXZRaXhMUVVGTExFVkJTVWdzUjBGSVFVWXNSVUZCVTBNc1MwRkJUeXhGUVVOb1FuUkNMRVZCUVU5akxFVkJRVWRrTEV0QlJUUkNMRmxCUVdoRExFVkJRVWxNTEVWQlFWTm5RaXhUUVVGVFdDeEhRVUZ4UWl4RFFVTXZRM0ZDTEVWQlFWTkZMRXRCUVU4c1IwRkRhRUlzVFVGTFJpeFBRVVpCUml4RlFVRlRSeXhIUVVGTFF5eFhRVU5rU2l4RlFVRlRSU3hMUVVGUExFVkJRMVIyUWl4RlFVRkxNRUlzVFVGQlRTeEZRVUZITEVkQlFVZERMR05CUlRGQ0xFdEJRVXNzUlVGTFNDeEhRVXBCVGl4RlFVRlRUeXhIUVVGTFVDeEZRVUZUVVN4TFFVTjJRbVFzUlVGQlZ5eEpRVUZKVFN4RlFVRlRSeXhIUVVGSFNDeEZRVUZUVHl4SlFVRkpMRWRCUTNoRFdpeEZRVUZaTEV0QlJVOHNTVUZCWWtRc1JVRkJhVUlzUTBGRGNrSk5MRVZCUVZORkxFdEJRVThzUjBGRGFFSXNUVUZMUml4UFFVWkJSaXhGUVVGVFV5eEhRVUZMUXl4WlFVTmtWaXhGUVVGVFJTeExRVUZQTEVkQlExUjJRaXhGUVVGTE1FSXNUVUZCVFN4RlFVRkhMRWxCUVVsRExHTkJSVE5DTEV0QlFVc3NSMEZEU0U0c1JVRkJVMWNzUjBGQlMxZ3NSVUZCVTFFc1MwRkRka0phTEVWQlFWVXNTVUZCU1Vrc1JVRkJVMU1zUjBGQlIxUXNSVUZCVTFjc1NVRkRia05vUWl4RlFVRlphRUlzUlVGQlN6QkNMRTFCUVUwc1JVRkJSeXhGUVVGSlZDeEZRVUZSTEVsQlEzUkRTU3hGUVVGVFJTeExRVUZQTEVkQlEyaENMRTFCUlVZc1MwRkJTeXhIUVVOSUxFZEJRVzFDTEVsQlFXSlNMRVZCUVdsQ0xFTkJRM0pDVFN4RlFVRlRSU3hMUVVGUExFZEJRMmhDTEUxQlRVWXNUMEZJUVV3c1JVRkJZU3hIUVVOaVJ5eEZRVUZUV1N4SFFVRkxSaXhaUVVOa1ZpeEZRVUZUUlN4TFFVRlBMRWRCUTFSMlFpeEZRVUZMTUVJc1RVRkJUU3hGUVVGSFVpeEhRVUZaVXl4alFVVnVReXhMUVVGTExFZEJRMGhPTEVWQlFWTmhMRWRCUVV0aUxFVkJRVk5STEV0QlEzWkNWaXhGUVVGWExFbEJRVWxGTEVWQlFWTlpMRWRCUVVkYUxFVkJRVk5oTEVsQlEzQkRiRUlzUlVGQldXaENMRVZCUVVzd1FpeE5RVUZOVWl4RlFVRlpRU3hGUVVGaFF5eEZRVUZUTEVsQlJUTkVMRXRCUVVzc1IwRkRRMGdzUjBGRFJrRXNSVUZCVlZjc1kwRkJZMUVzVFVGQlN5eFRRVUZWUXl4SFFWRnlReXhKUVZCQkxFbEJRMGxETEVWQlFWRXNTVUZCU1Zvc1YwRkJWMWNzUjBGSmRrSkZMRVZCUVdFc1IwRkZValZGTEVWQlFVa3NSVUZCUjBFc1JVRkJTU3hGUVVGSFFTeEpRVUZMTEVOQlF6RkNMRWxCUVVsM1FpeEZRVUZKYlVRc1JVRkJUVVVzVDBGQlV5eEZRVU4yUWtRc1IwRkJZMFVzVDBGQlQwTXNZVUZCWVVNc1RVRkJUU3hMUVVGTlRDeEZRVUZOV0N4TlFVRk5lRU1zUlVGQlNYaENMRVZCUVVkM1FpeEhRVUZMZUVJc1JVRkJTU3hMUVVjMVJTeEpRVUZKYVVZc1JVRkJUVU1zUzBGQlMwNHNSMEZEV0U4c1JVRkJUU3hSUVVGUlF5eFBRV0pRTEZsQllXOUNMRmxCUVdOSUxFVkJRemREU1N4WlFVRlpMRU5CUTFZNVF5eExRVUZOTEZGQlEwNURMRkZCUVZNeVF5eFBRVXRtZUVJc1JVRkJVMFVzUzBGQlR5eEhRVU5vUWl4TlFVVkdMRXRCUVVzc1IwRkRTSGRDTEZsQlFWa3NLMEpCUVN0Q1JDeFBRVUZQT1VNc1NVRkZjRVFzUzBGQlN5eEhRVU5JY1VJc1JVRkJVMFVzUzBGQlR5eEhRVU5vUWl4TlFVVkdMRXRCUVVzc1IwRkRTRVlzUlVGQlUwTXNTMEZCVHl4SFFVTm9Ra1FzUlVGQlV6SkNMRWRCUVVzelFpeEZRVUZuUWl4TlFVRkZMRWRCUTJoRE1FSXNXVUZCV1N4RFFVTldPVU1zUzBGQlRTeFJRVU5PUXl4UlFVRlRiVUlzUlVGQlV6SkNMRXRCUjNSQ0xFdEJRVXNzUjBGRFRDeEpRVUZMTEUxQlEwZ3NUMEZCVHpOQ0xFVkJRVk0wUWl4VlFVZHlRbkJETEVWQlFWTXNTMEZCVFN4RFFVRkRMRU5CUVVNc1JVRkJSeXhWUVVkNlFpeFBRVUZQTEZOQlFWVnhReXhIUVVObUxFOUJRVTk0UXl4RlFVRkxaME1zVFVGQlRWTXNTMEZCVFVNc1dVRTFSMEVzUjBGblNEVkNka1FzUlVGQlIzZEVMRkZCUVZVc1UwRkJWWFpETEVkQlEwZ3NZMEZCWkVFc1JVRkJSM2RETEZGQlEweDZSQ3hGUVVGTExFbEJRVWxSTEZWQlFWVkdMRWRCUTI1Q1J5eEZRVUZaUXl4RlFVRlJTaXhKUVVWd1FqUkRMRmxCUVZrc1EwRkRWamxETEV0QlFVMHNVVUZEVGtNc1VVRkJVeXhSUVV0bVRDeEZRVUZITUVRc1VVRkJWU3hUUVVGVlF5eEhRVU55UWxRc1dVRkJXU3hEUVVOV09VTXNTMEZCVFN4UlFVTk9ReXhSUVVGVGMwUXNUVUZ0UWxoc1JDeERRVUZaU2l4RlFVRlRReXhIUVVkMlFpeEpRVUZMTEZGQlRVZ3NXVUZNU1U0c1NVRkRSa0VzUlVGQlIwOHNUVUZCVFN4SlFVRk5MR0ZCUTJaUUxFVkJRVXNzVlVGVFVDeFRRVUZWY0VNc1JVRkJVVVFzUjBGUmVFSkRMRVZCUVU5RUxGRkJUbEFzVTBGQlowTnBSeXhIUVVNNVFpeFBRVUZQUVN4SFFVRlBRU3hGUVVGSk5VVXNWMEZCWVRSRkxFVkJRVTBzUTBGRGJrTTVReXhSUVVGWE9FTXNTVUZMWm1oSExFVkJRVTlFTEZGQlFXbENMRkZCUVVsRExFVkJRVTlFTEZGQlFWTkRMRVZCUVU5RUxGRkJRVkZ4UWl4WlFVRmhMRWRCU1d4RkxGTkJRVlZ3UWl4RlFVRlJSQ3hGUVVGVFJpeEhRVVZxUTBjc1JVRkJUMFFzVVVGQlZVWXNSVUZCYjBJc1NVRkxMMElzVTBGQlZVY3NSVUZCVVVRc1JVRkJVMFlzUjBGVGFrTXNTVUZCU1c5SExFVkJRVmNzVTBGQlZXeEhMRWRCUTNaQ0xHRkJSVUVzU1VGQlNXMUhMRVZCUVV0NFJpeFBRVUZQYTBJc1ZVRkRXblZGTEVWQlFWTkVMRVZCUVVkeVJTeGxRVVZhZFVVc1JVRkJORUlzYlVKQlFWaHlSaXhQUVVGM1FrRXNUMEZCVXl4SFFVTnNSSE5HTEVWQlFXbENSQ3hGUVVGUlJTeFZRVUZaTEdGQlEzSkRReXhGUVVGelFrZ3NSVUZCVVVrc1pVRkJhVUlzYTBKQlF5OURReXhGUVVGdlFrd3NSVUZCVVhCR0xHRkJRV1VzWjBKQlJTOURMRk5CUVZNd1JpeEZRVUZQVml4RlFVRkxla1VzUlVGQlMwNHNSMEZQZUVJc1QwRk9RVkFzVDBGQlQwTXNaVUZCWlhGR0xFVkJRVXQ2UlN4RlFVRkxMRU5CUXpsQ1RpeE5RVUZQUVN4RlFVTlFUQ3haUVVGWkxFVkJRMW9yUml4alFVRmpMRVZCUTJSRExGVkJRVlVzU1VGRlRGb3NSVUZCU1hwRkxFZEJSV0lzU1VGRlJXMUdMRVZCUVU4c1IwRkJTU3hKUVVOWUxFMUJRVTlZTEVkQlExQlhMRVZCUVZNc1UwRkJVMVlzUlVGQlMzcEZMRVZCUVV0T0xFZEJRekZDTEU5QlFVOHJSU3hGUVVGSmVrVXNSMEZCVDA0c1IwRkpkRUlzVTBGQlV6QkRMRVZCUVV0clJDeEZRVUZUUXl4RlFVRlRReXhGUVVGTlF5eEhRVVZ3UXl4SlFVRkpReXhGUVVGcFFrZ3NSMEZCVjBFc1JVRkJVV3hHTEhGQ1FVRnhRbk5HTEVWQlFWbEtMRVZCUVZWSkxFVkJReTlGUXl4RlFVRlpla2NzVDBGQlQxa3NUMEZCVHpKR0xFVkJRV1Z5Uml4WFFVTjZRM2RHTEVWQlFWVXNTVUZCU1VNc1JVRkJVVXdzUjBGQlpTeEpRVTE2UXl4UFFVWkJSeXhGUVVGVlJ5eFJRWFZOV2l4VFFVRXdRbFFzUlVGQlUwVXNSVUZCVFVzc1IwRkRka01zU1VGQlNVY3NSVUZvVEhWQ0xHbENRV3RNTTBJc1QwRkJUeXhUUVVGblFrTXNSVUZCVVVNc1IwRkROMElzUjBGcVRHOUNMR05CYVV4b1FrWXNSVUZEUml4TlFVRk5MRWxCUVVsSExFMUJRVTBzWjBOQlIyeENMRWRCY0V4dlFpeGpRVzlNYUVKSUxFVkJRVFpDTEVOQlF5OUNMRWRCUVdVc1ZVRkJXRU1zUlVGRFJpeE5RVUZOUXl4RlFVdFNMRTlCUVU5RkxFbEJUVlFzU1VGSVFWQXNSVUZCVVVrc1QwRkJVMEVzUlVGRGFrSktMRVZCUVZGTExFbEJRVTFCTEVsQlJVUXNRMEZEV0N4SlFVRkpSeXhGUVVGWFVpeEZRVUZSVVN4VFFVTjJRaXhIUVVGSlFTeEZRVUZWTEVOQlExb3NTVUZCU1VNc1JVRkJhVUpETEVWQlFXOUNSaXhGUVVGVlVpeEhRVU51UkN4SFFVRkpVeXhGUVVGblFpeERRVU5zUWl4SFFVRkpRU3hKUVVGdFFrVXNSVUZCYTBJc1UwRkRla01zVDBGQlQwWXNSMEZKV0N4SFFVRjFRaXhUUVVGdVFsUXNSVUZCVVVrc1QwRkhWa29zUlVGQlVXaEVMRXRCUVU5blJDeEZRVUZSV1N4TlFVRlJXaXhGUVVGUlN5eFRRVVZzUXl4SFFVRjFRaXhWUVVGdVFrd3NSVUZCVVVrc1QwRkJiMElzUTBGRGNrTXNSMEZ3VG5GQ0xHMUNRVzlPYWtKRUxFVkJSVVlzVFVGRVFVRXNSVUZzVG1Nc1dVRnRUbEpJTEVWQlFWRkxMRWxCUjJoQ1RDeEZRVUZSWVN4clFrRkJhMEppTEVWQlFWRkxMRk5CUlU0c1YwRkJia0pNTEVWQlFWRkpMRkZCUTJwQ1NpeEZRVUZSWXl4UFFVRlBMRk5CUVZWa0xFVkJRVkZMTEV0QlIyNURSaXhGUVRkT2EwSXNXVUVyVG14Q0xFbEJRVWxaTEVWQlFWTkRMRVZCUVZOMlFpeEZRVUZUUlN4RlFVRk5TeXhIUVVOeVF5eEhRVUZ2UWl4WFFVRm9RbVVzUlVGQlR6TkdMRXRCUVcxQ0xFTkJUelZDTEVkQlNrRXJSU3hGUVVGUlNDeEZRVUZSYVVJc1MwRnNUMEVzV1VGR1N5eHBRa0YzVDJwQ1JpeEZRVUZQVml4TlFVRlJUU3hGUVVOcVFpeFRRVWRHTEUxQlFVOHNRMEZEVERsSExFMUJRVTlyU0N4RlFVRlBWaXhKUVVOa1dTeExRVUZOYWtJc1JVRkJVV2xDTEUxQlIxTXNWVUZCYUVKR0xFVkJRVTh6Uml4UFFVTm9RaXRGTEVWQmFGQm5RaXhaUVcxUWFFSklMRVZCUVZGSkxFOUJRVk1zVVVGRGFrSktMRVZCUVZGTExFbEJRVTFWTEVWQlFVOVdMRTlCTDFGUVlTeERRVUZwUW5wQ0xFVkJRVk5GTEVWQlFVMUxMRWRCUlRkRFJDeEZRV05VTEZOQlFWTnBRaXhGUVVGVFJ5eEZRVUZKZGtNc1JVRkJTM2xDTEVkQlEzcENMRWxCUTBVc1RVRkJUeXhEUVVGRmFrWXNTMEZCVFN4VFFVRlZhVVlzU1VGQlMyTXNSVUZCUjNCSkxFdEJRVXMyUml4RlFVRkxlVUlzU1VGRE0wTXNUVUZCVHpGQ0xFZEJRMUFzVFVGQlR5eERRVUZGZGtRc1MwRkJUU3hSUVVGVGFVWXNTVUZCU3pGQ0xFbEJhRUpxUTJoSExFVkJRVkUwUkN4TFFVRlBRU3hGUVc5Q1ppeEpRVTlKYjBVc1JVRkJiVUlzUjBGTmRrSXNVMEZCVTJJc1MwRkRWQ3hUUVVGVGMwSXNTMEZEVkN4VFFVRlRReXhMUVVsVUxFbEJRVWxETEVWQlFXOUNMRWRCUTNoQ2FFTXNSVUZCVDJkRExFVkJRVzFDY2tNc1IwRkJaMElzVjBGRGVFTXNUMEZCVDFnc1VVRkhWQ3hKUVVGSmFVUXNSVUZCVjJwSkxFOUJRVTlyU1N4bFFVTnNRa01zUlVGQk1FSkdMRWRCUVZsQkxFVkJRVk5CTEVWQlFWTkhMRVZCUVU4c1RVRkRMMFJFTEVkQlEwRkJMRWxCUVRSQ00wTXNSMEZETlVKRExFVkJRVTlvUnl4TFFVRkxNRWtzUlVGQmVVSjRReXhMUVVkMlEzRkRMRVZCUVc5Q1J5eEhRVWQwUWl4SlFVRkpSU3hGUVVGTFRpeEZRVUV5UWpkSExGVkJRMnhEYzBZc1JVRkJWWFJHTEZWQlFWbHNRaXhQUVVGUFdTeFBRVUZQYjBnc1IwRlpkRU1zVTBGQlUwMHNSVUZCYzBKd1NDeEhRVU0zUWl4RFFVRkRMRTlCUVZFc1VVRkJVeXhWUVVGVmNVZ3NVMEZCVVN4VFFVRlRla0lzUjBGRE0wTmtMRVZCUVU4NVJTeEZRVUZYTkVZc1IwRkJVU3hUUVVGVFF5eEhRVU5xUXl4UFFVRlBMMElzUzBGQlN6UkNMRkZCUVZGRkxFVkJRVkZETEZOQmEwTnNReXhUUVVGVGVVSXNSVUZCWXk5Q0xFVkJRVmRuUXl4SFFXZERhRU1zU1VGQlNVTXNSVUZuUTBveFJDeExRVUZMTkVJc1VVRTVRa3dzVTBGQmFVSkZMRVZCUVZGRExFZEJRM1pDTEZOQlFWTTBRaXhKUVVOUUxFOUJRVThzU1VGQlNVWXNSMEZCV1N4VFFVRlRSeXhGUVVGVFF5eEpRVzVETjBNc1UwRkJVME1zUlVGQlQyaERMRVZCUVZGRExFVkJRVXMyUWl4RlFVRlRReXhIUVVOd1F5eEpRVUZKY0VJc1JVRkJVME1zUlVGQlUycENMRVZCUVZWTExFZEJRVk5NTEVWQlFWZE5MRWRCUTNCRUxFZEJRVzlDTEZWQlFXaENWU3hGUVVGUE0wWXNTMEZGU2l4RFFVTk1MRWxCUVVscFNDeEZRVUZUZEVJc1JVRkJUMVlzU1VGRGFFSjRSeXhGUVVGUmQwa3NSVUZCVDNoSkxFMUJRMjVDTEU5QlFVbEJMRWRCUTJsQ0xHbENRVUZXUVN4SFFVTlFhMFlzUlVGQlQyaEhMRXRCUVV0akxFVkJRVThzVjBGRFpHdEpMRVZCUVZsSExGRkJRVkZ5U1N4RlFVRk5lVWtzVTBGQlUyaEdMRTFCUVVzc1UwRkJVM3BFTEVkQlEzUkVkVWtzUlVGQlR5eFBRVUZSZGtrc1JVRkJUM0ZKTEVWQlFWTkRMRTFCUXpsQ0xGTkJRVk40UkN4SFFVTldlVVFzUlVGQlR5eFJRVUZUZWtRc1JVRkJTM1ZFTEVWQlFWTkRMRTFCU1ROQ1NpeEZRVUZaUnl4UlFVRlJja2tzUjBGQlQzbEVMRTFCUVVzc1UwRkJVMmxHTEVkQlNUbERSaXhGUVVGUGVFa3NUVUZCVVRCSkxFVkJRMlpNTEVWQlFWRkhMRTFCUTFBc1UwRkJVMGNzUjBGSFZpeFBRVUZQU2l4RlFVRlBMRkZCUVZOSkxFVkJRVTlPTEVWQlFWTkRMRTFCZGtKNlEwRXNSVUZCVDNCQ0xFVkJRVTlXTEV0QmFVTmFLMElzUTBGQlQyaERMRVZCUVZGRExFVkJRVXMyUWl4RlFVRlRReXhOUVVscVF5eFBRVUZQU0N4RlFXRk1RU3hGUVVGclFrRXNSVUZCWjBJeFJTeExRVU5vUXpKRkxFVkJSMEZCTEVkQlEwVkJMRXRCYTBoV0xGTkJRVk4yUWl4RlFVRnZRa1lzUlVGQlZWSXNSMEZEY2tNc1NVRkJTVWtzUlVGQlUwa3NSVUZCVTNSQ0xGTkJRVk5qTEVWQlFWRkpMRkZCUTNaRExGRkJNMVJGY1VNc1NVRXlWRVZ5UXl4RlFVRnpRaXhEUVV0NFFpeEhRVVpCU2l4RlFVRlJVU3hUUVVGWExFdEJSVWtzVlVGQmJrSlNMRVZCUVZGSkxFOUJRVzlDTEVOQlJUbENMRWRCUVVsSkxFVkJRVk4wUWl4VFFVRnBRaXhUUVVjMVFtTXNSVUZCVVVrc1QwRkJVeXhUUVVOcVFrb3NSVUZCVVVzc1UwRjBWVnB2UXl4RlFYVlZTUzlDTEVWQlFXOUNSaXhGUVVGVlVpeEhRVVZRTEZWQlFXNUNRU3hGUVVGUlNTeFJRVWRXTEU5QlFVOVBMRVZCU1ZoWUxFVkJRVkZKTEU5QlFWTXNVVUZEYWtKS0xFVkJRVkZMTEVsQlFVMHNTVUZCU1hGRExGVkJRMmhDTEd0RVFVZEtMRTlCUVU4dlFpeEZRVWRVTEVsQlFVbEpMRVZCUVZORExFVkJRVk5hTEVWQlFWRkpMRVZCUVZOMFFpeFRRVUZWWXl4RlFVRlJTeXhMUVVWNlJDeEhRVUZ2UWl4VlFVRm9RbFVzUlVGQlR6TkdMRXRCU1ZRc1QwRklRVFJGTEVWQlFWRkpMRTlCUVZNc1VVRkRha0pLTEVWQlFWRkxMRWxCUVUxVkxFVkJRVTlXTEVsQlEzSkNUQ3hGUVVGUlVTeFRRVUZYTEV0QlExcEhMRVZCUjFRc1NVRkJTV2RETEVWQlFVODFRaXhGUVVGUFZpeEpRVVZzUWl4UFFVRk5jME1zUlVGUFJrRXNSVUZCU3pGQ0xFMUJSMUJxUWl4RlFVRlJVU3hGUVVGVGIwTXNXVUZCWTBRc1JVRkJTemxKTEUxQlIzQkRiVWNzUlVGQlVYUkVMRXRCUVU4NFJDeEZRVUZUY1VNc1VVRlJSQ3hYUVVGdVFqZERMRVZCUVZGSkxGTkJRMVpLTEVWQlFWRkpMRTlCUVZNc1QwRkRha0pLTEVWQlFWRkxMRk5CTVZoV2IwTXNSMEZ2V1VaNlF5eEZRVUZSVVN4VFFVRlhMRXRCUTFwSExFZEJUa1ZuUXl4SFFUTkNVRE5ETEVWQlFWRkpMRTlCUVZNc1VVRkRha0pLTEVWQlFWRkxMRWxCUVUwc1NVRkJTWEZETEZWQlFWVXNiME5CUXpWQ01VTXNSVUZCVVZFc1UwRkJWeXhMUVVOYVJ5eEhRVzlFV0N4VFFVRlRiVU1zUlVGQllVTXNSMEZEY0VJc1NVRkJTVU1zUlVGQlVTeERRVUZGUXl4UFFVRlJSaXhGUVVGTExFbEJSWFpDTEV0QlFVdEJMRWxCUTFCRExFVkJRVTFGTEZOQlFWZElMRVZCUVVzc1NVRkhjRUlzUzBGQlMwRXNTVUZEVUVNc1JVRkJUVWNzVjBGQllVb3NSVUZCU3l4SFFVTjRRa01zUlVGQlRVa3NVMEZCVjB3c1JVRkJTeXhKUVVkNFFucEZMRXRCUVVzclJTeFhRVUZYUXl4TFFVRkxUaXhIUVVkMlFpeFRRVUZUVHl4RlFVRmpVQ3hIUVVOeVFpeEpRVUZKYWtNc1JVRkJVMmxETEVWQlFVMVJMRmxCUVdNc1IwRkRha042UXl4RlFVRlBNMFlzUzBGQlR5eG5Ra0ZEVURKR0xFVkJRVTlXTEVsQlEyUXlReXhGUVVGTlVTeFhRVUZoZWtNc1JVRkhja0lzVTBGQlUyUXNSVUZCVVV3c1IwRkpablJDTEV0QlFVc3JSU3hYUVVGaExFTkJRVU1zUTBGQlJVb3NUMEZCVVN4VFFVTTNRbkpFTEVWQlFWbHBReXhSUVVGUmFVSXNSVUZCWTNoRkxFMUJRMnhEUVN4TFFVRkxiVVlzVDBGQlRTeEhRVGhDWWl4VFFVRlRMMElzUlVGQlQyZERMRWRCUTJRc1IwRkJTVUVzUlVGQlZTeERRVU5hTEVsQlFVbERMRVZCUVdsQ1JDeEZRVUZUZWtVc1IwRkRPVUlzUjBGQlNUQkZMRVZCUTBZc1QwRkJUMEVzUlVGQlpUVkxMRXRCUVVzeVN5eEhRVWMzUWl4SFFVRTJRaXh0UWtGQmJFSkJMRVZCUVZOb1NDeExRVU5zUWl4UFFVRlBaMGdzUlVGSFZDeEpRVUZMUlN4TlFVRk5SaXhGUVVGVGFFY3NVVUZCVXl4RFFVTXpRaXhKUVVGSk4wVXNSMEZCU3l4RlFVRkhOa1FzUlVGQlR5eFRRVUZUUVN4SlFVTXhRaXhQUVVGVE4wUXNSVUZCU1RaTExFVkJRVk5vUnl4UlFVTndRaXhIUVVGSmNVSXNSVUZCVDJoSExFdEJRVXN5U3l4RlFVRlZOMHNzUjBGSGVFSXNUMEZHUVRaRUxFVkJRVXMzUXl4TlFVRlJOa29zUlVGQlV6ZExMRWRCUTNSQ05rUXNSVUZCUzNWRkxFMUJRVThzUlVGRFRIWkZMRVZCVDFnc1QwRklRVUVzUlVGQlN6ZERMRmRCTVdWVU5Fa3NSVUV5WlVrdlJpeEZRVUZMZFVVc1RVRkJUeXhGUVVWTWRrVXNSMEZIVkN4UFFVRlBRU3hGUVVGTFFTeExRVUZQUVN4SFFVdDJRaXhOUVVGUExFTkJRVVZCTEV0QlFVMDJSQ3hIUVVscVFpeFRRVUZUUVN4SlFVTlFMRTFCUVU4c1EwRkJSVEZITEZkQk1XWlFORWtzUlVFd1pubENlRUlzVFVGQlRTeEhRU3ROYmtNc1QwRTNiVUpCUnl4RlFVRnJRalZITEZWQlFWazJSeXhGUVVNNVFpOUNMRVZCUVU5eFF5eEZRVUZKTEdOQlFXVk9MRWRCUXpGQ0wwSXNSVUZCVHl0Q0xFVkJRVFJDTEdOQlFXVkVMRWRCUTJ4RVFTeEZRVUZyUW5sRExGbEJRV04yUlN4RlFVTTVRaXRDTEVWQlEwRm9ReXhGUVVOQkxIRkNRV0ZHTVVjc1JVRkJVVzFNTEc5Q1FVRnpRaXhUUVVGVFF5eEhRVU55UXl4SlFVRkpReXhGUVVGNVFpeHRRa0ZCV0VRc1IwRkJlVUpCTEVWQlFVOUZMRmxCUTJ4RUxGRkJRVTlFTEVsQlEwaEJMRWxCUVZNMVF5eEhRVWN5UWl4MVFrRkJia00wUXl4RlFVRkxTQ3hoUVVGbFJ5eEZRVUZMTjBzc1VVRkphRU5TTEVWQlFWRnZSQ3hMUVVGUExGTkJRVk5uU1N4SFFWRjBRaXhQUVZCSmVrc3NUMEZCVHpSTExHVkJRMVExU3l4UFFVRlBORXNzWlVGQlpVZ3NSVUZCVVRGRExFbEJSVGxDTUVNc1JVRkJUMGtzVlVGQldUbERMRVZCUTI1Q0wwSXNSVUZCVDNsRkxFVkJRVkV4UlN4RlFVRnRRaXh6UWtGRmNFTXdSU3hGUVVGUGRrb3NWVUZCV1d4Q0xFOUJRVTlaTEU5QlFVOTVTQ3hIUVVNeFFtOURMRWRCVDFSd1RDeEZRVUZSZVV3c1RVRkJVU3hUUVVGVEwwUXNSMEZEZGtJc1RVRkJUeXhEUVVGRmFVTXNVVUZCVTJwRExFbEJjMFZ3UW5WQ0xFVkJRWE5DUlN4RlFVRmpkRWdzVjBGRGNFTTRSU3hGUVVGUGQwTXNSVUZCWTNSSUxGVkJRVmN5UlN4SFFVRnhRaXhYUVVOdVJDeFBRVUZQWWl4UlFVVlVNMFlzUlVGQlVXMUtMR05CUVdkQ1FTeEZRVXQ0UW01S0xFVkJRVkV3VEN4TlFVRlJMRk5CUVZNMVJTeEZRVUZUUXl4RlFVRlRReXhGUVVGTlF5eEZRVUZoYlVNc1VVRkRlRU1zU1VGQmFFSkJMRWxCUVhkQ1FTeEZRVUZqZFVNc1UwRkZNVU1zU1VGQlNVTXNSVUZCVHl4SlFVRkpla01zUlVGRFluWkdMRVZCUVV0clJDeEZRVUZUUXl4RlFVRlRReXhGUVVGTlF5eEhRVU0zUW0xRExFZEJSMFlzVDBGQlQzQktMRVZCUVZGdFRDeHZRa0ZCYjBKd1JTeEhRVU12UWpaRkxFVkJRMEZCTEVWQlFVczNTQ3hQUVVGUFdTeE5RVUZMTEZOQlFWTXJSU3hIUVVONFFpeFBRVUZQUVN4RlFVRlBjRUlzUzBGQlQyOUNMRVZCUVU5NFNTeE5RVUZSTUVzc1JVRkJTemRJTEZkQmRVdHFSR3RHTEVWQlFYTkNSQ3hIUVVWMFFuSkRMRVZCUVU5eFF5eEZRVUZKZEVNc1JVRkJiVUlzWVVGUE9VSkRMRVZCUVU5eFF5eEZRVUZKTVVNc1IwRkJaMElzVjBGRGVrSXNUMEZCVDFnc1VVRkhWR2RDTEVWQlFVOXhReXhGUVVGSkxGbEJRVmtzVjBGRGNrSXNUVUZCVHl4M1FrRnJRMVJvU2l4RlFVRlJOa3dzUzBGQlR5eFRRVUZUYkVzc1IwRkRkRUlzU1VGQlNXdExMRVZCUVU4c1IwRkRXQ3hKUVVGTExFbEJRVWx5U3l4TFFVRlBSeXhGUVVOa2Ewc3NSVUZCUzJ4Q0xFdEJRVXR1U2l4SFFVMWFMRTlCU2tGeFN5eEZRVUZMUXl4VlFVbEZMRk5CUVZNdlNDeEpRVU5rTEV0QlFVODRTQ3hGUVVGTE9VY3NVVUZCVVN4RFFVTnNRaXhKUVVGSmRrUXNSVUZCVFhGTExFVkJRVXRGTEUxQlEyWXNSMEZCU1haTExFdEJRVTlITEVWQlIxUXNUMEZHUVc5RExFVkJRVXMzUXl4TlFVRlJUU3hGUVVOaWRVTXNSVUZCUzNWRkxFMUJRVThzUlVGRFRIWkZMRVZCVVZnc1QwRkVRVUVzUlVGQlMzVkZMRTFCUVU4c1JVRkRUSFpGTEVsQmMwTllMMFFzUlVGQlVTdEpMRTlCUVZOQkxFVkJUV3BDZWtJc1JVRkJVWHBHTEZWQlFWa3NRMEZEYkVKNVNpeFpRVUZoYUVVc1JVRkZZbmRFTEUxQlFVOHNVMEZCVTJ0Q0xFZEJZMlFzUjBGaVFYSkhMRXRCUVVzM1FpeExRVUZQTEVWQlExbzJRaXhMUVVGTE5VSXNTMEZCVHl4RlFVZGFORUlzUzBGQlMzUkNMRXRCUVU5elFpeExRVUZMYzBNc1YwRnlaMEpxUWpaQ0xFVkJjMmRDUVc1RkxFdEJRVXN5UXl4TlFVRlBMRVZCUTFvelF5eExRVUZMYTBNc1UwRkJWeXhMUVVWb1FteERMRXRCUVVzNFFpeFBRVUZUTEU5QlEyUTVRaXhMUVVGTEswSXNVMEV4WjBKTWIwTXNSVUUwWjBKQmJrVXNTMEZCU3l0RkxGZEJRVmQ0UWl4UlFVRlJNRUlzU1VGRmJrSnZRaXhGUVVOSUxFbEJRVXNzU1VGQlNYaE1MRXRCUVZGdFJpeExRVVZSTEUxQlFXNUNia1lzUlVGQlMzbE1MRTlCUVU4c1NVRkRXamRHTEVWQlFVOW9SeXhMUVVGTGRVWXNTMEZCVFc1R0xFdEJRMnBDZVVzc1QwRkJUM3BMTEVWQlFVc3dSQ3hOUVVGTkxFMUJRM0pDZVVJc1MwRkJTMjVHTEZGQmNHaENXSE5LTEVsQk1HaENSbkpGTEV0QlFVMHNWMEZEU2tVc1MwRkJTekpETEUxQlFVOHNSVUZGV2l4SlFVTkpORVFzUlVGRVdYWkhMRXRCUVVzclJTeFhRVUZYTEVkQlEweEhMRmRCUXpOQ0xFZEJRWGRDTEZWQlFYQkNjVUlzUlVGQlYzcEtMRXRCUTJJc1RVRkJUWGxLTEVWQlFWZDRSU3hKUVVkdVFpeFBRVUZQTDBJc1MwRkJTM2RITEUxQlIyUnFSU3hyUWtGQmJVSXNVMEZCVTJ0RkxFZEJRekZDTEVkQlFVbDZSeXhMUVVGTE1rTXNTMEZEVUN4TlFVRk5PRVFzUlVGSFVpeEpRVUZKTDBVc1JVRkJWVEZDTEV0QlEyUXNVMEZCVXpCSExFVkJRVTlETEVWQlFVdERMRWRCV1c1Q0xFOUJXRUZ1UlN4RlFVRlBNMFlzUzBGQlR5eFJRVU5rTWtZc1JVRkJUMVlzU1VGQlRUQkZMRVZCUTJJdlJTeEZRVUZSZEVRc1MwRkJUM1ZKTEVWQlJWaERMRWxCUjBac1JpeEZRVUZSU1N4UFFVRlRMRTlCUTJwQ1NpeEZRVUZSU3l4VFFYSnFRbHB2UXl4TFFYZHFRbGw1UXl4RlFVZGFMRWxCUVVzc1NVRkJTWEpOTEVWQlFVbDVSaXhMUVVGTEswVXNWMEZCVnpOR0xFOUJRVk1zUlVGQlJ6ZEZMRWRCUVVzc1NVRkJTMEVzUlVGQlJ5eERRVU53UkN4SlFVRkpiVXNzUlVGQlVURkZMRXRCUVVzclJTeFhRVUZYZUVzc1IwRkRlRUpyU1N4RlFVRlRhVU1zUlVGQlRWRXNWMEZGYmtJc1IwRkJjVUlzVTBGQmFrSlNMRVZCUVUxRExFOUJTVklzVDBGQlR5dENMRVZCUVU4c1QwRkhhRUlzUjBGQlNXaERMRVZCUVUxRExGRkJRVlV6UlN4TFFVRkxOMElzUzBGQlRTeERRVU0zUWl4SlFVRkpNRWtzUlVGQlYzQkhMRVZCUVU5b1J5eExRVUZMYVVzc1JVRkJUeXhaUVVNNVFtOURMRVZCUVdGeVJ5eEZRVUZQYUVjc1MwRkJTMmxMTEVWQlFVOHNZMEZGY0VNc1IwRkJTVzFETEVkQlFWbERMRVZCUVZrc1EwRkRNVUlzUjBGQlNUbEhMRXRCUVVzM1FpeExRVUZQZFVjc1JVRkJUVVVzVTBGRGNFSXNUMEZCVHpoQ0xFVkJRVTlvUXl4RlFVRk5SU3hWUVVGVkxFZEJRM3BDTEVkQlFVazFSU3hMUVVGTE4wSXNTMEZCVDNWSExFVkJRVTFITEZkQlF6TkNMRTlCUVU4MlFpeEZRVUZQYUVNc1JVRkJUVWNzYVVKQlIycENMRWRCUVVsblF5eEhRVU5VTEVkQlFVazNSeXhMUVVGTE4wSXNTMEZCVDNWSExFVkJRVTFGTEZOQlEzQkNMRTlCUVU4NFFpeEZRVUZQYUVNc1JVRkJUVVVzVlVGQlZTeFBRVWN6UWl4TFFVRkphME1zUlVGTlZDeE5RVUZOTEVsQlFVazVSU3hOUVVGTkxEQkRRVXhvUWl4SFFVRkphRU1zUzBGQlN6ZENMRXRCUVU5MVJ5eEZRVUZOUnl4WFFVTndRaXhQUVVGUE5rSXNSVUZCVDJoRExFVkJRVTFITEdkQ1FWVTVRbkpETEU5QlFWRXNVMEZCVXpGR0xFVkJRVTFwUml4SFFVTnlRaXhKUVVGTExFbEJRVWw0U0N4RlFVRkplVVlzUzBGQlN5dEZMRmRCUVZjelJpeFBRVUZUTEVWQlFVYzNSU3hIUVVGTExFbEJRVXRCTEVWQlFVY3NRMEZEY0VRc1NVRkJTVzFMTEVWQlFWRXhSU3hMUVVGTEswVXNWMEZCVjNoTExFZEJRelZDTEVkQlFVbHRTeXhGUVVGTlF5eFJRVUZWTTBVc1MwRkJTemRDTEUxQlEzSkNjME1zUlVGQlQyaEhMRXRCUVV0cFN5eEZRVUZQTEdWQlEyNUNNVVVzUzBGQlN6ZENMRXRCUVU5MVJ5eEZRVUZOUnl4WFFVRlpMRU5CUTJoRExFbEJRVWxyUXl4RlFVRmxja01zUlVGRGJrSXNUMEZKUVhGRExFbEJRMVVzVlVGQlZHcExMRWRCUTFNc1lVRkJWRUVzU1VGRFJHbExMRVZCUVdGd1F5eFJRVUZWTlVNc1IwRkRka0pCTEVkQlFVOW5SaXhGUVVGaGJFTXNZVUZIZEVKclF5eEZRVUZsTEUxQlIycENMRWxCUVVsMFJTeEZRVUZUYzBVc1JVRkJaVUVzUlVGQllUZENMRmRCUVdFc1IwRkpkRVFzVDBGSVFYcERMRVZCUVU4elJpeExRVUZQUVN4RlFVTmtNa1lzUlVGQlQxWXNTVUZCVFVFc1JVRkZWR2RHTEVkQlEwWXZSeXhMUVVGTE9FSXNUMEZCVXl4UFFVTmtPVUlzUzBGQlN6VkNMRXRCUVU4eVNTeEZRVUZoYkVNc1YwRkRiRUo0UXl4SFFVZEdja01zUzBGQlMyZElMRk5CUVZOMlJTeEpRVWQyUW5WRkxGTkJRVlVzVTBGQlUzWkZMRVZCUVZGeFF5eEhRVU42UWl4SFFVRnZRaXhWUVVGb1FuSkRMRVZCUVU4elJpeExRVU5VTEUxQlFVMHlSaXhGUVVGUFZpeEpRV05tTEUxQldHOUNMRlZCUVdoQ1ZTeEZRVUZQTTBZc1RVRkRVeXhoUVVGb1FqSkdMRVZCUVU4elJpeExRVU5VYTBRc1MwRkJTelZDTEV0QlFVOXhSU3hGUVVGUFZpeEpRVU5OTEZkQlFXaENWU3hGUVVGUE0wWXNUVUZEYUVKclJDeExRVUZMZDBjc1MwRkJUM2hITEV0QlFVc3JRaXhKUVVGTlZTeEZRVUZQVml4SlFVTTVRaTlDTEV0QlFVczRRaXhQUVVGVExGTkJRMlE1UWl4TFFVRkxOVUlzUzBGQlR5eFBRVU5oTEZkQlFXaENjVVVzUlVGQlR6TkdMRTFCUVhGQ1owa3NTVUZEY2tNNVJTeExRVUZMTlVJc1MwRkJUekJITEVkQlIxQjZReXhIUVVkVU5FVXNUMEZCVVN4VFFVRlRjRU1zUjBGRFppeEpRVUZMTEVsQlFVbDBTeXhGUVVGSmVVWXNTMEZCU3l0RkxGZEJRVmN6Uml4UFFVRlRMRVZCUVVjM1JTeEhRVUZMTEVsQlFVdEJMRVZCUVVjc1EwRkRjRVFzU1VGQlNXMUxMRVZCUVZFeFJTeExRVUZMSzBVc1YwRkJWM2hMTEVkQlF6VkNMRWRCUVVsdFN5eEZRVUZOUnl4aFFVRmxRU3hGUVVkMlFpeFBRVVpCTjBVc1MwRkJTMmRJTEZOQlFWTjBReXhGUVVGTlVTeFhRVUZaVWl4RlFVRk5TU3hWUVVOMFEwY3NSVUZCWTFBc1IwRkRVSEpETEVsQlMySTJSU3hOUVVGVExGTkJRVk4yUXl4SFFVTm9RaXhKUVVGTExFbEJRVWx3U3l4RlFVRkplVVlzUzBGQlN5dEZMRmRCUVZjelJpeFBRVUZUTEVWQlFVYzNSU3hIUVVGTExFbEJRVXRCTEVWQlFVY3NRMEZEY0VRc1NVRkJTVzFMTEVWQlFWRXhSU3hMUVVGTEswVXNWMEZCVjNoTExFZEJRelZDTEVkQlFVbHRTeXhGUVVGTlF5eFRRVUZYUVN4RlFVRlJMRU5CUXpOQ0xFbEJRVWxzUXl4RlFVRlRhVU1zUlVGQlRWRXNWMEZEYmtJc1IwRkJiMElzVlVGQmFFSjZReXhGUVVGUE0wWXNTMEZCYTBJc1EwRkRNMElzU1VGQlNYRkxMRVZCUVZNeFJTeEZRVUZQVml4SlFVTndRbXRFTEVWQlFXTlFMRWRCUldoQ0xFOUJRVTk1UXl4SFFVMVlMRTFCUVUwc1NVRkJTVzVHTEUxQlFVMHNNRUpCUjJ4Q2IwWXNZMEZCWlN4VFFVRlRhRU1zUlVGQlZXUXNSVUZCV1VNc1IwRmhOVU1zVDBGYVFYWkZMRXRCUVV0clF5eFRRVUZYTEVOQlEyUjBRaXhUUVVGVmQwTXNSVUZCVDJkRExFZEJRMnBDWkN4WFFVRlpRU3hGUVVOYVF5eFJRVUZUUVN4SFFVZFRMRk5CUVdoQ2RrVXNTMEZCU3poQ0xGTkJSMUE1UWl4TFFVRkxLMElzVTBFNWNrSlFiME1zUjBGcGMwSlBPVUlzU1VGUlNtaEpMRVZCT1hOQ1N5eERRWEYwUWtwRExFVkJRVTlFTEZOQlIycENMRWxCUTBWblRpeHRRa0ZCY1VJNVJ5eEZRVU55UWl4TlFVRlBLMGNzUjBGWGJVSXNhVUpCUVdaRExGZEJRMVJCTEZkQlFWZEdMRzFDUVVGeFFqbEhMRVZCUldoRGFVZ3NVMEZCVXl4SlFVRkxMSGxDUVVGa1FTeERRVUYzUTJwSUxFdEJUM1JETEZOQlFWVnFSeXhGUVVGUlJDeEhRVVY0UWl4VFFVRlRiMDRzUlVGQlVXNUlMRWRCYVVKbUxFMUJaSE5DTEcxQ1FVRllha1lzVVVGQmIwUXNhVUpCUVhCQ1FTeFBRVUZQZFVZc1ZVRkRhRVIwUnl4RlFVRlBSQ3hSUVVGVmIwNHNSVUZCVlN4VFFVRnBRbTVJTEVkQlF6RkRMR05CUVdOQkxFZEJSMmhDYUVjc1JVRkJUMFFzVVVGQmFVSXNVVUZCU1VNc1JVRkJUMFFzVVVGQlUwTXNSVUZCVDBRc1VVRkJVWEZDTEZsQlFXRXNTVUZGZUVWd1FpeEZRVUZQUkN4UlFVRlZiMDRzUlVGQlZTeFRRVUZwUW01SUxFZEJRekZETEU5QlFVOUJMRWRCUVhsQ0xHMUNRVUZZYWtZc1VVRkJlVUpwUml4RlFVRkpjVVlzWTBGQlowSjBTeXhSUVVGVmFVWXNTVUZCVVdwR0xFOUJRVTloTEZWQlFWa3NaMEpCUVd0Q2IwVXNSMEZITTBob1J5eEZRVUZQUkN4UlFVRnBRaXhSUVVGSlF5eEZRVUZQUkN4UlFVRlRReXhGUVVGUFJDeFJRVUZSY1VJc1dVRkJZU3hIUVVkdVJTdE1MRVZCUVZGdVNDeEhRVWRxUW1oSExFVkJRVTlFTEZGQlFWVnZUaXhGUVVOcVFtNU9MRVZCUVU5RUxGRkJRV2xDTEZGQlFVbERMRVZCUVU5RUxGRkJRVk5ETEVWQlFVOUVMRkZCUVZGeFFpeFpRVUZoTEVkQlNXeEZMRk5CUVZWd1FpeEZRVUZSUkN4SFFVVjRRaXhUUVVGVGNVNHNSVUZCYlVKRExFVkJRVXN2UkN4RlFVRlRReXhGUVVGUkswUXNSVUZCVDBNc1JVRkJVV2hOTEVWQlFVdHJSeXhIUVVOd1JTeEpRVU5GTEVsQlFVbHpReXhGUVVGUGMwUXNSVUZCU1RsTUxFZEJRVXRyUnl4SFFVTm9RbmhITEVWQlFWRTRTU3hGUVVGTE9Va3NUVUZEYWtJc1RVRkJUekpKTEVkQlJWQXNXVUZFUVV3c1JVRkJUMHNzUjBGSlRFY3NSVUZCU3pGQ0xFdEJRMUJwUWl4RlFVRlJja2tzUjBGRlVubExMRkZCUVZGd1F5eFJRVUZSY2trc1IwRkJUM2xFTEV0QlFVczBTU3hGUVVGUFF5eEhRWGRDZGtOMlRpeEZRVUZQUkN4UlFYQkNVQ3hUUVVFeVFuZEpMRWRCUTNwQ0xFOUJRVThzVjBGRFRDeEpRVUZKZUVJc1JVRkJUM0pDTEV0QlExQTRTQ3hGUVVGUE4wZ3NWVUZEV0N4UFFVRlBMRWxCUVVrclJpeFRRVUZSTEZOQlFWVndReXhGUVVGVFF5eEhRVU53UXl4SlFVRkpPRVFzUlVGQlRUbEZMRVZCUVVkMFJDeE5RVUZOT0VJc1JVRkJUWGxITEVkQlJYcENMRk5CUVZOR0xFVkJRVTF5VFN4SFFVTmliVTBzUlVGQmJVSkRMRVZCUVVzdlJDeEZRVUZUUXl4RlFVRlJLMFFzUlVGQlQwTXNSVUZCVVN4UFFVRlJkRTBzUjBGSGJFVXNVMEZCVTNOTkxFVkJRVTk0U0N4SFFVTmtjVWdzUlVGQmJVSkRMRVZCUVVzdlJDeEZRVUZUUXl4RlFVRlJLMFFzUlVGQlQwTXNSVUZCVVN4UlFVRlRlRWdzUjBGSGJrVjFTQ3hQUVVGTmVrUXNVVUZOV2pkS0xFVkJRVTlFTEZGQlFXbENMRkZCUVVsRExFVkJRVTlFTEZGQlFWTkRMRVZCUVU5RUxGRkJRVkZ4UWl4WlFVRmhJaXdpWm1sc1pTSTZJbWx1WkdWNExuZHZjbXRsY2k1M2IzSnJaWEl1YW5NaUxDSnpiM1Z5WTJWU2IyOTBJam9pSW4wPVwiLCBcIldvcmtlclwiLCB1bmRlZmluZWQsIF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJpbmRleC53b3JrZXIud29ya2VyLmpzXCIpO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==